window.EmberENV = (function(EmberENV, extra) {
  for (var key in extra) {
    EmberENV[key] = extra[key];
  }

  return EmberENV;
})(window.EmberENV || {}, {"FEATURES":{},"_APPLICATION_TEMPLATE_WRAPPER":false,"_DEFAULT_ASYNC_OBSERVERS":true,"_JQUERY_INTEGRATION":false,"_TEMPLATE_ONLY_GLIMMER_COMPONENTS":true});

// used to determine if the application should be booted immediately when `app-name.js` is evaluated
// when `runningTests` the `app-name.js` file will **not** import the applications `app/app.js` and
// call `Application.create(...)` on it. Additionally, applications can opt-out of this behavior by
// setting `autoRun` to `false` in their `ember-cli-build.js`
//
// The default `test-support.js` file will set this to `true` when it runs (so that Application.create()
// is not ran when running tests).
var runningTests = false;



;var loader, define, requireModule, require, requirejs;

(function (global) {
  'use strict';

  function dict() {
    var obj = Object.create(null);
    obj['__'] = undefined;
    delete obj['__'];
    return obj;
  }

  // Save off the original values of these globals, so we can restore them if someone asks us to
  var oldGlobals = {
    loader: loader,
    define: define,
    requireModule: requireModule,
    require: require,
    requirejs: requirejs
  };

  requirejs = require = requireModule = function (id) {
    var pending = [];
    var mod = findModule(id, '(require)', pending);

    for (var i = pending.length - 1; i >= 0; i--) {
      pending[i].exports();
    }

    return mod.module.exports;
  };

  loader = {
    noConflict: function (aliases) {
      var oldName, newName;

      for (oldName in aliases) {
        if (aliases.hasOwnProperty(oldName)) {
          if (oldGlobals.hasOwnProperty(oldName)) {
            newName = aliases[oldName];

            global[newName] = global[oldName];
            global[oldName] = oldGlobals[oldName];
          }
        }
      }
    },
    // Option to enable or disable the generation of default exports
    makeDefaultExport: true
  };

  var registry = dict();
  var seen = dict();

  var uuid = 0;

  function unsupportedModule(length) {
    throw new Error('an unsupported module was defined, expected `define(id, deps, module)` instead got: `' + length + '` arguments to define`');
  }

  var defaultDeps = ['require', 'exports', 'module'];

  function Module(id, deps, callback, alias) {
    this.uuid = uuid++;
    this.id = id;
    this.deps = !deps.length && callback.length ? defaultDeps : deps;
    this.module = { exports: {} };
    this.callback = callback;
    this.hasExportsAsDep = false;
    this.isAlias = alias;
    this.reified = new Array(deps.length);

    /*
       Each module normally passes through these states, in order:
         new       : initial state
         pending   : this module is scheduled to be executed
         reifying  : this module's dependencies are being executed
         reified   : this module's dependencies finished executing successfully
         errored   : this module's dependencies failed to execute
         finalized : this module executed successfully
     */
    this.state = 'new';
  }

  Module.prototype.makeDefaultExport = function () {
    var exports = this.module.exports;
    if (exports !== null && (typeof exports === 'object' || typeof exports === 'function') && exports['default'] === undefined && Object.isExtensible(exports)) {
      exports['default'] = exports;
    }
  };

  Module.prototype.exports = function () {
    // if finalized, there is no work to do. If reifying, there is a
    // circular dependency so we must return our (partial) exports.
    if (this.state === 'finalized' || this.state === 'reifying') {
      return this.module.exports;
    }


    if (loader.wrapModules) {
      this.callback = loader.wrapModules(this.id, this.callback);
    }

    this.reify();

    var result = this.callback.apply(this, this.reified);
    this.reified.length = 0;
    this.state = 'finalized';

    if (!(this.hasExportsAsDep && result === undefined)) {
      this.module.exports = result;
    }
    if (loader.makeDefaultExport) {
      this.makeDefaultExport();
    }
    return this.module.exports;
  };

  Module.prototype.unsee = function () {
    this.state = 'new';
    this.module = { exports: {} };
  };

  Module.prototype.reify = function () {
    if (this.state === 'reified') {
      return;
    }
    this.state = 'reifying';
    try {
      this.reified = this._reify();
      this.state = 'reified';
    } finally {
      if (this.state === 'reifying') {
        this.state = 'errored';
      }
    }
  };

  Module.prototype._reify = function () {
    var reified = this.reified.slice();
    for (var i = 0; i < reified.length; i++) {
      var mod = reified[i];
      reified[i] = mod.exports ? mod.exports : mod.module.exports();
    }
    return reified;
  };

  Module.prototype.findDeps = function (pending) {
    if (this.state !== 'new') {
      return;
    }

    this.state = 'pending';

    var deps = this.deps;

    for (var i = 0; i < deps.length; i++) {
      var dep = deps[i];
      var entry = this.reified[i] = { exports: undefined, module: undefined };
      if (dep === 'exports') {
        this.hasExportsAsDep = true;
        entry.exports = this.module.exports;
      } else if (dep === 'require') {
        entry.exports = this.makeRequire();
      } else if (dep === 'module') {
        entry.exports = this.module;
      } else {
        entry.module = findModule(resolve(dep, this.id), this.id, pending);
      }
    }
  };

  Module.prototype.makeRequire = function () {
    var id = this.id;
    var r = function (dep) {
      return require(resolve(dep, id));
    };
    r['default'] = r;
    r.moduleId = id;
    r.has = function (dep) {
      return has(resolve(dep, id));
    };
    return r;
  };

  define = function (id, deps, callback) {
    var module = registry[id];

    // If a module for this id has already been defined and is in any state
    // other than `new` (meaning it has been or is currently being required),
    // then we return early to avoid redefinition.
    if (module && module.state !== 'new') {
      return;
    }

    if (arguments.length < 2) {
      unsupportedModule(arguments.length);
    }

    if (!Array.isArray(deps)) {
      callback = deps;
      deps = [];
    }

    if (callback instanceof Alias) {
      registry[id] = new Module(callback.id, deps, callback, true);
    } else {
      registry[id] = new Module(id, deps, callback, false);
    }
  };

  define.exports = function (name, defaultExport) {
    var module = registry[name];

    // If a module for this name has already been defined and is in any state
    // other than `new` (meaning it has been or is currently being required),
    // then we return early to avoid redefinition.
    if (module && module.state !== 'new') {
      return;
    }

    module = new Module(name, [], noop, null);
    module.module.exports = defaultExport;
    module.state = 'finalized';
    registry[name] = module;

    return module;
  };

  function noop() {}
  // we don't support all of AMD
  // define.amd = {};

  function Alias(id) {
    this.id = id;
  }

  define.alias = function (id, target) {
    if (arguments.length === 2) {
      return define(target, new Alias(id));
    }

    return new Alias(id);
  };

  function missingModule(id, referrer) {
    throw new Error('Could not find module `' + id + '` imported from `' + referrer + '`');
  }

  function findModule(id, referrer, pending) {
    var mod = registry[id] || registry[id + '/index'];

    while (mod && mod.isAlias) {
      mod = registry[mod.id] || registry[mod.id + '/index'];
    }

    if (!mod) {
      missingModule(id, referrer);
    }

    if (pending && mod.state !== 'pending' && mod.state !== 'finalized') {
      mod.findDeps(pending);
      pending.push(mod);
    }
    return mod;
  }

  function resolve(child, id) {
    if (child.charAt(0) !== '.') {
      return child;
    }


    var parts = child.split('/');
    var nameParts = id.split('/');
    var parentBase = nameParts.slice(0, -1);

    for (var i = 0, l = parts.length; i < l; i++) {
      var part = parts[i];

      if (part === '..') {
        if (parentBase.length === 0) {
          throw new Error('Cannot access parent module of root');
        }
        parentBase.pop();
      } else if (part === '.') {
        continue;
      } else {
        parentBase.push(part);
      }
    }

    return parentBase.join('/');
  }

  function has(id) {
    return !!(registry[id] || registry[id + '/index']);
  }

  requirejs.entries = requirejs._eak_seen = registry;
  requirejs.has = has;
  requirejs.unsee = function (id) {
    findModule(id, '(unsee)', false).unsee();
  };

  requirejs.clear = function () {
    requirejs.entries = requirejs._eak_seen = registry = dict();
    seen = dict();
  };

  // This code primes the JS engine for good performance by warming the
  // JIT compiler for these functions.
  define('foo', function () {});
  define('foo/bar', [], function () {});
  define('foo/asdf', ['module', 'exports', 'require'], function (module, exports, require) {
    if (require.has('foo/bar')) {
      require('foo/bar');
    }
  });
  define('foo/baz', [], define.alias('foo'));
  define('foo/quz', define.alias('foo'));
  define.alias('foo', 'foo/qux');
  define('foo/bar', ['foo', './quz', './baz', './asdf', './bar', '../foo'], function () {});
  define('foo/main', ['foo/bar'], function () {});
  define.exports('foo/exports', {});

  require('foo/exports');
  require('foo/main');
  require.unsee('foo/bar');

  requirejs.clear();

  if (typeof exports === 'object' && typeof module === 'object' && module.exports) {
    module.exports = { require: require, define: define };
  }
})(this);
;(function() {
/*!
 * @overview  Ember - JavaScript Application Framework
 * @copyright Copyright 2011 Tilde Inc. and contributors
 *            Portions Copyright 2006-2011 Strobe Inc.
 *            Portions Copyright 2008-2011 Apple Inc. All rights reserved.
 * @license   Licensed under MIT license
 *            See https://raw.github.com/emberjs/ember.js/master/LICENSE
 * @version   4.12.3
 */
/* eslint-disable no-var */
/* globals global globalThis self */
/* eslint-disable-next-line no-unused-vars */
var define, require;
(function () {
  var globalObj = typeof globalThis !== 'undefined' ? globalThis : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : null;
  if (globalObj === null) {
    throw new Error('unable to locate global object');
  }
  if (typeof globalObj.define === 'function' && typeof globalObj.require === 'function') {
    define = globalObj.define;
    require = globalObj.require;
    return;
  }
  var registry = Object.create(null);
  var seen = Object.create(null);
  function missingModule(name, referrerName) {
    if (referrerName) {
      throw new Error('Could not find module ' + name + ' required by: ' + referrerName);
    } else {
      throw new Error('Could not find module ' + name);
    }
  }
  function internalRequire(_name, referrerName) {
    var name = _name;
    var mod = registry[name];
    if (!mod) {
      name = name + '/index';
      mod = registry[name];
    }
    var exports = seen[name];
    if (exports !== undefined) {
      return exports;
    }
    exports = seen[name] = {};
    if (!mod) {
      missingModule(_name, referrerName);
    }
    var deps = mod.deps;
    var callback = mod.callback;
    var reified = new Array(deps.length);
    for (var i = 0; i < deps.length; i++) {
      if (deps[i] === 'exports') {
        reified[i] = exports;
      } else if (deps[i] === 'require') {
        reified[i] = require;
      } else {
        reified[i] = require(deps[i], name);
      }
    }
    callback.apply(this, reified);
    return exports;
  }
  require = function (name) {
    return internalRequire(name, null);
  };
  define = function (name, deps, callback) {
    registry[name] = {
      deps: deps,
      callback: callback
    };
  };

  // setup `require` module
  require['default'] = require;
  require.has = function registryHas(moduleName) {
    return Boolean(registry[moduleName]) || Boolean(registry[moduleName + '/index']);
  };
  require._eak_seen = require.entries = registry;
})();
define("@ember/-internals/bootstrap/index", ["require"], function (_require) {
  "use strict";

  (function bootstrap() {
    // Bootstrap Node module
    if (typeof module === 'object' && typeof module.require === 'function') {
      module.exports = (0, _require.default)("ember").default;
    }
  })();
});
define("@ember/-internals/browser-environment/index", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.window = _exports.userAgent = _exports.location = _exports.isFirefox = _exports.isChrome = _exports.history = _exports.hasDOM = void 0;
  // check if window exists and actually is the global
  var hasDom = typeof self === 'object' && self !== null && self.Object === Object && typeof Window !== 'undefined' && self.constructor === Window && typeof document === 'object' && document !== null && self.document === document && typeof location === 'object' && location !== null && self.location === location && typeof history === 'object' && history !== null && self.history === history && typeof navigator === 'object' && navigator !== null && self.navigator === navigator && typeof navigator.userAgent === 'string';
  _exports.hasDOM = hasDom;
  var window = hasDom ? self : null;
  _exports.window = window;
  var location$1 = hasDom ? self.location : null;
  _exports.location = location$1;
  var history$1 = hasDom ? self.history : null;
  _exports.history = history$1;
  var userAgent = hasDom ? self.navigator.userAgent : 'Lynx (textmode)';
  _exports.userAgent = userAgent;
  var isChrome = hasDom ? typeof chrome === 'object' && !(typeof opera === 'object') : false;
  _exports.isChrome = isChrome;
  var isFirefox = hasDom ? /Firefox|FxiOS/.test(userAgent) : false;
  _exports.isFirefox = isFirefox;
});
define("@ember/-internals/container/index", ["exports", "@ember/-internals/owner", "@ember/-internals/utils", "@ember/debug"], function (_exports, _owner, _utils, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Registry = _exports.INIT_FACTORY = _exports.Container = void 0;
  _exports.getFactoryFor = getFactoryFor;
  _exports.privatize = privatize;
  _exports.setFactoryFor = setFactoryFor;
  var leakTracking;
  var containers;
  if (true /* DEBUG */) {
    // requires v8
    // chrome --js-flags="--allow-natives-syntax --expose-gc"
    // node --allow-natives-syntax --expose-gc
    try {
      if (typeof gc === 'function') {
        leakTracking = (() => {
          // avoid syntax errors when --allow-natives-syntax not present
          var GetWeakSetValues = new Function('weakSet', 'return %GetWeakSetValues(weakSet, 0)');
          containers = new WeakSet();
          return {
            hasContainers() {
              // @ts-expect-error We just checked if it is definied
              gc();
              return GetWeakSetValues(containers).length > 0;
            },
            reset() {
              var values = GetWeakSetValues(containers);
              for (var i = 0; i < values.length; i++) {
                containers.delete(values[i]);
              }
            }
          };
        })();
      }
    } catch (e) {
      // ignore
    }
  }
  /**
   A container used to instantiate and cache objects.
  
   Every `Container` must be associated with a `Registry`, which is referenced
   to determine the factory and options that should be used to instantiate
   objects.
  
   The public API for `Container` is still in flux and should not be considered
   stable.
  
   @private
   @class Container
   */
  class Container {
    constructor(registry, options) {
      if (options === void 0) {
        options = {};
      }
      this.registry = registry;
      this.owner = options.owner || null;
      this.cache = (0, _utils.dictionary)(options.cache || null);
      this.factoryManagerCache = (0, _utils.dictionary)(options.factoryManagerCache || null);
      this.isDestroyed = false;
      this.isDestroying = false;
      if (true /* DEBUG */) {
        this.validationCache = (0, _utils.dictionary)(options.validationCache || null);
        if (containers !== undefined) {
          containers.add(this);
        }
      }
    }
    /**
     @private
     @property registry
     @type Registry
     @since 1.11.0
     */
    /**
     @private
     @property cache
     @type InheritingDict
     */
    /**
     @private
     @property validationCache
     @type InheritingDict
     */
    /**
     Given a fullName return a corresponding instance.
      The default behavior is for lookup to return a singleton instance.
     The singleton is scoped to the container, allowing multiple containers
     to all have their own locally scoped singletons.
      ```javascript
     let registry = new Registry();
     let container = registry.container();
      registry.register('api:twitter', Twitter);
      let twitter = container.lookup('api:twitter');
      twitter instanceof Twitter; // => true
      // by default the container will return singletons
     let twitter2 = container.lookup('api:twitter');
     twitter2 instanceof Twitter; // => true
      twitter === twitter2; //=> true
     ```
      If singletons are not wanted, an optional flag can be provided at lookup.
      ```javascript
     let registry = new Registry();
     let container = registry.container();
      registry.register('api:twitter', Twitter);
      let twitter = container.lookup('api:twitter', { singleton: false });
     let twitter2 = container.lookup('api:twitter', { singleton: false });
      twitter === twitter2; //=> false
     ```
      @private
     @method lookup
     @param {String} fullName
     @param {RegisterOptions} [options]
     @return {any}
     */
    lookup(fullName, options) {
      if (this.isDestroyed) {
        throw new Error(`Cannot call \`.lookup('${fullName}')\` after the owner has been destroyed`);
      }
      (true && !(this.registry.isValidFullName(fullName)) && (0, _debug.assert)('fullName must be a proper full name', this.registry.isValidFullName(fullName)));
      return lookup(this, this.registry.normalize(fullName), options);
    }
    /**
     A depth first traversal, destroying the container, its descendant containers and all
     their managed objects.
      @private
     @method destroy
     */
    destroy() {
      this.isDestroying = true;
      destroyDestroyables(this);
    }
    finalizeDestroy() {
      resetCache(this);
      this.isDestroyed = true;
    }
    /**
     Clear either the entire cache or just the cache for a particular key.
        @private
     @method reset
     @param {String} fullName optional key to reset; if missing, resets everything
    */
    reset(fullName) {
      if (this.isDestroyed) return;
      if (fullName === undefined) {
        destroyDestroyables(this);
        resetCache(this);
      } else {
        resetMember(this, this.registry.normalize(fullName));
      }
    }
    /**
     Returns an object that can be used to provide an owner to a
     manually created instance.
      @private
     @method ownerInjection
     @returns { Object }
    */
    ownerInjection() {
      var injection = {};
      (0, _owner.setOwner)(injection, this.owner);
      return injection;
    }
    /**
     Given a fullName, return the corresponding factory. The consumer of the factory
     is responsible for the destruction of any factory instances, as there is no
     way for the container to ensure instances are destroyed when it itself is
     destroyed.
      @public
     @method factoryFor
     @param {String} fullName
     @return {any}
     */
    factoryFor(fullName) {
      if (this.isDestroyed) {
        throw new Error(`Cannot call \`.factoryFor('${fullName}')\` after the owner has been destroyed`);
      }
      var normalizedName = this.registry.normalize(fullName);
      (true && !(this.registry.isValidFullName(normalizedName)) && (0, _debug.assert)('fullName must be a proper full name', this.registry.isValidFullName(normalizedName)));
      return factoryFor(this, normalizedName, fullName);
    }
  }
  _exports.Container = Container;
  if (true /* DEBUG */) {
    Container._leakTracking = leakTracking;
  }
  /*
   * Wrap a factory manager in a proxy which will not permit properties to be
   * set on the manager.
   */
  function wrapManagerInDeprecationProxy(manager) {
    var validator = {
      set(_obj, prop) {
        throw new Error(`You attempted to set "${String(prop)}" on a factory manager created by container#factoryFor. A factory manager is a read-only construct.`);
      }
    };
    // Note:
    // We have to proxy access to the manager here so that private property
    // access doesn't cause the above errors to occur.
    var m = manager;
    var proxiedManager = {
      class: m.class,
      create(props) {
        return m.create(props);
      }
    };
    return new Proxy(proxiedManager, validator);
  }
  function isSingleton(container, fullName) {
    return container.registry.getOption(fullName, 'singleton') !== false;
  }
  function isInstantiatable(container, fullName) {
    return container.registry.getOption(fullName, 'instantiate') !== false;
  }
  function lookup(container, fullName, options) {
    if (options === void 0) {
      options = {};
    }
    var normalizedName = fullName;
    if (options.singleton === true || options.singleton === undefined && isSingleton(container, fullName)) {
      var cached = container.cache[normalizedName];
      if (cached !== undefined) {
        return cached;
      }
    }
    return instantiateFactory(container, normalizedName, fullName, options);
  }
  function factoryFor(container, normalizedName, fullName) {
    var cached = container.factoryManagerCache[normalizedName];
    if (cached !== undefined) {
      return cached;
    }
    var factory = container.registry.resolve(normalizedName);
    if (factory === undefined) {
      return;
    }
    if (true /* DEBUG */ && factory && typeof factory._onLookup === 'function') {
      factory._onLookup(fullName);
    }
    var manager = new InternalFactoryManager(container, factory, fullName, normalizedName);
    if (true /* DEBUG */) {
      manager = wrapManagerInDeprecationProxy(manager);
    }
    container.factoryManagerCache[normalizedName] = manager;
    return manager;
  }
  function isSingletonClass(container, fullName, _ref) {
    var {
      instantiate,
      singleton
    } = _ref;
    return singleton !== false && !instantiate && isSingleton(container, fullName) && !isInstantiatable(container, fullName);
  }
  function isSingletonInstance(container, fullName, _ref2) {
    var {
      instantiate,
      singleton
    } = _ref2;
    return singleton !== false && instantiate !== false && (singleton === true || isSingleton(container, fullName)) && isInstantiatable(container, fullName);
  }
  function isFactoryClass(container, fullname, _ref3) {
    var {
      instantiate,
      singleton
    } = _ref3;
    return instantiate === false && (singleton === false || !isSingleton(container, fullname)) && !isInstantiatable(container, fullname);
  }
  function isFactoryInstance(container, fullName, _ref4) {
    var {
      instantiate,
      singleton
    } = _ref4;
    return instantiate !== false && (singleton === false || !isSingleton(container, fullName)) && isInstantiatable(container, fullName);
  }
  function instantiateFactory(container, normalizedName, fullName, options) {
    var factoryManager = factoryFor(container, normalizedName, fullName);
    if (factoryManager === undefined) {
      return;
    }
    // SomeClass { singleton: true, instantiate: true } | { singleton: true } | { instantiate: true } | {}
    // By default majority of objects fall into this case
    if (isSingletonInstance(container, fullName, options)) {
      var instance = container.cache[normalizedName] = factoryManager.create();
      // if this lookup happened _during_ destruction (emits a deprecation, but
      // is still possible) ensure that it gets destroyed
      if (container.isDestroying) {
        if (typeof instance.destroy === 'function') {
          instance.destroy();
        }
      }
      return instance;
    }
    // SomeClass { singleton: false, instantiate: true }
    if (isFactoryInstance(container, fullName, options)) {
      return factoryManager.create();
    }
    // SomeClass { singleton: true, instantiate: false } | { instantiate: false } | { singleton: false, instantiation: false }
    if (isSingletonClass(container, fullName, options) || isFactoryClass(container, fullName, options)) {
      return factoryManager.class;
    }
    throw new Error('Could not create factory');
  }
  function destroyDestroyables(container) {
    var cache = container.cache;
    var keys = Object.keys(cache);
    for (var key of keys) {
      var value = cache[key];
      (true && !(value) && (0, _debug.assert)('has cached value', value));
      if (value.destroy) {
        value.destroy();
      }
    }
  }
  function resetCache(container) {
    container.cache = (0, _utils.dictionary)(null);
    container.factoryManagerCache = (0, _utils.dictionary)(null);
  }
  function resetMember(container, fullName) {
    var member = container.cache[fullName];
    delete container.factoryManagerCache[fullName];
    if (member) {
      delete container.cache[fullName];
      if (member.destroy) {
        member.destroy();
      }
    }
  }
  var INIT_FACTORY = Symbol('INIT_FACTORY');
  _exports.INIT_FACTORY = INIT_FACTORY;
  function getFactoryFor(obj) {
    // SAFETY: since we know `obj` is an `object`, we also know we can safely ask
    // whether a key is set on it.
    return obj[INIT_FACTORY];
  }
  function setFactoryFor(obj, factory) {
    // SAFETY: since we know `obj` is an `object`, we also know we can safely set
    // a key it safely at this location. (The only way this could be blocked is if
    // someone has gone out of their way to use `Object.defineProperty()` with our
    // internal-only symbol and made it `writable: false`.)
    obj[INIT_FACTORY] = factory;
  }
  class InternalFactoryManager {
    constructor(container, factory, fullName, normalizedName) {
      this.container = container;
      this.owner = container.owner;
      this.class = factory;
      this.fullName = fullName;
      this.normalizedName = normalizedName;
      this.madeToString = undefined;
      this.injections = undefined;
    }
    toString() {
      if (this.madeToString === undefined) {
        this.madeToString = this.container.registry.makeToString(this.class, this.fullName);
      }
      return this.madeToString;
    }
    create(options) {
      var {
        container
      } = this;
      if (container.isDestroyed) {
        throw new Error(`Cannot create new instances after the owner has been destroyed (you attempted to create ${this.fullName})`);
      }
      var props = options ? Object.assign({}, options) : {};
      (0, _owner.setOwner)(props, container.owner);
      setFactoryFor(props, this);
      if (true /* DEBUG */) {
        var lazyInjections;
        var validationCache = this.container.validationCache;
        // Ensure that all lazy injections are valid at instantiation time
        if (!validationCache[this.fullName] && this.class && typeof this.class._lazyInjections === 'function') {
          lazyInjections = this.class._lazyInjections();
          lazyInjections = this.container.registry.normalizeInjectionsHash(lazyInjections);
          this.container.registry.validateInjections(lazyInjections);
        }
        validationCache[this.fullName] = true;
        (true && !(typeof this.class.create === 'function') && (0, _debug.assert)(`Failed to create an instance of '${this.normalizedName}'. Most likely an improperly defined class or an invalid module export.`, typeof this.class.create === 'function'));
      }
      return this.class.create(props);
    }
  }
  var VALID_FULL_NAME_REGEXP = /^[^:]+:[^:]+$/;
  /**
   A registry used to store factory and option information keyed
   by type.
  
   A `Registry` stores the factory and option information needed by a
   `Container` to instantiate and cache objects.
  
   The API for `Registry` is still in flux and should not be considered stable.
  
   @private
   @class Registry
   @since 1.11.0
  */
  class Registry {
    constructor(options) {
      if (options === void 0) {
        options = {};
      }
      this.fallback = options.fallback || null;
      this.resolver = options.resolver || null;
      this.registrations = (0, _utils.dictionary)(options.registrations || null);
      this._normalizeCache = (0, _utils.dictionary)(null);
      this._resolveCache = (0, _utils.dictionary)(null);
      this._failSet = new Set();
      this._options = (0, _utils.dictionary)(null);
      this._typeOptions = (0, _utils.dictionary)(null);
    }
    /**
     A backup registry for resolving registrations when no matches can be found.
        @private
     @property fallback
     @type Registry
     */
    /**
     An object that has a `resolve` method that resolves a name.
        @private
     @property resolver
     @type Resolver
     */
    /**
     @private
     @property registrations
     @type InheritingDict
     */
    /**
     @private
        @property _normalizeCache
     @type InheritingDict
     */
    /**
     @private
        @property _resolveCache
     @type InheritingDict
     */
    /**
     @private
        @property _options
     @type InheritingDict
     */
    /**
     @private
        @property _typeOptions
     @type InheritingDict
     */
    /**
     Creates a container based on this registry.
        @private
     @method container
     @param {Object} options
     @return {Container} created container
     */
    container(options) {
      return new Container(this, options);
    }
    register(fullName, factory, options) {
      if (options === void 0) {
        options = {};
      }
      (true && !(this.isValidFullName(fullName)) && (0, _debug.assert)('fullName must be a proper full name', this.isValidFullName(fullName)));
      (true && !(factory !== undefined) && (0, _debug.assert)(`Attempting to register an unknown factory: '${fullName}'`, factory !== undefined));
      var normalizedName = this.normalize(fullName);
      (true && !(!this._resolveCache[normalizedName]) && (0, _debug.assert)(`Cannot re-register: '${fullName}', as it has already been resolved.`, !this._resolveCache[normalizedName]));
      this._failSet.delete(normalizedName);
      this.registrations[normalizedName] = factory;
      this._options[normalizedName] = options;
    }
    /**
     Unregister a fullName
        ```javascript
     let registry = new Registry();
     registry.register('model:user', User);
        registry.resolve('model:user').create() instanceof User //=> true
        registry.unregister('model:user')
     registry.resolve('model:user') === undefined //=> true
     ```
        @private
     @method unregister
     @param {String} fullName
     */
    unregister(fullName) {
      (true && !(this.isValidFullName(fullName)) && (0, _debug.assert)('fullName must be a proper full name', this.isValidFullName(fullName)));
      var normalizedName = this.normalize(fullName);
      delete this.registrations[normalizedName];
      delete this._resolveCache[normalizedName];
      delete this._options[normalizedName];
      this._failSet.delete(normalizedName);
    }
    /**
     Given a fullName return the corresponding factory.
        By default `resolve` will retrieve the factory from
     the registry.
        ```javascript
     let registry = new Registry();
     registry.register('api:twitter', Twitter);
        registry.resolve('api:twitter') // => Twitter
     ```
        Optionally the registry can be provided with a custom resolver.
     If provided, `resolve` will first provide the custom resolver
     the opportunity to resolve the fullName, otherwise it will fallback
     to the registry.
        ```javascript
     let registry = new Registry();
     registry.resolver = function(fullName) {
        // lookup via the module system of choice
      };
        // the twitter factory is added to the module system
     registry.resolve('api:twitter') // => Twitter
     ```
        @private
     @method resolve
     @param {String} fullName
     @return {Function} fullName's factory
     */
    resolve(fullName) {
      var factory = resolve(this, this.normalize(fullName));
      if (factory === undefined && this.fallback !== null) {
        factory = this.fallback.resolve(fullName);
      }
      return factory;
    }
    /**
     A hook that can be used to describe how the resolver will
     attempt to find the factory.
        For example, the default Ember `.describe` returns the full
     class name (including namespace) where Ember's resolver expects
     to find the `fullName`.
        @private
     @method describe
     @param {String} fullName
     @return {string} described fullName
     */
    describe(fullName) {
      if (this.resolver !== null && this.resolver.lookupDescription) {
        return this.resolver.lookupDescription(fullName);
      } else if (this.fallback !== null) {
        return this.fallback.describe(fullName);
      } else {
        return fullName;
      }
    }
    /**
     A hook to enable custom fullName normalization behavior
        @private
     @method normalizeFullName
     @param {String} fullName
     @return {string} normalized fullName
     */
    normalizeFullName(fullName) {
      if (this.resolver !== null && this.resolver.normalize) {
        return this.resolver.normalize(fullName);
      } else if (this.fallback !== null) {
        return this.fallback.normalizeFullName(fullName);
      } else {
        return fullName;
      }
    }
    /**
     Normalize a fullName based on the application's conventions
        @private
     @method normalize
     @param {String} fullName
     @return {string} normalized fullName
     */
    normalize(fullName) {
      return this._normalizeCache[fullName] || (this._normalizeCache[fullName] = this.normalizeFullName(fullName));
    }
    /**
     @method makeToString
        @private
     @param {any} factory
     @param {string} fullName
     @return {function} toString function
     */
    makeToString(factory, fullName) {
      var _a;
      if (this.resolver !== null && this.resolver.makeToString) {
        return this.resolver.makeToString(factory, fullName);
      } else if (this.fallback !== null) {
        return this.fallback.makeToString(factory, fullName);
      } else {
        return typeof factory === 'string' ? factory : (_a = factory.name) !== null && _a !== void 0 ? _a : '(unknown class)';
      }
    }
    /**
     Given a fullName check if the container is aware of its factory
     or singleton instance.
        @private
     @method has
     @param {String} fullName
     @param {Object} [options]
     @param {String} [options.source] the fullname of the request source (used for local lookups)
     @return {Boolean}
     */
    has(fullName) {
      if (!this.isValidFullName(fullName)) {
        return false;
      }
      return has(this, this.normalize(fullName));
    }
    /**
     Allow registering options for all factories of a type.
        ```javascript
     let registry = new Registry();
     let container = registry.container();
        // if all of type `connection` must not be singletons
     registry.optionsForType('connection', { singleton: false });
        registry.register('connection:twitter', TwitterConnection);
     registry.register('connection:facebook', FacebookConnection);
        let twitter = container.lookup('connection:twitter');
     let twitter2 = container.lookup('connection:twitter');
        twitter === twitter2; // => false
        let facebook = container.lookup('connection:facebook');
     let facebook2 = container.lookup('connection:facebook');
        facebook === facebook2; // => false
     ```
        @private
     @method optionsForType
     @param {String} type
     @param {Object} options
     */
    optionsForType(type, options) {
      this._typeOptions[type] = options;
    }
    getOptionsForType(type) {
      var optionsForType = this._typeOptions[type];
      if (optionsForType === undefined && this.fallback !== null) {
        optionsForType = this.fallback.getOptionsForType(type);
      }
      return optionsForType;
    }
    /**
     @private
     @method options
     @param {String} fullName
     @param {Object} options
     */
    options(fullName, options) {
      var normalizedName = this.normalize(fullName);
      this._options[normalizedName] = options;
    }
    getOptions(fullName) {
      var normalizedName = this.normalize(fullName);
      var options = this._options[normalizedName];
      if (options === undefined && this.fallback !== null) {
        options = this.fallback.getOptions(fullName);
      }
      return options;
    }
    getOption(fullName, optionName) {
      var options = this._options[fullName];
      if (options !== undefined && options[optionName] !== undefined) {
        return options[optionName];
      }
      var type = fullName.split(':')[0];
      (true && !(type) && (0, _debug.assert)('has type', type)); // split always will have at least one value
      options = this._typeOptions[type];
      if (options && options[optionName] !== undefined) {
        return options[optionName];
      } else if (this.fallback !== null) {
        return this.fallback.getOption(fullName, optionName);
      }
      return undefined;
    }
    /**
     This is deprecated in favor of explicit injection of dependencies.
        Reference: https://deprecations.emberjs.com/v3.x#toc_implicit-injections
     ```
        @private
     @method injection
     @param {String} fullName
     @param {String} property
     @deprecated
     */
    injection(fullName, property) {
      (true && !(false) && (0, _debug.deprecate)(`As of Ember 4.0.0, owner.inject no longer injects values into resolved instances, and calling the method has been deprecated. Since this method no longer does anything, it is fully safe to remove this injection. As an alternative to this API, you can refactor to explicitly inject \`${property}\` on \`${fullName}\`, or look it up directly using the \`getOwner\` API.`, false, {
        id: 'remove-owner-inject',
        until: '5.0.0',
        url: 'https://deprecations.emberjs.com/v4.x#toc_implicit-injections',
        for: 'ember-source',
        since: {
          available: '4.0.0',
          enabled: '4.0.0'
        }
      }));
    }
    /**
     @private
     @method knownForType
     @param {String} type the type to iterate over
    */
    knownForType(type) {
      var localKnown = (0, _utils.dictionary)(null);
      var registeredNames = Object.keys(this.registrations);
      for (var fullName of registeredNames) {
        var itemType = fullName.split(':')[0];
        if (itemType === type) {
          localKnown[fullName] = true;
        }
      }
      var fallbackKnown, resolverKnown;
      if (this.fallback !== null) {
        fallbackKnown = this.fallback.knownForType(type);
      }
      if (this.resolver !== null && this.resolver.knownForType) {
        resolverKnown = this.resolver.knownForType(type);
      }
      return Object.assign({}, fallbackKnown, localKnown, resolverKnown);
    }
    isValidFullName(fullName) {
      return VALID_FULL_NAME_REGEXP.test(fullName);
    }
  }
  _exports.Registry = Registry;
  if (true /* DEBUG */) {
    var proto = Registry.prototype;
    proto.normalizeInjectionsHash = function (hash) {
      var injections = [];
      for (var key in hash) {
        if (Object.prototype.hasOwnProperty.call(hash, key)) {
          var value = hash[key];
          (true && !(value) && (0, _debug.assert)('has value', value));
          var {
            specifier
          } = value;
          (true && !(this.isValidFullName(specifier)) && (0, _debug.assert)(`Expected a proper full name, given '${specifier}'`, this.isValidFullName(specifier)));
          injections.push({
            property: key,
            specifier
          });
        }
      }
      return injections;
    };
    proto.validateInjections = function (injections) {
      if (!injections) {
        return;
      }
      for (var injection of injections) {
        var {
          specifier
        } = injection;
        (true && !(this.has(specifier)) && (0, _debug.assert)(`Attempting to inject an unknown injection: '${specifier}'`, this.has(specifier)));
      }
    };
  }
  function resolve(registry, _normalizedName) {
    var normalizedName = _normalizedName;
    var cached = registry._resolveCache[normalizedName];
    if (cached !== undefined) {
      return cached;
    }
    if (registry._failSet.has(normalizedName)) {
      return;
    }
    var resolved;
    if (registry.resolver) {
      resolved = registry.resolver.resolve(normalizedName);
    }
    if (resolved === undefined) {
      resolved = registry.registrations[normalizedName];
    }
    if (resolved === undefined) {
      registry._failSet.add(normalizedName);
    } else {
      registry._resolveCache[normalizedName] = resolved;
    }
    return resolved;
  }
  function has(registry, fullName) {
    return registry.resolve(fullName) !== undefined;
  }
  var privateNames = (0, _utils.dictionary)(null);
  var privateSuffix = `${Math.random()}${Date.now()}`.replace('.', '');
  function privatize(_ref5) {
    var [fullName] = _ref5;
    (true && !(arguments.length === 1 && fullName) && (0, _debug.assert)('has a single string argument', arguments.length === 1 && fullName));
    var name = privateNames[fullName];
    if (name) {
      return name;
    }
    var [type, rawName] = fullName.split(':');
    return privateNames[fullName] = (0, _utils.intern)(`${type}:${rawName}-${privateSuffix}`);
  }

  /*
  Public API for the container is still in flux.
  The public API, specified on the application namespace should be considered the stable API.
  // @module container
    @private
  */
});
define("@ember/-internals/environment/index", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.context = _exports.ENV = void 0;
  _exports.getENV = getENV;
  _exports.getLookup = getLookup;
  _exports.global = void 0;
  _exports.setLookup = setLookup;
  // from lodash to catch fake globals
  function checkGlobal(value) {
    return value && value.Object === Object ? value : undefined;
  }
  // element ids can ruin global miss checks
  function checkElementIdShadowing(value) {
    return value && value.nodeType === undefined ? value : undefined;
  }
  // export real global
  var global$1 = checkGlobal(checkElementIdShadowing(typeof global === 'object' && global)) || checkGlobal(typeof self === 'object' && self) || checkGlobal(typeof window === 'object' && window) || typeof mainContext !== 'undefined' && mainContext ||
  // set before strict mode in Ember loader/wrapper
  new Function('return this')(); // eval outside of strict mode

  // legacy imports/exports/lookup stuff (should we keep this??)
  _exports.global = global$1;
  var context = function (global, Ember) {
    return Ember === undefined ? {
      imports: global,
      exports: global,
      lookup: global
    } : {
      // import jQuery
      imports: Ember.imports || global,
      // export Ember
      exports: Ember.exports || global,
      // search for Namespaces
      lookup: Ember.lookup || global
    };
  }(global$1, global$1.Ember);
  _exports.context = context;
  function getLookup() {
    return context.lookup;
  }
  function setLookup(value) {
    context.lookup = value;
  }

  /**
    The hash of environment variables used to control various configuration
    settings. To specify your own or override default settings, add the
    desired properties to a global hash named `EmberENV` (or `ENV` for
    backwards compatibility with earlier versions of Ember). The `EmberENV`
    hash must be created before loading Ember.
  
    @class EmberENV
    @type Object
    @public
  */
  var ENV = {
    ENABLE_OPTIONAL_FEATURES: false,
    /**
      Determines whether Ember should add to `Array`
      native object prototypes, a few extra methods in order to provide a more
      friendly API.
         We generally recommend leaving this option set to true however, if you need
      to turn it off, you can add the configuration property
      `EXTEND_PROTOTYPES` to `EmberENV` and set it to `false`.
         Note, when disabled (the default configuration for Ember Addons), you will
      instead have to access all methods and functions from the Ember
      namespace.
         @property EXTEND_PROTOTYPES
      @type Boolean
      @default true
      @for EmberENV
      @public
    */
    EXTEND_PROTOTYPES: {
      Array: true
    },
    /**
      The `LOG_STACKTRACE_ON_DEPRECATION` property, when true, tells Ember to log
      a full stack trace during deprecation warnings.
         @property LOG_STACKTRACE_ON_DEPRECATION
      @type Boolean
      @default true
      @for EmberENV
      @public
    */
    LOG_STACKTRACE_ON_DEPRECATION: true,
    /**
      The `LOG_VERSION` property, when true, tells Ember to log versions of all
      dependent libraries in use.
         @property LOG_VERSION
      @type Boolean
      @default true
      @for EmberENV
      @public
    */
    LOG_VERSION: true,
    RAISE_ON_DEPRECATION: false,
    STRUCTURED_PROFILE: false,
    /**
      Whether to insert a `<div class="ember-view" />` wrapper around the
      application template. See RFC #280.
         This is not intended to be set directly, as the implementation may change in
      the future. Use `@ember/optional-features` instead.
         @property _APPLICATION_TEMPLATE_WRAPPER
      @for EmberENV
      @type Boolean
      @default true
      @private
    */
    _APPLICATION_TEMPLATE_WRAPPER: true,
    /**
      Whether to use Glimmer Component semantics (as opposed to the classic "Curly"
      components semantics) for template-only components. See RFC #278.
         This is not intended to be set directly, as the implementation may change in
      the future. Use `@ember/optional-features` instead.
         @property _TEMPLATE_ONLY_GLIMMER_COMPONENTS
      @for EmberENV
      @type Boolean
      @default false
      @private
    */
    _TEMPLATE_ONLY_GLIMMER_COMPONENTS: false,
    /**
      Whether to perform extra bookkeeping needed to make the `captureRenderTree`
      API work.
         This has to be set before the ember JavaScript code is evaluated. This is
      usually done by setting `window.EmberENV = { _DEBUG_RENDER_TREE: true };`
      before the "vendor" `<script>` tag in `index.html`.
         Setting the flag after Ember is already loaded will not work correctly. It
      may appear to work somewhat, but fundamentally broken.
         This is not intended to be set directly. Ember Inspector will enable the
      flag on behalf of the user as needed.
         This flag is always on in development mode.
         The flag is off by default in production mode, due to the cost associated
      with the the bookkeeping work.
         The expected flow is that Ember Inspector will ask the user to refresh the
      page after enabling the feature. It could also offer a feature where the
      user add some domains to the "always on" list. In either case, Ember
      Inspector will inject the code on the page to set the flag if needed.
         @property _DEBUG_RENDER_TREE
      @for EmberENV
      @type Boolean
      @default false
      @private
    */
    _DEBUG_RENDER_TREE: true /* DEBUG */,
    /**
      Whether the app defaults to using async observers.
         This is not intended to be set directly, as the implementation may change in
      the future. Use `@ember/optional-features` instead.
         @property _DEFAULT_ASYNC_OBSERVERS
      @for EmberENV
      @type Boolean
      @default false
      @private
    */
    _DEFAULT_ASYNC_OBSERVERS: false,
    /**
      Controls the maximum number of scheduled rerenders without "settling". In general,
      applications should not need to modify this environment variable, but please
      open an issue so that we can determine if a better default value is needed.
         @property _RERENDER_LOOP_LIMIT
      @for EmberENV
      @type number
      @default 1000
      @private
     */
    _RERENDER_LOOP_LIMIT: 1000,
    EMBER_LOAD_HOOKS: {},
    FEATURES: {}
  };
  _exports.ENV = ENV;
  (EmberENV => {
    if (typeof EmberENV !== 'object' || EmberENV === null) return;
    for (var flag in EmberENV) {
      if (!Object.prototype.hasOwnProperty.call(EmberENV, flag) || flag === 'EXTEND_PROTOTYPES' || flag === 'EMBER_LOAD_HOOKS') continue;
      var defaultValue = ENV[flag];
      if (defaultValue === true) {
        ENV[flag] = EmberENV[flag] !== false;
      } else if (defaultValue === false) {
        ENV[flag] = EmberENV[flag] === true;
      }
    }
    var {
      EXTEND_PROTOTYPES
    } = EmberENV;
    if (EXTEND_PROTOTYPES !== undefined) {
      if (typeof EXTEND_PROTOTYPES === 'object' && EXTEND_PROTOTYPES !== null) {
        ENV.EXTEND_PROTOTYPES.Array = EXTEND_PROTOTYPES.Array !== false;
      } else {
        ENV.EXTEND_PROTOTYPES.Array = EXTEND_PROTOTYPES !== false;
      }
    }
    // TODO this does not seem to be used by anything,
    //      can we remove it? do we need to deprecate it?
    var {
      EMBER_LOAD_HOOKS
    } = EmberENV;
    if (typeof EMBER_LOAD_HOOKS === 'object' && EMBER_LOAD_HOOKS !== null) {
      for (var hookName in EMBER_LOAD_HOOKS) {
        if (!Object.prototype.hasOwnProperty.call(EMBER_LOAD_HOOKS, hookName)) continue;
        var hooks = EMBER_LOAD_HOOKS[hookName];
        if (Array.isArray(hooks)) {
          ENV.EMBER_LOAD_HOOKS[hookName] = hooks.filter(hook => typeof hook === 'function');
        }
      }
    }
    var {
      FEATURES
    } = EmberENV;
    if (typeof FEATURES === 'object' && FEATURES !== null) {
      for (var feature in FEATURES) {
        if (!Object.prototype.hasOwnProperty.call(FEATURES, feature)) continue;
        ENV.FEATURES[feature] = FEATURES[feature] === true;
      }
    }
    if (true /* DEBUG */) {
      ENV._DEBUG_RENDER_TREE = true;
    }
  })(global$1.EmberENV);
  function getENV() {
    return ENV;
  }
});
define("@ember/-internals/error-handling/index", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.getDispatchOverride = getDispatchOverride;
  _exports.getOnerror = getOnerror;
  _exports.onErrorTarget = void 0;
  _exports.setDispatchOverride = setDispatchOverride;
  _exports.setOnerror = setOnerror;
  var onerror;
  var onErrorTarget = {
    get onerror() {
      return onerror;
    }
  };
  // Ember.onerror getter
  _exports.onErrorTarget = onErrorTarget;
  function getOnerror() {
    return onerror;
  }
  // Ember.onerror setter
  function setOnerror(handler) {
    onerror = handler;
  }
  var dispatchOverride = null;
  // allows testing adapter to override dispatch
  function getDispatchOverride() {
    return dispatchOverride;
  }
  function setDispatchOverride(handler) {
    dispatchOverride = handler;
  }
});
define("@ember/-internals/glimmer/index", ["exports", "@glimmer/opcode-compiler", "@ember/-internals/owner", "@ember/-internals/utils", "@ember/debug", "@glimmer/manager", "@glimmer/reference", "@glimmer/validator", "@ember/-internals/metal", "@ember/object", "@ember/-internals/browser-environment", "@ember/-internals/views", "@ember/engine", "@ember/engine/instance", "@ember/instrumentation", "@ember/service", "@ember/-internals/string", "@glimmer/destroyable", "@ember/runloop", "@glimmer/util", "@glimmer/runtime", "@ember/-internals/runtime", "@ember/object/-internals", "@ember/-internals/environment", "@ember/-internals/container", "@glimmer/node", "@ember/array/-internals", "@ember/-internals/glimmer", "@ember/array", "@glimmer/global-context", "@ember/routing/-internals", "@glimmer/program", "rsvp"], function (_exports, _opcodeCompiler, _owner2, _utils, _debug, _manager2, _reference, _validator, _metal, _object, _browserEnvironment, _views, _engine, _instance, _instrumentation, _service, _string, _destroyable, _runloop, _util, _runtime, _runtime2, _internals, _environment2, _container, _node, _internals2, _glimmer, _array, _globalContext, _internals3, _program, _rsvp) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Component = void 0;
  Object.defineProperty(_exports, "DOMChanges", {
    enumerable: true,
    get: function () {
      return _runtime.DOMChanges;
    }
  });
  Object.defineProperty(_exports, "DOMTreeConstruction", {
    enumerable: true,
    get: function () {
      return _runtime.DOMTreeConstruction;
    }
  });
  _exports.LinkTo = _exports.Input = _exports.Helper = void 0;
  Object.defineProperty(_exports, "NodeDOMTreeConstruction", {
    enumerable: true,
    get: function () {
      return _node.NodeDOMTreeConstruction;
    }
  });
  _exports.Textarea = _exports.SafeString = _exports.RootTemplate = _exports.Renderer = _exports.OutletView = void 0;
  _exports._resetRenderers = _resetRenderers;
  _exports.componentCapabilities = void 0;
  _exports.escapeExpression = escapeExpression;
  _exports.getTemplate = getTemplate;
  _exports.getTemplates = getTemplates;
  _exports.hasTemplate = hasTemplate;
  _exports.helper = helper;
  _exports.htmlSafe = htmlSafe;
  _exports.isHTMLSafe = isHTMLSafe$1;
  Object.defineProperty(_exports, "isSerializationFirstNode", {
    enumerable: true,
    get: function () {
      return _runtime.isSerializationFirstNode;
    }
  });
  _exports.modifierCapabilities = void 0;
  _exports.renderSettled = renderSettled;
  _exports.setComponentManager = setComponentManager$1;
  _exports.setTemplate = setTemplate;
  _exports.setTemplates = setTemplates;
  _exports.setupApplicationRegistry = setupApplicationRegistry;
  _exports.setupEngineRegistry = setupEngineRegistry;
  Object.defineProperty(_exports, "template", {
    enumerable: true,
    get: function () {
      return _opcodeCompiler.templateFactory;
    }
  });
  Object.defineProperty(_exports, "templateCacheCounters", {
    enumerable: true,
    get: function () {
      return _opcodeCompiler.templateCacheCounters;
    }
  });
  var RootTemplate = (0, _opcodeCompiler.templateFactory)({
    "id": "9BtKrod8",
    "block": "[[[46,[30,0],null,null,null]],[],false,[\"component\"]]",
    "moduleName": "packages/@ember/-internals/glimmer/lib/templates/root.hbs",
    "isStrictMode": false
  });
  _exports.RootTemplate = RootTemplate;
  var InputTemplate = (0, _opcodeCompiler.templateFactory)({
    "id": "OGSIkgXP",
    "block": "[[[11,\"input\"],[16,1,[30,0,[\"id\"]]],[16,0,[30,0,[\"class\"]]],[17,1],[16,4,[30,0,[\"type\"]]],[16,\"checked\",[30,0,[\"checked\"]]],[16,2,[30,0,[\"value\"]]],[4,[38,0],[\"change\",[30,0,[\"change\"]]],null],[4,[38,0],[\"input\",[30,0,[\"input\"]]],null],[4,[38,0],[\"keyup\",[30,0,[\"keyUp\"]]],null],[4,[38,0],[\"paste\",[30,0,[\"valueDidChange\"]]],null],[4,[38,0],[\"cut\",[30,0,[\"valueDidChange\"]]],null],[12],[13]],[\"&attrs\"],false,[\"on\"]]",
    "moduleName": "packages/@ember/-internals/glimmer/lib/templates/input.hbs",
    "isStrictMode": false
  });
  function NOOP() {}
  class InternalComponent {
    // Override this
    static toString() {
      return 'internal component';
    }
    constructor(owner, args, caller) {
      this.owner = owner;
      this.args = args;
      this.caller = caller;
      (0, _owner2.setOwner)(this, owner);
    }
    /**
     * The default HTML id attribute. We don't really _need_ one, this is just
     * added for compatibility as it's hard to tell if people rely on it being
     * present, and it doens't really hurt.
     *
     * However, don't rely on this internally, like passing it to `getElementId`.
     * This can be (and often is) overriden by passing an `id` attribute on the
     * invocation, which shadows this default id via `...attributes`.
     */
    get id() {
      return (0, _utils.guidFor)(this);
    }
    /**
     * The default HTML class attribute. Similar to the above, we don't _need_
     * them, they are just added for compatibility as it's similarly hard to tell
     * if people rely on it in their CSS etc, and it doens't really hurt.
     */
    get class() {
      return 'ember-view';
    }
    validateArguments() {
      for (var name of Object.keys(this.args.named)) {
        if (!this.isSupportedArgument(name)) {
          this.onUnsupportedArgument(name);
        }
      }
    }
    named(name) {
      var ref = this.args.named[name];
      return ref ? (0, _reference.valueForRef)(ref) : undefined;
    }
    positional(index) {
      var ref = this.args.positional[index];
      return ref ? (0, _reference.valueForRef)(ref) : undefined;
    }
    listenerFor(name) {
      var listener = this.named(name);
      if (listener) {
        (true && !(typeof listener === 'function') && (0, _debug.assert)(`The \`@${name}\` argument to the <${this.constructor}> component must be a function`, typeof listener === 'function'));
        return listener;
      } else {
        return NOOP;
      }
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    isSupportedArgument(_name) {
      return false;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onUnsupportedArgument(_name) {}
    toString() {
      return `<${this.constructor}:${(0, _utils.guidFor)(this)}>`;
    }
  }
  var OPAQUE_CONSTRUCTOR_MAP = new WeakMap();
  function opaquify(constructor, template) {
    var _opaque = {
      // Factory interface
      create() {
        throw (0, _debug.assert)('Use constructor instead of create');
      },
      toString() {
        return constructor.toString();
      }
    };
    var opaque = _opaque;
    OPAQUE_CONSTRUCTOR_MAP.set(opaque, constructor);
    (0, _manager2.setInternalComponentManager)(INTERNAL_COMPONENT_MANAGER, opaque);
    (0, _manager2.setComponentTemplate)(template, opaque);
    return opaque;
  }
  function deopaquify(opaque) {
    var constructor = OPAQUE_CONSTRUCTOR_MAP.get(opaque);
    (true && !(constructor) && (0, _debug.assert)(`[BUG] Invalid internal component constructor: ${opaque}`, constructor));
    return constructor;
  }
  var CAPABILITIES = {
    dynamicLayout: false,
    dynamicTag: false,
    prepareArgs: false,
    createArgs: true,
    attributeHook: false,
    elementHook: false,
    createCaller: true,
    dynamicScope: false,
    updateHook: false,
    createInstance: true,
    wrapped: false,
    willDestroy: false,
    hasSubOwner: false
  };
  class InternalManager {
    getCapabilities() {
      return CAPABILITIES;
    }
    create(owner, definition, args, _env, _dynamicScope, caller) {
      (true && !((0, _reference.isConstRef)(caller)) && (0, _debug.assert)('caller must be const', (0, _reference.isConstRef)(caller)));
      var ComponentClass = deopaquify(definition);
      var instance = new ComponentClass(owner, args.capture(), (0, _reference.valueForRef)(caller));
      (0, _validator.untrack)(instance['validateArguments'].bind(instance));
      return instance;
    }
    didCreate() {}
    didUpdate() {}
    didRenderLayout() {}
    didUpdateLayout() {}
    getDebugName(definition) {
      return definition.toString();
    }
    getSelf(instance) {
      return (0, _reference.createConstRef)(instance, 'this');
    }
    getDestroyable(instance) {
      return instance;
    }
  }
  var INTERNAL_COMPONENT_MANAGER = new InternalManager();
  var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
      if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var UNINITIALIZED = Object.freeze({});
  function elementForEvent(event) {
    (true && !(event.target instanceof HTMLInputElement || event.target instanceof HTMLTextAreaElement) && (0, _debug.assert)('[BUG] event target must be an <input> or <textarea> element', event.target instanceof HTMLInputElement || event.target instanceof HTMLTextAreaElement));
    return event.target;
  }
  function valueForEvent(event) {
    return elementForEvent(event).value;
  }
  function devirtualize(callback) {
    return event => callback(valueForEvent(event), event);
  }
  function valueFrom(reference) {
    if (reference === undefined) {
      return new LocalValue(undefined);
    } else if ((0, _reference.isConstRef)(reference)) {
      return new LocalValue((0, _reference.valueForRef)(reference));
    } else if ((0, _reference.isUpdatableRef)(reference)) {
      return new UpstreamValue(reference);
    } else {
      return new ForkedValue(reference);
    }
  }
  class LocalValue {
    constructor(value) {
      this.value = value;
    }
    get() {
      return this.value;
    }
    set(value) {
      this.value = value;
    }
  }
  __decorate([_metal.tracked], LocalValue.prototype, "value", void 0);
  class UpstreamValue {
    constructor(reference) {
      this.reference = reference;
    }
    get() {
      return (0, _reference.valueForRef)(this.reference);
    }
    set(value) {
      (0, _reference.updateRef)(this.reference, value);
    }
  }
  class ForkedValue {
    constructor(reference) {
      this.lastUpstreamValue = UNINITIALIZED;
      this.upstream = new UpstreamValue(reference);
    }
    get() {
      var upstreamValue = this.upstream.get();
      if (upstreamValue !== this.lastUpstreamValue) {
        this.lastUpstreamValue = upstreamValue;
        this.local = new LocalValue(upstreamValue);
      }
      (true && !(this.local) && (0, _debug.assert)('[BUG] this.local must have been initialized at this point', this.local));
      return this.local.get();
    }
    set(value) {
      (true && !(this.local) && (0, _debug.assert)('[BUG] this.local must have been initialized at this point', this.local));
      this.local.set(value);
    }
  }
  class AbstractInput extends InternalComponent {
    constructor() {
      super(...arguments);
      this._value = valueFrom(this.args.named['value']);
    }
    validateArguments() {
      (true && !(this.args.positional.length === 0) && (0, _debug.assert)(`The ${this.constructor} component does not take any positional arguments`, this.args.positional.length === 0));
      super.validateArguments();
    }
    get value() {
      return this._value.get();
    }
    set value(value) {
      this._value.set(value);
    }
    valueDidChange(event) {
      this.value = valueForEvent(event);
    }
    /**
     * The `change` and `input` actions need to be overridden in the `Input`
     * subclass. Unfortunately, some ember-source builds currently uses babel
     * loose mode to transpile its classes. Having the `@action` decorator on the
     * super class creates a getter on the prototype, and when the subclass
     * overrides the method, the loose mode transpilation would emit something
     * like `Subclass.prototype['change'] = function change() { ... }`, which
     * fails because `prototype['change']` is getter-only/readonly. The correct
     * solution is to use `Object.defineProperty(prototype, 'change', ...)` but
     * that requires disabling loose mode. For now, the workaround is to add the
     * decorator only on the subclass. This is more of a configuration issue on
     * our own builds and doesn't really affect apps.
     */
    /* @action */
    change(event) {
      this.valueDidChange(event);
    }
    /* @action */
    input(event) {
      this.valueDidChange(event);
    }
    keyUp(event) {
      switch (event.key) {
        case 'Enter':
          this.listenerFor('enter')(event);
          this.listenerFor('insert-newline')(event);
          break;
        case 'Escape':
          this.listenerFor('escape-press')(event);
          break;
      }
    }
    listenerFor(name) {
      var listener = super.listenerFor(name);
      if (this.isVirtualEventListener(name, listener)) {
        return devirtualize(listener);
      } else {
        return listener;
      }
    }
    isVirtualEventListener(name, _listener) {
      var virtualEvents = ['enter', 'insert-newline', 'escape-press'];
      return virtualEvents.indexOf(name) !== -1;
    }
  }
  __decorate([_object.action], AbstractInput.prototype, "valueDidChange", null);
  __decorate([_object.action], AbstractInput.prototype, "keyUp", null);
  var __decorate$1 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
      if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var isValidInputType;
  if (_browserEnvironment.hasDOM) {
    var INPUT_TYPES = Object.create(null);
    var INPUT_ELEMENT = document.createElement('input');
    INPUT_TYPES[''] = false;
    INPUT_TYPES['text'] = true;
    INPUT_TYPES['checkbox'] = true;
    isValidInputType = type => {
      var isValid = INPUT_TYPES[type];
      if (isValid === undefined) {
        try {
          INPUT_ELEMENT.type = type;
          isValid = INPUT_ELEMENT.type === type;
        } catch (e) {
          isValid = false;
        } finally {
          INPUT_ELEMENT.type = 'text';
        }
        INPUT_TYPES[type] = isValid;
      }
      return isValid;
    };
  } else {
    isValidInputType = type => type !== '';
  }
  /**
    See [Ember.Templates.components.Input](/ember/release/classes/Ember.Templates.components/methods/Input?anchor=Input).
  
    @method input
    @for Ember.Templates.helpers
    @param {Hash} options
    @public
    */
  /**
    An opaque interface which can be imported and used in strict-mode
    templates to call <Input>.
  
    See [Ember.Templates.components.Input](/ember/release/classes/Ember.Templates.components/methods/Input?anchor=Input).
  
    @for @ember/component
    @method Input
    @see {Ember.Templates.components.Input}
    @public
  **/
  /**
    The `Input` component lets you create an HTML `<input>` element.
  
    ```handlebars
    <Input @value="987" />
    ```
  
    creates an `<input>` element with `type="text"` and value set to 987.
  
    ### Text field
  
    If no `type` argument is specified, a default of type 'text' is used.
  
    ```handlebars
    Search:
    <Input @value={{this.searchWord}} />
    ```
  
    In this example, the initial value in the `<input>` will be set to the value of
    `this.searchWord`. If the user changes the text, the value of `this.searchWord` will also be
    updated.
  
    ### Actions
  
    The `Input` component takes a number of arguments with callbacks that are invoked in response to
    user events.
  
    * `enter`
    * `insert-newline`
    * `escape-press`
    * `focus-in`
    * `focus-out`
    * `key-down`
    * `key-press`
    * `key-up`
  
    These callbacks are passed to `Input` like this:
  
    ```handlebars
    <Input @value={{this.searchWord}} @enter={{this.query}} />
    ```
  
    Starting with Ember Octane, we recommend using the `{{on}}` modifier to call actions
    on specific events, such as the input event.
  
    ```handlebars
    <label for="input-name">Name:</label>
    <Input
      @id="input-name"
      @value={{this.name}}
      {{on "input" this.validateName}}
    />
    ```
  
    The event name (e.g. `focusout`, `input`, `keydown`) always follows the casing
    that the HTML standard uses.
  
    ### `<input>` HTML Attributes to Avoid
  
    In most cases, if you want to pass an attribute to the underlying HTML `<input>` element, you
    can pass the attribute directly, just like any other Ember component.
  
    ```handlebars
    <Input @type="text" size="10" />
    ```
  
    In this example, the `size` attribute will be applied to the underlying `<input>` element in the
    outputted HTML.
  
    However, there are a few attributes where you **must** use the `@` version.
  
    * `@type`: This argument is used to control which Ember component is used under the hood
    * `@value`: The `@value` argument installs a two-way binding onto the element. If you wanted a
      one-way binding, use `<input>` with the `value` property and the `input` event instead.
    * `@checked` (for checkboxes): like `@value`, the `@checked` argument installs a two-way binding
      onto the element. If you wanted a one-way binding, use `<input type="checkbox">` with
      `checked` and the `input` event instead.
  
    ### Checkbox
  
    To create an `<input type="checkbox">`:
  
    ```handlebars
    Emberize Everything:
    <Input @type="checkbox" @checked={{this.isEmberized}} name="isEmberized" />
    ```
  
    This will bind the checked state of this checkbox to the value of `isEmberized` -- if either one
    changes, it will be reflected in the other.
  
    @method Input
    @for Ember.Templates.components
    @param {Hash} options
    @public
  */
  class Input extends AbstractInput {
    constructor() {
      super(...arguments);
      this._checked = valueFrom(this.args.named['checked']);
    }
    static toString() {
      return 'Input';
    }
    /**
     * The HTML class attribute.
     */
    get class() {
      if (this.isCheckbox) {
        return 'ember-checkbox ember-view';
      } else {
        return 'ember-text-field ember-view';
      }
    }
    /**
     * The HTML type attribute.
     */
    get type() {
      var type = this.named('type');
      if (type === null || type === undefined) {
        return 'text';
      }
      (true && !(typeof type === 'string') && (0, _debug.assert)('The `@type` argument to the <Input> component must be a string', typeof type === 'string'));
      return isValidInputType(type) ? type : 'text';
    }
    get isCheckbox() {
      return this.named('type') === 'checkbox';
    }
    get checked() {
      if (this.isCheckbox) {
        (true && (0, _debug.warn)('`<Input @type="checkbox" />` reflects its checked state via the `@checked` argument. ' + 'You wrote `<Input @type="checkbox" @value={{...}} />` which is likely not what you intended. ' + 'Did you mean `<Input @type="checkbox" @checked={{...}} />`?', (0, _validator.untrack)(() => this.args.named['checked'] !== undefined || this.args.named['value'] === undefined || typeof (0, _reference.valueForRef)(this.args.named['value']) === 'string'), {
          id: 'ember.built-in-components.input-checkbox-value'
        }));
        return this._checked.get();
      } else {
        return undefined;
      }
    }
    set checked(checked) {
      (true && (0, _debug.warn)('`<Input @type="checkbox" />` reflects its checked state via the `@checked` argument. ' + 'You wrote `<Input @type="checkbox" @value={{...}} />` which is likely not what you intended. ' + 'Did you mean `<Input @type="checkbox" @checked={{...}} />`?', (0, _validator.untrack)(() => this.args.named['checked'] !== undefined || this.args.named['value'] === undefined || typeof (0, _reference.valueForRef)(this.args.named['value']) === 'string'), {
        id: 'ember.built-in-components.input-checkbox-value'
      }));
      this._checked.set(checked);
    }
    change(event) {
      if (this.isCheckbox) {
        this.checkedDidChange(event);
      } else {
        super.change(event);
      }
    }
    input(event) {
      if (!this.isCheckbox) {
        super.input(event);
      }
    }
    checkedDidChange(event) {
      var element = event.target;
      (true && !(element instanceof HTMLInputElement) && (0, _debug.assert)('[BUG] element must be an <input>', element instanceof HTMLInputElement));
      this.checked = element.checked;
    }
    isSupportedArgument(name) {
      var supportedArguments = ['type', 'value', 'checked', 'enter', 'insert-newline', 'escape-press'];
      return supportedArguments.indexOf(name) !== -1 || super.isSupportedArgument(name);
    }
  }
  __decorate$1([_object.action], Input.prototype, "change", null);
  __decorate$1([_object.action], Input.prototype, "input", null);
  __decorate$1([_object.action], Input.prototype, "checkedDidChange", null);
  var Input$1 = opaquify(Input, InputTemplate);
  _exports.Input = Input$1;
  var LinkToTemplate = (0, _opcodeCompiler.templateFactory)({
    "id": "CVwkBtGh",
    "block": "[[[11,3],[16,1,[30,0,[\"id\"]]],[16,0,[30,0,[\"class\"]]],[16,\"role\",[30,0,[\"role\"]]],[16,\"title\",[30,0,[\"title\"]]],[16,\"rel\",[30,0,[\"rel\"]]],[16,\"tabindex\",[30,0,[\"tabindex\"]]],[16,\"target\",[30,0,[\"target\"]]],[17,1],[16,6,[30,0,[\"href\"]]],[4,[38,0],[\"click\",[30,0,[\"click\"]]],null],[12],[18,2,null],[13]],[\"&attrs\",\"&default\"],false,[\"on\",\"yield\"]]",
    "moduleName": "packages/@ember/-internals/glimmer/lib/templates/link-to.hbs",
    "isStrictMode": false
  });
  var __decorate$2 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
      if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var EMPTY_ARRAY$1 = [];
  var EMPTY_QUERY_PARAMS = {};
  (0, _debug.debugFreeze)(EMPTY_ARRAY$1);
  (0, _debug.debugFreeze)(EMPTY_QUERY_PARAMS);
  function isMissing(value) {
    return value === null || value === undefined;
  }
  function isPresent(value) {
    return !isMissing(value);
  }
  function isQueryParams(value) {
    return typeof value === 'object' && value !== null && value['isQueryParams'] === true;
  }
  /**
    The `LinkTo` component renders a link to the supplied `routeName` passing an optionally
    supplied model to the route as its `model` context of the route. The block for `LinkTo`
    becomes the contents of the rendered element:
  
    ```handlebars
    <LinkTo @route='photoGallery'>
      Great Hamster Photos
    </LinkTo>
    ```
  
    This will result in:
  
    ```html
    <a href="/hamster-photos">
      Great Hamster Photos
    </a>
    ```
  
    ### Disabling the `LinkTo` component
  
    The `LinkTo` component can be disabled by using the `disabled` argument. A disabled link
    doesn't result in a transition when activated, and adds the `disabled` class to the `<a>`
    element.
  
    (The class name to apply to the element can be overridden by using the `disabledClass`
    argument)
  
    ```handlebars
    <LinkTo @route='photoGallery' @disabled={{true}}>
      Great Hamster Photos
    </LinkTo>
    ```
  
    ### Handling `href`
  
    `<LinkTo>` will use your application's Router to fill the element's `href` property with a URL
    that matches the path to the supplied `routeName`.
  
    ### Handling current route
  
    The `LinkTo` component will apply a CSS class name of 'active' when the application's current
    route matches the supplied routeName. For example, if the application's current route is
    'photoGallery.recent', then the following invocation of `LinkTo`:
  
    ```handlebars
    <LinkTo @route='photoGallery.recent'>
      Great Hamster Photos
    </LinkTo>
    ```
  
    will result in
  
    ```html
    <a href="/hamster-photos/this-week" class="active">
      Great Hamster Photos
    </a>
    ```
  
    The CSS class used for active classes can be customized by passing an `activeClass` argument:
  
    ```handlebars
    <LinkTo @route='photoGallery.recent' @activeClass="current-url">
      Great Hamster Photos
    </LinkTo>
    ```
  
    ```html
    <a href="/hamster-photos/this-week" class="current-url">
      Great Hamster Photos
    </a>
    ```
  
    ### Keeping a link active for other routes
  
    If you need a link to be 'active' even when it doesn't match the current route, you can use the
    `current-when` argument.
  
    ```handlebars
    <LinkTo @route='photoGallery' @current-when='photos'>
      Photo Gallery
    </LinkTo>
    ```
  
    This may be helpful for keeping links active for:
  
    * non-nested routes that are logically related
    * some secondary menu approaches
    * 'top navigation' with 'sub navigation' scenarios
  
    A link will be active if `current-when` is `true` or the current
    route is the route this link would transition to.
  
    To match multiple routes 'space-separate' the routes:
  
    ```handlebars
    <LinkTo @route='gallery' @current-when='photos drawings paintings'>
      Art Gallery
    </LinkTo>
    ```
  
    ### Supplying a model
  
    An optional `model` argument can be used for routes whose
    paths contain dynamic segments. This argument will become
    the model context of the linked route:
  
    ```javascript
    Router.map(function() {
      this.route("photoGallery", {path: "hamster-photos/:photo_id"});
    });
    ```
  
    ```handlebars
    <LinkTo @route='photoGallery' @model={{this.aPhoto}}>
      {{aPhoto.title}}
    </LinkTo>
    ```
  
    ```html
    <a href="/hamster-photos/42">
      Tomster
    </a>
    ```
  
    ### Supplying multiple models
  
    For deep-linking to route paths that contain multiple
    dynamic segments, the `models` argument can be used.
  
    As the router transitions through the route path, each
    supplied model argument will become the context for the
    route with the dynamic segments:
  
    ```javascript
    Router.map(function() {
      this.route("photoGallery", { path: "hamster-photos/:photo_id" }, function() {
        this.route("comment", {path: "comments/:comment_id"});
      });
    });
    ```
  
    This argument will become the model context of the linked route:
  
    ```handlebars
    <LinkTo @route='photoGallery.comment' @models={{array this.aPhoto this.comment}}>
      {{comment.body}}
    </LinkTo>
    ```
  
    ```html
    <a href="/hamster-photos/42/comments/718">
      A+++ would snuggle again.
    </a>
    ```
  
    ### Supplying an explicit dynamic segment value
  
    If you don't have a model object available to pass to `LinkTo`,
    an optional string or integer argument can be passed for routes whose
    paths contain dynamic segments. This argument will become the value
    of the dynamic segment:
  
    ```javascript
    Router.map(function() {
      this.route("photoGallery", { path: "hamster-photos/:photo_id" });
    });
    ```
  
    ```handlebars
    <LinkTo @route='photoGallery' @model={{aPhotoId}}>
      {{this.aPhoto.title}}
    </LinkTo>
    ```
  
    ```html
    <a href="/hamster-photos/42">
      Tomster
    </a>
    ```
  
    When transitioning into the linked route, the `model` hook will
    be triggered with parameters including this passed identifier.
  
    ### Supplying query parameters
  
    If you need to add optional key-value pairs that appear to the right of the ? in a URL,
    you can use the `query` argument.
  
    ```handlebars
    <LinkTo @route='photoGallery' @query={{hash page=1 per_page=20}}>
      Great Hamster Photos
    </LinkTo>
    ```
  
    This will result in:
  
    ```html
    <a href="/hamster-photos?page=1&per_page=20">
      Great Hamster Photos
    </a>
    ```
  
    @for Ember.Templates.components
    @method LinkTo
    @public
  */
  /**
    @module @ember/routing
  */
  /**
    See [Ember.Templates.components.LinkTo](/ember/release/classes/Ember.Templates.components/methods/input?anchor=LinkTo).
  
    @for Ember.Templates.helpers
    @method link-to
    @see {Ember.Templates.components.LinkTo}
    @public
  **/
  /**
    An opaque interface which can be imported and used in strict-mode
    templates to call <LinkTo>.
  
    See [Ember.Templates.components.LinkTo](/ember/release/classes/Ember.Templates.components/methods/input?anchor=LinkTo).
  
    @for @ember/routing
    @method LinkTo
    @see {Ember.Templates.components.LinkTo}
    @public
  **/
  class LinkTo extends InternalComponent {
    constructor() {
      super(...arguments);
      // GH #17963
      this.currentRouteCache = (0, _validator.createCache)(() => {
        (0, _validator.consumeTag)((0, _validator.tagFor)(this.routing, 'currentState'));
        return (0, _validator.untrack)(() => this.routing.currentRouteName);
      });
    }
    static toString() {
      return 'LinkTo';
    }
    validateArguments() {
      (true && !(!this.isEngine || this.engineMountPoint !== undefined) && (0, _debug.assert)('You attempted to use the <LinkTo> component within a routeless engine, this is not supported. ' + 'If you are using the ember-engines addon, use the <LinkToExternal> component instead. ' + 'See https://ember-engines.com/docs/links for more info.', !this.isEngine || this.engineMountPoint !== undefined));
      (true && !('route' in this.args.named || 'model' in this.args.named || 'models' in this.args.named || 'query' in this.args.named) && (0, _debug.assert)('You must provide at least one of the `@route`, `@model`, `@models` or `@query` arguments to `<LinkTo>`.', 'route' in this.args.named || 'model' in this.args.named || 'models' in this.args.named || 'query' in this.args.named));
      (true && !(!('model' in this.args.named && 'models' in this.args.named)) && (0, _debug.assert)('You cannot provide both the `@model` and `@models` arguments to the <LinkTo> component.', !('model' in this.args.named && 'models' in this.args.named)));
      super.validateArguments();
    }
    get class() {
      var classes = 'ember-view';
      if (this.isActive) {
        classes += this.classFor('active');
        if (this.willBeActive === false) {
          classes += ' ember-transitioning-out';
        }
      } else if (this.willBeActive) {
        classes += ' ember-transitioning-in';
      }
      if (this.isLoading) {
        classes += this.classFor('loading');
      }
      if (this.isDisabled) {
        classes += this.classFor('disabled');
      }
      return classes;
    }
    get href() {
      if (this.isLoading) {
        return '#';
      }
      var {
        routing,
        route,
        models,
        query
      } = this;
      (true && !(isPresent(route)) && (0, _debug.assert)('[BUG] route can only be missing if isLoading is true', isPresent(route))); // consume the current router state so we invalidate when QP changes
      // TODO: can we narrow this down to QP changes only?
      (0, _validator.consumeTag)((0, _validator.tagFor)(routing, 'currentState'));
      if (true /* DEBUG */) {
        try {
          return routing.generateURL(route, models, query);
        } catch (e) {
          var details = e instanceof Error ? e.message : (0, _debug.inspect)(e);
          var message = `While generating link to route "${route}": ${details}`;
          if (e instanceof Error) {
            e.message = message;
            throw e;
          } else {
            throw message;
          }
        }
      } else {
        return routing.generateURL(route, models, query);
      }
    }
    click(event) {
      if (!(0, _views.isSimpleClick)(event)) {
        return;
      }
      var element = event.currentTarget;
      (true && !(element instanceof HTMLAnchorElement) && (0, _debug.assert)('[BUG] must be an <a> element', element instanceof HTMLAnchorElement));
      var isSelf = element.target === '' || element.target === '_self';
      if (isSelf) {
        this.preventDefault(event);
      } else {
        return;
      }
      if (this.isDisabled) {
        return;
      }
      if (this.isLoading) {
        (true && (0, _debug.warn)('This link is in an inactive loading state because at least one of its models ' + 'currently has a null/undefined value, or the provided route name is invalid.', false, {
          id: 'ember-glimmer.link-to.inactive-loading-state'
        }));
        return;
      }
      var {
        routing,
        route,
        models,
        query,
        replace
      } = this;
      var payload = {
        routeName: route,
        queryParams: query,
        transition: undefined
      };
      (0, _instrumentation.flaggedInstrument)('interaction.link-to', payload, () => {
        (true && !(isPresent(route)) && (0, _debug.assert)('[BUG] route can only be missing if isLoading is true', isPresent(route)));
        payload.transition = routing.transitionTo(route, models, query, replace);
      });
    }
    get route() {
      if ('route' in this.args.named) {
        var route = this.named('route');
        (true && !(isMissing(route) || typeof route === 'string') && (0, _debug.assert)('The `@route` argument to the <LinkTo> component must be a string', isMissing(route) || typeof route === 'string'));
        return route && this.namespaceRoute(route);
      } else {
        return this.currentRoute;
      }
    }
    get currentRoute() {
      return (0, _validator.getValue)(this.currentRouteCache);
    }
    // TODO: not sure why generateURL takes {}[] instead of unknown[]
    get models() {
      if ('models' in this.args.named) {
        var models = this.named('models');
        (true && !(Array.isArray(models)) && (0, _debug.assert)('The `@models` argument to the <LinkTo> component must be an array.', Array.isArray(models)));
        return models;
      } else if ('model' in this.args.named) {
        return [this.named('model')];
      } else {
        return EMPTY_ARRAY$1;
      }
    }
    get query() {
      if ('query' in this.args.named) {
        var query = this.named('query');
        (true && !(query !== null && typeof query === 'object') && (0, _debug.assert)('The `@query` argument to the <LinkTo> component must be an object.', query !== null && typeof query === 'object'));
        return Object.assign({}, query);
      } else {
        return EMPTY_QUERY_PARAMS;
      }
    }
    get replace() {
      return this.named('replace') === true;
    }
    get isActive() {
      return this.isActiveForState(this.routing.currentState);
    }
    get willBeActive() {
      var current = this.routing.currentState;
      var target = this.routing.targetState;
      if (current === target) {
        return null;
      } else {
        return this.isActiveForState(target);
      }
    }
    get isLoading() {
      return isMissing(this.route) || this.models.some(model => isMissing(model));
    }
    get isDisabled() {
      return Boolean(this.named('disabled'));
    }
    get isEngine() {
      var owner = this.owner;
      return owner instanceof _instance.default && (0, _engine.getEngineParent)(owner) !== undefined;
    }
    get engineMountPoint() {
      var owner = this.owner;
      return owner instanceof _instance.default ? owner.mountPoint : undefined;
    }
    classFor(state) {
      var className = this.named(`${state}Class`);
      (true && !(isMissing(className) || typeof className === 'string' || typeof className === 'boolean') && (0, _debug.assert)(`The \`@${state}Class\` argument to the <LinkTo> component must be a string or boolean`, isMissing(className) || typeof className === 'string' || typeof className === 'boolean'));
      if (className === true || isMissing(className)) {
        return ` ${state}`;
      } else if (className) {
        return ` ${className}`;
      } else {
        return '';
      }
    }
    namespaceRoute(route) {
      var {
        engineMountPoint
      } = this;
      if (engineMountPoint === undefined) {
        return route;
      } else if (route === 'application') {
        return engineMountPoint;
      } else {
        return `${engineMountPoint}.${route}`;
      }
    }
    isActiveForState(state) {
      if (!isPresent(state)) {
        return false;
      }
      if (this.isLoading) {
        return false;
      }
      var currentWhen = this.named('current-when');
      if (typeof currentWhen === 'boolean') {
        return currentWhen;
      } else if (typeof currentWhen === 'string') {
        var {
          models,
          routing
        } = this;
        return currentWhen.split(' ').some(route => routing.isActiveForRoute(models, undefined, this.namespaceRoute(route), state));
      } else {
        var {
          route,
          models: _models,
          query,
          routing: _routing
        } = this;
        (true && !(isPresent(route)) && (0, _debug.assert)('[BUG] route can only be missing if isLoading is true', isPresent(route)));
        return _routing.isActiveForRoute(_models, query, route, state);
      }
    }
    preventDefault(event) {
      event.preventDefault();
    }
    isSupportedArgument(name) {
      var supportedArguments = ['route', 'model', 'models', 'query', 'replace', 'disabled', 'current-when', 'activeClass', 'loadingClass', 'disabledClass'];
      return supportedArguments.indexOf(name) !== -1 || super.isSupportedArgument(name);
    }
  }
  __decorate$2([(0, _service.service)('-routing')], LinkTo.prototype, "routing", void 0);
  __decorate$2([_object.action], LinkTo.prototype, "click", null);
  var {
    prototype
  } = LinkTo;
  var descriptorFor = (target, property) => {
    if (target) {
      return Object.getOwnPropertyDescriptor(target, property) || descriptorFor(Object.getPrototypeOf(target), property);
    } else {
      return null;
    }
  };
  // @href
  {
    var superOnUnsupportedArgument = prototype['onUnsupportedArgument'];
    Object.defineProperty(prototype, 'onUnsupportedArgument', {
      configurable: true,
      enumerable: false,
      value: function onUnsupportedArgument(name) {
        if (name === 'href') {
          (true && !(false) && (0, _debug.assert)(`Passing the \`@href\` argument to <LinkTo> is not supported.`));
        } else {
          superOnUnsupportedArgument.call(this, name);
        }
      }
    });
  }
  // QP
  {
    var superModelsDescriptor = descriptorFor(prototype, 'models');
    (true && !(superModelsDescriptor && typeof superModelsDescriptor.get === 'function') && (0, _debug.assert)(`[BUG] expecting models to be a getter on <LinkTo>`, superModelsDescriptor && typeof superModelsDescriptor.get === 'function'));
    var superModelsGetter = superModelsDescriptor.get;
    Object.defineProperty(prototype, 'models', {
      configurable: true,
      enumerable: false,
      get: function models() {
        var models = superModelsGetter.call(this);
        if (models.length > 0 && !('query' in this.args.named)) {
          if (isQueryParams(models[models.length - 1])) {
            models = models.slice(0, -1);
          }
        }
        return models;
      }
    });
    var superQueryDescriptor = descriptorFor(prototype, 'query');
    (true && !(superQueryDescriptor && typeof superQueryDescriptor.get === 'function') && (0, _debug.assert)(`[BUG] expecting query to be a getter on <LinkTo>`, superQueryDescriptor && typeof superQueryDescriptor.get === 'function'));
    var superQueryGetter = superQueryDescriptor.get;
    Object.defineProperty(prototype, 'query', {
      configurable: true,
      enumerable: false,
      get: function query() {
        var _a;
        if ('query' in this.args.named) {
          var qp = superQueryGetter.call(this);
          if (isQueryParams(qp)) {
            return (_a = qp.values) !== null && _a !== void 0 ? _a : EMPTY_QUERY_PARAMS;
          } else {
            return qp;
          }
        } else {
          var models = superModelsGetter.call(this);
          if (models.length > 0) {
            var _qp = models[models.length - 1];
            if (isQueryParams(_qp) && _qp.values !== null) {
              return _qp.values;
            }
          }
          return EMPTY_QUERY_PARAMS;
        }
      }
    });
  }
  // Positional Arguments
  {
    var _superOnUnsupportedArgument = prototype['onUnsupportedArgument'];
    Object.defineProperty(prototype, 'onUnsupportedArgument', {
      configurable: true,
      enumerable: false,
      value: function onUnsupportedArgument(name) {
        if (name !== 'params') {
          _superOnUnsupportedArgument.call(this, name);
        }
      }
    });
  }
  var LinkTo$1 = opaquify(LinkTo, LinkToTemplate);
  _exports.LinkTo = LinkTo$1;
  var TextareaTemplate = (0, _opcodeCompiler.templateFactory)({
    "id": "OpzctQXz",
    "block": "[[[11,\"textarea\"],[16,1,[30,0,[\"id\"]]],[16,0,[30,0,[\"class\"]]],[17,1],[16,2,[30,0,[\"value\"]]],[4,[38,0],[\"change\",[30,0,[\"change\"]]],null],[4,[38,0],[\"input\",[30,0,[\"input\"]]],null],[4,[38,0],[\"keyup\",[30,0,[\"keyUp\"]]],null],[4,[38,0],[\"paste\",[30,0,[\"valueDidChange\"]]],null],[4,[38,0],[\"cut\",[30,0,[\"valueDidChange\"]]],null],[12],[13]],[\"&attrs\"],false,[\"on\"]]",
    "moduleName": "packages/@ember/-internals/glimmer/lib/templates/textarea.hbs",
    "isStrictMode": false
  });
  var __decorate$3 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
      if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  /**
    The `Textarea` component inserts a new instance of `<textarea>` tag into the template.
  
    The `@value` argument provides the content of the `<textarea>`.
  
    This template:
  
    ```handlebars
    <Textarea @value="A bunch of text" />
    ```
  
    Would result in the following HTML:
  
    ```html
    <textarea class="ember-text-area">
      A bunch of text
    </textarea>
    ```
  
    The `@value` argument is two-way bound. If the user types text into the textarea, the `@value`
    argument is updated. If the `@value` argument is updated, the text in the textarea is updated.
  
    In the following example, the `writtenWords` property on the component will be updated as the user
    types 'Lots of text' into the text area of their browser's window.
  
    ```app/components/word-editor.js
    import Component from '@glimmer/component';
    import { tracked } from '@glimmer/tracking';
  
    export default class WordEditorComponent extends Component {
      @tracked writtenWords = "Lots of text that IS bound";
    }
    ```
  
    ```handlebars
    <Textarea @value={{writtenWords}} />
    ```
  
    Would result in the following HTML:
  
    ```html
    <textarea class="ember-text-area">
      Lots of text that IS bound
    </textarea>
    ```
  
    If you wanted a one way binding, you could use the `<textarea>` element directly, and use the
    `value` DOM property and the `input` event.
  
    ### Actions
  
    The `Textarea` component takes a number of arguments with callbacks that are invoked in
    response to user events.
  
    * `enter`
    * `insert-newline`
    * `escape-press`
    * `focus-in`
    * `focus-out`
    * `key-press`
  
    These callbacks are passed to `Textarea` like this:
  
    ```handlebars
    <Textarea @value={{this.searchWord}} @enter={{this.query}} />
    ```
  
    ## Classic Invocation Syntax
  
    The `Textarea` component can also be invoked using curly braces, just like any other Ember
    component.
  
    For example, this is an invocation using angle-bracket notation:
  
    ```handlebars
    <Textarea @value={{this.searchWord}} @enter={{this.query}} />
    ```
  
    You could accomplish the same thing using classic invocation:
  
    ```handlebars
    {{textarea value=this.searchWord enter=this.query}}
    ```
  
    The main difference is that angle-bracket invocation supports any HTML attribute using HTML
    attribute syntax, because attributes and arguments have different syntax when using angle-bracket
    invocation. Curly brace invocation, on the other hand, only has a single syntax for arguments,
    and components must manually map attributes onto component arguments.
  
    When using classic invocation with `{{textarea}}`, only the following attributes are mapped onto
    arguments:
  
    * rows
    * cols
    * name
    * selectionEnd
    * selectionStart
    * autocomplete
    * wrap
    * lang
    * dir
    * value
  
    ## Classic `layout` and `layoutName` properties
  
    Because HTML `textarea` elements do not contain inner HTML the `layout` and
    `layoutName` properties will not be applied.
  
    @method Textarea
    @for Ember.Templates.components
    @public
  */
  /**
    See Ember.Templates.components.Textarea.
  
    @method textarea
    @for Ember.Templates.helpers
    @see {Ember.Templates.components.Textarea}
    @public
  */
  /**
    An opaque interface which can be imported and used in strict-mode
    templates to call <Textarea>.
  
    See [Ember.Templates.components.Textarea](/ember/release/classes/Ember.Templates.components/methods/Textarea?anchor=Input).
  
    @for @ember/component
    @method Textarea
    @see {Ember.Templates.components.Textarea}
    @public
  **/
  class Textarea extends AbstractInput {
    static toString() {
      return 'Textarea';
    }
    get class() {
      return 'ember-text-area ember-view';
    }
    // See abstract-input.ts for why these are needed
    change(event) {
      super.change(event);
    }
    input(event) {
      super.input(event);
    }
    isSupportedArgument(name) {
      var supportedArguments = ['type', 'value', 'enter', 'insert-newline', 'escape-press'];
      return supportedArguments.indexOf(name) !== -1 || super.isSupportedArgument(name);
    }
  }
  __decorate$3([_object.action], Textarea.prototype, "change", null);
  __decorate$3([_object.action], Textarea.prototype, "input", null);
  var Textarea$1 = opaquify(Textarea, TextareaTemplate);
  _exports.Textarea = Textarea$1;
  function isTemplateFactory(template) {
    return typeof template === 'function';
  }
  function referenceForParts(rootRef, parts) {
    var isAttrs = parts[0] === 'attrs';
    // TODO deprecate this
    if (isAttrs) {
      parts.shift();
      if (parts.length === 1) {
        return (0, _reference.childRefFor)(rootRef, parts[0]);
      }
    }
    return (0, _reference.childRefFromParts)(rootRef, parts);
  }
  function parseAttributeBinding(microsyntax) {
    var colonIndex = microsyntax.indexOf(':');
    if (colonIndex === -1) {
      (true && !(microsyntax !== 'class') && (0, _debug.assert)('You cannot use class as an attributeBinding, use classNameBindings instead.', microsyntax !== 'class'));
      return [microsyntax, microsyntax, true];
    } else {
      var prop = microsyntax.substring(0, colonIndex);
      var attribute = microsyntax.substring(colonIndex + 1);
      (true && !(attribute !== 'class') && (0, _debug.assert)('You cannot use class as an attributeBinding, use classNameBindings instead.', attribute !== 'class'));
      return [prop, attribute, false];
    }
  }
  function installAttributeBinding(component, rootRef, parsed, operations) {
    var [prop, attribute, isSimple] = parsed;
    if (attribute === 'id') {
      var elementId = (0, _metal.get)(component, prop);
      if (elementId === undefined || elementId === null) {
        elementId = component.elementId;
      }
      var elementIdRef = (0, _reference.createPrimitiveRef)(elementId);
      operations.setAttribute('id', elementIdRef, true, null);
      return;
    }
    var isPath = prop.indexOf('.') > -1;
    var reference = isPath ? referenceForParts(rootRef, prop.split('.')) : (0, _reference.childRefFor)(rootRef, prop);
    (true && !(!(isSimple && isPath)) && (0, _debug.assert)(`Illegal attributeBinding: '${prop}' is not a valid attribute name.`, !(isSimple && isPath)));
    operations.setAttribute(attribute, reference, false, null);
  }
  function createClassNameBindingRef(rootRef, microsyntax, operations) {
    var parts = microsyntax.split(':');
    var [prop, truthy, falsy] = parts;
    // NOTE: This could be an empty string
    (true && !(prop !== undefined) && (0, _debug.assert)('has prop', prop !== undefined)); // Will always have at least one part
    var isStatic = prop === '';
    if (isStatic) {
      operations.setAttribute('class', (0, _reference.createPrimitiveRef)(truthy), true, null);
    } else {
      var isPath = prop.indexOf('.') > -1;
      var _parts = isPath ? prop.split('.') : [];
      var value = isPath ? referenceForParts(rootRef, _parts) : (0, _reference.childRefFor)(rootRef, prop);
      var ref;
      if (truthy === undefined) {
        ref = createSimpleClassNameBindingRef(value, isPath ? _parts[_parts.length - 1] : prop);
      } else {
        ref = createColonClassNameBindingRef(value, truthy, falsy);
      }
      operations.setAttribute('class', ref, false, null);
    }
  }
  function createSimpleClassNameBindingRef(inner, path) {
    var dasherizedPath;
    return (0, _reference.createComputeRef)(() => {
      var value = (0, _reference.valueForRef)(inner);
      if (value === true) {
        (true && !(path !== undefined) && (0, _debug.assert)('You must pass a path when binding a to a class name using classNameBindings', path !== undefined));
        return dasherizedPath || (dasherizedPath = (0, _string.dasherize)(path));
      } else if (value || value === 0) {
        return String(value);
      } else {
        return null;
      }
    });
  }
  function createColonClassNameBindingRef(inner, truthy, falsy) {
    return (0, _reference.createComputeRef)(() => {
      return (0, _reference.valueForRef)(inner) ? truthy : falsy;
    });
  }
  function NOOP$1() {}
  /**
    @module ember
  */
  /**
    Represents the internal state of the component.
  
    @class ComponentStateBucket
    @private
  */
  class ComponentStateBucket {
    constructor(component, args, argsTag, finalizer, hasWrappedElement, isInteractive) {
      this.component = component;
      this.args = args;
      this.argsTag = argsTag;
      this.finalizer = finalizer;
      this.hasWrappedElement = hasWrappedElement;
      this.isInteractive = isInteractive;
      this.classRef = null;
      this.classRef = null;
      this.argsRevision = args === null ? 0 : (0, _validator.valueForTag)(argsTag);
      this.rootRef = (0, _reference.createConstRef)(component, 'this');
      (0, _destroyable.registerDestructor)(this, () => this.willDestroy(), true);
      (0, _destroyable.registerDestructor)(this, () => this.component.destroy());
    }
    willDestroy() {
      var {
        component,
        isInteractive
      } = this;
      if (isInteractive) {
        (0, _validator.beginUntrackFrame)();
        component.trigger('willDestroyElement');
        component.trigger('willClearRender');
        (0, _validator.endUntrackFrame)();
        var element = (0, _views.getViewElement)(component);
        if (element) {
          (0, _views.clearElementView)(element);
          (0, _views.clearViewElement)(component);
        }
      }
      component.renderer.unregister(component);
    }
    finalize() {
      var {
        finalizer
      } = this;
      finalizer();
      this.finalizer = NOOP$1;
    }
  }
  function internalHelper(helper) {
    return (0, _manager2.setInternalHelperManager)(helper, {});
  }

  /**
  @module ember
  */
  var ACTIONS = new _util._WeakSet();
  /**
    The `{{action}}` helper provides a way to pass triggers for behavior (usually
    just a function) between components, and into components from controllers.
  
    ### Passing functions with the action helper
  
    There are three contexts an action helper can be used in. The first two
    contexts to discuss are attribute context, and Handlebars value context.
  
    ```handlebars
    {{! An example of attribute context }}
    <div onclick={{action "save"}}></div>
    {{! Examples of Handlebars value context }}
    {{input on-input=(action "save")}}
    {{yield (action "refreshData") andAnotherParam}}
    ```
  
    In these contexts,
    the helper is called a "closure action" helper. Its behavior is simple:
    If passed a function name, read that function off the `actions` property
    of the current context. Once that function is read, or immediately if a function was
    passed, create a closure over that function and any arguments.
    The resulting value of an action helper used this way is simply a function.
  
    For example, in the attribute context:
  
    ```handlebars
    {{! An example of attribute context }}
    <div onclick={{action "save"}}></div>
    ```
  
    The resulting template render logic would be:
  
    ```js
    var div = document.createElement('div');
    var actionFunction = (function(context){
      return function() {
        return context.actions.save.apply(context, arguments);
      };
    })(context);
    div.onclick = actionFunction;
    ```
  
    Thus when the div is clicked, the action on that context is called.
    Because the `actionFunction` is just a function, closure actions can be
    passed between components and still execute in the correct context.
  
    Here is an example action handler on a component:
  
    ```app/components/my-component.js
    import Component from '@glimmer/component';
    import { action } from '@ember/object';
  
    export default class extends Component {
      @action
      save() {
        this.model.save();
      }
    }
    ```
  
    Actions are always looked up on the `actions` property of the current context.
    This avoids collisions in the naming of common actions, such as `destroy`.
    Two options can be passed to the `action` helper when it is used in this way.
  
    * `target=someProperty` will look to `someProperty` instead of the current
      context for the `actions` hash. This can be useful when targeting a
      service for actions.
    * `value="target.value"` will read the path `target.value` off the first
      argument to the action when it is called and rewrite the first argument
      to be that value. This is useful when attaching actions to event listeners.
  
    ### Invoking an action
  
    Closure actions curry both their scope and any arguments. When invoked, any
    additional arguments are added to the already curried list.
    Actions are presented in JavaScript as callbacks, and are
    invoked like any other JavaScript function.
  
    For example
  
    ```app/components/update-name.js
    import Component from '@glimmer/component';
    import { action } from '@ember/object';
  
    export default class extends Component {
      @action
      setName(model, name) {
        model.set('name', name);
      }
    }
    ```
  
    ```app/components/update-name.hbs
    {{input on-input=(action (action 'setName' @model) value="target.value")}}
    ```
  
    The first argument (`@model`) was curried over, and the run-time argument (`event`)
    becomes a second argument. Action calls can be nested this way because each simply
    returns a function. Any function can be passed to the `{{action}}` helper, including
    other actions.
  
    Actions invoked with `sendAction` have the same currying behavior as demonstrated
    with `on-input` above. For example:
  
    ```app/components/my-input.js
    import Component from '@glimmer/component';
    import { action } from '@ember/object';
  
    export default class extends Component {
      @action
      setName(model, name) {
        model.set('name', name);
      }
    }
    ```
  
    ```handlebars
    <MyInput @submit={{action 'setName' @model}} />
    ```
  
    or
  
    ```handlebars
    {{my-input submit=(action 'setName' @model)}}
    ```
  
    ```app/components/my-component.js
    import Component from '@ember/component';
  
    export default Component.extend({
      click() {
        // Note that model is not passed, it was curried in the template
        this.submit('bob');
      }
    });
    ```
  
    ### Attaching actions to DOM elements
  
    The third context of the `{{action}}` helper can be called "element space".
    For example:
  
    ```handlebars
    {{! An example of element space }}
    <div {{action "save"}}></div>
    ```
  
    Used this way, the `{{action}}` helper provides a useful shortcut for
    registering an HTML element in a template for a single DOM event and
    forwarding that interaction to the template's context (controller or component).
    If the context of a template is a controller, actions used this way will
    bubble to routes when the controller does not implement the specified action.
    Once an action hits a route, it will bubble through the route hierarchy.
  
    ### Event Propagation
  
    `{{action}}` helpers called in element space can control event bubbling. Note
    that the closure style actions cannot.
  
    Events triggered through the action helper will automatically have
    `.preventDefault()` called on them. You do not need to do so in your event
    handlers. If you need to allow event propagation (to handle file inputs for
    example) you can supply the `preventDefault=false` option to the `{{action}}` helper:
  
    ```handlebars
    <div {{action "sayHello" preventDefault=false}}>
      <input type="file" />
      <input type="checkbox" />
    </div>
    ```
  
    To disable bubbling, pass `bubbles=false` to the helper:
  
    ```handlebars
    <button {{action 'edit' post bubbles=false}}>Edit</button>
    ```
  
    To disable bubbling with closure style actions you must create your own
    wrapper helper that makes use of `event.stopPropagation()`:
  
    ```handlebars
    <div onclick={{disable-bubbling (action "sayHello")}}>Hello</div>
    ```
  
    ```app/helpers/disable-bubbling.js
    import { helper } from '@ember/component/helper';
  
    export function disableBubbling([action]) {
      return function(event) {
        event.stopPropagation();
        return action(event);
      };
    }
    export default helper(disableBubbling);
    ```
  
    If you need the default handler to trigger you should either register your
    own event handler, or use event methods on your view class. See
    ["Responding to Browser Events"](/ember/release/classes/Component)
    in the documentation for `Component` for more information.
  
    ### Specifying DOM event type
  
    `{{action}}` helpers called in element space can specify an event type.
    By default the `{{action}}` helper registers for DOM `click` events. You can
    supply an `on` option to the helper to specify a different DOM event name:
  
    ```handlebars
    <div {{action "anActionName" on="doubleClick"}}>
      click me
    </div>
    ```
  
    See ["Event Names"](/ember/release/classes/Component) for a list of
    acceptable DOM event names.
  
    ### Specifying whitelisted modifier keys
  
    `{{action}}` helpers called in element space can specify modifier keys.
    By default the `{{action}}` helper will ignore click events with pressed modifier
    keys. You can supply an `allowedKeys` option to specify which keys should not be ignored.
  
    ```handlebars
    <div {{action "anActionName" allowedKeys="alt"}}>
      click me
    </div>
    ```
  
    This way the action will fire when clicking with the alt key pressed down.
    Alternatively, supply "any" to the `allowedKeys` option to accept any combination of modifier keys.
  
    ```handlebars
    <div {{action "anActionName" allowedKeys="any"}}>
      click me with any key pressed
    </div>
    ```
  
    ### Specifying a Target
  
    A `target` option can be provided to the helper to change
    which object will receive the method call. This option must be a path
    to an object, accessible in the current context:
  
    ```app/templates/application.hbs
    <div {{action "anActionName" target=someService}}>
      click me
    </div>
    ```
  
    ```app/controllers/application.js
    import Controller from '@ember/controller';
    import { service } from '@ember/service';
  
    export default class extends Controller {
      @service someService;
    }
    ```
  
    @method action
    @for Ember.Templates.helpers
    @public
  */
  var action$1 = internalHelper(args => {
    var {
      named,
      positional
    } = args;
    // The first two argument slots are reserved.
    // pos[0] is the context (or `this`)
    // pos[1] is the action name or function
    // Anything else is an action argument.
    var [context, action$$1, ...restArgs] = positional;
    (true && !(context && action$$1) && (0, _debug.assert)('hash position arguments', context && action$$1));
    var debugKey = action$$1.debugLabel;
    var target = 'target' in named ? named['target'] : context;
    var processArgs = makeArgsProcessor('value' in named && named['value'] || false, restArgs);
    var fn$$1;
    if ((0, _reference.isInvokableRef)(action$$1)) {
      fn$$1 = makeClosureAction(action$$1, action$$1, invokeRef, processArgs, debugKey);
    } else {
      fn$$1 = makeDynamicClosureAction((0, _reference.valueForRef)(context), target, action$$1, processArgs, debugKey);
    }
    ACTIONS.add(fn$$1);
    return (0, _reference.createUnboundRef)(fn$$1, '(result of an `action` helper)');
  });
  function NOOP$2(args) {
    return args;
  }
  function makeArgsProcessor(valuePathRef, actionArgsRef) {
    var mergeArgs;
    if (actionArgsRef.length > 0) {
      mergeArgs = args => {
        return actionArgsRef.map(_reference.valueForRef).concat(args);
      };
    }
    var readValue;
    if (valuePathRef) {
      readValue = args => {
        var valuePath = (0, _reference.valueForRef)(valuePathRef);
        if (valuePath && args.length > 0) {
          args[0] = (0, _metal.get)(args[0], valuePath);
        }
        return args;
      };
    }
    if (mergeArgs && readValue) {
      return args => {
        return readValue(mergeArgs(args));
      };
    } else {
      return mergeArgs || readValue || NOOP$2;
    }
  }
  function makeDynamicClosureAction(context, targetRef, actionRef, processArgs, debugKey) {
    // We don't allow undefined/null values, so this creates a throw-away action to trigger the assertions
    if (true /* DEBUG */) {
      makeClosureAction(context, (0, _reference.valueForRef)(targetRef), (0, _reference.valueForRef)(actionRef), processArgs, debugKey);
    }
    return function () {
      return makeClosureAction(context, (0, _reference.valueForRef)(targetRef), (0, _reference.valueForRef)(actionRef), processArgs, debugKey)(...arguments);
    };
  }
  function makeClosureAction(context, target, action$$1, processArgs, debugKey) {
    var self;
    var fn$$1;
    (true && !(action$$1 !== undefined && action$$1 !== null) && (0, _debug.assert)(`Action passed is null or undefined in (action) from ${target}.`, action$$1 !== undefined && action$$1 !== null));
    if (typeof action$$1 === 'string') {
      self = target;
      fn$$1 = target.actions && target.actions[action$$1];
      (true && !(Boolean(fn$$1)) && (0, _debug.assert)(`An action named '${action$$1}' was not found in ${target}`, Boolean(fn$$1)));
    } else if (typeof action$$1 === 'function') {
      self = context;
      fn$$1 = action$$1;
    } else {
      (true && !(false) && (0, _debug.assert)(`An action could not be made for \`${debugKey || action$$1}\` in ${target}. Please confirm that you are using either a quoted action name (i.e. \`(action '${debugKey || 'myAction'}')\`) or a function available in ${target}.`, false));
    }
    return function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      var payload = {
        target: self,
        args,
        label: '@glimmer/closure-action'
      };
      return (0, _instrumentation.flaggedInstrument)('interaction.ember-action', payload, () => {
        return (0, _runloop.join)(self, fn$$1, ...processArgs(args));
      });
    };
  }
  // The code above:
  // 1. Finds an action function, usually on the `actions` hash
  // 2. Calls it with the target as the correct `this` context
  // Previously, `UPDATE_REFERENCED_VALUE` was a method on the reference itself,
  // so this made a bit more sense. Now, it isn't, and so we need to create a
  // function that can have `this` bound to it when called. This allows us to use
  // the same codepath to call `updateRef` on the reference.
  function invokeRef(value) {
    (0, _reference.updateRef)(this, value);
  }

  // ComponentArgs takes EvaluatedNamedArgs and converts them into the
  // inputs needed by CurlyComponents (attrs and props, with mutable
  // cells, etc).
  function processComponentArgs(namedArgs) {
    var attrs = Object.create(null);
    var props = Object.create(null);
    props[ARGS] = namedArgs;
    for (var name in namedArgs) {
      var ref = namedArgs[name];
      (true && !(ref) && (0, _debug.assert)('expected ref', ref));
      var value = (0, _reference.valueForRef)(ref);
      var isAction = typeof value === 'function' && ACTIONS.has(value);
      if ((0, _reference.isUpdatableRef)(ref) && !isAction) {
        attrs[name] = new MutableCell(ref, value);
      } else {
        attrs[name] = value;
      }
      props[name] = value;
    }
    props.attrs = attrs;
    return props;
  }
  var REF = Symbol('REF');
  class MutableCell {
    constructor(ref, value) {
      this[_views.MUTABLE_CELL] = true;
      this[REF] = ref;
      this.value = value;
    }
    update(val) {
      (0, _reference.updateRef)(this[REF], val);
    }
  }
  var __rest = undefined && undefined.__rest || function (s, e) {
    var t = {};
    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }
    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };
  var ARGS = (0, _utils.enumerableSymbol)('ARGS');
  var HAS_BLOCK = (0, _utils.enumerableSymbol)('HAS_BLOCK');
  var DIRTY_TAG = Symbol('DIRTY_TAG');
  var IS_DISPATCHING_ATTRS = Symbol('IS_DISPATCHING_ATTRS');
  var BOUNDS = Symbol('BOUNDS');
  var EMBER_VIEW_REF = (0, _reference.createPrimitiveRef)('ember-view');
  function aliasIdToElementId(args, props) {
    if (args.named.has('id')) {
      (true && !(!args.named.has('elementId')) && (0, _debug.assert)(`You cannot invoke a component with both 'id' and 'elementId' at the same time.`, !args.named.has('elementId')));
      props.elementId = props.id;
    }
  }
  // We must traverse the attributeBindings in reverse keeping track of
  // what has already been applied. This is essentially refining the concatenated
  // properties applying right to left.
  function applyAttributeBindings(attributeBindings, component, rootRef, operations) {
    var seen = [];
    var i = attributeBindings.length - 1;
    while (i !== -1) {
      var binding = attributeBindings[i];
      (true && !(binding) && (0, _debug.assert)('has binding', binding));
      var parsed = parseAttributeBinding(binding);
      var attribute = parsed[1];
      if (seen.indexOf(attribute) === -1) {
        seen.push(attribute);
        installAttributeBinding(component, rootRef, parsed, operations);
      }
      i--;
    }
    if (seen.indexOf('id') === -1) {
      var id = component.elementId ? component.elementId : (0, _utils.guidFor)(component);
      operations.setAttribute('id', (0, _reference.createPrimitiveRef)(id), false, null);
    }
  }
  var EMPTY_POSITIONAL_ARGS = [];
  (0, _debug.debugFreeze)(EMPTY_POSITIONAL_ARGS);
  class CurlyComponentManager {
    templateFor(component) {
      var {
        layout,
        layoutName
      } = component;
      var owner = (0, _owner2.getOwner)(component);
      (true && !(owner) && (0, _debug.assert)('Component is unexpectedly missing an owner', owner));
      var factory;
      if (layout === undefined) {
        if (layoutName !== undefined) {
          var _factory = owner.lookup(`template:${layoutName}`);
          (true && !(_factory !== undefined) && (0, _debug.assert)(`Layout \`${layoutName}\` not found!`, _factory !== undefined));
          factory = _factory;
        } else {
          return null;
        }
      } else if (isTemplateFactory(layout)) {
        factory = layout;
      } else {
        // no layout was found, use the default layout
        return null;
      }
      return (0, _util.unwrapTemplate)(factory(owner)).asWrappedLayout();
    }
    getDynamicLayout(bucket) {
      return this.templateFor(bucket.component);
    }
    getTagName(state) {
      var {
        component,
        hasWrappedElement
      } = state;
      if (!hasWrappedElement) {
        return null;
      }
      return component && component.tagName || 'div';
    }
    getCapabilities() {
      return CURLY_CAPABILITIES;
    }
    prepareArgs(ComponentClass, args) {
      var _a;
      if (args.named.has('__ARGS__')) {
        (true && !(args.positional.length === 0) && (0, _debug.assert)('[BUG] cannot pass both __ARGS__ and positional arguments', args.positional.length === 0));
        var _b = args.named.capture(),
          {
            __ARGS__
          } = _b,
          rest = __rest(_b, ["__ARGS__"]);
        (true && !(__ARGS__) && (0, _debug.assert)('[BUG] unexpectedly missing __ARGS__ after check', __ARGS__)); // does this need to be untracked?
        var __args__ = (0, _reference.valueForRef)(__ARGS__);
        var prepared = {
          positional: __args__.positional,
          named: Object.assign(Object.assign({}, rest), __args__.named)
        };
        return prepared;
      }
      var {
        positionalParams
      } = (_a = ComponentClass.class) !== null && _a !== void 0 ? _a : ComponentClass;
      // early exits
      if (positionalParams === undefined || positionalParams === null || args.positional.length === 0) {
        return null;
      }
      var named;
      if (typeof positionalParams === 'string') {
        (true && !(!args.named.has(positionalParams)) && (0, _debug.assert)(`You cannot specify positional parameters and the hash argument \`${positionalParams}\`.`, !args.named.has(positionalParams)));
        var captured = args.positional.capture();
        named = {
          [positionalParams]: (0, _reference.createComputeRef)(() => (0, _runtime.reifyPositional)(captured))
        };
        Object.assign(named, args.named.capture());
      } else if (Array.isArray(positionalParams) && positionalParams.length > 0) {
        var count = Math.min(positionalParams.length, args.positional.length);
        named = {};
        Object.assign(named, args.named.capture());
        for (var i = 0; i < count; i++) {
          var name = positionalParams[i];
          (true && !(name) && (0, _debug.assert)('Expected at least one positional param', name));
          (true && !(!args.named.has(name)) && (0, _debug.assert)(`You cannot specify both a positional param (at position ${i}) and the hash argument \`${name}\`.`, !args.named.has(name)));
          named[name] = args.positional.at(i);
        }
      } else {
        return null;
      }
      return {
        positional: _util.EMPTY_ARRAY,
        named
      };
    }
    /*
     * This hook is responsible for actually instantiating the component instance.
     * It also is where we perform additional bookkeeping to support legacy
     * features like exposed by view mixins like ChildViewSupport, ActionSupport,
     * etc.
     */
    create(owner, ComponentClass, args, _ref, dynamicScope, callerSelfRef, hasBlock) {
      var {
        isInteractive
      } = _ref;
      // Get the nearest concrete component instance from the scope. "Virtual"
      // components will be skipped.
      var parentView = dynamicScope.view;
      // Capture the arguments, which tells Glimmer to give us our own, stable
      // copy of the Arguments object that is safe to hold on to between renders.
      var capturedArgs = args.named.capture();
      (0, _validator.beginTrackFrame)();
      var props = processComponentArgs(capturedArgs);
      var argsTag = (0, _validator.endTrackFrame)();
      // Alias `id` argument to `elementId` property on the component instance.
      aliasIdToElementId(args, props);
      // Set component instance's parentView property to point to nearest concrete
      // component.
      props.parentView = parentView;
      // Set whether this component was invoked with a block
      // (`{{#my-component}}{{/my-component}}`) or without one
      // (`{{my-component}}`).
      props[HAS_BLOCK] = hasBlock;
      // Save the current `this` context of the template as the component's
      // `_target`, so bubbled actions are routed to the right place.
      props._target = (0, _reference.valueForRef)(callerSelfRef);
      (0, _owner2.setOwner)(props, owner);
      // caller:
      // <FaIcon @name="bug" />
      //
      // callee:
      // <i class="fa-{{@name}}"></i>
      // Now that we've built up all of the properties to set on the component instance,
      // actually create it.
      (0, _validator.beginUntrackFrame)();
      var component = ComponentClass.create(props);
      var finalizer = (0, _instrumentation._instrumentStart)('render.component', initialRenderInstrumentDetails, component);
      // We become the new parentView for downstream components, so save our
      // component off on the dynamic scope.
      dynamicScope.view = component;
      // Unless we're the root component, we need to add ourselves to our parent
      // component's childViews array.
      if (parentView !== null && parentView !== undefined) {
        (0, _views.addChildView)(parentView, component);
      }
      component.trigger('didReceiveAttrs');
      var hasWrappedElement = component.tagName !== '';
      // We usually do this in the `didCreateElement`, but that hook doesn't fire for tagless components
      if (!hasWrappedElement) {
        if (isInteractive) {
          component.trigger('willRender');
        }
        component._transitionTo('hasElement');
        if (isInteractive) {
          component.trigger('willInsertElement');
        }
      }
      // Track additional lifecycle metadata about this component in a state bucket.
      // Essentially we're saving off all the state we'll need in the future.
      var bucket = new ComponentStateBucket(component, capturedArgs, argsTag, finalizer, hasWrappedElement, isInteractive);
      if (args.named.has('class')) {
        bucket.classRef = args.named.get('class');
      }
      if (true /* DEBUG */) {
        processComponentInitializationAssertions(component, props);
      }
      if (isInteractive && hasWrappedElement) {
        component.trigger('willRender');
      }
      (0, _validator.endUntrackFrame)();
      // consume every argument so we always run again
      (0, _validator.consumeTag)(bucket.argsTag);
      (0, _validator.consumeTag)(component[DIRTY_TAG]);
      return bucket;
    }
    getDebugName(definition) {
      var _a;
      return definition.fullName || definition.normalizedName || ((_a = definition.class) === null || _a === void 0 ? void 0 : _a.name) || definition.name;
    }
    getSelf(_ref2) {
      var {
        rootRef
      } = _ref2;
      return rootRef;
    }
    didCreateElement(_ref3, element, operations) {
      var {
        component,
        classRef,
        isInteractive,
        rootRef
      } = _ref3;
      (0, _views.setViewElement)(component, element);
      (0, _views.setElementView)(element, component);
      var {
        attributeBindings,
        classNames,
        classNameBindings
      } = component;
      if (attributeBindings && attributeBindings.length) {
        applyAttributeBindings(attributeBindings, component, rootRef, operations);
      } else {
        var id = component.elementId ? component.elementId : (0, _utils.guidFor)(component);
        operations.setAttribute('id', (0, _reference.createPrimitiveRef)(id), false, null);
      }
      if (classRef) {
        var ref = createSimpleClassNameBindingRef(classRef);
        operations.setAttribute('class', ref, false, null);
      }
      if (classNames && classNames.length) {
        classNames.forEach(name => {
          operations.setAttribute('class', (0, _reference.createPrimitiveRef)(name), false, null);
        });
      }
      if (classNameBindings && classNameBindings.length) {
        classNameBindings.forEach(binding => {
          createClassNameBindingRef(rootRef, binding, operations);
        });
      }
      operations.setAttribute('class', EMBER_VIEW_REF, false, null);
      if ('ariaRole' in component) {
        operations.setAttribute('role', (0, _reference.childRefFor)(rootRef, 'ariaRole'), false, null);
      }
      component._transitionTo('hasElement');
      if (isInteractive) {
        (0, _validator.beginUntrackFrame)();
        component.trigger('willInsertElement');
        (0, _validator.endUntrackFrame)();
      }
    }
    didRenderLayout(bucket, bounds) {
      bucket.component[BOUNDS] = bounds;
      bucket.finalize();
    }
    didCreate(_ref4) {
      var {
        component,
        isInteractive
      } = _ref4;
      if (isInteractive) {
        component._transitionTo('inDOM');
        component.trigger('didInsertElement');
        component.trigger('didRender');
      }
    }
    update(bucket) {
      var {
        component,
        args,
        argsTag,
        argsRevision,
        isInteractive
      } = bucket;
      bucket.finalizer = (0, _instrumentation._instrumentStart)('render.component', rerenderInstrumentDetails, component);
      (0, _validator.beginUntrackFrame)();
      if (args !== null && !(0, _validator.validateTag)(argsTag, argsRevision)) {
        (0, _validator.beginTrackFrame)();
        var props = processComponentArgs(args);
        argsTag = bucket.argsTag = (0, _validator.endTrackFrame)();
        bucket.argsRevision = (0, _validator.valueForTag)(argsTag);
        component[IS_DISPATCHING_ATTRS] = true;
        component.setProperties(props);
        component[IS_DISPATCHING_ATTRS] = false;
        component.trigger('didUpdateAttrs');
        component.trigger('didReceiveAttrs');
      }
      if (isInteractive) {
        component.trigger('willUpdate');
        component.trigger('willRender');
      }
      (0, _validator.endUntrackFrame)();
      (0, _validator.consumeTag)(argsTag);
      (0, _validator.consumeTag)(component[DIRTY_TAG]);
    }
    didUpdateLayout(bucket) {
      bucket.finalize();
    }
    didUpdate(_ref5) {
      var {
        component,
        isInteractive
      } = _ref5;
      if (isInteractive) {
        component.trigger('didUpdate');
        component.trigger('didRender');
      }
    }
    getDestroyable(bucket) {
      return bucket;
    }
  }
  function processComponentInitializationAssertions(component, props) {
    (true && !((() => {
      var {
        classNameBindings
      } = component;
      for (var i = 0; i < classNameBindings.length; i++) {
        var binding = classNameBindings[i];
        if (typeof binding !== 'string' || binding.length === 0) {
          return false;
        }
      }
      return true;
    })()) && (0, _debug.assert)(`classNameBindings must be non-empty strings: ${component}`, (() => {
      var {
        classNameBindings
      } = component;
      for (var i = 0; i < classNameBindings.length; i++) {
        var binding = classNameBindings[i];
        if (typeof binding !== 'string' || binding.length === 0) {
          return false;
        }
      }
      return true;
    })()));
    (true && !((() => {
      var {
        classNameBindings
      } = component;
      for (var binding of classNameBindings) {
        if (binding.split(' ').length > 1) {
          return false;
        }
      }
      return true;
    })()) && (0, _debug.assert)(`classNameBindings must not have spaces in them: ${component}`, (() => {
      var {
        classNameBindings
      } = component;
      for (var binding of classNameBindings) {
        if (binding.split(' ').length > 1) {
          return false;
        }
      }
      return true;
    })()));
    (true && !(component.tagName !== '' || !component.classNameBindings || component.classNameBindings.length === 0) && (0, _debug.assert)(`You cannot use \`classNameBindings\` on a tag-less component: ${component}`, component.tagName !== '' || !component.classNameBindings || component.classNameBindings.length === 0));
    (true && !(component.tagName !== '' || props.id === component.elementId || !component.elementId && component.elementId !== '') && (0, _debug.assert)(`You cannot use \`elementId\` on a tag-less component: ${component}`, component.tagName !== '' || props.id === component.elementId || !component.elementId && component.elementId !== ''));
    (true && !(component.tagName !== '' || !component.attributeBindings || component.attributeBindings.length === 0) && (0, _debug.assert)(`You cannot use \`attributeBindings\` on a tag-less component: ${component}`, component.tagName !== '' || !component.attributeBindings || component.attributeBindings.length === 0));
  }
  function initialRenderInstrumentDetails(component) {
    return component.instrumentDetails({
      initialRender: true
    });
  }
  function rerenderInstrumentDetails(component) {
    return component.instrumentDetails({
      initialRender: false
    });
  }
  var CURLY_CAPABILITIES = {
    dynamicLayout: true,
    dynamicTag: true,
    prepareArgs: true,
    createArgs: true,
    attributeHook: true,
    elementHook: true,
    createCaller: true,
    dynamicScope: true,
    updateHook: true,
    createInstance: true,
    wrapped: true,
    willDestroy: true,
    hasSubOwner: false
  };
  var CURLY_COMPONENT_MANAGER = new CurlyComponentManager();
  function isCurlyManager(manager) {
    return manager === CURLY_COMPONENT_MANAGER;
  }

  // Keep track of which component classes have already been processed for lazy event setup.
  var lazyEventsProcessed = new WeakMap();
  class Component extends _views.CoreView.extend(_views.ChildViewsSupport, _views.ViewStateSupport, _views.ClassNamesSupport, _runtime2.TargetActionSupport, _views.ActionSupport, _views.ViewMixin, {
    // These need to be overridable via extend/create but should still
    // have a default. Defining them here is the best way to achieve that.
    didReceiveAttrs() {},
    didRender() {},
    didUpdate() {},
    didUpdateAttrs() {},
    willRender() {},
    willUpdate() {}
  }) {
    constructor() {
      super(...arguments);
      this.isComponent = true;
    }
    init(properties) {
      super.init(properties);
      // Handle methods from ViewMixin.
      // The native class inheritance will not work for mixins. To work around this,
      // we copy the existing rerender method provided by the mixin and swap in the
      // new rerender method from our class.
      this._superRerender = this.rerender;
      this.rerender = this._rerender;
      this[IS_DISPATCHING_ATTRS] = false;
      this[DIRTY_TAG] = (0, _validator.createTag)();
      this[BOUNDS] = null;
      var eventDispatcher = this._dispatcher;
      if (eventDispatcher) {
        var lazyEventsProcessedForComponentClass = lazyEventsProcessed.get(eventDispatcher);
        if (!lazyEventsProcessedForComponentClass) {
          lazyEventsProcessedForComponentClass = new WeakSet();
          lazyEventsProcessed.set(eventDispatcher, lazyEventsProcessedForComponentClass);
        }
        var proto = Object.getPrototypeOf(this);
        if (!lazyEventsProcessedForComponentClass.has(proto)) {
          var lazyEvents = eventDispatcher.lazyEvents;
          lazyEvents.forEach((mappedEventName, event) => {
            if (mappedEventName !== null && typeof this[mappedEventName] === 'function') {
              eventDispatcher.setupHandlerForBrowserEvent(event);
            }
          });
          lazyEventsProcessedForComponentClass.add(proto);
        }
      }
      if (true /* DEBUG */ && eventDispatcher && this.renderer._isInteractive && this.tagName === '') {
        var eventNames = [];
        var events = eventDispatcher.finalEventNameMapping;
        for (var key in events) {
          var methodName = events[key];
          if (methodName && typeof this[methodName] === 'function') {
            eventNames.push(methodName);
          }
        }
        // If in a tagless component, assert that no event handlers are defined
        (true && !(!eventNames.length) && (0, _debug.assert)(`You can not define \`${eventNames}\` function(s) to handle DOM event in the \`${this}\` tagless component since it doesn't have any DOM element.`, !eventNames.length));
      }
    }
    get _dispatcher() {
      if (this.__dispatcher === undefined) {
        var owner = (0, _owner2.getOwner)(this);
        (true && !(owner) && (0, _debug.assert)('Component is unexpectedly missing an owner', owner));
        if (owner.lookup('-environment:main').isInteractive) {
          var dispatcher = owner.lookup('event_dispatcher:main');
          (true && !(dispatcher instanceof _views.EventDispatcher) && (0, _debug.assert)('Expected dispatcher to be an EventDispatcher', dispatcher instanceof _views.EventDispatcher));
          this.__dispatcher = dispatcher;
        } else {
          // In FastBoot we have no EventDispatcher. Set to null to not try again to look it up.
          this.__dispatcher = null;
        }
      }
      return this.__dispatcher;
    }
    on(name, target, method) {
      var _a;
      (_a = this._dispatcher) === null || _a === void 0 ? void 0 : _a.setupHandlerForEmberEvent(name);
      // The `on` method here comes from the Evented mixin. Since this mixin
      // is applied to the parent of this class, however, we are still able
      // to use `super`.
      return super.on(name, target, method);
    }
    // Changed to `rerender` on init
    _rerender() {
      (0, _validator.dirtyTag)(this[DIRTY_TAG]);
      this._superRerender();
    }
    [_metal.PROPERTY_DID_CHANGE](key, value) {
      if (this[IS_DISPATCHING_ATTRS]) {
        return;
      }
      var args = this[ARGS];
      var reference = args !== undefined ? args[key] : undefined;
      if (reference !== undefined && (0, _reference.isUpdatableRef)(reference)) {
        (0, _reference.updateRef)(reference, arguments.length === 2 ? value : (0, _metal.get)(this, key));
      }
    }
    getAttr(key) {
      // TODO Intimate API should be deprecated
      return this.get(key);
    }
    /**
      Normally, Ember's component model is "write-only". The component takes a
      bunch of attributes that it got passed in, and uses them to render its
      template.
         One nice thing about this model is that if you try to set a value to the
      same thing as last time, Ember (through HTMLBars) will avoid doing any
      work on the DOM.
         This is not just a performance optimization. If an attribute has not
      changed, it is important not to clobber the element's "hidden state".
      For example, if you set an input's `value` to the same value as before,
      it will clobber selection state and cursor position. In other words,
      setting an attribute is not **always** idempotent.
         This method provides a way to read an element's attribute and also
      update the last value Ember knows about at the same time. This makes
      setting an attribute idempotent.
         In particular, what this means is that if you get an `<input>` element's
      `value` attribute and then re-render the template with the same value,
      it will avoid clobbering the cursor and selection position.
      Since most attribute sets are idempotent in the browser, you typically
      can get away with reading attributes using jQuery, but the most reliable
      way to do so is through this method.
      @method readDOMAttr
         @param {String} name the name of the attribute
      @return String
      @public
      */
    readDOMAttr(name) {
      // TODO revisit this
      var _element = (0, _views.getViewElement)(this);
      (true && !(_element !== null) && (0, _debug.assert)(`Cannot call \`readDOMAttr\` on ${this} which does not have an element`, _element !== null));
      var element = _element;
      var isSVG = element.namespaceURI === "http://www.w3.org/2000/svg" /* Namespace.SVG */;
      var {
        type,
        normalized
      } = (0, _runtime.normalizeProperty)(element, name);
      if (isSVG || type === 'attr') {
        return element.getAttribute(normalized);
      }
      return element[normalized];
    }
    static toString() {
      return '@ember/component';
    }
  }
  _exports.Component = Component;
  Component.isComponentFactory = true;
  // We continue to use reopenClass here so that positionalParams can be overridden with reopenClass in subclasses.
  Component.reopenClass({
    /**
     Enables components to take a list of parameters as arguments.
      For example, a component that takes two parameters with the names
      `name` and `age`:
         ```app/components/my-component.js
      import Component from '@ember/component';
         let MyComponent = Component.extend();
         MyComponent.reopenClass({
        positionalParams: ['name', 'age']
      });
         export default MyComponent;
      ```
         It can then be invoked like this:
         ```hbs
      {{my-component "John" 38}}
      ```
         The parameters can be referred to just like named parameters:
         ```hbs
      Name: {{name}}, Age: {{age}}.
      ```
         Using a string instead of an array allows for an arbitrary number of
      parameters:
         ```app/components/my-component.js
      import Component from '@ember/component';
         let MyComponent = Component.extend();
         MyComponent.reopenClass({
        positionalParams: 'names'
      });
         export default MyComponent;
      ```
         It can then be invoked like this:
         ```hbs
      {{my-component "John" "Michael" "Scott"}}
      ```
      The parameters can then be referred to by enumerating over the list:
         ```hbs
      {{#each names as |name|}}{{name}}{{/each}}
      ```
         @static
      @public
      @property positionalParams
      @since 1.13.0
      */
    positionalParams: []
  });
  (0, _manager2.setInternalComponentManager)(CURLY_COMPONENT_MANAGER, Component);

  /**
  @module @ember/component
  */
  var _a;
  var RECOMPUTE_TAG = Symbol('RECOMPUTE_TAG');
  var IS_CLASSIC_HELPER = Symbol('IS_CLASSIC_HELPER');
  /**
    In many cases it is not necessary to use the full `Helper` class.
    The `helper` method create pure-function helpers without instances.
    For example:
  
    ```app/helpers/format-currency.js
    import { helper } from '@ember/component/helper';
  
    export default helper(function([cents], {currency}) {
      return `${currency}${cents * 0.01}`;
    });
    ```
  
    @static
    @param {Function} helper The helper function
    @method helper
    @for @ember/component/helper
    @public
    @since 1.13.0
  */
  function helper(helperFn) {
    return new Wrapper(helperFn);
  }
  class Helper extends _internals.FrameworkObject {
    init(properties) {
      super.init(properties);
      this[RECOMPUTE_TAG] = (0, _validator.createTag)();
      (true && !(this.compute) && (0, _debug.assert)('expected compute to be defined', this.compute));
    }
    /**
      On a class-based helper, it may be useful to force a recomputation of that
      helpers value. This is akin to `rerender` on a component.
         For example, this component will rerender when the `currentUser` on a
      session service changes:
         ```app/helpers/current-user-email.js
      import Helper from '@ember/component/helper'
      import { service } from '@ember/service'
      import { observer } from '@ember/object'
         export default Helper.extend({
        session: service(),
           onNewUser: observer('session.currentUser', function() {
          this.recompute();
        }),
           compute() {
          return this.get('session.currentUser.email');
        }
      });
      ```
         @method recompute
      @public
      @since 1.13.0
    */
    recompute() {
      (0, _runloop.join)(() => (0, _validator.dirtyTag)(this[RECOMPUTE_TAG]));
    }
  }
  _exports.Helper = Helper;
  _a = IS_CLASSIC_HELPER;
  Helper.isHelperFactory = true;
  Helper[_a] = true;
  // `packages/ember/index.js` was setting `Helper.helper`. This seems like
  // a bad idea and probably not something we want. We've moved that definition
  // here, but it should definitely be reviewed and probably removed.
  /** @deprecated */
  Helper.helper = helper;
  function isClassicHelper(obj) {
    return obj[IS_CLASSIC_HELPER] === true;
  }
  class ClassicHelperManager {
    constructor(owner) {
      this.capabilities = (0, _manager2.helperCapabilities)('3.23', {
        hasValue: true,
        hasDestroyable: true
      });
      var ownerInjection = {};
      (0, _owner2.setOwner)(ownerInjection, owner);
      this.ownerInjection = ownerInjection;
    }
    createHelper(definition, args) {
      var instance = isFactoryManager(definition) ? definition.create() : definition.create(this.ownerInjection);
      (true && !(function (instance) {
        if (instance !== null && typeof instance === 'object') {
          var cast = instance;
          return typeof cast.compute === 'function' && typeof cast.destroy === 'function';
        }
        return false;
      }(instance)) && (0, _debug.assert)('expected HelperInstance', function (instance) {
        if (instance !== null && typeof instance === 'object') {
          var cast = instance;
          return typeof cast.compute === 'function' && typeof cast.destroy === 'function';
        }
        return false;
      }(instance)));
      return {
        instance,
        args
      };
    }
    getDestroyable(_ref6) {
      var {
        instance
      } = _ref6;
      return instance;
    }
    getValue(_ref7) {
      var {
        instance,
        args
      } = _ref7;
      var {
        positional,
        named
      } = args;
      var ret = instance.compute(positional, named);
      (0, _validator.consumeTag)(instance[RECOMPUTE_TAG]);
      return ret;
    }
    getDebugName(definition) {
      return (0, _utils.getDebugName)((definition.class || definition)['prototype']);
    }
  }
  function isFactoryManager(obj) {
    return obj != null && 'class' in obj;
  }
  (0, _manager2.setHelperManager)(owner => {
    return new ClassicHelperManager(owner);
  }, Helper);
  var CLASSIC_HELPER_MANAGER = (0, _manager2.getInternalHelperManager)(Helper);
  ///////////
  class Wrapper {
    constructor(compute) {
      this.compute = compute;
      this.isHelperFactory = true;
    }
    create() {
      // needs new instance or will leak containers
      return {
        compute: this.compute
      };
    }
  }
  class SimpleClassicHelperManager {
    constructor() {
      this.capabilities = (0, _manager2.helperCapabilities)('3.23', {
        hasValue: true
      });
    }
    createHelper(definition, args) {
      var {
        compute
      } = definition;
      return () => compute.call(null, args.positional, args.named);
    }
    getValue(fn$$1) {
      return fn$$1();
    }
    getDebugName(definition) {
      return (0, _utils.getDebugName)(definition.compute);
    }
  }
  var SIMPLE_CLASSIC_HELPER_MANAGER = new SimpleClassicHelperManager();
  (0, _manager2.setHelperManager)(() => SIMPLE_CLASSIC_HELPER_MANAGER, Wrapper.prototype);

  /**
  @module @ember/template
  */
  /**
    A wrapper around a string that has been marked as safe ("trusted"). **When
    rendered in HTML, Ember will not perform any escaping.**
  
    Note:
  
    1. This does not *make* the string safe; it means that some code in your
       application has *marked* it as safe using the `htmlSafe()` function.
  
    2. The only public API for getting a `SafeString` is calling `htmlSafe()`. It
       is *not* user-constructible.
  
    If a string contains user inputs or other untrusted data, you must sanitize
    the string before using the `htmlSafe` method. Otherwise your code is
    vulnerable to [Cross-Site Scripting][xss]. There are many open source
    sanitization libraries to choose from, both for front end and server-side
    sanitization.
  
    [xss]: https://owasp.org/www-community/attacks/DOM_Based_XSS
  
    ```javascript
    import { htmlSafe } from '@ember/template';
  
    let someTrustedOrSanitizedString = "<div>Hello!</div>"
  
    htmlSafe(someTrustedorSanitizedString);
    ```
  
    @for @ember/template
    @class SafeString
    @since 4.12.0
    @public
   */
  class SafeString {
    constructor(string) {
      this.__string = string;
    }
    /**
      Get the string back to use as a string.
         @public
      @method toString
      @returns {String} The string marked as trusted
     */
    toString() {
      return `${this.__string}`;
    }
    /**
      Get the wrapped string as HTML to use without escaping.
         @public
      @method toHTML
      @returns {String} the trusted string, without any escaping applied
     */
    toHTML() {
      return this.toString();
    }
  }
  _exports.SafeString = SafeString;
  var escape = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;',
    '=': '&#x3D;'
  };
  var possible = /[&<>"'`=]/;
  var badChars = /[&<>"'`=]/g;
  function escapeChar(chr) {
    return escape[chr];
  }
  function escapeExpression(string) {
    var s;
    if (typeof string !== 'string') {
      // don't escape SafeStrings, since they're already safe
      if (isHTMLSafe$1(string)) {
        return string.toHTML();
      } else if (string === null || string === undefined) {
        return '';
      } else if (!string) {
        return String(string);
      }
      // Force a string conversion as this will be done by the append regardless and
      // the regex test will do this transparently behind the scenes, causing issues if
      // an object's to string has escaped characters in it.
      s = String(string);
    } else {
      s = string;
    }
    if (!possible.test(s)) {
      return s;
    }
    // SAFETY: this is technically a lie, but it's a true lie as long as the
    // invariant it depends on is upheld: `escapeChar` will always return a string
    // as long as its input is one of the characters in `escape`, and it will only
    // be called if it matches one of the characters in the `badChar` regex, which
    // is hand-maintained to match the set escaped. (It would be nice if TS could
    // "see" into the regex to see how this works, but that'd be quite a lot of
    // extra fanciness.)
    return s.replace(badChars, escapeChar);
  }
  /**
    Use this method to indicate that a string should be rendered as HTML
    when the string is used in a template. To say this another way,
    strings marked with `htmlSafe` will not be HTML escaped.
  
    A word of warning -   The `htmlSafe` method does not make the string safe;
    it only tells the framework to treat the string as if it is safe to render
    as HTML. If a string contains user inputs or other untrusted
    data, you must sanitize the string before using the `htmlSafe` method.
    Otherwise your code is vulnerable to
    [Cross-Site Scripting](https://owasp.org/www-community/attacks/DOM_Based_XSS).
    There are many open source sanitization libraries to choose from,
    both for front end and server-side sanitization.
  
    ```javascript
    import { htmlSafe } from '@ember/template';
  
    const someTrustedOrSanitizedString = "<div>Hello!</div>"
  
    htmlSafe(someTrustedorSanitizedString)
    ```
  
    @method htmlSafe
    @for @ember/template
    @param str {String} The string to treat as trusted.
    @static
    @return {SafeString} A string that will not be HTML escaped by Handlebars.
    @public
  */
  function htmlSafe(str) {
    if (str === null || str === undefined) {
      str = '';
    } else if (typeof str !== 'string') {
      str = String(str);
    }
    return new SafeString(str);
  }
  /**
    Detects if a string was decorated using `htmlSafe`.
  
    ```javascript
    import { htmlSafe, isHTMLSafe } from '@ember/template';
  
    let plainString = 'plain string';
    let safeString = htmlSafe('<div>someValue</div>');
  
    isHTMLSafe(plainString); // false
    isHTMLSafe(safeString);  // true
    ```
  
    @method isHTMLSafe
    @for @ember/template
    @static
    @return {Boolean} `true` if the string was decorated with `htmlSafe`, `false` otherwise.
    @public
  */
  function isHTMLSafe$1(str) {
    return str !== null && typeof str === 'object' && 'toHTML' in str && typeof str.toHTML === 'function';
  }
  function instrumentationPayload(def) {
    return {
      object: `${def.name}:${def.outlet}`
    };
  }
  var CAPABILITIES$1 = {
    dynamicLayout: false,
    dynamicTag: false,
    prepareArgs: false,
    createArgs: false,
    attributeHook: false,
    elementHook: false,
    createCaller: false,
    dynamicScope: true,
    updateHook: false,
    createInstance: true,
    wrapped: false,
    willDestroy: false,
    hasSubOwner: false
  };
  class OutletComponentManager {
    create(_owner, definition, _args, env, dynamicScope) {
      var parentStateRef = dynamicScope.get('outletState');
      var currentStateRef = definition.ref;
      dynamicScope.set('outletState', currentStateRef);
      var state = {
        self: (0, _reference.createConstRef)(definition.controller, 'this'),
        finalize: (0, _instrumentation._instrumentStart)('render.outlet', instrumentationPayload, definition)
      };
      if (env.debugRenderTree !== undefined) {
        state.outlet = {
          name: definition.outlet
        };
        var parentState = (0, _reference.valueForRef)(parentStateRef);
        var parentOwner = parentState && parentState.render && parentState.render.owner;
        var currentOwner = (0, _reference.valueForRef)(currentStateRef).render.owner;
        if (parentOwner && parentOwner !== currentOwner) {
          (true && !(currentOwner instanceof _instance.default) && (0, _debug.assert)('Expected currentOwner to be an EngineInstance', currentOwner instanceof _instance.default));
          var mountPoint = currentOwner.mountPoint;
          state.engine = currentOwner;
          if (mountPoint) {
            state.engineBucket = {
              mountPoint
            };
          }
        }
      }
      return state;
    }
    getDebugName(_ref8) {
      var {
        name
      } = _ref8;
      return name;
    }
    getDebugCustomRenderTree(definition, state, args) {
      var nodes = [];
      if (state.outlet) {
        nodes.push({
          bucket: state.outlet,
          type: 'outlet',
          name: state.outlet.name,
          args: _runtime.EMPTY_ARGS,
          instance: undefined,
          template: undefined
        });
      }
      if (state.engineBucket) {
        nodes.push({
          bucket: state.engineBucket,
          type: 'engine',
          name: state.engineBucket.mountPoint,
          args: _runtime.EMPTY_ARGS,
          instance: state.engine,
          template: undefined
        });
      }
      nodes.push({
        bucket: state,
        type: 'route-template',
        name: definition.name,
        args: args,
        instance: definition.controller,
        template: (0, _util.unwrapTemplate)(definition.template).moduleName
      });
      return nodes;
    }
    getCapabilities() {
      return CAPABILITIES$1;
    }
    getSelf(_ref9) {
      var {
        self
      } = _ref9;
      return self;
    }
    didCreate() {}
    didUpdate() {}
    didRenderLayout(state) {
      state.finalize();
    }
    didUpdateLayout() {}
    getDestroyable() {
      return null;
    }
  }
  var OUTLET_MANAGER = new OutletComponentManager();
  class OutletComponentDefinition {
    constructor(state, manager) {
      if (manager === void 0) {
        manager = OUTLET_MANAGER;
      }
      this.state = state;
      this.manager = manager;
      // handle is not used by this custom definition
      this.handle = -1;
      var capabilities = manager.getCapabilities();
      this.capabilities = (0, _manager2.capabilityFlagsFrom)(capabilities);
      this.compilable = capabilities.wrapped ? (0, _util.unwrapTemplate)(state.template).asWrappedLayout() : (0, _util.unwrapTemplate)(state.template).asLayout();
      this.resolvedName = state.name;
    }
  }
  function createRootOutlet(outletView) {
    if (_environment2.ENV._APPLICATION_TEMPLATE_WRAPPER) {
      var WRAPPED_CAPABILITIES = Object.assign({}, CAPABILITIES$1, {
        dynamicTag: true,
        elementHook: true,
        wrapped: true
      });
      var WrappedOutletComponentManager = class extends OutletComponentManager {
        getTagName() {
          return 'div';
        }
        getCapabilities() {
          return WRAPPED_CAPABILITIES;
        }
        didCreateElement(component, element) {
          // to add GUID id and class
          element.setAttribute('class', 'ember-view');
          element.setAttribute('id', (0, _utils.guidFor)(component));
        }
      };
      var WRAPPED_OUTLET_MANAGER = new WrappedOutletComponentManager();
      return new OutletComponentDefinition(outletView.state, WRAPPED_OUTLET_MANAGER);
    } else {
      return new OutletComponentDefinition(outletView.state);
    }
  }
  class RootComponentManager extends CurlyComponentManager {
    constructor(component) {
      super();
      this.component = component;
    }
    create(_owner, _state, _args, _ref10, dynamicScope) {
      var {
        isInteractive
      } = _ref10;
      var component = this.component;
      var finalizer = (0, _instrumentation._instrumentStart)('render.component', initialRenderInstrumentDetails, component);
      dynamicScope.view = component;
      var hasWrappedElement = component.tagName !== '';
      // We usually do this in the `didCreateElement`, but that hook doesn't fire for tagless components
      if (!hasWrappedElement) {
        if (isInteractive) {
          component.trigger('willRender');
        }
        component._transitionTo('hasElement');
        if (isInteractive) {
          component.trigger('willInsertElement');
        }
      }
      if (true /* DEBUG */) {
        processComponentInitializationAssertions(component, {});
      }
      var bucket = new ComponentStateBucket(component, null, _validator.CONSTANT_TAG, finalizer, hasWrappedElement, isInteractive);
      (0, _validator.consumeTag)(component[DIRTY_TAG]);
      return bucket;
    }
  }
  // ROOT is the top-level template it has nothing but one yield.
  // it is supposed to have a dummy element
  var ROOT_CAPABILITIES = {
    dynamicLayout: true,
    dynamicTag: true,
    prepareArgs: false,
    createArgs: false,
    attributeHook: true,
    elementHook: true,
    createCaller: true,
    dynamicScope: true,
    updateHook: true,
    createInstance: true,
    wrapped: true,
    willDestroy: false,
    hasSubOwner: false
  };
  class RootComponentDefinition {
    constructor(component) {
      // handle is not used by this custom definition
      this.handle = -1;
      this.resolvedName = '-top-level';
      this.capabilities = (0, _manager2.capabilityFlagsFrom)(ROOT_CAPABILITIES);
      this.compilable = null;
      this.manager = new RootComponentManager(component);
      var factory = (0, _container.getFactoryFor)(component);
      (true && !(factory !== undefined) && (0, _debug.assert)('missing factory for component', factory !== undefined));
      this.state = factory;
    }
  }

  /**
  @module ember
  */
  /**
    The `{{#each}}` helper loops over elements in a collection. It is an extension
    of the base Handlebars `{{#each}}` helper.
  
    The default behavior of `{{#each}}` is to yield its inner block once for every
    item in an array passing the item as the first block parameter.
  
    Assuming the `@developers` argument contains this array:
  
    ```javascript
    [{ name: 'Yehuda' },{ name: 'Tom' }, { name: 'Paul' }];
    ```
  
    ```handlebars
    <ul>
      {{#each @developers as |person|}}
        <li>Hello, {{person.name}}!</li>
      {{/each}}
    </ul>
    ```
  
    The same rules apply to arrays of primitives.
  
    ```javascript
    ['Yehuda', 'Tom', 'Paul']
    ```
  
    ```handlebars
    <ul>
      {{#each @developerNames as |name|}}
        <li>Hello, {{name}}!</li>
      {{/each}}
    </ul>
    ```
  
    During iteration, the index of each item in the array is provided as a second block
    parameter.
  
    ```handlebars
    <ul>
      {{#each @developers as |person index|}}
        <li>Hello, {{person.name}}! You're number {{index}} in line</li>
      {{/each}}
    </ul>
    ```
  
    ### Specifying Keys
  
    In order to improve rendering speed, Ember will try to reuse the DOM elements
    where possible. Specifically, if the same item is present in the array both
    before and after the change, its DOM output will be reused.
  
    The `key` option is used to tell Ember how to determine if the items in the
    array being iterated over with `{{#each}}` has changed between renders. By
    default the item's object identity is used.
  
    This is usually sufficient, so in most cases, the `key` option is simply not
    needed. However, in some rare cases, the objects' identities may change even
    though they represent the same underlying data.
  
    For example:
  
    ```javascript
    people.map(person => {
      return { ...person, type: 'developer' };
    });
    ```
  
    In this case, each time the `people` array is `map`-ed over, it will produce
    an new array with completely different objects between renders. In these cases,
    you can help Ember determine how these objects related to each other with the
    `key` option:
  
    ```handlebars
    <ul>
      {{#each @developers key="name" as |person|}}
        <li>Hello, {{person.name}}!</li>
      {{/each}}
    </ul>
    ```
  
    By doing so, Ember will use the value of the property specified (`person.name`
    in the example) to find a "match" from the previous render. That is, if Ember
    has previously seen an object from the `@developers` array with a matching
    name, its DOM elements will be re-used.
  
    There are two special values for `key`:
  
      * `@index` - The index of the item in the array.
      * `@identity` - The item in the array itself.
  
    ### {{else}} condition
  
    `{{#each}}` can have a matching `{{else}}`. The contents of this block will render
    if the collection is empty.
  
    ```handlebars
    <ul>
      {{#each @developers as |person|}}
        <li>{{person.name}} is available!</li>
      {{else}}
        <li>Sorry, nobody is available for this task.</li>
      {{/each}}
    </ul>
    ```
  
    @method each
    @for Ember.Templates.helpers
    @public
   */
  /**
    The `{{each-in}}` helper loops over properties on an object.
  
    For example, given this component definition:
  
    ```app/components/developer-details.js
    import Component from '@glimmer/component';
    import { tracked } from '@glimmer/tracking';
  
    export default class extends Component {
      @tracked developer = {
        "name": "Shelly Sails",
        "age": 42
      };
    }
    ```
  
    This template would display all properties on the `developer`
    object in a list:
  
    ```app/components/developer-details.hbs
    <ul>
      {{#each-in this.developer as |key value|}}
        <li>{{key}}: {{value}}</li>
      {{/each-in}}
    </ul>
    ```
  
    Outputting their name and age:
  
    ```html
    <ul>
      <li>name: Shelly Sails</li>
      <li>age: 42</li>
    </ul>
    ```
  
    @method each-in
    @for Ember.Templates.helpers
    @public
    @since 2.1.0
  */
  class EachInWrapper {
    constructor(inner) {
      this.inner = inner;
    }
  }
  var eachIn = internalHelper(_ref11 => {
    var {
      positional
    } = _ref11;
    var inner = positional[0];
    (true && !(inner) && (0, _debug.assert)('expected at least one positional arg', inner));
    return (0, _reference.createComputeRef)(() => {
      var iterable = (0, _reference.valueForRef)(inner);
      (0, _validator.consumeTag)((0, _metal.tagForObject)(iterable));
      if ((0, _utils.isProxy)(iterable)) {
        // this is because the each-in doesn't actually get(proxy, 'key') but bypasses it
        // and the proxy's tag is lazy updated on access
        iterable = (0, _runtime2._contentFor)(iterable);
      }
      return new EachInWrapper(iterable);
    });
  });
  function toIterator(iterable) {
    if (iterable instanceof EachInWrapper) {
      return toEachInIterator(iterable.inner);
    } else {
      return toEachIterator(iterable);
    }
  }
  function toEachInIterator(iterable) {
    if (!isIndexable(iterable)) {
      return null;
    }
    if (Array.isArray(iterable) || (0, _internals2.isEmberArray)(iterable)) {
      return ObjectIterator.fromIndexable(iterable);
    } else if (isNativeIterable(iterable)) {
      return MapLikeNativeIterator.from(iterable);
    } else if (hasForEach(iterable)) {
      return ObjectIterator.fromForEachable(iterable);
    } else {
      return ObjectIterator.fromIndexable(iterable);
    }
  }
  function toEachIterator(iterable) {
    if (!(0, _utils.isObject)(iterable)) {
      return null;
    }
    if (Array.isArray(iterable)) {
      return ArrayIterator.from(iterable);
    } else if ((0, _internals2.isEmberArray)(iterable)) {
      return EmberArrayIterator.from(iterable);
    } else if (isNativeIterable(iterable)) {
      return ArrayLikeNativeIterator.from(iterable);
    } else if (hasForEach(iterable)) {
      return ArrayIterator.fromForEachable(iterable);
    } else {
      return null;
    }
  }
  class BoundedIterator {
    constructor(length) {
      this.length = length;
      this.position = 0;
    }
    isEmpty() {
      return false;
    }
    memoFor(position) {
      return position;
    }
    next() {
      var {
        length,
        position
      } = this;
      if (position >= length) {
        return null;
      }
      var value = this.valueFor(position);
      var memo = this.memoFor(position);
      this.position++;
      return {
        value,
        memo
      };
    }
  }
  class ArrayIterator extends BoundedIterator {
    static from(iterable) {
      return iterable.length > 0 ? new this(iterable) : null;
    }
    static fromForEachable(object) {
      var array$$1 = [];
      object.forEach(item => array$$1.push(item));
      return this.from(array$$1);
    }
    constructor(array$$1) {
      super(array$$1.length);
      this.array = array$$1;
    }
    valueFor(position) {
      return this.array[position];
    }
  }
  class EmberArrayIterator extends BoundedIterator {
    static from(iterable) {
      return iterable.length > 0 ? new this(iterable) : null;
    }
    constructor(array$$1) {
      super(array$$1.length);
      this.array = array$$1;
    }
    valueFor(position) {
      return (0, _metal.objectAt)(this.array, position);
    }
  }
  class ObjectIterator extends BoundedIterator {
    static fromIndexable(obj) {
      var keys = Object.keys(obj);
      if (keys.length === 0) {
        return null;
      } else {
        var values = [];
        for (var key of keys) {
          var value = void 0;
          value = obj[key];
          // Add the tag of the returned value if it is an array, since arrays
          // should always cause updates if they are consumed and then changed
          if ((0, _validator.isTracking)()) {
            (0, _validator.consumeTag)((0, _validator.tagFor)(obj, key));
            if (Array.isArray(value)) {
              (0, _validator.consumeTag)((0, _validator.tagFor)(value, '[]'));
            }
          }
          values.push(value);
        }
        return new this(keys, values);
      }
    }
    static fromForEachable(obj) {
      var keys = [];
      var values = [];
      var length = 0;
      var isMapLike = false;
      // Not using an arrow function here so we can get an accurate `arguments`
      obj.forEach(function (value, key) {
        isMapLike = isMapLike || arguments.length >= 2;
        if (isMapLike) {
          keys.push(key);
        }
        values.push(value);
        length++;
      });
      if (length === 0) {
        return null;
      } else if (isMapLike) {
        return new this(keys, values);
      } else {
        return new ArrayIterator(values);
      }
    }
    constructor(keys, values) {
      super(values.length);
      this.keys = keys;
      this.values = values;
    }
    valueFor(position) {
      return this.values[position];
    }
    memoFor(position) {
      return this.keys[position];
    }
  }
  class NativeIterator {
    static from(iterable) {
      var iterator = iterable[Symbol.iterator]();
      var result = iterator.next();
      var {
        done
      } = result;
      if (done) {
        return null;
      } else {
        return new this(iterator, result);
      }
    }
    constructor(iterable, result) {
      this.iterable = iterable;
      this.result = result;
      this.position = 0;
    }
    isEmpty() {
      return false;
    }
    next() {
      var {
        iterable,
        result,
        position
      } = this;
      if (result.done) {
        return null;
      }
      var value = this.valueFor(result, position);
      var memo = this.memoFor(result, position);
      this.position++;
      this.result = iterable.next();
      return {
        value,
        memo
      };
    }
  }
  class ArrayLikeNativeIterator extends NativeIterator {
    valueFor(result) {
      return result.value;
    }
    memoFor(_result, position) {
      return position;
    }
  }
  class MapLikeNativeIterator extends NativeIterator {
    valueFor(result) {
      return result.value[1];
    }
    memoFor(result) {
      return result.value[0];
    }
  }
  function hasForEach(value) {
    return value != null && typeof value['forEach'] === 'function';
  }
  function isNativeIterable(value) {
    return value != null && typeof value[Symbol.iterator] === 'function';
  }
  function isIndexable(value) {
    return value !== null && (typeof value === 'object' || typeof value === 'function');
  }
  function toBool(predicate) {
    if ((0, _utils.isProxy)(predicate)) {
      (0, _validator.consumeTag)((0, _metal.tagForProperty)(predicate, 'content'));
      return Boolean((0, _metal.get)(predicate, 'isTruthy'));
    } else if ((0, _array.isArray)(predicate)) {
      (0, _validator.consumeTag)((0, _metal.tagForProperty)(predicate, '[]'));
      return predicate.length !== 0;
    } else if ((0, _glimmer.isHTMLSafe)(predicate)) {
      return Boolean(predicate.toString());
    } else {
      return Boolean(predicate);
    }
  }

  ///////////
  // Setup global context
  (0, _globalContext.default)({
    FEATURES: {
      DEFAULT_HELPER_MANAGER: true
    },
    scheduleRevalidate() {
      _runloop._backburner.ensureInstance();
    },
    toBool,
    toIterator,
    getProp: _metal._getProp,
    setProp: _metal._setProp,
    getPath: _metal.get,
    setPath: _metal.set,
    scheduleDestroy(destroyable, destructor) {
      (0, _runloop.schedule)('actions', null, destructor, destroyable);
    },
    scheduleDestroyed(finalizeDestructor) {
      (0, _runloop.schedule)('destroy', null, finalizeDestructor);
    },
    warnIfStyleNotTrusted(value) {
      (true && (0, _debug.warn)((0, _views.constructStyleDeprecationMessage)(String(value)), (() => {
        if (value === null || value === undefined || isHTMLSafe$1(value)) {
          return true;
        }
        return false;
      })(), {
        id: 'ember-htmlbars.style-xss-warning'
      }));
    },
    assert(test, msg, options) {
      var _a;
      if (true /* DEBUG */) {
        var id = options === null || options === void 0 ? void 0 : options.id;
        var override = VM_ASSERTION_OVERRIDES.filter(o => o.id === id)[0];
        (true && !(test) && (0, _debug.assert)((_a = override === null || override === void 0 ? void 0 : override.message) !== null && _a !== void 0 ? _a : msg, test));
      }
    },
    deprecate(msg, test, options) {
      var _a;
      if (true /* DEBUG */) {
        var {
          id
        } = options;
        if (id === 'argument-less-helper-paren-less-invocation') {
          throw new Error(`A resolved helper cannot be passed as a named argument as the syntax is ` + `ambiguously a pass-by-reference or invocation. Use the ` + `\`{{helper 'foo-helper}}\` helper to pass by reference or explicitly ` + `invoke the helper with parens: \`{{(fooHelper)}}\`.`);
        }
        var override = VM_DEPRECATION_OVERRIDES.filter(o => o.id === id)[0];
        if (!override) throw new Error(`deprecation override for ${id} not found`);
        // allow deprecations to be disabled in the VM_DEPRECATION_OVERRIDES array below
        if (!override.disabled) {
          (true && !(Boolean(test)) && (0, _debug.deprecate)((_a = override.message) !== null && _a !== void 0 ? _a : msg, Boolean(test), override));
        }
      }
    }
  });
  if (true /* DEBUG */) {
    _validator.setTrackingTransactionEnv === null || _validator.setTrackingTransactionEnv === void 0 ? void 0 : (0, _validator.setTrackingTransactionEnv)({
      debugMessage(obj, keyName) {
        var dirtyString = keyName ? `\`${keyName}\` on \`${_utils.getDebugName === null || _utils.getDebugName === void 0 ? void 0 : (0, _utils.getDebugName)(obj)}\`` : `\`${_utils.getDebugName === null || _utils.getDebugName === void 0 ? void 0 : (0, _utils.getDebugName)(obj)}\``;
        return `You attempted to update ${dirtyString}, but it had already been used previously in the same computation.  Attempting to update a value after using it in a computation can cause logical errors, infinite revalidation bugs, and performance issues, and is not supported.`;
      }
    });
  }
  ///////////
  // VM Assertion/Deprecation overrides
  var VM_DEPRECATION_OVERRIDES = [{
    id: 'setting-on-hash',
    until: '4.4.0',
    for: 'ember-source',
    since: {
      available: '3.28.0',
      enabled: '3.28.0'
    }
  }];
  var VM_ASSERTION_OVERRIDES = [];
  ///////////
  // Define environment delegate
  class EmberEnvironmentDelegate {
    constructor(owner, isInteractive) {
      this.owner = owner;
      this.isInteractive = isInteractive;
      this.enableDebugTooling = _environment2.ENV._DEBUG_RENDER_TREE;
    }
    onTransactionCommit() {}
  }

  /**
  @module ember
  */
  var disallowDynamicResolution = internalHelper(_ref12 => {
    var {
      positional,
      named
    } = _ref12;
    var nameOrValueRef = positional[0];
    (true && !(positional.length === 1 && nameOrValueRef) && (0, _debug.assert)(`[BUG] wrong number of positional arguments, expecting 1, got ${positional.length}`, positional.length === 1 && nameOrValueRef));
    var typeRef = named['type'];
    var locRef = named['loc'];
    var originalRef = named['original'];
    (true && !(typeRef) && (0, _debug.assert)(`[BUG] expecting \`type\` named argument`, typeRef));
    (true && !(locRef) && (0, _debug.assert)(`[BUG] expecting \`loc\` named argument`, locRef));
    (true && !(originalRef) && (0, _debug.assert)(`[BUG] expecting \`original\` named argument`, originalRef)); // Bug: why do these fail?
    // assert('[BUG] expecting a string literal for the `type` argument', isConstRef(typeRef));
    // assert('[BUG] expecting a string literal for the `loc` argument', isConstRef(locRef));
    // assert('[BUG] expecting a string literal for the `original` argument', isConstRef(originalRef));
    var type = (0, _reference.valueForRef)(typeRef);
    var loc = (0, _reference.valueForRef)(locRef);
    var original = (0, _reference.valueForRef)(originalRef);
    (true && !(typeof type === 'string') && (0, _debug.assert)('[BUG] expecting a string literal for the `type` argument', typeof type === 'string'));
    (true && !(typeof loc === 'string') && (0, _debug.assert)('[BUG] expecting a string literal for the `loc` argument', typeof loc === 'string'));
    (true && !(typeof original === 'string') && (0, _debug.assert)('[BUG] expecting a string literal for the `original` argument', typeof original === 'string'));
    return (0, _reference.createComputeRef)(() => {
      var nameOrValue = (0, _reference.valueForRef)(nameOrValueRef);
      (true && !(typeof nameOrValue !== 'string') && (0, _debug.assert)(`Passing a dynamic string to the \`(${type})\` keyword is disallowed. ` + `(You specified \`(${type} ${original})\` and \`${original}\` evaluated into "${nameOrValue}".) ` + `This ensures we can statically analyze the template and determine which ${type}s are used. ` + `If the ${type} name is always the same, use a string literal instead, i.e. \`(${type} "${nameOrValue}")\`. ` + `Otherwise, import the ${type}s into JavaScript and pass them directly. ` + 'See https://github.com/emberjs/rfcs/blob/master/text/0496-handlebars-strict-mode.md#4-no-dynamic-resolution for details. ' + loc, typeof nameOrValue !== 'string'));
      return nameOrValue;
    });
  });
  var helper$1;
  if (true /* DEBUG */) {
    helper$1 = args => {
      var inner = args.positional[0];
      (true && !(inner) && (0, _debug.assert)('expected at least one positional arg', inner));
      return (0, _reference.createComputeRef)(() => {
        var value = (0, _reference.valueForRef)(inner);
        (true && !(value !== null && value !== undefined) && (0, _debug.assert)('You cannot pass a null or undefined destination element to in-element', value !== null && value !== undefined));
        return value;
      });
    };
  } else {
    helper$1 = args => {
      var arg = args.positional[0];
      (true && !(arg) && (0, _debug.assert)('expected at least one positional arg', arg));
      return arg;
    };
  }
  var inElementNullCheckHelper = internalHelper(helper$1);
  var normalizeClassHelper = internalHelper(_ref13 => {
    var {
      positional
    } = _ref13;
    return (0, _reference.createComputeRef)(() => {
      var classNameArg = positional[0];
      var valueArg = positional[1];
      (true && !(classNameArg && valueArg) && (0, _debug.assert)('expected at least two positional args', classNameArg && valueArg));
      var classNameParts = (0, _reference.valueForRef)(classNameArg).split('.');
      var className = classNameParts[classNameParts.length - 1];
      (true && !(className) && (0, _debug.assert)('has className', className)); // Always at least one split result
      var value = (0, _reference.valueForRef)(valueArg);
      if (value === true) {
        return (0, _string.dasherize)(className);
      } else if (!value && value !== 0) {
        return '';
      } else {
        return String(value);
      }
    });
  });
  var resolve = internalHelper((_ref14, owner) => {
    var {
      positional
    } = _ref14;
    var _a;
    // why is this allowed to be undefined in the first place?
    (true && !(owner) && (0, _debug.assert)('[BUG] missing owner', owner));
    (true && !(positional.length === 1) && (0, _debug.assert)(`[BUG] wrong number of positional arguments, expecting 1, got ${positional.length}`, positional.length === 1));
    var fullNameRef = positional[0];
    (true && !(fullNameRef && (0, _reference.isConstRef)(fullNameRef)) && (0, _debug.assert)('[BUG] expecting a string literal as argument', fullNameRef && (0, _reference.isConstRef)(fullNameRef)));
    var fullName = (0, _reference.valueForRef)(fullNameRef);
    (true && !(typeof fullName === 'string') && (0, _debug.assert)('[BUG] expecting a string literal as argument', typeof fullName === 'string'));
    (true && !((s => s.split(':').length === 2)(fullName)) && (0, _debug.assert)('[BUG] expecting a valid full name', (s => s.split(':').length === 2)(fullName)));
    if (true /* DEBUG */) {
      var [type, name] = fullName.split(':');
      (true && !(owner.hasRegistration(fullName)) && (0, _debug.assert)(`Attempted to invoke \`(-resolve "${fullName}")\`, but ${name} was not a valid ${type} name.`, owner.hasRegistration(fullName)));
    }
    return (0, _reference.createConstRef)((_a = owner.factoryFor(fullName)) === null || _a === void 0 ? void 0 : _a.class, `(-resolve "${fullName}")`);
  });

  /**
  @module ember
  */
  /**
    This reference is used to get the `[]` tag of iterables, so we can trigger
    updates to `{{each}}` when it changes. It is put into place by a template
    transform at build time, similar to the (-each-in) helper
  */
  var trackArray = internalHelper(_ref15 => {
    var {
      positional
    } = _ref15;
    var inner = positional[0];
    (true && !(inner) && (0, _debug.assert)('expected at least one positional arg', inner));
    return (0, _reference.createComputeRef)(() => {
      var iterable = (0, _reference.valueForRef)(inner);
      if ((0, _utils.isObject)(iterable)) {
        (0, _validator.consumeTag)((0, _metal.tagForProperty)(iterable, '[]'));
      }
      return iterable;
    });
  });

  /**
  @module ember
  */
  /**
    The `mut` helper lets you __clearly specify__ that a child `Component` can update the
    (mutable) value passed to it, which will __change the value of the parent component__.
  
    To specify that a parameter is mutable, when invoking the child `Component`:
  
    ```handlebars
    <MyChild @childClickCount={{fn (mut totalClicks)}} />
    ```
  
     or
  
    ```handlebars
    {{my-child childClickCount=(mut totalClicks)}}
    ```
  
    The child `Component` can then modify the parent's value just by modifying its own
    property:
  
    ```javascript
    // my-child.js
    export default Component.extend({
      click() {
        this.incrementProperty('childClickCount');
      }
    });
    ```
  
    Note that for curly components (`{{my-component}}`) the bindings are already mutable,
    making the `mut` unnecessary.
  
    Additionally, the `mut` helper can be combined with the `fn` helper to
    mutate a value. For example:
  
    ```handlebars
    <MyChild @childClickCount={{this.totalClicks}} @click-count-change={{fn (mut totalClicks))}} />
    ```
  
    or
  
    ```handlebars
    {{my-child childClickCount=totalClicks click-count-change=(fn (mut totalClicks))}}
    ```
  
    The child `Component` would invoke the function with the new click value:
  
    ```javascript
    // my-child.js
    export default Component.extend({
      click() {
        this.get('click-count-change')(this.get('childClickCount') + 1);
      }
    });
    ```
  
    The `mut` helper changes the `totalClicks` value to what was provided as the `fn` argument.
  
    The `mut` helper, when used with `fn`, will return a function that
    sets the value passed to `mut` to its first argument. As an example, we can create a
    button that increments a value passing the value directly to the `fn`:
  
    ```handlebars
    {{! inc helper is not provided by Ember }}
    <button onclick={{fn (mut count) (inc count)}}>
      Increment count
    </button>
    ```
  
    @method mut
    @param {Object} [attr] the "two-way" attribute that can be modified.
    @for Ember.Templates.helpers
    @public
  */
  var mut = internalHelper(_ref16 => {
    var {
      positional
    } = _ref16;
    var ref = positional[0];
    (true && !(ref) && (0, _debug.assert)('expected at least one positional arg', ref)); // TODO: Improve this error message. This covers at least two distinct
    // cases:
    //
    // 1. (mut "not a path") – passing a literal, result from a helper
    //    invocation, etc
    //
    // 2. (mut receivedValue) – passing a value received from the caller
    //    that was originally derived from a literal, result from a helper
    //    invocation, etc
    //
    // This message is alright for the first case, but could be quite
    // confusing for the second case.
    (true && !((0, _reference.isUpdatableRef)(ref)) && (0, _debug.assert)('You can only pass a path to mut', (0, _reference.isUpdatableRef)(ref)));
    return (0, _reference.createInvokableRef)(ref);
  });

  /**
    The `readonly` helper let's you specify that a binding is one-way only,
    instead of two-way.
    When you pass a `readonly` binding from an outer context (e.g. parent component),
    to to an inner context (e.g. child component), you are saying that changing that
    property in the inner context does not change the value in the outer context.
  
    To specify that a binding is read-only, when invoking the child `Component`:
  
    ```app/components/my-parent.js
    export default Component.extend({
      totalClicks: 3
    });
    ```
  
    ```app/templates/components/my-parent.hbs
    {{log totalClicks}} // -> 3
    <MyChild @childClickCount={{readonly totalClicks}} />
    ```
    ```
    {{my-child childClickCount=(readonly totalClicks)}}
    ```
  
    Now, when you update `childClickCount`:
  
    ```app/components/my-child.js
    export default Component.extend({
      click() {
        this.incrementProperty('childClickCount');
      }
    });
    ```
  
    The value updates in the child component, but not the parent component:
  
    ```app/templates/components/my-child.hbs
    {{log childClickCount}} //-> 4
    ```
  
    ```app/templates/components/my-parent.hbs
    {{log totalClicks}} //-> 3
    <MyChild @childClickCount={{readonly totalClicks}} />
    ```
    or
    ```app/templates/components/my-parent.hbs
    {{log totalClicks}} //-> 3
    {{my-child childClickCount=(readonly totalClicks)}}
    ```
  
    ### Objects and Arrays
  
    When passing a property that is a complex object (e.g. object, array) instead of a primitive object (e.g. number, string),
    only the reference to the object is protected using the readonly helper.
    This means that you can change properties of the object both on the parent component, as well as the child component.
    The `readonly` binding behaves similar to the `const` keyword in JavaScript.
  
    Let's look at an example:
  
    First let's set up the parent component:
  
    ```app/components/my-parent.js
    import Component from '@ember/component';
  
    export default Component.extend({
      clicks: null,
  
      init() {
        this._super(...arguments);
        this.set('clicks', { total: 3 });
      }
    });
    ```
  
    ```app/templates/components/my-parent.hbs
    {{log clicks.total}} //-> 3
    <MyChild @childClicks={{readonly clicks}} />
    ```
    ```app/templates/components/my-parent.hbs
    {{log clicks.total}} //-> 3
    {{my-child childClicks=(readonly clicks)}}
    ```
  
    Now, if you update the `total` property of `childClicks`:
  
    ```app/components/my-child.js
    import Component from '@ember/component';
  
    export default Component.extend({
      click() {
        this.get('clicks').incrementProperty('total');
      }
    });
    ```
  
    You will see the following happen:
  
    ```app/templates/components/my-parent.hbs
    {{log clicks.total}} //-> 4
    <MyChild @childClicks={{readonly clicks}} />
    ```
    or
    ```app/templates/components/my-parent.hbs
    {{log clicks.total}} //-> 4
    {{my-child childClicks=(readonly clicks)}}
    ```
  
    ```app/templates/components/my-child.hbs
    {{log childClicks.total}} //-> 4
    ```
  
    @method readonly
    @param {Object} [attr] the read-only attribute.
    @for Ember.Templates.helpers
    @private
  */
  var readonly = internalHelper(_ref17 => {
    var {
      positional
    } = _ref17;
    var firstArg = positional[0];
    (true && !(firstArg) && (0, _debug.assert)('has first arg', firstArg));
    return (0, _reference.createReadOnlyRef)(firstArg);
  });

  /**
  @module ember
  */
  /**
    The `{{unbound}}` helper disconnects the one-way binding of a property,
    essentially freezing its value at the moment of rendering. For example,
    in this example the display of the variable `name` will not change even
    if it is set with a new value:
  
    ```handlebars
    {{unbound this.name}}
    ```
  
    Like any helper, the `unbound` helper can accept a nested helper expression.
    This allows for custom helpers to be rendered unbound:
  
    ```handlebars
    {{unbound (some-custom-helper)}}
    {{unbound (capitalize this.name)}}
    {{! You can use any helper, including unbound, in a nested expression }}
    {{capitalize (unbound this.name)}}
    ```
  
    The `unbound` helper only accepts a single argument, and it return an
    unbound value.
  
    @method unbound
    @for Ember.Templates.helpers
    @public
  */
  var unbound = internalHelper(_ref18 => {
    var {
      positional,
      named
    } = _ref18;
    (true && !(positional.length === 1 && Object.keys(named).length === 0) && (0, _debug.assert)('unbound helper cannot be called with multiple params or hash params', positional.length === 1 && Object.keys(named).length === 0));
    return (0, _reference.createUnboundRef)((0, _reference.valueForRef)(positional[0]), '(result of an `unbound` helper)');
  });

  /**
  @module ember
  */
  var uniqueId = internalHelper(() => {
    return (0, _reference.createConstRef)(uniqueId$1(), 'unique-id');
  });
  // From https://gist.github.com/selfish/fef2c0ba6cdfe07af76e64cecd74888b
  //
  // This code should be reasonably fast, and provide a unique value every time
  // it's called, which is what we need here. It produces a string formatted as a
  // standard UUID, which avoids accidentally turning Ember-specific
  // implementation details into an intimate API. It also ensures that the UUID
  // always starts with a letter, to avoid creating invalid IDs with a numeric
  // digit at the start.
  function uniqueId$1() {
    // @ts-expect-error this one-liner abuses weird JavaScript semantics that
    // TypeScript (legitimately) doesn't like, but they're nonetheless valid and
    // specced.
    return ([3e7] + -1e3 + -4e3 + -2e3 + -1e11).replace(/[0-3]/g, a => (a * 4 ^ Math.random() * 16 >> (a & 2)).toString(16));
  }
  var MODIFIERS = ['alt', 'shift', 'meta', 'ctrl'];
  var POINTER_EVENT_TYPE_REGEX = /^click|mouse|touch/;
  function isAllowedEvent(event, allowedKeys) {
    if (allowedKeys === null || allowedKeys === undefined) {
      if (POINTER_EVENT_TYPE_REGEX.test(event.type)) {
        return (0, _views.isSimpleClick)(event);
      } else {
        allowedKeys = '';
      }
    }
    if (allowedKeys.indexOf('any') >= 0) {
      return true;
    }
    for (var i = 0; i < MODIFIERS.length; i++) {
      if (event[MODIFIERS[i] + 'Key'] && allowedKeys.indexOf(MODIFIERS[i]) === -1) {
        return false;
      }
    }
    return true;
  }
  var ActionHelper = {
    // registeredActions is re-exported for compatibility with older plugins
    // that were using this undocumented API.
    registeredActions: _views.ActionManager.registeredActions,
    registerAction(actionState) {
      var {
        actionId
      } = actionState;
      _views.ActionManager.registeredActions[actionId] = actionState;
      return actionId;
    },
    unregisterAction(actionState) {
      var {
        actionId
      } = actionState;
      delete _views.ActionManager.registeredActions[actionId];
    }
  };
  class ActionState {
    constructor(element, owner, actionId, actionArgs, namedArgs, positionalArgs) {
      this.tag = (0, _validator.createUpdatableTag)();
      this.element = element;
      this.owner = owner;
      this.actionId = actionId;
      this.actionArgs = actionArgs;
      this.namedArgs = namedArgs;
      this.positional = positionalArgs;
      this.eventName = this.getEventName();
      (0, _destroyable.registerDestructor)(this, () => ActionHelper.unregisterAction(this));
    }
    getEventName() {
      var {
        on: on$$1
      } = this.namedArgs;
      return on$$1 !== undefined ? (0, _reference.valueForRef)(on$$1) : 'click';
    }
    getActionArgs() {
      var result = new Array(this.actionArgs.length);
      for (var i = 0; i < this.actionArgs.length; i++) {
        result[i] = (0, _reference.valueForRef)(this.actionArgs[i]);
      }
      return result;
    }
    getTarget() {
      var {
        implicitTarget,
        namedArgs
      } = this;
      var {
        target
      } = namedArgs;
      return target !== undefined ? (0, _reference.valueForRef)(target) : (0, _reference.valueForRef)(implicitTarget);
    }
    handler(event) {
      var {
        actionName,
        namedArgs
      } = this;
      var {
        bubbles,
        preventDefault,
        allowedKeys
      } = namedArgs;
      var bubblesVal = bubbles !== undefined ? (0, _reference.valueForRef)(bubbles) : undefined;
      var preventDefaultVal = preventDefault !== undefined ? (0, _reference.valueForRef)(preventDefault) : undefined;
      var allowedKeysVal = allowedKeys !== undefined ? (0, _reference.valueForRef)(allowedKeys) : undefined;
      var target = this.getTarget();
      var shouldBubble = bubblesVal !== false;
      if (!isAllowedEvent(event, allowedKeysVal)) {
        return true;
      }
      if (preventDefaultVal !== false) {
        event.preventDefault();
      }
      if (!shouldBubble) {
        event.stopPropagation();
      }
      (0, _runloop.join)(() => {
        var args = this.getActionArgs();
        var payload = {
          args,
          target,
          name: null
        };
        if ((0, _reference.isInvokableRef)(actionName)) {
          (0, _instrumentation.flaggedInstrument)('interaction.ember-action', payload, () => {
            (0, _reference.updateRef)(actionName, args[0]);
          });
          return;
        }
        if (typeof actionName === 'function') {
          (0, _instrumentation.flaggedInstrument)('interaction.ember-action', payload, () => {
            actionName.apply(target, args);
          });
          return;
        }
        payload.name = actionName;
        if (target.send) {
          (0, _instrumentation.flaggedInstrument)('interaction.ember-action', payload, () => {
            target.send.apply(target, [actionName, ...args]);
          });
        } else {
          (true && !(typeof target[actionName] === 'function') && (0, _debug.assert)(`The action '${actionName}' did not exist on ${target}`, typeof target[actionName] === 'function'));
          (0, _instrumentation.flaggedInstrument)('interaction.ember-action', payload, () => {
            target[actionName].apply(target, args);
          });
        }
      });
      return shouldBubble;
    }
  }
  class ActionModifierManager {
    create(owner, element, _state, _ref19) {
      var {
        named,
        positional
      } = _ref19;
      var actionArgs = [];
      // The first two arguments are (1) `this` and (2) the action name.
      // Everything else is a param.
      for (var i = 2; i < positional.length; i++) {
        actionArgs.push(positional[i]);
      }
      var actionId = (0, _utils.uuid)();
      return new ActionState(element, owner, actionId, actionArgs, named, positional);
    }
    getDebugName() {
      return 'action';
    }
    install(actionState) {
      var {
        element,
        actionId,
        positional
      } = actionState;
      var actionName;
      var actionNameRef;
      var implicitTarget;
      if (positional.length > 1) {
        implicitTarget = positional[0];
        actionNameRef = positional[1];
        if ((0, _reference.isInvokableRef)(actionNameRef)) {
          actionName = actionNameRef;
        } else {
          actionName = (0, _reference.valueForRef)(actionNameRef);
          if (true /* DEBUG */) {
            var actionPath = actionNameRef.debugLabel;
            var actionPathParts = actionPath.split('.');
            var actionLabel = actionPathParts[actionPathParts.length - 1];
            (true && !(typeof actionName === 'string' || typeof actionName === 'function') && (0, _debug.assert)('You specified a quoteless path, `' + actionPath + '`, to the ' + '{{action}} helper which did not resolve to an action name (a ' + 'string). Perhaps you meant to use a quoted actionName? (e.g. ' + '{{action "' + actionLabel + '"}}).', typeof actionName === 'string' || typeof actionName === 'function'));
          }
        }
      }
      actionState.actionName = actionName;
      actionState.implicitTarget = implicitTarget;
      this.ensureEventSetup(actionState);
      ActionHelper.registerAction(actionState);
      element.setAttribute('data-ember-action', '');
      element.setAttribute(`data-ember-action-${actionId}`, String(actionId));
    }
    update(actionState) {
      var {
        positional
      } = actionState;
      var actionNameRef = positional[1];
      (true && !(actionNameRef) && (0, _debug.assert)('Expected at least one positional arg', actionNameRef));
      if (!(0, _reference.isInvokableRef)(actionNameRef)) {
        actionState.actionName = (0, _reference.valueForRef)(actionNameRef);
      }
      var newEventName = actionState.getEventName();
      if (newEventName !== actionState.eventName) {
        this.ensureEventSetup(actionState);
        actionState.eventName = actionState.getEventName();
      }
    }
    ensureEventSetup(actionState) {
      var dispatcher = actionState.owner.lookup('event_dispatcher:main');
      (true && !(dispatcher instanceof _views.EventDispatcher) && (0, _debug.assert)('Expected dispatcher to be an EventDispatcher', dispatcher instanceof _views.EventDispatcher));
      dispatcher === null || dispatcher === void 0 ? void 0 : dispatcher.setupHandlerForEmberEvent(actionState.eventName);
    }
    getTag(actionState) {
      return actionState.tag;
    }
    getDestroyable(actionState) {
      return actionState;
    }
  }
  var ACTION_MODIFIER_MANAGER = new ActionModifierManager();
  var actionModifier = (0, _manager2.setInternalModifierManager)(ACTION_MODIFIER_MANAGER, {});
  var CAPABILITIES$2 = {
    dynamicLayout: true,
    dynamicTag: false,
    prepareArgs: false,
    createArgs: true,
    attributeHook: false,
    elementHook: false,
    createCaller: true,
    dynamicScope: true,
    updateHook: true,
    createInstance: true,
    wrapped: false,
    willDestroy: false,
    hasSubOwner: true
  };
  class MountManager {
    getDynamicLayout(state) {
      var templateFactory$$1 = state.engine.lookup('template:application');
      return (0, _util.unwrapTemplate)(templateFactory$$1(state.engine)).asLayout();
    }
    getCapabilities() {
      return CAPABILITIES$2;
    }
    getOwner(state) {
      return state.engine;
    }
    create(owner, _ref20, args, env) {
      var {
        name
      } = _ref20;
      // TODO
      // mount is a runtime helper, this shouldn't use dynamic layout
      // we should resolve the engine app template in the helper
      // it also should use the owner that looked up the mount helper.
      (true && !(owner instanceof _instance.default) && (0, _debug.assert)('Expected owner to be an EngineInstance', owner instanceof _instance.default));
      var engine = owner.buildChildEngineInstance(name);
      engine.boot();
      var applicationFactory = engine.factoryFor(`controller:application`);
      var controllerFactory = applicationFactory || (0, _internals3.generateControllerFactory)(engine, 'application');
      var controller;
      var self;
      var bucket;
      var modelRef;
      if (args.named.has('model')) {
        modelRef = args.named.get('model');
      }
      if (modelRef === undefined) {
        controller = controllerFactory.create();
        self = (0, _reference.createConstRef)(controller, 'this');
        bucket = {
          engine,
          controller,
          self,
          modelRef
        };
      } else {
        var model = (0, _reference.valueForRef)(modelRef);
        controller = controllerFactory.create({
          model
        });
        self = (0, _reference.createConstRef)(controller, 'this');
        bucket = {
          engine,
          controller,
          self,
          modelRef
        };
      }
      if (env.debugRenderTree) {
        (0, _destroyable.associateDestroyableChild)(engine, controller);
      }
      return bucket;
    }
    getDebugName(_ref21) {
      var {
        name
      } = _ref21;
      return name;
    }
    getDebugCustomRenderTree(definition, state, args, templateModuleName) {
      return [{
        bucket: state.engine,
        instance: state.engine,
        type: 'engine',
        name: definition.name,
        args
      }, {
        bucket: state.controller,
        instance: state.controller,
        type: 'route-template',
        name: 'application',
        args,
        template: templateModuleName
      }];
    }
    getSelf(_ref22) {
      var {
        self
      } = _ref22;
      return self;
    }
    getDestroyable(bucket) {
      return bucket.engine;
    }
    didCreate() {}
    didUpdate() {}
    didRenderLayout() {}
    didUpdateLayout() {}
    update(bucket) {
      var {
        controller,
        modelRef
      } = bucket;
      if (modelRef !== undefined) {
        controller.set('model', (0, _reference.valueForRef)(modelRef));
      }
    }
  }
  var MOUNT_MANAGER = new MountManager();
  class MountDefinition {
    constructor(resolvedName) {
      this.resolvedName = resolvedName;
      // handle is not used by this custom definition
      this.handle = -1;
      this.manager = MOUNT_MANAGER;
      this.compilable = null;
      this.capabilities = (0, _manager2.capabilityFlagsFrom)(CAPABILITIES$2);
      this.state = {
        name: resolvedName
      };
    }
  }

  /**
    The `{{mount}}` helper lets you embed a routeless engine in a template.
    Mounting an engine will cause an instance to be booted and its `application`
    template to be rendered.
  
    For example, the following template mounts the `ember-chat` engine:
  
    ```handlebars
    {{! application.hbs }}
    {{mount "ember-chat"}}
    ```
  
    Additionally, you can also pass in a `model` argument that will be
    set as the engines model. This can be an existing object:
  
    ```
    <div>
      {{mount 'admin' model=userSettings}}
    </div>
    ```
  
    Or an inline `hash`, and you can even pass components:
  
    ```
    <div>
      <h1>Application template!</h1>
      {{mount 'admin' model=(hash
          title='Secret Admin'
          signInButton=(component 'sign-in-button')
      )}}
    </div>
    ```
  
    @method mount
    @param {String} name Name of the engine to mount.
    @param {Object} [model] Object that will be set as
                            the model of the engine.
    @for Ember.Templates.helpers
    @public
  */
  var mountHelper = internalHelper((args, owner) => {
    (true && !(owner) && (0, _debug.assert)('{{mount}} must be used within a component that has an owner', owner));
    var nameRef = args.positional[0];
    var captured;
    (true && !(args.positional.length === 1) && (0, _debug.assert)('You can only pass a single positional argument to the {{mount}} helper, e.g. {{mount "chat-engine"}}.', args.positional.length === 1));
    if (true /* DEBUG */ && args.named) {
      var keys = Object.keys(args.named);
      var extra = keys.filter(k => k !== 'model');
      (true && !(extra.length === 0) && (0, _debug.assert)('You can only pass a `model` argument to the {{mount}} helper, ' + 'e.g. {{mount "profile-engine" model=this.profile}}. ' + `You passed ${extra.join(',')}.`, extra.length === 0));
    }
    captured = (0, _runtime.createCapturedArgs)(args.named, _runtime.EMPTY_POSITIONAL);
    var lastName, lastDef;
    return (0, _reference.createComputeRef)(() => {
      var name = (0, _reference.valueForRef)(nameRef);
      if (typeof name === 'string') {
        if (lastName === name) {
          return lastDef;
        }
        (true && !(owner.hasRegistration(`engine:${name}`)) && (0, _debug.assert)(`You used \`{{mount '${name}'}}\`, but the engine '${name}' can not be found.`, owner.hasRegistration(`engine:${name}`)));
        lastName = name;
        lastDef = (0, _runtime.curry)(0 /* CurriedType.Component */, new MountDefinition(name), owner, captured, true);
        return lastDef;
      } else {
        (true && !(name === null || name === undefined) && (0, _debug.assert)(`Invalid engine name '${name}' specified, engine name must be either a string, null or undefined.`, name === null || name === undefined));
        lastDef = null;
        lastName = null;
        return null;
      }
    });
  });

  /**
    The `{{outlet}}` helper lets you specify where a child route will render in
    your template. An important use of the `{{outlet}}` helper is in your
    application's `application.hbs` file:
  
    ```app/templates/application.hbs
    <MyHeader />
  
    <div class="my-dynamic-content">
      <!-- this content will change based on the current route, which depends on the current URL -->
      {{outlet}}
    </div>
  
    <MyFooter />
    ```
  
    See the [routing guide](https://guides.emberjs.com/release/routing/rendering-a-template/) for more
    information on how your `route` interacts with the `{{outlet}}` helper.
    Note: Your content __will not render__ if there isn't an `{{outlet}}` for it.
  
    @method outlet
    @for Ember.Templates.helpers
    @public
  */
  var outletHelper = internalHelper((_args, owner, scope) => {
    (true && !(owner) && (0, _debug.assert)('Expected owner to be present, {{outlet}} requires an owner', owner));
    (true && !(scope) && (0, _debug.assert)('Expected dynamic scope to be present. You may have attempted to use the {{outlet}} keyword dynamically. This keyword cannot be used dynamically.', scope));
    var outletRef = (0, _reference.createComputeRef)(() => {
      var state = (0, _reference.valueForRef)(scope.get('outletState'));
      var outlets = state !== undefined ? state.outlets : undefined;
      return outlets !== undefined ? outlets['main'] : undefined;
    });
    var lastState = null;
    var definition = null;
    return (0, _reference.createComputeRef)(() => {
      var _a, _b;
      var outletState = (0, _reference.valueForRef)(outletRef);
      var state = stateFor(outletRef, outletState);
      if (!validate(state, lastState)) {
        lastState = state;
        if (state !== null) {
          var named = (0, _util.dict)();
          // Create a ref for the model
          var modelRef = (0, _reference.childRefFromParts)(outletRef, ['render', 'model']);
          // Store the value of the model
          var model = (0, _reference.valueForRef)(modelRef);
          // Create a compute ref which we pass in as the `{{@model}}` reference
          // for the outlet. This ref will update and return the value of the
          // model _until_ the outlet itself changes. Once the outlet changes,
          // dynamic scope also changes, and so the original model ref would not
          // provide the correct updated value. So we stop updating and return
          // the _last_ model value for that outlet.
          named['model'] = (0, _reference.createComputeRef)(() => {
            if (lastState === state) {
              model = (0, _reference.valueForRef)(modelRef);
            }
            return model;
          });
          if (true /* DEBUG */) {
            named['model'] = (0, _reference.createDebugAliasRef)('@model', named['model']);
          }
          var args = (0, _runtime.createCapturedArgs)(named, _runtime.EMPTY_POSITIONAL);
          definition = (0, _runtime.curry)(0 /* CurriedType.Component */, new OutletComponentDefinition(state), (_b = (_a = outletState === null || outletState === void 0 ? void 0 : outletState.render) === null || _a === void 0 ? void 0 : _a.owner) !== null && _b !== void 0 ? _b : owner, args, true);
        } else {
          definition = null;
        }
      }
      return definition;
    });
  });
  function stateFor(ref, outlet) {
    if (outlet === undefined) return null;
    var render = outlet.render;
    if (render === undefined) return null;
    var template = render.template;
    if (template === undefined) return null;
    // this guard can be removed once @ember/test-helpers@1.6.0 has "aged out"
    // and is no longer considered supported
    if (isTemplateFactory(template)) {
      template = template(render.owner);
    }
    return {
      ref,
      name: render.name,
      outlet: render.outlet,
      template,
      controller: render.controller,
      model: render.model
    };
  }
  function validate(state, lastState) {
    if (state === null) {
      return lastState === null;
    }
    if (lastState === null) {
      return false;
    }
    return state.template === lastState.template && state.controller === lastState.controller;
  }
  function instrumentationPayload$1(name) {
    return {
      object: `component:${name}`
    };
  }
  function componentFor(name, owner) {
    var fullName = `component:${name}`;
    return owner.factoryFor(fullName) || null;
  }
  function layoutFor(name, owner, options) {
    var templateFullName = `template:components/${name}`;
    return owner.lookup(templateFullName, options) || null;
  }
  function lookupComponentPair(owner, name, options) {
    var component = componentFor(name, owner);
    if ((0, _owner2.isFactory)(component) && component.class) {
      var _layout = (0, _manager2.getComponentTemplate)(component.class);
      if (_layout !== undefined) {
        return {
          component,
          layout: _layout
        };
      }
    }
    var layout = layoutFor(name, owner, options);
    if (component === null && layout === null) {
      return null;
    } else {
      return {
        component,
        layout
      };
    }
  }
  var BUILTIN_KEYWORD_HELPERS = {
    action: action$1,
    mut,
    readonly,
    unbound,
    '-hash': _runtime.hash,
    '-each-in': eachIn,
    '-normalize-class': normalizeClassHelper,
    '-resolve': resolve,
    '-track-array': trackArray,
    '-mount': mountHelper,
    '-outlet': outletHelper,
    '-in-el-null': inElementNullCheckHelper
  };
  var BUILTIN_HELPERS = Object.assign(Object.assign({}, BUILTIN_KEYWORD_HELPERS), {
    array: _runtime.array,
    concat: _runtime.concat,
    fn: _runtime.fn,
    get: _runtime.get,
    hash: _runtime.hash,
    'unique-id': uniqueId
  });
  if (true /* DEBUG */) {
    BUILTIN_HELPERS['-disallow-dynamic-resolution'] = disallowDynamicResolution;
  } else {
    // Bug: this may be a quirk of our test setup?
    // In prod builds, this is a no-op helper and is unused in practice. We shouldn't need
    // to add it at all, but the current test build doesn't produce a "prod compiler", so
    // we ended up running the debug-build for the template compliler in prod tests. Once
    // that is fixed, this can be removed. For now, this allows the test to work and does
    // not really harm anything, since it's just a no-op pass-through helper and the bytes
    // has to be included anyway. In the future, perhaps we can avoid the latter by using
    // `import(...)`?
    BUILTIN_HELPERS['-disallow-dynamic-resolution'] = disallowDynamicResolution;
  }
  var BUILTIN_KEYWORD_MODIFIERS = {
    action: actionModifier
  };
  var BUILTIN_MODIFIERS = Object.assign(Object.assign({}, BUILTIN_KEYWORD_MODIFIERS), {
    on: _runtime.on
  });
  var CLASSIC_HELPER_MANAGER_ASSOCIATED = new _util._WeakSet();
  class ResolverImpl {
    constructor() {
      this.componentDefinitionCache = new Map();
    }
    lookupPartial() {
      return null;
    }
    lookupHelper(name, owner) {
      (true && !(!(BUILTIN_HELPERS[name] && owner.hasRegistration(`helper:${name}`))) && (0, _debug.assert)(`You attempted to overwrite the built-in helper "${name}" which is not allowed. Please rename the helper.`, !(BUILTIN_HELPERS[name] && owner.hasRegistration(`helper:${name}`))));
      var helper$$1 = BUILTIN_HELPERS[name];
      if (helper$$1 !== undefined) {
        return helper$$1;
      }
      var factory = owner.factoryFor(`helper:${name}`);
      if (factory === undefined) {
        return null;
      }
      var definition = factory.class;
      if (definition === undefined) {
        return null;
      }
      if (typeof definition === 'function' && isClassicHelper(definition)) {
        // For classic class based helpers, we need to pass the factoryFor result itself rather
        // than the raw value (`factoryFor(...).class`). This is because injections are already
        // bound in the factoryFor result, including type-based injections
        if (true /* DEBUG */) {
          // In DEBUG we need to only set the associated value once, otherwise
          // we'll trigger an assertion
          if (!CLASSIC_HELPER_MANAGER_ASSOCIATED.has(factory)) {
            CLASSIC_HELPER_MANAGER_ASSOCIATED.add(factory);
            (0, _manager2.setInternalHelperManager)(CLASSIC_HELPER_MANAGER, factory);
          }
        } else {
          (0, _manager2.setInternalHelperManager)(CLASSIC_HELPER_MANAGER, factory);
        }
        return factory;
      }
      return definition;
    }
    lookupBuiltInHelper(name) {
      var _a;
      return (_a = BUILTIN_KEYWORD_HELPERS[name]) !== null && _a !== void 0 ? _a : null;
    }
    lookupModifier(name, owner) {
      var builtin = BUILTIN_MODIFIERS[name];
      if (builtin !== undefined) {
        return builtin;
      }
      var modifier = owner.factoryFor(`modifier:${name}`);
      if (modifier === undefined) {
        return null;
      }
      return modifier.class || null;
    }
    lookupBuiltInModifier(name) {
      var _a;
      return (_a = BUILTIN_KEYWORD_MODIFIERS[name]) !== null && _a !== void 0 ? _a : null;
    }
    lookupComponent(name, owner) {
      var pair = lookupComponentPair(owner, name);
      if (pair === null) {
        (true && !(name !== 'text-area') && (0, _debug.assert)('Could not find component `<TextArea />` (did you mean `<Textarea />`?)', name !== 'text-area'));
        return null;
      }
      var template = null;
      var key;
      if (pair.component === null) {
        key = template = pair.layout(owner);
      } else {
        key = pair.component;
      }
      var cachedComponentDefinition = this.componentDefinitionCache.get(key);
      if (cachedComponentDefinition !== undefined) {
        return cachedComponentDefinition;
      }
      if (template === null && pair.layout !== null) {
        template = pair.layout(owner);
      }
      var finalizer = (0, _instrumentation._instrumentStart)('render.getComponentDefinition', instrumentationPayload$1, name);
      var definition = null;
      if (pair.component === null) {
        if (_environment2.ENV._TEMPLATE_ONLY_GLIMMER_COMPONENTS) {
          definition = {
            state: (0, _runtime.templateOnlyComponent)(undefined, name),
            manager: _runtime.TEMPLATE_ONLY_COMPONENT_MANAGER,
            template
          };
        } else {
          var factory = owner.factoryFor((0, _container.privatize)`component:-default`);
          var manager = (0, _manager2.getInternalComponentManager)(factory.class);
          definition = {
            state: factory,
            manager,
            template
          };
        }
      } else {
        var _factory2 = pair.component;
        (true && !(_factory2.class !== undefined) && (0, _debug.assert)(`missing component class ${name}`, _factory2.class !== undefined));
        var ComponentClass = _factory2.class;
        var _manager = (0, _manager2.getInternalComponentManager)(ComponentClass);
        definition = {
          state: isCurlyManager(_manager) ? _factory2 : ComponentClass,
          manager: _manager,
          template
        };
      }
      finalizer();
      this.componentDefinitionCache.set(key, definition);
      (true && !(!(definition === null && name === 'text-area')) && (0, _debug.assert)('Could not find component `<TextArea />` (did you mean `<Textarea />`?)', !(definition === null && name === 'text-area')));
      return definition;
    }
  }

  // We use the `InternalOwner` notion here because we actually need all of its
  var TOP_LEVEL_NAME = '-top-level';
  var TOP_LEVEL_OUTLET = 'main';
  class OutletView {
    static extend(injections) {
      return class extends OutletView {
        static create(options) {
          if (options) {
            return super.create(Object.assign({}, injections, options));
          } else {
            return super.create(injections);
          }
        }
      };
    }
    static reopenClass(injections) {
      Object.assign(this, injections);
    }
    static create(options) {
      var {
        environment: _environment,
        application: namespace,
        template: templateFactory$$1
      } = options;
      var owner = (0, _owner2.getOwner)(options);
      (true && !(owner) && (0, _debug.assert)('OutletView is unexpectedly missing an owner', owner));
      var template = templateFactory$$1(owner);
      return new OutletView(_environment, owner, template, namespace);
    }
    constructor(_environment, owner, template, namespace) {
      this._environment = _environment;
      this.owner = owner;
      this.template = template;
      this.namespace = namespace;
      var outletStateTag = (0, _validator.createTag)();
      var outletState = {
        outlets: {
          main: undefined
        },
        render: {
          owner: owner,
          into: undefined,
          outlet: TOP_LEVEL_OUTLET,
          name: TOP_LEVEL_NAME,
          controller: undefined,
          model: undefined,
          template
        }
      };
      var ref = this.ref = (0, _reference.createComputeRef)(() => {
        (0, _validator.consumeTag)(outletStateTag);
        return outletState;
      }, state => {
        (0, _validator.dirtyTag)(outletStateTag);
        outletState.outlets['main'] = state;
      });
      this.state = {
        ref,
        name: TOP_LEVEL_NAME,
        outlet: TOP_LEVEL_OUTLET,
        template,
        controller: undefined,
        model: undefined
      };
    }
    appendTo(selector) {
      var target;
      if (this._environment.hasDOM) {
        target = typeof selector === 'string' ? document.querySelector(selector) : selector;
      } else {
        target = selector;
      }
      var renderer = this.owner.lookup('renderer:-dom');
      // SAFETY: It's not clear that this cast is safe.
      // The types for appendOutletView may be incorrect or this is a potential bug.
      (0, _runloop.schedule)('render', renderer, 'appendOutletView', this, target);
    }
    rerender() {
      /**/
    }
    setOutletState(state) {
      (0, _reference.updateRef)(this.ref, state);
    }
    destroy() {
      /**/
    }
  }
  _exports.OutletView = OutletView;
  class DynamicScope {
    constructor(view, outletState) {
      this.view = view;
      this.outletState = outletState;
    }
    child() {
      return new DynamicScope(this.view, this.outletState);
    }
    get(key) {
      (true && !(key === 'outletState') && (0, _debug.assert)(`Using \`-get-dynamic-scope\` is only supported for \`outletState\` (you used \`${key}\`).`, key === 'outletState'));
      return this.outletState;
    }
    set(key, value) {
      (true && !(key === 'outletState') && (0, _debug.assert)(`Using \`-with-dynamic-scope\` is only supported for \`outletState\` (you used \`${key}\`).`, key === 'outletState'));
      this.outletState = value;
      return value;
    }
  }
  var NO_OP = () => {};
  // This wrapper logic prevents us from rerendering in case of a hard failure
  // during render. This prevents infinite revalidation type loops from occuring,
  // and ensures that errors are not swallowed by subsequent follow on failures.
  function errorLoopTransaction(fn$$1) {
    if (true /* DEBUG */) {
      return () => {
        var didError = true;
        try {
          fn$$1();
          didError = false;
        } finally {
          if (didError) {
            // Noop the function so that we won't keep calling it and causing
            // infinite looping failures;
            fn$$1 = () => {
              // eslint-disable-next-line no-console
              console.warn('Attempted to rerender, but the Ember application has had an unrecoverable error occur during render. You should reload the application after fixing the cause of the error.');
            };
          }
        }
      };
    } else {
      return fn$$1;
    }
  }
  class RootState {
    constructor(root, runtime, context, owner, template, self, parentElement, dynamicScope, builder) {
      this.root = root;
      this.runtime = runtime;
      (true && !(template !== undefined) && (0, _debug.assert)(`You cannot render \`${(0, _reference.valueForRef)(self)}\` without a template.`, template !== undefined));
      this.id = root instanceof OutletView ? (0, _utils.guidFor)(root) : (0, _views.getViewId)(root);
      this.result = undefined;
      this.destroyed = false;
      this.render = errorLoopTransaction(() => {
        var layout = (0, _util.unwrapTemplate)(template).asLayout();
        var iterator = (0, _runtime.renderMain)(runtime, context, owner, self, builder(runtime.env, {
          element: parentElement,
          nextSibling: null
        }), layout, dynamicScope);
        var result = this.result = iterator.sync();
        // override .render function after initial render
        this.render = errorLoopTransaction(() => result.rerender({
          alwaysRevalidate: false
        }));
      });
    }
    isFor(possibleRoot) {
      return this.root === possibleRoot;
    }
    destroy() {
      var {
        result,
        runtime: {
          env
        }
      } = this;
      this.destroyed = true;
      this.runtime = undefined;
      this.root = null;
      this.result = undefined;
      this.render = undefined;
      if (result !== undefined) {
        /*
         Handles these scenarios:
                * When roots are removed during standard rendering process, a transaction exists already
           `.begin()` / `.commit()` are not needed.
         * When roots are being destroyed manually (`component.append(); component.destroy() case), no
           transaction exists already.
         * When roots are being destroyed during `Renderer#destroy`, no transaction exists
                */
        (0, _runtime.inTransaction)(env, () => (0, _destroyable.destroy)(result));
      }
    }
  }
  var renderers = [];
  function _resetRenderers() {
    renderers.length = 0;
  }
  function register(renderer) {
    (true && !(renderers.indexOf(renderer) === -1) && (0, _debug.assert)('Cannot register the same renderer twice', renderers.indexOf(renderer) === -1));
    renderers.push(renderer);
  }
  function deregister(renderer) {
    var index = renderers.indexOf(renderer);
    (true && !(index !== -1) && (0, _debug.assert)('Cannot deregister unknown unregistered renderer', index !== -1));
    renderers.splice(index, 1);
  }
  function loopBegin() {
    for (var renderer of renderers) {
      renderer._scheduleRevalidate();
    }
  }
  var renderSettledDeferred = null;
  /*
    Returns a promise which will resolve when rendering has settled. Settled in
    this context is defined as when all of the tags in use are "current" (e.g.
    `renderers.every(r => r._isValid())`). When this is checked at the _end_ of
    the run loop, this essentially guarantees that all rendering is completed.
  
    @method renderSettled
    @returns {Promise<void>} a promise which fulfills when rendering has settled
  */
  function renderSettled() {
    if (renderSettledDeferred === null) {
      renderSettledDeferred = _rsvp.default.defer();
      // if there is no current runloop, the promise created above will not have
      // a chance to resolve (because its resolved in backburner's "end" event)
      if (!(0, _runloop._getCurrentRunLoop)()) {
        // ensure a runloop has been kicked off
        _runloop._backburner.schedule('actions', null, NO_OP);
      }
    }
    return renderSettledDeferred.promise;
  }
  function resolveRenderPromise() {
    if (renderSettledDeferred !== null) {
      var _resolve = renderSettledDeferred.resolve;
      renderSettledDeferred = null;
      _runloop._backburner.join(null, _resolve);
    }
  }
  var loops = 0;
  function loopEnd() {
    for (var renderer of renderers) {
      if (!renderer._isValid()) {
        if (loops > _environment2.ENV._RERENDER_LOOP_LIMIT) {
          loops = 0;
          // TODO: do something better
          renderer.destroy();
          throw new Error('infinite rendering invalidation detected');
        }
        loops++;
        return _runloop._backburner.join(null, NO_OP);
      }
    }
    loops = 0;
    resolveRenderPromise();
  }
  _runloop._backburner.on('begin', loopBegin);
  _runloop._backburner.on('end', loopEnd);
  class Renderer {
    static create(props) {
      var {
        _viewRegistry
      } = props;
      var owner = (0, _owner2.getOwner)(props);
      (true && !(owner) && (0, _debug.assert)('Renderer is unexpectedly missing an owner', owner));
      var document = owner.lookup('service:-document');
      var env = owner.lookup('-environment:main');
      var rootTemplate = owner.lookup((0, _container.privatize)`template:-root`);
      var builder = owner.lookup('service:-dom-builder');
      return new this(owner, document, env, rootTemplate, _viewRegistry, builder);
    }
    constructor(owner, document, env, rootTemplate, viewRegistry, builder) {
      if (builder === void 0) {
        builder = _runtime.clientBuilder;
      }
      this._inRenderTransaction = false;
      this._lastRevision = -1;
      this._destroyed = false;
      this._owner = owner;
      this._rootTemplate = rootTemplate(owner);
      this._viewRegistry = viewRegistry || owner.lookup('-view-registry:main');
      this._roots = [];
      this._removedRoots = [];
      this._builder = builder;
      this._isInteractive = env.isInteractive;
      // resolver is exposed for tests
      var resolver = this._runtimeResolver = new ResolverImpl();
      var sharedArtifacts = (0, _program.artifacts)();
      this._context = (0, _opcodeCompiler.programCompilationContext)(sharedArtifacts, resolver);
      var runtimeEnvironmentDelegate = new EmberEnvironmentDelegate(owner, env.isInteractive);
      this._runtime = (0, _runtime.runtimeContext)({
        appendOperations: env.hasDOM ? new _runtime.DOMTreeConstruction(document) : new _node.NodeDOMTreeConstruction(document),
        updateOperations: new _runtime.DOMChanges(document)
      }, runtimeEnvironmentDelegate, sharedArtifacts, resolver);
    }
    get debugRenderTree() {
      var {
        debugRenderTree
      } = this._runtime.env;
      (true && !(debugRenderTree) && (0, _debug.assert)('Attempted to access the DebugRenderTree, but it did not exist. Is the Ember Inspector open?', debugRenderTree));
      return debugRenderTree;
    }
    // renderer HOOKS
    appendOutletView(view, target) {
      var definition = createRootOutlet(view);
      this._appendDefinition(view, (0, _runtime.curry)(0 /* CurriedType.Component */, definition, view.owner, null, true), target);
    }
    appendTo(view, target) {
      var definition = new RootComponentDefinition(view);
      this._appendDefinition(view, (0, _runtime.curry)(0 /* CurriedType.Component */, definition, this._owner, null, true), target);
    }
    _appendDefinition(root, definition, target) {
      var self = (0, _reference.createConstRef)(definition, 'this');
      var dynamicScope = new DynamicScope(null, _reference.UNDEFINED_REFERENCE);
      var rootState = new RootState(root, this._runtime, this._context, this._owner, this._rootTemplate, self, target, dynamicScope, this._builder);
      this._renderRoot(rootState);
    }
    rerender() {
      this._scheduleRevalidate();
    }
    register(view) {
      var id = (0, _views.getViewId)(view);
      (true && !(!this._viewRegistry[id]) && (0, _debug.assert)('Attempted to register a view with an id already in use: ' + id, !this._viewRegistry[id]));
      this._viewRegistry[id] = view;
    }
    unregister(view) {
      delete this._viewRegistry[(0, _views.getViewId)(view)];
    }
    remove(view) {
      view._transitionTo('destroying');
      this.cleanupRootFor(view);
      if (this._isInteractive) {
        view.trigger('didDestroyElement');
      }
    }
    cleanupRootFor(view) {
      // no need to cleanup roots if we have already been destroyed
      if (this._destroyed) {
        return;
      }
      var roots = this._roots;
      // traverse in reverse so we can remove items
      // without mucking up the index
      var i = this._roots.length;
      while (i--) {
        var root = roots[i];
        (true && !(root) && (0, _debug.assert)('has root', root));
        if (root.isFor(view)) {
          root.destroy();
          roots.splice(i, 1);
        }
      }
    }
    destroy() {
      if (this._destroyed) {
        return;
      }
      this._destroyed = true;
      this._clearAllRoots();
    }
    getElement(view) {
      if (this._isInteractive) {
        return (0, _views.getViewElement)(view);
      } else {
        throw new Error('Accessing `this.element` is not allowed in non-interactive environments (such as FastBoot).');
      }
    }
    getBounds(view) {
      var bounds = view[BOUNDS];
      (true && !(bounds) && (0, _debug.assert)('object passed to getBounds must have the BOUNDS symbol as a property', bounds));
      var parentElement = bounds.parentElement();
      var firstNode = bounds.firstNode();
      var lastNode = bounds.lastNode();
      return {
        parentElement,
        firstNode,
        lastNode
      };
    }
    createElement(tagName) {
      return this._runtime.env.getAppendOperations().createElement(tagName);
    }
    _renderRoot(root) {
      var {
        _roots: roots
      } = this;
      roots.push(root);
      if (roots.length === 1) {
        register(this);
      }
      this._renderRootsTransaction();
    }
    _renderRoots() {
      var {
        _roots: roots,
        _runtime: runtime,
        _removedRoots: removedRoots
      } = this;
      var initialRootsLength;
      do {
        initialRootsLength = roots.length;
        (0, _runtime.inTransaction)(runtime.env, () => {
          // ensure that for the first iteration of the loop
          // each root is processed
          for (var i = 0; i < roots.length; i++) {
            var root = roots[i];
            (true && !(root) && (0, _debug.assert)('has root', root));
            if (root.destroyed) {
              // add to the list of roots to be removed
              // they will be removed from `this._roots` later
              removedRoots.push(root);
              // skip over roots that have been marked as destroyed
              continue;
            }
            // when processing non-initial reflush loops,
            // do not process more roots than needed
            if (i >= initialRootsLength) {
              continue;
            }
            root.render();
          }
          this._lastRevision = (0, _validator.valueForTag)(_validator.CURRENT_TAG);
        });
      } while (roots.length > initialRootsLength);
      // remove any roots that were destroyed during this transaction
      while (removedRoots.length) {
        var root = removedRoots.pop();
        var rootIndex = roots.indexOf(root);
        roots.splice(rootIndex, 1);
      }
      if (this._roots.length === 0) {
        deregister(this);
      }
    }
    _renderRootsTransaction() {
      if (this._inRenderTransaction) {
        // currently rendering roots, a new root was added and will
        // be processed by the existing _renderRoots invocation
        return;
      }
      // used to prevent calling _renderRoots again (see above)
      // while we are actively rendering roots
      this._inRenderTransaction = true;
      var completedWithoutError = false;
      try {
        this._renderRoots();
        completedWithoutError = true;
      } finally {
        if (!completedWithoutError) {
          this._lastRevision = (0, _validator.valueForTag)(_validator.CURRENT_TAG);
        }
        this._inRenderTransaction = false;
      }
    }
    _clearAllRoots() {
      var roots = this._roots;
      for (var root of roots) {
        root.destroy();
      }
      this._removedRoots.length = 0;
      this._roots = [];
      // if roots were present before destroying
      // deregister this renderer instance
      if (roots.length) {
        deregister(this);
      }
    }
    _scheduleRevalidate() {
      _runloop._backburner.scheduleOnce('render', this, this._revalidate);
    }
    _isValid() {
      return this._destroyed || this._roots.length === 0 || (0, _validator.validateTag)(_validator.CURRENT_TAG, this._lastRevision);
    }
    _revalidate() {
      if (this._isValid()) {
        return;
      }
      this._renderRootsTransaction();
    }
  }
  _exports.Renderer = Renderer;
  var TEMPLATES = {};
  function setTemplates(templates) {
    TEMPLATES = templates;
  }
  function getTemplates() {
    return TEMPLATES;
  }
  function getTemplate(name) {
    if (Object.prototype.hasOwnProperty.call(TEMPLATES, name)) {
      return TEMPLATES[name];
    }
  }
  function hasTemplate(name) {
    return Object.prototype.hasOwnProperty.call(TEMPLATES, name);
  }
  function setTemplate(name, template) {
    return TEMPLATES[name] = template;
  }
  var OutletTemplate = (0, _opcodeCompiler.templateFactory)({
    "id": "3jT+eJpe",
    "block": "[[[46,[28,[37,1],null,null],null,null,null]],[],false,[\"component\",\"-outlet\"]]",
    "moduleName": "packages/@ember/-internals/glimmer/lib/templates/outlet.hbs",
    "isStrictMode": false
  });
  function setupApplicationRegistry(registry) {
    // because we are using injections we can't use instantiate false
    // we need to use bind() to copy the function so factory for
    // association won't leak
    registry.register('service:-dom-builder', {
      // Additionally, we *must* constrain this to require `props` on create, else
      // we *know* it cannot have an owner.
      create(props) {
        var owner = (0, _owner2.getOwner)(props);
        (true && !(owner) && (0, _debug.assert)('DomBuilderService is unexpectedly missing an owner', owner));
        var env = owner.lookup('-environment:main');
        switch (env._renderMode) {
          case 'serialize':
            return _node.serializeBuilder.bind(null);
          case 'rehydrate':
            return _runtime.rehydrationBuilder.bind(null);
          default:
            return _runtime.clientBuilder.bind(null);
        }
      }
    });
    registry.register((0, _container.privatize)`template:-root`, RootTemplate);
    registry.register('renderer:-dom', Renderer);
  }
  function setupEngineRegistry(registry) {
    registry.optionsForType('template', {
      instantiate: false
    });
    registry.register('view:-outlet', OutletView);
    registry.register('template:-outlet', OutletTemplate);
    registry.optionsForType('helper', {
      instantiate: false
    });
    registry.register('component:input', Input$1);
    registry.register('component:link-to', LinkTo$1);
    registry.register('component:textarea', Textarea$1);
    if (!_environment2.ENV._TEMPLATE_ONLY_GLIMMER_COMPONENTS) {
      registry.register((0, _container.privatize)`component:-default`, Component);
    }
  }

  /**
     Associate a class with a component manager (an object that is responsible for
     coordinating the lifecycle events that occurs when invoking, rendering and
     re-rendering a component).
  
     @method setComponentManager
     @param {Function} factory a function to create the owner for an object
     @param {Object} obj the object to associate with the componetn manager
     @return {Object} the same object passed in
     @public
    */
  function setComponentManager$1(manager, obj) {
    return (0, _manager2.setComponentManager)(manager, obj);
  }
  var componentCapabilities$1 = _manager2.componentCapabilities;
  _exports.componentCapabilities = componentCapabilities$1;
  var modifierCapabilities$1 = _manager2.modifierCapabilities;

  /**
    [Glimmer](https://github.com/tildeio/glimmer) is a templating engine used by Ember.js that is compatible with a subset of the [Handlebars](http://handlebarsjs.com/) syntax.
  
    ### Showing a property
  
    Templates manage the flow of an application's UI, and display state (through
    the DOM) to a user. For example, given a component with the property "name",
    that component's template can use the name in several ways:
  
    ```app/components/person-profile.js
    import Component from '@ember/component';
  
    export default Component.extend({
      name: 'Jill'
    });
    ```
  
    ```app/components/person-profile.hbs
    {{this.name}}
    <div>{{this.name}}</div>
    <span data-name={{this.name}}></span>
    ```
  
    Any time the "name" property on the component changes, the DOM will be
    updated.
  
    Properties can be chained as well:
  
    ```handlebars
    {{@aUserModel.name}}
    <div>{{@listOfUsers.firstObject.name}}</div>
    ```
  
    ### Using Ember helpers
  
    When content is passed in mustaches `{{}}`, Ember will first try to find a helper
    or component with that name. For example, the `if` helper:
  
    ```app/components/person-profile.hbs
    {{if this.name "I have a name" "I have no name"}}
    <span data-has-name={{if this.name true}}></span>
    ```
  
    The returned value is placed where the `{{}}` is called. The above style is
    called "inline". A second style of helper usage is called "block". For example:
  
    ```handlebars
    {{#if this.name}}
      I have a name
    {{else}}
      I have no name
    {{/if}}
    ```
  
    The block form of helpers allows you to control how the UI is created based
    on the values of properties.
    A third form of helper is called "nested". For example here the concat
    helper will add " Doe" to a displayed name if the person has no last name:
  
    ```handlebars
    <span data-name={{concat this.firstName (
      if this.lastName (concat " " this.lastName) "Doe"
    )}}></span>
    ```
  
    Ember's built-in helpers are described under the [Ember.Templates.helpers](/ember/release/classes/Ember.Templates.helpers)
    namespace. Documentation on creating custom helpers can be found under
    [helper](/ember/release/functions/@ember%2Fcomponent%2Fhelper/helper) (or
    under [Helper](/ember/release/classes/Helper) if a helper requires access to
    dependency injection).
  
    ### Invoking a Component
  
    Ember components represent state to the UI of an application. Further
    reading on components can be found under [Component](/ember/release/classes/Component).
  
    @module @ember/component
    @main @ember/component
    @public
   */
  _exports.modifierCapabilities = modifierCapabilities$1;
});
define("@ember/-internals/meta/index", ["exports", "@ember/-internals/meta/lib/meta"], function (_exports, _meta) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "Meta", {
    enumerable: true,
    get: function () {
      return _meta.Meta;
    }
  });
  Object.defineProperty(_exports, "UNDEFINED", {
    enumerable: true,
    get: function () {
      return _meta.UNDEFINED;
    }
  });
  Object.defineProperty(_exports, "counters", {
    enumerable: true,
    get: function () {
      return _meta.counters;
    }
  });
  Object.defineProperty(_exports, "meta", {
    enumerable: true,
    get: function () {
      return _meta.meta;
    }
  });
  Object.defineProperty(_exports, "peekMeta", {
    enumerable: true,
    get: function () {
      return _meta.peekMeta;
    }
  });
  Object.defineProperty(_exports, "setMeta", {
    enumerable: true,
    get: function () {
      return _meta.setMeta;
    }
  });
});
define("@ember/-internals/meta/lib/meta", ["exports", "@ember/-internals/utils", "@ember/debug", "@glimmer/destroyable"], function (_exports, _utils, _debug, _destroyable) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.meta = _exports.counters = _exports.UNDEFINED = _exports.Meta = void 0;
  _exports.peekMeta = peekMeta;
  _exports.setMeta = setMeta;
  var objectPrototype = Object.prototype;
  var counters;
  _exports.counters = counters;
  if (true /* DEBUG */) {
    _exports.counters = counters = {
      peekCalls: 0,
      peekPrototypeWalks: 0,
      setCalls: 0,
      deleteCalls: 0,
      metaCalls: 0,
      metaInstantiated: 0,
      matchingListenersCalls: 0,
      observerEventsCalls: 0,
      addToListenersCalls: 0,
      removeFromListenersCalls: 0,
      removeAllListenersCalls: 0,
      listenersInherited: 0,
      listenersFlattened: 0,
      parentListenersUsed: 0,
      flattenedListenersCalls: 0,
      reopensAfterFlatten: 0,
      readableLazyChainsCalls: 0,
      writableLazyChainsCalls: 0
    };
  }
  /**
  @module ember
  */
  var UNDEFINED = (0, _utils.symbol)('undefined');
  _exports.UNDEFINED = UNDEFINED;
  var currentListenerVersion = 1;
  class Meta {
    // DEBUG
    /** @internal */
    constructor(obj) {
      /** @internal */
      this._listenersVersion = 1;
      /** @internal */
      this._inheritedEnd = -1;
      /** @internal */
      this._flattenedVersion = 0;
      if (true /* DEBUG */) {
        counters.metaInstantiated++;
      }
      this._parent = undefined;
      this._descriptors = undefined;
      this._mixins = undefined;
      this._lazyChains = undefined;
      this._values = undefined;
      this._revisions = undefined;
      // initial value for all flags right now is false
      // see FLAGS const for detailed list of flags used
      this._isInit = false;
      // used only internally
      this.source = obj;
      this.proto = obj.constructor === undefined ? undefined : obj.constructor.prototype;
      this._listeners = undefined;
    }
    /** @internal */
    get parent() {
      var parent = this._parent;
      if (parent === undefined) {
        var proto = getPrototypeOf(this.source);
        this._parent = parent = proto === null || proto === objectPrototype ? null : meta(proto);
      }
      return parent;
    }
    setInitializing() {
      this._isInit = true;
    }
    /** @internal */
    unsetInitializing() {
      this._isInit = false;
    }
    /** @internal */
    isInitializing() {
      return this._isInit;
    }
    /** @internal */
    isPrototypeMeta(obj) {
      return this.proto === this.source && this.source === obj;
    }
    /** @internal */
    _getOrCreateOwnMap(key) {
      return this[key] || (this[key] = Object.create(null));
    }
    /** @internal */
    _getOrCreateOwnSet(key) {
      return this[key] || (this[key] = new Set());
    }
    /** @internal */
    _findInheritedMap(key, subkey) {
      var pointer = this;
      while (pointer !== null) {
        var map = pointer[key];
        if (map !== undefined) {
          var value = map.get(subkey);
          if (value !== undefined) {
            return value;
          }
        }
        pointer = pointer.parent;
      }
    }
    /** @internal */
    _hasInInheritedSet(key, value) {
      var pointer = this;
      while (pointer !== null) {
        var set = pointer[key];
        if (set !== undefined && set.has(value)) {
          return true;
        }
        pointer = pointer.parent;
      }
      return false;
    }
    /** @internal */
    valueFor(key) {
      var values = this._values;
      return values !== undefined ? values[key] : undefined;
    }
    /** @internal */
    setValueFor(key, value) {
      var values = this._getOrCreateOwnMap('_values');
      values[key] = value;
    }
    /** @internal */
    revisionFor(key) {
      var revisions = this._revisions;
      return revisions !== undefined ? revisions[key] : undefined;
    }
    /** @internal */
    setRevisionFor(key, revision) {
      var revisions = this._getOrCreateOwnMap('_revisions');
      revisions[key] = revision;
    }
    /** @internal */
    writableLazyChainsFor(key) {
      if (true /* DEBUG */) {
        counters.writableLazyChainsCalls++;
      }
      var lazyChains = this._getOrCreateOwnMap('_lazyChains');
      var chains = lazyChains[key];
      if (chains === undefined) {
        chains = lazyChains[key] = [];
      }
      return chains;
    }
    /** @internal */
    readableLazyChainsFor(key) {
      if (true /* DEBUG */) {
        counters.readableLazyChainsCalls++;
      }
      var lazyChains = this._lazyChains;
      if (lazyChains !== undefined) {
        return lazyChains[key];
      }
      return undefined;
    }
    /** @internal */
    addMixin(mixin) {
      (true && !(!(0, _destroyable.isDestroyed)(this.source)) && (0, _debug.assert)((0, _destroyable.isDestroyed)(this.source) ? `Cannot add mixins of \`${(0, _utils.toString)(mixin)}\` on \`${(0, _utils.toString)(this.source)}\` call addMixin after it has been destroyed.` : '', !(0, _destroyable.isDestroyed)(this.source)));
      var set = this._getOrCreateOwnSet('_mixins');
      set.add(mixin);
    }
    /** @internal */
    hasMixin(mixin) {
      return this._hasInInheritedSet('_mixins', mixin);
    }
    /** @internal */
    forEachMixins(fn) {
      var pointer = this;
      var seen;
      while (pointer !== null) {
        var set = pointer._mixins;
        if (set !== undefined) {
          seen = seen === undefined ? new Set() : seen;
          // TODO cleanup typing here
          set.forEach(mixin => {
            if (!seen.has(mixin)) {
              seen.add(mixin);
              fn(mixin);
            }
          });
        }
        pointer = pointer.parent;
      }
    }
    /** @internal */
    writeDescriptors(subkey, value) {
      (true && !(!(0, _destroyable.isDestroyed)(this.source)) && (0, _debug.assert)((0, _destroyable.isDestroyed)(this.source) ? `Cannot update descriptors for \`${subkey}\` on \`${(0, _utils.toString)(this.source)}\` after it has been destroyed.` : '', !(0, _destroyable.isDestroyed)(this.source)));
      var map = this._descriptors || (this._descriptors = new Map());
      map.set(subkey, value);
    }
    /** @internal */
    peekDescriptors(subkey) {
      var possibleDesc = this._findInheritedMap('_descriptors', subkey);
      return possibleDesc === UNDEFINED ? undefined : possibleDesc;
    }
    /** @internal */
    removeDescriptors(subkey) {
      this.writeDescriptors(subkey, UNDEFINED);
    }
    /** @internal */
    forEachDescriptors(fn) {
      var pointer = this;
      var seen;
      while (pointer !== null) {
        var map = pointer._descriptors;
        if (map !== undefined) {
          seen = seen === undefined ? new Set() : seen;
          map.forEach((value, key) => {
            if (!seen.has(key)) {
              seen.add(key);
              if (value !== UNDEFINED) {
                fn(key, value);
              }
            }
          });
        }
        pointer = pointer.parent;
      }
    }
    /** @internal */
    addToListeners(eventName, target, method, once, sync) {
      if (true /* DEBUG */) {
        counters.addToListenersCalls++;
      }
      this.pushListener(eventName, target, method, once ? 1 /* ListenerKind.ONCE */ : 0 /* ListenerKind.ADD */, sync);
    }
    /** @internal */
    removeFromListeners(eventName, target, method) {
      if (true /* DEBUG */) {
        counters.removeFromListenersCalls++;
      }
      this.pushListener(eventName, target, method, 2 /* ListenerKind.REMOVE */);
    }

    pushListener(event, target, method, kind, sync) {
      if (sync === void 0) {
        sync = false;
      }
      var listeners = this.writableListeners();
      var i = indexOfListener(listeners, event, target, method);
      // remove if found listener was inherited
      if (i !== -1 && i < this._inheritedEnd) {
        listeners.splice(i, 1);
        this._inheritedEnd--;
        i = -1;
      }
      // if not found, push. Note that we must always push if a listener is not
      // found, even in the case of a function listener remove, because we may be
      // attempting to add or remove listeners _before_ flattening has occurred.
      if (i === -1) {
        (true && !(!(this.isPrototypeMeta(this.source) && typeof method === 'function')) && (0, _debug.assert)('You cannot add function listeners to prototypes. Convert the listener to a string listener, or add it to the instance instead.', !(this.isPrototypeMeta(this.source) && typeof method === 'function')));
        (true && !(!(!this.isPrototypeMeta(this.source) && typeof method === 'function' && kind === 2 /* ListenerKind.REMOVE */)) && (0, _debug.assert)('You attempted to remove a function listener which did not exist on the instance, which means you may have attempted to remove it before it was added.', !(!this.isPrototypeMeta(this.source) && typeof method === 'function' && kind === 2)));
        listeners.push({
          event,
          target,
          method,
          kind,
          sync
        });
      } else {
        var listener = listeners[i];
        (true && !(listener) && (0, _debug.assert)('has listener', listener)); // If the listener is our own listener and we are trying to remove it, we
        // want to splice it out entirely so we don't hold onto a reference.
        if (kind === 2 /* ListenerKind.REMOVE */ && listener.kind !== 2 /* ListenerKind.REMOVE */) {
          listeners.splice(i, 1);
        } else {
          (true && !(!(listener.kind === 0 /* ListenerKind.ADD */ && kind === 0 /* ListenerKind.ADD */ && listener.sync !== sync)) && (0, _debug.assert)(`You attempted to add an observer for the same method on '${event.split(':')[0]}' twice to ${target} as both sync and async. Observers must be either sync or async, they cannot be both. This is likely a mistake, you should either remove the code that added the observer a second time, or update it to always be sync or async. The method was ${String(method)}.`, !(listener.kind === 0 && kind === 0 && listener.sync !== sync))); // update own listener
          listener.kind = kind;
          listener.sync = sync;
        }
      }
    }
    writableListeners() {
      // Check if we need to invalidate and reflatten. We need to do this if we
      // have already flattened (flattened version is the current version) and
      // we are either writing to a prototype meta OR we have never inherited, and
      // may have cached the parent's listeners.
      if (this._flattenedVersion === currentListenerVersion && (this.source === this.proto || this._inheritedEnd === -1)) {
        if (true /* DEBUG */) {
          counters.reopensAfterFlatten++;
        }
        currentListenerVersion++;
      }
      // Inherited end has not been set, then we have never created our own
      // listeners, but may have cached the parent's
      if (this._inheritedEnd === -1) {
        this._inheritedEnd = 0;
        this._listeners = [];
      }
      return this._listeners;
    }
    /**
      Flattening is based on a global revision counter. If the revision has
      bumped it means that somewhere in a class inheritance chain something has
      changed, so we need to reflatten everything. This can only happen if:
         1. A meta has been flattened (listener has been called)
      2. The meta is a prototype meta with children who have inherited its
         listeners
      3. A new listener is subsequently added to the meta (e.g. via `.reopen()`)
         This is a very rare occurrence, so while the counter is global it shouldn't
      be updated very often in practice.
    */
    flattenedListeners() {
      if (true /* DEBUG */) {
        counters.flattenedListenersCalls++;
      }
      if (this._flattenedVersion < currentListenerVersion) {
        if (true /* DEBUG */) {
          counters.listenersFlattened++;
        }
        var parent = this.parent;
        if (parent !== null) {
          // compute
          var parentListeners = parent.flattenedListeners();
          if (parentListeners !== undefined) {
            if (this._listeners === undefined) {
              // If this instance doesn't have any of its own listeners (writableListeners
              // has never been called) then we don't need to do any flattening, return
              // the parent's listeners instead.
              if (true /* DEBUG */) {
                counters.parentListenersUsed++;
              }
              this._listeners = parentListeners;
            } else {
              var listeners = this._listeners;
              if (this._inheritedEnd > 0) {
                listeners.splice(0, this._inheritedEnd);
                this._inheritedEnd = 0;
              }
              for (var listener of parentListeners) {
                var index = indexOfListener(listeners, listener.event, listener.target, listener.method);
                if (index === -1) {
                  if (true /* DEBUG */) {
                    counters.listenersInherited++;
                  }
                  listeners.unshift(listener);
                  this._inheritedEnd++;
                }
              }
            }
          }
        }
        this._flattenedVersion = currentListenerVersion;
      }
      return this._listeners;
    }
    /** @internal */
    matchingListeners(eventName) {
      var listeners = this.flattenedListeners();
      var result;
      if (true /* DEBUG */) {
        counters.matchingListenersCalls++;
      }
      if (listeners !== undefined) {
        for (var listener of listeners) {
          // REMOVE listeners are placeholders that tell us not to
          // inherit, so they never match. Only ADD and ONCE can match.
          if (listener.event === eventName && (listener.kind === 0 /* ListenerKind.ADD */ || listener.kind === 1 /* ListenerKind.ONCE */)) {
            if (result === undefined) {
              // we create this array only after we've found a listener that
              // matches to avoid allocations when no matches are found.
              result = [];
            }
            result.push(listener.target, listener.method, listener.kind === 1 /* ListenerKind.ONCE */);
          }
        }
      }

      return result;
    }
    /** @internal */
    observerEvents() {
      var listeners = this.flattenedListeners();
      var result;
      if (true /* DEBUG */) {
        counters.observerEventsCalls++;
      }
      if (listeners !== undefined) {
        for (var listener of listeners) {
          // REMOVE listeners are placeholders that tell us not to
          // inherit, so they never match. Only ADD and ONCE can match.
          if ((listener.kind === 0 /* ListenerKind.ADD */ || listener.kind === 1 /* ListenerKind.ONCE */) && listener.event.indexOf(':change') !== -1) {
            if (result === undefined) {
              // we create this array only after we've found a listener that
              // matches to avoid allocations when no matches are found.
              result = [];
            }
            result.push(listener);
          }
        }
      }
      return result;
    }
  }
  _exports.Meta = Meta;
  var getPrototypeOf = Object.getPrototypeOf;
  var metaStore = new WeakMap();
  function setMeta(obj, meta) {
    (true && !(obj !== null) && (0, _debug.assert)('Cannot call `setMeta` on null', obj !== null));
    (true && !(obj !== undefined) && (0, _debug.assert)('Cannot call `setMeta` on undefined', obj !== undefined));
    (true && !(typeof obj === 'object' || typeof obj === 'function') && (0, _debug.assert)(`Cannot call \`setMeta\` on ${typeof obj}`, typeof obj === 'object' || typeof obj === 'function'));
    if (true /* DEBUG */) {
      counters.setCalls++;
    }
    metaStore.set(obj, meta);
  }
  function peekMeta(obj) {
    (true && !(obj !== null) && (0, _debug.assert)('Cannot call `peekMeta` on null', obj !== null));
    (true && !(obj !== undefined) && (0, _debug.assert)('Cannot call `peekMeta` on undefined', obj !== undefined));
    (true && !(typeof obj === 'object' || typeof obj === 'function') && (0, _debug.assert)(`Cannot call \`peekMeta\` on ${typeof obj}`, typeof obj === 'object' || typeof obj === 'function'));
    if (true /* DEBUG */) {
      counters.peekCalls++;
    }
    var meta = metaStore.get(obj);
    if (meta !== undefined) {
      return meta;
    }
    var pointer = getPrototypeOf(obj);
    while (pointer !== null) {
      if (true /* DEBUG */) {
        counters.peekPrototypeWalks++;
      }
      meta = metaStore.get(pointer);
      if (meta !== undefined) {
        if (meta.proto !== pointer) {
          // The meta was a prototype meta which was not marked as initializing.
          // This can happen when a prototype chain was created manually via
          // Object.create() and the source object does not have a constructor.
          meta.proto = pointer;
        }
        return meta;
      }
      pointer = getPrototypeOf(pointer);
    }
    return null;
  }
  /**
    Retrieves the meta hash for an object. If `writable` is true ensures the
    hash is writable for this object as well.
  
    The meta object contains information about computed property descriptors as
    well as any watched properties and other information. You generally will
    not access this information directly but instead work with higher level
    methods that manipulate this hash indirectly.
  
    @method meta
    @for Ember
    @private
  
    @param {Object} obj The object to retrieve meta for
    @param {Boolean} [writable=true] Pass `false` if you do not intend to modify
      the meta hash, allowing the method to avoid making an unnecessary copy.
    @return {Object} the meta hash for an object
  */
  var meta = function meta(obj) {
    (true && !(obj !== null) && (0, _debug.assert)('Cannot call `meta` on null', obj !== null));
    (true && !(obj !== undefined) && (0, _debug.assert)('Cannot call `meta` on undefined', obj !== undefined));
    (true && !(typeof obj === 'object' || typeof obj === 'function') && (0, _debug.assert)(`Cannot call \`meta\` on ${typeof obj}`, typeof obj === 'object' || typeof obj === 'function'));
    if (true /* DEBUG */) {
      counters.metaCalls++;
    }
    var maybeMeta = peekMeta(obj);
    // remove this code, in-favor of explicit parent
    if (maybeMeta !== null && maybeMeta.source === obj) {
      return maybeMeta;
    }
    var newMeta = new Meta(obj);
    setMeta(obj, newMeta);
    return newMeta;
  };
  _exports.meta = meta;
  if (true /* DEBUG */) {
    meta._counters = counters;
  }
  function indexOfListener(listeners, event, target, method) {
    for (var i = listeners.length - 1; i >= 0; i--) {
      var listener = listeners[i];
      (true && !(listener) && (0, _debug.assert)('has listener', listener));
      if (listener.event === event && listener.target === target && listener.method === method) {
        return i;
      }
    }
    return -1;
  }
});
define("@ember/-internals/metal/index", ["exports", "@ember/-internals/meta", "@ember/-internals/utils", "@ember/debug", "@ember/-internals/environment", "@ember/runloop", "@glimmer/destroyable", "@glimmer/validator", "@glimmer/manager", "@glimmer/util", "@ember/array/-internals", "ember/version", "@ember/-internals/owner"], function (_exports, _meta2, _utils, _debug, _environment, _runloop, _destroyable, _validator, _manager, _util, _internals, _version, _owner) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.TrackedDescriptor = _exports.SYNC_OBSERVERS = _exports.PROXY_CONTENT = _exports.PROPERTY_DID_CHANGE = _exports.NAMESPACES_BY_ID = _exports.NAMESPACES = _exports.Libraries = _exports.DEBUG_INJECTION_FUNCTIONS = _exports.ComputedProperty = _exports.ComputedDescriptor = _exports.ASYNC_OBSERVERS = void 0;
  _exports._getPath = _getPath;
  _exports._getProp = _getProp;
  _exports._setProp = _setProp;
  _exports.activateObserver = activateObserver;
  _exports.addArrayObserver = addArrayObserver;
  _exports.addListener = addListener;
  _exports.addNamespace = addNamespace;
  _exports.addObserver = addObserver;
  _exports.alias = alias;
  _exports.arrayContentDidChange = arrayContentDidChange;
  _exports.arrayContentWillChange = arrayContentWillChange;
  _exports.autoComputed = autoComputed;
  _exports.beginPropertyChanges = beginPropertyChanges;
  _exports.cached = void 0;
  _exports.changeProperties = changeProperties;
  _exports.computed = computed;
  Object.defineProperty(_exports, "createCache", {
    enumerable: true,
    get: function () {
      return _validator.createCache;
    }
  });
  _exports.defineDecorator = defineDecorator;
  _exports.defineProperty = defineProperty;
  _exports.defineValue = defineValue;
  _exports.deprecateProperty = deprecateProperty;
  _exports.descriptorForDecorator = descriptorForDecorator;
  _exports.descriptorForProperty = descriptorForProperty;
  _exports.eachProxyArrayDidChange = eachProxyArrayDidChange;
  _exports.eachProxyArrayWillChange = eachProxyArrayWillChange;
  _exports.endPropertyChanges = endPropertyChanges;
  _exports.expandProperties = expandProperties;
  _exports.findNamespace = findNamespace;
  _exports.findNamespaces = findNamespaces;
  _exports.flushAsyncObservers = flushAsyncObservers;
  _exports.get = get;
  _exports.getCachedValueFor = getCachedValueFor;
  _exports.getProperties = getProperties;
  Object.defineProperty(_exports, "getValue", {
    enumerable: true,
    get: function () {
      return _validator.getValue;
    }
  });
  _exports.hasListeners = hasListeners;
  _exports.hasUnknownProperty = hasUnknownProperty;
  _exports.inject = inject;
  _exports.isClassicDecorator = isClassicDecorator;
  _exports.isComputed = isComputed;
  Object.defineProperty(_exports, "isConst", {
    enumerable: true,
    get: function () {
      return _validator.isConst;
    }
  });
  _exports.isElementDescriptor = isElementDescriptor;
  _exports.isNamespaceSearchDisabled = isSearchDisabled;
  _exports.libraries = void 0;
  _exports.makeComputedDecorator = makeComputedDecorator;
  _exports.markObjectAsDirty = markObjectAsDirty;
  _exports.nativeDescDecorator = nativeDescDecorator;
  _exports.notifyPropertyChange = notifyPropertyChange;
  _exports.objectAt = objectAt;
  _exports.on = on;
  _exports.processAllNamespaces = processAllNamespaces;
  _exports.processNamespace = processNamespace;
  _exports.removeArrayObserver = removeArrayObserver;
  _exports.removeListener = removeListener;
  _exports.removeNamespace = removeNamespace;
  _exports.removeObserver = removeObserver;
  _exports.replace = replace;
  _exports.replaceInNativeArray = replaceInNativeArray;
  _exports.revalidateObservers = revalidateObservers;
  _exports.sendEvent = sendEvent;
  _exports.set = set;
  _exports.setClassicDecorator = setClassicDecorator;
  _exports.setNamespaceSearchDisabled = setSearchDisabled;
  _exports.setProperties = setProperties;
  _exports.setUnprocessedMixins = setUnprocessedMixins;
  _exports.tagForObject = tagForObject;
  _exports.tagForProperty = tagForProperty;
  _exports.tracked = tracked;
  _exports.trySet = trySet;
  /*
    The event system uses a series of nested hashes to store listeners on an
    object. When a listener is registered, or when an event arrives, these
    hashes are consulted to determine which target and action pair to invoke.
  
    The hashes are stored in the object's meta hash, and look like this:
  
        // Object's meta hash
        {
          listeners: {       // variable name: `listenerSet`
            "foo:change": [ // variable name: `actions`
              target, method, once
            ]
          }
        }
  
  */
  /**
    Add an event listener
  
    @method addListener
    @static
    @for @ember/object/events
    @param obj
    @param {String} eventName
    @param {Object|Function} target A target object or a function
    @param {Function|String} method A function or the name of a function to be called on `target`
    @param {Boolean} once A flag whether a function should only be called once
    @public
  */
  function addListener(obj, eventName, target, method, once, sync) {
    if (sync === void 0) {
      sync = true;
    }
    (true && !(Boolean(obj) && Boolean(eventName)) && (0, _debug.assert)('You must pass at least an object and event name to addListener', Boolean(obj) && Boolean(eventName)));
    if (!method && 'function' === typeof target) {
      method = target;
      target = null;
    }
    (0, _meta2.meta)(obj).addToListeners(eventName, target, method, once === true, sync);
  }
  /**
    Remove an event listener
  
    Arguments should match those passed to `addListener`.
  
    @method removeListener
    @static
    @for @ember/object/events
    @param obj
    @param {String} eventName
    @param {Object|Function} target A target object or a function
    @param {Function|String} method A function or the name of a function to be called on `target`
    @public
  */
  function removeListener(obj, eventName, targetOrFunction, functionOrName) {
    (true && !(Boolean(obj) && Boolean(eventName) && (typeof targetOrFunction === 'function' || typeof targetOrFunction === 'object' && Boolean(functionOrName))) && (0, _debug.assert)('You must pass at least an object, event name, and method or target and method/method name to removeListener', Boolean(obj) && Boolean(eventName) && (typeof targetOrFunction === 'function' || typeof targetOrFunction === 'object' && Boolean(functionOrName))));
    var target, method;
    if (typeof targetOrFunction === 'object') {
      target = targetOrFunction;
      method = functionOrName;
    } else {
      target = null;
      method = targetOrFunction;
    }
    var m = (0, _meta2.meta)(obj);
    m.removeFromListeners(eventName, target, method);
  }
  /**
    Send an event. The execution of suspended listeners
    is skipped, and once listeners are removed. A listener without
    a target is executed on the passed object. If an array of actions
    is not passed, the actions stored on the passed object are invoked.
  
    @method sendEvent
    @static
    @for @ember/object/events
    @param obj
    @param {String} eventName
    @param {Array} params Optional parameters for each listener.
    @return {Boolean} if the event was delivered to one or more actions
    @public
  */
  function sendEvent(obj, eventName, params, actions, _meta) {
    if (actions === undefined) {
      var meta$$1 = _meta === undefined ? (0, _meta2.peekMeta)(obj) : _meta;
      actions = meta$$1 !== null ? meta$$1.matchingListeners(eventName) : undefined;
    }
    if (actions === undefined || actions.length === 0) {
      return false;
    }
    for (var i = actions.length - 3; i >= 0; i -= 3) {
      // looping in reverse for once listeners
      var target = actions[i];
      var method = actions[i + 1];
      var once = actions[i + 2];
      if (!method) {
        continue;
      }
      if (once) {
        removeListener(obj, eventName, target, method);
      }
      if (!target) {
        target = obj;
      }
      var type = typeof method;
      if (type === 'string' || type === 'symbol') {
        method = target[method];
      }
      method.apply(target, params);
    }
    return true;
  }
  /**
    @public
    @method hasListeners
    @static
    @for @ember/object/events
    @param obj
    @param {String} eventName
    @return {Boolean} if `obj` has listeners for event `eventName`
  */
  function hasListeners(obj, eventName) {
    var meta$$1 = (0, _meta2.peekMeta)(obj);
    if (meta$$1 === null) {
      return false;
    }
    var matched = meta$$1.matchingListeners(eventName);
    return matched !== undefined && matched.length > 0;
  }
  /**
    Define a property as a function that should be executed when
    a specified event or events are triggered.
  
    ``` javascript
    import EmberObject from '@ember/object';
    import { on } from '@ember/object/evented';
    import { sendEvent } from '@ember/object/events';
  
    let Job = EmberObject.extend({
      logCompleted: on('completed', function() {
        console.log('Job completed!');
      })
    });
  
    let job = Job.create();
  
    sendEvent(job, 'completed'); // Logs 'Job completed!'
   ```
  
    @method on
    @static
    @for @ember/object/evented
    @param {String} eventNames*
    @param {Function} func
    @return {Function} the listener function, passed as last argument to on(...)
    @public
  */
  function on() {
    for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {
      args[_key2] = arguments[_key2];
    }
    var func = args.pop();
    var events = args;
    (true && !(typeof func === 'function') && (0, _debug.assert)('on expects function as last argument', typeof func === 'function'));
    (true && !(events.length > 0 && events.every(p => typeof p === 'string' && p.length > 0)) && (0, _debug.assert)('on called without valid event names', events.length > 0 && events.every(p => typeof p === 'string' && p.length > 0)));
    (0, _utils.setListeners)(func, events);
    return func;
  }
  var AFTER_OBSERVERS = ':change';
  function changeEvent(keyName) {
    return keyName + AFTER_OBSERVERS;
  }
  var SYNC_DEFAULT = !_environment.ENV._DEFAULT_ASYNC_OBSERVERS;
  var SYNC_OBSERVERS = new Map();
  _exports.SYNC_OBSERVERS = SYNC_OBSERVERS;
  var ASYNC_OBSERVERS = new Map();
  /**
  @module @ember/object
  */
  /**
    @method addObserver
    @static
    @for @ember/object/observers
    @param obj
    @param {String} path
    @param {Object|Function} target
    @param {Function|String} [method]
    @public
  */
  _exports.ASYNC_OBSERVERS = ASYNC_OBSERVERS;
  function addObserver(obj, path, target, method, sync) {
    if (sync === void 0) {
      sync = SYNC_DEFAULT;
    }
    var eventName = changeEvent(path);
    addListener(obj, eventName, target, method, false, sync);
    var meta$$1 = (0, _meta2.peekMeta)(obj);
    if (meta$$1 === null || !(meta$$1.isPrototypeMeta(obj) || meta$$1.isInitializing())) {
      activateObserver(obj, eventName, sync);
    }
  }
  /**
    @method removeObserver
    @static
    @for @ember/object/observers
    @param obj
    @param {String} path
    @param {Object|Function} target
    @param {Function|String} [method]
    @public
  */
  function removeObserver(obj, path, target, method, sync) {
    if (sync === void 0) {
      sync = SYNC_DEFAULT;
    }
    var eventName = changeEvent(path);
    var meta$$1 = (0, _meta2.peekMeta)(obj);
    if (meta$$1 === null || !(meta$$1.isPrototypeMeta(obj) || meta$$1.isInitializing())) {
      deactivateObserver(obj, eventName, sync);
    }
    removeListener(obj, eventName, target, method);
  }
  function getOrCreateActiveObserversFor(target, sync) {
    var observerMap = sync === true ? SYNC_OBSERVERS : ASYNC_OBSERVERS;
    if (!observerMap.has(target)) {
      observerMap.set(target, new Map());
      (0, _destroyable.registerDestructor)(target, () => destroyObservers(target), true);
    }
    return observerMap.get(target);
  }
  function activateObserver(target, eventName, sync) {
    if (sync === void 0) {
      sync = false;
    }
    var activeObservers = getOrCreateActiveObserversFor(target, sync);
    if (activeObservers.has(eventName)) {
      activeObservers.get(eventName).count++;
    } else {
      var path = eventName.substring(0, eventName.lastIndexOf(':'));
      var tag = getChainTagsForKey(target, path, (0, _validator.tagMetaFor)(target), (0, _meta2.peekMeta)(target));
      activeObservers.set(eventName, {
        count: 1,
        path,
        tag,
        lastRevision: (0, _validator.valueForTag)(tag),
        suspended: false
      });
    }
  }
  var DEACTIVATE_SUSPENDED = false;
  var SCHEDULED_DEACTIVATE = [];
  function deactivateObserver(target, eventName, sync) {
    if (sync === void 0) {
      sync = false;
    }
    if (DEACTIVATE_SUSPENDED === true) {
      SCHEDULED_DEACTIVATE.push([target, eventName, sync]);
      return;
    }
    var observerMap = sync === true ? SYNC_OBSERVERS : ASYNC_OBSERVERS;
    var activeObservers = observerMap.get(target);
    if (activeObservers !== undefined) {
      var observer = activeObservers.get(eventName);
      observer.count--;
      if (observer.count === 0) {
        activeObservers.delete(eventName);
        if (activeObservers.size === 0) {
          observerMap.delete(target);
        }
      }
    }
  }
  function suspendedObserverDeactivation() {
    DEACTIVATE_SUSPENDED = true;
  }
  function resumeObserverDeactivation() {
    DEACTIVATE_SUSPENDED = false;
    for (var [target, eventName, sync] of SCHEDULED_DEACTIVATE) {
      deactivateObserver(target, eventName, sync);
    }
    SCHEDULED_DEACTIVATE = [];
  }
  /**
   * Primarily used for cases where we are redefining a class, e.g. mixins/reopen
   * being applied later. Revalidates all the observers, resetting their tags.
   *
   * @private
   * @param target
   */
  function revalidateObservers(target) {
    if (ASYNC_OBSERVERS.has(target)) {
      ASYNC_OBSERVERS.get(target).forEach(observer => {
        observer.tag = getChainTagsForKey(target, observer.path, (0, _validator.tagMetaFor)(target), (0, _meta2.peekMeta)(target));
        observer.lastRevision = (0, _validator.valueForTag)(observer.tag);
      });
    }
    if (SYNC_OBSERVERS.has(target)) {
      SYNC_OBSERVERS.get(target).forEach(observer => {
        observer.tag = getChainTagsForKey(target, observer.path, (0, _validator.tagMetaFor)(target), (0, _meta2.peekMeta)(target));
        observer.lastRevision = (0, _validator.valueForTag)(observer.tag);
      });
    }
  }
  var lastKnownRevision = 0;
  function flushAsyncObservers(shouldSchedule) {
    if (shouldSchedule === void 0) {
      shouldSchedule = true;
    }
    var currentRevision = (0, _validator.valueForTag)(_validator.CURRENT_TAG);
    if (lastKnownRevision === currentRevision) {
      return;
    }
    lastKnownRevision = currentRevision;
    ASYNC_OBSERVERS.forEach((activeObservers, target) => {
      var meta$$1 = (0, _meta2.peekMeta)(target);
      activeObservers.forEach((observer, eventName) => {
        if (!(0, _validator.validateTag)(observer.tag, observer.lastRevision)) {
          var sendObserver = () => {
            try {
              sendEvent(target, eventName, [target, observer.path], undefined, meta$$1);
            } finally {
              observer.tag = getChainTagsForKey(target, observer.path, (0, _validator.tagMetaFor)(target), (0, _meta2.peekMeta)(target));
              observer.lastRevision = (0, _validator.valueForTag)(observer.tag);
            }
          };
          if (shouldSchedule) {
            (0, _runloop.schedule)('actions', sendObserver);
          } else {
            sendObserver();
          }
        }
      });
    });
  }
  function flushSyncObservers() {
    // When flushing synchronous observers, we know that something has changed (we
    // only do this during a notifyPropertyChange), so there's no reason to check
    // a global revision.
    SYNC_OBSERVERS.forEach((activeObservers, target) => {
      var meta$$1 = (0, _meta2.peekMeta)(target);
      activeObservers.forEach((observer, eventName) => {
        if (!observer.suspended && !(0, _validator.validateTag)(observer.tag, observer.lastRevision)) {
          try {
            observer.suspended = true;
            sendEvent(target, eventName, [target, observer.path], undefined, meta$$1);
          } finally {
            observer.tag = getChainTagsForKey(target, observer.path, (0, _validator.tagMetaFor)(target), (0, _meta2.peekMeta)(target));
            observer.lastRevision = (0, _validator.valueForTag)(observer.tag);
            observer.suspended = false;
          }
        }
      });
    });
  }
  function setObserverSuspended(target, property, suspended) {
    var activeObservers = SYNC_OBSERVERS.get(target);
    if (!activeObservers) {
      return;
    }
    var observer = activeObservers.get(changeEvent(property));
    if (observer) {
      observer.suspended = suspended;
    }
  }
  function destroyObservers(target) {
    if (SYNC_OBSERVERS.size > 0) SYNC_OBSERVERS.delete(target);
    if (ASYNC_OBSERVERS.size > 0) ASYNC_OBSERVERS.delete(target);
  }

  // This is exported for `@tracked`, but should otherwise be avoided. Use `tagForObject`.
  var SELF_TAG = (0, _utils.symbol)('SELF_TAG');
  function tagForProperty(obj, propertyKey, addMandatorySetter, meta$$1) {
    if (addMandatorySetter === void 0) {
      addMandatorySetter = false;
    }
    var customTagFor = (0, _manager.getCustomTagFor)(obj);
    if (customTagFor !== undefined) {
      return customTagFor(obj, propertyKey, addMandatorySetter);
    }
    var tag = (0, _validator.tagFor)(obj, propertyKey, meta$$1);
    if (true /* DEBUG */ && addMandatorySetter) {
      (0, _utils.setupMandatorySetter)(tag, obj, propertyKey);
    }
    return tag;
  }
  function tagForObject(obj) {
    if ((0, _utils.isObject)(obj)) {
      if (true /* DEBUG */) {
        (true && !(!(0, _destroyable.isDestroyed)(obj)) && (0, _debug.assert)((0, _destroyable.isDestroyed)(obj) ? `Cannot create a new tag for \`${(0, _utils.toString)(obj)}\` after it has been destroyed.` : '', !(0, _destroyable.isDestroyed)(obj)));
      }
      return (0, _validator.tagFor)(obj, SELF_TAG);
    }
    return _validator.CONSTANT_TAG;
  }
  function markObjectAsDirty(obj, propertyKey) {
    (0, _validator.dirtyTagFor)(obj, propertyKey);
    (0, _validator.dirtyTagFor)(obj, SELF_TAG);
  }

  /**
   @module ember
   @private
   */
  var PROPERTY_DID_CHANGE = Symbol('PROPERTY_DID_CHANGE');
  _exports.PROPERTY_DID_CHANGE = PROPERTY_DID_CHANGE;
  function hasPropertyDidChange(obj) {
    return obj != null && typeof obj === 'object' && typeof obj[PROPERTY_DID_CHANGE] === 'function';
  }
  var deferred = 0;
  /**
    This function is called just after an object property has changed.
    It will notify any observers and clear caches among other things.
  
    Normally you will not need to call this method directly but if for some
    reason you can't directly watch a property you can invoke this method
    manually.
  
    @method notifyPropertyChange
    @for @ember/object
    @param {Object} obj The object with the property that will change
    @param {String} keyName The property key (or path) that will change.
    @param {Meta} [_meta] The objects meta.
    @param {unknown} [value] The new value to set for the property
    @return {void}
    @since 3.1.0
    @public
  */
  function notifyPropertyChange(obj, keyName, _meta, value) {
    var meta$$1 = _meta === undefined ? (0, _meta2.peekMeta)(obj) : _meta;
    if (meta$$1 !== null && (meta$$1.isInitializing() || meta$$1.isPrototypeMeta(obj))) {
      return;
    }
    markObjectAsDirty(obj, keyName);
    if (deferred <= 0) {
      flushSyncObservers();
    }
    if (PROPERTY_DID_CHANGE in obj) {
      // It's redundant to do this here, but we don't want to check above so we can avoid an extra function call in prod.
      (true && !(hasPropertyDidChange(obj)) && (0, _debug.assert)('property did change hook is invalid', hasPropertyDidChange(obj))); // we need to check the arguments length here; there's a check in Component's `PROPERTY_DID_CHANGE`
      // that checks its arguments length, so we have to explicitly not call this with `value`
      // if it is not passed to `notifyPropertyChange`
      if (arguments.length === 4) {
        obj[PROPERTY_DID_CHANGE](keyName, value);
      } else {
        obj[PROPERTY_DID_CHANGE](keyName);
      }
    }
  }
  /**
    @method beginPropertyChanges
    @chainable
    @private
  */
  function beginPropertyChanges() {
    deferred++;
    suspendedObserverDeactivation();
  }
  /**
    @method endPropertyChanges
    @private
  */
  function endPropertyChanges() {
    deferred--;
    if (deferred <= 0) {
      flushSyncObservers();
      resumeObserverDeactivation();
    }
  }
  /**
    Make a series of property changes together in an
    exception-safe way.
  
    ```javascript
    Ember.changeProperties(function() {
      obj1.set('foo', mayBlowUpWhenSet);
      obj2.set('bar', baz);
    });
    ```
  
    @method changeProperties
    @param {Function} callback
    @private
  */
  function changeProperties(callback) {
    beginPropertyChanges();
    try {
      callback();
    } finally {
      endPropertyChanges();
    }
  }
  function arrayContentWillChange(array, startIdx, removeAmt, addAmt) {
    // if no args are passed assume everything changes
    if (startIdx === undefined) {
      startIdx = 0;
      removeAmt = addAmt = -1;
    } else {
      if (removeAmt === undefined) {
        removeAmt = -1;
      }
      if (addAmt === undefined) {
        addAmt = -1;
      }
    }
    sendEvent(array, '@array:before', [array, startIdx, removeAmt, addAmt]);
    return array;
  }
  function arrayContentDidChange(array, startIdx, removeAmt, addAmt, notify) {
    if (notify === void 0) {
      notify = true;
    }
    // if no args are passed assume everything changes
    if (startIdx === undefined) {
      startIdx = 0;
      removeAmt = addAmt = -1;
    } else {
      if (removeAmt === undefined) {
        removeAmt = -1;
      }
      if (addAmt === undefined) {
        addAmt = -1;
      }
    }
    var meta$$1 = (0, _meta2.peekMeta)(array);
    if (notify) {
      if (addAmt < 0 || removeAmt < 0 || addAmt - removeAmt !== 0) {
        notifyPropertyChange(array, 'length', meta$$1);
      }
      notifyPropertyChange(array, '[]', meta$$1);
    }
    sendEvent(array, '@array:change', [array, startIdx, removeAmt, addAmt]);
    if (meta$$1 !== null) {
      var length = array.length;
      var addedAmount = addAmt === -1 ? 0 : addAmt;
      var removedAmount = removeAmt === -1 ? 0 : removeAmt;
      var delta = addedAmount - removedAmount;
      var previousLength = length - delta;
      var normalStartIdx = startIdx < 0 ? previousLength + startIdx : startIdx;
      if (meta$$1.revisionFor('firstObject') !== undefined && normalStartIdx === 0) {
        notifyPropertyChange(array, 'firstObject', meta$$1);
      }
      if (meta$$1.revisionFor('lastObject') !== undefined) {
        var previousLastIndex = previousLength - 1;
        var lastAffectedIndex = normalStartIdx + removedAmount;
        if (previousLastIndex < lastAffectedIndex) {
          notifyPropertyChange(array, 'lastObject', meta$$1);
        }
      }
    }
    return array;
  }
  var EMPTY_ARRAY = Object.freeze([]);
  function objectAt(array, index) {
    if (Array.isArray(array)) {
      return array[index];
    } else {
      return array.objectAt(index);
    }
  }
  // Ideally, we'd use MutableArray.detect but for unknown reasons this causes
  // the node tests to fail strangely.
  function isMutableArray(obj) {
    return obj != null && typeof obj.replace === 'function';
  }
  function replace(array, start, deleteCount, items) {
    if (items === void 0) {
      items = EMPTY_ARRAY;
    }
    if (isMutableArray(array)) {
      array.replace(start, deleteCount, items);
    } else {
      (true && !(Array.isArray(array)) && (0, _debug.assert)('Can only replace content of a native array or MutableArray', Array.isArray(array)));
      replaceInNativeArray(array, start, deleteCount, items);
    }
  }
  var CHUNK_SIZE = 60000;
  // To avoid overflowing the stack, we splice up to CHUNK_SIZE items at a time.
  // See https://code.google.com/p/chromium/issues/detail?id=56588 for more details.
  function replaceInNativeArray(array, start, deleteCount, items) {
    arrayContentWillChange(array, start, deleteCount, items.length);
    if (items.length <= CHUNK_SIZE) {
      array.splice(start, deleteCount, ...items);
    } else {
      array.splice(start, deleteCount);
      for (var i = 0; i < items.length; i += CHUNK_SIZE) {
        var chunk = items.slice(i, i + CHUNK_SIZE);
        array.splice(start + i, 0, ...chunk);
      }
    }
    arrayContentDidChange(array, start, deleteCount, items.length);
  }
  function arrayObserversHelper(obj, target, opts, operation) {
    var _a;
    var {
      willChange,
      didChange
    } = opts;
    operation(obj, '@array:before', target, willChange);
    operation(obj, '@array:change', target, didChange);
    /*
     * Array proxies have a `_revalidate` method which must be called to set
     * up their internal array observation systems.
     */
    (_a = obj._revalidate) === null || _a === void 0 ? void 0 : _a.call(obj);
    return obj;
  }
  function addArrayObserver(array, target, opts) {
    return arrayObserversHelper(array, target, opts, addListener);
  }
  function removeArrayObserver(array, target, opts) {
    return arrayObserversHelper(array, target, opts, removeListener);
  }
  var CHAIN_PASS_THROUGH = new _util._WeakSet();
  function finishLazyChains(meta$$1, key, value) {
    var lazyTags = meta$$1.readableLazyChainsFor(key);
    if (lazyTags === undefined) {
      return;
    }
    if ((0, _utils.isObject)(value)) {
      for (var [tag, deps] of lazyTags) {
        (0, _validator.updateTag)(tag, getChainTagsForKey(value, deps, (0, _validator.tagMetaFor)(value), (0, _meta2.peekMeta)(value)));
      }
    }
    lazyTags.length = 0;
  }
  function getChainTagsForKeys(obj, keys, tagMeta, meta$$1) {
    var tags = [];
    for (var key of keys) {
      getChainTags(tags, obj, key, tagMeta, meta$$1);
    }
    return (0, _validator.combine)(tags);
  }
  function getChainTagsForKey(obj, key, tagMeta, meta$$1) {
    return (0, _validator.combine)(getChainTags([], obj, key, tagMeta, meta$$1));
  }
  function getChainTags(chainTags, obj, path, tagMeta, meta$$1) {
    var current = obj;
    var currentTagMeta = tagMeta;
    var currentMeta = meta$$1;
    var pathLength = path.length;
    var segmentEnd = -1;
    // prevent closures
    var segment, descriptor;
    // eslint-disable-next-line no-constant-condition
    while (true) {
      var lastSegmentEnd = segmentEnd + 1;
      segmentEnd = path.indexOf('.', lastSegmentEnd);
      if (segmentEnd === -1) {
        segmentEnd = pathLength;
      }
      segment = path.slice(lastSegmentEnd, segmentEnd);
      // If the segment is an @each, we can process it and then break
      if (segment === '@each' && segmentEnd !== pathLength) {
        lastSegmentEnd = segmentEnd + 1;
        segmentEnd = path.indexOf('.', lastSegmentEnd);
        var arrLength = current.length;
        if (typeof arrLength !== 'number' ||
        // TODO: should the second test be `isEmberArray` instead?
        !(Array.isArray(current) || 'objectAt' in current)) {
          // If the current object isn't an array, there's nothing else to do,
          // we don't watch individual properties. Break out of the loop.
          break;
        } else if (arrLength === 0) {
          // Fast path for empty arrays
          chainTags.push(tagForProperty(current, '[]'));
          break;
        }
        if (segmentEnd === -1) {
          segment = path.slice(lastSegmentEnd);
        } else {
          // Deprecated, remove once we turn the deprecation into an assertion
          segment = path.slice(lastSegmentEnd, segmentEnd);
        }
        // Push the tags for each item's property
        for (var i = 0; i < arrLength; i++) {
          var item = objectAt(current, i);
          if (item) {
            (true && !(typeof item === 'object') && (0, _debug.assert)(`When using @each to observe the array \`${current.toString()}\`, the items in the array must be objects`, typeof item === 'object'));
            chainTags.push(tagForProperty(item, segment, true));
            currentMeta = (0, _meta2.peekMeta)(item);
            descriptor = currentMeta !== null ? currentMeta.peekDescriptors(segment) : undefined;
            // If the key is an alias, we need to bootstrap it
            if (descriptor !== undefined && typeof descriptor.altKey === 'string') {
              item[segment];
            }
          }
        }
        // Push the tag for the array length itself
        chainTags.push(tagForProperty(current, '[]', true, currentTagMeta));
        break;
      }
      var propertyTag = tagForProperty(current, segment, true, currentTagMeta);
      descriptor = currentMeta !== null ? currentMeta.peekDescriptors(segment) : undefined;
      chainTags.push(propertyTag);
      // If we're at the end of the path, processing the last segment, and it's
      // not an alias, we should _not_ get the last value, since we already have
      // its tag. There's no reason to access it and do more work.
      if (segmentEnd === pathLength) {
        // If the key was an alias, we should always get the next value in order to
        // bootstrap the alias. This is because aliases, unlike other CPs, should
        // always be in sync with the aliased value.
        if (CHAIN_PASS_THROUGH.has(descriptor)) {
          current[segment];
        }
        break;
      }
      if (descriptor === undefined) {
        // If the descriptor is undefined, then its a normal property, so we should
        // lookup the value to chain off of like normal.
        if (!(segment in current) && typeof current.unknownProperty === 'function') {
          current = current.unknownProperty(segment);
        } else {
          current = current[segment];
        }
      } else if (CHAIN_PASS_THROUGH.has(descriptor)) {
        current = current[segment];
      } else {
        // If the descriptor is defined, then its a normal CP (not an alias, which
        // would have been handled earlier). We get the last revision to check if
        // the CP is still valid, and if so we use the cached value. If not, then
        // we create a lazy chain lookup, and the next time the CP is calculated,
        // it will update that lazy chain.
        var instanceMeta = currentMeta.source === current ? currentMeta : (0, _meta2.meta)(current);
        var lastRevision = instanceMeta.revisionFor(segment);
        if (lastRevision !== undefined && (0, _validator.validateTag)(propertyTag, lastRevision)) {
          current = instanceMeta.valueFor(segment);
        } else {
          // use metaFor here to ensure we have the meta for the instance
          var lazyChains = instanceMeta.writableLazyChainsFor(segment);
          var rest = path.substring(segmentEnd + 1);
          var placeholderTag = (0, _validator.createUpdatableTag)();
          lazyChains.push([placeholderTag, rest]);
          chainTags.push(placeholderTag);
          break;
        }
      }
      if (!(0, _utils.isObject)(current)) {
        // we've hit the end of the chain for now, break out
        break;
      }
      currentTagMeta = (0, _validator.tagMetaFor)(current);
      currentMeta = (0, _meta2.peekMeta)(current);
    }
    return chainTags;
  }
  function isElementDescriptor(args) {
    var [maybeTarget, maybeKey, maybeDesc] = args;
    return (
      // Ensure we have the right number of args
      args.length === 3 && (
      // Make sure the target is a class or object (prototype)
      typeof maybeTarget === 'function' || typeof maybeTarget === 'object' && maybeTarget !== null) &&
      // Make sure the key is a string
      typeof maybeKey === 'string' && (
      // Make sure the descriptor is the right shape
      typeof maybeDesc === 'object' && maybeDesc !== null || maybeDesc === undefined)
    );
  }
  function nativeDescDecorator(propertyDesc) {
    var decorator = function () {
      return propertyDesc;
    };
    setClassicDecorator(decorator);
    return decorator;
  }
  /**
    Objects of this type can implement an interface to respond to requests to
    get and set. The default implementation handles simple properties.
  
    @class Descriptor
    @private
  */
  class ComputedDescriptor {
    constructor() {
      this.enumerable = true;
      this.configurable = true;
      this._dependentKeys = undefined;
      this._meta = undefined;
    }
    setup(_obj, keyName, _propertyDesc, meta$$1) {
      meta$$1.writeDescriptors(keyName, this);
    }
    teardown(_obj, keyName, meta$$1) {
      meta$$1.removeDescriptors(keyName);
    }
  }
  _exports.ComputedDescriptor = ComputedDescriptor;
  var COMPUTED_GETTERS;
  if (true /* DEBUG */) {
    COMPUTED_GETTERS = new _util._WeakSet();
  }
  function DESCRIPTOR_GETTER_FUNCTION(name, descriptor) {
    function getter() {
      return descriptor.get(this, name);
    }
    if (true /* DEBUG */) {
      COMPUTED_GETTERS.add(getter);
    }
    return getter;
  }
  function DESCRIPTOR_SETTER_FUNCTION(name, descriptor) {
    var set = function CPSETTER_FUNCTION(value) {
      return descriptor.set(this, name, value);
    };
    COMPUTED_SETTERS.add(set);
    return set;
  }
  var COMPUTED_SETTERS = new _util._WeakSet();
  function makeComputedDecorator(desc, DecoratorClass) {
    var decorator = function COMPUTED_DECORATOR(target, key, propertyDesc, maybeMeta, isClassicDecorator) {
      (true && !(isClassicDecorator || !propertyDesc || !propertyDesc.get || !COMPUTED_GETTERS.has(propertyDesc.get)) && (0, _debug.assert)(`Only one computed property decorator can be applied to a class field or accessor, but '${key}' was decorated twice. You may have added the decorator to both a getter and setter, which is unnecessary.`, isClassicDecorator || !propertyDesc || !propertyDesc.get || !COMPUTED_GETTERS.has(propertyDesc.get)));
      var meta$$1 = arguments.length === 3 ? (0, _meta2.meta)(target) : maybeMeta;
      desc.setup(target, key, propertyDesc, meta$$1);
      var computedDesc = {
        enumerable: desc.enumerable,
        configurable: desc.configurable,
        get: DESCRIPTOR_GETTER_FUNCTION(key, desc),
        set: DESCRIPTOR_SETTER_FUNCTION(key, desc)
      };
      return computedDesc;
    };
    setClassicDecorator(decorator, desc);
    Object.setPrototypeOf(decorator, DecoratorClass.prototype);
    return decorator;
  }
  /////////////
  var DECORATOR_DESCRIPTOR_MAP = new WeakMap();
  /**
    Returns the CP descriptor associated with `obj` and `keyName`, if any.
  
    @method descriptorForProperty
    @param {Object} obj the object to check
    @param {String} keyName the key to check
    @return {Descriptor}
    @private
  */
  function descriptorForProperty(obj, keyName, _meta) {
    (true && !(obj !== null) && (0, _debug.assert)('Cannot call `descriptorForProperty` on null', obj !== null));
    (true && !(obj !== undefined) && (0, _debug.assert)('Cannot call `descriptorForProperty` on undefined', obj !== undefined));
    (true && !(typeof obj === 'object' || typeof obj === 'function') && (0, _debug.assert)(`Cannot call \`descriptorForProperty\` on ${typeof obj}`, typeof obj === 'object' || typeof obj === 'function'));
    var meta$$1 = _meta === undefined ? (0, _meta2.peekMeta)(obj) : _meta;
    if (meta$$1 !== null) {
      return meta$$1.peekDescriptors(keyName);
    }
  }
  function descriptorForDecorator(dec) {
    return DECORATOR_DESCRIPTOR_MAP.get(dec);
  }
  /**
    Check whether a value is a decorator
  
    @method isClassicDecorator
    @param {any} possibleDesc the value to check
    @return {boolean}
    @private
  */
  function isClassicDecorator(dec) {
    return typeof dec === 'function' && DECORATOR_DESCRIPTOR_MAP.has(dec);
  }
  /**
    Set a value as a decorator
  
    @method setClassicDecorator
    @param {function} decorator the value to mark as a decorator
    @private
  */
  function setClassicDecorator(dec, value) {
    if (value === void 0) {
      value = true;
    }
    DECORATOR_DESCRIPTOR_MAP.set(dec, value);
  }

  /**
  @module @ember/object
  */
  var END_WITH_EACH_REGEX = /\.@each$/;
  /**
    Expands `pattern`, invoking `callback` for each expansion.
  
    The only pattern supported is brace-expansion, anything else will be passed
    once to `callback` directly.
  
    Example
  
    ```js
    import { expandProperties } from '@ember/object/computed';
  
    function echo(arg){ console.log(arg); }
  
    expandProperties('foo.bar', echo);              //=> 'foo.bar'
    expandProperties('{foo,bar}', echo);            //=> 'foo', 'bar'
    expandProperties('foo.{bar,baz}', echo);        //=> 'foo.bar', 'foo.baz'
    expandProperties('{foo,bar}.baz', echo);        //=> 'foo.baz', 'bar.baz'
    expandProperties('foo.{bar,baz}.[]', echo)      //=> 'foo.bar.[]', 'foo.baz.[]'
    expandProperties('{foo,bar}.{spam,eggs}', echo) //=> 'foo.spam', 'foo.eggs', 'bar.spam', 'bar.eggs'
    expandProperties('{foo}.bar.{baz}')             //=> 'foo.bar.baz'
    ```
  
    @method expandProperties
    @static
    @for @ember/object/computed
    @public
    @param {String} pattern The property pattern to expand.
    @param {Function} callback The callback to invoke.  It is invoked once per
    expansion, and is passed the expansion.
  */
  function expandProperties(pattern, callback) {
    (true && !(typeof pattern === 'string') && (0, _debug.assert)(`A computed property key must be a string, you passed ${typeof pattern} ${pattern}`, typeof pattern === 'string'));
    (true && !(pattern.indexOf(' ') === -1) && (0, _debug.assert)('Brace expanded properties cannot contain spaces, e.g. "user.{firstName, lastName}" should be "user.{firstName,lastName}"', pattern.indexOf(' ') === -1)); // regex to look for double open, double close, or unclosed braces
    (true && !(pattern.match(/\{[^}{]*\{|\}[^}{]*\}|\{[^}]*$/g) === null) && (0, _debug.assert)(`Brace expanded properties have to be balanced and cannot be nested, pattern: ${pattern}`, pattern.match(/\{[^}{]*\{|\}[^}{]*\}|\{[^}]*$/g) === null));
    var start = pattern.indexOf('{');
    if (start < 0) {
      callback(pattern.replace(END_WITH_EACH_REGEX, '.[]'));
    } else {
      dive('', pattern, start, callback);
    }
  }
  function dive(prefix, pattern, start, callback) {
    var end = pattern.indexOf('}'),
      i = 0,
      newStart,
      arrayLength;
    var tempArr = pattern.substring(start + 1, end).split(',');
    var after = pattern.substring(end + 1);
    prefix = prefix + pattern.substring(0, start);
    arrayLength = tempArr.length;
    while (i < arrayLength) {
      newStart = after.indexOf('{');
      if (newStart < 0) {
        callback((prefix + tempArr[i++] + after).replace(END_WITH_EACH_REGEX, '.[]'));
      } else {
        dive(prefix + tempArr[i++], after, newStart, callback);
      }
    }
  }

  /**
  @module @ember/object
  */
  var DEEP_EACH_REGEX = /\.@each\.[^.]+\./;
  function noop() {}
  /**
    `@computed` is a decorator that turns a JavaScript getter and setter into a
    computed property, which is a _cached, trackable value_. By default the getter
    will only be called once and the result will be cached. You can specify
    various properties that your computed property depends on. This will force the
    cached result to be cleared if the dependencies are modified, and lazily recomputed the next time something asks for it.
  
    In the following example we decorate a getter - `fullName` -  by calling
    `computed` with the property dependencies (`firstName` and `lastName`) as
    arguments. The `fullName` getter will be called once (regardless of how many
    times it is accessed) as long as its dependencies do not change. Once
    `firstName` or `lastName` are updated any future calls to `fullName` will
    incorporate the new values, and any watchers of the value such as templates
    will be updated:
  
    ```javascript
    import { computed, set } from '@ember/object';
  
    class Person {
      constructor(firstName, lastName) {
        set(this, 'firstName', firstName);
        set(this, 'lastName', lastName);
      }
  
      @computed('firstName', 'lastName')
      get fullName() {
        return `${this.firstName} ${this.lastName}`;
      }
    });
  
    let tom = new Person('Tom', 'Dale');
  
    tom.fullName; // 'Tom Dale'
    ```
  
    You can also provide a setter, which will be used when updating the computed
    property. Ember's `set` function must be used to update the property
    since it will also notify observers of the property:
  
    ```javascript
    import { computed, set } from '@ember/object';
  
    class Person {
      constructor(firstName, lastName) {
        set(this, 'firstName', firstName);
        set(this, 'lastName', lastName);
      }
  
      @computed('firstName', 'lastName')
      get fullName() {
        return `${this.firstName} ${this.lastName}`;
      }
  
      set fullName(value) {
        let [firstName, lastName] = value.split(' ');
  
        set(this, 'firstName', firstName);
        set(this, 'lastName', lastName);
      }
    });
  
    let person = new Person();
  
    set(person, 'fullName', 'Peter Wagenet');
    person.firstName; // 'Peter'
    person.lastName;  // 'Wagenet'
    ```
  
    You can also pass a getter function or object with `get` and `set` functions
    as the last argument to the computed decorator. This allows you to define
    computed property _macros_:
  
    ```js
    import { computed } from '@ember/object';
  
    function join(...keys) {
      return computed(...keys, function() {
        return keys.map(key => this[key]).join(' ');
      });
    }
  
    class Person {
      @join('firstName', 'lastName')
      fullName;
    }
    ```
  
    Note that when defined this way, getters and setters receive the _key_ of the
    property they are decorating as the first argument. Setters receive the value
    they are setting to as the second argument instead. Additionally, setters must
    _return_ the value that should be cached:
  
    ```javascript
    import { computed, set } from '@ember/object';
  
    function fullNameMacro(firstNameKey, lastNameKey) {
      return computed(firstNameKey, lastNameKey, {
        get() {
          return `${this[firstNameKey]} ${this[lastNameKey]}`;
        }
  
        set(key, value) {
          let [firstName, lastName] = value.split(' ');
  
          set(this, firstNameKey, firstName);
          set(this, lastNameKey, lastName);
  
          return value;
        }
      });
    }
  
    class Person {
      constructor(firstName, lastName) {
        set(this, 'firstName', firstName);
        set(this, 'lastName', lastName);
      }
  
      @fullNameMacro('firstName', 'lastName') fullName;
    });
  
    let person = new Person();
  
    set(person, 'fullName', 'Peter Wagenet');
    person.firstName; // 'Peter'
    person.lastName;  // 'Wagenet'
    ```
  
    Computed properties can also be used in classic classes. To do this, we
    provide the getter and setter as the last argument like we would for a macro,
    and we assign it to a property on the class definition. This is an _anonymous_
    computed macro:
  
    ```javascript
    import EmberObject, { computed, set } from '@ember/object';
  
    let Person = EmberObject.extend({
      // these will be supplied by `create`
      firstName: null,
      lastName: null,
  
      fullName: computed('firstName', 'lastName', {
        get() {
          return `${this.firstName} ${this.lastName}`;
        }
  
        set(key, value) {
          let [firstName, lastName] = value.split(' ');
  
          set(this, 'firstName', firstName);
          set(this, 'lastName', lastName);
  
          return value;
        }
      })
    });
  
    let tom = Person.create({
      firstName: 'Tom',
      lastName: 'Dale'
    });
  
    tom.get('fullName') // 'Tom Dale'
    ```
  
    You can overwrite computed property without setters with a normal property (no
    longer computed) that won't change if dependencies change. You can also mark
    computed property as `.readOnly()` and block all attempts to set it.
  
    ```javascript
    import { computed, set } from '@ember/object';
  
    class Person {
      constructor(firstName, lastName) {
        set(this, 'firstName', firstName);
        set(this, 'lastName', lastName);
      }
  
      @computed('firstName', 'lastName').readOnly()
      get fullName() {
        return `${this.firstName} ${this.lastName}`;
      }
    });
  
    let person = new Person();
    person.set('fullName', 'Peter Wagenet'); // Uncaught Error: Cannot set read-only property "fullName" on object: <(...):emberXXX>
    ```
  
    Additional resources:
    - [Decorators RFC](https://github.com/emberjs/rfcs/blob/master/text/0408-decorators.md)
    - [New CP syntax RFC](https://github.com/emberjs/rfcs/blob/master/text/0011-improved-cp-syntax.md)
    - [New computed syntax explained in "Ember 1.12 released" ](https://emberjs.com/blog/2015/05/13/ember-1-12-released.html#toc_new-computed-syntax)
  
    @class ComputedProperty
    @public
  */
  class ComputedProperty extends ComputedDescriptor {
    constructor(args) {
      super();
      this._readOnly = false;
      this._hasConfig = false;
      this._getter = undefined;
      this._setter = undefined;
      var maybeConfig = args[args.length - 1];
      if (typeof maybeConfig === 'function' || maybeConfig !== null && typeof maybeConfig === 'object') {
        this._hasConfig = true;
        var config = args.pop();
        if (typeof config === 'function') {
          (true && !(!isClassicDecorator(config)) && (0, _debug.assert)(`You attempted to pass a computed property instance to computed(). Computed property instances are decorator functions, and cannot be passed to computed() because they cannot be turned into decorators twice`, !isClassicDecorator(config)));
          this._getter = config;
        } else {
          var objectConfig = config;
          (true && !(typeof objectConfig === 'object' && !Array.isArray(objectConfig)) && (0, _debug.assert)('computed expects a function or an object as last argument.', typeof objectConfig === 'object' && !Array.isArray(objectConfig)));
          (true && !(Object.keys(objectConfig).every(key => key === 'get' || key === 'set')) && (0, _debug.assert)('Config object passed to computed can only contain `get` and `set` keys.', Object.keys(objectConfig).every(key => key === 'get' || key === 'set')));
          (true && !(Boolean(objectConfig.get) || Boolean(objectConfig.set)) && (0, _debug.assert)('Computed properties must receive a getter or a setter, you passed none.', Boolean(objectConfig.get) || Boolean(objectConfig.set)));
          this._getter = objectConfig.get || noop;
          this._setter = objectConfig.set;
        }
      }
      if (args.length > 0) {
        this._property(...args);
      }
    }
    setup(obj, keyName, propertyDesc, meta$$1) {
      super.setup(obj, keyName, propertyDesc, meta$$1);
      (true && !(!(propertyDesc && typeof propertyDesc.value === 'function')) && (0, _debug.assert)(`@computed can only be used on accessors or fields, attempted to use it with ${keyName} but that was a method. Try converting it to a getter (e.g. \`get ${keyName}() {}\`)`, !(propertyDesc && typeof propertyDesc.value === 'function')));
      (true && !(!propertyDesc || !propertyDesc.initializer) && (0, _debug.assert)(`@computed can only be used on empty fields. ${keyName} has an initial value (e.g. \`${keyName} = someValue\`)`, !propertyDesc || !propertyDesc.initializer));
      (true && !(!(this._hasConfig && propertyDesc && (typeof propertyDesc.get === 'function' || typeof propertyDesc.set === 'function'))) && (0, _debug.assert)(`Attempted to apply a computed property that already has a getter/setter to a ${keyName}, but it is a method or an accessor. If you passed @computed a function or getter/setter (e.g. \`@computed({ get() { ... } })\`), then it must be applied to a field`, !(this._hasConfig && propertyDesc && (typeof propertyDesc.get === 'function' || typeof propertyDesc.set === 'function'))));
      if (this._hasConfig === false) {
        (true && !(propertyDesc && (typeof propertyDesc.get === 'function' || typeof propertyDesc.set === 'function')) && (0, _debug.assert)(`Attempted to use @computed on ${keyName}, but it did not have a getter or a setter. You must either pass a get a function or getter/setter to @computed directly (e.g. \`@computed({ get() { ... } })\`) or apply @computed directly to a getter/setter`, propertyDesc && (typeof propertyDesc.get === 'function' || typeof propertyDesc.set === 'function')));
        var {
          get: _get2,
          set: _set2
        } = propertyDesc;
        if (_get2 !== undefined) {
          this._getter = _get2;
        }
        if (_set2 !== undefined) {
          this._setter = function setterWrapper(_key, value) {
            var ret = _set2.call(this, value);
            if (_get2 !== undefined) {
              return typeof ret === 'undefined' ? _get2.call(this) : ret;
            }
            return ret;
          };
        }
      }
    }
    _property() {
      var args = [];
      function addArg(property) {
        (true && !(DEEP_EACH_REGEX.test(property) === false) && (0, _debug.assert)(`Dependent keys containing @each only work one level deep. ` + `You used the key "${property}" which is invalid. ` + `Please create an intermediary computed property or ` + `switch to using tracked properties.`, DEEP_EACH_REGEX.test(property) === false));
        args.push(property);
      }
      for (var _len2 = arguments.length, passedArgs = new Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {
        passedArgs[_key3] = arguments[_key3];
      }
      for (var arg of passedArgs) {
        expandProperties(arg, addArg);
      }
      this._dependentKeys = args;
    }
    get(obj, keyName) {
      var meta$$1 = (0, _meta2.meta)(obj);
      var tagMeta = (0, _validator.tagMetaFor)(obj);
      var propertyTag = (0, _validator.tagFor)(obj, keyName, tagMeta);
      var ret;
      var revision = meta$$1.revisionFor(keyName);
      if (revision !== undefined && (0, _validator.validateTag)(propertyTag, revision)) {
        ret = meta$$1.valueFor(keyName);
      } else {
        // For backwards compatibility, we only throw if the CP has any dependencies. CPs without dependencies
        // should be allowed, even after the object has been destroyed, which is why we check _dependentKeys.
        (true && !(this._dependentKeys === undefined || !(0, _destroyable.isDestroyed)(obj)) && (0, _debug.assert)(`Attempted to access the computed ${obj}.${keyName} on a destroyed object, which is not allowed`, this._dependentKeys === undefined || !(0, _destroyable.isDestroyed)(obj)));
        var {
          _getter,
          _dependentKeys
        } = this;
        // Create a tracker that absorbs any trackable actions inside the CP
        (0, _validator.untrack)(() => {
          ret = _getter.call(obj, keyName);
        });
        if (_dependentKeys !== undefined) {
          (0, _validator.updateTag)(propertyTag, getChainTagsForKeys(obj, _dependentKeys, tagMeta, meta$$1));
          if (true /* DEBUG */) {
            _validator.ALLOW_CYCLES.set(propertyTag, true);
          }
        }
        meta$$1.setValueFor(keyName, ret);
        meta$$1.setRevisionFor(keyName, (0, _validator.valueForTag)(propertyTag));
        finishLazyChains(meta$$1, keyName, ret);
      }
      (0, _validator.consumeTag)(propertyTag);
      // Add the tag of the returned value if it is an array, since arrays
      // should always cause updates if they are consumed and then changed
      if (Array.isArray(ret)) {
        (0, _validator.consumeTag)((0, _validator.tagFor)(ret, '[]'));
      }
      return ret;
    }
    set(obj, keyName, value) {
      if (this._readOnly) {
        this._throwReadOnlyError(obj, keyName);
      }
      (true && !(this._setter !== undefined) && (0, _debug.assert)(`Cannot override the computed property \`${keyName}\` on ${(0, _utils.toString)(obj)}.`, this._setter !== undefined));
      var meta$$1 = (0, _meta2.meta)(obj);
      // ensure two way binding works when the component has defined a computed
      // property with both a setter and dependent keys, in that scenario without
      // the sync observer added below the caller's value will never be updated
      //
      // See GH#18147 / GH#19028 for details.
      if (
      // ensure that we only run this once, while the component is being instantiated
      meta$$1.isInitializing() && this._dependentKeys !== undefined && this._dependentKeys.length > 0 && typeof obj[PROPERTY_DID_CHANGE] === 'function' && obj.isComponent) {
        // It's redundant to do this here, but we don't want to check above so we can avoid an extra function call in prod.
        (true && !(hasPropertyDidChange(obj)) && (0, _debug.assert)('property did change hook is invalid', hasPropertyDidChange(obj)));
        addObserver(obj, keyName, () => {
          obj[PROPERTY_DID_CHANGE](keyName);
        }, undefined, true);
      }
      var ret;
      try {
        beginPropertyChanges();
        ret = this._set(obj, keyName, value, meta$$1);
        finishLazyChains(meta$$1, keyName, ret);
        var tagMeta = (0, _validator.tagMetaFor)(obj);
        var propertyTag = (0, _validator.tagFor)(obj, keyName, tagMeta);
        var {
          _dependentKeys
        } = this;
        if (_dependentKeys !== undefined) {
          (0, _validator.updateTag)(propertyTag, getChainTagsForKeys(obj, _dependentKeys, tagMeta, meta$$1));
          if (true /* DEBUG */) {
            _validator.ALLOW_CYCLES.set(propertyTag, true);
          }
        }
        meta$$1.setRevisionFor(keyName, (0, _validator.valueForTag)(propertyTag));
      } finally {
        endPropertyChanges();
      }
      return ret;
    }
    _throwReadOnlyError(obj, keyName) {
      throw new Error(`Cannot set read-only property "${keyName}" on object: ${(0, _debug.inspect)(obj)}`);
    }
    _set(obj, keyName, value, meta$$1) {
      var hadCachedValue = meta$$1.revisionFor(keyName) !== undefined;
      var cachedValue = meta$$1.valueFor(keyName);
      var ret;
      var {
        _setter
      } = this;
      setObserverSuspended(obj, keyName, true);
      try {
        ret = _setter.call(obj, keyName, value, cachedValue);
      } finally {
        setObserverSuspended(obj, keyName, false);
      }
      // allows setter to return the same value that is cached already
      if (hadCachedValue && cachedValue === ret) {
        return ret;
      }
      meta$$1.setValueFor(keyName, ret);
      notifyPropertyChange(obj, keyName, meta$$1, value);
      return ret;
    }
    /* called before property is overridden */
    teardown(obj, keyName, meta$$1) {
      if (meta$$1.revisionFor(keyName) !== undefined) {
        meta$$1.setRevisionFor(keyName, undefined);
        meta$$1.setValueFor(keyName, undefined);
      }
      super.teardown(obj, keyName, meta$$1);
    }
  }
  _exports.ComputedProperty = ComputedProperty;
  class AutoComputedProperty extends ComputedProperty {
    get(obj, keyName) {
      var meta$$1 = (0, _meta2.meta)(obj);
      var tagMeta = (0, _validator.tagMetaFor)(obj);
      var propertyTag = (0, _validator.tagFor)(obj, keyName, tagMeta);
      var ret;
      var revision = meta$$1.revisionFor(keyName);
      if (revision !== undefined && (0, _validator.validateTag)(propertyTag, revision)) {
        ret = meta$$1.valueFor(keyName);
      } else {
        (true && !(!(0, _destroyable.isDestroyed)(obj)) && (0, _debug.assert)(`Attempted to access the computed ${obj}.${keyName} on a destroyed object, which is not allowed`, !(0, _destroyable.isDestroyed)(obj)));
        var {
          _getter
        } = this;
        // Create a tracker that absorbs any trackable actions inside the CP
        var tag = (0, _validator.track)(() => {
          ret = _getter.call(obj, keyName);
        });
        (0, _validator.updateTag)(propertyTag, tag);
        meta$$1.setValueFor(keyName, ret);
        meta$$1.setRevisionFor(keyName, (0, _validator.valueForTag)(propertyTag));
        finishLazyChains(meta$$1, keyName, ret);
      }
      (0, _validator.consumeTag)(propertyTag);
      // Add the tag of the returned value if it is an array, since arrays
      // should always cause updates if they are consumed and then changed
      if (Array.isArray(ret)) {
        (0, _validator.consumeTag)((0, _validator.tagFor)(ret, '[]', tagMeta));
      }
      return ret;
    }
  }
  // TODO: This class can be svelted once `meta` has been deprecated
  class ComputedDecoratorImpl extends Function {
    /**
      Call on a computed property to set it into read-only mode. When in this
      mode the computed property will throw an error when set.
         Example:
         ```javascript
      import { computed, set } from '@ember/object';
         class Person {
        @computed().readOnly()
        get guid() {
          return 'guid-guid-guid';
        }
      }
         let person = new Person();
      set(person, 'guid', 'new-guid'); // will throw an exception
      ```
         Classic Class Example:
         ```javascript
      import EmberObject, { computed } from '@ember/object';
         let Person = EmberObject.extend({
        guid: computed(function() {
          return 'guid-guid-guid';
        }).readOnly()
      });
         let person = Person.create();
      person.set('guid', 'new-guid'); // will throw an exception
      ```
         @method readOnly
      @return {ComputedProperty} this
      @chainable
      @public
    */
    readOnly() {
      var desc = descriptorForDecorator(this);
      (true && !(!(desc._setter && desc._setter !== desc._getter)) && (0, _debug.assert)('Computed properties that define a setter using the new syntax cannot be read-only', !(desc._setter && desc._setter !== desc._getter)));
      desc._readOnly = true;
      return this;
    }
    /**
      In some cases, you may want to annotate computed properties with additional
      metadata about how they function or what values they operate on. For example,
      computed property functions may close over variables that are then no longer
      available for introspection. You can pass a hash of these values to a
      computed property.
         Example:
         ```javascript
      import { computed } from '@ember/object';
      import Person from 'my-app/utils/person';
         class Store {
        @computed().meta({ type: Person })
        get person() {
          let personId = this.personId;
          return Person.create({ id: personId });
        }
      }
      ```
         Classic Class Example:
         ```javascript
      import { computed } from '@ember/object';
      import Person from 'my-app/utils/person';
         const Store = EmberObject.extend({
        person: computed(function() {
          let personId = this.get('personId');
          return Person.create({ id: personId });
        }).meta({ type: Person })
      });
      ```
         The hash that you pass to the `meta()` function will be saved on the
      computed property descriptor under the `_meta` key. Ember runtime
      exposes a public API for retrieving these values from classes,
      via the `metaForProperty()` function.
         @method meta
      @param {Object} meta
      @chainable
      @public
    */
    meta(meta$$1) {
      var prop = descriptorForDecorator(this);
      if (arguments.length === 0) {
        return prop._meta || {};
      } else {
        prop._meta = meta$$1;
        return this;
      }
    }
    // TODO: Remove this when we can provide alternatives in the ecosystem to
    // addons such as ember-macro-helpers that use it.
    /** @internal */
    get _getter() {
      return descriptorForDecorator(this)._getter;
    }
    // TODO: Refactor this, this is an internal API only
    /** @internal */
    set enumerable(value) {
      descriptorForDecorator(this).enumerable = value;
    }
  }
  function computed() {
    for (var _len3 = arguments.length, args = new Array(_len3), _key4 = 0; _key4 < _len3; _key4++) {
      args[_key4] = arguments[_key4];
    }
    (true && !(!(isElementDescriptor(args.slice(0, 3)) && args.length === 5 && args[4] === true)) && (0, _debug.assert)(`@computed can only be used directly as a native decorator. If you're using tracked in classic classes, add parenthesis to call it like a function: computed()`, !(isElementDescriptor(args.slice(0, 3)) && args.length === 5 && args[4] === true)));
    if (isElementDescriptor(args)) {
      // SAFETY: We passed in the impl for this class
      var decorator = makeComputedDecorator(new ComputedProperty([]), ComputedDecoratorImpl);
      return decorator(args[0], args[1], args[2]);
    }
    // SAFETY: We passed in the impl for this class
    return makeComputedDecorator(new ComputedProperty(args), ComputedDecoratorImpl);
  }
  function autoComputed() {
    for (var _len4 = arguments.length, config = new Array(_len4), _key5 = 0; _key5 < _len4; _key5++) {
      config[_key5] = arguments[_key5];
    }
    // SAFETY: We passed in the impl for this class
    return makeComputedDecorator(new AutoComputedProperty(config), ComputedDecoratorImpl);
  }
  /**
    Allows checking if a given property on an object is a computed property. For the most part,
    this doesn't matter (you would normally just access the property directly and use its value),
    but for some tooling specific scenarios (e.g. the ember-inspector) it is important to
    differentiate if a property is a computed property or a "normal" property.
  
    This will work on either a class's prototype or an instance itself.
  
    @static
    @method isComputed
    @for @ember/debug
    @private
   */
  function isComputed(obj, key) {
    return Boolean(descriptorForProperty(obj, key));
  }
  function getCachedValueFor(obj, key) {
    var meta$$1 = (0, _meta2.peekMeta)(obj);
    if (meta$$1) {
      return meta$$1.valueFor(key);
    } else {
      return undefined;
    }
  }

  /**
  @module @ember/object
  */
  /**
    NOTE: This is a low-level method used by other parts of the API. You almost
    never want to call this method directly. Instead you should use
    `mixin()` to define new properties.
  
    Defines a property on an object. This method works much like the ES5
    `Object.defineProperty()` method except that it can also accept computed
    properties and other special descriptors.
  
    Normally this method takes only three parameters. However if you pass an
    instance of `Descriptor` as the third param then you can pass an
    optional value as the fourth parameter. This is often more efficient than
    creating new descriptor hashes for each property.
  
    ## Examples
  
    ```javascript
    import { defineProperty, computed } from '@ember/object';
  
    // ES5 compatible mode
    defineProperty(contact, 'firstName', {
      writable: true,
      configurable: false,
      enumerable: true,
      value: 'Charles'
    });
  
    // define a simple property
    defineProperty(contact, 'lastName', undefined, 'Jolley');
  
    // define a computed property
    defineProperty(contact, 'fullName', computed('firstName', 'lastName', function() {
      return this.firstName+' '+this.lastName;
    }));
    ```
  
    @public
    @method defineProperty
    @static
    @for @ember/object
    @param {Object} obj the object to define this property on. This may be a prototype.
    @param {String} keyName the name of the property
    @param {Descriptor} [desc] an instance of `Descriptor` (typically a
      computed property) or an ES5 descriptor.
      You must provide this or `data` but not both.
    @param {*} [data] something other than a descriptor, that will
      become the explicit value of this property.
  */
  function defineProperty(obj, keyName, desc, data, _meta) {
    var meta$$1 = _meta === undefined ? (0, _meta2.meta)(obj) : _meta;
    var previousDesc = descriptorForProperty(obj, keyName, meta$$1);
    var wasDescriptor = previousDesc !== undefined;
    if (wasDescriptor) {
      previousDesc.teardown(obj, keyName, meta$$1);
    }
    if (isClassicDecorator(desc)) {
      defineDecorator(obj, keyName, desc, meta$$1);
    } else if (desc === null || desc === undefined) {
      defineValue(obj, keyName, data, wasDescriptor, true);
    } else {
      // fallback to ES5
      Object.defineProperty(obj, keyName, desc);
    }
    // if key is being watched, override chains that
    // were initialized with the prototype
    if (!meta$$1.isPrototypeMeta(obj)) {
      revalidateObservers(obj);
    }
  }
  function defineDecorator(obj, keyName, desc, meta$$1) {
    var propertyDesc;
    if (true /* DEBUG */) {
      propertyDesc = desc(obj, keyName, undefined, meta$$1, true);
    } else {
      propertyDesc = desc(obj, keyName, undefined, meta$$1);
    }
    Object.defineProperty(obj, keyName, propertyDesc);
    // pass the decorator function forward for backwards compat
    return desc;
  }
  function defineValue(obj, keyName, value, wasDescriptor, enumerable) {
    if (enumerable === void 0) {
      enumerable = true;
    }
    if (wasDescriptor === true || enumerable === false) {
      Object.defineProperty(obj, keyName, {
        configurable: true,
        enumerable,
        writable: true,
        value
      });
    } else {
      if (true /* DEBUG */) {
        (0, _utils.setWithMandatorySetter)(obj, keyName, value);
      } else {
        obj[keyName] = value;
      }
    }
    return value;
  }
  var firstDotIndexCache = new _utils.Cache(1000, key => key.indexOf('.'));
  function isPath(path) {
    return typeof path === 'string' && firstDotIndexCache.get(path) !== -1;
  }
  var PROXY_CONTENT = (0, _utils.symbol)('PROXY_CONTENT');
  _exports.PROXY_CONTENT = PROXY_CONTENT;
  var getPossibleMandatoryProxyValue;
  if (true /* DEBUG */) {
    getPossibleMandatoryProxyValue = function getPossibleMandatoryProxyValue(obj, keyName) {
      var content = obj[PROXY_CONTENT];
      if (content === undefined) {
        return obj[keyName];
      } else {
        /* global Reflect */
        return Reflect.get(content, keyName, obj);
      }
    };
  }
  function hasUnknownProperty(val) {
    return typeof val === 'object' && val !== null && typeof val.unknownProperty === 'function';
  }
  function get(obj, keyName) {
    (true && !(arguments.length === 2) && (0, _debug.assert)(`Get must be called with two arguments; an object and a property key`, arguments.length === 2));
    (true && !(obj !== undefined && obj !== null) && (0, _debug.assert)(`Cannot call get with '${keyName}' on an undefined object.`, obj !== undefined && obj !== null));
    (true && !(typeof keyName === 'string' || typeof keyName === 'number' && !isNaN(keyName)) && (0, _debug.assert)(`The key provided to get must be a string or number, you passed ${keyName}`, typeof keyName === 'string' || typeof keyName === 'number' && !isNaN(keyName)));
    (true && !(typeof keyName !== 'string' || keyName.lastIndexOf('this.', 0) !== 0) && (0, _debug.assert)(`'this' in paths is not supported`, typeof keyName !== 'string' || keyName.lastIndexOf('this.', 0) !== 0));
    return isPath(keyName) ? _getPath(obj, keyName) : _getProp(obj, keyName);
  }
  function _getProp(obj, keyName) {
    if (obj == null) {
      return;
    }
    var value;
    if (typeof obj === 'object' || typeof obj === 'function') {
      if (true /* DEBUG */) {
        value = getPossibleMandatoryProxyValue(obj, keyName);
      } else {
        value = obj[keyName];
      }
      if (value === undefined && typeof obj === 'object' && !(keyName in obj) && hasUnknownProperty(obj)) {
        value = obj.unknownProperty(keyName);
      }
      if ((0, _validator.isTracking)()) {
        (0, _validator.consumeTag)((0, _validator.tagFor)(obj, keyName));
        if (Array.isArray(value) || (0, _internals.isEmberArray)(value)) {
          // Add the tag of the returned value if it is an array, since arrays
          // should always cause updates if they are consumed and then changed
          (0, _validator.consumeTag)((0, _validator.tagFor)(value, '[]'));
        }
      }
    } else {
      // SAFETY: It should be ok to access properties on any non-nullish value
      value = obj[keyName];
    }
    return value;
  }
  function _getPath(obj, path, forSet) {
    var parts = typeof path === 'string' ? path.split('.') : path;
    for (var part of parts) {
      if (obj === undefined || obj === null || obj.isDestroyed) {
        return undefined;
      }
      if (forSet && (part === '__proto__' || part === 'constructor')) {
        return;
      }
      obj = _getProp(obj, part);
    }
    return obj;
  }
  // Warm it up
  _getProp('foo', 'a');
  _getProp('foo', 1);
  _getProp({}, 'a');
  _getProp({}, 1);
  _getProp({
    unknownProperty() {}
  }, 'a');
  _getProp({
    unknownProperty() {}
  }, 1);
  get({}, 'foo');
  get({}, 'foo.bar');
  var fakeProxy = {};
  (0, _utils.setProxy)(fakeProxy);
  (0, _validator.track)(() => _getProp({}, 'a'));
  (0, _validator.track)(() => _getProp({}, 1));
  (0, _validator.track)(() => _getProp({
    a: []
  }, 'a'));
  (0, _validator.track)(() => _getProp({
    a: fakeProxy
  }, 'a'));

  /**
   @module @ember/object
  */
  /**
    Sets the value of a property on an object, respecting computed properties
    and notifying observers and other listeners of the change.
    If the specified property is not defined on the object and the object
    implements the `setUnknownProperty` method, then instead of setting the
    value of the property on the object, its `setUnknownProperty` handler
    will be invoked with the two parameters `keyName` and `value`.
  
    ```javascript
    import { set } from '@ember/object';
    set(obj, "name", value);
    ```
  
    @method set
    @static
    @for @ember/object
    @param {Object} obj The object to modify.
    @param {String} keyName The property key to set
    @param {Object} value The value to set
    @return {Object} the passed value.
    @public
  */
  function set(obj, keyName, value, tolerant) {
    (true && !(arguments.length === 3 || arguments.length === 4) && (0, _debug.assert)(`Set must be called with three or four arguments; an object, a property key, a value and tolerant true/false`, arguments.length === 3 || arguments.length === 4));
    (true && !(obj && typeof obj === 'object' || typeof obj === 'function') && (0, _debug.assert)(`Cannot call set with '${keyName}' on an undefined object.`, obj && typeof obj === 'object' || typeof obj === 'function'));
    (true && !(typeof keyName === 'string' || typeof keyName === 'number' && !isNaN(keyName)) && (0, _debug.assert)(`The key provided to set must be a string or number, you passed ${keyName}`, typeof keyName === 'string' || typeof keyName === 'number' && !isNaN(keyName)));
    (true && !(typeof keyName !== 'string' || keyName.lastIndexOf('this.', 0) !== 0) && (0, _debug.assert)(`'this' in paths is not supported`, typeof keyName !== 'string' || keyName.lastIndexOf('this.', 0) !== 0));
    if (obj.isDestroyed) {
      (true && !(tolerant) && (0, _debug.assert)(`calling set on destroyed object: ${(0, _utils.toString)(obj)}.${keyName} = ${(0, _utils.toString)(value)}`, tolerant));
      return value;
    }
    return isPath(keyName) ? _setPath(obj, keyName, value, tolerant) : _setProp(obj, keyName, value);
  }
  function _setProp(obj, keyName, value) {
    var descriptor = (0, _utils.lookupDescriptor)(obj, keyName);
    if (descriptor !== null && COMPUTED_SETTERS.has(descriptor.set)) {
      obj[keyName] = value;
      return value;
    }
    var currentValue;
    if (true /* DEBUG */) {
      currentValue = getPossibleMandatoryProxyValue(obj, keyName);
    } else {
      currentValue = obj[keyName];
    }
    if (currentValue === undefined && 'object' === typeof obj && !(keyName in obj) && typeof obj.setUnknownProperty === 'function') {
      /* unknown property */
      obj.setUnknownProperty(keyName, value);
    } else {
      if (true /* DEBUG */) {
        (0, _utils.setWithMandatorySetter)(obj, keyName, value);
      } else {
        obj[keyName] = value;
      }
      if (currentValue !== value) {
        notifyPropertyChange(obj, keyName);
      }
    }
    return value;
  }
  function _setPath(root, path, value, tolerant) {
    var parts = path.split('.');
    var keyName = parts.pop();
    (true && !(keyName.trim().length > 0) && (0, _debug.assert)('Property set failed: You passed an empty path', keyName.trim().length > 0));
    var newRoot = _getPath(root, parts, true);
    if (newRoot !== null && newRoot !== undefined) {
      return set(newRoot, keyName, value);
    } else if (!tolerant) {
      throw new Error(`Property set failed: object in path "${parts.join('.')}" could not be found.`);
    }
  }
  /**
    Error-tolerant form of `set`. Will not blow up if any part of the
    chain is `undefined`, `null`, or destroyed.
  
    This is primarily used when syncing bindings, which may try to update after
    an object has been destroyed.
  
    ```javascript
    import { trySet } from '@ember/object';
  
    let obj = { name: "Zoey" };
    trySet(obj, "contacts.twitter", "@emberjs");
    ```
  
    @method trySet
    @static
    @for @ember/object
    @param {Object} root The object to modify.
    @param {String} path The property path to set
    @param {Object} value The value to set
    @public
  */
  function trySet(root, path, value) {
    return set(root, path, value, true);
  }
  function alias(altKey) {
    (true && !(!isElementDescriptor(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @alias as a decorator directly, but it requires a `altKey` parameter', !isElementDescriptor(Array.prototype.slice.call(arguments)))); // SAFETY: We passed in the impl for this class
    return makeComputedDecorator(new AliasedProperty(altKey), AliasDecoratorImpl);
  }
  // TODO: This class can be svelted once `meta` has been deprecated
  class AliasDecoratorImpl extends Function {
    readOnly() {
      descriptorForDecorator(this).readOnly();
      return this;
    }
    oneWay() {
      descriptorForDecorator(this).oneWay();
      return this;
    }
    meta(meta$$1) {
      var prop = descriptorForDecorator(this);
      if (arguments.length === 0) {
        return prop._meta || {};
      } else {
        prop._meta = meta$$1;
      }
    }
  }
  class AliasedProperty extends ComputedDescriptor {
    constructor(altKey) {
      super();
      this.altKey = altKey;
    }
    setup(obj, keyName, propertyDesc, meta$$1) {
      (true && !(this.altKey !== keyName) && (0, _debug.assert)(`Setting alias '${keyName}' on self`, this.altKey !== keyName));
      super.setup(obj, keyName, propertyDesc, meta$$1);
      CHAIN_PASS_THROUGH.add(this);
    }
    get(obj, keyName) {
      var ret;
      var meta$$1 = (0, _meta2.meta)(obj);
      var tagMeta = (0, _validator.tagMetaFor)(obj);
      var propertyTag = (0, _validator.tagFor)(obj, keyName, tagMeta);
      // We don't use the tag since CPs are not automatic, we just want to avoid
      // anything tracking while we get the altKey
      (0, _validator.untrack)(() => {
        ret = get(obj, this.altKey);
      });
      var lastRevision = meta$$1.revisionFor(keyName);
      if (lastRevision === undefined || !(0, _validator.validateTag)(propertyTag, lastRevision)) {
        (0, _validator.updateTag)(propertyTag, getChainTagsForKey(obj, this.altKey, tagMeta, meta$$1));
        meta$$1.setRevisionFor(keyName, (0, _validator.valueForTag)(propertyTag));
        finishLazyChains(meta$$1, keyName, ret);
      }
      (0, _validator.consumeTag)(propertyTag);
      return ret;
    }
    set(obj, _keyName, value) {
      return set(obj, this.altKey, value);
    }
    readOnly() {
      this.set = AliasedProperty_readOnlySet;
    }
    oneWay() {
      this.set = AliasedProperty_oneWaySet;
    }
  }
  function AliasedProperty_readOnlySet(obj, keyName) {
    throw new Error(`Cannot set read-only property '${keyName}' on object: ${(0, _debug.inspect)(obj)}`);
  }
  function AliasedProperty_oneWaySet(obj, keyName, value) {
    defineProperty(obj, keyName, null);
    return set(obj, keyName, value);
  }

  /**
  @module ember
  */
  /**
    Used internally to allow changing properties in a backwards compatible way, and print a helpful
    deprecation warning.
  
    @method deprecateProperty
    @param {Object} object The object to add the deprecated property to.
    @param {String} deprecatedKey The property to add (and print deprecation warnings upon accessing).
    @param {String} newKey The property that will be aliased.
    @private
    @since 1.7.0
  */
  function deprecateProperty(object, deprecatedKey, newKey, options) {
    function _deprecate() {
      (true && !(false) && (0, _debug.deprecate)(`Usage of \`${deprecatedKey}\` is deprecated, use \`${newKey}\` instead.`, false, options));
    }
    Object.defineProperty(object, deprecatedKey, {
      configurable: true,
      enumerable: false,
      set(value) {
        _deprecate();
        set(this, newKey, value);
      },
      get() {
        _deprecate();
        return get(this, newKey);
      }
    });
  }
  var EACH_PROXIES = new WeakMap();
  function eachProxyArrayWillChange(array, idx, removedCnt, addedCnt) {
    var eachProxy = EACH_PROXIES.get(array);
    if (eachProxy !== undefined) {
      eachProxy.arrayWillChange(array, idx, removedCnt, addedCnt);
    }
  }
  function eachProxyArrayDidChange(array, idx, removedCnt, addedCnt) {
    var eachProxy = EACH_PROXIES.get(array);
    if (eachProxy !== undefined) {
      eachProxy.arrayDidChange(array, idx, removedCnt, addedCnt);
    }
  }

  /**
   @module ember
  */
  /**
    Helper class that allows you to register your library with Ember.
  
    Singleton created at `Ember.libraries`.
  
    @class Libraries
    @constructor
    @private
  */
  class Libraries {
    constructor() {
      this._registry = [];
      this._coreLibIndex = 0;
    }
    _getLibraryByName(name) {
      var libs = this._registry;
      for (var lib of libs) {
        if (lib.name === name) {
          return lib;
        }
      }
      return undefined;
    }
    register(name, version, isCoreLibrary) {
      var index = this._registry.length;
      if (!this._getLibraryByName(name)) {
        if (isCoreLibrary) {
          index = this._coreLibIndex++;
        }
        this._registry.splice(index, 0, {
          name,
          version
        });
      } else {
        (true && (0, _debug.warn)(`Library "${name}" is already registered with Ember.`, false, {
          id: 'ember-metal.libraries-register'
        }));
      }
    }
    registerCoreLibrary(name, version) {
      this.register(name, version, true);
    }
    deRegister(name) {
      var lib = this._getLibraryByName(name);
      var index;
      if (lib) {
        index = this._registry.indexOf(lib);
        this._registry.splice(index, 1);
      }
    }
  }
  _exports.Libraries = Libraries;
  if (true /* DEBUG */) {
    Libraries.prototype.logVersions = function () {
      var libs = this._registry;
      var nameLengths = libs.map(item => get(item, 'name.length'));
      (true && !(nameLengths instanceof Array && nameLengths.every(n => typeof n === 'number')) && (0, _debug.assert)('nameLengths is number array', nameLengths instanceof Array && nameLengths.every(n => typeof n === 'number')));
      var maxNameLength = Math.max.apply(null, nameLengths);
      (0, _debug.debug)('-------------------------------');
      for (var lib of libs) {
        var spaces = new Array(maxNameLength - lib.name.length + 1).join(' ');
        (0, _debug.debug)([lib.name, spaces, ' : ', lib.version].join(''));
      }
      (0, _debug.debug)('-------------------------------');
    };
  }
  var LIBRARIES = new Libraries();
  _exports.libraries = LIBRARIES;
  LIBRARIES.registerCoreLibrary('Ember', _version.default);
  function getProperties(obj, keys) {
    var ret = {};
    var propertyNames;
    var i = 1;
    if (arguments.length === 2 && Array.isArray(keys)) {
      i = 0;
      propertyNames = arguments[1];
    } else {
      propertyNames = Array.from(arguments);
    }
    for (; i < propertyNames.length; i++) {
      ret[propertyNames[i]] = get(obj, propertyNames[i]);
    }
    return ret;
  }

  /**
   @module @ember/object
  */
  /**
    Set a list of properties on an object. These properties are set inside
    a single `beginPropertyChanges` and `endPropertyChanges` batch, so
    observers will be buffered.
  
    ```javascript
    import EmberObject from '@ember/object';
    let anObject = EmberObject.create();
  
    anObject.setProperties({
      firstName: 'Stanley',
      lastName: 'Stuart',
      age: 21
    });
    ```
  
    @method setProperties
    @static
    @for @ember/object
    @param obj
    @param {Object} properties
    @return properties
    @public
  */
  function setProperties(obj, properties) {
    if (properties === null || typeof properties !== 'object') {
      return properties;
    }
    changeProperties(() => {
      var props = Object.keys(properties);
      for (var propertyName of props) {
        set(obj, propertyName, properties[propertyName]);
      }
    });
    return properties;
  }
  var DEBUG_INJECTION_FUNCTIONS;
  _exports.DEBUG_INJECTION_FUNCTIONS = DEBUG_INJECTION_FUNCTIONS;
  if (true /* DEBUG */) {
    _exports.DEBUG_INJECTION_FUNCTIONS = DEBUG_INJECTION_FUNCTIONS = new WeakMap();
  }
  function inject(type) {
    (true && !(typeof type === 'string') && (0, _debug.assert)('a string type must be provided to inject', typeof type === 'string'));
    var elementDescriptor;
    var name;
    for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key6 = 1; _key6 < _len5; _key6++) {
      args[_key6 - 1] = arguments[_key6];
    }
    if (isElementDescriptor(args)) {
      elementDescriptor = args;
    } else if (typeof args[0] === 'string') {
      name = args[0];
    }
    var getInjection = function (propertyName) {
      var owner = (0, _owner.getOwner)(this) || this.container; // fallback to `container` for backwards compat
      (true && !(Boolean(owner)) && (0, _debug.assert)(`Attempting to lookup an injected property on an object without a container, ensure that the object was instantiated via a container.`, Boolean(owner)));
      return owner.lookup(`${type}:${name || propertyName}`);
    };
    if (true /* DEBUG */) {
      DEBUG_INJECTION_FUNCTIONS.set(getInjection, {
        type,
        name
      });
    }
    var decorator = computed({
      get: getInjection,
      set(keyName, value) {
        defineProperty(this, keyName, null, value);
      }
    });
    if (elementDescriptor) {
      return decorator(elementDescriptor[0], elementDescriptor[1], elementDescriptor[2]);
    } else {
      return decorator;
    }
  }
  function tracked() {
    for (var _len6 = arguments.length, args = new Array(_len6), _key7 = 0; _key7 < _len6; _key7++) {
      args[_key7] = arguments[_key7];
    }
    (true && !(!(isElementDescriptor(args.slice(0, 3)) && args.length === 5 && args[4] === true)) && (0, _debug.assert)(`@tracked can only be used directly as a native decorator. If you're using tracked in classic classes, add parenthesis to call it like a function: tracked()`, !(isElementDescriptor(args.slice(0, 3)) && args.length === 5 && args[4] === true)));
    if (!isElementDescriptor(args)) {
      var propertyDesc = args[0];
      (true && !(args.length === 0 || typeof propertyDesc === 'object' && propertyDesc !== null) && (0, _debug.assert)(`tracked() may only receive an options object containing 'value' or 'initializer', received ${propertyDesc}`, args.length === 0 || typeof propertyDesc === 'object' && propertyDesc !== null));
      if (true /* DEBUG */ && propertyDesc) {
        var keys = Object.keys(propertyDesc);
        (true && !(keys.length <= 1 && (keys[0] === undefined || keys[0] === 'value' || keys[0] === 'initializer')) && (0, _debug.assert)(`The options object passed to tracked() may only contain a 'value' or 'initializer' property, not both. Received: [${keys}]`, keys.length <= 1 && (keys[0] === undefined || keys[0] === 'value' || keys[0] === 'initializer')));
        (true && !(!('initializer' in propertyDesc) || typeof propertyDesc.initializer === 'function') && (0, _debug.assert)(`The initializer passed to tracked must be a function. Received ${propertyDesc.initializer}`, !('initializer' in propertyDesc) || typeof propertyDesc.initializer === 'function'));
      }
      var initializer = propertyDesc ? propertyDesc.initializer : undefined;
      var value = propertyDesc ? propertyDesc.value : undefined;
      var decorator = function (target, key, _desc, _meta, isClassicDecorator$$1) {
        (true && !(isClassicDecorator$$1) && (0, _debug.assert)(`You attempted to set a default value for ${key} with the @tracked({ value: 'default' }) syntax. You can only use this syntax with classic classes. For native classes, you can use class initializers: @tracked field = 'default';`, isClassicDecorator$$1));
        var fieldDesc = {
          initializer: initializer || (() => value)
        };
        return descriptorForField([target, key, fieldDesc]);
      };
      setClassicDecorator(decorator);
      return decorator;
    }
    return descriptorForField(args);
  }
  if (true /* DEBUG */) {
    // Normally this isn't a classic decorator, but we want to throw a helpful
    // error in development so we need it to treat it like one
    setClassicDecorator(tracked);
  }
  function descriptorForField(_ref) {
    var [target, key, desc] = _ref;
    (true && !(!desc || !desc.value && !desc.get && !desc.set) && (0, _debug.assert)(`You attempted to use @tracked on ${key}, but that element is not a class field. @tracked is only usable on class fields. Native getters and setters will autotrack add any tracked fields they encounter, so there is no need mark getters and setters with @tracked.`, !desc || !desc.value && !desc.get && !desc.set));
    var {
      getter,
      setter
    } = (0, _validator.trackedData)(key, desc ? desc.initializer : undefined);
    function get() {
      var value = getter(this);
      // Add the tag of the returned value if it is an array, since arrays
      // should always cause updates if they are consumed and then changed
      if (Array.isArray(value) || (0, _internals.isEmberArray)(value)) {
        (0, _validator.consumeTag)((0, _validator.tagFor)(value, '[]'));
      }
      return value;
    }
    function set(newValue) {
      setter(this, newValue);
      (0, _validator.dirtyTagFor)(this, SELF_TAG);
    }
    var newDesc = {
      enumerable: true,
      configurable: true,
      isTracked: true,
      get,
      set
    };
    COMPUTED_SETTERS.add(set);
    (0, _meta2.meta)(target).writeDescriptors(key, new TrackedDescriptor(get, set));
    return newDesc;
  }
  class TrackedDescriptor {
    constructor(_get, _set) {
      this._get = _get;
      this._set = _set;
      CHAIN_PASS_THROUGH.add(this);
    }
    get(obj) {
      return this._get.call(obj);
    }
    set(obj, _key, value) {
      this._set.call(obj, value);
    }
  }

  // NOTE: copied from: https://github.com/glimmerjs/glimmer.js/pull/358
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  _exports.TrackedDescriptor = TrackedDescriptor;
  var cached = function () {
    for (var _len7 = arguments.length, args = new Array(_len7), _key8 = 0; _key8 < _len7; _key8++) {
      args[_key8] = arguments[_key8];
    }
    var [target, key, descriptor] = args;
    // Error on `@cached()`, `@cached(...args)`, and `@cached propName = value;`
    if (true /* DEBUG */ && target === undefined) throwCachedExtraneousParens();
    if (true /* DEBUG */ && (typeof target !== 'object' || typeof key !== 'string' || typeof descriptor !== 'object' || args.length !== 3)) {
      throwCachedInvalidArgsError(args);
    }
    if (true /* DEBUG */ && (!('get' in descriptor) || typeof descriptor.get !== 'function')) {
      throwCachedGetterOnlyError(key);
    }
    var caches = new WeakMap();
    var getter = descriptor.get;
    descriptor.get = function () {
      if (!caches.has(this)) {
        caches.set(this, (0, _validator.createCache)(getter.bind(this)));
      }
      return (0, _validator.getValue)(caches.get(this));
    };
  };
  _exports.cached = cached;
  function throwCachedExtraneousParens() {
    throw new Error('You attempted to use @cached(), which is not necessary nor supported. Remove the parentheses and you will be good to go!');
  }
  function throwCachedGetterOnlyError(key) {
    throw new Error(`The @cached decorator must be applied to getters. '${key}' is not a getter.`);
  }
  function throwCachedInvalidArgsError(args) {
    if (args === void 0) {
      args = [];
    }
    throw new Error(`You attempted to use @cached on with ${args.length > 1 ? 'arguments' : 'an argument'} ( @cached(${args.map(d => `'${d}'`).join(', ')}), which is not supported. Dependencies are automatically tracked, so you can just use ${'`@cached`'}`);
  }

  /**
    Ember uses caching based on trackable values to avoid updating large portions
    of the application. This caching is exposed via a cache primitive that can be
    used to cache a specific computation, so that it will not update and will
    return the cached value until a tracked value used in its computation has
    updated.
  
    @module @glimmer/tracking/primitives/cache
    @public
  */
  /**
    Receives a function, and returns a wrapped version of it that memoizes based on
    _autotracking_. The function will only rerun whenever any tracked values used
    within it have changed. Otherwise, it will return the previous value.
  
    ```js
    import { tracked } from '@glimmer/tracking';
    import { createCache, getValue } from '@glimmer/tracking/primitives/cache';
  
    class State {
      @tracked value;
    }
  
    let state = new State();
    let computeCount = 0;
  
    let counter = createCache(() => {
      // consume the state. Now, `counter` will
      // only rerun if `state.value` changes.
      state.value;
  
      return ++computeCount;
    });
  
    getValue(counter); // 1
  
    // returns the same value because no tracked state has changed
    getValue(counter); // 1
  
    state.value = 'foo';
  
    // reruns because a tracked value used in the function has changed,
    // incermenting the counter
    getValue(counter); // 2
    ```
  
    @method createCache
    @static
    @for @glimmer/tracking/primitives/cache
    @public
  */
  /**
    Gets the value of a cache created with `createCache`.
  
    ```js
    import { tracked } from '@glimmer/tracking';
    import { createCache, getValue } from '@glimmer/tracking/primitives/cache';
  
    let computeCount = 0;
  
    let counter = createCache(() => {
      return ++computeCount;
    });
  
    getValue(counter); // 1
    ```
  
    @method getValue
    @static
    @for @glimmer/tracking/primitives/cache
    @public
  */
  /**
    Can be used to check if a memoized function is _constant_. If no tracked state
    was used while running a memoized function, it will never rerun, because nothing
    can invalidate its result. `isConst` can be used to determine if a memoized
    function is constant or not, in order to optimize code surrounding that
    function.
  
    ```js
    import { tracked } from '@glimmer/tracking';
    import { createCache, getValue, isConst } from '@glimmer/tracking/primitives/cache';
  
    class State {
      @tracked value;
    }
  
    let state = new State();
    let computeCount = 0;
  
    let counter = createCache(() => {
      // consume the state
      state.value;
  
      return computeCount++;
    });
  
    let constCounter = createCache(() => {
      return computeCount++;
    });
  
    getValue(counter);
    getValue(constCounter);
  
    isConst(counter); // false
    isConst(constCounter); // true
    ```
  
    If called on a cache that hasn't been accessed yet, it will throw an
    error. This is because there's no way to know if the function will be constant
    or not yet, and so this helps prevent missing an optimization opportunity on
    accident.
  
    @method isConst
    @static
    @for @glimmer/tracking/primitives/cache
    @public
  */

  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var searchDisabled = false;
  var flags = {
    _set: 0,
    _unprocessedNamespaces: false,
    get unprocessedNamespaces() {
      return this._unprocessedNamespaces;
    },
    set unprocessedNamespaces(v) {
      this._set++;
      this._unprocessedNamespaces = v;
    }
  };
  var unprocessedMixins = false;
  var NAMESPACES = [];
  _exports.NAMESPACES = NAMESPACES;
  var NAMESPACES_BY_ID = Object.create(null);
  _exports.NAMESPACES_BY_ID = NAMESPACES_BY_ID;
  function addNamespace(namespace) {
    flags.unprocessedNamespaces = true;
    NAMESPACES.push(namespace);
  }
  function removeNamespace(namespace) {
    var name = (0, _utils.getName)(namespace);
    delete NAMESPACES_BY_ID[name];
    NAMESPACES.splice(NAMESPACES.indexOf(namespace), 1);
    if (name in _environment.context.lookup && namespace === _environment.context.lookup[name]) {
      _environment.context.lookup[name] = undefined;
    }
  }
  function findNamespaces() {
    if (!flags.unprocessedNamespaces) {
      return;
    }
    var lookup = _environment.context.lookup;
    var keys = Object.keys(lookup);
    for (var key of keys) {
      // Only process entities that start with uppercase A-Z
      if (!isUppercase(key.charCodeAt(0))) {
        continue;
      }
      var obj = tryIsNamespace(lookup, key);
      if (obj) {
        (0, _utils.setName)(obj, key);
      }
    }
  }
  function findNamespace(name) {
    if (!searchDisabled) {
      processAllNamespaces();
    }
    return NAMESPACES_BY_ID[name];
  }
  function processNamespace(namespace) {
    _processNamespace([namespace.toString()], namespace, new Set());
  }
  function processAllNamespaces() {
    var unprocessedNamespaces = flags.unprocessedNamespaces;
    if (unprocessedNamespaces) {
      findNamespaces();
      flags.unprocessedNamespaces = false;
    }
    if (unprocessedNamespaces || unprocessedMixins) {
      var namespaces = NAMESPACES;
      for (var namespace of namespaces) {
        processNamespace(namespace);
      }
      unprocessedMixins = false;
    }
  }
  function isSearchDisabled() {
    return searchDisabled;
  }
  function setSearchDisabled(flag) {
    searchDisabled = Boolean(flag);
  }
  function setUnprocessedMixins() {
    unprocessedMixins = true;
  }
  function _processNamespace(paths, root, seen) {
    var idx = paths.length;
    var id = paths.join('.');
    NAMESPACES_BY_ID[id] = root;
    (0, _utils.setName)(root, id);
    // Loop over all of the keys in the namespace, looking for classes
    for (var key in root) {
      if (!hasOwnProperty.call(root, key)) {
        continue;
      }
      var obj = root[key];
      // If we are processing the `Ember` namespace, for example, the
      // `paths` will start with `["Ember"]`. Every iteration through
      // the loop will update the **second** element of this list with
      // the key, so processing `Ember.View` will make the Array
      // `['Ember', 'View']`.
      paths[idx] = key;
      // If we have found an unprocessed class
      if (obj && (0, _utils.getName)(obj) === void 0) {
        // Replace the class' `toString` with the dot-separated path
        (0, _utils.setName)(obj, paths.join('.'));
        // Support nested namespaces
      } else if (obj && isNamespace(obj)) {
        // Skip aliased namespaces
        if (seen.has(obj)) {
          continue;
        }
        seen.add(obj);
        // Process the child namespace
        _processNamespace(paths, obj, seen);
      }
    }
    paths.length = idx; // cut out last item
  }

  function isNamespace(obj) {
    return obj != null && typeof obj === 'object' && obj.isNamespace;
  }
  function isUppercase(code) {
    return code >= 65 && code <= 90 // A
    ; // Z
  }

  function tryIsNamespace(lookup, prop) {
    try {
      var obj = lookup[prop];
      return (obj !== null && typeof obj === 'object' || typeof obj === 'function') && obj.isNamespace && obj;
    } catch (e) {
      // continue
    }
  }
});
define("@ember/-internals/overrides/index", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.onEmberGlobalAccess = void 0;
  var onEmberGlobalAccess;
  _exports.onEmberGlobalAccess = onEmberGlobalAccess;
});
define("@ember/-internals/owner/index", ["exports", "@glimmer/owner"], function (_exports, _owner) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.getOwner = getOwner;
  _exports.isFactory = isFactory;
  _exports.setOwner = setOwner;
  /**
    @private
    @method isFactory
    @param {Object} obj
    @return {Boolean}
    @static
   */
  function isFactory(obj) {
    return obj != null && typeof obj.create === 'function';
  }
  // NOTE: For docs, see the definition at the public API site in `@ember/owner`;
  // we document it there for the sake of public API docs and for TS consumption,
  // while having the richer `InternalOwner` representation for Ember itself.
  function getOwner(object) {
    return (0, _owner.getOwner)(object);
  }
  /**
    `setOwner` forces a new owner on a given object instance. This is primarily
    useful in some testing cases.
  
    @method setOwner
    @static
    @for @ember/owner
    @param {Object} object An object instance.
    @param {Owner} object The new owner object of the object instance.
    @since 2.3.0
    @public
  */
  function setOwner(object, owner) {
    (0, _owner.setOwner)(object, owner);
  }
});
define("@ember/-internals/routing/index", ["exports", "@ember/routing/-internals"], function (_exports, _internals) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "RouterDSL", {
    enumerable: true,
    get: function () {
      return _internals.DSL;
    }
  });
  Object.defineProperty(_exports, "controllerFor", {
    enumerable: true,
    get: function () {
      return _internals.controllerFor;
    }
  });
  Object.defineProperty(_exports, "generateController", {
    enumerable: true,
    get: function () {
      return _internals.generateController;
    }
  });
  Object.defineProperty(_exports, "generateControllerFactory", {
    enumerable: true,
    get: function () {
      return _internals.generateControllerFactory;
    }
  });
});
define("@ember/-internals/runtime/index", ["exports", "@ember/-internals/runtime/lib/mixins/registry_proxy", "@ember/-internals/runtime/lib/mixins/container_proxy", "@ember/-internals/runtime/lib/mixins/comparable", "@ember/-internals/runtime/lib/mixins/action_handler", "@ember/-internals/runtime/lib/mixins/-proxy", "@ember/enumerable/mutable", "@ember/-internals/runtime/lib/mixins/target_action_support", "@ember/-internals/runtime/lib/ext/rsvp"], function (_exports, _registry_proxy, _container_proxy, _comparable, _action_handler, _proxy, _mutable, _target_action_support, _rsvp) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "ActionHandler", {
    enumerable: true,
    get: function () {
      return _action_handler.default;
    }
  });
  Object.defineProperty(_exports, "Comparable", {
    enumerable: true,
    get: function () {
      return _comparable.default;
    }
  });
  Object.defineProperty(_exports, "ContainerProxyMixin", {
    enumerable: true,
    get: function () {
      return _container_proxy.default;
    }
  });
  Object.defineProperty(_exports, "MutableEnumerable", {
    enumerable: true,
    get: function () {
      return _mutable.default;
    }
  });
  Object.defineProperty(_exports, "RSVP", {
    enumerable: true,
    get: function () {
      return _rsvp.default;
    }
  });
  Object.defineProperty(_exports, "RegistryProxyMixin", {
    enumerable: true,
    get: function () {
      return _registry_proxy.default;
    }
  });
  Object.defineProperty(_exports, "TargetActionSupport", {
    enumerable: true,
    get: function () {
      return _target_action_support.default;
    }
  });
  Object.defineProperty(_exports, "_ProxyMixin", {
    enumerable: true,
    get: function () {
      return _proxy.default;
    }
  });
  Object.defineProperty(_exports, "_contentFor", {
    enumerable: true,
    get: function () {
      return _proxy.contentFor;
    }
  });
  Object.defineProperty(_exports, "onerrorDefault", {
    enumerable: true,
    get: function () {
      return _rsvp.onerrorDefault;
    }
  });
});
define("@ember/-internals/runtime/lib/ext/rsvp", ["exports", "rsvp", "@ember/runloop", "@ember/-internals/error-handling", "@ember/debug"], function (_exports, RSVP, _runloop, _errorHandling, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.onerrorDefault = onerrorDefault;
  RSVP.configure('async', (callback, promise) => {
    _runloop._backburner.schedule('actions', null, callback, promise);
  });
  RSVP.configure('after', cb => {
    _runloop._backburner.schedule(_runloop._rsvpErrorQueue, null, cb);
  });
  RSVP.on('error', onerrorDefault);
  function onerrorDefault(reason) {
    var error = errorFor(reason);
    if (error) {
      var overrideDispatch = (0, _errorHandling.getDispatchOverride)();
      if (overrideDispatch) {
        overrideDispatch(error);
      } else {
        throw error;
      }
    }
  }
  function errorFor(reason) {
    if (!reason) return;
    var withErrorThrown = reason;
    if (withErrorThrown.errorThrown) {
      return unwrapErrorThrown(withErrorThrown);
    }
    var withName = reason;
    if (withName.name === 'UnrecognizedURLError') {
      (true && !(false) && (0, _debug.assert)(`The URL '${withName.message}' did not match any routes in your application`, false)); // @ts-expect-error We'll hit this if the assert is stripped
      return;
    }
    if (reason.name === 'TransitionAborted') {
      return;
    }
    return reason;
  }
  function unwrapErrorThrown(reason) {
    var error = reason.errorThrown;
    if (typeof error === 'string') {
      error = new Error(error);
    }
    Object.defineProperty(error, '__reason_with_error_thrown__', {
      value: reason,
      enumerable: false
    });
    return error;
  }
  var _default = RSVP;
  _exports.default = _default;
});
define("@ember/-internals/runtime/lib/mixins/-proxy", ["exports", "@ember/-internals/meta", "@ember/object/mixin", "@ember/-internals/metal", "@ember/-internals/utils", "@ember/debug", "@glimmer/manager", "@glimmer/validator"], function (_exports, _meta, _mixin, _metal, _utils, _debug, _manager, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.contentFor = contentFor;
  _exports.default = void 0;
  /**
  @module ember
  */

  function contentFor(proxy) {
    var content = (0, _metal.get)(proxy, 'content');
    // SAFETY: Ideally we'd assert instead of casting, but @glimmer/validator doesn't give us
    // sufficient public types for this. Previously this code was .js and worked correctly so
    // hopefully this is sufficiently reliable.
    (0, _validator.updateTag)((0, _metal.tagForObject)(proxy), (0, _metal.tagForObject)(content));
    return content;
  }
  function customTagForProxy(proxy, key, addMandatorySetter) {
    (true && !((0, _utils.isProxy)(proxy)) && (0, _debug.assert)('Expected a proxy', (0, _utils.isProxy)(proxy)));
    var meta = (0, _validator.tagMetaFor)(proxy);
    var tag = (0, _validator.tagFor)(proxy, key, meta);
    if (true /* DEBUG */) {
      // TODO: Replace this with something more first class for tracking tags in DEBUG
      // SAFETY: This is not an officially supported property but setting shouldn't cause issues.
      tag._propertyKey = key;
    }
    if (key in proxy) {
      if (true /* DEBUG */ && addMandatorySetter) {
        (true && !(_utils.setupMandatorySetter) && (0, _debug.assert)('[BUG] setupMandatorySetter should be set when debugging', setupMandatorySetter));
        (0, _utils.setupMandatorySetter)(tag, proxy, key);
      }
      return tag;
    } else {
      var tags = [tag, (0, _validator.tagFor)(proxy, 'content', meta)];
      var content = contentFor(proxy);
      if ((0, _utils.isObject)(content)) {
        tags.push((0, _metal.tagForProperty)(content, key, addMandatorySetter));
      }
      return (0, _validator.combine)(tags);
    }
  }
  var ProxyMixin = _mixin.default.create({
    /**
      The object whose properties will be forwarded.
         @property content
      @type {unknown}
      @default null
      @public
    */
    content: null,
    init() {
      this._super(...arguments);
      (0, _utils.setProxy)(this);
      (0, _metal.tagForObject)(this);
      (0, _manager.setCustomTagFor)(this, customTagForProxy);
    },
    willDestroy() {
      this.set('content', null);
      this._super(...arguments);
    },
    isTruthy: (0, _metal.computed)('content', function () {
      return Boolean((0, _metal.get)(this, 'content'));
    }),
    unknownProperty(key) {
      var content = contentFor(this);
      if (content) {
        return (0, _metal.get)(content, key);
      }
    },
    setUnknownProperty(key, value) {
      var m = (0, _meta.meta)(this);
      if (m.isInitializing() || m.isPrototypeMeta(this)) {
        // if marked as prototype or object is initializing then just
        // defineProperty rather than delegate
        (0, _metal.defineProperty)(this, key, null, value);
        return value;
      }
      var content = contentFor(this);
      (true && !(content) && (0, _debug.assert)(`Cannot delegate set('${key}', ${value}) to the 'content' property of object proxy ${this}: its 'content' is undefined.`, content)); // SAFETY: We don't actually guarantee that this is an object, so this isn't necessarily safe :(
      return (0, _metal.set)(content, key, value);
    }
  });
  var _default = ProxyMixin;
  _exports.default = _default;
});
define("@ember/-internals/runtime/lib/mixins/action_handler", ["exports", "@ember/object/mixin", "@ember/-internals/metal", "@ember/debug"], function (_exports, _mixin, _metal, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module ember
  */

  var ActionHandler = _mixin.default.create({
    mergedProperties: ['actions'],
    /**
      The collection of functions, keyed by name, available on this
      `ActionHandler` as action targets.
         These functions will be invoked when a matching `{{action}}` is triggered
      from within a template and the application's current route is this route.
         Actions can also be invoked from other parts of your application
      via `ActionHandler#send`.
         The `actions` hash will inherit action handlers from
      the `actions` hash defined on extended parent classes
      or mixins rather than just replace the entire hash, e.g.:
         ```app/mixins/can-display-banner.js
      import Mixin from '@ember/object/mixin';
         export default Mixin.create({
        actions: {
          displayBanner(msg) {
            // ...
          }
        }
      });
      ```
         ```app/routes/welcome.js
      import Route from '@ember/routing/route';
      import CanDisplayBanner from '../mixins/can-display-banner';
         export default Route.extend(CanDisplayBanner, {
        actions: {
          playMusic() {
            // ...
          }
        }
      });
         // `WelcomeRoute`, when active, will be able to respond
      // to both actions, since the actions hash is merged rather
      // then replaced when extending mixins / parent classes.
      this.send('displayBanner');
      this.send('playMusic');
      ```
         Within a Controller, Route or Component's action handler,
      the value of the `this` context is the Controller, Route or
      Component object:
         ```app/routes/song.js
      import Route from '@ember/routing/route';
         export default Route.extend({
        actions: {
          myAction() {
            this.controllerFor("song");
            this.transitionTo("other.route");
            ...
          }
        }
      });
      ```
         It is also possible to call `this._super(...arguments)` from within an
      action handler if it overrides a handler defined on a parent
      class or mixin:
         Take for example the following routes:
         ```app/mixins/debug-route.js
      import Mixin from '@ember/object/mixin';
         export default Mixin.create({
        actions: {
          debugRouteInformation() {
            console.debug("It's a-me, console.debug!");
          }
        }
      });
      ```
         ```app/routes/annoying-debug.js
      import Route from '@ember/routing/route';
      import DebugRoute from '../mixins/debug-route';
         export default Route.extend(DebugRoute, {
        actions: {
          debugRouteInformation() {
            // also call the debugRouteInformation of mixed in DebugRoute
            this._super(...arguments);
               // show additional annoyance
            window.alert(...);
          }
        }
      });
      ```
         ## Bubbling
         By default, an action will stop bubbling once a handler defined
      on the `actions` hash handles it. To continue bubbling the action,
      you must return `true` from the handler:
         ```app/router.js
      Router.map(function() {
        this.route("album", function() {
          this.route("song");
        });
      });
      ```
         ```app/routes/album.js
      import Route from '@ember/routing/route';
         export default Route.extend({
        actions: {
          startPlaying: function() {
          }
        }
      });
      ```
         ```app/routes/album-song.js
      import Route from '@ember/routing/route';
         export default Route.extend({
        actions: {
          startPlaying() {
            // ...
               if (actionShouldAlsoBeTriggeredOnParentRoute) {
              return true;
            }
          }
        }
      });
      ```
         @property actions
      @type Object
      @default null
      @public
    */
    /**
      Triggers a named action on the `ActionHandler`. Any parameters
      supplied after the `actionName` string will be passed as arguments
      to the action target function.
         If the `ActionHandler` has its `target` property set, actions may
      bubble to the `target`. Bubbling happens when an `actionName` can
      not be found in the `ActionHandler`'s `actions` hash or if the
      action target function returns `true`.
         Example
         ```app/routes/welcome.js
      import Route from '@ember/routing/route';
         export default Route.extend({
        actions: {
          playTheme() {
            this.send('playMusic', 'theme.mp3');
          },
          playMusic(track) {
            // ...
          }
        }
      });
      ```
         @method send
      @param {String} actionName The action to trigger
      @param {*} context a context to send with the action
      @public
    */
    send(actionName) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      (true && !(!this.isDestroying && !this.isDestroyed) && (0, _debug.assert)(`Attempted to call .send() with the action '${actionName}' on the destroyed object '${this}'.`, !this.isDestroying && !this.isDestroyed));
      if (this.actions && this.actions[actionName]) {
        var shouldBubble = this.actions[actionName].apply(this, args) === true;
        if (!shouldBubble) {
          return;
        }
      }
      var target = (0, _metal.get)(this, 'target');
      if (target) {
        (true && !(typeof target.send === 'function') && (0, _debug.assert)(`The \`target\` for ${this} (${target}) does not have a \`send\` method`, typeof target.send === 'function'));
        target.send(...arguments);
      }
    }
  });
  var _default = ActionHandler;
  _exports.default = _default;
});
define("@ember/-internals/runtime/lib/mixins/comparable", ["exports", "@ember/object/mixin"], function (_exports, _mixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var Comparable = _mixin.default.create({
    /**
      __Required.__ You must implement this method to apply this mixin.
         Override to return the result of the comparison of the two parameters. The
      compare method should return:
         - `-1` if `a < b`
      - `0` if `a == b`
      - `1` if `a > b`
         Default implementation raises an exception.
         @method compare
      @param a {Object} the first object to compare
      @param b {Object} the second object to compare
      @return {Number} the result of the comparison
      @private
    */
    compare: null
  });
  var _default = Comparable;
  _exports.default = _default;
});
define("@ember/-internals/runtime/lib/mixins/container_proxy", ["exports", "@ember/runloop", "@ember/object/mixin"], function (_exports, _runloop, _mixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var ContainerProxyMixin = _mixin.default.create({
    /**
     The container stores state.
        @private
     @property {Ember.Container} __container__
     */
    __container__: null,
    ownerInjection() {
      return this.__container__.ownerInjection();
    },
    lookup(fullName, options) {
      return this.__container__.lookup(fullName, options);
    },
    destroy() {
      var container = this.__container__;
      if (container) {
        (0, _runloop.join)(() => {
          container.destroy();
          (0, _runloop.schedule)('destroy', container, 'finalizeDestroy');
        });
      }
      this._super();
    },
    factoryFor(fullName) {
      return this.__container__.factoryFor(fullName);
    }
  });
  var _default = ContainerProxyMixin;
  _exports.default = _default;
});
define("@ember/-internals/runtime/lib/mixins/registry_proxy", ["exports", "@ember/debug", "@ember/object/mixin"], function (_exports, _debug, _mixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module ember
  */

  var RegistryProxyMixin = _mixin.default.create({
    __registry__: null,
    resolveRegistration(fullName) {
      (true && !(this.__registry__.isValidFullName(fullName)) && (0, _debug.assert)('fullName must be a proper full name', this.__registry__.isValidFullName(fullName)));
      return this.__registry__.resolve(fullName);
    },
    register: registryAlias('register'),
    unregister: registryAlias('unregister'),
    hasRegistration: registryAlias('has'),
    registeredOption: registryAlias('getOption'),
    registerOptions: registryAlias('options'),
    registeredOptions: registryAlias('getOptions'),
    registerOptionsForType: registryAlias('optionsForType'),
    registeredOptionsForType: registryAlias('getOptionsForType'),
    /**
      Define a dependency injection onto a specific factory or all factories
      of a type.
         When Ember instantiates a controller, view, or other framework component
      it can attach a dependency to that component. This is often used to
      provide services to a set of framework components.
         An example of providing a session object to all controllers:
         ```javascript
      import { alias } from '@ember/object/computed';
      import Application from '@ember/application';
      import Controller from '@ember/controller';
      import EmberObject from '@ember/object';
         let App = Application.create();
      let Session = EmberObject.extend({ isAuthenticated: false });
         // A factory must be registered before it can be injected
      App.register('session:main', Session);
         // Inject 'session:main' onto all factories of the type 'controller'
      // with the name 'session'
      App.inject('controller', 'session', 'session:main');
         App.IndexController = Controller.extend({
        isLoggedIn: alias('session.isAuthenticated')
      });
      ```
         Injections can also be performed on specific factories.
         ```javascript
      App.inject(<full_name or type>, <property name>, <full_name>)
      App.inject('route', 'source', 'source:main')
      App.inject('route:application', 'email', 'model:email')
      ```
         It is important to note that injections can only be performed on
      classes that are instantiated by Ember itself. Instantiating a class
      directly (via `create` or `new`) bypasses the dependency injection
      system.
         @public
      @method inject
      @param  factoryNameOrType {String}
      @param  property {String}
      @param  injectionName {String}
      @deprecated
    **/
    inject: registryAlias('injection')
  });
  function registryAlias(name) {
    return function () {
      // We need this cast because `Parameters` is deferred so that it is not
      // possible for TS to see it will always produce the right type. However,
      // since `AnyFn` has a rest type, it is allowed. See discussion on [this
      // issue](https://github.com/microsoft/TypeScript/issues/47615).
      return this.__registry__[name](...arguments);
    };
  }
  var _default = RegistryProxyMixin;
  _exports.default = _default;
});
define("@ember/-internals/runtime/lib/mixins/target_action_support", ["exports", "@ember/-internals/environment", "@ember/-internals/metal", "@ember/object/mixin", "@ember/debug"], function (_exports, _environment, _metal, _mixin, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module ember
  */

  var TargetActionSupport = _mixin.default.create({
    target: null,
    action: null,
    actionContext: null,
    actionContextObject: (0, _metal.computed)('actionContext', function () {
      var actionContext = (0, _metal.get)(this, 'actionContext');
      if (typeof actionContext === 'string') {
        var value = (0, _metal.get)(this, actionContext);
        if (value === undefined) {
          value = (0, _metal.get)(_environment.context.lookup, actionContext);
        }
        return value;
      } else {
        return actionContext;
      }
    }),
    /**
    Send an `action` with an `actionContext` to a `target`. The action, actionContext
    and target will be retrieved from properties of the object. For example:
       ```javascript
    import { alias } from '@ember/object/computed';
       App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {
      target: alias('controller'),
      action: 'save',
      actionContext: alias('context'),
      click() {
        this.triggerAction(); // Sends the `save` action, along with the current context
                              // to the current controller
      }
    });
    ```
       The `target`, `action`, and `actionContext` can be provided as properties of
    an optional object argument to `triggerAction` as well.
       ```javascript
    App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {
      click() {
        this.triggerAction({
          action: 'save',
          target: this.get('controller'),
          actionContext: this.get('context')
        }); // Sends the `save` action, along with the current context
            // to the current controller
      }
    });
    ```
       The `actionContext` defaults to the object you are mixing `TargetActionSupport` into.
    But `target` and `action` must be specified either as properties or with the argument
    to `triggerAction`, or a combination:
       ```javascript
    import { alias } from '@ember/object/computed';
       App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {
      target: alias('controller'),
      click() {
        this.triggerAction({
          action: 'save'
        }); // Sends the `save` action, along with a reference to `this`,
            // to the current controller
      }
    });
    ```
       @method triggerAction
    @param opts {Object} (optional, with the optional keys action, target and/or actionContext)
    @return {Boolean} true if the action was sent successfully and did not return false
    @private
    */
    triggerAction(opts) {
      if (opts === void 0) {
        opts = {};
      }
      var {
        action,
        target,
        actionContext
      } = opts;
      action = action || (0, _metal.get)(this, 'action');
      target = target || getTarget(this);
      if (actionContext === undefined) {
        actionContext = (0, _metal.get)(this, 'actionContextObject') || this;
      }
      var context = Array.isArray(actionContext) ? actionContext : [actionContext];
      if (target && action) {
        var ret;
        if (isSendable(target)) {
          ret = target.send(action, ...context);
        } else {
          (true && !(typeof target[action] === 'function') && (0, _debug.assert)(`The action '${action}' did not exist on ${target}`, typeof target[action] === 'function'));
          ret = target[action](...context);
        }
        if (ret !== false) {
          return true;
        }
      }
      return false;
    }
  });
  function isSendable(obj) {
    return obj != null && typeof obj === 'object' && typeof obj.send === 'function';
  }
  function getTarget(instance) {
    var target = (0, _metal.get)(instance, 'target');
    if (target) {
      if (typeof target === 'string') {
        var value = (0, _metal.get)(instance, target);
        if (value === undefined) {
          value = (0, _metal.get)(_environment.context.lookup, target);
        }
        return value;
      } else {
        return target;
      }
    }
    if (instance._target) {
      return instance._target;
    }
    return null;
  }
  if (true /* DEBUG */) {
    Object.seal(TargetActionSupport);
  }
  var _default = TargetActionSupport;
  _exports.default = _default;
});
define("@ember/-internals/string/index", ["exports", "@ember/-internals/utils"], function (_exports, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.classify = classify;
  _exports.dasherize = dasherize;
  /*
    This module exists to separate the @ember/string methods used
    internally in ember-source, from those public methods that are
    now deprecated and to be removed.
  */

  var STRING_DASHERIZE_REGEXP = /[ _]/g;
  var STRING_DASHERIZE_CACHE = new _utils.Cache(1000, key => decamelize(key).replace(STRING_DASHERIZE_REGEXP, '-'));
  var STRING_CLASSIFY_REGEXP_1 = /^(-|_)+(.)?/;
  var STRING_CLASSIFY_REGEXP_2 = /(.)(-|_|\.|\s)+(.)?/g;
  var STRING_CLASSIFY_REGEXP_3 = /(^|\/|\.)([a-z])/g;
  var CLASSIFY_CACHE = new _utils.Cache(1000, str => {
    var replace1 = (_match, _separator, chr) => chr ? `_${chr.toUpperCase()}` : '';
    var replace2 = (_match, initialChar, _separator, chr) => initialChar + (chr ? chr.toUpperCase() : '');
    var parts = str.split('/');
    for (var i = 0; i < parts.length; i++) {
      parts[i] = parts[i].replace(STRING_CLASSIFY_REGEXP_1, replace1).replace(STRING_CLASSIFY_REGEXP_2, replace2);
    }
    return parts.join('/').replace(STRING_CLASSIFY_REGEXP_3, (match /*, separator, chr */) => match.toUpperCase());
  });
  var STRING_DECAMELIZE_REGEXP = /([a-z\d])([A-Z])/g;
  var DECAMELIZE_CACHE = new _utils.Cache(1000, str => str.replace(STRING_DECAMELIZE_REGEXP, '$1_$2').toLowerCase());
  /**
   Defines string helper methods used internally in ember-source.
  
   @class String
   @private
   */
  /**
   Replaces underscores, spaces, or camelCase with dashes.
  
   ```javascript
   import { dasherize } from '@ember/-internals/string';
  
   dasherize('innerHTML');                // 'inner-html'
   dasherize('action_name');              // 'action-name'
   dasherize('css-class-name');           // 'css-class-name'
   dasherize('my favorite items');        // 'my-favorite-items'
   dasherize('privateDocs/ownerInvoice';  // 'private-docs/owner-invoice'
   ```
  
   @method dasherize
   @param {String} str The string to dasherize.
   @return {String} the dasherized string.
   @private
   */
  function dasherize(str) {
    return STRING_DASHERIZE_CACHE.get(str);
  }
  /**
   Returns the UpperCamelCase form of a string.
  
   ```javascript
   import { classify } from '@ember/string';
  
   classify('innerHTML');                   // 'InnerHTML'
   classify('action_name');                 // 'ActionName'
   classify('css-class-name');              // 'CssClassName'
   classify('my favorite items');           // 'MyFavoriteItems'
   classify('private-docs/owner-invoice');  // 'PrivateDocs/OwnerInvoice'
   ```
  
   @method classify
   @param {String} str the string to classify
   @return {String} the classified string
   @private
   */
  function classify(str) {
    return CLASSIFY_CACHE.get(str);
  }
  /**
   Converts a camelized string into all lower case separated by underscores.
  
   ```javascript
   decamelize('innerHTML');          // 'inner_html'
   decamelize('action_name');        // 'action_name'
   decamelize('css-class-name');     // 'css-class-name'
   decamelize('my favorite items');  // 'my favorite items'
   ```
   */
  function decamelize(str) {
    return DECAMELIZE_CACHE.get(str);
  }
});
define("@ember/-internals/utility-types/index", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
});
define("@ember/-internals/utils/index", ["exports", "@glimmer/util", "@ember/debug"], function (_exports, _util, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ROOT = _exports.GUID_KEY = _exports.Cache = void 0;
  _exports.canInvoke = canInvoke;
  _exports.checkHasSuper = void 0;
  _exports.dictionary = makeDictionary;
  _exports.enumerableSymbol = enumerableSymbol;
  _exports.generateGuid = generateGuid;
  _exports.getDebugName = void 0;
  _exports.getName = getName;
  _exports.guidFor = guidFor;
  _exports.intern = intern;
  _exports.isInternalSymbol = isInternalSymbol;
  _exports.isObject = isObject;
  _exports.isProxy = isProxy;
  _exports.lookupDescriptor = lookupDescriptor;
  _exports.observerListenerMetaFor = observerListenerMetaFor;
  _exports.setListeners = setListeners;
  _exports.setName = setName;
  _exports.setObservers = setObservers;
  _exports.setProxy = setProxy;
  _exports.teardownMandatorySetter = _exports.symbol = _exports.setupMandatorySetter = _exports.setWithMandatorySetter = void 0;
  _exports.toString = toString;
  _exports.uuid = uuid;
  _exports.wrap = wrap;
  /**
    Strongly hint runtimes to intern the provided string.
  
    When do I need to use this function?
  
    For the most part, never. Pre-mature optimization is bad, and often the
    runtime does exactly what you need it to, and more often the trade-off isn't
    worth it.
  
    Why?
  
    Runtimes store strings in at least 2 different representations:
    Ropes and Symbols (interned strings). The Rope provides a memory efficient
    data-structure for strings created from concatenation or some other string
    manipulation like splitting.
  
    Unfortunately checking equality of different ropes can be quite costly as
    runtimes must resort to clever string comparison algorithms. These
    algorithms typically cost in proportion to the length of the string.
    Luckily, this is where the Symbols (interned strings) shine. As Symbols are
    unique by their string content, equality checks can be done by pointer
    comparison.
  
    How do I know if my string is a rope or symbol?
  
    Typically (warning general sweeping statement, but truthy in runtimes at
    present) static strings created as part of the JS source are interned.
    Strings often used for comparisons can be interned at runtime if some
    criteria are met.  One of these criteria can be the size of the entire rope.
    For example, in chrome 38 a rope longer then 12 characters will not
    intern, nor will segments of that rope.
  
    Some numbers: http://jsperf.com/eval-vs-keys/8
  
    Known Trick™
  
    @private
    @return {String} interned version of the provided string
  */
  function intern(str) {
    var obj = Object.create(null);
    obj[str] = 1;
    for (var key in obj) {
      if (key === str) {
        return key;
      }
    }
    return str;
  }

  /**
    Returns whether Type(value) is Object.
  
    Useful for checking whether a value is a valid WeakMap key.
  
    Refs: https://tc39.github.io/ecma262/#sec-typeof-operator-runtime-semantics-evaluation
          https://tc39.github.io/ecma262/#sec-weakmap.prototype.set
  
    @private
    @function isObject
  */
  function isObject(value) {
    return value !== null && (typeof value === 'object' || typeof value === 'function');
  }

  /**
   @module @ember/object
  */
  /**
   @private
   @return {Number} the uuid
   */
  var _uuid = 0;
  /**
   Generates a universally unique identifier. This method
   is used internally by Ember for assisting with
   the generation of GUID's and other unique identifiers.
  
   @public
   @return {Number} [description]
   */
  function uuid() {
    return ++_uuid;
  }
  /**
   Prefix used for guids through out Ember.
   @private
   @property GUID_PREFIX
   @for Ember
   @type String
   @final
   */
  var GUID_PREFIX = 'ember';
  // Used for guid generation...
  var OBJECT_GUIDS = new WeakMap();
  var NON_OBJECT_GUIDS = new Map();
  /**
    A unique key used to assign guids and other private metadata to objects.
    If you inspect an object in your browser debugger you will often see these.
    They can be safely ignored.
  
    On browsers that support it, these properties are added with enumeration
    disabled so they won't show up when you iterate over your properties.
  
    @private
    @property GUID_KEY
    @for Ember
    @type String
    @final
  */
  var GUID_KEY = intern(`__ember${Date.now()}`);
  /**
    Generates a new guid, optionally saving the guid to the object that you
    pass in. You will rarely need to use this method. Instead you should
    call `guidFor(obj)`, which return an existing guid if available.
  
    @private
    @method generateGuid
    @static
    @for @ember/object/internals
    @param {Object} [obj] Object the guid will be used for. If passed in, the guid will
      be saved on the object and reused whenever you pass the same object
      again.
  
      If no object is passed, just generate a new guid.
    @param {String} [prefix] Prefix to place in front of the guid. Useful when you want to
      separate the guid into separate namespaces.
    @return {String} the guid
  */
  _exports.GUID_KEY = GUID_KEY;
  function generateGuid(obj, prefix) {
    if (prefix === void 0) {
      prefix = GUID_PREFIX;
    }
    var guid = prefix + uuid().toString();
    if (isObject(obj)) {
      OBJECT_GUIDS.set(obj, guid);
    }
    return guid;
  }
  /**
    Returns a unique id for the object. If the object does not yet have a guid,
    one will be assigned to it. You can call this on any object,
    `EmberObject`-based or not.
  
    You can also use this method on DOM Element objects.
  
    @public
    @static
    @method guidFor
    @for @ember/object/internals
    @param {Object} obj any object, string, number, Element, or primitive
    @return {String} the unique guid for this instance.
  */
  function guidFor(value) {
    var guid;
    if (isObject(value)) {
      guid = OBJECT_GUIDS.get(value);
      if (guid === undefined) {
        guid = `${GUID_PREFIX}${uuid()}`;
        OBJECT_GUIDS.set(value, guid);
      }
    } else {
      guid = NON_OBJECT_GUIDS.get(value);
      if (guid === undefined) {
        var type = typeof value;
        if (type === 'string') {
          guid = `st${uuid()}`;
        } else if (type === 'number') {
          guid = `nu${uuid()}`;
        } else if (type === 'symbol') {
          guid = `sy${uuid()}`;
        } else {
          guid = `(${value})`;
        }
        NON_OBJECT_GUIDS.set(value, guid);
      }
    }
    return guid;
  }
  var GENERATED_SYMBOLS = [];
  function isInternalSymbol(possibleSymbol) {
    return GENERATED_SYMBOLS.indexOf(possibleSymbol) !== -1;
  }
  // Some legacy symbols still need to be enumerable for a variety of reasons.
  // This code exists for that, and as a fallback in IE11. In general, prefer
  // `symbol` below when creating a new symbol.
  function enumerableSymbol(debugName) {
    // TODO: Investigate using platform symbols, but we do not
    // want to require non-enumerability for this API, which
    // would introduce a large cost.
    var id = GUID_KEY + Math.floor(Math.random() * Date.now()).toString();
    var symbol = intern(`__${debugName}${id}__`);
    if (true /* DEBUG */) {
      GENERATED_SYMBOLS.push(symbol);
    }
    return symbol;
  }
  var symbol = Symbol;

  // the delete is meant to hint at runtimes that this object should remain in
  // dictionary mode. This is clearly a runtime specific hack, but currently it
  // appears worthwhile in some usecases. Please note, these deletes do increase
  // the cost of creation dramatically over a plain Object.create. And as this
  // only makes sense for long-lived dictionaries that aren't instantiated often.
  _exports.symbol = symbol;
  function makeDictionary(parent) {
    var dict = Object.create(parent);
    dict['_dict'] = null;
    delete dict['_dict'];
    return dict;
  }
  var getDebugName;
  if (true /* DEBUG */) {
    var getFunctionName = fn => {
      var functionName = fn.name;
      if (functionName === undefined) {
        var match = Function.prototype.toString.call(fn).match(/function (\w+)\s*\(/);
        functionName = match && match[1] || '';
      }
      return functionName.replace(/^bound /, '');
    };
    var getObjectName = obj => {
      var name;
      var className;
      if (obj.constructor && obj.constructor !== Object) {
        className = getFunctionName(obj.constructor);
      }
      if ('toString' in obj && obj.toString !== Object.prototype.toString && obj.toString !== Function.prototype.toString) {
        name = obj.toString();
      }
      // If the class has a decent looking name, and the `toString` is one of the
      // default Ember toStrings, replace the constructor portion of the toString
      // with the class name. We check the length of the class name to prevent doing
      // this when the value is minified.
      if (name && name.match(/<.*:ember\d+>/) && className && className[0] !== '_' && className.length > 2 && className !== 'Class') {
        return name.replace(/<.*:/, `<${className}:`);
      }
      return name || className;
    };
    var getPrimitiveName = value => {
      return String(value);
    };
    getDebugName = value => {
      if (typeof value === 'function') {
        return getFunctionName(value) || `(unknown function)`;
      } else if (typeof value === 'object' && value !== null) {
        return getObjectName(value) || `(unknown object)`;
      } else {
        return getPrimitiveName(value);
      }
    };
  }
  var getDebugName$1 = getDebugName;
  _exports.getDebugName = getDebugName$1;
  var HAS_SUPER_PATTERN = /\.(_super|call\(this|apply\(this)/;
  var fnToString = Function.prototype.toString;
  var checkHasSuper = (() => {
    var sourceAvailable = fnToString.call(function () {
      return this;
    }).indexOf('return this') > -1;
    if (sourceAvailable) {
      return function checkHasSuper(func) {
        return HAS_SUPER_PATTERN.test(fnToString.call(func));
      };
    }
    return function checkHasSuper() {
      return true;
    };
  })();
  _exports.checkHasSuper = checkHasSuper;
  var HAS_SUPER_MAP = new WeakMap();
  var ROOT = Object.freeze(function () {});
  _exports.ROOT = ROOT;
  HAS_SUPER_MAP.set(ROOT, false);
  function hasSuper(func) {
    var hasSuper = HAS_SUPER_MAP.get(func);
    if (hasSuper === undefined) {
      hasSuper = checkHasSuper(func);
      HAS_SUPER_MAP.set(func, hasSuper);
    }
    return hasSuper;
  }
  class ObserverListenerMeta {
    constructor() {
      this.listeners = undefined;
      this.observers = undefined;
    }
  }
  var OBSERVERS_LISTENERS_MAP = new WeakMap();
  function createObserverListenerMetaFor(fn) {
    var meta = OBSERVERS_LISTENERS_MAP.get(fn);
    if (meta === undefined) {
      meta = new ObserverListenerMeta();
      OBSERVERS_LISTENERS_MAP.set(fn, meta);
    }
    return meta;
  }
  function observerListenerMetaFor(fn) {
    return OBSERVERS_LISTENERS_MAP.get(fn);
  }
  function setObservers(func, observers) {
    var meta = createObserverListenerMetaFor(func);
    meta.observers = observers;
  }
  function setListeners(func, listeners) {
    var meta = createObserverListenerMetaFor(func);
    meta.listeners = listeners;
  }
  var IS_WRAPPED_FUNCTION_SET = new _util._WeakSet();
  /**
    Wraps the passed function so that `this._super` will point to the superFunc
    when the function is invoked. This is the primitive we use to implement
    calls to super.
  
    @private
    @method wrap
    @for Ember
    @param {Function} func The function to call
    @param {Function} superFunc The super function.
    @return {Function} wrapped function.
  */
  function wrap(func, superFunc) {
    if (!hasSuper(func)) {
      return func;
    }
    // ensure an unwrapped super that calls _super is wrapped with a terminal _super
    if (!IS_WRAPPED_FUNCTION_SET.has(superFunc) && hasSuper(superFunc)) {
      return _wrap(func, _wrap(superFunc, ROOT));
    }
    return _wrap(func, superFunc);
  }
  function _wrap(func, superFunc) {
    function superWrapper() {
      var orig = this._super;
      this._super = superFunc;
      var ret = func.apply(this, arguments);
      this._super = orig;
      return ret;
    }
    IS_WRAPPED_FUNCTION_SET.add(superWrapper);
    var meta = OBSERVERS_LISTENERS_MAP.get(func);
    if (meta !== undefined) {
      OBSERVERS_LISTENERS_MAP.set(superWrapper, meta);
    }
    return superWrapper;
  }
  function lookupDescriptor(obj, keyName) {
    var current = obj;
    do {
      var descriptor = Object.getOwnPropertyDescriptor(current, keyName);
      if (descriptor !== undefined) {
        return descriptor;
      }
      current = Object.getPrototypeOf(current);
    } while (current !== null);
    return null;
  }

  /**
    Checks to see if the `methodName` exists on the `obj`.
  
    ```javascript
    let foo = { bar: function() { return 'bar'; }, baz: null };
  
    Ember.canInvoke(foo, 'bar'); // true
    Ember.canInvoke(foo, 'baz'); // false
    Ember.canInvoke(foo, 'bat'); // false
    ```
  
    @method canInvoke
    @for Ember
    @param {Object} obj The object to check for the method
    @param {String} methodName The method name to check for
    @return {Boolean}
    @private
  */
  function canInvoke(obj, methodName) {
    return obj != null && typeof obj[methodName] === 'function';
  }
  /**
    @module @ember/utils
  */

  var NAMES = new WeakMap();
  function setName(obj, name) {
    if (isObject(obj)) NAMES.set(obj, name);
  }
  function getName(obj) {
    return NAMES.get(obj);
  }
  var objectToString = Object.prototype.toString;
  function isNone(obj) {
    return obj === null || obj === undefined;
  }
  /*
   A `toString` util function that supports objects without a `toString`
   method, e.g. an object created with `Object.create(null)`.
  */
  function toString(obj) {
    if (typeof obj === 'string') {
      return obj;
    }
    if (null === obj) return 'null';
    if (undefined === obj) return 'undefined';
    if (Array.isArray(obj)) {
      // Reimplement Array.prototype.join according to spec (22.1.3.13)
      // Changing ToString(element) with this safe version of ToString.
      var r = '';
      for (var k = 0; k < obj.length; k++) {
        if (k > 0) {
          r += ',';
        }
        if (!isNone(obj[k])) {
          r += toString(obj[k]);
        }
      }
      return r;
    }
    if (typeof obj.toString === 'function') {
      return obj.toString();
    }
    return objectToString.call(obj);
  }
  var PROXIES = new _util._WeakSet();
  function isProxy(value) {
    if (isObject(value)) {
      return PROXIES.has(value);
    }
    return false;
  }
  function setProxy(object) {
    if (isObject(object)) {
      PROXIES.add(object);
    }
  }
  class Cache {
    constructor(limit, func, store) {
      if (store === void 0) {
        store = new Map();
      }
      this.limit = limit;
      this.func = func;
      this.store = store;
      this.size = 0;
      this.misses = 0;
      this.hits = 0;
    }
    get(key) {
      if (this.store.has(key)) {
        this.hits++;
        // SAFETY: we know the value is present because `.has(key)` was `true`.
        return this.store.get(key);
      } else {
        this.misses++;
        return this.set(key, this.func(key));
      }
    }
    set(key, value) {
      if (this.limit > this.size) {
        this.size++;
        this.store.set(key, value);
      }
      return value;
    }
    purge() {
      this.store.clear();
      this.size = 0;
      this.hits = 0;
      this.misses = 0;
    }
  }
  _exports.Cache = Cache;
  var setupMandatorySetter;
  _exports.setupMandatorySetter = setupMandatorySetter;
  var teardownMandatorySetter;
  _exports.teardownMandatorySetter = teardownMandatorySetter;
  var setWithMandatorySetter;
  _exports.setWithMandatorySetter = setWithMandatorySetter;
  function isElementKey(key) {
    return typeof key === 'number' ? isPositiveInt(key) : isStringInt(key);
  }
  function isStringInt(str) {
    var num = parseInt(str, 10);
    return isPositiveInt(num) && str === String(num);
  }
  function isPositiveInt(num) {
    return num >= 0 && num % 1 === 0;
  }
  if (true /* DEBUG */) {
    var SEEN_TAGS = new _util._WeakSet();
    var MANDATORY_SETTERS = new WeakMap();
    var _propertyIsEnumerable = function (obj, key) {
      return Object.prototype.propertyIsEnumerable.call(obj, key);
    };
    _exports.setupMandatorySetter = setupMandatorySetter = function (tag, obj, keyName) {
      if (SEEN_TAGS.has(tag)) {
        return;
      }
      SEEN_TAGS.add(tag);
      if (Array.isArray(obj) && isElementKey(keyName)) {
        return;
      }
      var desc = lookupDescriptor(obj, keyName) || {};
      if (desc.get || desc.set) {
        // if it has a getter or setter, we can't install the mandatory setter.
        // native setters are allowed, we have to assume that they will resolve
        // to tracked properties.
        return;
      }
      if (desc && (!desc.configurable || !desc.writable)) {
        // if it isn't writable anyways, so we shouldn't provide the setter.
        // if it isn't configurable, we can't overwrite it anyways.
        return;
      }
      var setters = MANDATORY_SETTERS.get(obj);
      if (setters === undefined) {
        setters = {};
        MANDATORY_SETTERS.set(obj, setters);
      }
      desc.hadOwnProperty = Object.hasOwnProperty.call(obj, keyName);
      setters[keyName] = desc;
      Object.defineProperty(obj, keyName, {
        configurable: true,
        enumerable: _propertyIsEnumerable(obj, keyName),
        get() {
          if (desc.get) {
            return desc.get.call(this);
          } else {
            return desc.value;
          }
        },
        set(value) {
          (true && !(false) && (0, _debug.assert)(`You attempted to update ${this}.${String(keyName)} to "${String(value)}", but it is being tracked by a tracking context, such as a template, computed property, or observer. In order to make sure the context updates properly, you must invalidate the property when updating it. You can mark the property as \`@tracked\`, or use \`@ember/object#set\` to do this.`));
        }
      });
    };
    _exports.teardownMandatorySetter = teardownMandatorySetter = function (obj, keyName) {
      var setters = MANDATORY_SETTERS.get(obj);
      if (setters !== undefined && setters[keyName] !== undefined) {
        Object.defineProperty(obj, keyName, setters[keyName]);
        delete setters[keyName];
      }
    };
    _exports.setWithMandatorySetter = setWithMandatorySetter = function (obj, keyName, value) {
      var setters = MANDATORY_SETTERS.get(obj);
      if (setters !== undefined && setters[keyName] !== undefined) {
        var setter = setters[keyName];
        if (setter.set) {
          setter.set.call(obj, value);
        } else {
          setter.value = value;
          // If the object didn't have own property before, it would have changed
          // the enumerability after setting the value the first time.
          if (!setter.hadOwnProperty) {
            var desc = lookupDescriptor(obj, keyName);
            desc.enumerable = true;
            Object.defineProperty(obj, keyName, desc);
          }
        }
      } else {
        obj[keyName] = value;
      }
    };
  }

  /*
   This package will be eagerly parsed and should have no dependencies on external
   packages.
  
   It is intended to be used to share utility methods that will be needed
   by every Ember application (and is **not** a dumping ground of useful utilities).
  
   Utility methods that are needed in < 80% of cases should be placed
   elsewhere (so they can be lazily evaluated / parsed).
  */
});
define("@ember/-internals/views/index", ["exports", "@ember/-internals/views/lib/system/utils", "@ember/-internals/views/lib/system/event_dispatcher", "@ember/-internals/views/lib/component_lookup", "@ember/-internals/views/lib/views/core_view", "@ember/-internals/views/lib/mixins/class_names_support", "@ember/-internals/views/lib/mixins/child_views_support", "@ember/-internals/views/lib/mixins/view_state_support", "@ember/-internals/views/lib/mixins/view_support", "@ember/-internals/views/lib/mixins/action_support", "@ember/-internals/views/lib/compat/attrs", "@ember/-internals/views/lib/system/action_manager"], function (_exports, _utils, _event_dispatcher, _component_lookup, _core_view, _class_names_support, _child_views_support, _view_state_support, _view_support, _action_support, _attrs, _action_manager) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "ActionManager", {
    enumerable: true,
    get: function () {
      return _action_manager.default;
    }
  });
  Object.defineProperty(_exports, "ActionSupport", {
    enumerable: true,
    get: function () {
      return _action_support.default;
    }
  });
  Object.defineProperty(_exports, "ChildViewsSupport", {
    enumerable: true,
    get: function () {
      return _child_views_support.default;
    }
  });
  Object.defineProperty(_exports, "ClassNamesSupport", {
    enumerable: true,
    get: function () {
      return _class_names_support.default;
    }
  });
  Object.defineProperty(_exports, "ComponentLookup", {
    enumerable: true,
    get: function () {
      return _component_lookup.default;
    }
  });
  Object.defineProperty(_exports, "CoreView", {
    enumerable: true,
    get: function () {
      return _core_view.default;
    }
  });
  Object.defineProperty(_exports, "EventDispatcher", {
    enumerable: true,
    get: function () {
      return _event_dispatcher.default;
    }
  });
  Object.defineProperty(_exports, "MUTABLE_CELL", {
    enumerable: true,
    get: function () {
      return _attrs.MUTABLE_CELL;
    }
  });
  Object.defineProperty(_exports, "ViewMixin", {
    enumerable: true,
    get: function () {
      return _view_support.default;
    }
  });
  Object.defineProperty(_exports, "ViewStateSupport", {
    enumerable: true,
    get: function () {
      return _view_state_support.default;
    }
  });
  Object.defineProperty(_exports, "addChildView", {
    enumerable: true,
    get: function () {
      return _utils.addChildView;
    }
  });
  Object.defineProperty(_exports, "clearElementView", {
    enumerable: true,
    get: function () {
      return _utils.clearElementView;
    }
  });
  Object.defineProperty(_exports, "clearViewElement", {
    enumerable: true,
    get: function () {
      return _utils.clearViewElement;
    }
  });
  Object.defineProperty(_exports, "constructStyleDeprecationMessage", {
    enumerable: true,
    get: function () {
      return _utils.constructStyleDeprecationMessage;
    }
  });
  Object.defineProperty(_exports, "getChildViews", {
    enumerable: true,
    get: function () {
      return _utils.getChildViews;
    }
  });
  Object.defineProperty(_exports, "getElementView", {
    enumerable: true,
    get: function () {
      return _utils.getElementView;
    }
  });
  Object.defineProperty(_exports, "getRootViews", {
    enumerable: true,
    get: function () {
      return _utils.getRootViews;
    }
  });
  Object.defineProperty(_exports, "getViewBoundingClientRect", {
    enumerable: true,
    get: function () {
      return _utils.getViewBoundingClientRect;
    }
  });
  Object.defineProperty(_exports, "getViewBounds", {
    enumerable: true,
    get: function () {
      return _utils.getViewBounds;
    }
  });
  Object.defineProperty(_exports, "getViewClientRects", {
    enumerable: true,
    get: function () {
      return _utils.getViewClientRects;
    }
  });
  Object.defineProperty(_exports, "getViewElement", {
    enumerable: true,
    get: function () {
      return _utils.getViewElement;
    }
  });
  Object.defineProperty(_exports, "getViewId", {
    enumerable: true,
    get: function () {
      return _utils.getViewId;
    }
  });
  Object.defineProperty(_exports, "isSimpleClick", {
    enumerable: true,
    get: function () {
      return _utils.isSimpleClick;
    }
  });
  Object.defineProperty(_exports, "setElementView", {
    enumerable: true,
    get: function () {
      return _utils.setElementView;
    }
  });
  Object.defineProperty(_exports, "setViewElement", {
    enumerable: true,
    get: function () {
      return _utils.setViewElement;
    }
  });
});
define("@ember/-internals/views/lib/compat/attrs", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.MUTABLE_CELL = void 0;
  var MUTABLE_CELL = Symbol('MUTABLE_CELL');
  _exports.MUTABLE_CELL = MUTABLE_CELL;
});
define("@ember/-internals/views/lib/compat/fallback-view-registry", ["exports", "@ember/-internals/utils"], function (_exports, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = (0, _utils.dictionary)(null);
  _exports.default = _default;
});
define("@ember/-internals/views/lib/component_lookup", ["exports", "@ember/object"], function (_exports, _object) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _object.default.extend({
    componentFor(name, owner) {
      var fullName = `component:${name}`;
      return owner.factoryFor(fullName);
    },
    layoutFor(name, owner, options) {
      var templateFullName = `template:components/${name}`;
      return owner.lookup(templateFullName, options);
    }
  });
  _exports.default = _default;
});
define("@ember/-internals/views/lib/mixins/action_support", ["exports", "@ember/-internals/metal", "@ember/object/mixin", "@ember/debug"], function (_exports, _metal, _mixin, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
   @module ember
  */

  var ActionSupport = _mixin.default.create({
    send(actionName) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      (true && !(!this.isDestroying && !this.isDestroyed) && (0, _debug.assert)(`Attempted to call .send() with the action '${actionName}' on the destroyed object '${this}'.`, !this.isDestroying && !this.isDestroyed));
      var action = this.actions && this.actions[actionName];
      if (action) {
        var shouldBubble = action.apply(this, args) === true;
        if (!shouldBubble) {
          return;
        }
      }
      var target = (0, _metal.get)(this, 'target');
      if (target) {
        (true && !(typeof target.send === 'function') && (0, _debug.assert)(`The \`target\` for ${this} (${target}) does not have a \`send\` method`, typeof target.send === 'function'));
        target.send(...arguments);
      } else {
        (true && !(action) && (0, _debug.assert)(`${(0, _debug.inspect)(this)} had no action handler for: ${actionName}`, action));
      }
    }
  });
  var _default = ActionSupport;
  _exports.default = _default;
});
define("@ember/-internals/views/lib/mixins/child_views_support", ["exports", "@ember/-internals/metal", "@ember/object/mixin", "@ember/-internals/views/lib/system/utils"], function (_exports, _metal, _mixin, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var ChildViewsSupport = _mixin.default.create({
    /**
      Array of child views. You should never edit this array directly.
         @property childViews
      @type Array
      @default []
      @private
    */
    childViews: (0, _metal.nativeDescDecorator)({
      configurable: false,
      enumerable: false,
      get() {
        return (0, _utils.getChildViews)(this);
      }
    }),
    appendChild(view) {
      (0, _utils.addChildView)(this, view);
    }
  });
  var _default = ChildViewsSupport;
  _exports.default = _default;
});
define("@ember/-internals/views/lib/mixins/class_names_support", ["exports", "@ember/-internals/metal", "@ember/object/mixin", "@ember/debug"], function (_exports, _metal, _mixin, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module ember
  */

  var EMPTY_ARRAY = Object.freeze([]);
  var ClassNamesSupport = _mixin.default.create({
    concatenatedProperties: ['classNames', 'classNameBindings'],
    init() {
      this._super(...arguments);
      (true && !((0, _metal.descriptorForProperty)(this, 'classNameBindings') === undefined && Array.isArray(this.classNameBindings)) && (0, _debug.assert)(`Only arrays are allowed for 'classNameBindings'`, (0, _metal.descriptorForProperty)(this, 'classNameBindings') === undefined && Array.isArray(this.classNameBindings)));
      (true && !((0, _metal.descriptorForProperty)(this, 'classNames') === undefined && Array.isArray(this.classNames)) && (0, _debug.assert)(`Only arrays of static class strings are allowed for 'classNames'. For dynamic classes, use 'classNameBindings'.`, (0, _metal.descriptorForProperty)(this, 'classNames') === undefined && Array.isArray(this.classNames)));
    },
    /**
      Standard CSS class names to apply to the view's outer element. This
      property automatically inherits any class names defined by the view's
      superclasses as well.
         @property classNames
      @type Array
      @default ['ember-view']
      @public
    */
    classNames: EMPTY_ARRAY,
    /**
      A list of properties of the view to apply as class names. If the property
      is a string value, the value of that string will be applied as a class
      name.
         ```javascript
      // Applies the 'high' class to the view element
      import Component from '@ember/component';
      Component.extend({
        classNameBindings: ['priority'],
        priority: 'high'
      });
      ```
         If the value of the property is a Boolean, the name of that property is
      added as a dasherized class name.
         ```javascript
      // Applies the 'is-urgent' class to the view element
      import Component from '@ember/component';
      Component.extend({
        classNameBindings: ['isUrgent'],
        isUrgent: true
      });
      ```
         If you would prefer to use a custom value instead of the dasherized
      property name, you can pass a binding like this:
         ```javascript
      // Applies the 'urgent' class to the view element
      import Component from '@ember/component';
      Component.extend({
        classNameBindings: ['isUrgent:urgent'],
        isUrgent: true
      });
      ```
         If you would like to specify a class that should only be added when the
      property is false, you can declare a binding like this:
         ```javascript
      // Applies the 'disabled' class to the view element
      import Component from '@ember/component';
      Component.extend({
        classNameBindings: ['isEnabled::disabled'],
        isEnabled: false
      });
      ```
         This list of properties is inherited from the component's superclasses as well.
         @property classNameBindings
      @type Array
      @default []
      @public
    */
    classNameBindings: EMPTY_ARRAY
  });
  var _default = ClassNamesSupport;
  _exports.default = _default;
});
define("@ember/-internals/views/lib/mixins/view_state_support", ["exports", "@ember/object/mixin"], function (_exports, _mixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module ember
  */

  var ViewStateSupport = _mixin.default.create({
    _transitionTo(state) {
      var priorState = this._currentState;
      var currentState = this._currentState = this._states[state];
      this._state = state;
      if (priorState && priorState.exit) {
        priorState.exit(this);
      }
      if (currentState.enter) {
        currentState.enter(this);
      }
    }
  });
  var _default = ViewStateSupport;
  _exports.default = _default;
});
define("@ember/-internals/views/lib/mixins/view_support", ["exports", "@ember/-internals/utils", "@ember/-internals/metal", "@ember/object/mixin", "@ember/debug", "@ember/-internals/browser-environment", "@ember/-internals/views/lib/system/utils"], function (_exports, _utils, _metal, _mixin, _debug, _browserEnvironment, _utils2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  function K() {
    return this;
  }
  var ViewMixin = _mixin.default.create({
    /**
     A list of properties of the view to apply as attributes. If the property
     is a string value, the value of that string will be applied as the value
     for an attribute of the property's name.
        The following example creates a tag like `<div priority="high" />`.
        ```app/components/my-component.js
     import Component from '@ember/component';
        export default Component.extend({
        attributeBindings: ['priority'],
        priority: 'high'
      });
     ```
        If the value of the property is a Boolean, the attribute is treated as
     an HTML Boolean attribute. It will be present if the property is `true`
     and omitted if the property is `false`.
        The following example creates markup like `<div visible />`.
        ```app/components/my-component.js
     import Component from '@ember/component';
        export default Component.extend({
        attributeBindings: ['visible'],
        visible: true
      });
     ```
        If you would prefer to use a custom value instead of the property name,
     you can create the same markup as the last example with a binding like
     this:
        ```app/components/my-component.js
     import Component from '@ember/component';
        export default Component.extend({
        attributeBindings: ['isVisible:visible'],
        isVisible: true
      });
     ```
        This list of attributes is inherited from the component's superclasses,
     as well.
        @property attributeBindings
     @type Array
     @default []
     @public
     */
    concatenatedProperties: ['attributeBindings'],
    // ..........................................................
    // TEMPLATE SUPPORT
    //
    /**
     Return the nearest ancestor that is an instance of the provided
     class or mixin.
        @method nearestOfType
     @param {Class,Mixin} klass Subclass of Ember.View (or Ember.View itself),
     or an instance of Mixin.
     @return Ember.View
     @deprecated use `yield` and contextual components for composition instead.
     @private
     */
    nearestOfType(klass) {
      var view = this.parentView;
      var isOfType = klass instanceof _mixin.default ? view => klass.detect(view) : view => klass.detect(view.constructor);
      while (view) {
        if (isOfType(view)) {
          return view;
        }
        view = view.parentView;
      }
      return;
    },
    /**
     Return the nearest ancestor that has a given property.
        @method nearestWithProperty
     @param {String} property A property name
     @return Ember.View
     @deprecated use `yield` and contextual components for composition instead.
     @private
     */
    nearestWithProperty(property) {
      var view = this.parentView;
      while (view) {
        if (property in view) {
          return view;
        }
        view = view.parentView;
      }
    },
    /**
     Renders the view again. This will work regardless of whether the
     view is already in the DOM or not. If the view is in the DOM, the
     rendering process will be deferred to give bindings a chance
     to synchronize.
        If children were added during the rendering process using `appendChild`,
     `rerender` will remove them, because they will be added again
     if needed by the next `render`.
        In general, if the display of your view changes, you should modify
     the DOM element directly instead of manually calling `rerender`, which can
     be slow.
        @method rerender
     @public
     */
    rerender() {
      return this._currentState.rerender(this);
    },
    // ..........................................................
    // ELEMENT SUPPORT
    //
    /**
     Returns the current DOM element for the view.
         @property element
      @type DOMElement
      @public
    */
    element: (0, _metal.nativeDescDecorator)({
      configurable: false,
      enumerable: false,
      get() {
        return this.renderer.getElement(this);
      }
    }),
    /**
     Appends the view's element to the specified parent element.
        Note that this method just schedules the view to be appended; the DOM
     element will not be appended to the given element until all bindings have
     finished synchronizing.
        This is not typically a function that you will need to call directly when
     building your application. If you do need to use `appendTo`, be sure that
     the target element you are providing is associated with an `Application`
     and does not have an ancestor element that is associated with an Ember view.
        @method appendTo
     @param {String|DOMElement} A selector, element, HTML string
     @return {Ember.View} receiver
     @private
     */
    appendTo(selector) {
      var target;
      if (_browserEnvironment.hasDOM) {
        (true && !(typeof selector === 'string' || selector instanceof Element) && (0, _debug.assert)(`Expected a selector or instance of Element`, typeof selector === 'string' || selector instanceof Element));
        target = typeof selector === 'string' ? document.querySelector(selector) : selector;
        (true && !(target) && (0, _debug.assert)(`You tried to append to (${selector}) but that isn't in the DOM`, target));
        (true && !(!(0, _utils2.matches)(target, '.ember-view')) && (0, _debug.assert)('You cannot append to an existing Ember.View.', !(0, _utils2.matches)(target, '.ember-view')));
        (true && !((() => {
          var node = target.parentNode;
          while (node instanceof Element) {
            if ((0, _utils2.matches)(node, '.ember-view')) {
              return false;
            }
            node = node.parentNode;
          }
          return true;
        })()) && (0, _debug.assert)('You cannot append to an existing Ember.View.', (() => {
          var node = target.parentNode;
          while (node instanceof Element) {
            if ((0, _utils2.matches)(node, '.ember-view')) {
              return false;
            }
            node = node.parentNode;
          }
          return true;
        })()));
      } else {
        target = selector;
        (true && !(typeof target !== 'string') && (0, _debug.assert)(`You tried to append to a selector string (${selector}) in an environment without a DOM`, typeof target !== 'string'));
        (true && !(typeof target.appendChild === 'function') && (0, _debug.assert)(`You tried to append to a non-Element (${selector}) in an environment without a DOM`, typeof target.appendChild === 'function'));
      }
      // SAFETY: SimpleElement is supposed to be a subset of Element so this _should_ be safe.
      // However, the types are more specific in some places which necessitates the `as`.
      this.renderer.appendTo(this, target);
      return this;
    },
    /**
     Appends the view's element to the document body. If the view does
     not have an HTML representation yet
     the element will be generated automatically.
        If your application uses the `rootElement` property, you must append
     the view within that element. Rendering views outside of the `rootElement`
     is not supported.
        Note that this method just schedules the view to be appended; the DOM
     element will not be appended to the document body until all bindings have
     finished synchronizing.
        @method append
     @return {Ember.View} receiver
     @private
     */
    append() {
      return this.appendTo(document.body);
    },
    /**
     The HTML `id` of the view's element in the DOM. You can provide this
     value yourself but it must be unique (just as in HTML):
        ```handlebars
     {{my-component elementId="a-really-cool-id"}}
     ```
        If not manually set a default value will be provided by the framework.
        Once rendered an element's `elementId` is considered immutable and you
     should never change it. If you need to compute a dynamic value for the
     `elementId`, you should do this when the component or element is being
     instantiated:
        ```app/components/my-component.js
     import Component from '@ember/component';
        export default Component.extend({
        init() {
          this._super(...arguments);
          let index = this.get('index');
          this.set('elementId', 'component-id' + index);
        }
      });
     ```
        @property elementId
     @type String
     @public
     */
    elementId: null,
    /**
     Called when a view is going to insert an element into the DOM.
        @event willInsertElement
     @public
     */
    willInsertElement: K,
    /**
     Called when the element of the view has been inserted into the DOM.
     Override this function to do any set up that requires an element
     in the document body.
        When a view has children, didInsertElement will be called on the
     child view(s) first and on itself afterwards.
        @event didInsertElement
     @public
     */
    didInsertElement: K,
    /**
     Called when the view is about to rerender, but before anything has
     been torn down. This is a good opportunity to tear down any manual
     observers you have installed based on the DOM state
        @event willClearRender
     @public
     */
    willClearRender: K,
    /**
     You must call `destroy` on a view to destroy the view (and all of its
     child views). This will remove the view from any parent node, then make
     sure that the DOM element managed by the view can be released by the
     memory manager.
        @method destroy
     @private
     */
    destroy() {
      this._super(...arguments);
      this._currentState.destroy(this);
    },
    /**
     Called when the element of the view is going to be destroyed. Override
     this function to do any teardown that requires an element, like removing
     event listeners.
        Please note: any property changes made during this event will have no
     effect on object observers.
        @event willDestroyElement
     @public
     */
    willDestroyElement: K,
    /**
     Called after the element of the view is destroyed.
        @event willDestroyElement
     @public
     */
    didDestroyElement: K,
    /**
     Called when the parentView property has changed.
        @event parentViewDidChange
     @private
     */
    parentViewDidChange: K,
    // ..........................................................
    // STANDARD RENDER PROPERTIES
    //
    /**
     Tag name for the view's outer element. The tag name is only used when an
     element is first created. If you change the `tagName` for an element, you
     must destroy and recreate the view element.
        By default, the render buffer will use a `<div>` tag for views.
        If the tagName is `''`, the view will be tagless, with no outer element.
     Component properties that depend on the presence of an outer element, such
     as `classNameBindings` and `attributeBindings`, do not work with tagless
     components. Tagless components cannot implement methods to handle events,
     and their `element` property has a `null` value.
        @property tagName
     @type String
     @default null
     @public
     */
    // We leave this null by default so we can tell the difference between
    // the default case and a user-specified tag.
    tagName: null,
    // .......................................................
    // CORE DISPLAY METHODS
    //
    /**
     Setup a view, but do not finish waking it up.
        * configure `childViews`
     * register the view with the global views hash, which is used for event
     dispatch
        @method init
     @private
     */
    init() {
      this._super(...arguments);
      (true && !((0, _metal.descriptorForProperty)(this, 'elementId') === undefined) && (0, _debug.assert)(`You cannot use a computed property for the component's \`elementId\` (${this}).`, (0, _metal.descriptorForProperty)(this, 'elementId') === undefined));
      (true && !((0, _metal.descriptorForProperty)(this, 'tagName') === undefined) && (0, _debug.assert)(`You cannot use a computed property for the component's \`tagName\` (${this}).`, (0, _metal.descriptorForProperty)(this, 'tagName') === undefined));
      if (!this.elementId && this.tagName !== '') {
        this.elementId = (0, _utils.guidFor)(this);
      }
      (true && !(!this.render) && (0, _debug.assert)('Using a custom `.render` function is no longer supported.', !this.render));
    },
    // .......................................................
    // EVENT HANDLING
    //
    /**
     Handle events from `EventDispatcher`
        @method handleEvent
     @param eventName {String}
     @param evt {Event}
     @private
     */
    handleEvent(eventName, evt) {
      return this._currentState.handleEvent(this, eventName, evt);
    }
  });
  var _default = ViewMixin;
  _exports.default = _default;
});
define("@ember/-internals/views/lib/system/action_manager", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = ActionManager;
  /**
  @module ember
  */
  function ActionManager() {}
  /**
    Global action id hash.
  
    @private
    @property registeredActions
    @type Object
  */
  ActionManager.registeredActions = {};
});
define("@ember/-internals/views/lib/system/event_dispatcher", ["exports", "@ember/-internals/owner", "@ember/debug", "@ember/-internals/metal", "@ember/object", "@ember/-internals/views", "@ember/-internals/views/lib/system/action_manager"], function (_exports, _owner, _debug, _metal, _object, _views, _action_manager) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module ember
  */
  var ROOT_ELEMENT_CLASS = 'ember-application';
  var ROOT_ELEMENT_SELECTOR = `.${ROOT_ELEMENT_CLASS}`;
  /**
    `Ember.EventDispatcher` handles delegating browser events to their
    corresponding `Ember.Views.` For example, when you click on a view,
    `Ember.EventDispatcher` ensures that that view's `mouseDown` method gets
    called.
  
    @class EventDispatcher
    @namespace Ember
    @private
    @extends EmberObject
  */
  class EventDispatcher extends _object.default {
    constructor() {
      super(...arguments);
      /**
        The set of events names (and associated handler function names) to be setup
        and dispatched by the `EventDispatcher`. Modifications to this list can be done
        at setup time, generally via the `Application.customEvents` hash.
               To add new events to be listened to:
               ```javascript
        import Application from '@ember/application';
               let App = Application.create({
          customEvents: {
            paste: 'paste'
          }
        });
        ```
               To prevent default events from being listened to:
               ```javascript
        import Application from '@ember/application';
               let App = Application.create({
          customEvents: {
            mouseenter: null,
            mouseleave: null
          }
        });
        ```
        @property events
        @type Object
        @private
      */
      this.events = {
        touchstart: 'touchStart',
        touchmove: 'touchMove',
        touchend: 'touchEnd',
        touchcancel: 'touchCancel',
        keydown: 'keyDown',
        keyup: 'keyUp',
        keypress: 'keyPress',
        mousedown: 'mouseDown',
        mouseup: 'mouseUp',
        contextmenu: 'contextMenu',
        click: 'click',
        dblclick: 'doubleClick',
        focusin: 'focusIn',
        focusout: 'focusOut',
        submit: 'submit',
        input: 'input',
        change: 'change',
        dragstart: 'dragStart',
        drag: 'drag',
        dragenter: 'dragEnter',
        dragleave: 'dragLeave',
        dragover: 'dragOver',
        drop: 'drop',
        dragend: 'dragEnd'
      };
      /**
        The root DOM element to which event listeners should be attached. Event
        listeners will be attached to the document unless this is overridden.
               Can be specified as a DOMElement or a selector string.
               The default body is a string since this may be evaluated before document.body
        exists in the DOM.
               @private
        @property rootElement
        @type DOMElement
        @default 'body'
      */
      this.rootElement = 'body';
      this._eventHandlers = Object.create(null);
      this._didSetup = false;
      this.finalEventNameMapping = null;
      this._sanitizedRootElement = null;
      this.lazyEvents = new Map();
      this._reverseEventNameMapping = null;
    }
    /**
      Sets up event listeners for standard browser events.
         This will be called after the browser sends a `DOMContentReady` event. By
      default, it will set up all of the listeners on the document body. If you
      would like to register the listeners on a different element, set the event
      dispatcher's `root` property.
         @private
      @method setup
      @param addedEvents {Object}
    */
    setup(addedEvents, _rootElement) {
      var _a;
      (true && !((() => {
        var owner = (0, _owner.getOwner)(this);
        (true && !(owner) && (0, _debug.assert)('[BUG] Missing owner', owner)); // SAFETY: This is not guaranteed to be safe, but this is what we expect to be returned.
        var environment = owner.lookup('-environment:main');
        return environment.isInteractive;
      })()) && (0, _debug.assert)('EventDispatcher should never be setup in fastboot mode. Please report this as an Ember bug.', (() => {
        var owner = (0, _owner.getOwner)(this);
        (true && !(owner) && (0, _debug.assert)('[BUG] Missing owner', owner));
        var environment = owner.lookup('-environment:main');
        return environment.isInteractive;
      })()));
      var events = this.finalEventNameMapping = Object.assign(Object.assign({}, (0, _metal.get)(this, 'events')), addedEvents);
      this._reverseEventNameMapping = Object.keys(events).reduce((result, key) => {
        var eventName = events[key];
        return eventName ? Object.assign(Object.assign({}, result), {
          [eventName]: key
        }) : result;
      }, {});
      var lazyEvents = this.lazyEvents;
      if (_rootElement !== undefined && _rootElement !== null) {
        (0, _metal.set)(this, 'rootElement', _rootElement);
      }
      var specifiedRootElement = (0, _metal.get)(this, 'rootElement');
      var rootElement = typeof specifiedRootElement !== 'string' ? specifiedRootElement : document.querySelector(specifiedRootElement);
      (true && !(rootElement) && (0, _debug.assert)(`Could not find rootElement (${specifiedRootElement})`, rootElement));
      (true && !(!rootElement.classList.contains(ROOT_ELEMENT_CLASS)) && (0, _debug.assert)(`You cannot use the same root element (${specifiedRootElement}) multiple times in an Ember.Application`, !rootElement.classList.contains(ROOT_ELEMENT_CLASS)));
      (true && !((() => {
        var target = rootElement.parentNode;
        while (target instanceof Element) {
          if (target.classList.contains(ROOT_ELEMENT_CLASS)) {
            return false;
          }
          target = target.parentNode;
        }
        return true;
      })()) && (0, _debug.assert)('You cannot make a new Ember.Application using a root element that is a descendent of an existing Ember.Application', (() => {
        var target = rootElement.parentNode;
        while (target instanceof Element) {
          if (target.classList.contains(ROOT_ELEMENT_CLASS)) {
            return false;
          }
          target = target.parentNode;
        }
        return true;
      })()));
      (true && !(!rootElement.querySelector(ROOT_ELEMENT_SELECTOR)) && (0, _debug.assert)('You cannot make a new Ember.Application using a root element that is an ancestor of an existing Ember.Application', !rootElement.querySelector(ROOT_ELEMENT_SELECTOR)));
      rootElement.classList.add(ROOT_ELEMENT_CLASS);
      (true && !(rootElement.classList.contains(ROOT_ELEMENT_CLASS)) && (0, _debug.assert)(`Unable to add '${ROOT_ELEMENT_CLASS}' class to root element (${(0, _metal.get)(this, 'rootElement') || rootElement.tagName}). Make sure you set rootElement to the body or an element in the body.`, rootElement.classList.contains(ROOT_ELEMENT_CLASS))); // save off the final sanitized root element (for usage in setupHandler)
      this._sanitizedRootElement = rootElement;
      // setup event listeners for the non-lazily setup events
      for (var event in events) {
        if (Object.prototype.hasOwnProperty.call(events, event)) {
          lazyEvents.set(event, (_a = events[event]) !== null && _a !== void 0 ? _a : null);
        }
      }
      this._didSetup = true;
    }
    /**
      Setup event listeners for the given browser event name
         @private
      @method setupHandlerForBrowserEvent
      @param event the name of the event in the browser
    */
    setupHandlerForBrowserEvent(event) {
      var _a;
      (true && !(this.finalEventNameMapping) && (0, _debug.assert)('[BUG] Expected finalEventNameMapping to be set', this.finalEventNameMapping));
      (true && !(this._sanitizedRootElement) && (0, _debug.assert)('[BUG] Expected _santizedRootElement to be set', this._sanitizedRootElement));
      this.setupHandler(this._sanitizedRootElement, event, (_a = this.finalEventNameMapping[event]) !== null && _a !== void 0 ? _a : null);
    }
    /**
      Setup event listeners for the given Ember event name (camel case)
         @private
      @method setupHandlerForEmberEvent
      @param eventName
    */
    setupHandlerForEmberEvent(eventName) {
      var _a;
      (true && !(this._sanitizedRootElement) && (0, _debug.assert)('[BUG] Expected _sanitizedRootElement to be set', this._sanitizedRootElement));
      var event = (_a = this._reverseEventNameMapping) === null || _a === void 0 ? void 0 : _a[eventName];
      if (event) {
        this.setupHandler(this._sanitizedRootElement, event, eventName);
      }
    }
    /**
      Registers an event listener on the rootElement. If the given event is
      triggered, the provided event handler will be triggered on the target view.
         If the target view does not implement the event handler, or if the handler
      returns `false`, the parent view will be called. The event will continue to
      bubble to each successive parent view until it reaches the top.
         @private
      @method setupHandler
      @param {Element} rootElement
      @param {String} event the name of the event in the browser
      @param {String} eventName the name of the method to call on the view
    */
    setupHandler(rootElement, event, eventName) {
      if (eventName === null || !this.lazyEvents.has(event)) {
        return; // nothing to do
      }

      var viewHandler = (target, event) => {
        // SAFETY: SimpleElement is supposed to be a subset of Element so this _should_ be safe.
        // However, the types are more specific in some places which necessitates the `as`.
        var view = (0, _views.getElementView)(target);
        var result = true;
        if (view) {
          // SAFETY: As currently written, this is not safe. Though it seems to always be true.
          result = view.handleEvent(eventName, event);
        }
        return result;
      };
      var actionHandler = (target, event) => {
        var actionId = target.getAttribute('data-ember-action');
        var actions;
        // In Glimmer2 this attribute is set to an empty string and an additional
        // attribute it set for each action on a given element. In this case, the
        // attributes need to be read so that a proper set of action handlers can
        // be coalesced.
        if (actionId === '') {
          actions = [];
          for (var attr of target.attributes) {
            var attrName = attr.name;
            if (attrName.indexOf('data-ember-action-') === 0) {
              var action = _action_manager.default.registeredActions[attr.value];
              (true && !(action) && (0, _debug.assert)('[BUG] Missing action', action));
              actions.push(action);
            }
          }
        } else if (actionId) {
          // FIXME: This branch is never called in tests. Improve tests or remove
          var actionState = _action_manager.default.registeredActions[actionId];
          if (actionState) {
            actions = [actionState];
          }
        }
        // We have to check for actions here since in some cases, jQuery will trigger
        // an event on `removeChild` (i.e. focusout) after we've already torn down the
        // action handlers for the view.
        if (!actions) {
          // FIXME: This branch is never called in tests. Improve tests or remove
          return;
        }
        var result = true;
        for (var index = 0; index < actions.length; index++) {
          var _action = actions[index];
          if (_action && _action.eventName === eventName) {
            // return false if any of the action handlers returns false
            result = _action.handler(event) && result;
          }
        }
        return result;
      };
      var handleEvent = this._eventHandlers[event] = event => {
        var target = event.target;
        (true && !(target instanceof Element) && (0, _debug.assert)(`[BUG] Received event without an Element target: ${event.type}, ${target}`, target instanceof Element));
        do {
          // SAFETY: SimpleElement is supposed to be a subset of Element so this _should_ be safe.
          // However, the types are more specific in some places which necessitates the `as`.
          if ((0, _views.getElementView)(target)) {
            if (viewHandler(target, event) === false) {
              event.preventDefault();
              event.stopPropagation();
              break;
            } else if (event.cancelBubble === true) {
              break;
            }
          } else if (typeof target.hasAttribute === 'function' && target.hasAttribute('data-ember-action')) {
            if (actionHandler(target, event) === false) {
              break;
            }
          }
          target = target.parentNode;
        } while (target instanceof Element);
      };
      rootElement.addEventListener(event, handleEvent);
      this.lazyEvents.delete(event);
    }
    destroy() {
      if (this._didSetup === false) {
        return;
      }
      var rootElement = this._sanitizedRootElement;
      if (!rootElement) {
        return;
      }
      for (var event in this._eventHandlers) {
        rootElement.removeEventListener(event, this._eventHandlers[event]);
      }
      rootElement.classList.remove(ROOT_ELEMENT_CLASS);
      return this._super(...arguments);
    }
    toString() {
      return '(EventDispatcher)';
    }
  }
  _exports.default = EventDispatcher;
});
define("@ember/-internals/views/lib/system/utils", ["exports", "@ember/-internals/owner", "@ember/-internals/utils", "@ember/debug"], function (_exports, _owner, _utils, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.addChildView = addChildView;
  _exports.clearElementView = clearElementView;
  _exports.clearViewElement = clearViewElement;
  _exports.collectChildViews = collectChildViews;
  _exports.constructStyleDeprecationMessage = constructStyleDeprecationMessage;
  _exports.contains = contains;
  _exports.elMatches = void 0;
  _exports.getChildViews = getChildViews;
  _exports.getElementView = getElementView;
  _exports.getRootViews = getRootViews;
  _exports.getViewBoundingClientRect = getViewBoundingClientRect;
  _exports.getViewBounds = getViewBounds;
  _exports.getViewClientRects = getViewClientRects;
  _exports.getViewElement = getViewElement;
  _exports.getViewId = getViewId;
  _exports.getViewRange = getViewRange;
  _exports.initChildViews = initChildViews;
  _exports.isSimpleClick = isSimpleClick;
  _exports.matches = matches;
  _exports.setElementView = setElementView;
  _exports.setViewElement = setViewElement;
  /**
  @module ember
  */
  function isSimpleClick(event) {
    if (!(event instanceof MouseEvent)) {
      return false;
    }
    var modifier = event.shiftKey || event.metaKey || event.altKey || event.ctrlKey;
    var secondaryClick = event.which > 1; // IE9 may return undefined
    return !modifier && !secondaryClick;
  }
  function constructStyleDeprecationMessage(affectedStyle) {
    return '' + 'Binding style attributes may introduce cross-site scripting vulnerabilities; ' + 'please ensure that values being bound are properly escaped. For more information, ' + 'including how to disable this warning, see ' + 'https://deprecations.emberjs.com/v1.x/#toc_binding-style-attributes. ' + 'Style affected: "' + affectedStyle + '"';
  }
  /**
    @private
    @method getRootViews
    @param {Object} owner
  */
  function getRootViews(owner) {
    var registry = owner.lookup('-view-registry:main');
    var rootViews = [];
    Object.keys(registry).forEach(id => {
      var view = registry[id];
      (true && !(view) && (0, _debug.assert)('expected view', view));
      if (view.parentView === null) {
        rootViews.push(view);
      }
    });
    return rootViews;
  }
  /**
    @private
    @method getViewId
    @param {Ember.View} view
   */
  function getViewId(view) {
    if (view.tagName !== '' && view.elementId) {
      return view.elementId;
    } else {
      return (0, _utils.guidFor)(view);
    }
  }
  var ELEMENT_VIEW = new WeakMap();
  var VIEW_ELEMENT = new WeakMap();
  function getElementView(element) {
    return ELEMENT_VIEW.get(element) || null;
  }
  /**
    @private
    @method getViewElement
    @param {Ember.View} view
   */
  function getViewElement(view) {
    return VIEW_ELEMENT.get(view) || null;
  }
  function setElementView(element, view) {
    ELEMENT_VIEW.set(element, view);
  }
  function setViewElement(view, element) {
    VIEW_ELEMENT.set(view, element);
  }
  // These are not needed for GC, but for correctness. We want to be able to
  // null-out these links while the objects are still live. Specifically, in
  // this case, we want to prevent access to the element (and vice verse) during
  // destruction.
  function clearElementView(element) {
    ELEMENT_VIEW.delete(element);
  }
  function clearViewElement(view) {
    VIEW_ELEMENT.delete(view);
  }
  var CHILD_VIEW_IDS = new WeakMap();
  /**
    @private
    @method getChildViews
    @param {Ember.View} view
  */
  function getChildViews(view) {
    var owner = (0, _owner.getOwner)(view);
    (true && !(owner) && (0, _debug.assert)('View is unexpectedly missing an owner', owner));
    var registry = owner.lookup('-view-registry:main');
    return collectChildViews(view, registry);
  }
  function initChildViews(view) {
    var childViews = new Set();
    CHILD_VIEW_IDS.set(view, childViews);
    return childViews;
  }
  function addChildView(parent, child) {
    var childViews = CHILD_VIEW_IDS.get(parent);
    if (childViews === undefined) {
      childViews = initChildViews(parent);
    }
    childViews.add(getViewId(child));
  }
  function collectChildViews(view, registry) {
    var views = [];
    var childViews = CHILD_VIEW_IDS.get(view);
    if (childViews !== undefined) {
      childViews.forEach(id => {
        var view = registry[id];
        if (view && !view.isDestroying && !view.isDestroyed) {
          views.push(view);
        }
      });
    }
    return views;
  }
  /**
    @private
    @method getViewBounds
    @param {Ember.View} view
  */
  function getViewBounds(view) {
    return view.renderer.getBounds(view);
  }
  /**
    @private
    @method getViewRange
    @param {Ember.View} view
  */
  function getViewRange(view) {
    var bounds = getViewBounds(view);
    var range = document.createRange();
    range.setStartBefore(bounds.firstNode);
    range.setEndAfter(bounds.lastNode);
    return range;
  }
  /**
    `getViewClientRects` provides information about the position of the border
    box edges of a view relative to the viewport.
  
    It is only intended to be used by development tools like the Ember Inspector
    and may not work on older browsers.
  
    @private
    @method getViewClientRects
    @param {Ember.View} view
  */
  function getViewClientRects(view) {
    var range = getViewRange(view);
    return range.getClientRects();
  }
  /**
    `getViewBoundingClientRect` provides information about the position of the
    bounding border box edges of a view relative to the viewport.
  
    It is only intended to be used by development tools like the Ember Inspector
    and may not work on older browsers.
  
    @private
    @method getViewBoundingClientRect
    @param {Ember.View} view
  */
  function getViewBoundingClientRect(view) {
    var range = getViewRange(view);
    return range.getBoundingClientRect();
  }
  /**
    Determines if the element matches the specified selector.
  
    @private
    @method matches
    @param {DOMElement} el
    @param {String} selector
  */
  var elMatches = typeof Element !== 'undefined' ? Element.prototype.matches : undefined;
  _exports.elMatches = elMatches;
  function matches(el, selector) {
    (true && !(elMatches !== undefined) && (0, _debug.assert)('cannot call `matches` in fastboot mode', elMatches !== undefined));
    return elMatches.call(el, selector);
  }
  function contains(a, b) {
    if (a.contains !== undefined) {
      return a.contains(b);
    }
    var current = b.parentNode;
    while (current && (current = current.parentNode)) {
      if (current === a) {
        return true;
      }
    }
    return false;
  }
});
define("@ember/-internals/views/lib/views/core_view", ["exports", "@ember/-internals/metal", "@ember/-internals/runtime", "@ember/object/evented", "@ember/object/-internals", "@ember/-internals/views/lib/views/states"], function (_exports, _metal, _runtime, _evented, _internals, _states) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
      if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  class CoreView extends _internals.FrameworkObject.extend(_evented.default, _runtime.ActionHandler) {
    constructor() {
      super(...arguments);
      this.isView = true;
    }
    init(properties) {
      var _a;
      super.init(properties);
      // Handle methods from Evented
      // The native class inheritance will not work for mixins. To work around this,
      // we copy the existing trigger and has methods provided by the mixin and swap in the
      // new ones from our class.
      this._superTrigger = this.trigger;
      this.trigger = this._trigger;
      this._superHas = this.has;
      this.has = this._has;
      (_a = this.parentView) !== null && _a !== void 0 ? _a : this.parentView = null;
      this._state = 'preRender';
      this._currentState = this._states.preRender;
    }
    instrumentDetails(hash) {
      hash['object'] = this.toString();
      hash['containerKey'] = this._debugContainerKey;
      hash['view'] = this;
      return hash;
    }
    /**
      Override the default event firing from `Evented` to
      also call methods with the given name.
         @method trigger
      @param name {String}
      @private
    */
    // Changed to `trigger` on init
    _trigger(name) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      this._superTrigger(name, ...args);
      var method = this[name];
      if (typeof method === 'function') {
        return method.apply(this, args);
      }
    }
    // Changed to `has` on init
    _has(name) {
      return typeof this[name] === 'function' || this._superHas(name);
    }
  }
  CoreView.isViewFactory = true;
  __decorate([(0, _metal.inject)('renderer', '-dom')], CoreView.prototype, "renderer", void 0);
  // Declare on the prototype to have a single shared value.
  CoreView.prototype._states = _states.default;
  var _default = CoreView;
  _exports.default = _default;
});
define("@ember/-internals/views/lib/views/states", ["exports", "@ember/-internals/utils", "@ember/debug", "@ember/instrumentation", "@ember/runloop"], function (_exports, _utils, _debug, _instrumentation, _runloop) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var DEFAULT = Object.freeze({
    // appendChild is only legal while rendering the buffer.
    appendChild() {
      throw new Error("You can't use appendChild outside of the rendering process");
    },
    // Handle events from `Ember.EventDispatcher`
    handleEvent() {
      return true; // continue event propagation
    },

    rerender() {},
    destroy() {}
  });
  var PRE_RENDER = Object.freeze(Object.assign({}, DEFAULT));
  var HAS_ELEMENT = Object.freeze(Object.assign(Object.assign({}, DEFAULT), {
    rerender(view) {
      view.renderer.rerender();
    },
    destroy(view) {
      view.renderer.remove(view);
    },
    // Handle events from `Ember.EventDispatcher`
    handleEvent(view, eventName, event) {
      if (view.has(eventName)) {
        // Handler should be able to re-dispatch events, so we don't
        // preventDefault or stopPropagation.
        return (0, _instrumentation.flaggedInstrument)(`interaction.${eventName}`, {
          event,
          view
        }, () => {
          return (0, _runloop.join)(view, view.trigger, eventName, event);
        });
      } else {
        return true; // continue event propagation
      }
    }
  }));

  var IN_DOM = Object.freeze(Object.assign(Object.assign({}, HAS_ELEMENT), {
    enter(view) {
      // Register the view for event handling. This hash is used by
      // Ember.EventDispatcher to dispatch incoming events.
      view.renderer.register(view);
      if (true /* DEBUG */) {
        var elementId = view.elementId;
        (true && !(_utils.teardownMandatorySetter) && (0, _debug.assert)('[BUG] Expected teardownMandatorySetter to be set in DEBUG mode', teardownMandatorySetter));
        (0, _utils.teardownMandatorySetter)(view, 'elementId');
        Object.defineProperty(view, 'elementId', {
          configurable: true,
          enumerable: true,
          get() {
            return elementId;
          },
          set(value) {
            if (value !== elementId) {
              throw new Error("Changing a view's elementId after creation is not allowed");
            }
          }
        });
      }
    }
  }));
  var DESTROYING = Object.freeze(Object.assign(Object.assign({}, DEFAULT), {
    appendChild() {
      throw new Error("You can't call appendChild on a view being destroyed");
    },
    rerender() {
      throw new Error("You can't call rerender on a view being destroyed");
    }
  }));
  /*
    Describe how the specified actions should behave in the various
    states that a view can exist in. Possible states:
  
    * preRender: when a view is first instantiated, and after its
      element was destroyed, it is in the preRender state
    * hasElement: the DOM representation of the view is created,
      and is ready to be inserted
    * inDOM: once a view has been inserted into the DOM it is in
      the inDOM state. A view spends the vast majority of its
      existence in this state.
    * destroyed: once a view has been destroyed (using the destroy
      method), it is in this state. No further actions can be invoked
      on a destroyed view.
  */
  var states = Object.freeze({
    preRender: PRE_RENDER,
    inDOM: IN_DOM,
    hasElement: HAS_ELEMENT,
    destroying: DESTROYING
  });
  var _default = states;
  _exports.default = _default;
});
define("@ember/application/index", ["exports", "@ember/owner", "@ember/-internals/utils", "@ember/-internals/environment", "@ember/-internals/browser-environment", "@ember/debug", "@ember/runloop", "@ember/-internals/metal", "@ember/application/lib/lazy_load", "@ember/-internals/runtime", "@ember/-internals/views", "@ember/routing/route", "@ember/routing/router", "@ember/routing/auto-location", "@ember/routing/hash-location", "@ember/routing/history-location", "@ember/routing/none-location", "@ember/routing/-internals", "@ember/application/instance", "@ember/engine", "@ember/-internals/container", "@ember/-internals/glimmer", "@ember/routing/router-service"], function (_exports, _owner, _utils, _environment, _browserEnvironment, _debug, _runloop, _metal, _lazy_load, _runtime, _views, _route, _router, _autoLocation, _hashLocation, _historyLocation, _noneLocation, _internals, _instance, _engine, _container, _glimmer, _routerService) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "_loaded", {
    enumerable: true,
    get: function () {
      return _lazy_load._loaded;
    }
  });
  _exports.getOwner = _exports.default = void 0;
  Object.defineProperty(_exports, "onLoad", {
    enumerable: true,
    get: function () {
      return _lazy_load.onLoad;
    }
  });
  Object.defineProperty(_exports, "runLoadHooks", {
    enumerable: true,
    get: function () {
      return _lazy_load.runLoadHooks;
    }
  });
  _exports.setOwner = void 0;
  /**
  @module @ember/application
  */

  /**
   * @deprecated Use `import { getOwner } from '@ember/owner';` instead.
   */
  var getOwner = _owner.getOwner;
  /**
   * @deprecated Use `import { setOwner } from '@ember/owner';` instead.
   */
  _exports.getOwner = getOwner;
  var setOwner = _owner.setOwner;
  /**
    An instance of `Application` is the starting point for every Ember
    application. It instantiates, initializes and coordinates the
    objects that make up your app.
  
    Each Ember app has one and only one `Application` object. Although
    Ember CLI creates this object implicitly, the `Application` class
    is defined in the `app/app.js`. You can define a `ready` method on the
    `Application` class, which will be run by Ember when the application is
    initialized.
  
    ```app/app.js
    export default class App extends Application {
      ready() {
        // your code here
      }
    }
    ```
  
    Because `Application` ultimately inherits from `Ember.Namespace`, any classes
    you create will have useful string representations when calling `toString()`.
    See the `Ember.Namespace` documentation for more information.
  
    While you can think of your `Application` as a container that holds the
    other classes in your application, there are several other responsibilities
    going on under-the-hood that you may want to understand. It is also important
    to understand that an `Application` is different from an `ApplicationInstance`.
    Refer to the Guides to understand the difference between these.
  
    ### Event Delegation
  
    Ember uses a technique called _event delegation_. This allows the framework
    to set up a global, shared event listener instead of requiring each view to
    do it manually. For example, instead of each view registering its own
    `mousedown` listener on its associated element, Ember sets up a `mousedown`
    listener on the `body`.
  
    If a `mousedown` event occurs, Ember will look at the target of the event and
    start walking up the DOM node tree, finding corresponding views and invoking
    their `mouseDown` method as it goes.
  
    `Application` has a number of default events that it listens for, as
    well as a mapping from lowercase events to camel-cased view method names. For
    example, the `keypress` event causes the `keyPress` method on the view to be
    called, the `dblclick` event causes `doubleClick` to be called, and so on.
  
    If there is a bubbling browser event that Ember does not listen for by
    default, you can specify custom events and their corresponding view method
    names by setting the application's `customEvents` property:
  
    ```app/app.js
    import Application from '@ember/application';
  
    export default class App extends Application {
      customEvents = {
        // add support for the paste event
        paste: 'paste'
      }
    }
    ```
  
    To prevent Ember from setting up a listener for a default event,
    specify the event name with a `null` value in the `customEvents`
    property:
  
    ```app/app.js
    import Application from '@ember/application';
  
    export default class App extends Application {
      customEvents = {
        // prevent listeners for mouseenter/mouseleave events
        mouseenter: null,
        mouseleave: null
      }
    }
    ```
  
    By default, the application sets up these event listeners on the document
    body. However, in cases where you are embedding an Ember application inside
    an existing page, you may want it to set up the listeners on an element
    inside the body.
  
    For example, if only events inside a DOM element with the ID of `ember-app`
    should be delegated, set your application's `rootElement` property:
  
    ```app/app.js
    import Application from '@ember/application';
  
    export default class App extends Application {
      rootElement = '#ember-app'
    }
    ```
  
    The `rootElement` can be either a DOM element or a CSS selector
    string. Note that *views appended to the DOM outside the root element will
    not receive events.* If you specify a custom root element, make sure you only
    append views inside it!
  
    To learn more about the events Ember components use, see
  
    [components/handling-events](https://guides.emberjs.com/release/components/handling-events/#toc_event-names).
  
    ### Initializers
  
    To add behavior to the Application's boot process, you can define initializers in
    the `app/initializers` directory, or with `ember generate initializer` using Ember CLI.
    These files should export a named `initialize` function which will receive the created `application`
    object as its first argument.
  
    ```javascript
    export function initialize(application) {
      // application.inject('route', 'foo', 'service:foo');
    }
    ```
  
    Application initializers can be used for a variety of reasons including:
  
    - setting up external libraries
    - injecting dependencies
    - setting up event listeners in embedded apps
    - deferring the boot process using the `deferReadiness` and `advanceReadiness` APIs.
  
    ### Routing
  
    In addition to creating your application's router, `Application` is
    also responsible for telling the router when to start routing. Transitions
    between routes can be logged with the `LOG_TRANSITIONS` flag, and more
    detailed intra-transition logging can be logged with
    the `LOG_TRANSITIONS_INTERNAL` flag:
  
    ```javascript
    import Application from '@ember/application';
  
    let App = Application.create({
      LOG_TRANSITIONS: true, // basic logging of successful transitions
      LOG_TRANSITIONS_INTERNAL: true // detailed logging of all routing steps
    });
    ```
  
    By default, the router will begin trying to translate the current URL into
    application state once the browser emits the `DOMContentReady` event. If you
    need to defer routing, you can call the application's `deferReadiness()`
    method. Once routing can begin, call the `advanceReadiness()` method.
  
    If there is any setup required before routing begins, you can implement a
    `ready()` method on your app that will be invoked immediately before routing
    begins.
  
    @class Application
    @extends Engine
    @public
  */
  _exports.setOwner = setOwner;
  class Application extends _engine.default {
    constructor() {
      super(...arguments);
      this._bootPromise = null;
      this._bootResolver = null;
    }
    /**
      This creates a registry with the default Ember naming conventions.
         It also configures the registry:
         * registered views are created every time they are looked up (they are
        not singletons)
      * registered templates are not factories; the registered value is
        returned directly.
      * the router receives the application as its `namespace` property
      * all controllers receive the router as their `target` and `controllers`
        properties
      * all controllers receive the application as their `namespace` property
      * the application view receives the application controller as its
        `controller` property
      * the application view receives the application template as its
        `defaultTemplate` property
         @method buildRegistry
      @static
      @param {Application} namespace the application for which to
        build the registry
      @return {Ember.Registry} the built registry
      @private
    */
    static buildRegistry(namespace) {
      var registry = super.buildRegistry(namespace);
      commonSetupRegistry(registry);
      (0, _glimmer.setupApplicationRegistry)(registry);
      return registry;
    }
    init(properties) {
      var _a, _b, _c, _d, _e, _f, _g, _h;
      super.init(properties);
      (_a = this.rootElement) !== null && _a !== void 0 ? _a : this.rootElement = 'body';
      (_b = this._document) !== null && _b !== void 0 ? _b : this._document = null;
      (_c = this.eventDispatcher) !== null && _c !== void 0 ? _c : this.eventDispatcher = null;
      (_d = this.customEvents) !== null && _d !== void 0 ? _d : this.customEvents = null;
      (_e = this.autoboot) !== null && _e !== void 0 ? _e : this.autoboot = true;
      (_f = this._document) !== null && _f !== void 0 ? _f : this._document = _browserEnvironment.hasDOM ? window.document : null;
      (_g = this._globalsMode) !== null && _g !== void 0 ? _g : this._globalsMode = true;
      if (true /* DEBUG */) {
        if (_environment.ENV.LOG_VERSION) {
          // we only need to see this once per Application#init
          _environment.ENV.LOG_VERSION = false;
          (_h = _metal.libraries.logVersions) === null || _h === void 0 ? void 0 : _h.call(_metal.libraries);
        }
      }
      // Start off the number of deferrals at 1. This will be decremented by
      // the Application's own `boot` method.
      this._readinessDeferrals = 1;
      this._booted = false;
      this._applicationInstances = new Set();
      this.autoboot = this._globalsMode = Boolean(this.autoboot);
      if (this._globalsMode) {
        this._prepareForGlobalsMode();
      }
      if (this.autoboot) {
        this.waitForDOMReady();
      }
    }
    /**
      Create an ApplicationInstance for this application.
         @public
      @method buildInstance
      @return {ApplicationInstance} the application instance
    */
    buildInstance(options) {
      if (options === void 0) {
        options = {};
      }
      (true && !(!this.isDestroyed) && (0, _debug.assert)('You cannot build new instances of this application since it has already been destroyed', !this.isDestroyed));
      (true && !(!this.isDestroying) && (0, _debug.assert)('You cannot build new instances of this application since it is being destroyed', !this.isDestroying));
      return _instance.default.create(Object.assign(Object.assign({}, options), {
        base: this,
        application: this
      }));
    }
    /**
      Start tracking an ApplicationInstance for this application.
      Used when the ApplicationInstance is created.
         @private
      @method _watchInstance
    */
    _watchInstance(instance) {
      this._applicationInstances.add(instance);
    }
    /**
      Stop tracking an ApplicationInstance for this application.
      Used when the ApplicationInstance is about to be destroyed.
         @private
      @method _unwatchInstance
    */
    _unwatchInstance(instance) {
      return this._applicationInstances.delete(instance);
    }
    /**
      Enable the legacy globals mode by allowing this application to act
      as a global namespace. See the docs on the `_globalsMode` property
      for details.
         Most of these features are already deprecated in 1.x, so we can
      stop using them internally and try to remove them.
         @private
      @method _prepareForGlobalsMode
    */
    _prepareForGlobalsMode() {
      // Create subclass of Router for this Application instance.
      // This is to ensure that someone reopening `App.Router` does not
      // tamper with the default `Router`.
      this.Router = (this.Router || _router.default).extend();
      this._buildDeprecatedInstance();
    }
    /*
      Build the deprecated instance for legacy globals mode support.
      Called when creating and resetting the application.
         This is orthogonal to autoboot: the deprecated instance needs to
      be created at Application construction (not boot) time to expose
      App.__container__. If autoboot sees that this instance exists,
      it will continue booting it to avoid doing unncessary work (as
      opposed to building a new instance at boot time), but they are
      otherwise unrelated.
         @private
      @method _buildDeprecatedInstance
    */
    _buildDeprecatedInstance() {
      // Build a default instance
      var instance = this.buildInstance();
      // Legacy support for App.__container__ and other global methods
      // on App that rely on a single, default instance.
      this.__deprecatedInstance__ = instance;
      this.__container__ = instance.__container__;
    }
    /**
      Automatically kick-off the boot process for the application once the
      DOM has become ready.
         The initialization itself is scheduled on the actions queue which
      ensures that code-loading finishes before booting.
         If you are asynchronously loading code, you should call `deferReadiness()`
      to defer booting, and then call `advanceReadiness()` once all of your code
      has finished loading.
         @private
      @method waitForDOMReady
    */
    waitForDOMReady() {
      var document = this._document;
      // SAFETY: Casting as Document should be safe since we're just reading a property.
      // If it's not actually a Document then it will evaluate false which is fine for our
      // purposes.
      if (document === null || document.readyState !== 'loading') {
        (0, _runloop.schedule)('actions', this, this.domReady);
      } else {
        // Ideally we'd just check `document instanceof Document` but currently some tests pass a fake document.
        (true && !(function (d) {
          return typeof d.removeEventListener === 'function';
        }(document)) && (0, _debug.assert)('[BUG] Called waitForDOMReady with an invalid document', function (d) {
          return typeof d.removeEventListener === 'function';
        }(document)));
        var callback = () => {
          document.removeEventListener('DOMContentLoaded', callback);
          (0, _runloop.run)(this, this.domReady);
        };
        document.addEventListener('DOMContentLoaded', callback);
      }
    }
    /**
      This is the autoboot flow:
         1. Boot the app by calling `this.boot()`
      2. Create an instance (or use the `__deprecatedInstance__` in globals mode)
      3. Boot the instance by calling `instance.boot()`
      4. Invoke the `App.ready()` callback
      5. Kick-off routing on the instance
         Ideally, this is all we would need to do:
         ```javascript
      _autoBoot() {
        this.boot().then(() => {
          let instance = (this._globalsMode) ? this.__deprecatedInstance__ : this.buildInstance();
          return instance.boot();
        }).then((instance) => {
          App.ready();
          instance.startRouting();
        });
      }
      ```
         Unfortunately, we cannot actually write this because we need to participate
      in the "synchronous" boot process. While the code above would work fine on
      the initial boot (i.e. DOM ready), when `App.reset()` is called, we need to
      boot a new instance synchronously (see the documentation on `_bootSync()`
      for details).
         Because of this restriction, the actual logic of this method is located
      inside `didBecomeReady()`.
         @private
      @method domReady
    */
    domReady() {
      if (this.isDestroying || this.isDestroyed) {
        return;
      }
      this._bootSync();
      // Continues to `didBecomeReady`
    }
    /**
      Use this to defer readiness until some condition is true.
         Example:
         ```javascript
      import Application from '@ember/application';
         let App = Application.create();
         App.deferReadiness();
         fetch('/auth-token')
      .then(response => response.json())
      .then(data => {
        App.token = data.token;
        App.advanceReadiness();
      });
      ```
         This allows you to perform asynchronous setup logic and defer
      booting your application until the setup has finished.
         However, if the setup requires a loading UI, it might be better
      to use the router for this purpose.
         @method deferReadiness
      @public
    */
    deferReadiness() {
      (true && !(this instanceof Application) && (0, _debug.assert)('You must call deferReadiness on an instance of Application', this instanceof Application));
      (true && !(!this.isDestroyed) && (0, _debug.assert)('You cannot defer readiness since application has already destroyed', !this.isDestroyed));
      (true && !(!this.isDestroying) && (0, _debug.assert)('You cannot defer readiness since the application is being destroyed', !this.isDestroying));
      (true && !(this._readinessDeferrals > 0) && (0, _debug.assert)('You cannot defer readiness since the `ready()` hook has already been called', this._readinessDeferrals > 0));
      this._readinessDeferrals++;
    }
    /**
      Call `advanceReadiness` after any asynchronous setup logic has completed.
      Each call to `deferReadiness` must be matched by a call to `advanceReadiness`
      or the application will never become ready and routing will not begin.
         @method advanceReadiness
      @see {Application#deferReadiness}
      @public
    */
    advanceReadiness() {
      (true && !(this instanceof Application) && (0, _debug.assert)('You must call advanceReadiness on an instance of Application', this instanceof Application));
      (true && !(!this.isDestroyed) && (0, _debug.assert)('You cannot advance readiness since application has already destroyed', !this.isDestroyed));
      (true && !(!this.isDestroying) && (0, _debug.assert)('You cannot advance readiness since the application is being destroyed', !this.isDestroying));
      (true && !(this._readinessDeferrals > 0) && (0, _debug.assert)('You cannot advance readiness since the `ready()` hook has already been called', this._readinessDeferrals > 0));
      this._readinessDeferrals--;
      if (this._readinessDeferrals === 0) {
        (0, _runloop.once)(this, this.didBecomeReady);
      }
    }
    /**
      Initialize the application and return a promise that resolves with the `Application`
      object when the boot process is complete.
         Run any application initializers and run the application load hook. These hooks may
      choose to defer readiness. For example, an authentication hook might want to defer
      readiness until the auth token has been retrieved.
         By default, this method is called automatically on "DOM ready"; however, if autoboot
      is disabled, this is automatically called when the first application instance is
      created via `visit`.
         @public
      @method boot
      @return {Promise<Application,Error>}
    */
    boot() {
      (true && !(!this.isDestroyed) && (0, _debug.assert)('You cannot boot this application since it has already been destroyed', !this.isDestroyed));
      (true && !(!this.isDestroying) && (0, _debug.assert)('You cannot boot this application since it is being destroyed', !this.isDestroying));
      if (this._bootPromise) {
        return this._bootPromise;
      }
      try {
        this._bootSync();
      } catch (_) {
        // Ignore the error: in the asynchronous boot path, the error is already reflected
        // in the promise rejection
      }
      (true && !(this._bootPromise) && (0, _debug.assert)('has boot promise', this._bootPromise));
      return this._bootPromise;
    }
    /**
      Unfortunately, a lot of existing code assumes the booting process is
      "synchronous". Specifically, a lot of tests assumes the last call to
      `app.advanceReadiness()` or `app.reset()` will result in the app being
      fully-booted when the current runloop completes.
         We would like new code (like the `visit` API) to stop making this assumption,
      so we created the asynchronous version above that returns a promise. But until
      we have migrated all the code, we would have to expose this method for use
      *internally* in places where we need to boot an app "synchronously".
         @private
    */
    _bootSync() {
      if (this._booted || this.isDestroying || this.isDestroyed) {
        return;
      }
      // Even though this returns synchronously, we still need to make sure the
      // boot promise exists for book-keeping purposes: if anything went wrong in
      // the boot process, we need to store the error as a rejection on the boot
      // promise so that a future caller of `boot()` can tell what failed.
      var defer = this._bootResolver = _runtime.RSVP.defer();
      this._bootPromise = defer.promise;
      try {
        this.runInitializers();
        (0, _lazy_load.runLoadHooks)('application', this);
        this.advanceReadiness();
        // Continues to `didBecomeReady`
      } catch (error) {
        // For the asynchronous boot path
        defer.reject(error);
        // For the synchronous boot path
        throw error;
      }
    }
    /**
      Reset the application. This is typically used only in tests. It cleans up
      the application in the following order:
         1. Deactivate existing routes
      2. Destroy all objects in the container
      3. Create a new application container
      4. Re-route to the existing url
         Typical Example:
         ```javascript
      import Application from '@ember/application';
      let App;
         run(function() {
        App = Application.create();
      });
         module('acceptance test', {
        setup: function() {
          App.reset();
        }
      });
         test('first test', function() {
        // App is freshly reset
      });
         test('second test', function() {
        // App is again freshly reset
      });
      ```
         Advanced Example:
         Occasionally you may want to prevent the app from initializing during
      setup. This could enable extra configuration, or enable asserting prior
      to the app becoming ready.
         ```javascript
      import Application from '@ember/application';
      let App;
         run(function() {
        App = Application.create();
      });
         module('acceptance test', {
        setup: function() {
          run(function() {
            App.reset();
            App.deferReadiness();
          });
        }
      });
         test('first test', function() {
        ok(true, 'something before app is initialized');
           run(function() {
          App.advanceReadiness();
        });
           ok(true, 'something after app is initialized');
      });
      ```
         @method reset
      @public
    */
    reset() {
      (true && !(!this.isDestroyed) && (0, _debug.assert)('You cannot reset this application since it has already been destroyed', !this.isDestroyed));
      (true && !(!this.isDestroying) && (0, _debug.assert)('You cannot reset this application since it is being destroyed', !this.isDestroying));
      (true && !(this._globalsMode && this.autoboot) && (0, _debug.assert)(`Calling reset() on instances of \`Application\` is not
            supported when globals mode is disabled; call \`visit()\` to
            create new \`ApplicationInstance\`s and dispose them
            via their \`destroy()\` method instead.`, this._globalsMode && this.autoboot));
      var instance = this.__deprecatedInstance__;
      this._readinessDeferrals = 1;
      this._bootPromise = null;
      this._bootResolver = null;
      this._booted = false;
      function handleReset() {
        (true && !(instance) && (0, _debug.assert)('expected instance', instance));
        (0, _runloop.run)(instance, 'destroy');
        this._buildDeprecatedInstance();
        (0, _runloop.schedule)('actions', this, '_bootSync');
      }
      (0, _runloop.join)(this, handleReset);
    }
    /**
      @private
      @method didBecomeReady
    */
    didBecomeReady() {
      if (this.isDestroying || this.isDestroyed) {
        return;
      }
      (true && !(this._bootResolver) && (0, _debug.assert)('expected _bootResolver', this._bootResolver));
      try {
        // TODO: Is this still needed for _globalsMode = false?
        // See documentation on `_autoboot()` for details
        if (this.autoboot) {
          var instance;
          if (this._globalsMode) {
            // If we already have the __deprecatedInstance__ lying around, boot it to
            // avoid unnecessary work
            instance = this.__deprecatedInstance__;
            (true && !(instance) && (0, _debug.assert)('expected instance', instance));
          } else {
            // Otherwise, build an instance and boot it. This is currently unreachable,
            // because we forced _globalsMode to === autoboot; but having this branch
            // allows us to locally toggle that flag for weeding out legacy globals mode
            // dependencies independently
            instance = this.buildInstance();
          }
          instance._bootSync();
          // TODO: App.ready() is not called when autoboot is disabled, is this correct?
          this.ready();
          instance.startRouting();
        }
        // For the asynchronous boot path
        this._bootResolver.resolve(this);
        // For the synchronous boot path
        this._booted = true;
      } catch (error) {
        // For the asynchronous boot path
        this._bootResolver.reject(error);
        // For the synchronous boot path
        throw error;
      }
    }
    /**
      Called when the Application has become ready, immediately before routing
      begins. The call will be delayed until the DOM has become ready.
         @event ready
      @public
    */
    ready() {
      return this;
    }
    // This method must be moved to the application instance object
    willDestroy() {
      super.willDestroy();
      if (_lazy_load._loaded['application'] === this) {
        _lazy_load._loaded['application'] = undefined;
      }
      if (this._applicationInstances.size) {
        this._applicationInstances.forEach(i => i.destroy());
        this._applicationInstances.clear();
      }
    }
    /**
      Boot a new instance of `ApplicationInstance` for the current
      application and navigate it to the given `url`. Returns a `Promise` that
      resolves with the instance when the initial routing and rendering is
      complete, or rejects with any error that occurred during the boot process.
         When `autoboot` is disabled, calling `visit` would first cause the
      application to boot, which runs the application initializers.
         This method also takes a hash of boot-time configuration options for
      customizing the instance's behavior. See the documentation on
      `ApplicationInstance.BootOptions` for details.
         `ApplicationInstance.BootOptions` is an interface class that exists
      purely to document the available options; you do not need to construct it
      manually. Simply pass a regular JavaScript object containing of the
      desired options:
         ```javascript
      MyApp.visit("/", { location: "none", rootElement: "#container" });
      ```
         ### Supported Scenarios
         While the `BootOptions` class exposes a large number of knobs, not all
      combinations of them are valid; certain incompatible combinations might
      result in unexpected behavior.
         For example, booting the instance in the full browser environment
      while specifying a foreign `document` object (e.g. `{ isBrowser: true,
      document: iframe.contentDocument }`) does not work correctly today,
      largely due to Ember's jQuery dependency.
         Currently, there are three officially supported scenarios/configurations.
      Usages outside of these scenarios are not guaranteed to work, but please
      feel free to file bug reports documenting your experience and any issues
      you encountered to help expand support.
         #### Browser Applications (Manual Boot)
         The setup is largely similar to how Ember works out-of-the-box. Normally,
      Ember will boot a default instance for your Application on "DOM ready".
      However, you can customize this behavior by disabling `autoboot`.
         For example, this allows you to render a miniture demo of your application
      into a specific area on your marketing website:
         ```javascript
      import MyApp from 'my-app';
         $(function() {
        let App = MyApp.create({ autoboot: false });
           let options = {
          // Override the router's location adapter to prevent it from updating
          // the URL in the address bar
          location: 'none',
             // Override the default `rootElement` on the app to render into a
          // specific `div` on the page
          rootElement: '#demo'
        };
           // Start the app at the special demo URL
        App.visit('/demo', options);
      });
      ```
         Or perhaps you might want to boot two instances of your app on the same
      page for a split-screen multiplayer experience:
         ```javascript
      import MyApp from 'my-app';
         $(function() {
        let App = MyApp.create({ autoboot: false });
           let sessionId = MyApp.generateSessionID();
           let player1 = App.visit(`/matches/join?name=Player+1&session=${sessionId}`, { rootElement: '#left', location: 'none' });
        let player2 = App.visit(`/matches/join?name=Player+2&session=${sessionId}`, { rootElement: '#right', location: 'none' });
           Promise.all([player1, player2]).then(() => {
          // Both apps have completed the initial render
          $('#loading').fadeOut();
        });
      });
      ```
         Do note that each app instance maintains their own registry/container, so
      they will run in complete isolation by default.
         #### Server-Side Rendering (also known as FastBoot)
         This setup allows you to run your Ember app in a server environment using
      Node.js and render its content into static HTML for SEO purposes.
         ```javascript
      const HTMLSerializer = new SimpleDOM.HTMLSerializer(SimpleDOM.voidMap);
         function renderURL(url) {
        let dom = new SimpleDOM.Document();
        let rootElement = dom.body;
        let options = { isBrowser: false, document: dom, rootElement: rootElement };
           return MyApp.visit(options).then(instance => {
          try {
            return HTMLSerializer.serialize(rootElement.firstChild);
          } finally {
            instance.destroy();
          }
        });
      }
      ```
         In this scenario, because Ember does not have access to a global `document`
      object in the Node.js environment, you must provide one explicitly. In practice,
      in the non-browser environment, the stand-in `document` object only needs to
      implement a limited subset of the full DOM API. The `SimpleDOM` library is known
      to work.
         Since there is no DOM access in the non-browser environment, you must also
      specify a DOM `Element` object in the same `document` for the `rootElement` option
      (as opposed to a selector string like `"body"`).
         See the documentation on the `isBrowser`, `document` and `rootElement` properties
      on `ApplicationInstance.BootOptions` for details.
         #### Server-Side Resource Discovery
         This setup allows you to run the routing layer of your Ember app in a server
      environment using Node.js and completely disable rendering. This allows you
      to simulate and discover the resources (i.e. AJAX requests) needed to fulfill
      a given request and eagerly "push" these resources to the client.
         ```app/initializers/network-service.js
      import BrowserNetworkService from 'app/services/network/browser';
      import NodeNetworkService from 'app/services/network/node';
         // Inject a (hypothetical) service for abstracting all AJAX calls and use
      // the appropriate implementation on the client/server. This also allows the
      // server to log all the AJAX calls made during a particular request and use
      // that for resource-discovery purpose.
         export function initialize(application) {
        if (window) { // browser
          application.register('service:network', BrowserNetworkService);
        } else { // node
          application.register('service:network', NodeNetworkService);
        }
      };
         export default {
        name: 'network-service',
        initialize: initialize
      };
      ```
         ```app/routes/post.js
      import Route from '@ember/routing/route';
      import { service } from '@ember/service';
         // An example of how the (hypothetical) service is used in routes.
         export default class IndexRoute extends Route {
        @service network;
           model(params) {
          return this.network.fetch(`/api/posts/${params.post_id}.json`);
        }
           afterModel(post) {
          if (post.isExternalContent) {
            return this.network.fetch(`/api/external/?url=${post.externalURL}`);
          } else {
            return post;
          }
        }
      }
      ```
         ```javascript
      // Finally, put all the pieces together
         function discoverResourcesFor(url) {
        return MyApp.visit(url, { isBrowser: false, shouldRender: false }).then(instance => {
          let networkService = instance.lookup('service:network');
          return networkService.requests; // => { "/api/posts/123.json": "..." }
        });
      }
      ```
         @public
      @method visit
      @param url {String} The initial URL to navigate to
      @param options {ApplicationInstance.BootOptions}
      @return {Promise<ApplicationInstance, Error>}
    */
    visit(url, options) {
      (true && !(!this.isDestroyed) && (0, _debug.assert)('You cannot visit this application since it has already been destroyed', !this.isDestroyed));
      (true && !(!this.isDestroying) && (0, _debug.assert)('You cannot visit this application since it is being destroyed', !this.isDestroying));
      return this.boot().then(() => {
        var instance = this.buildInstance();
        return instance.boot(options).then(() => instance.visit(url)).catch(error => {
          (0, _runloop.run)(instance, 'destroy');
          throw error;
        });
      });
    }
  }
  _exports.default = Application;
  Application.initializer = (0, _engine.buildInitializerMethod)('initializers', 'initializer');
  Application.instanceInitializer = (0, _engine.buildInitializerMethod)('instanceInitializers', 'instance initializer');
  function commonSetupRegistry(registry) {
    registry.register('router:main', _router.default);
    registry.register('-view-registry:main', {
      create() {
        return (0, _utils.dictionary)(null);
      }
    });
    registry.register('route:basic', _route.default);
    registry.register('event_dispatcher:main', _views.EventDispatcher);
    registry.register('location:auto', _autoLocation.default);
    registry.register('location:hash', _hashLocation.default);
    registry.register('location:history', _historyLocation.default);
    registry.register('location:none', _noneLocation.default);
    registry.register((0, _container.privatize)`-bucket-cache:main`, {
      create() {
        return new _internals.BucketCache();
      }
    });
    registry.register('service:router', _routerService.default);
  }
});
define("@ember/application/instance", ["exports", "@ember/object", "@ember/-internals/browser-environment", "@ember/engine/instance", "@ember/-internals/glimmer", "@ember/debug", "@ember/routing/router", "@ember/-internals/views"], function (_exports, _object, environment, _instance, _glimmer, _debug, _router, _views) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module @ember/application
  */

  /**
    The `ApplicationInstance` encapsulates all of the stateful aspects of a
    running `Application`.
  
    At a high-level, we break application boot into two distinct phases:
  
    * Definition time, where all of the classes, templates, and other
      dependencies are loaded (typically in the browser).
    * Run time, where we begin executing the application once everything
      has loaded.
  
    Definition time can be expensive and only needs to happen once since it is
    an idempotent operation. For example, between test runs and FastBoot
    requests, the application stays the same. It is only the state that we want
    to reset.
  
    That state is what the `ApplicationInstance` manages: it is responsible for
    creating the container that contains all application state, and disposing of
    it once the particular test run or FastBoot request has finished.
  
    @public
    @class ApplicationInstance
    @extends EngineInstance
  */
  class ApplicationInstance extends _instance.default {
    constructor() {
      super(...arguments);
      /**
        The root DOM element of the Application as an element or a
        CSS selector.
               @private
        @property {String|DOMElement} rootElement
      */
      this.rootElement = null;
    }
    init(properties) {
      super.init(properties);
      this.application._watchInstance(this);
      // Register this instance in the per-instance registry.
      //
      // Why do we need to register the instance in the first place?
      // Because we need a good way for the root route (a.k.a ApplicationRoute)
      // to notify us when it has created the root-most view. That view is then
      // appended to the rootElement, in the case of apps, to the fixture harness
      // in tests, or rendered to a string in the case of FastBoot.
      this.register('-application-instance:main', this, {
        instantiate: false
      });
    }
    /**
      Overrides the base `EngineInstance._bootSync` method with concerns relevant
      to booting application (instead of engine) instances.
         This method should only contain synchronous boot concerns. Asynchronous
      boot concerns should eventually be moved to the `boot` method, which
      returns a promise.
         Until all boot code has been made asynchronous, we need to continue to
      expose this method for use *internally* in places where we need to boot an
      instance synchronously.
         @private
    */
    _bootSync(options) {
      if (this._booted) {
        return this;
      }
      options = new _BootOptions(options);
      this.setupRegistry(options);
      if (options.rootElement) {
        this.rootElement = options.rootElement;
      } else {
        this.rootElement = this.application.rootElement;
      }
      if (options.location) {
        (0, _object.set)(this.router, 'location', options.location);
      }
      this.application.runInstanceInitializers(this);
      if (options.isInteractive) {
        this.setupEventDispatcher();
      }
      this._booted = true;
      return this;
    }
    setupRegistry(options) {
      this.constructor.setupRegistry(this.__registry__, options);
    }
    get router() {
      if (!this._router) {
        var router = this.lookup('router:main');
        (true && !(router instanceof _router.default) && (0, _debug.assert)('expected an instance of Router', router instanceof _router.default));
        this._router = router;
      }
      return this._router;
    }
    /**
      This hook is called by the root-most Route (a.k.a. the ApplicationRoute)
      when it has finished creating the root View. By default, we simply take the
      view and append it to the `rootElement` specified on the Application.
         In cases like FastBoot and testing, we can override this hook and implement
      custom behavior, such as serializing to a string and sending over an HTTP
      socket rather than appending to DOM.
         @param view {Ember.View} the root-most view
      @deprecated
      @private
    */
    didCreateRootView(view) {
      view.appendTo(this.rootElement);
    }
    /**
      Tells the router to start routing. The router will ask the location for the
      current URL of the page to determine the initial URL to start routing to.
      To start the app at a specific URL, call `handleURL` instead.
         @private
    */
    startRouting() {
      this.router.startRouting();
    }
    /**
      Sets up the router, initializing the child router and configuring the
      location before routing begins.
         Because setup should only occur once, multiple calls to `setupRouter`
      beyond the first call have no effect.
         This is commonly used in order to confirm things that rely on the router
      are functioning properly from tests that are primarily rendering related.
         For example, from within [ember-qunit](https://github.com/emberjs/ember-qunit)'s
      `setupRenderingTest` calling `this.owner.setupRouter()` would allow that
      rendering test to confirm that any `<LinkTo></LinkTo>`'s that are rendered
      have the correct URL.
         @public
    */
    setupRouter() {
      this.router.setupRouter();
    }
    /**
      Directs the router to route to a particular URL. This is useful in tests,
      for example, to tell the app to start at a particular URL.
         @param url {String} the URL the router should route to
      @private
    */
    handleURL(url) {
      this.setupRouter();
      return this.router.handleURL(url);
    }
    /**
      @private
    */
    setupEventDispatcher() {
      var dispatcher = this.lookup('event_dispatcher:main');
      (true && !(dispatcher instanceof _views.EventDispatcher) && (0, _debug.assert)('expected EventDispatcher', dispatcher instanceof _views.EventDispatcher));
      var applicationCustomEvents = (0, _object.get)(this.application, 'customEvents');
      var instanceCustomEvents = (0, _object.get)(this, 'customEvents');
      var customEvents = Object.assign({}, applicationCustomEvents, instanceCustomEvents);
      (true && !(this.rootElement === null || typeof this.rootElement === 'string' || this.rootElement instanceof Element) && (0, _debug.assert)('[BUG] Tried to set up dispatcher with an invalid root element', this.rootElement === null || typeof this.rootElement === 'string' || this.rootElement instanceof Element));
      dispatcher.setup(customEvents, this.rootElement);
      return dispatcher;
    }
    /**
      Returns the current URL of the app instance. This is useful when your
      app does not update the browsers URL bar (i.e. it uses the `'none'`
      location adapter).
         @public
      @return {String} the current URL
    */
    getURL() {
      return this.router.url;
    }
    // `instance.visit(url)` should eventually replace `instance.handleURL()`;
    // the test helpers can probably be switched to use this implementation too
    /**
      Navigate the instance to a particular URL. This is useful in tests, for
      example, or to tell the app to start at a particular URL. This method
      returns a promise that resolves with the app instance when the transition
      is complete, or rejects if the transition was aborted due to an error.
         @public
      @param url {String} the destination URL
      @return {Promise<ApplicationInstance>}
    */
    visit(url) {
      this.setupRouter();
      var bootOptions = this.__container__.lookup('-environment:main');
      var router = this.router;
      var handleTransitionResolve = () => {
        if (!bootOptions.options.shouldRender) {
          // No rendering is needed, and routing has completed, simply return.
          return this;
        } else {
          // Ensure that the visit promise resolves when all rendering has completed
          return (0, _glimmer.renderSettled)().then(() => this);
        }
      };
      var handleTransitionReject = error => {
        if (error.error) {
          throw error.error;
        } else if (error.name === 'TransitionAborted' && router._routerMicrolib.activeTransition) {
          return router._routerMicrolib.activeTransition.then(handleTransitionResolve, handleTransitionReject);
        } else if (error.name === 'TransitionAborted') {
          throw new Error(error.message);
        } else {
          throw error;
        }
      };
      var location = (0, _object.get)(router, 'location');
      (true && !(typeof location !== 'string') && (0, _debug.assert)('location has been initialized', typeof location !== 'string')); // Keeps the location adapter's internal URL in-sync
      location.setURL(url);
      // getURL returns the set url with the rootURL stripped off
      return router.handleURL(location.getURL()).then(handleTransitionResolve, handleTransitionReject);
    }
    willDestroy() {
      super.willDestroy();
      this.application._unwatchInstance(this);
    }
    /**
     @private
     @method setupRegistry
     @param {Registry} registry
     @param {BootOptions} options
    */
    static setupRegistry(registry, options) {
      if (options === void 0) {
        options = {};
      }
      var coptions = options instanceof _BootOptions ? options : new _BootOptions(options);
      registry.register('-environment:main', coptions.toEnvironment(), {
        instantiate: false
      });
      registry.register('service:-document', coptions.document, {
        instantiate: false
      });
      super.setupRegistry(registry, coptions);
    }
  }
  /**
    A list of boot-time configuration options for customizing the behavior of
    an `ApplicationInstance`.
  
    This is an interface class that exists purely to document the available
    options; you do not need to construct it manually. Simply pass a regular
    JavaScript object containing the desired options into methods that require
    one of these options object:
  
    ```javascript
    MyApp.visit("/", { location: "none", rootElement: "#container" });
    ```
  
    Not all combinations of the supported options are valid. See the documentation
    on `Application#visit` for the supported configurations.
  
    Internal, experimental or otherwise unstable flags are marked as private.
  
    @class BootOptions
    @namespace ApplicationInstance
    @public
  */
  class _BootOptions {
    constructor(options) {
      if (options === void 0) {
        options = {};
      }
      /**
        If present, overrides the router's `location` property with this
        value. This is useful for environments where trying to modify the
        URL would be inappropriate.
               @property location
        @type string
        @default null
        @public
      */
      this.location = null;
      this.isInteractive = Boolean(environment.hasDOM); // This default is overridable below
      this._renderMode = options._renderMode;
      if (options.isBrowser !== undefined) {
        this.isBrowser = Boolean(options.isBrowser);
      } else {
        this.isBrowser = Boolean(environment.hasDOM);
      }
      if (!this.isBrowser) {
        this.isInteractive = false;
        this.location = 'none';
      }
      if (options.shouldRender !== undefined) {
        this.shouldRender = Boolean(options.shouldRender);
      } else {
        this.shouldRender = true;
      }
      if (!this.shouldRender) {
        this.isInteractive = false;
      }
      if (options.document) {
        this.document = options.document;
      } else {
        this.document = typeof document !== 'undefined' ? document : null;
      }
      if (options.rootElement) {
        this.rootElement = options.rootElement;
      }
      // Set these options last to give the user a chance to override the
      // defaults from the "combo" options like `isBrowser` (although in
      // practice, the resulting combination is probably invalid)
      if (options.location !== undefined) {
        this.location = options.location;
      }
      if (options.isInteractive !== undefined) {
        this.isInteractive = Boolean(options.isInteractive);
      }
    }
    toEnvironment() {
      // Do we really want to assign all of this!?
      return Object.assign(Object.assign({}, environment), {
        // For compatibility with existing code
        hasDOM: this.isBrowser,
        isInteractive: this.isInteractive,
        _renderMode: this._renderMode,
        options: this
      });
    }
  }
  var _default = ApplicationInstance;
  _exports.default = _default;
});
define("@ember/application/lib/lazy_load", ["exports", "@ember/-internals/environment", "@ember/-internals/browser-environment"], function (_exports, _environment, _browserEnvironment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports._loaded = void 0;
  _exports.onLoad = onLoad;
  _exports.runLoadHooks = runLoadHooks;
  /*globals CustomEvent */

  /**
    @module @ember/application
  */
  var loadHooks = _environment.ENV.EMBER_LOAD_HOOKS || {};
  var loaded = {};
  var _loaded = loaded;
  /**
    Detects when a specific package of Ember (e.g. 'Application')
    has fully loaded and is available for extension.
  
    The provided `callback` will be called with the `name` passed
    resolved from a string into the object:
  
    ``` javascript
    import { onLoad } from '@ember/application';
  
    onLoad('Ember.Application' function(hbars) {
      hbars.registerHelper(...);
    });
    ```
  
    @method onLoad
    @static
    @for @ember/application
    @param name {String} name of hook
    @param callback {Function} callback to be called
    @private
  */
  _exports._loaded = _loaded;
  function onLoad(name, callback) {
    var _a;
    var object = loaded[name];
    var hooks = (_a = loadHooks[name]) !== null && _a !== void 0 ? _a : loadHooks[name] = [];
    hooks.push(callback);
    if (object) {
      callback(object);
    }
  }
  /**
    Called when an Ember.js package (e.g Application) has finished
    loading. Triggers any callbacks registered for this event.
  
    @method runLoadHooks
    @static
    @for @ember/application
    @param name {String} name of hook
    @param object {Object} object to pass to callbacks
    @private
  */
  function runLoadHooks(name, object) {
    var _a;
    loaded[name] = object;
    if (_browserEnvironment.window && typeof CustomEvent === 'function') {
      var event = new CustomEvent(name, {
        detail: object
      });
      _browserEnvironment.window.dispatchEvent(event);
    }
    (_a = loadHooks[name]) === null || _a === void 0 ? void 0 : _a.forEach(callback => callback(object));
  }
});
define("@ember/application/namespace", ["exports", "@ember/-internals/metal", "@ember/object", "@ember/-internals/utils", "@ember/debug"], function (_exports, _metal, _object, _utils, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module @ember/application/namespace
  */
  // Preloaded into namespaces

  /**
    A Namespace is an object usually used to contain other objects or methods
    such as an application or framework. Create a namespace anytime you want
    to define one of these new containers.
  
    # Example Usage
  
    ```javascript
    MyFramework = Ember.Namespace.create({
      VERSION: '1.0.0'
    });
    ```
  
    @class Namespace
    @extends EmberObject
    @public
  */
  class Namespace extends _object.default {
    init(properties) {
      super.init(properties);
      (0, _metal.addNamespace)(this);
    }
    toString() {
      var existing_name = (0, _object.get)(this, 'name') || (0, _object.get)(this, 'modulePrefix');
      if (existing_name) {
        (true && !(typeof existing_name === 'string') && (0, _debug.assert)("name wasn't a string", typeof existing_name === 'string'));
        return existing_name;
      }
      (0, _metal.findNamespaces)();
      var name = (0, _utils.getName)(this);
      if (name === undefined) {
        name = (0, _utils.guidFor)(this);
        (0, _utils.setName)(this, name);
      }
      return name;
    }
    nameClasses() {
      (0, _metal.processNamespace)(this);
    }
    destroy() {
      (0, _metal.removeNamespace)(this);
      return super.destroy();
    }
  }
  Namespace.NAMESPACES = _metal.NAMESPACES;
  Namespace.NAMESPACES_BY_ID = _metal.NAMESPACES_BY_ID;
  Namespace.processAll = _metal.processAllNamespaces;
  Namespace.byName = _metal.findNamespace;
  // Declare on the prototype to have a single shared value.
  Namespace.prototype.isNamespace = true;
  var _default = Namespace;
  _exports.default = _default;
});
define("@ember/array/-internals", ["exports", "@glimmer/util"], function (_exports, _util) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.isEmberArray = isEmberArray;
  _exports.setEmberArray = setEmberArray;
  var EMBER_ARRAYS = new _util._WeakSet();
  function setEmberArray(obj) {
    EMBER_ARRAYS.add(obj);
  }
  function isEmberArray(obj) {
    return EMBER_ARRAYS.has(obj);
  }
});
define("@ember/array/index", ["exports", "@ember/-internals/metal", "@ember/object", "@ember/object/mixin", "@ember/debug", "@ember/enumerable", "@ember/enumerable/mutable", "@ember/utils", "@ember/-internals/environment", "@ember/object/observable", "@ember/array/-internals", "@ember/array/lib/make-array"], function (_exports, _metal, _object, _mixin, _debug, _enumerable, _mutable, _utils, _environment, _observable, _internals, _makeArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports.NativeArray = _exports.MutableArray = _exports.A = void 0;
  _exports.isArray = isArray;
  Object.defineProperty(_exports, "makeArray", {
    enumerable: true,
    get: function () {
      return _makeArray.default;
    }
  });
  _exports.removeAt = removeAt;
  _exports.uniqBy = uniqBy;
  /**
  @module @ember/array
  */

  var EMPTY_ARRAY = Object.freeze([]);
  var identityFunction = item => item;
  function uniqBy(array, keyOrFunc) {
    if (keyOrFunc === void 0) {
      keyOrFunc = identityFunction;
    }
    (true && !(isArray(array)) && (0, _debug.assert)(`first argument passed to \`uniqBy\` should be array`, isArray(array)));
    var ret = A();
    var seen = new Set();
    var getter = typeof keyOrFunc === 'function' ? keyOrFunc : item => (0, _object.get)(item, keyOrFunc);
    array.forEach(item => {
      var val = getter(item);
      if (!seen.has(val)) {
        seen.add(val);
        ret.push(item);
      }
    });
    return ret;
  }
  function iter() {
    for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {
      args[_key2] = arguments[_key2];
    }
    var valueProvided = args.length === 2;
    var [key, value] = args;
    return valueProvided ? item => value === (0, _object.get)(item, key) : item => Boolean((0, _object.get)(item, key));
  }
  function findIndex(array, predicate, startAt) {
    var len = array.length;
    for (var index = startAt; index < len; index++) {
      // SAFETY: Because we're checking the index this value should always be set.
      var item = (0, _metal.objectAt)(array, index);
      if (predicate(item, index, array)) {
        return index;
      }
    }
    return -1;
  }
  function find(array, callback, target) {
    if (target === void 0) {
      target = null;
    }
    var predicate = callback.bind(target);
    var index = findIndex(array, predicate, 0);
    return index === -1 ? undefined : (0, _metal.objectAt)(array, index);
  }
  function any(array, callback, target) {
    if (target === void 0) {
      target = null;
    }
    var predicate = callback.bind(target);
    return findIndex(array, predicate, 0) !== -1;
  }
  function every(array, callback, target) {
    if (target === void 0) {
      target = null;
    }
    var cb = callback.bind(target);
    var predicate = (item, index, array) => !cb(item, index, array);
    return findIndex(array, predicate, 0) === -1;
  }
  function indexOf(array, val, startAt, withNaNCheck) {
    if (startAt === void 0) {
      startAt = 0;
    }
    var len = array.length;
    if (startAt < 0) {
      startAt += len;
    }
    // SameValueZero comparison (NaN !== NaN)
    var predicate = withNaNCheck && val !== val ? item => item !== item : item => item === val;
    return findIndex(array, predicate, startAt);
  }
  function removeAt(array, index, len) {
    (true && !(index > -1 && index < array.length) && (0, _debug.assert)(`\`removeAt\` index provided is out of range`, index > -1 && index < array.length));
    (0, _metal.replace)(array, index, len !== null && len !== void 0 ? len : 1, EMPTY_ARRAY);
    return array;
  }
  function insertAt(array, index, item) {
    (true && !(index > -1 && index <= array.length) && (0, _debug.assert)(`\`insertAt\` index provided is out of range`, index > -1 && index <= array.length));
    (0, _metal.replace)(array, index, 0, [item]);
    return item;
  }
  /**
    Returns true if the passed object is an array or Array-like.
  
    Objects are considered Array-like if any of the following are true:
  
      - the object is a native Array
      - the object has an objectAt property
      - the object is an Object, and has a length property
  
    Unlike `typeOf` this method returns true even if the passed object is
    not formally an array but appears to be array-like (i.e. implements `Array`)
  
    ```javascript
    import { isArray } from '@ember/array';
    import ArrayProxy from '@ember/array/proxy';
  
    isArray();                                      // false
    isArray([]);                                    // true
    isArray(ArrayProxy.create({ content: [] }));    // true
    ```
  
    @method isArray
    @static
    @for @ember/array
    @param {Object} obj The object to test
    @return {Boolean} true if the passed object is an array or Array-like
    @public
  */
  function isArray(obj) {
    if (true /* DEBUG */ && typeof obj === 'object' && obj !== null) {
      // SAFETY: Property read checks are safe if it's an object
      var possibleProxyContent = obj[_metal.PROXY_CONTENT];
      if (possibleProxyContent !== undefined) {
        obj = possibleProxyContent;
      }
    }
    // SAFETY: Property read checks are safe if it's an object
    if (!obj || obj.setInterval) {
      return false;
    }
    if (Array.isArray(obj) || EmberArray.detect(obj)) {
      return true;
    }
    var type = (0, _utils.typeOf)(obj);
    if ('array' === type) {
      return true;
    }
    // SAFETY: Property read checks are safe if it's an object
    var length = obj.length;
    if (typeof length === 'number' && length === length && 'object' === type) {
      return true;
    }
    return false;
  }
  /*
    This allows us to define computed properties that are not enumerable.
    The primary reason this is important is that when `NativeArray` is
    applied to `Array.prototype` we need to ensure that we do not add _any_
    new enumerable properties.
  */
  function nonEnumerableComputed(callback) {
    var property = (0, _metal.computed)(callback);
    property.enumerable = false;
    return property;
  }
  function mapBy(key) {
    return this.map(next => (0, _object.get)(next, key));
  }
  var EmberArray = _mixin.default.create(_enumerable.default, {
    init() {
      this._super(...arguments);
      (0, _internals.setEmberArray)(this);
    },
    objectsAt(indexes) {
      return indexes.map(idx => (0, _metal.objectAt)(this, idx));
    },
    '[]': nonEnumerableComputed({
      get() {
        return this;
      },
      set(_key, value) {
        this.replace(0, this.length, value);
        return this;
      }
    }),
    firstObject: nonEnumerableComputed(function () {
      return (0, _metal.objectAt)(this, 0);
    }).readOnly(),
    lastObject: nonEnumerableComputed(function () {
      return (0, _metal.objectAt)(this, this.length - 1);
    }).readOnly(),
    // Add any extra methods to EmberArray that are native to the built-in Array.
    slice(beginIndex, endIndex) {
      if (beginIndex === void 0) {
        beginIndex = 0;
      }
      var ret = A();
      var length = this.length;
      if (beginIndex < 0) {
        beginIndex = length + beginIndex;
      }
      var validatedEndIndex;
      if (endIndex === undefined || endIndex > length) {
        validatedEndIndex = length;
      } else if (endIndex < 0) {
        validatedEndIndex = length + endIndex;
      } else {
        validatedEndIndex = endIndex;
      }
      while (beginIndex < validatedEndIndex) {
        ret[ret.length] = (0, _metal.objectAt)(this, beginIndex++);
      }
      return ret;
    },
    indexOf(object, startAt) {
      return indexOf(this, object, startAt, false);
    },
    lastIndexOf(object, startAt) {
      var len = this.length;
      if (startAt === undefined || startAt >= len) {
        startAt = len - 1;
      }
      if (startAt < 0) {
        startAt += len;
      }
      for (var idx = startAt; idx >= 0; idx--) {
        if ((0, _metal.objectAt)(this, idx) === object) {
          return idx;
        }
      }
      return -1;
    },
    forEach(callback, target) {
      if (target === void 0) {
        target = null;
      }
      (true && !(typeof callback === 'function') && (0, _debug.assert)('`forEach` expects a function as first argument.', typeof callback === 'function'));
      var length = this.length;
      for (var index = 0; index < length; index++) {
        var item = this.objectAt(index);
        callback.call(target, item, index, this);
      }
      return this;
    },
    getEach: mapBy,
    setEach(key, value) {
      return this.forEach(item => (0, _object.set)(item, key, value));
    },
    map(callback, target) {
      if (target === void 0) {
        target = null;
      }
      (true && !(typeof callback === 'function') && (0, _debug.assert)('`map` expects a function as first argument.', typeof callback === 'function'));
      var ret = A();
      this.forEach((x, idx, i) => ret[idx] = callback.call(target, x, idx, i));
      return ret;
    },
    mapBy,
    filter(callback, target) {
      if (target === void 0) {
        target = null;
      }
      (true && !(typeof callback === 'function') && (0, _debug.assert)('`filter` expects a function as first argument.', typeof callback === 'function'));
      var ret = A();
      this.forEach((x, idx, i) => {
        if (callback.call(target, x, idx, i)) {
          ret.push(x);
        }
      });
      return ret;
    },
    reject(callback, target) {
      if (target === void 0) {
        target = null;
      }
      (true && !(typeof callback === 'function') && (0, _debug.assert)('`reject` expects a function as first argument.', typeof callback === 'function'));
      return this.filter(function () {
        // @ts-expect-error TS doesn't like us using arguments like this
        return !callback.apply(target, arguments);
      });
    },
    filterBy() {
      // @ts-expect-error TS doesn't like the ...arguments spread here.
      return this.filter(iter(...arguments));
    },
    rejectBy() {
      // @ts-expect-error TS doesn't like the ...arguments spread here.
      return this.reject(iter(...arguments));
    },
    find(callback, target) {
      if (target === void 0) {
        target = null;
      }
      (true && !(typeof callback === 'function') && (0, _debug.assert)('`find` expects a function as first argument.', typeof callback === 'function'));
      return find(this, callback, target);
    },
    findBy() {
      // @ts-expect-error TS doesn't like the ...arguments spread here.
      var callback = iter(...arguments);
      return find(this, callback);
    },
    every(callback, target) {
      if (target === void 0) {
        target = null;
      }
      (true && !(typeof callback === 'function') && (0, _debug.assert)('`every` expects a function as first argument.', typeof callback === 'function'));
      return every(this, callback, target);
    },
    isEvery() {
      // @ts-expect-error TS doesn't like the ...arguments spread here.
      var callback = iter(...arguments);
      return every(this, callback);
    },
    any(callback, target) {
      if (target === void 0) {
        target = null;
      }
      (true && !(typeof callback === 'function') && (0, _debug.assert)('`any` expects a function as first argument.', typeof callback === 'function'));
      return any(this, callback, target);
    },
    isAny() {
      // @ts-expect-error TS doesn't like us using arguments like this
      var callback = iter(...arguments);
      return any(this, callback);
    },
    // FIXME: When called without initialValue, behavior does not match native behavior
    reduce(callback, initialValue) {
      (true && !(typeof callback === 'function') && (0, _debug.assert)('`reduce` expects a function as first argument.', typeof callback === 'function'));
      var ret = initialValue;
      this.forEach(function (item, i) {
        ret = callback(ret, item, i, this);
      }, this);
      return ret;
    },
    invoke(methodName) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key3 = 1; _key3 < _len2; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }
      var ret = A();
      // SAFETY: This is not entirely safe and the code will not work with Ember proxies
      this.forEach(item => {
        var _a, _b;
        return ret.push((_b = (_a = item)[methodName]) === null || _b === void 0 ? void 0 : _b.call(_a, ...args));
      });
      return ret;
    },
    toArray() {
      return this.map(item => item);
    },
    compact() {
      return this.filter(value => value != null);
    },
    includes(object, startAt) {
      return indexOf(this, object, startAt, true) !== -1;
    },
    sortBy() {
      var sortKeys = arguments;
      return this.toArray().sort((a, b) => {
        for (var i = 0; i < sortKeys.length; i++) {
          var key = sortKeys[i];
          var propA = (0, _object.get)(a, key);
          var propB = (0, _object.get)(b, key);
          // return 1 or -1 else continue to the next sortKey
          var compareValue = (0, _utils.compare)(propA, propB);
          if (compareValue) {
            return compareValue;
          }
        }
        return 0;
      });
    },
    uniq() {
      return uniqBy(this);
    },
    uniqBy(key) {
      return uniqBy(this, key);
    },
    without(value) {
      if (!this.includes(value)) {
        return this; // nothing to do
      }
      // SameValueZero comparison (NaN !== NaN)
      var predicate = value === value ? item => item !== value : item => item === item;
      return this.filter(predicate);
    }
  });
  var MutableArray = _mixin.default.create(EmberArray, _mutable.default, {
    clear() {
      var len = this.length;
      if (len === 0) {
        return this;
      }
      this.replace(0, len, EMPTY_ARRAY);
      return this;
    },
    insertAt(idx, object) {
      insertAt(this, idx, object);
      return this;
    },
    removeAt(start, len) {
      return removeAt(this, start, len);
    },
    pushObject(obj) {
      return insertAt(this, this.length, obj);
    },
    pushObjects(objects) {
      this.replace(this.length, 0, objects);
      return this;
    },
    popObject() {
      var len = this.length;
      if (len === 0) {
        return null;
      }
      var ret = (0, _metal.objectAt)(this, len - 1);
      this.removeAt(len - 1, 1);
      return ret;
    },
    shiftObject() {
      if (this.length === 0) {
        return null;
      }
      var ret = (0, _metal.objectAt)(this, 0);
      this.removeAt(0);
      return ret;
    },
    unshiftObject(obj) {
      return insertAt(this, 0, obj);
    },
    unshiftObjects(objects) {
      this.replace(0, 0, objects);
      return this;
    },
    reverseObjects() {
      var len = this.length;
      if (len === 0) {
        return this;
      }
      var objects = this.toArray().reverse();
      this.replace(0, len, objects);
      return this;
    },
    setObjects(objects) {
      if (objects.length === 0) {
        return this.clear();
      }
      var len = this.length;
      this.replace(0, len, objects);
      return this;
    },
    removeObject(obj) {
      var loc = this.length || 0;
      while (--loc >= 0) {
        var curObject = (0, _metal.objectAt)(this, loc);
        if (curObject === obj) {
          this.removeAt(loc);
        }
      }
      return this;
    },
    removeObjects(objects) {
      (0, _metal.beginPropertyChanges)();
      for (var i = objects.length - 1; i >= 0; i--) {
        // SAFETY: Due to the loop structure we know this will always exist.
        this.removeObject(objects[i]);
      }
      (0, _metal.endPropertyChanges)();
      return this;
    },
    addObject(obj) {
      var included = this.includes(obj);
      if (!included) {
        this.pushObject(obj);
      }
      return this;
    },
    addObjects(objects) {
      (0, _metal.beginPropertyChanges)();
      objects.forEach(obj => this.addObject(obj));
      (0, _metal.endPropertyChanges)();
      return this;
    }
  });
  _exports.MutableArray = MutableArray;
  var NativeArray = _mixin.default.create(MutableArray, _observable.default, {
    objectAt(idx) {
      return this[idx];
    },
    // primitive for array support.
    replace(start, deleteCount, items) {
      if (items === void 0) {
        items = EMPTY_ARRAY;
      }
      (true && !(Array.isArray(items)) && (0, _debug.assert)('The third argument to replace needs to be an array.', Array.isArray(items)));
      (0, _metal.replaceInNativeArray)(this, start, deleteCount, items);
      return this;
    }
  });
  // Remove any methods implemented natively so we don't override them
  _exports.NativeArray = NativeArray;
  var ignore = ['length'];
  NativeArray.keys().forEach(methodName => {
    // SAFETY: It's safe to read unknown properties from an object
    if (Array.prototype[methodName]) {
      ignore.push(methodName);
    }
  });
  _exports.NativeArray = NativeArray = NativeArray.without(...ignore);
  var A;
  _exports.A = A;
  if (_environment.ENV.EXTEND_PROTOTYPES.Array) {
    NativeArray.apply(Array.prototype, true);
    _exports.A = A = function (arr) {
      (true && !(!(this instanceof A)) && (0, _debug.assert)('You cannot create an Ember Array with `new A()`, please update to calling A as a function: `A()`', !(this instanceof A))); // SAFTEY: Since we are extending prototypes all true native arrays are Ember NativeArrays
      return arr || [];
    };
  } else {
    _exports.A = A = function (arr) {
      (true && !(!(this instanceof A)) && (0, _debug.assert)('You cannot create an Ember Array with `new A()`, please update to calling A as a function: `A()`', !(this instanceof A)));
      if ((0, _internals.isEmberArray)(arr)) {
        // SAFETY: If it's a true native array and it is also an EmberArray then it should be an Ember NativeArray
        return arr;
      } else {
        // SAFETY: This will return an NativeArray but TS can't infer that.
        return NativeArray.apply(arr !== null && arr !== void 0 ? arr : []);
      }
    };
  }
  var _default = EmberArray;
  _exports.default = _default;
});
define("@ember/array/lib/make-array", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var {
    isArray
  } = Array;
  function makeArray(obj) {
    if (obj === null || obj === undefined) {
      return [];
    }
    return isArray(obj) ? obj : [obj];
  }
  var _default = makeArray;
  _exports.default = _default;
});
define("@ember/array/mutable", ["exports", "@ember/array"], function (_exports, _array) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _array.MutableArray;
    }
  });
});
define("@ember/array/proxy", ["exports", "@ember/-internals/metal", "@ember/object", "@ember/-internals/utils", "@ember/array", "@ember/array/mutable", "@ember/debug", "@glimmer/manager", "@glimmer/validator"], function (_exports, _metal, _object, _utils, _array, _mutable, _debug, _manager, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module @ember/array/proxy
  */

  function isMutable(obj) {
    return Array.isArray(obj) || typeof obj.replace === 'function';
  }
  var ARRAY_OBSERVER_MAPPING = {
    willChange: '_arrangedContentArrayWillChange',
    didChange: '_arrangedContentArrayDidChange'
  };
  function customTagForArrayProxy(proxy, key) {
    (true && !(proxy instanceof ArrayProxy) && (0, _debug.assert)('[BUG] Expected a proxy', proxy instanceof ArrayProxy));
    if (key === '[]') {
      proxy._revalidate();
      return proxy._arrTag;
    } else if (key === 'length') {
      proxy._revalidate();
      return proxy._lengthTag;
    }
    return (0, _validator.tagFor)(proxy, key);
  }
  class ArrayProxy extends _object.default {
    constructor() {
      super(...arguments);
      /*
        `this._objectsDirtyIndex` determines which indexes in the `this._objects`
        cache are dirty.
               If `this._objectsDirtyIndex === -1` then no indexes are dirty.
        Otherwise, an index `i` is dirty if `i >= this._objectsDirtyIndex`.
               Calling `objectAt` with a dirty index will cause the `this._objects`
        cache to be recomputed.
      */
      /** @internal */
      this._objectsDirtyIndex = 0;
      /** @internal */
      this._objects = null;
      /** @internal */
      this._lengthDirty = true;
      /** @internal */
      this._length = 0;
      /** @internal */
      this._arrangedContent = null;
      /** @internal */
      this._arrangedContentIsUpdating = false;
      /** @internal */
      this._arrangedContentTag = null;
      /** @internal */
      this._arrangedContentRevision = null;
      /** @internal */
      this._lengthTag = null;
      /** @internal */
      this._arrTag = null;
    }
    init(props) {
      super.init(props);
      (0, _manager.setCustomTagFor)(this, customTagForArrayProxy);
    }
    [_metal.PROPERTY_DID_CHANGE]() {
      this._revalidate();
    }
    willDestroy() {
      this._removeArrangedContentArrayObserver();
    }
    objectAtContent(idx) {
      var arrangedContent = (0, _object.get)(this, 'arrangedContent');
      (true && !(arrangedContent) && (0, _debug.assert)('[BUG] Called objectAtContent without content', arrangedContent));
      return (0, _metal.objectAt)(arrangedContent, idx);
    }
    // See additional docs for `replace` from `MutableArray`:
    // https://api.emberjs.com/ember/release/classes/MutableArray/methods/replace?anchor=replace
    replace(idx, amt, objects) {
      (true && !((0, _object.get)(this, 'arrangedContent') === (0, _object.get)(this, 'content')) && (0, _debug.assert)('Mutating an arranged ArrayProxy is not allowed', (0, _object.get)(this, 'arrangedContent') === (0, _object.get)(this, 'content')));
      this.replaceContent(idx, amt, objects);
    }
    replaceContent(idx, amt, objects) {
      var content = (0, _object.get)(this, 'content');
      (true && !(content) && (0, _debug.assert)('[BUG] Called replaceContent without content', content));
      (true && !(isMutable(content)) && (0, _debug.assert)('Mutating a non-mutable array is not allowed', isMutable(content)));
      (0, _metal.replace)(content, idx, amt, objects);
    }
    // Overriding objectAt is not supported.
    objectAt(idx) {
      this._revalidate();
      if (this._objects === null) {
        this._objects = [];
      }
      if (this._objectsDirtyIndex !== -1 && idx >= this._objectsDirtyIndex) {
        var arrangedContent = (0, _object.get)(this, 'arrangedContent');
        if (arrangedContent) {
          var length = this._objects.length = (0, _object.get)(arrangedContent, 'length');
          for (var i = this._objectsDirtyIndex; i < length; i++) {
            // SAFETY: This is expected to only ever return an instance of T. In other words, there should
            // be no gaps in the array. Unfortunately, we can't actually assert for it since T could include
            // any types, including null or undefined.
            this._objects[i] = this.objectAtContent(i);
          }
        } else {
          this._objects.length = 0;
        }
        this._objectsDirtyIndex = -1;
      }
      return this._objects[idx];
    }
    // Overriding length is not supported.
    get length() {
      this._revalidate();
      if (this._lengthDirty) {
        var arrangedContent = (0, _object.get)(this, 'arrangedContent');
        this._length = arrangedContent ? (0, _object.get)(arrangedContent, 'length') : 0;
        this._lengthDirty = false;
      }
      (true && !(this._lengthTag) && (0, _debug.assert)('[BUG] _lengthTag is not set', this._lengthTag));
      (0, _validator.consumeTag)(this._lengthTag);
      return this._length;
    }
    set length(value) {
      var length = this.length;
      var removedCount = length - value;
      var added;
      if (removedCount === 0) {
        return;
      } else if (removedCount < 0) {
        added = new Array(-removedCount);
        removedCount = 0;
      }
      var content = (0, _object.get)(this, 'content');
      if (content) {
        (true && !(isMutable(content)) && (0, _debug.assert)('Mutating a non-mutable array is not allowed', isMutable(content)));
        (0, _metal.replace)(content, value, removedCount, added);
        this._invalidate();
      }
    }
    _updateArrangedContentArray(arrangedContent) {
      var oldLength = this._objects === null ? 0 : this._objects.length;
      var newLength = arrangedContent ? (0, _object.get)(arrangedContent, 'length') : 0;
      this._removeArrangedContentArrayObserver();
      (0, _metal.arrayContentWillChange)(this, 0, oldLength, newLength);
      this._invalidate();
      (0, _metal.arrayContentDidChange)(this, 0, oldLength, newLength, false);
      this._addArrangedContentArrayObserver(arrangedContent);
    }
    _addArrangedContentArrayObserver(arrangedContent) {
      if (arrangedContent && !arrangedContent.isDestroyed) {
        // @ts-expect-error This check is still good for ensuring correctness
        (true && !(arrangedContent !== this) && (0, _debug.assert)("Can't set ArrayProxy's content to itself", arrangedContent !== this));
        (true && !(function (arr) {
          return Array.isArray(arr) || _array.default.detect(arr);
        }(arrangedContent)) && (0, _debug.assert)(`ArrayProxy expects a native Array, EmberArray, or ArrayProxy, but you passed ${typeof arrangedContent}`, function (arr) {
          return Array.isArray(arr) || _array.default.detect(arr);
        }(arrangedContent)));
        (true && !(!arrangedContent.isDestroyed) && (0, _debug.assert)('ArrayProxy expected its contents to not be destroyed', !arrangedContent.isDestroyed));
        (0, _metal.addArrayObserver)(arrangedContent, this, ARRAY_OBSERVER_MAPPING);
        this._arrangedContent = arrangedContent;
      }
    }
    _removeArrangedContentArrayObserver() {
      if (this._arrangedContent) {
        (0, _metal.removeArrayObserver)(this._arrangedContent, this, ARRAY_OBSERVER_MAPPING);
      }
    }
    _arrangedContentArrayWillChange() {}
    _arrangedContentArrayDidChange(_proxy, idx, removedCnt, addedCnt) {
      (0, _metal.arrayContentWillChange)(this, idx, removedCnt, addedCnt);
      var dirtyIndex = idx;
      if (dirtyIndex < 0) {
        var length = (0, _object.get)(this._arrangedContent, 'length');
        dirtyIndex += length + removedCnt - addedCnt;
      }
      if (this._objectsDirtyIndex === -1 || this._objectsDirtyIndex > dirtyIndex) {
        this._objectsDirtyIndex = dirtyIndex;
      }
      this._lengthDirty = true;
      (0, _metal.arrayContentDidChange)(this, idx, removedCnt, addedCnt, false);
    }
    _invalidate() {
      this._objectsDirtyIndex = 0;
      this._lengthDirty = true;
    }
    _revalidate() {
      if (this._arrangedContentIsUpdating === true) return;
      if (this._arrangedContentTag === null || !(0, _validator.validateTag)(this._arrangedContentTag, this._arrangedContentRevision)) {
        var arrangedContent = this.get('arrangedContent');
        if (this._arrangedContentTag === null) {
          // This is the first time the proxy has been setup, only add the observer
          // don't trigger any events
          this._addArrangedContentArrayObserver(arrangedContent);
        } else {
          this._arrangedContentIsUpdating = true;
          this._updateArrangedContentArray(arrangedContent);
          this._arrangedContentIsUpdating = false;
        }
        var arrangedContentTag = this._arrangedContentTag = (0, _validator.tagFor)(this, 'arrangedContent');
        this._arrangedContentRevision = (0, _validator.valueForTag)(this._arrangedContentTag);
        if ((0, _utils.isObject)(arrangedContent)) {
          this._lengthTag = (0, _validator.combine)([arrangedContentTag, (0, _metal.tagForProperty)(arrangedContent, 'length')]);
          this._arrTag = (0, _validator.combine)([arrangedContentTag, (0, _metal.tagForProperty)(arrangedContent, '[]')]);
        } else {
          this._lengthTag = this._arrTag = arrangedContentTag;
        }
      }
    }
  }
  ArrayProxy.reopen(_mutable.default, {
    arrangedContent: (0, _metal.alias)('content')
  });
  var _default = ArrayProxy;
  _exports.default = _default;
});
define("@ember/canary-features/index", ["exports", "@ember/-internals/environment"], function (_exports, _environment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.FEATURES = _exports.DEFAULT_FEATURES = void 0;
  _exports.isEnabled = isEnabled;
  /**
    Set `EmberENV.FEATURES` in your application's `config/environment.js` file
    to enable canary features in your application.
  
    See the [feature flag guide](https://guides.emberjs.com/release/configuring-ember/feature-flags/)
    for more details.
  
    @module @ember/canary-features
    @public
  */
  var DEFAULT_FEATURES = {
    // FLAG_NAME: true/false
  };
  /**
    The hash of enabled Canary features. Add to this, any canary features
    before creating your application.
  
    @class FEATURES
    @static
    @since 1.1.0
    @public
  */
  _exports.DEFAULT_FEATURES = DEFAULT_FEATURES;
  var FEATURES = Object.assign(DEFAULT_FEATURES, _environment.ENV.FEATURES);
  /**
    Determine whether the specified `feature` is enabled. Used by Ember's
    build tools to exclude experimental features from beta/stable builds.
  
    You can define the following configuration options:
  
    * `EmberENV.ENABLE_OPTIONAL_FEATURES` - enable any features that have not been explicitly
      enabled/disabled.
  
    @method isEnabled
    @param {String} feature The feature to check
    @return {Boolean}
    @since 1.1.0
    @public
  */
  _exports.FEATURES = FEATURES;
  function isEnabled(feature) {
    var value = FEATURES[feature];
    if (value === true || value === false) {
      return value;
    } else if (_environment.ENV.ENABLE_OPTIONAL_FEATURES) {
      return true;
    } else {
      return false;
    }
  }
  // Uncomment the below when features are present:
  // function featureValue(value: null | boolean) {
  //   if (ENV.ENABLE_OPTIONAL_FEATURES && value === null) {
  //     return true;
  //   }
  //   return value;
  // }
  // export const FLAG_NAME = featureValue(FEATURES.FLAG_NAME);
});
define("@ember/component/helper", ["exports", "@ember/-internals/glimmer"], function (_exports, _glimmer) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _glimmer.Helper;
    }
  });
  Object.defineProperty(_exports, "helper", {
    enumerable: true,
    get: function () {
      return _glimmer.helper;
    }
  });
});
define("@ember/component/index", ["exports", "@glimmer/manager", "@ember/-internals/glimmer"], function (_exports, _manager, _glimmer) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "Input", {
    enumerable: true,
    get: function () {
      return _glimmer.Input;
    }
  });
  Object.defineProperty(_exports, "Textarea", {
    enumerable: true,
    get: function () {
      return _glimmer.Textarea;
    }
  });
  Object.defineProperty(_exports, "capabilities", {
    enumerable: true,
    get: function () {
      return _glimmer.componentCapabilities;
    }
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _glimmer.Component;
    }
  });
  Object.defineProperty(_exports, "getComponentTemplate", {
    enumerable: true,
    get: function () {
      return _manager.getComponentTemplate;
    }
  });
  Object.defineProperty(_exports, "setComponentManager", {
    enumerable: true,
    get: function () {
      return _glimmer.setComponentManager;
    }
  });
  Object.defineProperty(_exports, "setComponentTemplate", {
    enumerable: true,
    get: function () {
      return _manager.setComponentTemplate;
    }
  });
});
define("@ember/component/template-only", ["exports", "@glimmer/runtime"], function (_exports, _runtime) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _runtime.templateOnlyComponent;
    }
  });
});
define("@ember/controller/index", ["exports", "@ember/-internals/owner", "@ember/object", "@ember/object/-internals", "@ember/-internals/metal", "@ember/object/mixin", "@ember/routing/-internals", "@ember/-internals/runtime", "@ember/-internals/utils"], function (_exports, _owner, _object, _internals, _metal, _mixin, _internals2, _runtime, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports.ControllerMixin = void 0;
  _exports.inject = inject;
  // This is imported from -internals to avoid circularity

  var MODEL = (0, _utils.symbol)('MODEL');
  var ControllerMixin = _mixin.default.create(_runtime.ActionHandler, {
    /* ducktype as a controller */
    isController: true,
    concatenatedProperties: ['queryParams'],
    target: null,
    store: null,
    init() {
      this._super(...arguments);
      var owner = (0, _owner.getOwner)(this);
      if (owner) {
        this.namespace = owner.lookup('application:main');
        this.target = owner.lookup('router:main');
      }
    },
    model: (0, _object.computed)({
      get() {
        return this[MODEL];
      },
      set(_key, value) {
        return this[MODEL] = value;
      }
    }),
    queryParams: null,
    /**
     This property is updated to various different callback functions depending on
     the current "state" of the backing route. It is used by
     `Controller.prototype._qpChanged`.
        The methods backing each state can be found in the `Route.prototype._qp` computed
     property return value (the `.states` property). The current values are listed here for
     the sanity of future travelers:
        * `inactive` - This state is used when this controller instance is not part of the active
       route hierarchy. Set in `Route.prototype._reset` (a `router.js` microlib hook) and
       `Route.prototype.actions.finalizeQueryParamChange`.
     * `active` - This state is used when this controller instance is part of the active
       route hierarchy. Set in `Route.prototype.actions.finalizeQueryParamChange`.
     * `allowOverrides` - This state is used in `Route.prototype.setup` (`route.js` microlib hook).
         @method _qpDelegate
      @private
    */
    _qpDelegate: null,
    /**
     During `Route#setup` observers are created to invoke this method
     when any of the query params declared in `Controller#queryParams` property
     are changed.
        When invoked this method uses the currently active query param update delegate
     (see `Controller.prototype._qpDelegate` for details) and invokes it with
     the QP key/value being changed.
         @method _qpChanged
      @private
    */
    _qpChanged(controller, _prop) {
      var dotIndex = _prop.indexOf('.[]');
      var prop = dotIndex === -1 ? _prop : _prop.slice(0, dotIndex);
      var delegate = controller._qpDelegate;
      var value = (0, _object.get)(controller, prop);
      delegate(prop, value);
    },
    transitionToRoute() {
      var _a;
      (0, _internals2.deprecateTransitionMethods)('controller', 'transitionToRoute');
      // target may be either another controller or a router
      var target = (0, _object.get)(this, 'target');
      // SAFETY: We can't actually assert that this is a full Controller or Router since some tests
      // mock out an object that only has the single method. Since this is deprecated, I think it's
      // ok to be a little less than proper here.
      var method = (_a = target.transitionToRoute) !== null && _a !== void 0 ? _a : target.transitionTo;
      for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return method.apply(target, (0, _internals2.prefixRouteNameArg)(this, args));
    },
    replaceRoute() {
      var _a;
      (0, _internals2.deprecateTransitionMethods)('controller', 'replaceRoute');
      // target may be either another controller or a router
      var target = (0, _object.get)(this, 'target');
      // SAFETY: We can't actually assert that this is a full Controller or Router since some tests
      // mock out an object that only has the single method. Since this is deprecated, I think it's
      // ok to be a little less than proper here.
      var method = (_a = target.replaceRoute) !== null && _a !== void 0 ? _a : target.replaceWith;
      for (var _len2 = arguments.length, args = new Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {
        args[_key3] = arguments[_key3];
      }
      return method.apply(target, (0, _internals2.prefixRouteNameArg)(this, args));
    }
  });
  _exports.ControllerMixin = ControllerMixin;
  class Controller extends _internals.FrameworkObject.extend(ControllerMixin) {}
  _exports.default = Controller;
  function inject() {
    for (var _len3 = arguments.length, args = new Array(_len3), _key4 = 0; _key4 < _len3; _key4++) {
      args[_key4] = arguments[_key4];
    }
    return (0, _metal.inject)('controller', ...args);
  }
});
define("@ember/debug/container-debug-adapter", ["exports", "@ember/-internals/string", "@ember/object", "@ember/utils", "@ember/-internals/owner", "@ember/application/namespace"], function (_exports, _string, _object, _utils, _owner, _namespace) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module @ember/debug/container-debug-adapter
  */
  /**
    The `ContainerDebugAdapter` helps the container and resolver interface
    with tools that debug Ember such as the
    [Ember Inspector](https://github.com/emberjs/ember-inspector)
    for Chrome and Firefox.
  
    This class can be extended by a custom resolver implementer
    to override some of the methods with library-specific code.
  
    The methods likely to be overridden are:
  
    * `canCatalogEntriesByType`
    * `catalogEntriesByType`
  
    The adapter will need to be registered
    in the application's container as `container-debug-adapter:main`.
  
    Example:
  
    ```javascript
    Application.initializer({
      name: "containerDebugAdapter",
  
      initialize(application) {
        application.register('container-debug-adapter:main', require('app/container-debug-adapter'));
      }
    });
    ```
  
    @class ContainerDebugAdapter
    @extends EmberObject
    @since 1.5.0
    @public
  */
  class ContainerDebugAdapter extends _object.default {
    constructor(owner) {
      super(owner);
      this.resolver = (0, _owner.getOwner)(this).lookup('resolver-for-debugging:main');
    }
    /**
      Returns true if it is possible to catalog a list of available
      classes in the resolver for a given type.
         @method canCatalogEntriesByType
      @param {String} type The type. e.g. "model", "controller", "route".
      @return {boolean} whether a list is available for this type.
      @public
    */
    canCatalogEntriesByType(type) {
      if (type === 'model' || type === 'template') {
        return false;
      }
      return true;
    }
    /**
      Returns the available classes a given type.
         @method catalogEntriesByType
      @param {String} type The type. e.g. "model", "controller", "route".
      @return {Array} An array of strings.
      @public
    */
    catalogEntriesByType(type) {
      var namespaces = _namespace.default.NAMESPACES;
      var types = [];
      var typeSuffixRegex = new RegExp(`${(0, _string.classify)(type)}$`);
      namespaces.forEach(namespace => {
        for (var key in namespace) {
          if (!Object.prototype.hasOwnProperty.call(namespace, key)) {
            continue;
          }
          if (typeSuffixRegex.test(key)) {
            var klass = namespace[key];
            if ((0, _utils.typeOf)(klass) === 'class') {
              types.push((0, _string.dasherize)(key.replace(typeSuffixRegex, '')));
            }
          }
        }
      });
      return types;
    }
  }
  _exports.default = ContainerDebugAdapter;
});
define("@ember/debug/data-adapter", ["exports", "@ember/-internals/owner", "@ember/runloop", "@ember/object", "@ember/-internals/string", "@ember/application/namespace", "@ember/array", "@glimmer/validator", "@ember/debug"], function (_exports, _owner, _runloop, _object, _string, _namespace, _array, _validator, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  function iterate(arr, fn) {
    if (Symbol.iterator in arr) {
      for (var item of arr) {
        fn(item);
      }
    } else {
      // SAFETY: this cast required to work this way to interop between TS 4.8
      // and 4.9. When we drop support for 4.8, it will narrow correctly via the
      // use of the `in` operator above. (Preferably we will solve this by just
      // switching to require `Symbol.iterator` instead.)
      (0, _debug.assert)('', typeof arr.forEach === 'function');
      arr.forEach(fn);
    }
  }
  class RecordsWatcher {
    getCacheForItem(record) {
      var recordCache = this.recordCaches.get(record);
      if (!recordCache) {
        var hasBeenAdded = false;
        recordCache = (0, _validator.createCache)(() => {
          if (!hasBeenAdded) {
            this.added.push(this.wrapRecord(record));
            hasBeenAdded = true;
          } else {
            this.updated.push(this.wrapRecord(record));
          }
        });
        this.recordCaches.set(record, recordCache);
      }
      return recordCache;
    }
    constructor(records, recordsAdded, recordsUpdated, recordsRemoved, wrapRecord, release) {
      this.wrapRecord = wrapRecord;
      this.release = release;
      this.recordCaches = new Map();
      this.added = [];
      this.updated = [];
      this.removed = [];
      this.recordArrayCache = (0, _validator.createCache)(() => {
        var seen = new Set();
        // Track `[]` for legacy support
        (0, _validator.consumeTag)((0, _validator.tagFor)(records, '[]'));
        iterate(records, record => {
          (0, _validator.getValue)(this.getCacheForItem(record));
          seen.add(record);
        });
        // Untrack this operation because these records are being removed, they
        // should not be polled again in the future
        (0, _validator.untrack)(() => {
          this.recordCaches.forEach((_cache, record) => {
            if (!seen.has(record)) {
              this.removed.push(wrapRecord(record));
              this.recordCaches.delete(record);
            }
          });
        });
        if (this.added.length > 0) {
          recordsAdded(this.added);
          this.added = [];
        }
        if (this.updated.length > 0) {
          recordsUpdated(this.updated);
          this.updated = [];
        }
        if (this.removed.length > 0) {
          recordsRemoved(this.removed);
          this.removed = [];
        }
      });
    }
    revalidate() {
      (0, _validator.getValue)(this.recordArrayCache);
    }
  }
  class TypeWatcher {
    constructor(records, onChange, release) {
      this.release = release;
      var hasBeenAccessed = false;
      this.cache = (0, _validator.createCache)(() => {
        // Empty iteration, we're doing this just
        // to track changes to the records array
        iterate(records, () => {});
        // Also track `[]` for legacy support
        (0, _validator.consumeTag)((0, _validator.tagFor)(records, '[]'));
        if (hasBeenAccessed === true) {
          (0, _runloop.next)(onChange);
        } else {
          hasBeenAccessed = true;
        }
      });
      this.release = release;
    }
    revalidate() {
      (0, _validator.getValue)(this.cache);
    }
  }
  /**
    The `DataAdapter` helps a data persistence library
    interface with tools that debug Ember such
    as the [Ember Inspector](https://github.com/emberjs/ember-inspector)
    for Chrome and Firefox.
  
    This class will be extended by a persistence library
    which will override some of the methods with
    library-specific code.
  
    The methods likely to be overridden are:
  
    * `getFilters`
    * `detect`
    * `columnsForType`
    * `getRecords`
    * `getRecordColumnValues`
    * `getRecordKeywords`
    * `getRecordFilterValues`
    * `getRecordColor`
  
    The adapter will need to be registered
    in the application's container as `dataAdapter:main`.
  
    Example:
  
    ```javascript
    Application.initializer({
      name: "data-adapter",
  
      initialize: function(application) {
        application.register('data-adapter:main', DS.DataAdapter);
      }
    });
    ```
  
    @class DataAdapter
    @extends EmberObject
    @public
  */
  class DataAdapter extends _object.default {
    constructor(owner) {
      super(owner);
      this.releaseMethods = (0, _array.A)();
      this.recordsWatchers = new Map();
      this.typeWatchers = new Map();
      this.flushWatchers = null;
      /**
        The container-debug-adapter which is used
        to list all models.
               @property containerDebugAdapter
        @default undefined
        @since 1.5.0
        @public
      **/
      /**
        The number of attributes to send
        as columns. (Enough to make the record
        identifiable).
               @private
        @property attributeLimit
        @default 3
        @since 1.3.0
      */
      this.attributeLimit = 3;
      /**
         Ember Data > v1.0.0-beta.18
         requires string model names to be passed
         around instead of the actual factories.
                This is a stamp for the Ember Inspector
         to differentiate between the versions
         to be able to support older versions too.
                @public
         @property acceptsModelName
       */
      this.acceptsModelName = true;
      this.containerDebugAdapter = (0, _owner.getOwner)(this).lookup('container-debug-adapter:main');
    }
    /**
       Map from records arrays to RecordsWatcher instances
          @private
       @property recordsWatchers
       @since 3.26.0
     */
    /**
      Map from records arrays to TypeWatcher instances
         @private
      @property typeWatchers
      @since 3.26.0
     */
    /**
      Callback that is currently scheduled on backburner end to flush and check
      all active watchers.
         @private
      @property flushWatchers
      @since 3.26.0
        */
    /**
      Stores all methods that clear observers.
      These methods will be called on destruction.
         @private
      @property releaseMethods
      @since 1.3.0
    */
    /**
      Specifies how records can be filtered.
      Records returned will need to have a `filterValues`
      property with a key for every name in the returned array.
         @public
      @method getFilters
      @return {Array} List of objects defining filters.
       The object should have a `name` and `desc` property.
    */
    getFilters() {
      return (0, _array.A)();
    }
    /**
      Fetch the model types and observe them for changes.
         @public
      @method watchModelTypes
         @param {Function} typesAdded Callback to call to add types.
      Takes an array of objects containing wrapped types (returned from `wrapModelType`).
         @param {Function} typesUpdated Callback to call when a type has changed.
      Takes an array of objects containing wrapped types.
         @return {Function} Method to call to remove all observers
    */
    watchModelTypes(typesAdded, typesUpdated) {
      var modelTypes = this.getModelTypes();
      var releaseMethods = (0, _array.A)();
      var typesToSend;
      typesToSend = modelTypes.map(type => {
        var klass = type.klass;
        var wrapped = this.wrapModelType(klass, type.name);
        releaseMethods.push(this.observeModelType(type.name, typesUpdated));
        return wrapped;
      });
      typesAdded(typesToSend);
      var release = () => {
        releaseMethods.forEach(fn => fn());
        this.releaseMethods.removeObject(release);
      };
      this.releaseMethods.pushObject(release);
      return release;
    }
    _nameToClass(type) {
      if (typeof type === 'string') {
        var owner = (0, _owner.getOwner)(this);
        var Factory = owner.factoryFor(`model:${type}`);
        type = Factory && Factory.class;
      }
      return type;
    }
    /**
      Fetch the records of a given type and observe them for changes.
         @public
      @method watchRecords
         @param {String} modelName The model name.
         @param {Function} recordsAdded Callback to call to add records.
      Takes an array of objects containing wrapped records.
      The object should have the following properties:
        columnValues: {Object} The key and value of a table cell.
        object: {Object} The actual record object.
         @param {Function} recordsUpdated Callback to call when a record has changed.
      Takes an array of objects containing wrapped records.
         @param {Function} recordsRemoved Callback to call when a record has removed.
      Takes an array of objects containing wrapped records.
         @return {Function} Method to call to remove all observers.
    */
    watchRecords(modelName, recordsAdded, recordsUpdated, recordsRemoved) {
      var klass = this._nameToClass(modelName);
      var records = this.getRecords(klass, modelName);
      var {
        recordsWatchers
      } = this;
      var recordsWatcher = recordsWatchers.get(records);
      if (!recordsWatcher) {
        recordsWatcher = new RecordsWatcher(records, recordsAdded, recordsUpdated, recordsRemoved, record => this.wrapRecord(record), () => {
          recordsWatchers.delete(records);
          this.updateFlushWatchers();
        });
        recordsWatchers.set(records, recordsWatcher);
        this.updateFlushWatchers();
        recordsWatcher.revalidate();
      }
      return recordsWatcher.release;
    }
    updateFlushWatchers() {
      if (this.flushWatchers === null) {
        if (this.typeWatchers.size > 0 || this.recordsWatchers.size > 0) {
          this.flushWatchers = () => {
            this.typeWatchers.forEach(watcher => watcher.revalidate());
            this.recordsWatchers.forEach(watcher => watcher.revalidate());
          };
          _runloop._backburner.on('end', this.flushWatchers);
        }
      } else if (this.typeWatchers.size === 0 && this.recordsWatchers.size === 0) {
        _runloop._backburner.off('end', this.flushWatchers);
        this.flushWatchers = null;
      }
    }
    /**
      Clear all observers before destruction
      @private
      @method willDestroy
    */
    willDestroy() {
      this._super(...arguments);
      this.typeWatchers.forEach(watcher => watcher.release());
      this.recordsWatchers.forEach(watcher => watcher.release());
      this.releaseMethods.forEach(fn => fn());
      if (this.flushWatchers) {
        _runloop._backburner.off('end', this.flushWatchers);
      }
    }
    /**
      Detect whether a class is a model.
         Test that against the model class
      of your persistence library.
         @public
      @method detect
      @return boolean Whether the class is a model class or not.
    */
    detect(_klass) {
      return false;
    }
    /**
      Get the columns for a given model type.
         @public
      @method columnsForType
      @return {Array} An array of columns of the following format:
       name: {String} The name of the column.
       desc: {String} Humanized description (what would show in a table column name).
    */
    columnsForType(_klass) {
      return (0, _array.A)();
    }
    /**
      Adds observers to a model type class.
         @private
      @method observeModelType
      @param {String} modelName The model type name.
      @param {Function} typesUpdated Called when a type is modified.
      @return {Function} The function to call to remove observers.
    */
    observeModelType(modelName, typesUpdated) {
      var klass = this._nameToClass(modelName);
      var records = this.getRecords(klass, modelName);
      var onChange = () => {
        typesUpdated([this.wrapModelType(klass, modelName)]);
      };
      var {
        typeWatchers
      } = this;
      var typeWatcher = typeWatchers.get(records);
      if (!typeWatcher) {
        typeWatcher = new TypeWatcher(records, onChange, () => {
          typeWatchers.delete(records);
          this.updateFlushWatchers();
        });
        typeWatchers.set(records, typeWatcher);
        this.updateFlushWatchers();
        typeWatcher.revalidate();
      }
      return typeWatcher.release;
    }
    /**
      Wraps a given model type and observes changes to it.
         @private
      @method wrapModelType
      @param {Class} klass A model class.
      @param {String} modelName Name of the class.
      @return {Object} The wrapped type has the following format:
        name: {String} The name of the type.
        count: {Integer} The number of records available.
        columns: {Columns} An array of columns to describe the record.
        object: {Class} The actual Model type class.
    */
    wrapModelType(klass, name) {
      var records = this.getRecords(klass, name);
      return {
        name,
        count: (0, _object.get)(records, 'length'),
        columns: this.columnsForType(klass),
        object: klass
      };
    }
    /**
      Fetches all models defined in the application.
         @private
      @method getModelTypes
      @return {Array} Array of model types.
    */
    getModelTypes() {
      var containerDebugAdapter = this.containerDebugAdapter;
      var stringTypes = containerDebugAdapter.canCatalogEntriesByType('model') ? containerDebugAdapter.catalogEntriesByType('model') : this._getObjectsOnNamespaces();
      // New adapters return strings instead of classes.
      var klassTypes = stringTypes.map(name => {
        return {
          klass: this._nameToClass(name),
          name
        };
      });
      return klassTypes.filter(type => this.detect(type.klass));
    }
    /**
      Loops over all namespaces and all objects
      attached to them.
         @private
      @method _getObjectsOnNamespaces
      @return {Array} Array of model type strings.
    */
    _getObjectsOnNamespaces() {
      var namespaces = _namespace.default.NAMESPACES;
      var types = [];
      namespaces.forEach(namespace => {
        for (var key in namespace) {
          if (!Object.prototype.hasOwnProperty.call(namespace, key)) {
            continue;
          }
          // Even though we will filter again in `getModelTypes`,
          // we should not call `lookupFactory` on non-models
          if (!this.detect(namespace[key])) {
            continue;
          }
          var name = (0, _string.dasherize)(key);
          types.push(name);
        }
      });
      return types;
    }
    /**
      Fetches all loaded records for a given type.
         @public
      @method getRecords
      @return {Array} An array of records.
       This array will be observed for changes,
       so it should update when new records are added/removed.
    */
    getRecords(_klass, _name) {
      return (0, _array.A)();
    }
    /**
      Wraps a record and observers changes to it.
         @private
      @method wrapRecord
      @param {Object} record The record instance.
      @return {Object} The wrapped record. Format:
      columnValues: {Array}
      searchKeywords: {Array}
    */
    wrapRecord(record) {
      return {
        object: record,
        columnValues: this.getRecordColumnValues(record),
        searchKeywords: this.getRecordKeywords(record),
        filterValues: this.getRecordFilterValues(record),
        color: this.getRecordColor(record)
      };
    }
    /**
      Gets the values for each column.
         @public
      @method getRecordColumnValues
      @return {Object} Keys should match column names defined
      by the model type.
    */
    getRecordColumnValues(_record) {
      return {};
    }
    /**
      Returns keywords to match when searching records.
         @public
      @method getRecordKeywords
      @return {Array} Relevant keywords for search.
    */
    getRecordKeywords(_record) {
      return (0, _array.A)();
    }
    /**
      Returns the values of filters defined by `getFilters`.
         @public
      @method getRecordFilterValues
      @param {Object} record The record instance.
      @return {Object} The filter values.
    */
    getRecordFilterValues(_record) {
      return {};
    }
    /**
      Each record can have a color that represents its state.
         @public
      @method getRecordColor
      @param {Object} record The record instance
      @return {String} The records color.
        Possible options: black, red, blue, green.
    */
    getRecordColor(_record) {
      return null;
    }
  }
  _exports.default = DataAdapter;
});
define("@ember/debug/index", ["exports", "@ember/-internals/browser-environment", "@ember/debug/lib/deprecate", "@ember/debug/lib/testing", "@ember/debug/lib/warn", "@ember/debug/lib/inspect", "@ember/debug/lib/capture-render-tree"], function (_exports, _browserEnvironment, _deprecate2, _testing, _warn2, _inspect, _captureRenderTree) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.assert = _exports._warnIfUsingStrippedFeatureFlags = void 0;
  Object.defineProperty(_exports, "captureRenderTree", {
    enumerable: true,
    get: function () {
      return _captureRenderTree.default;
    }
  });
  _exports.info = _exports.getDebugFunction = _exports.deprecateFunc = _exports.deprecate = _exports.debugSeal = _exports.debugFreeze = _exports.debug = void 0;
  Object.defineProperty(_exports, "inspect", {
    enumerable: true,
    get: function () {
      return _inspect.default;
    }
  });
  Object.defineProperty(_exports, "isTesting", {
    enumerable: true,
    get: function () {
      return _testing.isTesting;
    }
  });
  Object.defineProperty(_exports, "registerDeprecationHandler", {
    enumerable: true,
    get: function () {
      return _deprecate2.registerHandler;
    }
  });
  Object.defineProperty(_exports, "registerWarnHandler", {
    enumerable: true,
    get: function () {
      return _warn2.registerHandler;
    }
  });
  _exports.setDebugFunction = _exports.runInDebug = void 0;
  Object.defineProperty(_exports, "setTesting", {
    enumerable: true,
    get: function () {
      return _testing.setTesting;
    }
  });
  _exports.warn = void 0;
  // These are the default production build versions:
  var noop = () => {};
  var assert = noop;
  _exports.assert = assert;
  var info = noop;
  _exports.info = info;
  var warn = noop;
  _exports.warn = warn;
  var debug = noop;
  _exports.debug = debug;
  var deprecate = noop;
  _exports.deprecate = deprecate;
  var debugSeal = noop;
  _exports.debugSeal = debugSeal;
  var debugFreeze = noop;
  _exports.debugFreeze = debugFreeze;
  var runInDebug = noop;
  _exports.runInDebug = runInDebug;
  var setDebugFunction = noop;
  _exports.setDebugFunction = setDebugFunction;
  var getDebugFunction = noop;
  _exports.getDebugFunction = getDebugFunction;
  var deprecateFunc = function () {
    return arguments[arguments.length - 1];
  };
  _exports.deprecateFunc = deprecateFunc;
  if (true /* DEBUG */) {
    _exports.setDebugFunction = setDebugFunction = function (type, callback) {
      switch (type) {
        case 'assert':
          return _exports.assert = assert = callback;
        case 'info':
          return _exports.info = info = callback;
        case 'warn':
          return _exports.warn = warn = callback;
        case 'debug':
          return _exports.debug = debug = callback;
        case 'deprecate':
          return _exports.deprecate = deprecate = callback;
        case 'debugSeal':
          return _exports.debugSeal = debugSeal = callback;
        case 'debugFreeze':
          return _exports.debugFreeze = debugFreeze = callback;
        case 'runInDebug':
          return _exports.runInDebug = runInDebug = callback;
        case 'deprecateFunc':
          return _exports.deprecateFunc = deprecateFunc = callback;
      }
    };
    _exports.getDebugFunction = getDebugFunction = function (type) {
      switch (type) {
        case 'assert':
          return assert;
        case 'info':
          return info;
        case 'warn':
          return warn;
        case 'debug':
          return debug;
        case 'deprecate':
          return deprecate;
        case 'debugSeal':
          return debugSeal;
        case 'debugFreeze':
          return debugFreeze;
        case 'runInDebug':
          return runInDebug;
        case 'deprecateFunc':
          return deprecateFunc;
      }
    };
  }
  /**
  @module @ember/debug
  */
  if (true /* DEBUG */) {
    /**
      Verify that a certain expectation is met, or throw a exception otherwise.
         This is useful for communicating assumptions in the code to other human
      readers as well as catching bugs that accidentally violates these
      expectations.
         Assertions are removed from production builds, so they can be freely added
      for documentation and debugging purposes without worries of incuring any
      performance penalty. However, because of that, they should not be used for
      checks that could reasonably fail during normal usage. Furthermore, care
      should be taken to avoid accidentally relying on side-effects produced from
      evaluating the condition itself, since the code will not run in production.
         ```javascript
      import { assert } from '@ember/debug';
         // Test for truthiness
      assert('Must pass a string', typeof str === 'string');
         // Fail unconditionally
      assert('This code path should never be run');
      ```
         @method assert
      @static
      @for @ember/debug
      @param {String} description Describes the expectation. This will become the
        text of the Error thrown if the assertion fails.
      @param {any} condition Must be truthy for the assertion to pass. If
        falsy, an exception will be thrown.
      @public
      @since 1.0.0
    */
    setDebugFunction('assert', function assert(desc, test) {
      if (!test) {
        throw new Error(`Assertion Failed: ${desc}`);
      }
    });
    /**
      Display a debug notice.
         Calls to this function are not invoked in production builds.
         ```javascript
      import { debug } from '@ember/debug';
         debug('I\'m a debug notice!');
      ```
         @method debug
      @for @ember/debug
      @static
      @param {String} message A debug message to display.
      @public
    */
    setDebugFunction('debug', function debug(message) {
      console.debug(`DEBUG: ${message}`); /* eslint-disable-line no-console */
    });
    /**
      Display an info notice.
         Calls to this function are removed from production builds, so they can be
      freely added for documentation and debugging purposes without worries of
      incuring any performance penalty.
         @method info
      @private
    */
    setDebugFunction('info', function info() {
      console.info(...arguments); /* eslint-disable-line no-console */
    });
    /**
     @module @ember/debug
     @public
    */
    /**
      Alias an old, deprecated method with its new counterpart.
         Display a deprecation warning with the provided message and a stack trace
      (Chrome and Firefox only) when the assigned method is called.
         Calls to this function are removed from production builds, so they can be
      freely added for documentation and debugging purposes without worries of
      incuring any performance penalty.
         ```javascript
      import { deprecateFunc } from '@ember/debug';
         Ember.oldMethod = deprecateFunc('Please use the new, updated method', options, Ember.newMethod);
      ```
         @method deprecateFunc
      @static
      @for @ember/debug
      @param {String} message A description of the deprecation.
      @param {Object} [options] The options object for `deprecate`.
      @param {Function} func The new function called to replace its deprecated counterpart.
      @return {Function} A new function that wraps the original function with a deprecation warning
      @private
    */
    setDebugFunction('deprecateFunc', function deprecateFunc() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      if (args.length === 3) {
        var [message, options, func] = args;
        return function () {
          deprecate(message, false, options);
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          return func.apply(this, args);
        };
      } else {
        var [_message, _func] = args;
        return function () {
          deprecate(_message);
          return _func.apply(this, arguments);
        };
      }
    });
    /**
     @module @ember/debug
     @public
    */
    /**
      Run a function meant for debugging.
         Calls to this function are removed from production builds, so they can be
      freely added for documentation and debugging purposes without worries of
      incuring any performance penalty.
         ```javascript
      import Component from '@ember/component';
      import { runInDebug } from '@ember/debug';
         runInDebug(() => {
        Component.reopen({
          didInsertElement() {
            console.log("I'm happy");
          }
        });
      });
      ```
         @method runInDebug
      @for @ember/debug
      @static
      @param {Function} func The function to be executed.
      @since 1.5.0
      @public
    */
    setDebugFunction('runInDebug', function runInDebug(func) {
      func();
    });
    setDebugFunction('debugSeal', function debugSeal(obj) {
      Object.seal(obj);
    });
    setDebugFunction('debugFreeze', function debugFreeze(obj) {
      // re-freezing an already frozen object introduces a significant
      // performance penalty on Chrome (tested through 59).
      //
      // See: https://bugs.chromium.org/p/v8/issues/detail?id=6450
      if (!Object.isFrozen(obj)) {
        Object.freeze(obj);
      }
    });
    setDebugFunction('deprecate', _deprecate2.default);
    setDebugFunction('warn', _warn2.default);
  }
  var _warnIfUsingStrippedFeatureFlags;
  _exports._warnIfUsingStrippedFeatureFlags = _warnIfUsingStrippedFeatureFlags;
  if (true /* DEBUG */ && !(0, _testing.isTesting)()) {
    if (typeof window !== 'undefined' && (_browserEnvironment.isFirefox || _browserEnvironment.isChrome) && window.addEventListener) {
      window.addEventListener('load', () => {
        if (document.documentElement && document.documentElement.dataset && !document.documentElement.dataset['emberExtension']) {
          var downloadURL;
          if (_browserEnvironment.isChrome) {
            downloadURL = 'https://chrome.google.com/webstore/detail/ember-inspector/bmdblncegkenkacieihfhpjfppoconhi';
          } else if (_browserEnvironment.isFirefox) {
            downloadURL = 'https://addons.mozilla.org/en-US/firefox/addon/ember-inspector/';
          }
          debug(`For more advanced debugging, install the Ember Inspector from ${downloadURL}`);
        }
      }, false);
    }
  }
});
define("@ember/debug/lib/capture-render-tree", ["exports", "@glimmer/util"], function (_exports, _util) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = captureRenderTree;
  /**
    @module @ember/debug
  */
  /**
    Ember Inspector calls this function to capture the current render tree.
  
    In production mode, this requires turning on `ENV._DEBUG_RENDER_TREE`
    before loading Ember.
  
    @private
    @static
    @method captureRenderTree
    @for @ember/debug
    @param app {ApplicationInstance} An `ApplicationInstance`.
    @since 3.14.0
  */
  function captureRenderTree(app) {
    // SAFETY: Ideally we'd assert here but that causes awkward circular requires since this is also in @ember/debug.
    // This is only for debug stuff so not very risky.
    var renderer = (0, _util.expect)(app.lookup('renderer:-dom'), `BUG: owner is missing renderer`);
    return renderer.debugRenderTree.capture();
  }
});
define("@ember/debug/lib/deprecate", ["exports", "@ember/-internals/environment", "@ember/debug/index", "@ember/debug/lib/handlers"], function (_exports, _environment, _index, _handlers) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.registerHandler = _exports.missingOptionsIdDeprecation = _exports.missingOptionsDeprecation = _exports.missingOptionDeprecation = _exports.default = void 0;
  /**
   @module @ember/debug
   @public
  */
  /**
    Allows for runtime registration of handler functions that override the default deprecation behavior.
    Deprecations are invoked by calls to [@ember/debug/deprecate](/ember/release/classes/@ember%2Fdebug/methods/deprecate?anchor=deprecate).
    The following example demonstrates its usage by registering a handler that throws an error if the
    message contains the word "should", otherwise defers to the default handler.
  
    ```javascript
    import { registerDeprecationHandler } from '@ember/debug';
  
    registerDeprecationHandler((message, options, next) => {
      if (message.indexOf('should') !== -1) {
        throw new Error(`Deprecation message with should: ${message}`);
      } else {
        // defer to whatever handler was registered before this one
        next(message, options);
      }
    });
    ```
  
    The handler function takes the following arguments:
  
    <ul>
      <li> <code>message</code> - The message received from the deprecation call.</li>
      <li> <code>options</code> - An object passed in with the deprecation call containing additional information including:</li>
        <ul>
          <li> <code>id</code> - An id of the deprecation in the form of <code>package-name.specific-deprecation</code>.</li>
          <li> <code>until</code> - The Ember version number the feature and deprecation will be removed in.</li>
        </ul>
      <li> <code>next</code> - A function that calls into the previously registered handler.</li>
    </ul>
  
    @public
    @static
    @method registerDeprecationHandler
    @for @ember/debug
    @param handler {Function} A function to handle deprecation calls.
    @since 2.1.0
  */
  var registerHandler = () => {};
  _exports.registerHandler = registerHandler;
  var missingOptionsDeprecation;
  _exports.missingOptionsDeprecation = missingOptionsDeprecation;
  var missingOptionsIdDeprecation;
  _exports.missingOptionsIdDeprecation = missingOptionsIdDeprecation;
  var missingOptionDeprecation = () => '';
  _exports.missingOptionDeprecation = missingOptionDeprecation;
  var deprecate = () => {};
  if (true /* DEBUG */) {
    _exports.registerHandler = registerHandler = function registerHandler(handler) {
      (0, _handlers.registerHandler)('deprecate', handler);
    };
    var formatMessage = function formatMessage(_message, options) {
      var message = _message;
      if (options === null || options === void 0 ? void 0 : options.id) {
        message = message + ` [deprecation id: ${options.id}]`;
      }
      if (options === null || options === void 0 ? void 0 : options.until) {
        message = message + ` This will be removed in ${options.for} ${options.until}.`;
      }
      if (options === null || options === void 0 ? void 0 : options.url) {
        message += ` See ${options.url} for more details.`;
      }
      return message;
    };
    registerHandler(function logDeprecationToConsole(message, options) {
      var updatedMessage = formatMessage(message, options);
      console.warn(`DEPRECATION: ${updatedMessage}`); // eslint-disable-line no-console
    });

    var captureErrorForStack;
    if (new Error().stack) {
      captureErrorForStack = () => new Error();
    } else {
      captureErrorForStack = () => {
        try {
          __fail__.fail();
        } catch (e) {
          return e;
        }
      };
    }
    registerHandler(function logDeprecationStackTrace(message, options, next) {
      if (_environment.ENV.LOG_STACKTRACE_ON_DEPRECATION) {
        var stackStr = '';
        var error = captureErrorForStack();
        var stack;
        if (error instanceof Error) {
          if (error.stack) {
            if (error['arguments']) {
              // Chrome
              stack = error.stack.replace(/^\s+at\s+/gm, '').replace(/^([^(]+?)([\n$])/gm, '{anonymous}($1)$2').replace(/^Object.<anonymous>\s*\(([^)]+)\)/gm, '{anonymous}($1)').split('\n');
              stack.shift();
            } else {
              // Firefox
              stack = error.stack.replace(/(?:\n@:0)?\s+$/m, '').replace(/^\(/gm, '{anonymous}(').split('\n');
            }
            stackStr = `\n    ${stack.slice(2).join('\n    ')}`;
          }
        }
        var updatedMessage = formatMessage(message, options);
        console.warn(`DEPRECATION: ${updatedMessage}${stackStr}`); // eslint-disable-line no-console
      } else {
        next(message, options);
      }
    });
    registerHandler(function raiseOnDeprecation(message, options, next) {
      if (_environment.ENV.RAISE_ON_DEPRECATION) {
        var updatedMessage = formatMessage(message);
        throw new Error(updatedMessage);
      } else {
        next(message, options);
      }
    });
    _exports.missingOptionsDeprecation = missingOptionsDeprecation = 'When calling `deprecate` you ' + 'must provide an `options` hash as the third parameter.  ' + '`options` should include `id` and `until` properties.';
    _exports.missingOptionsIdDeprecation = missingOptionsIdDeprecation = 'When calling `deprecate` you must provide `id` in options.';
    _exports.missingOptionDeprecation = missingOptionDeprecation = (id, missingOption) => {
      return `When calling \`deprecate\` you must provide \`${missingOption}\` in options. Missing options.${missingOption} in "${id}" deprecation`;
    };
    /**
     @module @ember/debug
     @public
     */
    /**
      Display a deprecation warning with the provided message and a stack trace
      (Chrome and Firefox only).
         Ember itself leverages [Semantic Versioning](https://semver.org) to aid
      projects in keeping up with changes to the framework. Before any
      functionality or API is removed, it first flows linearly through a
      deprecation staging process. The staging process currently contains two
      stages: available and enabled.
         Deprecations are initially released into the 'available' stage.
      Deprecations will stay in this stage until the replacement API has been
      marked as a recommended practice via the RFC process and the addon
      ecosystem has generally adopted the change.
         Once a deprecation meets the above criteria, it will move into the
      'enabled' stage where it will remain until the functionality or API is
      eventually removed.
         For application and addon developers, "available" deprecations are not
      urgent and "enabled" deprecations require action.
         * In a production build, this method is defined as an empty function (NOP).
      Uses of this method in Ember itself are stripped from the ember.prod.js build.
         ```javascript
      import { deprecate } from '@ember/debug';
         deprecate(
        'Use of `assign` has been deprecated. Please use `Object.assign` or the spread operator instead.',
        false,
        {
          id: 'ember-polyfills.deprecate-assign',
          until: '5.0.0',
          url: 'https://deprecations.emberjs.com/v4.x/#toc_ember-polyfills-deprecate-assign',
          for: 'ember-source',
          since: {
            available: '4.0.0',
            enabled: '4.0.0',
          },
        }
      );
      ```
         @method deprecate
      @for @ember/debug
      @param {String} message A description of the deprecation.
      @param {Boolean} test A boolean. If falsy, the deprecation will be displayed.
      @param {Object} options
      @param {String} options.id A unique id for this deprecation. The id can be
        used by Ember debugging tools to change the behavior (raise, log or silence)
        for that specific deprecation. The id should be namespaced by dots, e.g.
        "view.helper.select".
      @param {string} options.until The version of Ember when this deprecation
        warning will be removed.
      @param {String} options.for A namespace for the deprecation, usually the package name
      @param {Object} options.since Describes when the deprecation became available and enabled.
      @param {String} [options.url] An optional url to the transition guide on the
            emberjs.com website.
      @static
      @public
      @since 1.0.0
    */
    deprecate = function deprecate(message, test, options) {
      (0, _index.assert)(missingOptionsDeprecation, Boolean(options && (options.id || options.until)));
      (0, _index.assert)(missingOptionsIdDeprecation, Boolean(options.id));
      (0, _index.assert)(missingOptionDeprecation(options.id, 'until'), Boolean(options.until));
      (0, _index.assert)(missingOptionDeprecation(options.id, 'for'), Boolean(options.for));
      (0, _index.assert)(missingOptionDeprecation(options.id, 'since'), Boolean(options.since));
      (0, _handlers.invoke)('deprecate', message, test, options);
    };
  }
  var _default = deprecate;
  _exports.default = _default;
});
define("@ember/debug/lib/handlers", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.registerHandler = _exports.invoke = _exports.HANDLERS = void 0;
  var HANDLERS = {};
  _exports.HANDLERS = HANDLERS;
  var registerHandler = function registerHandler(_type, _callback) {};
  _exports.registerHandler = registerHandler;
  var invoke = () => {};
  _exports.invoke = invoke;
  if (true /* DEBUG */) {
    _exports.registerHandler = registerHandler = function registerHandler(type, callback) {
      var nextHandler = HANDLERS[type] || (() => {});
      HANDLERS[type] = (message, options) => {
        callback(message, options, nextHandler);
      };
    };
    _exports.invoke = invoke = function invoke(type, message, test, options) {
      if (test) {
        return;
      }
      var handlerForType = HANDLERS[type];
      if (handlerForType) {
        handlerForType(message, options);
      }
    };
  }
});
define("@ember/debug/lib/inspect", ["exports", "@glimmer/util", "@ember/debug"], function (_exports, _util, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = inspect;
  var {
    toString: objectToString
  } = Object.prototype;
  var {
    toString: functionToString
  } = Function.prototype;
  var {
    isArray
  } = Array;
  var {
    keys: objectKeys
  } = Object;
  var {
    stringify
  } = JSON;
  var LIST_LIMIT = 100;
  var DEPTH_LIMIT = 4;
  var SAFE_KEY = /^[\w$]+$/;
  /**
   @module @ember/debug
  */
  /**
    Convenience method to inspect an object. This method will attempt to
    convert the object into a useful string description.
  
    It is a pretty simple implementation. If you want something more robust,
    use something like JSDump: https://github.com/NV/jsDump
  
    @method inspect
    @static
    @param {Object} obj The object you want to inspect.
    @return {String} A description of the object
    @since 1.4.0
    @private
  */
  function inspect(obj) {
    // detect Node util.inspect call inspect(depth: number, opts: object)
    if (typeof obj === 'number' && arguments.length === 2) {
      return this;
    }
    return inspectValue(obj, 0);
  }
  function inspectValue(value, depth, seen) {
    var valueIsArray = false;
    switch (typeof value) {
      case 'undefined':
        return 'undefined';
      case 'object':
        if (value === null) return 'null';
        if (isArray(value)) {
          valueIsArray = true;
          break;
        }
        // is toString Object.prototype.toString or undefined then traverse
        if (value.toString === objectToString || value.toString === undefined) {
          break;
        }
        // custom toString
        return value.toString();
      case 'function':
        return value.toString === functionToString ? value.name ? `[Function:${value.name}]` : `[Function]` : value.toString();
      case 'string':
        return stringify(value);
      case 'symbol':
      case 'boolean':
      case 'number':
      default:
        return value.toString();
    }
    if (seen === undefined) {
      seen = new _util._WeakSet();
    } else {
      if (seen.has(value)) return `[Circular]`;
    }
    seen.add(value);
    return valueIsArray ? inspectArray(value, depth + 1, seen) : inspectObject(value, depth + 1, seen);
  }
  function inspectKey(key) {
    return SAFE_KEY.test(key) ? key : stringify(key);
  }
  function inspectObject(obj, depth, seen) {
    if (depth > DEPTH_LIMIT) {
      return '[Object]';
    }
    var s = '{';
    var keys = objectKeys(obj);
    for (var i = 0; i < keys.length; i++) {
      s += i === 0 ? ' ' : ', ';
      if (i >= LIST_LIMIT) {
        s += `... ${keys.length - LIST_LIMIT} more keys`;
        break;
      }
      var key = keys[i];
      (true && !(key) && (0, _debug.assert)('has key', key)); // Looping over array
      s += `${inspectKey(String(key))}: ${inspectValue(obj[key], depth, seen)}`;
    }
    s += ' }';
    return s;
  }
  function inspectArray(arr, depth, seen) {
    if (depth > DEPTH_LIMIT) {
      return '[Array]';
    }
    var s = '[';
    for (var i = 0; i < arr.length; i++) {
      s += i === 0 ? ' ' : ', ';
      if (i >= LIST_LIMIT) {
        s += `... ${arr.length - LIST_LIMIT} more items`;
        break;
      }
      s += inspectValue(arr[i], depth, seen);
    }
    s += ' ]';
    return s;
  }
});
define("@ember/debug/lib/testing", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.isTesting = isTesting;
  _exports.setTesting = setTesting;
  var testing = false;
  function isTesting() {
    return testing;
  }
  function setTesting(value) {
    testing = Boolean(value);
  }
});
define("@ember/debug/lib/warn", ["exports", "@ember/debug/index", "@ember/debug/lib/handlers"], function (_exports, _index, _handlers) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.registerHandler = _exports.missingOptionsIdDeprecation = _exports.missingOptionsDeprecation = _exports.default = void 0;
  var registerHandler = () => {};
  _exports.registerHandler = registerHandler;
  var warn = () => {};
  var missingOptionsDeprecation;
  _exports.missingOptionsDeprecation = missingOptionsDeprecation;
  var missingOptionsIdDeprecation;
  /**
  @module @ember/debug
  */
  _exports.missingOptionsIdDeprecation = missingOptionsIdDeprecation;
  if (true /* DEBUG */) {
    /**
      Allows for runtime registration of handler functions that override the default warning behavior.
      Warnings are invoked by calls made to [@ember/debug/warn](/ember/release/classes/@ember%2Fdebug/methods/warn?anchor=warn).
      The following example demonstrates its usage by registering a handler that does nothing overriding Ember's
      default warning behavior.
         ```javascript
      import { registerWarnHandler } from '@ember/debug';
         // next is not called, so no warnings get the default behavior
      registerWarnHandler(() => {});
      ```
         The handler function takes the following arguments:
         <ul>
        <li> <code>message</code> - The message received from the warn call. </li>
        <li> <code>options</code> - An object passed in with the warn call containing additional information including:</li>
          <ul>
            <li> <code>id</code> - An id of the warning in the form of <code>package-name.specific-warning</code>.</li>
          </ul>
        <li> <code>next</code> - A function that calls into the previously registered handler.</li>
      </ul>
         @public
      @static
      @method registerWarnHandler
      @for @ember/debug
      @param handler {Function} A function to handle warnings.
      @since 2.1.0
    */
    _exports.registerHandler = registerHandler = function registerHandler(handler) {
      (0, _handlers.registerHandler)('warn', handler);
    };
    registerHandler(function logWarning(message) {
      /* eslint-disable no-console */
      console.warn(`WARNING: ${message}`);
      /* eslint-enable no-console */
    });

    _exports.missingOptionsDeprecation = missingOptionsDeprecation = 'When calling `warn` you ' + 'must provide an `options` hash as the third parameter.  ' + '`options` should include an `id` property.';
    _exports.missingOptionsIdDeprecation = missingOptionsIdDeprecation = 'When calling `warn` you must provide `id` in options.';
    /**
      Display a warning with the provided message.
         * In a production build, this method is defined as an empty function (NOP).
      Uses of this method in Ember itself are stripped from the ember.prod.js build.
         ```javascript
      import { warn } from '@ember/debug';
      import tomsterCount from './tomster-counter'; // a module in my project
         // Log a warning if we have more than 3 tomsters
      warn('Too many tomsters!', tomsterCount <= 3, {
        id: 'ember-debug.too-many-tomsters'
      });
      ```
         @method warn
      @for @ember/debug
      @static
      @param {String} message A warning to display.
      @param {Boolean} test An optional boolean. If falsy, the warning
        will be displayed.
      @param {Object} options An object that can be used to pass a unique
        `id` for this warning.  The `id` can be used by Ember debugging tools
        to change the behavior (raise, log, or silence) for that specific warning.
        The `id` should be namespaced by dots, e.g. "ember-debug.feature-flag-with-features-stripped"
      @public
      @since 1.0.0
    */
    warn = function warn(message, test, options) {
      if (arguments.length === 2 && typeof test === 'object') {
        options = test;
        test = false;
      }
      (0, _index.assert)(missingOptionsDeprecation, Boolean(options));
      (0, _index.assert)(missingOptionsIdDeprecation, Boolean(options && options.id));
      (0, _handlers.invoke)('warn', message, test, options);
    };
  }
  var _default = warn;
  _exports.default = _default;
});
define("@ember/deprecated-features/index", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ASSIGN = void 0;
  /* eslint-disable no-implicit-coercion */
  // These versions should be the version that the deprecation was _introduced_,
  // not the version that the feature will be removed.
  var ASSIGN = !!'4.0.0-beta.1';
  _exports.ASSIGN = ASSIGN;
});
define("@ember/destroyable/index", ["exports", "@glimmer/destroyable"], function (_exports, _destroyable) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "assertDestroyablesDestroyed", {
    enumerable: true,
    get: function () {
      return _destroyable.assertDestroyablesDestroyed;
    }
  });
  Object.defineProperty(_exports, "associateDestroyableChild", {
    enumerable: true,
    get: function () {
      return _destroyable.associateDestroyableChild;
    }
  });
  Object.defineProperty(_exports, "destroy", {
    enumerable: true,
    get: function () {
      return _destroyable.destroy;
    }
  });
  Object.defineProperty(_exports, "enableDestroyableTracking", {
    enumerable: true,
    get: function () {
      return _destroyable.enableDestroyableTracking;
    }
  });
  Object.defineProperty(_exports, "isDestroyed", {
    enumerable: true,
    get: function () {
      return _destroyable.isDestroyed;
    }
  });
  Object.defineProperty(_exports, "isDestroying", {
    enumerable: true,
    get: function () {
      return _destroyable.isDestroying;
    }
  });
  _exports.registerDestructor = registerDestructor;
  _exports.unregisterDestructor = unregisterDestructor;
  /**
    Ember manages the lifecycles and lifetimes of many built in constructs, such
    as components, and does so in a hierarchical way - when a parent component is
    destroyed, all of its children are destroyed as well.
  
    This destroyables API exposes the basic building blocks for destruction:
  
    * registering a function to be ran when an object is destroyed
    * checking if an object is in a destroying state
    * associate an object as a child of another so that the child object will be destroyed
      when the associated parent object is destroyed.
  
    @module @ember/destroyable
    @public
  */
  /**
    This function is used to associate a destroyable object with a parent. When the parent
    is destroyed, all registered children will also be destroyed.
  
    ```js
    class CustomSelect extends Component {
      constructor(...args) {
        super(...args);
  
        // obj is now a child of the component. When the component is destroyed,
        // obj will also be destroyed, and have all of its destructors triggered.
        this.obj = associateDestroyableChild(this, {});
      }
    }
    ```
  
    Returns the associated child for convenience.
  
    @method associateDestroyableChild
    @for @ember/destroyable
    @param {Object|Function} parent the destroyable to entangle the child destroyables lifetime with
    @param {Object|Function} child the destroyable to be entangled with the parents lifetime
    @returns {Object|Function} the child argument
    @static
    @public
  */
  /**
   Receives a destroyable, and returns true if the destroyable has begun destroying. Otherwise returns
   false.
  
    ```js
    let obj = {};
    isDestroying(obj); // false
    destroy(obj);
    isDestroying(obj); // true
    // ...sometime later, after scheduled destruction
    isDestroyed(obj); // true
    isDestroying(obj); // true
    ```
  
    @method isDestroying
    @for @ember/destroyable
    @param {Object|Function} destroyable the object to check
    @returns {Boolean}
    @static
    @public
  */
  /**
    Receives a destroyable, and returns true if the destroyable has finished destroying. Otherwise
    returns false.
  
    ```js
    let obj = {};
  
    isDestroyed(obj); // false
    destroy(obj);
  
    // ...sometime later, after scheduled destruction
  
    isDestroyed(obj); // true
    ```
  
    @method isDestroyed
    @for @ember/destroyable
    @param {Object|Function} destroyable the object to check
    @returns {Boolean}
    @static
    @public
  */
  /**
    Initiates the destruction of a destroyable object. It runs all associated destructors, and then
    destroys all children recursively.
  
    ```js
    let obj = {};
  
    registerDestructor(obj, () => console.log('destroyed!'));
  
    destroy(obj); // this will schedule the destructor to be called
  
    // ...some time later, during scheduled destruction
  
    // destroyed!
    ```
  
    Destruction via `destroy()` follows these steps:
  
    1, Mark the destroyable such that `isDestroying(destroyable)` returns `true`
    2, Call `destroy()` on each of the destroyable's associated children
    3, Schedule calling the destroyable's destructors
    4, Schedule setting destroyable such that `isDestroyed(destroyable)` returns `true`
  
    This results in the entire tree of destroyables being first marked as destroying,
    then having all of their destructors called, and finally all being marked as isDestroyed.
    There won't be any in between states where some items are marked as `isDestroying` while
    destroying, while others are not.
  
    @method destroy
    @for @ember/destroyable
    @param {Object|Function} destroyable the object to destroy
    @static
    @public
  */
  /**
    This function asserts that all objects which have associated destructors or associated children
    have been destroyed at the time it is called. It is meant to be a low level hook that testing
    frameworks can use to hook into and validate that all destroyables have in fact been destroyed.
  
    This function requires that `enableDestroyableTracking` was called previously, and is only
    available in non-production builds.
  
    @method assertDestroyablesDestroyed
    @for @ember/destroyable
    @static
    @public
  */
  /**
    This function instructs the destroyable system to keep track of all destroyables (their
    children, destructors, etc). This enables a future usage of `assertDestroyablesDestroyed`
    to be used to ensure that all destroyable tasks (registered destructors and associated children)
    have completed when `assertDestroyablesDestroyed` is called.
  
    @method enableDestroyableTracking
    @for @ember/destroyable
    @static
    @public
  */
  /**
    Receives a destroyable object and a destructor function, and associates the
    function with it. When the destroyable is destroyed with destroy, or when its
    parent is destroyed, the destructor function will be called.
  
    ```js
    import Component from '@glimmer/component';
    import { registerDestructor } from '@ember/destroyable';
  
    class Modal extends Component {
      @service resize;
  
      constructor(...args) {
        super(...args);
  
        this.resize.register(this, this.layout);
  
        registerDestructor(this, () => this.resize.unregister(this));
      }
    }
    ```
  
    Multiple destructors can be associated with a given destroyable, and they can be
    associated over time, allowing libraries to dynamically add destructors as needed.
    `registerDestructor` also returns the associated destructor function, for convenience.
  
    The destructor function is passed a single argument, which is the destroyable itself.
    This allows the function to be reused multiple times for many destroyables, rather
    than creating a closure function per destroyable.
  
    ```js
    import Component from '@glimmer/component';
    import { registerDestructor } from '@ember/destroyable';
  
    function unregisterResize(instance) {
      instance.resize.unregister(instance);
    }
  
    class Modal extends Component {
      @service resize;
  
      constructor(...args) {
        super(...args);
  
        this.resize.register(this, this.layout);
  
        registerDestructor(this, unregisterResize);
      }
    }
    ```
  
    @method registerDestructor
    @for @ember/destroyable
    @param {Object|Function} destroyable the destroyable to register the destructor function with
    @param {Function} destructor the destructor to run when the destroyable object is destroyed
    @static
    @public
  */
  function registerDestructor(destroyable, destructor) {
    return (0, _destroyable.registerDestructor)(destroyable, destructor);
  }
  /**
    Receives a destroyable and a destructor function, and de-associates the destructor
    from the destroyable.
  
    ```js
    import Component from '@glimmer/component';
    import { registerDestructor, unregisterDestructor } from '@ember/destroyable';
  
    class Modal extends Component {
      @service modals;
  
      constructor(...args) {
        super(...args);
  
        this.modals.add(this);
  
        this.modalDestructor = registerDestructor(this, () => this.modals.remove(this));
      }
  
      @action pinModal() {
        unregisterDestructor(this, this.modalDestructor);
      }
    }
    ```
  
    @method unregisterDestructor
    @for @ember/destroyable
    @param {Object|Function} destroyable the destroyable to unregister the destructor function from
    @param {Function} destructor the destructor to remove from the destroyable
    @static
    @public
  */
  function unregisterDestructor(destroyable, destructor) {
    return (0, _destroyable.unregisterDestructor)(destroyable, destructor);
  }
});
define("@ember/engine/index", ["exports", "@ember/engine/lib/engine-parent", "@ember/-internals/utils", "@ember/controller", "@ember/application/namespace", "@ember/-internals/container", "dag-map", "@ember/debug", "@ember/debug/container-debug-adapter", "@ember/object", "@ember/engine/instance", "@ember/routing/-internals", "@ember/-internals/views", "@ember/-internals/glimmer", "@ember/-internals/runtime"], function (_exports, _engineParent, _utils, _controller, _namespace, _container, _dagMap, _debug, _containerDebugAdapter, _object, _instance, _internals, _views, _glimmer, _runtime) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.buildInitializerMethod = buildInitializerMethod;
  _exports.default = void 0;
  Object.defineProperty(_exports, "getEngineParent", {
    enumerable: true,
    get: function () {
      return _engineParent.getEngineParent;
    }
  });
  Object.defineProperty(_exports, "setEngineParent", {
    enumerable: true,
    get: function () {
      return _engineParent.setEngineParent;
    }
  });
  function props(obj) {
    var properties = [];
    for (var key in obj) {
      properties.push(key);
    }
    return properties;
  }
  class Engine extends _namespace.default.extend(_runtime.RegistryProxyMixin) {
    constructor() {
      super(...arguments);
      /**
        A private flag indicating whether an engine's initializers have run yet.
               @private
        @property _initializersRan
      */
      this._initializersRan = false;
    }
    /**
      This creates a registry with the default Ember naming conventions.
         It also configures the registry:
         * registered views are created every time they are looked up (they are
        not singletons)
      * registered templates are not factories; the registered value is
        returned directly.
      * the router receives the application as its `namespace` property
      * all controllers receive the router as their `target` and `controllers`
        properties
      * all controllers receive the application as their `namespace` property
      * the application view receives the application controller as its
        `controller` property
      * the application view receives the application template as its
        `defaultTemplate` property
         @method buildRegistry
      @static
      @param {Application} namespace the application for which to
        build the registry
      @return {Ember.Registry} the built registry
      @private
    */
    static buildRegistry(namespace) {
      var registry = new _container.Registry({
        resolver: resolverFor(namespace)
      });
      registry.set = _object.set;
      registry.register('application:main', namespace, {
        instantiate: false
      });
      commonSetupRegistry(registry);
      (0, _glimmer.setupEngineRegistry)(registry);
      return registry;
    }
    init(properties) {
      super.init(properties);
      this.buildRegistry();
    }
    /**
      Ensure that initializers are run once, and only once, per engine.
         @private
      @method ensureInitializers
    */
    ensureInitializers() {
      if (!this._initializersRan) {
        this.runInitializers();
        this._initializersRan = true;
      }
    }
    /**
      Create an EngineInstance for this engine.
         @public
      @method buildInstance
      @return {EngineInstance} the engine instance
    */
    buildInstance(options) {
      if (options === void 0) {
        options = {};
      }
      this.ensureInitializers();
      return _instance.default.create(Object.assign(Object.assign({}, options), {
        base: this
      }));
    }
    /**
      Build and configure the registry for the current engine.
         @private
      @method buildRegistry
      @return {Ember.Registry} the configured registry
    */
    buildRegistry() {
      var registry = this.__registry__ = this.constructor.buildRegistry(this);
      return registry;
    }
    /**
      @private
      @method initializer
    */
    initializer(initializer) {
      this.constructor.initializer(initializer);
    }
    /**
      @private
      @method instanceInitializer
    */
    instanceInitializer(initializer) {
      this.constructor.instanceInitializer(initializer);
    }
    /**
      @private
      @method runInitializers
    */
    runInitializers() {
      this._runInitializer('initializers', (name, initializer) => {
        (true && !(initializer) && (0, _debug.assert)(`No application initializer named '${name}'`, initializer));
        initializer.initialize(this);
      });
    }
    /**
      @private
      @since 1.12.0
      @method runInstanceInitializers
    */
    runInstanceInitializers(instance) {
      this._runInitializer('instanceInitializers', (name, initializer) => {
        (true && !(initializer) && (0, _debug.assert)(`No instance initializer named '${name}'`, initializer));
        initializer.initialize(instance);
      });
    }
    _runInitializer(bucketName, cb) {
      var initializersByName = (0, _object.get)(this.constructor, bucketName);
      var initializers = props(initializersByName);
      var graph = new _dagMap.default();
      var initializer;
      for (var name of initializers) {
        initializer = initializersByName[name];
        (true && !(initializer) && (0, _debug.assert)(`missing ${bucketName}: ${name}`, initializer));
        graph.add(initializer.name, initializer, initializer.before, initializer.after);
      }
      graph.topsort(cb);
    }
  }
  Engine.initializers = Object.create(null);
  Engine.instanceInitializers = Object.create(null);
  /**
    The goal of initializers should be to register dependencies and injections.
    This phase runs once. Because these initializers may load code, they are
    allowed to defer application readiness and advance it. If you need to access
    the container or store you should use an InstanceInitializer that will be run
    after all initializers and therefore after all code is loaded and the app is
    ready.
  
    Initializer receives an object which has the following attributes:
    `name`, `before`, `after`, `initialize`. The only required attribute is
    `initialize`, all others are optional.
  
    * `name` allows you to specify under which name the initializer is registered.
    This must be a unique name, as trying to register two initializers with the
    same name will result in an error.
  
    ```app/initializer/named-initializer.js
    import { debug } from '@ember/debug';
  
    export function initialize() {
      debug('Running namedInitializer!');
    }
  
    export default {
      name: 'named-initializer',
      initialize
    };
    ```
  
    * `before` and `after` are used to ensure that this initializer is ran prior
    or after the one identified by the value. This value can be a single string
    or an array of strings, referencing the `name` of other initializers.
  
    An example of ordering initializers, we create an initializer named `first`:
  
    ```app/initializer/first.js
    import { debug } from '@ember/debug';
  
    export function initialize() {
      debug('First initializer!');
    }
  
    export default {
      name: 'first',
      initialize
    };
    ```
  
    ```bash
    // DEBUG: First initializer!
    ```
  
    We add another initializer named `second`, specifying that it should run
    after the initializer named `first`:
  
    ```app/initializer/second.js
    import { debug } from '@ember/debug';
  
    export function initialize() {
      debug('Second initializer!');
    }
  
    export default {
      name: 'second',
      after: 'first',
      initialize
    };
    ```
  
    ```
    // DEBUG: First initializer!
    // DEBUG: Second initializer!
    ```
  
    Afterwards we add a further initializer named `pre`, this time specifying
    that it should run before the initializer named `first`:
  
    ```app/initializer/pre.js
    import { debug } from '@ember/debug';
  
    export function initialize() {
      debug('Pre initializer!');
    }
  
    export default {
      name: 'pre',
      before: 'first',
      initialize
    };
    ```
  
    ```bash
    // DEBUG: Pre initializer!
    // DEBUG: First initializer!
    // DEBUG: Second initializer!
    ```
  
    Finally we add an initializer named `post`, specifying it should run after
    both the `first` and the `second` initializers:
  
    ```app/initializer/post.js
    import { debug } from '@ember/debug';
  
    export function initialize() {
      debug('Post initializer!');
    }
  
    export default {
      name: 'post',
      after: ['first', 'second'],
      initialize
    };
    ```
  
    ```bash
    // DEBUG: Pre initializer!
    // DEBUG: First initializer!
    // DEBUG: Second initializer!
    // DEBUG: Post initializer!
    ```
  
    * `initialize` is a callback function that receives one argument,
      `application`, on which you can operate.
  
    Example of using `application` to register an adapter:
  
    ```app/initializer/api-adapter.js
    import ApiAdapter from '../utils/api-adapter';
  
    export function initialize(application) {
      application.register('api-adapter:main', ApiAdapter);
    }
  
    export default {
      name: 'post',
      after: ['first', 'second'],
      initialize
    };
    ```
  
    @method initializer
    @param initializer {Object}
    @public
  */
  Engine.initializer = buildInitializerMethod('initializers', 'initializer');
  /**
    Instance initializers run after all initializers have run. Because
    instance initializers run after the app is fully set up. We have access
    to the store, container, and other items. However, these initializers run
    after code has loaded and are not allowed to defer readiness.
  
    Instance initializer receives an object which has the following attributes:
    `name`, `before`, `after`, `initialize`. The only required attribute is
    `initialize`, all others are optional.
  
    * `name` allows you to specify under which name the instanceInitializer is
    registered. This must be a unique name, as trying to register two
    instanceInitializer with the same name will result in an error.
  
    ```app/initializer/named-instance-initializer.js
    import { debug } from '@ember/debug';
  
    export function initialize() {
      debug('Running named-instance-initializer!');
    }
  
    export default {
      name: 'named-instance-initializer',
      initialize
    };
    ```
  
    * `before` and `after` are used to ensure that this initializer is ran prior
    or after the one identified by the value. This value can be a single string
    or an array of strings, referencing the `name` of other initializers.
  
    * See Application.initializer for discussion on the usage of before
    and after.
  
    Example instanceInitializer to preload data into the store.
  
    ```app/initializer/preload-data.js
  
    export function initialize(application) {
        var userConfig, userConfigEncoded, store;
        // We have a HTML escaped JSON representation of the user's basic
        // configuration generated server side and stored in the DOM of the main
        // index.html file. This allows the app to have access to a set of data
        // without making any additional remote calls. Good for basic data that is
        // needed for immediate rendering of the page. Keep in mind, this data,
        // like all local models and data can be manipulated by the user, so it
        // should not be relied upon for security or authorization.
  
        // Grab the encoded data from the meta tag
        userConfigEncoded = document.querySelector('head meta[name=app-user-config]').attr('content');
  
        // Unescape the text, then parse the resulting JSON into a real object
        userConfig = JSON.parse(unescape(userConfigEncoded));
  
        // Lookup the store
        store = application.lookup('service:store');
  
        // Push the encoded JSON into the store
        store.pushPayload(userConfig);
    }
  
    export default {
      name: 'named-instance-initializer',
      initialize
    };
    ```
  
    @method instanceInitializer
    @param instanceInitializer
    @public
  */
  Engine.instanceInitializer = buildInitializerMethod('instanceInitializers', 'instance initializer');
  /**
    This function defines the default lookup rules for container lookups:
  
    * templates are looked up on `Ember.TEMPLATES`
    * other names are looked up on the application after classifying the name.
      For example, `controller:post` looks up `App.PostController` by default.
    * if the default lookup fails, look for registered classes on the container
  
    This allows the application to register default injections in the container
    that could be overridden by the normal naming convention.
  
    @private
    @method resolverFor
    @param {Ember.Enginer} namespace the namespace to look for classes
    @return {*} the resolved value for a given lookup
  */
  function resolverFor(namespace) {
    var ResolverClass = namespace.Resolver;
    var props = {
      namespace
    };
    return ResolverClass.create(props);
  }
  /** @internal */
  function buildInitializerMethod(bucketName, humanName) {
    return function (initializer) {
      // If this is the first initializer being added to a subclass, we are going to reopen the class
      // to make sure we have a new `initializers` object, which extends from the parent class' using
      // prototypal inheritance. Without this, attempting to add initializers to the subclass would
      // pollute the parent class as well as other subclasses.
      // SAFETY: The superclass may be an Engine, we don't call unless we confirmed it was ok.
      var superclass = this.superclass;
      if (superclass[bucketName] !== undefined && superclass[bucketName] === this[bucketName]) {
        var attrs = {
          [bucketName]: Object.create(this[bucketName])
        };
        this.reopenClass(attrs);
      }
      (true && !(!this[bucketName][initializer.name]) && (0, _debug.assert)(`The ${humanName} '${initializer.name}' has already been registered`, !this[bucketName][initializer.name]));
      (true && !((0, _utils.canInvoke)(initializer, 'initialize')) && (0, _debug.assert)(`An ${humanName} cannot be registered without an initialize function`, (0, _utils.canInvoke)(initializer, 'initialize')));
      (true && !(initializer.name !== undefined) && (0, _debug.assert)(`An ${humanName} cannot be registered without a name property`, initializer.name !== undefined));
      var initializers = this[bucketName];
      initializers[initializer.name] = initializer;
    };
  }
  function commonSetupRegistry(registry) {
    registry.optionsForType('component', {
      singleton: false
    });
    registry.optionsForType('view', {
      singleton: false
    });
    registry.register('controller:basic', _controller.default, {
      instantiate: false
    });
    // Register the routing service...
    registry.register('service:-routing', _internals.RoutingService);
    // DEBUGGING
    registry.register('resolver-for-debugging:main', registry.resolver, {
      instantiate: false
    });
    registry.register('container-debug-adapter:main', _containerDebugAdapter.default);
    registry.register('component-lookup:main', _views.ComponentLookup);
  }
  var _default = Engine;
  _exports.default = _default;
});
define("@ember/engine/instance", ["exports", "@ember/object", "@ember/-internals/runtime", "@ember/debug", "@ember/-internals/container", "@ember/-internals/utils", "@ember/engine/lib/engine-parent", "@ember/-internals/owner", "@ember/engine"], function (_exports, _object, _runtime, _debug, _container, _utils, _engineParent, _owner, _engine) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module @ember/engine
  */

  class EngineInstance extends _object.default.extend(_runtime.RegistryProxyMixin, _runtime.ContainerProxyMixin) {
    constructor() {
      super(...arguments);
      this._booted = false;
      this._bootPromise = null;
    }
    /**
     @private
     @method setupRegistry
     @param {Registry} registry
     @param {BootOptions} options
     */
    // This is effectively an "abstract" method: it defines the contract a
    // subclass (e.g. `ApplicationInstance`) must follow to implement this
    // behavior, but an `EngineInstance` has no behavior of its own here.
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    static setupRegistry(_registry, _options) {}
    init(properties) {
      var _a;
      super.init(properties);
      // Ensure the guid gets setup for this instance
      (0, _utils.guidFor)(this);
      (_a = this.base) !== null && _a !== void 0 ? _a : this.base = this.application;
      // Create a per-instance registry that will use the application's registry
      // as a fallback for resolving registrations.
      var registry = this.__registry__ = new _container.Registry({
        fallback: this.base.__registry__
      });
      // Create a per-instance container from the instance's registry
      this.__container__ = registry.container({
        owner: this
      });
      this._booted = false;
    }
    /**
      Initialize the `EngineInstance` and return a promise that resolves
      with the instance itself when the boot process is complete.
         The primary task here is to run any registered instance initializers.
         See the documentation on `BootOptions` for the options it takes.
         @public
      @method boot
      @param options {Object}
      @return {Promise<EngineInstance,Error>}
    */
    boot(options) {
      if (this._bootPromise) {
        return this._bootPromise;
      }
      this._bootPromise = new _runtime.RSVP.Promise(resolve => {
        resolve(this._bootSync(options));
      });
      return this._bootPromise;
    }
    /**
      Unfortunately, a lot of existing code assumes booting an instance is
      synchronous – specifically, a lot of tests assume the last call to
      `app.advanceReadiness()` or `app.reset()` will result in a new instance
      being fully-booted when the current runloop completes.
         We would like new code (like the `visit` API) to stop making this
      assumption, so we created the asynchronous version above that returns a
      promise. But until we have migrated all the code, we would have to expose
      this method for use *internally* in places where we need to boot an instance
      synchronously.
         @private
    */
    _bootSync(options) {
      if (this._booted) {
        return this;
      }
      (true && !((0, _engineParent.getEngineParent)(this)) && (0, _debug.assert)("An engine instance's parent must be set via `setEngineParent(engine, parent)` prior to calling `engine.boot()`.", (0, _engineParent.getEngineParent)(this)));
      this.cloneParentDependencies();
      this.setupRegistry(options);
      this.base.runInstanceInitializers(this);
      this._booted = true;
      return this;
    }
    setupRegistry(options) {
      if (options === void 0) {
        options = this.__container__.lookup('-environment:main');
      }
      this.constructor.setupRegistry(this.__registry__, options);
    }
    /**
     Unregister a factory.
        Overrides `RegistryProxy#unregister` in order to clear any cached instances
     of the unregistered factory.
        @public
     @method unregister
     @param {String} fullName
     */
    unregister(fullName) {
      this.__container__.reset(fullName);
      // We overwrote this method from RegistryProxyMixin.
      this.__registry__.unregister(fullName);
    }
    /**
      Build a new `EngineInstance` that's a child of this instance.
         Engines must be registered by name with their parent engine
      (or application).
         @private
      @method buildChildEngineInstance
      @param name {String} the registered name of the engine.
      @param options {Object} options provided to the engine instance.
      @return {EngineInstance,Error}
    */
    buildChildEngineInstance(name, options) {
      if (options === void 0) {
        options = {};
      }
      var ChildEngine = this.lookup(`engine:${name}`);
      if (!ChildEngine) {
        throw new Error(`You attempted to mount the engine '${name}', but it is not registered with its parent.`);
      }
      (true && !(ChildEngine instanceof _engine.default) && (0, _debug.assert)('expected an Engine', ChildEngine instanceof _engine.default));
      var engineInstance = ChildEngine.buildInstance(options);
      (0, _engineParent.setEngineParent)(engineInstance, this);
      return engineInstance;
    }
    /**
      Clone dependencies shared between an engine instance and its parent.
         @private
      @method cloneParentDependencies
    */
    cloneParentDependencies() {
      var parent = (0, _engineParent.getEngineParent)(this);
      (true && !(parent) && (0, _debug.assert)('expected parent', parent));
      var registrations = ['route:basic', 'service:-routing'];
      registrations.forEach(key => {
        var registration = parent.resolveRegistration(key);
        (true && !((0, _owner.isFactory)(registration)) && (0, _debug.assert)('expected registration to be a factory', (0, _owner.isFactory)(registration)));
        this.register(key, registration);
      });
      var env = parent.lookup('-environment:main');
      this.register('-environment:main', env, {
        instantiate: false
      });
      // The type annotation forces TS to (a) validate that these match and (b)
      // *notice* that they match, e.g. below on the `singletons.push()`.
      var singletons = ['router:main', (0, _container.privatize)`-bucket-cache:main`, '-view-registry:main', `renderer:-dom`, 'service:-document'];
      if (env['isInteractive']) {
        singletons.push('event_dispatcher:main');
      }
      singletons.forEach(key => {
        // SAFETY: We already expect this to be a singleton
        var singleton = parent.lookup(key);
        this.register(key, singleton, {
          instantiate: false
        });
      });
    }
  }
  var _default = EngineInstance;
  _exports.default = _default;
});
define("@ember/engine/lib/engine-parent", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ENGINE_PARENT = void 0;
  _exports.getEngineParent = getEngineParent;
  _exports.setEngineParent = setEngineParent;
  var ENGINE_PARENT = Symbol('ENGINE_PARENT');
  /**
    `getEngineParent` retrieves an engine instance's parent instance.
  
    @method getEngineParent
    @param {EngineInstance} engine An engine instance.
    @return {EngineInstance} The parent engine instance.
    @for @ember/engine
    @static
    @private
  */
  _exports.ENGINE_PARENT = ENGINE_PARENT;
  function getEngineParent(engine) {
    return engine[ENGINE_PARENT];
  }
  /**
    `setEngineParent` sets an engine instance's parent instance.
  
    @method setEngineParent
    @param {EngineInstance} engine An engine instance.
    @param {EngineInstance} parent The parent engine instance.
    @private
  */
  function setEngineParent(engine, parent) {
    engine[ENGINE_PARENT] = parent;
  }
});
define("@ember/enumerable/index", ["exports", "@ember/object/mixin"], function (_exports, _mixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var Enumerable = _mixin.default.create();
  var _default = Enumerable;
  _exports.default = _default;
});
define("@ember/enumerable/mutable", ["exports", "@ember/enumerable", "@ember/object/mixin"], function (_exports, _enumerable, _mixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var MutableEnumerable = _mixin.default.create(_enumerable.default);
  var _default = MutableEnumerable;
  _exports.default = _default;
});
define("@ember/error/index", ["exports", "@ember/debug"], function (_exports, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
    The JavaScript Error object used by Ember.assert.
  
    @class Error
    @namespace Ember
    @extends Error
    @constructor
    @public
    @deprecated
  */
  var EmberError;
  if (true /* DEBUG */) {
    // eslint-disable-next-line no-inner-declarations
    function EmberDebugConstructor(message) {
      (true && !(false) && (0, _debug.deprecate)('The @ember/error package merely re-exported the native Error and is deprecated. Please use a native Error directly instead.', false, {
        id: 'deprecate-ember-error',
        until: '5.0.0',
        url: 'https://deprecations.emberjs.com/v4.x/#toc_deprecate-ember-error',
        for: 'ember-source',
        since: {
          available: '4.10.0',
          enabled: '4.10.0'
        }
      }));
      return new Error(message);
    }
    EmberDebugConstructor.prototype = Error.prototype;
    // SAFETY: We need this cast since our EmberDebugConstructor doesn't define a type for `new` even though it will work with `new`.
    EmberError = EmberDebugConstructor;
  } else {
    EmberError = Error;
  }
  var _default = EmberError;
  _exports.default = _default;
});
define("@ember/helper/index", ["exports", "@glimmer/manager", "@glimmer/runtime"], function (_exports, _manager, _runtime) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "array", {
    enumerable: true,
    get: function () {
      return _runtime.array;
    }
  });
  Object.defineProperty(_exports, "capabilities", {
    enumerable: true,
    get: function () {
      return _manager.helperCapabilities;
    }
  });
  Object.defineProperty(_exports, "concat", {
    enumerable: true,
    get: function () {
      return _runtime.concat;
    }
  });
  Object.defineProperty(_exports, "fn", {
    enumerable: true,
    get: function () {
      return _runtime.fn;
    }
  });
  Object.defineProperty(_exports, "get", {
    enumerable: true,
    get: function () {
      return _runtime.get;
    }
  });
  Object.defineProperty(_exports, "hash", {
    enumerable: true,
    get: function () {
      return _runtime.hash;
    }
  });
  Object.defineProperty(_exports, "invokeHelper", {
    enumerable: true,
    get: function () {
      return _runtime.invokeHelper;
    }
  });
  Object.defineProperty(_exports, "setHelperManager", {
    enumerable: true,
    get: function () {
      return _manager.setHelperManager;
    }
  });
});
define("@ember/instrumentation/index", ["exports", "@ember/-internals/environment", "@ember/debug"], function (_exports, _environment, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports._instrumentStart = _instrumentStart;
  _exports.flaggedInstrument = flaggedInstrument;
  _exports.instrument = instrument;
  _exports.reset = reset;
  _exports.subscribe = subscribe;
  _exports.subscribers = void 0;
  _exports.unsubscribe = unsubscribe;
  /* eslint no-console:off */
  /* global console */

  /**
  @module @ember/instrumentation
  @private
  */
  /**
    The purpose of the Ember Instrumentation module is
    to provide efficient, general-purpose instrumentation
    for Ember.
  
    Subscribe to a listener by using `subscribe`:
  
    ```javascript
    import { subscribe } from '@ember/instrumentation';
  
    subscribe("render", {
      before(name, timestamp, payload) {
  
      },
  
      after(name, timestamp, payload) {
  
      }
    });
    ```
  
    If you return a value from the `before` callback, that same
    value will be passed as a fourth parameter to the `after`
    callback.
  
    Instrument a block of code by using `instrument`:
  
    ```javascript
    import { instrument } from '@ember/instrumentation';
  
    instrument("render.handlebars", payload, function() {
      // rendering logic
    }, binding);
    ```
  
    Event names passed to `instrument` are namespaced
    by periods, from more general to more specific. Subscribers
    can listen for events by whatever level of granularity they
    are interested in.
  
    In the above example, the event is `render.handlebars`,
    and the subscriber listened for all events beginning with
    `render`. It would receive callbacks for events named
    `render`, `render.handlebars`, `render.container`, or
    even `render.handlebars.layout`.
  
    @class Instrumentation
    @static
    @private
  */
  var subscribers = [];
  _exports.subscribers = subscribers;
  var cache = {};
  function populateListeners(name) {
    var listeners = [];
    for (var subscriber of subscribers) {
      if (subscriber.regex.test(name)) {
        listeners.push(subscriber.object);
      }
    }
    cache[name] = listeners;
    return listeners;
  }
  var time = (() => {
    var perf = 'undefined' !== typeof window ? window.performance || {} : {};
    var fn = perf.now || perf.mozNow || perf.webkitNow || perf.msNow || perf.oNow;
    return fn ? fn.bind(perf) : Date.now;
  })();
  function isCallback(value) {
    return typeof value === 'function';
  }
  function instrument(name, p1, p2, p3) {
    var _payload;
    var callback;
    var binding;
    if (arguments.length <= 3 && isCallback(p1)) {
      callback = p1;
      binding = p2;
    } else {
      _payload = p1;
      callback = p2;
      binding = p3;
    }
    // fast path
    if (subscribers.length === 0) {
      return callback.call(binding);
    }
    // avoid allocating the payload in fast path
    var payload = _payload || {};
    var finalizer = _instrumentStart(name, () => payload);
    if (finalizer === NOOP) {
      return callback.call(binding);
    } else {
      return withFinalizer(callback, finalizer, payload, binding);
    }
  }
  function flaggedInstrument(_name, _payload, callback) {
    return callback();
  }
  function withFinalizer(callback, finalizer, payload, binding) {
    try {
      return callback.call(binding);
    } catch (e) {
      payload.exception = e;
      throw e;
    } finally {
      finalizer();
    }
  }
  function NOOP() {}
  function _instrumentStart(name, payloadFunc, payloadArg) {
    if (subscribers.length === 0) {
      return NOOP;
    }
    var listeners = cache[name];
    if (!listeners) {
      listeners = populateListeners(name);
    }
    if (listeners.length === 0) {
      return NOOP;
    }
    var payload = payloadFunc(payloadArg);
    var STRUCTURED_PROFILE = _environment.ENV.STRUCTURED_PROFILE;
    var timeName;
    if (STRUCTURED_PROFILE) {
      timeName = `${name}: ${payload.object}`;
      console.time(timeName);
    }
    var beforeValues = [];
    var timestamp = time();
    for (var listener of listeners) {
      beforeValues.push(listener.before(name, timestamp, payload));
    }
    var constListeners = listeners;
    return function _instrumentEnd() {
      var timestamp = time();
      for (var i = 0; i < constListeners.length; i++) {
        var _listener = constListeners[i];
        (true && !(_listener) && (0, _debug.assert)('has listener', _listener)); // Iterating over values
        if (typeof _listener.after === 'function') {
          _listener.after(name, timestamp, payload, beforeValues[i]);
        }
      }
      if (STRUCTURED_PROFILE) {
        console.timeEnd(timeName);
      }
    };
  }
  /**
    Subscribes to a particular event or instrumented block of code.
  
    @method subscribe
    @for @ember/instrumentation
    @static
  
    @param {String} [pattern] Namespaced event name.
    @param {Object} [object] Before and After hooks.
  
    @return {Subscriber}
    @private
  */
  function subscribe(pattern, object) {
    var paths = pattern.split('.');
    var regexes = [];
    for (var path of paths) {
      if (path === '*') {
        regexes.push('[^\\.]*');
      } else {
        regexes.push(path);
      }
    }
    var regex = regexes.join('\\.');
    regex = `${regex}(\\..*)?`;
    var subscriber = {
      pattern,
      regex: new RegExp(`^${regex}$`),
      object
    };
    subscribers.push(subscriber);
    cache = {};
    return subscriber;
  }
  /**
    Unsubscribes from a particular event or instrumented block of code.
  
    @method unsubscribe
    @for @ember/instrumentation
    @static
  
    @param {Object} [subscriber]
    @private
  */
  function unsubscribe(subscriber) {
    var index = 0;
    for (var i = 0; i < subscribers.length; i++) {
      if (subscribers[i] === subscriber) {
        index = i;
      }
    }
    subscribers.splice(index, 1);
    cache = {};
  }
  /**
    Resets `Instrumentation` by flushing list of subscribers.
  
    @method reset
    @for @ember/instrumentation
    @static
    @private
  */
  function reset() {
    subscribers.length = 0;
    cache = {};
  }
});
define("@ember/modifier/index", ["exports", "@glimmer/manager", "@ember/-internals/glimmer", "@glimmer/runtime"], function (_exports, _manager, _glimmer, _runtime) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "capabilities", {
    enumerable: true,
    get: function () {
      return _glimmer.modifierCapabilities;
    }
  });
  Object.defineProperty(_exports, "on", {
    enumerable: true,
    get: function () {
      return _runtime.on;
    }
  });
  Object.defineProperty(_exports, "setModifierManager", {
    enumerable: true,
    get: function () {
      return _manager.setModifierManager;
    }
  });
});
define("@ember/object/-internals", ["exports", "@ember/-internals/metal", "@ember/-internals/utils", "@ember/debug", "@ember/object"], function (_exports, _metal, _utils, _debug, _object) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.FrameworkObject = void 0;
  Object.defineProperty(_exports, "cacheFor", {
    enumerable: true,
    get: function () {
      return _metal.getCachedValueFor;
    }
  });
  Object.defineProperty(_exports, "guidFor", {
    enumerable: true,
    get: function () {
      return _utils.guidFor;
    }
  });
  var _a;
  var FrameworkObject = class FrameworkObject extends _object.default {};
  _exports.FrameworkObject = FrameworkObject;
  if (true /* DEBUG */) {
    var INIT_WAS_CALLED = Symbol('INIT_WAS_CALLED');
    var ASSERT_INIT_WAS_CALLED = (0, _utils.symbol)('ASSERT_INIT_WAS_CALLED');
    _exports.FrameworkObject = FrameworkObject = class DebugFrameworkObject extends _object.default {
      constructor() {
        super(...arguments);
        this[_a] = false;
      }
      init(properties) {
        super.init(properties);
        this[INIT_WAS_CALLED] = true;
      }
      [(_a = INIT_WAS_CALLED, ASSERT_INIT_WAS_CALLED)]() {
        (true && !(this[INIT_WAS_CALLED]) && (0, _debug.assert)(`You must call \`super.init(...arguments);\` or \`this._super(...arguments)\` when overriding \`init\` on a framework object. Please update ${this} to call \`super.init(...arguments);\` from \`init\` when using native classes or \`this._super(...arguments)\` when using \`EmberObject.extend()\`.`, this[INIT_WAS_CALLED]));
      }
    };
    (0, _metal.addListener)(FrameworkObject.prototype, 'init', null, ASSERT_INIT_WAS_CALLED);
  }
});
define("@ember/object/compat", ["exports", "@ember/-internals/metal", "@ember/debug", "@glimmer/validator"], function (_exports, _metal, _debug, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.dependentKeyCompat = dependentKeyCompat;
  var wrapGetterSetter = function (target, key, desc) {
    var {
      get: originalGet
    } = desc;
    (true && !((0, _metal.descriptorForProperty)(target, key) === undefined) && (0, _debug.assert)('You attempted to use @dependentKeyCompat on a property that already has been decorated with either @computed or @tracked. @dependentKeyCompat is only necessary for native getters that are not decorated with @computed.', (0, _metal.descriptorForProperty)(target, key) === undefined));
    if (originalGet !== undefined) {
      desc.get = function () {
        var propertyTag = (0, _validator.tagFor)(this, key);
        var ret;
        var tag = (0, _validator.track)(() => {
          ret = originalGet.call(this);
        });
        (0, _validator.updateTag)(propertyTag, tag);
        (0, _validator.consumeTag)(tag);
        return ret;
      };
    }
    return desc;
  };
  function dependentKeyCompat() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    if ((0, _metal.isElementDescriptor)(args)) {
      var [target, key, desc] = args;
      (true && !(desc != null && (typeof desc.get === 'function' || typeof desc.set === 'function')) && (0, _debug.assert)('The @dependentKeyCompat decorator must be applied to getters/setters when used in native classes', desc != null && (typeof desc.get === 'function' || typeof desc.set === 'function')));
      return wrapGetterSetter(target, key, desc);
    } else {
      var _desc2 = args[0];
      (true && !((value => {
        if (value && typeof value === 'object') {
          var cast = value;
          return (cast.configurable === undefined || cast.configurable === false || cast.configurable === true) && (cast.enumerable === undefined || cast.enumerable === false || cast.enumerable === true) && (cast.writable === undefined || cast.writable === false || cast.writable === true) && (cast.get === undefined || typeof cast.get === 'function') && (cast.set === undefined || typeof cast.set === 'function');
        }
        return false;
      })(_desc2)) && (0, _debug.assert)('expected valid PropertyDescriptor', (value => {
        if (value && typeof value === 'object') {
          var cast = value;
          return (cast.configurable === undefined || cast.configurable === false || cast.configurable === true) && (cast.enumerable === undefined || cast.enumerable === false || cast.enumerable === true) && (cast.writable === undefined || cast.writable === false || cast.writable === true) && (cast.get === undefined || typeof cast.get === 'function') && (cast.set === undefined || typeof cast.set === 'function');
        }
        return false;
      })(_desc2)));
      var decorator = function (target, key, _desc, _meta, isClassicDecorator) {
        (true && !(isClassicDecorator) && (0, _debug.assert)('The @dependentKeyCompat decorator may only be passed a method when used in classic classes. You should decorate getters/setters directly in native classes', isClassicDecorator));
        (true && !(typeof _desc2.get === 'function' || typeof _desc2.set === 'function') && (0, _debug.assert)('The dependentKeyCompat() decorator must be passed a getter or setter when used in classic classes', typeof _desc2.get === 'function' || typeof _desc2.set === 'function'));
        return wrapGetterSetter(target, key, _desc2);
      };
      (0, _metal.setClassicDecorator)(decorator);
      return decorator;
    }
  }
  (0, _metal.setClassicDecorator)(dependentKeyCompat);
});
define("@ember/object/computed", ["exports", "@ember/-internals/metal", "@ember/object/lib/computed/computed_macros", "@ember/object/lib/computed/reduce_computed_macros"], function (_exports, _metal, _computed_macros, _reduce_computed_macros) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "alias", {
    enumerable: true,
    get: function () {
      return _metal.alias;
    }
  });
  Object.defineProperty(_exports, "and", {
    enumerable: true,
    get: function () {
      return _computed_macros.and;
    }
  });
  Object.defineProperty(_exports, "bool", {
    enumerable: true,
    get: function () {
      return _computed_macros.bool;
    }
  });
  Object.defineProperty(_exports, "collect", {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.collect;
    }
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _metal.ComputedProperty;
    }
  });
  Object.defineProperty(_exports, "deprecatingAlias", {
    enumerable: true,
    get: function () {
      return _computed_macros.deprecatingAlias;
    }
  });
  Object.defineProperty(_exports, "empty", {
    enumerable: true,
    get: function () {
      return _computed_macros.empty;
    }
  });
  Object.defineProperty(_exports, "equal", {
    enumerable: true,
    get: function () {
      return _computed_macros.equal;
    }
  });
  Object.defineProperty(_exports, "expandProperties", {
    enumerable: true,
    get: function () {
      return _metal.expandProperties;
    }
  });
  Object.defineProperty(_exports, "filter", {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.filter;
    }
  });
  Object.defineProperty(_exports, "filterBy", {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.filterBy;
    }
  });
  Object.defineProperty(_exports, "gt", {
    enumerable: true,
    get: function () {
      return _computed_macros.gt;
    }
  });
  Object.defineProperty(_exports, "gte", {
    enumerable: true,
    get: function () {
      return _computed_macros.gte;
    }
  });
  Object.defineProperty(_exports, "intersect", {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.intersect;
    }
  });
  Object.defineProperty(_exports, "lt", {
    enumerable: true,
    get: function () {
      return _computed_macros.lt;
    }
  });
  Object.defineProperty(_exports, "lte", {
    enumerable: true,
    get: function () {
      return _computed_macros.lte;
    }
  });
  Object.defineProperty(_exports, "map", {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.map;
    }
  });
  Object.defineProperty(_exports, "mapBy", {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.mapBy;
    }
  });
  Object.defineProperty(_exports, "match", {
    enumerable: true,
    get: function () {
      return _computed_macros.match;
    }
  });
  Object.defineProperty(_exports, "max", {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.max;
    }
  });
  Object.defineProperty(_exports, "min", {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.min;
    }
  });
  Object.defineProperty(_exports, "none", {
    enumerable: true,
    get: function () {
      return _computed_macros.none;
    }
  });
  Object.defineProperty(_exports, "not", {
    enumerable: true,
    get: function () {
      return _computed_macros.not;
    }
  });
  Object.defineProperty(_exports, "notEmpty", {
    enumerable: true,
    get: function () {
      return _computed_macros.notEmpty;
    }
  });
  Object.defineProperty(_exports, "oneWay", {
    enumerable: true,
    get: function () {
      return _computed_macros.oneWay;
    }
  });
  Object.defineProperty(_exports, "or", {
    enumerable: true,
    get: function () {
      return _computed_macros.or;
    }
  });
  Object.defineProperty(_exports, "readOnly", {
    enumerable: true,
    get: function () {
      return _computed_macros.readOnly;
    }
  });
  Object.defineProperty(_exports, "reads", {
    enumerable: true,
    get: function () {
      return _computed_macros.oneWay;
    }
  });
  Object.defineProperty(_exports, "setDiff", {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.setDiff;
    }
  });
  Object.defineProperty(_exports, "sort", {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.sort;
    }
  });
  Object.defineProperty(_exports, "sum", {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.sum;
    }
  });
  Object.defineProperty(_exports, "union", {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.union;
    }
  });
  Object.defineProperty(_exports, "uniq", {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.uniq;
    }
  });
  Object.defineProperty(_exports, "uniqBy", {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.uniqBy;
    }
  });
});
define("@ember/object/core", ["exports", "@ember/-internals/container", "@ember/-internals/owner", "@ember/-internals/utils", "@ember/-internals/meta", "@ember/-internals/metal", "@ember/object/mixin", "@ember/-internals/runtime", "@ember/array", "@ember/debug", "@glimmer/util", "@glimmer/destroyable", "@glimmer/owner"], function (_exports, _container, _owner, _utils, _meta2, _metal, _mixin, _runtime, _array, _debug, _util, _destroyable, _owner2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
    @module @ember/object/core
  */

  function hasSetUnknownProperty(val) {
    return typeof val === 'object' && val !== null && typeof val.setUnknownProperty === 'function';
  }
  function hasToStringExtension(val) {
    return typeof val === 'object' && val !== null && typeof val.toStringExtension === 'function';
  }
  var reopen = _mixin.default.prototype.reopen;
  var wasApplied = new _util._WeakSet();
  var prototypeMixinMap = new WeakMap();
  var initCalled = true /* DEBUG */ ? new _util._WeakSet() : undefined; // only used in debug builds to enable the proxy trap
  var destroyCalled = new Set();
  function ensureDestroyCalled(instance) {
    if (!destroyCalled.has(instance)) {
      instance.destroy();
    }
  }
  function initialize(obj, properties) {
    var m = (0, _meta2.meta)(obj);
    if (properties !== undefined) {
      (true && !(typeof properties === 'object' && properties !== null) && (0, _debug.assert)('EmberObject.create only accepts objects.', typeof properties === 'object' && properties !== null));
      (true && !(!(properties instanceof _mixin.default)) && (0, _debug.assert)('EmberObject.create no longer supports mixing in other ' + 'definitions, use .extend & .create separately instead.', !(properties instanceof _mixin.default)));
      var concatenatedProperties = obj.concatenatedProperties;
      var mergedProperties = obj.mergedProperties;
      var keyNames = Object.keys(properties);
      for (var keyName of keyNames) {
        var value = properties[keyName];
        (true && !(!(0, _metal.isClassicDecorator)(value)) && (0, _debug.assert)('EmberObject.create no longer supports defining computed ' + 'properties. Define computed properties using extend() or reopen() ' + 'before calling create().', !(0, _metal.isClassicDecorator)(value)));
        (true && !(!(typeof value === 'function' && value.toString().indexOf('._super') !== -1)) && (0, _debug.assert)('EmberObject.create no longer supports defining methods that call _super.', !(typeof value === 'function' && value.toString().indexOf('._super') !== -1)));
        (true && !(!(keyName === 'actions' && _runtime.ActionHandler.detect(obj))) && (0, _debug.assert)('`actions` must be provided at extend time, not at create time, ' + 'when Ember.ActionHandler is used (i.e. views, controllers & routes).', !(keyName === 'actions' && _runtime.ActionHandler.detect(obj))));
        var possibleDesc = (0, _metal.descriptorForProperty)(obj, keyName, m);
        var isDescriptor = possibleDesc !== undefined;
        if (!isDescriptor) {
          if (concatenatedProperties !== undefined && concatenatedProperties.length > 0 && concatenatedProperties.includes(keyName)) {
            var baseValue = obj[keyName];
            if (baseValue) {
              value = (0, _array.makeArray)(baseValue).concat(value);
            } else {
              value = (0, _array.makeArray)(value);
            }
          }
          if (mergedProperties !== undefined && mergedProperties.length > 0 && mergedProperties.includes(keyName)) {
            var _baseValue = obj[keyName];
            value = Object.assign({}, _baseValue, value);
          }
        }
        if (isDescriptor) {
          possibleDesc.set(obj, keyName, value);
        } else if (hasSetUnknownProperty(obj) && !(keyName in obj)) {
          obj.setUnknownProperty(keyName, value);
        } else {
          if (true /* DEBUG */) {
            (0, _metal.defineProperty)(obj, keyName, null, value, m); // setup mandatory setter
          } else {
            obj[keyName] = value;
          }
        }
      }
    }
    // using DEBUG here to avoid the extraneous variable when not needed
    if (true /* DEBUG */) {
      initCalled.add(obj);
    }
    obj.init(properties);
    m.unsetInitializing();
    var observerEvents = m.observerEvents();
    if (observerEvents !== undefined) {
      for (var i = 0; i < observerEvents.length; i++) {
        (0, _metal.activateObserver)(obj, observerEvents[i].event, observerEvents[i].sync);
      }
    }
    (0, _metal.sendEvent)(obj, 'init', undefined, undefined, m);
  }
  class CoreObject {
    constructor(owner) {
      this[_owner2.OWNER] = owner;
      // prepare prototype...
      this.constructor.proto();
      var self;
      if (true /* DEBUG */ && (0, _metal.hasUnknownProperty)(this)) {
        var messageFor = (obj, property) => {
          return `You attempted to access the \`${String(property)}\` property (of ${obj}).\n` + `Since Ember 3.1, this is usually fine as you no longer need to use \`.get()\`\n` + `to access computed properties. However, in this case, the object in question\n` + `is a special kind of Ember object (a proxy). Therefore, it is still necessary\n` + `to use \`.get('${String(property)}')\` in this case.\n\n` + `If you encountered this error because of third-party code that you don't control,\n` + `there is more information at https://github.com/emberjs/ember.js/issues/16148, and\n` + `you can help us improve this error message by telling us more about what happened in\n` + `this situation.`;
        };
        /* globals Proxy Reflect */
        self = new Proxy(this, {
          get(target, property, receiver) {
            if (property === _metal.PROXY_CONTENT) {
              return target;
            } else if (
            // init called will be set on the proxy, not the target, so get with the receiver
            !initCalled.has(receiver) || typeof property === 'symbol' || (0, _utils.isInternalSymbol)(property) || property === 'toJSON' || property === 'toString' || property === 'toStringExtension' || property === 'didDefineProperty' || property === 'willWatchProperty' || property === 'didUnwatchProperty' || property === 'didAddListener' || property === 'didRemoveListener' || property === 'isDescriptor' || property === '_onLookup' || property in target) {
              return Reflect.get(target, property, receiver);
            }
            var value = target.unknownProperty.call(receiver, property);
            if (typeof value !== 'function') {
              (true && !(value === undefined || value === null) && (0, _debug.assert)(messageFor(receiver, property), value === undefined || value === null));
            }
          }
        });
      } else {
        self = this;
      }
      var destroyable = self;
      (0, _destroyable.registerDestructor)(self, ensureDestroyCalled, true);
      (0, _destroyable.registerDestructor)(self, () => destroyable.willDestroy());
      // disable chains
      var m = (0, _meta2.meta)(self);
      m.setInitializing();
      // only return when in debug builds and `self` is the proxy created above
      if (true /* DEBUG */ && self !== this) {
        return self;
      }
    }
    reopen() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      (0, _mixin.applyMixin)(this, args);
      return this;
    }
    /**
      An overridable method called when objects are instantiated. By default,
      does nothing unless it is overridden during class definition.
         Example:
         ```javascript
      import EmberObject from '@ember/object';
         const Person = EmberObject.extend({
        init() {
          alert(`Name is ${this.get('name')}`);
        }
      });
         let steve = Person.create({
        name: 'Steve'
      });
         // alerts 'Name is Steve'.
      ```
         NOTE: If you do override `init` for a framework class like `Component`
      from `@ember/component`, be sure to call `this._super(...arguments)`
      in your `init` declaration!
      If you don't, Ember may not have an opportunity to
      do important setup work, and you'll see strange behavior in your
      application.
         @method init
      @public
    */
    init(_properties) {}
    /**
      Defines the properties that will be concatenated from the superclass
      (instead of overridden).
         By default, when you extend an Ember class a property defined in
      the subclass overrides a property with the same name that is defined
      in the superclass. However, there are some cases where it is preferable
      to build up a property's value by combining the superclass' property
      value with the subclass' value. An example of this in use within Ember
      is the `classNames` property of `Component` from `@ember/component`.
         Here is some sample code showing the difference between a concatenated
      property and a normal one:
         ```javascript
      import EmberObject from '@ember/object';
         const Bar = EmberObject.extend({
        // Configure which properties to concatenate
        concatenatedProperties: ['concatenatedProperty'],
           someNonConcatenatedProperty: ['bar'],
        concatenatedProperty: ['bar']
      });
         const FooBar = Bar.extend({
        someNonConcatenatedProperty: ['foo'],
        concatenatedProperty: ['foo']
      });
         let fooBar = FooBar.create();
      fooBar.get('someNonConcatenatedProperty'); // ['foo']
      fooBar.get('concatenatedProperty'); // ['bar', 'foo']
      ```
         This behavior extends to object creation as well. Continuing the
      above example:
         ```javascript
      let fooBar = FooBar.create({
        someNonConcatenatedProperty: ['baz'],
        concatenatedProperty: ['baz']
      })
      fooBar.get('someNonConcatenatedProperty'); // ['baz']
      fooBar.get('concatenatedProperty'); // ['bar', 'foo', 'baz']
      ```
         Adding a single property that is not an array will just add it in the array:
         ```javascript
      let fooBar = FooBar.create({
        concatenatedProperty: 'baz'
      })
      view.get('concatenatedProperty'); // ['bar', 'foo', 'baz']
      ```
         Using the `concatenatedProperties` property, we can tell Ember to mix the
      content of the properties.
         In `Component` the `classNames`, `classNameBindings` and
      `attributeBindings` properties are concatenated.
         This feature is available for you to use throughout the Ember object model,
      although typical app developers are likely to use it infrequently. Since
      it changes expectations about behavior of properties, you should properly
      document its usage in each individual concatenated property (to not
      mislead your users to think they can override the property in a subclass).
         @property concatenatedProperties
      @type Array
      @default null
      @public
    */
    /**
      Defines the properties that will be merged from the superclass
      (instead of overridden).
         By default, when you extend an Ember class a property defined in
      the subclass overrides a property with the same name that is defined
      in the superclass. However, there are some cases where it is preferable
      to build up a property's value by merging the superclass property value
      with the subclass property's value. An example of this in use within Ember
      is the `queryParams` property of routes.
         Here is some sample code showing the difference between a merged
      property and a normal one:
         ```javascript
      import EmberObject from '@ember/object';
         const Bar = EmberObject.extend({
        // Configure which properties are to be merged
        mergedProperties: ['mergedProperty'],
           someNonMergedProperty: {
          nonMerged: 'superclass value of nonMerged'
        },
        mergedProperty: {
          page: { replace: false },
          limit: { replace: true }
        }
      });
         const FooBar = Bar.extend({
        someNonMergedProperty: {
          completelyNonMerged: 'subclass value of nonMerged'
        },
        mergedProperty: {
          limit: { replace: false }
        }
      });
         let fooBar = FooBar.create();
         fooBar.get('someNonMergedProperty');
      // => { completelyNonMerged: 'subclass value of nonMerged' }
      //
      // Note the entire object, including the nonMerged property of
      // the superclass object, has been replaced
         fooBar.get('mergedProperty');
      // => {
      //   page: {replace: false},
      //   limit: {replace: false}
      // }
      //
      // Note the page remains from the superclass, and the
      // `limit` property's value of `false` has been merged from
      // the subclass.
      ```
         This behavior is not available during object `create` calls. It is only
      available at `extend` time.
         In `Route` the `queryParams` property is merged.
         This feature is available for you to use throughout the Ember object model,
      although typical app developers are likely to use it infrequently. Since
      it changes expectations about behavior of properties, you should properly
      document its usage in each individual merged property (to not
      mislead your users to think they can override the property in a subclass).
         @property mergedProperties
      @type Array
      @default null
      @public
    */
    /**
      Destroyed object property flag.
         if this property is `true` the observers and bindings were already
      removed by the effect of calling the `destroy()` method.
         @property isDestroyed
      @default false
      @public
    */
    get isDestroyed() {
      return (0, _destroyable.isDestroyed)(this);
    }
    set isDestroyed(_value) {
      (true && !(false) && (0, _debug.assert)(`You cannot set \`${this}.isDestroyed\` directly, please use \`.destroy()\`.`, false));
    }
    /**
      Destruction scheduled flag. The `destroy()` method has been called.
         The object stays intact until the end of the run loop at which point
      the `isDestroyed` flag is set.
         @property isDestroying
      @default false
      @public
    */
    get isDestroying() {
      return (0, _destroyable.isDestroying)(this);
    }
    set isDestroying(_value) {
      (true && !(false) && (0, _debug.assert)(`You cannot set \`${this}.isDestroying\` directly, please use \`.destroy()\`.`, false));
    }
    /**
      Destroys an object by setting the `isDestroyed` flag and removing its
      metadata, which effectively destroys observers and bindings.
         If you try to set a property on a destroyed object, an exception will be
      raised.
         Note that destruction is scheduled for the end of the run loop and does not
      happen immediately.  It will set an isDestroying flag immediately.
         @method destroy
      @return {EmberObject} receiver
      @public
    */
    destroy() {
      // Used to ensure that manually calling `.destroy()` does not immediately call destroy again
      destroyCalled.add(this);
      try {
        (0, _destroyable.destroy)(this);
      } finally {
        destroyCalled.delete(this);
      }
      return this;
    }
    /**
      Override to implement teardown.
         @method willDestroy
      @public
    */
    willDestroy() {}
    /**
      Returns a string representation which attempts to provide more information
      than Javascript's `toString` typically does, in a generic way for all Ember
      objects.
         ```javascript
      import EmberObject from '@ember/object';
         const Person = EmberObject.extend();
      person = Person.create();
      person.toString(); //=> "<Person:ember1024>"
      ```
         If the object's class is not defined on an Ember namespace, it will
      indicate it is a subclass of the registered superclass:
         ```javascript
      const Student = Person.extend();
      let student = Student.create();
      student.toString(); //=> "<(subclass of Person):ember1025>"
      ```
         If the method `toStringExtension` is defined, its return value will be
      included in the output.
         ```javascript
      const Teacher = Person.extend({
        toStringExtension() {
          return this.get('fullName');
        }
      });
      teacher = Teacher.create();
      teacher.toString(); //=> "<Teacher:ember1026:Tom Dale>"
      ```
         @method toString
      @return {String} string representation
      @public
    */
    toString() {
      var extension = hasToStringExtension(this) ? `:${this.toStringExtension()}` : '';
      return `<${(0, _container.getFactoryFor)(this) || '(unknown)'}:${(0, _utils.guidFor)(this)}${extension}>`;
    }
    static extend() {
      var Class = class extends this {};
      for (var _len2 = arguments.length, mixins = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        mixins[_key2] = arguments[_key2];
      }
      reopen.apply(Class.PrototypeMixin, mixins);
      return Class;
    }
    static create() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      var props = args[0];
      var instance;
      if (props !== undefined) {
        instance = new this((0, _owner.getOwner)(props));
        // TODO(SAFETY): at present, we cannot actually rely on this being set,
        // because a number of acceptance tests are (incorrectly? Unclear!)
        // relying on the ability to run through this path with `factory` being
        // `undefined`. It's *possible* that actually means that the type for
        // `setFactoryFor()` should allow `undefined`, but we typed it the other
        // way for good reason! Accordingly, this *casts* `factory`, and the
        // commented-out `assert()` is here in the hope that we can enable it
        // after addressing tests *or* updating the call signature here.
        var factory = (0, _container.getFactoryFor)(props);
        // assert(`missing factory when creating object ${instance}`, factory !== undefined);
        (0, _container.setFactoryFor)(instance, factory);
      } else {
        instance = new this();
      }
      if (args.length <= 1) {
        initialize(instance, props);
      } else {
        initialize(instance, flattenProps.apply(this, args));
      }
      return instance;
    }
    /**
      Augments a constructor's prototype with additional
      properties and functions:
         ```javascript
      import EmberObject from '@ember/object';
         const MyObject = EmberObject.extend({
        name: 'an object'
      });
         o = MyObject.create();
      o.get('name'); // 'an object'
         MyObject.reopen({
        say(msg) {
          console.log(msg);
        }
      });
         o2 = MyObject.create();
      o2.say('hello'); // logs "hello"
         o.say('goodbye'); // logs "goodbye"
      ```
         To add functions and properties to the constructor itself,
      see `reopenClass`
         @method reopen
      @for @ember/object
      @static
      @public
    */
    static reopen() {
      this.willReopen();
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }
      reopen.apply(this.PrototypeMixin, args);
      return this;
    }
    static willReopen() {
      var p = this.prototype;
      if (wasApplied.has(p)) {
        wasApplied.delete(p);
        // If the base mixin already exists and was applied, create a new mixin to
        // make sure that it gets properly applied. Reusing the same mixin after
        // the first `proto` call will cause it to get skipped.
        if (prototypeMixinMap.has(this)) {
          prototypeMixinMap.set(this, _mixin.default.create(this.PrototypeMixin));
        }
      }
    }
    /**
      Augments a constructor's own properties and functions:
         ```javascript
      import EmberObject from '@ember/object';
         const MyObject = EmberObject.extend({
        name: 'an object'
      });
         MyObject.reopenClass({
        canBuild: false
      });
         MyObject.canBuild; // false
      o = MyObject.create();
      ```
         In other words, this creates static properties and functions for the class.
      These are only available on the class and not on any instance of that class.
         ```javascript
      import EmberObject from '@ember/object';
         const Person = EmberObject.extend({
        name: '',
        sayHello() {
          alert(`Hello. My name is ${this.get('name')}`);
        }
      });
         Person.reopenClass({
        species: 'Homo sapiens',
           createPerson(name) {
          return Person.create({ name });
        }
      });
         let tom = Person.create({
        name: 'Tom Dale'
      });
      let yehuda = Person.createPerson('Yehuda Katz');
         tom.sayHello(); // "Hello. My name is Tom Dale"
      yehuda.sayHello(); // "Hello. My name is Yehuda Katz"
      alert(Person.species); // "Homo sapiens"
      ```
         Note that `species` and `createPerson` are *not* valid on the `tom` and `yehuda`
      variables. They are only valid on `Person`.
         To add functions and properties to instances of
      a constructor by extending the constructor's prototype
      see `reopen`
         @method reopenClass
      @for @ember/object
      @static
      @public
    */
    static reopenClass() {
      for (var _len5 = arguments.length, mixins = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        mixins[_key5] = arguments[_key5];
      }
      (0, _mixin.applyMixin)(this, mixins);
      return this;
    }
    static detect(obj) {
      if ('function' !== typeof obj) {
        return false;
      }
      while (obj) {
        if (obj === this) {
          return true;
        }
        obj = obj.superclass;
      }
      return false;
    }
    static detectInstance(obj) {
      return obj instanceof this;
    }
    /**
      In some cases, you may want to annotate computed properties with additional
      metadata about how they function or what values they operate on. For
      example, computed property functions may close over variables that are then
      no longer available for introspection.
         You can pass a hash of these values to a computed property like this:
         ```javascript
      import { computed } from '@ember/object';
         person: computed(function() {
        let personId = this.get('personId');
        return Person.create({ id: personId });
      }).meta({ type: Person })
      ```
         Once you've done this, you can retrieve the values saved to the computed
      property from your class like this:
         ```javascript
      MyClass.metaForProperty('person');
      ```
         This will return the original hash that was passed to `meta()`.
         @static
      @method metaForProperty
      @param key {String} property name
      @private
    */
    static metaForProperty(key) {
      var proto = this.proto(); // ensure prototype is initialized
      var possibleDesc = (0, _metal.descriptorForProperty)(proto, key);
      (true && !(possibleDesc !== undefined) && (0, _debug.assert)(`metaForProperty() could not find a computed property with key '${key}'.`, possibleDesc !== undefined));
      return possibleDesc._meta || {};
    }
    /**
      Iterate over each computed property for the class, passing its name
      and any associated metadata (see `metaForProperty`) to the callback.
         @static
      @method eachComputedProperty
      @param {Function} callback
      @param {Object} binding
      @private
    */
    static eachComputedProperty(callback, binding) {
      if (binding === void 0) {
        binding = this;
      }
      this.proto(); // ensure prototype is initialized
      var empty = {};
      (0, _meta2.meta)(this.prototype).forEachDescriptors((name, descriptor) => {
        if (descriptor.enumerable) {
          var _meta = descriptor._meta || empty;
          callback.call(binding, name, _meta);
        }
      });
    }
    static get PrototypeMixin() {
      var prototypeMixin = prototypeMixinMap.get(this);
      if (prototypeMixin === undefined) {
        prototypeMixin = _mixin.default.create();
        prototypeMixin.ownerConstructor = this;
        prototypeMixinMap.set(this, prototypeMixin);
      }
      return prototypeMixin;
    }
    static get superclass() {
      var c = Object.getPrototypeOf(this);
      return c !== Function.prototype ? c : undefined;
    }
    static proto() {
      var p = this.prototype;
      if (!wasApplied.has(p)) {
        wasApplied.add(p);
        var parent = this.superclass;
        if (parent) {
          parent.proto();
        }
        // If the prototype mixin exists, apply it. In the case of native classes,
        // it will not exist (unless the class has been reopened).
        if (prototypeMixinMap.has(this)) {
          this.PrototypeMixin.apply(p);
        }
      }
      return p;
    }
    static toString() {
      return `<${(0, _container.getFactoryFor)(this) || '(unknown)'}:constructor>`;
    }
  }
  CoreObject.isClass = true;
  CoreObject.isMethod = false;
  function flattenProps() {
    var initProperties = {};
    for (var _len6 = arguments.length, props = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
      props[_key6] = arguments[_key6];
    }
    for (var properties of props) {
      (true && !(!(properties instanceof _mixin.default)) && (0, _debug.assert)('EmberObject.create no longer supports mixing in other ' + 'definitions, use .extend & .create separately instead.', !(properties instanceof _mixin.default)));
      var keyNames = Object.keys(properties);
      for (var j = 0, k = keyNames.length; j < k; j++) {
        var keyName = keyNames[j];
        var value = properties[keyName];
        initProperties[keyName] = value;
      }
    }
    return initProperties;
  }
  if (true /* DEBUG */) {
    /**
      Provides lookup-time type validation for injected properties.
         @private
      @method _onLookup
    */
    CoreObject._onLookup = function injectedPropertyAssertion(debugContainerKey) {
      var [type] = debugContainerKey.split(':');
      var proto = this.proto();
      for (var key in proto) {
        var desc = (0, _metal.descriptorForProperty)(proto, key);
        if (desc && _metal.DEBUG_INJECTION_FUNCTIONS.has(desc._getter)) {
          (true && !(type === 'controller' || _metal.DEBUG_INJECTION_FUNCTIONS.get(desc._getter).type !== 'controller') && (0, _debug.assert)(`Defining \`${key}\` as an injected controller property on a non-controller (\`${debugContainerKey}\`) is not allowed.`, type === 'controller' || _metal.DEBUG_INJECTION_FUNCTIONS.get(desc._getter).type !== 'controller'));
        }
      }
    };
    /**
      Returns a hash of property names and container names that injected
      properties will lookup on the container lazily.
         @method _lazyInjections
      @return {Object} Hash of all lazy injected property keys to container names
      @private
    */
    CoreObject._lazyInjections = function () {
      var injections = {};
      var proto = this.proto();
      var key;
      var desc;
      for (key in proto) {
        desc = (0, _metal.descriptorForProperty)(proto, key);
        if (desc && _metal.DEBUG_INJECTION_FUNCTIONS.has(desc._getter)) {
          var {
            namespace,
            source,
            type,
            name
          } = _metal.DEBUG_INJECTION_FUNCTIONS.get(desc._getter);
          injections[key] = {
            namespace,
            source,
            specifier: `${type}:${name || key}`
          };
        }
      }
      return injections;
    };
  }
  var _default = CoreObject;
  _exports.default = _default;
});
define("@ember/object/evented", ["exports", "@ember/-internals/metal", "@ember/object/mixin"], function (_exports, _metal, _mixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  Object.defineProperty(_exports, "on", {
    enumerable: true,
    get: function () {
      return _metal.on;
    }
  });
  var Evented = _mixin.default.create({
    on(name, target, method) {
      (0, _metal.addListener)(this, name, target, method);
      return this;
    },
    one(name, target, method) {
      (0, _metal.addListener)(this, name, target, method, true);
      return this;
    },
    trigger(name) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      (0, _metal.sendEvent)(this, name, args);
    },
    off(name, target, method) {
      (0, _metal.removeListener)(this, name, target, method);
      return this;
    },
    has(name) {
      return (0, _metal.hasListeners)(this, name);
    }
  });
  var _default = Evented;
  _exports.default = _default;
});
define("@ember/object/events", ["exports", "@ember/-internals/metal"], function (_exports, _metal) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "addListener", {
    enumerable: true,
    get: function () {
      return _metal.addListener;
    }
  });
  Object.defineProperty(_exports, "removeListener", {
    enumerable: true,
    get: function () {
      return _metal.removeListener;
    }
  });
  Object.defineProperty(_exports, "sendEvent", {
    enumerable: true,
    get: function () {
      return _metal.sendEvent;
    }
  });
});
define("@ember/object/index", ["exports", "@ember/debug", "@ember/-internals/environment", "@ember/-internals/metal", "@ember/-internals/container", "@ember/-internals/utils", "@ember/object/core", "@ember/object/observable"], function (_exports, _debug, _environment, _metal, _container, _utils, _core, _observable) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.action = action;
  Object.defineProperty(_exports, "computed", {
    enumerable: true,
    get: function () {
      return _metal.computed;
    }
  });
  _exports.default = void 0;
  Object.defineProperty(_exports, "defineProperty", {
    enumerable: true,
    get: function () {
      return _metal.defineProperty;
    }
  });
  Object.defineProperty(_exports, "get", {
    enumerable: true,
    get: function () {
      return _metal.get;
    }
  });
  Object.defineProperty(_exports, "getProperties", {
    enumerable: true,
    get: function () {
      return _metal.getProperties;
    }
  });
  Object.defineProperty(_exports, "notifyPropertyChange", {
    enumerable: true,
    get: function () {
      return _metal.notifyPropertyChange;
    }
  });
  _exports.observer = observer;
  Object.defineProperty(_exports, "set", {
    enumerable: true,
    get: function () {
      return _metal.set;
    }
  });
  Object.defineProperty(_exports, "setProperties", {
    enumerable: true,
    get: function () {
      return _metal.setProperties;
    }
  });
  Object.defineProperty(_exports, "trySet", {
    enumerable: true,
    get: function () {
      return _metal.trySet;
    }
  });
  class EmberObject extends _core.default.extend(_observable.default) {
    get _debugContainerKey() {
      var factory = (0, _container.getFactoryFor)(this);
      return factory !== undefined && factory.fullName;
    }
  }
  var _default = EmberObject;
  /**
    Decorator that turns the target function into an Action which can be accessed
    directly by reference.
  
    ```js
    import Component from '@ember/component';
    import { action, set } from '@ember/object';
  
    export default class Tooltip extends Component {
      @action
      toggleShowing() {
        set(this, 'isShowing', !this.isShowing);
      }
    }
    ```
    ```hbs
    <!-- template.hbs -->
    <button {{action this.toggleShowing}}>Show tooltip</button>
  
    {{#if isShowing}}
      <div class="tooltip">
        I'm a tooltip!
      </div>
    {{/if}}
    ```
  
    Decorated actions also interop with the string style template actions:
  
    ```hbs
    <!-- template.hbs -->
    <button {{action "toggleShowing"}}>Show tooltip</button>
  
    {{#if isShowing}}
      <div class="tooltip">
        I'm a tooltip!
      </div>
    {{/if}}
    ```
  
    It also binds the function directly to the instance, so it can be used in any
    context and will correctly refer to the class it came from:
  
    ```hbs
    <!-- template.hbs -->
    <button
      {{did-insert this.toggleShowing}}
      {{on "click" this.toggleShowing}}
    >
      Show tooltip
    </button>
  
    {{#if isShowing}}
      <div class="tooltip">
        I'm a tooltip!
      </div>
    {{/if}}
    ```
  
    This can also be used in JavaScript code directly:
  
    ```js
    import Component from '@ember/component';
    import { action, set } from '@ember/object';
  
    export default class Tooltip extends Component {
      constructor() {
        super(...arguments);
  
        // this.toggleShowing is still bound correctly when added to
        // the event listener
        document.addEventListener('click', this.toggleShowing);
      }
  
      @action
      toggleShowing() {
        set(this, 'isShowing', !this.isShowing);
      }
    }
    ```
  
    This is considered best practice, since it means that methods will be bound
    correctly no matter where they are used. By contrast, the `{{action}}` helper
    and modifier can also be used to bind context, but it will be required for
    every usage of the method:
  
    ```hbs
    <!-- template.hbs -->
    <button
      {{did-insert (action this.toggleShowing)}}
      {{on "click" (action this.toggleShowing)}}
    >
      Show tooltip
    </button>
  
    {{#if isShowing}}
      <div class="tooltip">
        I'm a tooltip!
      </div>
    {{/if}}
    ```
  
    They also do not have equivalents in JavaScript directly, so they cannot be
    used for other situations where binding would be useful.
  
    @public
    @method action
    @for @ember/object
    @static
    @param {Function|undefined} callback The function to turn into an action,
                                         when used in classic classes
    @return {PropertyDecorator} property decorator instance
  */
  _exports.default = _default;
  var BINDINGS_MAP = new WeakMap();
  function hasProto(obj) {
    return obj != null && obj.constructor !== undefined && typeof obj.constructor.proto === 'function';
  }
  function setupAction(target, key, actionFn) {
    if (hasProto(target)) {
      target.constructor.proto();
    }
    if (!Object.prototype.hasOwnProperty.call(target, 'actions')) {
      var parentActions = target.actions;
      // we need to assign because of the way mixins copy actions down when inheriting
      target.actions = parentActions ? Object.assign({}, parentActions) : {};
    }
    (true && !(target.actions != null) && (0, _debug.assert)("[BUG] Somehow the target doesn't have actions!", target.actions != null));
    target.actions[key] = actionFn;
    return {
      get() {
        var bindings = BINDINGS_MAP.get(this);
        if (bindings === undefined) {
          bindings = new Map();
          BINDINGS_MAP.set(this, bindings);
        }
        var fn = bindings.get(actionFn);
        if (fn === undefined) {
          fn = actionFn.bind(this);
          bindings.set(actionFn, fn);
        }
        return fn;
      }
    };
  }
  function action() {
    var actionFn;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    if (!(0, _metal.isElementDescriptor)(args)) {
      actionFn = args[0];
      var decorator = function (target, key, _desc, _meta, isClassicDecorator) {
        (true && !(isClassicDecorator) && (0, _debug.assert)('The @action decorator may only be passed a method when used in classic classes. You should decorate methods directly in native classes', isClassicDecorator));
        (true && !(typeof actionFn === 'function') && (0, _debug.assert)('The action() decorator must be passed a method when used in classic classes', typeof actionFn === 'function'));
        return setupAction(target, key, actionFn);
      };
      (0, _metal.setClassicDecorator)(decorator);
      return decorator;
    }
    var [target, key, desc] = args;
    actionFn = desc === null || desc === void 0 ? void 0 : desc.value;
    (true && !(typeof actionFn === 'function') && (0, _debug.assert)('The @action decorator must be applied to methods when used in native classes', typeof actionFn === 'function')); // SAFETY: TS types are weird with decorators. This should work.
    return setupAction(target, key, actionFn);
  }
  // SAFETY: TS types are weird with decorators. This should work.
  (0, _metal.setClassicDecorator)(action);
  /**
    Specify a method that observes property changes.
  
    ```javascript
    import EmberObject from '@ember/object';
    import { observer } from '@ember/object';
  
    export default EmberObject.extend({
      valueObserver: observer('value', function() {
        // Executes whenever the "value" property changes
      })
    });
    ```
  
    Also available as `Function.prototype.observes` if prototype extensions are
    enabled.
  
    @method observer
    @for @ember/object
    @param {String} propertyNames*
    @param {Function} func
    @return func
    @public
    @static
  */
  function observer() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    var funcOrDef = args.pop();
    (true && !(typeof funcOrDef === 'function' || typeof funcOrDef === 'object' && funcOrDef !== null) && (0, _debug.assert)('observer must be provided a function or an observer definition', typeof funcOrDef === 'function' || typeof funcOrDef === 'object' && funcOrDef !== null));
    var func;
    var dependentKeys;
    var sync;
    if (typeof funcOrDef === 'function') {
      func = funcOrDef;
      dependentKeys = args;
      sync = !_environment.ENV._DEFAULT_ASYNC_OBSERVERS;
    } else {
      func = funcOrDef.fn;
      dependentKeys = funcOrDef.dependentKeys;
      sync = funcOrDef.sync;
    }
    (true && !(typeof func === 'function') && (0, _debug.assert)('observer called without a function', typeof func === 'function'));
    (true && !(Array.isArray(dependentKeys) && dependentKeys.length > 0 && dependentKeys.every(p => typeof p === 'string' && Boolean(p.length))) && (0, _debug.assert)('observer called without valid path', Array.isArray(dependentKeys) && dependentKeys.length > 0 && dependentKeys.every(p => typeof p === 'string' && Boolean(p.length))));
    (true && !(typeof sync === 'boolean') && (0, _debug.assert)('observer called without sync', typeof sync === 'boolean'));
    var paths = [];
    for (var dependentKey of dependentKeys) {
      (0, _metal.expandProperties)(dependentKey, path => paths.push(path));
    }
    (0, _utils.setObservers)(func, {
      paths,
      sync
    });
    return func;
  }
});
define("@ember/object/internals", ["exports", "@ember/object/-internals"], function (_exports, _internals) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "cacheFor", {
    enumerable: true,
    get: function () {
      return _internals.cacheFor;
    }
  });
  Object.defineProperty(_exports, "guidFor", {
    enumerable: true,
    get: function () {
      return _internals.guidFor;
    }
  });
});
define("@ember/object/lib/computed/computed_macros", ["exports", "@ember/-internals/metal", "@ember/object", "@ember/debug", "@ember/utils"], function (_exports, _metal, _object, _debug, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.and = void 0;
  _exports.bool = bool;
  _exports.deprecatingAlias = deprecatingAlias;
  _exports.empty = empty;
  _exports.equal = equal;
  _exports.gt = gt;
  _exports.gte = gte;
  _exports.lt = lt;
  _exports.lte = lte;
  _exports.match = match;
  _exports.none = none;
  _exports.not = not;
  _exports.notEmpty = notEmpty;
  _exports.oneWay = oneWay;
  _exports.or = void 0;
  _exports.readOnly = readOnly;
  /**
  @module @ember/object
  */
  function expandPropertiesToArray(predicateName, properties) {
    var expandedProperties = [];
    function extractProperty(entry) {
      expandedProperties.push(entry);
    }
    for (var property of properties) {
      (true && !(property.indexOf(' ') < 0) && (0, _debug.assert)(`Dependent keys passed to \`${predicateName}\` computed macro can't have spaces.`, property.indexOf(' ') < 0));
      (0, _metal.expandProperties)(property, extractProperty);
    }
    return expandedProperties;
  }
  function generateComputedWithPredicate(name, predicate) {
    return function (dependentKey) {
      for (var _len = arguments.length, additionalDependentKeys = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        additionalDependentKeys[_key - 1] = arguments[_key];
      }
      var properties = [dependentKey, ...additionalDependentKeys];
      (true && !(!(0, _metal.isElementDescriptor)(properties)) && (0, _debug.assert)(`You attempted to use @${name} as a decorator directly, but it requires at least one dependent key parameter`, !(0, _metal.isElementDescriptor)(properties)));
      var dependentKeys = expandPropertiesToArray(name, properties);
      var computedFunc = (0, _metal.computed)(...dependentKeys, function () {
        var lastIdx = dependentKeys.length - 1;
        for (var i = 0; i < lastIdx; i++) {
          // SAFETY: `i` is derived from the length of `dependentKeys`
          var value = (0, _object.get)(this, dependentKeys[i]);
          if (!predicate(value)) {
            return value;
          }
        }
        // SAFETY: `lastIdx` is derived from the length of `dependentKeys`
        return (0, _object.get)(this, dependentKeys[lastIdx]);
      });
      return computedFunc;
    };
  }
  /**
    A computed property macro that returns true if the value of the dependent
    property is null, an empty string, empty array, or empty function.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { empty } from '@ember/object/computed';
  
    class ToDoList {
      constructor(todos) {
        set(this, 'todos', todos);
      }
  
      @empty('todos') isDone;
    }
  
    let todoList = new ToDoList(
      ['Unit Test', 'Documentation', 'Release']
    );
  
    todoList.isDone; // false
    set(todoList, 'todos', []);
    todoList.isDone; // true
    ```
  
    @since 1.6.0
    @method empty
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which returns true if the value
    of the dependent property is null, an empty string, empty array, or empty
    function and false if the underlying value is not empty.
  
    @public
  */
  function empty(dependentKey) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @empty as a decorator directly, but it requires a `dependentKey` parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return (0, _metal.computed)(`${dependentKey}.length`, function () {
      return (0, _utils.isEmpty)((0, _object.get)(this, dependentKey));
    });
  }
  /**
    A computed property that returns true if the value of the dependent property
    is NOT null, an empty string, empty array, or empty function.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { notEmpty } from '@ember/object/computed';
  
    class Hamster {
      constructor(backpack) {
        set(this, 'backpack', backpack);
      }
  
      @notEmpty('backpack') hasStuff
    }
  
    let hamster = new Hamster(
      ['Food', 'Sleeping Bag', 'Tent']
    );
  
    hamster.hasStuff; // true
    set(hamster, 'backpack', []);
    hamster.hasStuff; // false
    ```
  
    @method notEmpty
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which returns true if original
    value for property is not empty.
    @public
  */
  function notEmpty(dependentKey) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @notEmpty as a decorator directly, but it requires a `dependentKey` parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return (0, _metal.computed)(`${dependentKey}.length`, function () {
      return !(0, _utils.isEmpty)((0, _object.get)(this, dependentKey));
    });
  }
  /**
    A computed property that returns true if the value of the dependent property
    is null or undefined. This avoids errors from JSLint complaining about use of
    ==, which can be technically confusing.
  
    ```javascript
    import { set } from '@ember/object';
    import { none } from '@ember/object/computed';
  
    class Hamster {
      @none('food') isHungry;
    }
  
    let hamster = new Hamster();
  
    hamster.isHungry; // true
  
    set(hamster, 'food', 'Banana');
    hamster.isHungry; // false
  
    set(hamster, 'food', null);
    hamster.isHungry; // true
    ```
  
    @method none
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which returns true if original
    value for property is null or undefined.
    @public
  */
  function none(dependentKey) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @none as a decorator directly, but it requires a `dependentKey` parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return (0, _metal.computed)(dependentKey, function () {
      return (0, _utils.isNone)((0, _object.get)(this, dependentKey));
    });
  }
  /**
    A computed property that returns the inverse boolean value of the original
    value for the dependent property.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { not } from '@ember/object/computed';
  
    class User {
      loggedIn = false;
  
      @not('loggedIn') isAnonymous;
    }
  
    let user = new User();
  
    user.isAnonymous; // true
    set(user, 'loggedIn', true);
    user.isAnonymous; // false
    ```
  
    @method not
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which returns inverse of the
    original value for property
    @public
  */
  function not(dependentKey) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @not as a decorator directly, but it requires a `dependentKey` parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return (0, _metal.computed)(dependentKey, function () {
      return !(0, _object.get)(this, dependentKey);
    });
  }
  /**
    A computed property that converts the provided dependent property into a
    boolean value.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { bool } from '@ember/object/computed';
  
  
    class Hamster {
      @bool('numBananas') hasBananas
    }
  
    let hamster = new Hamster();
  
    hamster.hasBananas; // false
  
    set(hamster, 'numBananas', 0);
    hamster.hasBananas; // false
  
    set(hamster, 'numBananas', 1);
    hamster.hasBananas; // true
  
    set(hamster, 'numBananas', null);
    hamster.hasBananas; // false
    ```
  
    @method bool
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which converts to boolean the
    original value for property
    @public
  */
  function bool(dependentKey) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @bool as a decorator directly, but it requires a `dependentKey` parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return (0, _metal.computed)(dependentKey, function () {
      return Boolean((0, _object.get)(this, dependentKey));
    });
  }
  /**
    A computed property which matches the original value for the dependent
    property against a given RegExp, returning `true` if the value matches the
    RegExp and `false` if it does not.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { match } from '@ember/object/computed';
  
    class User {
      @match('email', /^.+@.+\..+$/) hasValidEmail;
    }
  
    let user = new User();
  
    user.hasValidEmail; // false
  
    set(user, 'email', '');
    user.hasValidEmail; // false
  
    set(user, 'email', 'ember_hamster@example.com');
    user.hasValidEmail; // true
    ```
  
    @method match
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @param {RegExp} regexp
    @return {ComputedProperty} computed property which match the original value
    for property against a given RegExp
    @public
  */
  function match(dependentKey, regexp) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @match as a decorator directly, but it requires `dependentKey` and `regexp` parameters', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return (0, _metal.computed)(dependentKey, function () {
      var value = (0, _object.get)(this, dependentKey);
      return regexp.test(value);
    });
  }
  /**
    A computed property that returns true if the provided dependent property is
    equal to the given value.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { equal } from '@ember/object/computed';
  
    class Hamster {
      @equal('percentCarrotsEaten', 100) satisfied;
    }
  
    let hamster = new Hamster();
  
    hamster.satisfied; // false
  
    set(hamster, 'percentCarrotsEaten', 100);
    hamster.satisfied; // true
  
    set(hamster, 'percentCarrotsEaten', 50);
    hamster.satisfied; // false
    ```
  
    @method equal
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @param {String|Number|Object} value
    @return {ComputedProperty} computed property which returns true if the
    original value for property is equal to the given value.
    @public
  */
  function equal(dependentKey, value) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @equal as a decorator directly, but it requires `dependentKey` and `value` parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return (0, _metal.computed)(dependentKey, function () {
      return (0, _object.get)(this, dependentKey) === value;
    });
  }
  /**
    A computed property that returns true if the provided dependent property is
    greater than the provided value.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { gt } from '@ember/object/computed';
  
    class Hamster {
      @gt('numBananas', 10) hasTooManyBananas;
    }
  
    let hamster = new Hamster();
  
    hamster.hasTooManyBananas; // false
  
    set(hamster, 'numBananas', 3);
    hamster.hasTooManyBananas; // false
  
    set(hamster, 'numBananas', 11);
    hamster.hasTooManyBananas; // true
    ```
  
    @method gt
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @param {Number} value
    @return {ComputedProperty} computed property which returns true if the
    original value for property is greater than given value.
    @public
  */
  function gt(dependentKey, value) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @gt as a decorator directly, but it requires `dependentKey` and `value` parameters', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return (0, _metal.computed)(dependentKey, function () {
      return (0, _object.get)(this, dependentKey) > value;
    });
  }
  /**
    A computed property that returns true if the provided dependent property is
    greater than or equal to the provided value.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { gte } from '@ember/object/computed';
  
    class Hamster {
      @gte('numBananas', 10) hasTooManyBananas;
    }
  
    let hamster = new Hamster();
  
    hamster.hasTooManyBananas; // false
  
    set(hamster, 'numBananas', 3);
    hamster.hasTooManyBananas; // false
  
    set(hamster, 'numBananas', 10);
    hamster.hasTooManyBananas; // true
    ```
  
    @method gte
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @param {Number} value
    @return {ComputedProperty} computed property which returns true if the
    original value for property is greater or equal then given value.
    @public
  */
  function gte(dependentKey, value) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @gte as a decorator directly, but it requires `dependentKey` and `value` parameters', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return (0, _metal.computed)(dependentKey, function () {
      return (0, _object.get)(this, dependentKey) >= value;
    });
  }
  /**
    A computed property that returns true if the provided dependent property is
    less than the provided value.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { lt } from '@ember/object/computed';
  
    class Hamster {
      @lt('numBananas', 3) needsMoreBananas;
    }
  
    let hamster = new Hamster();
  
    hamster.needsMoreBananas; // true
  
    set(hamster, 'numBananas', 3);
    hamster.needsMoreBananas; // false
  
    set(hamster, 'numBananas', 2);
    hamster.needsMoreBananas; // true
    ```
  
    @method lt
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @param {Number} value
    @return {ComputedProperty} computed property which returns true if the
    original value for property is less then given value.
    @public
  */
  function lt(dependentKey, value) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @lt as a decorator directly, but it requires `dependentKey` and `value` parameters', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return (0, _metal.computed)(dependentKey, function () {
      return (0, _object.get)(this, dependentKey) < value;
    });
  }
  /**
    A computed property that returns true if the provided dependent property is
    less than or equal to the provided value.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { lte } from '@ember/object/computed';
  
    class Hamster {
      @lte('numBananas', 3) needsMoreBananas;
    }
  
    let hamster = new Hamster();
  
    hamster.needsMoreBananas; // true
  
    set(hamster, 'numBananas', 5);
    hamster.needsMoreBananas; // false
  
    set(hamster, 'numBananas', 3);
    hamster.needsMoreBananas; // true
    ```
  
    @method lte
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @param {Number} value
    @return {ComputedProperty} computed property which returns true if the
    original value for property is less or equal than given value.
    @public
  */
  function lte(dependentKey, value) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @lte as a decorator directly, but it requires `dependentKey` and `value` parameters', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return (0, _metal.computed)(dependentKey, function () {
      return (0, _object.get)(this, dependentKey) <= value;
    });
  }
  /**
    A computed property that performs a logical `and` on the original values for
    the provided dependent properties.
  
    You may pass in more than two properties and even use property brace
    expansion.  The computed property will return the first falsy value or last
    truthy value just like JavaScript's `&&` operator.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { and } from '@ember/object/computed';
  
    class Hamster {
      @and('hasTent', 'hasBackpack') readyForCamp;
      @and('hasWalkingStick', 'hasBackpack') readyForHike;
    }
  
    let tomster = new Hamster();
  
    tomster.readyForCamp; // false
  
    set(tomster, 'hasTent', true);
    tomster.readyForCamp; // false
  
    set(tomster, 'hasBackpack', true);
    tomster.readyForCamp; // true
  
    set(tomster, 'hasBackpack', 'Yes');
    tomster.readyForCamp; // 'Yes'
  
    set(tomster, 'hasWalkingStick', null);
    tomster.readyForHike; // null
    ```
  
    @method and
    @static
    @for @ember/object/computed
    @param {String} dependentKey*
    @return {ComputedProperty} computed property which performs a logical `and` on
    the values of all the original values for properties.
    @public
  */
  var and = generateComputedWithPredicate('and', value => value);
  /**
    A computed property which performs a logical `or` on the original values for
    the provided dependent properties.
  
    You may pass in more than two properties and even use property brace
    expansion.  The computed property will return the first truthy value or last
    falsy value just like JavaScript's `||` operator.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { or } from '@ember/object/computed';
  
    class Hamster {
      @or('hasJacket', 'hasUmbrella') readyForRain;
      @or('hasSunscreen', 'hasUmbrella') readyForBeach;
    }
  
    let tomster = new Hamster();
  
    tomster.readyForRain; // undefined
  
    set(tomster, 'hasUmbrella', true);
    tomster.readyForRain; // true
  
    set(tomster, 'hasJacket', 'Yes');
    tomster.readyForRain; // 'Yes'
  
    set(tomster, 'hasSunscreen', 'Check');
    tomster.readyForBeach; // 'Check'
    ```
  
    @method or
    @static
    @for @ember/object/computed
    @param {String} dependentKey*
    @return {ComputedProperty} computed property which performs a logical `or` on
    the values of all the original values for properties.
    @public
  */
  _exports.and = and;
  var or = generateComputedWithPredicate('or', value => !value);
  /**
    Creates a new property that is an alias for another property on an object.
    Calls to `get` or `set` this property behave as though they were called on the
    original property.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { alias } from '@ember/object/computed';
  
    class Person {
      name = 'Alex Matchneer';
  
      @alias('name') nomen;
    }
  
    let alex = new Person();
  
    alex.nomen; // 'Alex Matchneer'
    alex.name;  // 'Alex Matchneer'
  
    set(alex, 'nomen', '@machty');
    alex.name;  // '@machty'
    ```
  
    @method alias
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which creates an alias to the
    original value for property.
    @public
  */
  /**
    Where the `alias` computed macro aliases `get` and `set`, and allows for
    bidirectional data flow, the `oneWay` computed macro only provides an aliased
    `get`. The `set` will not mutate the upstream property, rather causes the
    current property to become the value set. This causes the downstream property
    to permanently diverge from the upstream property.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { oneWay }from '@ember/object/computed';
  
    class User {
      constructor(firstName, lastName) {
        set(this, 'firstName', firstName);
        set(this, 'lastName', lastName);
      }
  
      @oneWay('firstName') nickName;
    }
  
    let teddy = new User('Teddy', 'Zeenny');
  
    teddy.nickName; // 'Teddy'
  
    set(teddy, 'nickName', 'TeddyBear');
    teddy.firstName; // 'Teddy'
    teddy.nickName; // 'TeddyBear'
    ```
  
    @method oneWay
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which creates a one way computed
    property to the original value for property.
    @public
  */
  _exports.or = or;
  function oneWay(dependentKey) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @oneWay as a decorator directly, but it requires a `dependentKey` parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return (0, _metal.alias)(dependentKey).oneWay();
  }
  /**
    This is a more semantically meaningful alias of the `oneWay` computed macro,
    whose name is somewhat ambiguous as to which direction the data flows.
  
    @method reads
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which creates a one way computed
      property to the original value for property.
    @public
   */
  /**
    Where `oneWay` computed macro provides oneWay bindings, the `readOnly`
    computed macro provides a readOnly one way binding. Very often when using
    the `oneWay` macro one does not also want changes to propagate back up, as
    they will replace the value.
  
    This prevents the reverse flow, and also throws an exception when it occurs.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { readOnly } from '@ember/object/computed';
  
    class User {
      constructor(firstName, lastName) {
        set(this, 'firstName', firstName);
        set(this, 'lastName', lastName);
      }
  
      @readOnly('firstName') nickName;
    });
  
    let teddy = new User('Teddy', 'Zeenny');
  
    teddy.nickName; // 'Teddy'
  
    set(teddy, 'nickName', 'TeddyBear'); // throws Exception
    // throw new EmberError('Cannot Set: nickName on: <User:ember27288>' );`
  
    teddy.firstName; // 'Teddy'
    ```
  
    @method readOnly
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which creates a one way computed
    property to the original value for property.
    @since 1.5.0
    @public
  */
  function readOnly(dependentKey) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @readOnly as a decorator directly, but it requires a `dependentKey` parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return (0, _metal.alias)(dependentKey).readOnly();
  }
  /**
    Creates a new property that is an alias for another property on an object.
    Calls to `get` or `set` this property behave as though they were called on the
    original property, but also print a deprecation warning.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { deprecatingAlias } from '@ember/object/computed';
  
    class Hamster {
      @deprecatingAlias('cavendishCount', {
        id: 'hamster.deprecate-banana',
        until: '3.0.0'
      })
      bananaCount;
    }
  
    let hamster = new Hamster();
  
    set(hamster, 'bananaCount', 5); // Prints a deprecation warning.
    hamster.cavendishCount; // 5
    ```
  
    @method deprecatingAlias
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @param {Object} options Options for `deprecate`.
    @return {ComputedProperty} computed property which creates an alias with a
    deprecation to the original value for property.
    @since 1.7.0
    @public
  */
  function deprecatingAlias(dependentKey, options) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @deprecatingAlias as a decorator directly, but it requires `dependentKey` and `options` parameters', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return (0, _metal.computed)(dependentKey, {
      get(key) {
        (true && !(false) && (0, _debug.deprecate)(`Usage of \`${key}\` is deprecated, use \`${dependentKey}\` instead.`, false, options));
        return (0, _object.get)(this, dependentKey);
      },
      set(key, value) {
        (true && !(false) && (0, _debug.deprecate)(`Usage of \`${key}\` is deprecated, use \`${dependentKey}\` instead.`, false, options));
        (0, _object.set)(this, dependentKey, value);
        return value;
      }
    });
  }
});
define("@ember/object/lib/computed/reduce_computed_macros", ["exports", "@ember/debug", "@ember/-internals/metal", "@ember/object", "@ember/utils", "@ember/array"], function (_exports, _debug, _metal, _object, _utils, _array) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.collect = collect;
  _exports.filter = filter;
  _exports.filterBy = filterBy;
  _exports.intersect = intersect;
  _exports.map = map;
  _exports.mapBy = mapBy;
  _exports.max = max;
  _exports.min = min;
  _exports.setDiff = setDiff;
  _exports.sort = sort;
  _exports.sum = sum;
  _exports.union = void 0;
  _exports.uniq = uniq;
  _exports.uniqBy = uniqBy;
  /**
  @module @ember/object
  */

  function isNativeOrEmberArray(obj) {
    return Array.isArray(obj) || _array.default.detect(obj);
  }
  function reduceMacro(dependentKey, callback, initialValue, name) {
    (true && !(!/[[\]{}]/g.test(dependentKey)) && (0, _debug.assert)(`Dependent key passed to \`${name}\` computed macro shouldn't contain brace expanding pattern.`, !/[[\]{}]/g.test(dependentKey)));
    return (0, _object.computed)(`${dependentKey}.[]`, function () {
      var arr = (0, _object.get)(this, dependentKey);
      if (arr === null || typeof arr !== 'object') {
        return initialValue;
      }
      return arr.reduce(callback, initialValue, this);
    }).readOnly();
  }
  function arrayMacro(dependentKey, additionalDependentKeys, callback) {
    // This is a bit ugly
    var propertyName;
    if (/@each/.test(dependentKey)) {
      propertyName = dependentKey.replace(/\.@each.*$/, '');
    } else {
      propertyName = dependentKey;
      dependentKey += '.[]';
    }
    return (0, _object.computed)(dependentKey, ...additionalDependentKeys, function () {
      var value = (0, _object.get)(this, propertyName);
      if (isNativeOrEmberArray(value)) {
        return (0, _array.A)(callback.call(this, value));
      } else {
        return (0, _array.A)();
      }
    }).readOnly();
  }
  function multiArrayMacro(_dependentKeys, callback, name) {
    (true && !(_dependentKeys.every(dependentKey => !/[[\]{}]/g.test(dependentKey))) && (0, _debug.assert)(`Dependent keys passed to \`${name}\` computed macro shouldn't contain brace expanding pattern.`, _dependentKeys.every(dependentKey => !/[[\]{}]/g.test(dependentKey))));
    var dependentKeys = _dependentKeys.map(key => `${key}.[]`);
    return (0, _object.computed)(...dependentKeys, function () {
      return (0, _array.A)(callback.call(this, _dependentKeys));
    }).readOnly();
  }
  /**
    A computed property that returns the sum of the values in the dependent array.
  
    Example:
  
    ```javascript
    import { sum } from '@ember/object/computed';
  
    class Invoice {
      lineItems = [1.00, 2.50, 9.99];
  
      @sum('lineItems') total;
    }
  
    let invoice = new Invoice();
  
    invoice.total; // 13.49
    ```
  
    @method sum
    @for @ember/object/computed
    @static
    @param {String} dependentKey
    @return {ComputedProperty} computes the sum of all values in the
    dependentKey's array
    @since 1.4.0
    @public
  */
  function sum(dependentKey) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @sum as a decorator directly, but it requires a `dependentKey` parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return reduceMacro(dependentKey, (sum, item) => sum + item, 0, 'sum');
  }
  /**
    A computed property that calculates the maximum value in the dependent array.
    This will return `-Infinity` when the dependent array is empty.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { mapBy, max } from '@ember/object/computed';
  
    class Person {
      children = [];
  
      @mapBy('children', 'age') childAges;
      @max('childAges') maxChildAge;
    }
  
    let lordByron = new Person();
  
    lordByron.maxChildAge; // -Infinity
  
    set(lordByron, 'children', [
      {
        name: 'Augusta Ada Byron',
        age: 7
      }
    ]);
    lordByron.maxChildAge; // 7
  
    set(lordByron, 'children', [
      ...lordByron.children,
      {
        name: 'Allegra Byron',
        age: 5
      }, {
        name: 'Elizabeth Medora Leigh',
        age: 8
      }
    ]);
    lordByron.maxChildAge; // 8
    ```
  
    If the types of the arguments are not numbers, they will be converted to
    numbers and the type of the return value will always be `Number`. For example,
    the max of a list of Date objects will be the highest timestamp as a `Number`.
    This behavior is consistent with `Math.max`.
  
    @method max
    @for @ember/object/computed
    @static
    @param {String} dependentKey
    @return {ComputedProperty} computes the largest value in the dependentKey's
    array
    @public
  */
  function max(dependentKey) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @max as a decorator directly, but it requires a `dependentKey` parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return reduceMacro(dependentKey, (max, item) => Math.max(max, item), -Infinity, 'max');
  }
  /**
    A computed property that calculates the minimum value in the dependent array.
    This will return `Infinity` when the dependent array is empty.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { mapBy, min } from '@ember/object/computed';
  
    class Person {
      children = [];
  
      @mapBy('children', 'age') childAges;
      @min('childAges') minChildAge;
    }
  
    let lordByron = Person.create({ children: [] });
  
    lordByron.minChildAge; // Infinity
  
    set(lordByron, 'children', [
      {
        name: 'Augusta Ada Byron',
        age: 7
      }
    ]);
    lordByron.minChildAge; // 7
  
    set(lordByron, 'children', [
      ...lordByron.children,
      {
        name: 'Allegra Byron',
        age: 5
      }, {
        name: 'Elizabeth Medora Leigh',
        age: 8
      }
    ]);
    lordByron.minChildAge; // 5
    ```
  
    If the types of the arguments are not numbers, they will be converted to
    numbers and the type of the return value will always be `Number`. For example,
    the min of a list of Date objects will be the lowest timestamp as a `Number`.
    This behavior is consistent with `Math.min`.
  
    @method min
    @for @ember/object/computed
    @static
    @param {String} dependentKey
    @return {ComputedProperty} computes the smallest value in the dependentKey's array
    @public
  */
  function min(dependentKey) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @min as a decorator directly, but it requires a `dependentKey` parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return reduceMacro(dependentKey, (min, item) => Math.min(min, item), Infinity, 'min');
  }
  function map(dependentKey, additionalDependentKeysOrCallback, callback) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @map as a decorator directly, but it requires atleast `dependentKey` and `callback` parameters', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    (true && !(typeof callback === 'function' || callback === undefined && typeof additionalDependentKeysOrCallback === 'function') && (0, _debug.assert)('The final parameter provided to map must be a callback function', typeof callback === 'function' || callback === undefined && typeof additionalDependentKeysOrCallback === 'function'));
    (true && !(Array.isArray(additionalDependentKeysOrCallback) || typeof additionalDependentKeysOrCallback === 'function') && (0, _debug.assert)('The second parameter provided to map must either be the callback or an array of additional dependent keys', Array.isArray(additionalDependentKeysOrCallback) || typeof additionalDependentKeysOrCallback === 'function'));
    var additionalDependentKeys;
    if (typeof additionalDependentKeysOrCallback === 'function') {
      callback = additionalDependentKeysOrCallback;
      additionalDependentKeys = [];
    } else {
      additionalDependentKeys = additionalDependentKeysOrCallback;
    }
    var cCallback = callback;
    (true && !(cCallback) && (0, _debug.assert)('[BUG] Missing callback', cCallback));
    return arrayMacro(dependentKey, additionalDependentKeys, function (value) {
      // This is so dumb...
      return Array.isArray(value) ? value.map(cCallback, this) : value.map(cCallback, this);
    });
  }
  /**
    Returns an array mapped to the specified key.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { mapBy } from '@ember/object/computed';
  
    class Person {
      children = [];
  
      @mapBy('children', 'age') childAges;
    }
  
    let lordByron = new Person();
  
    lordByron.childAges; // []
  
    set(lordByron, 'children', [
      {
        name: 'Augusta Ada Byron',
        age: 7
      }
    ]);
    lordByron.childAges; // [7]
  
    set(lordByron, 'children', [
      ...lordByron.children,
      {
        name: 'Allegra Byron',
        age: 5
      }, {
        name: 'Elizabeth Medora Leigh',
        age: 8
      }
    ]);
    lordByron.childAges; // [7, 5, 8]
    ```
  
    @method mapBy
    @for @ember/object/computed
    @static
    @param {String} dependentKey
    @param {String} propertyKey
    @return {ComputedProperty} an array mapped to the specified key
    @public
  */
  function mapBy(dependentKey, propertyKey) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @mapBy as a decorator directly, but it requires `dependentKey` and `propertyKey` parameters', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    (true && !(typeof propertyKey === 'string') && (0, _debug.assert)('`mapBy` computed macro expects a property string for its second argument, ' + 'perhaps you meant to use "map"', typeof propertyKey === 'string'));
    (true && !(!/[[\]{}]/g.test(dependentKey)) && (0, _debug.assert)(`Dependent key passed to \`mapBy\` computed macro shouldn't contain brace expanding pattern.`, !/[[\]{}]/g.test(dependentKey)));
    return map(`${dependentKey}.@each.${propertyKey}`, item => (0, _object.get)(item, propertyKey));
  }
  function filter(dependentKey, additionalDependentKeysOrCallback, callback) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @filter as a decorator directly, but it requires atleast `dependentKey` and `callback` parameters', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    (true && !(typeof callback === 'function' || callback === undefined && typeof additionalDependentKeysOrCallback === 'function') && (0, _debug.assert)('The final parameter provided to filter must be a callback function', typeof callback === 'function' || callback === undefined && typeof additionalDependentKeysOrCallback === 'function'));
    (true && !(Array.isArray(additionalDependentKeysOrCallback) || typeof additionalDependentKeysOrCallback === 'function') && (0, _debug.assert)('The second parameter provided to filter must either be the callback or an array of additional dependent keys', Array.isArray(additionalDependentKeysOrCallback) || typeof additionalDependentKeysOrCallback === 'function'));
    var additionalDependentKeys;
    if (typeof additionalDependentKeysOrCallback === 'function') {
      callback = additionalDependentKeysOrCallback;
      additionalDependentKeys = [];
    } else {
      additionalDependentKeys = additionalDependentKeysOrCallback;
    }
    var cCallback = callback;
    return arrayMacro(dependentKey, additionalDependentKeys, function (value) {
      // This is a really silly way to keep TS happy
      return Array.isArray(value) ? value.filter(cCallback, this) : value.filter(cCallback, this);
    });
  }
  /**
    Filters the array by the property and value.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { filterBy } from '@ember/object/computed';
  
    class Hamster {
      constructor(chores) {
        set(this, 'chores', chores);
      }
  
      @filterBy('chores', 'done', false) remainingChores;
    }
  
    let hamster = new Hamster([
      { name: 'cook', done: true },
      { name: 'clean', done: true },
      { name: 'write more unit tests', done: false }
    ]);
  
    hamster.remainingChores; // [{ name: 'write more unit tests', done: false }]
    ```
  
    @method filterBy
    @for @ember/object/computed
    @static
    @param {String} dependentKey
    @param {String} propertyKey
    @param {*} value
    @return {ComputedProperty} the filtered array
    @public
  */
  function filterBy(dependentKey, propertyKey, value) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @filterBy as a decorator directly, but it requires atleast `dependentKey` and `propertyKey` parameters', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    (true && !(!/[[\]{}]/g.test(dependentKey)) && (0, _debug.assert)(`Dependent key passed to \`filterBy\` computed macro shouldn't contain brace expanding pattern.`, !/[[\]{}]/g.test(dependentKey)));
    var callback;
    if (arguments.length === 2) {
      callback = item => (0, _object.get)(item, propertyKey);
    } else {
      callback = item => (0, _object.get)(item, propertyKey) === value;
    }
    return filter(`${dependentKey}.@each.${propertyKey}`, callback);
  }
  /**
    A computed property which returns a new array with all the unique elements
    from one or more dependent arrays.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { uniq } from '@ember/object/computed';
  
    class Hamster {
      constructor(fruits) {
        set(this, 'fruits', fruits);
      }
  
      @uniq('fruits') uniqueFruits;
    }
  
    let hamster = new Hamster([
      'banana',
      'grape',
      'kale',
      'banana'
    ]);
  
    hamster.uniqueFruits; // ['banana', 'grape', 'kale']
    ```
  
    @method uniq
    @for @ember/object/computed
    @static
    @param {String} propertyKey*
    @return {ComputedProperty} computes a new array with all the
    unique elements from the dependent array
    @public
  */
  function uniq(dependentKey) {
    for (var _len = arguments.length, additionalDependentKeys = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      additionalDependentKeys[_key - 1] = arguments[_key];
    }
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @uniq/@union as a decorator directly, but it requires atleast one dependent key parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    var args = [dependentKey, ...additionalDependentKeys];
    return multiArrayMacro(args, function (dependentKeys) {
      var uniq = (0, _array.A)();
      var seen = new Set();
      dependentKeys.forEach(dependentKey => {
        var value = (0, _object.get)(this, dependentKey);
        if (isNativeOrEmberArray(value)) {
          value.forEach(item => {
            if (!seen.has(item)) {
              seen.add(item);
              uniq.push(item);
            }
          });
        }
      });
      return uniq;
    }, 'uniq');
  }
  /**
    A computed property which returns a new array with all the unique elements
    from an array, with uniqueness determined by specific key.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { uniqBy } from '@ember/object/computed';
  
    class Hamster {
      constructor(fruits) {
        set(this, 'fruits', fruits);
      }
  
      @uniqBy('fruits', 'id') uniqueFruits;
    }
  
    let hamster = new Hamster([
      { id: 1, 'banana' },
      { id: 2, 'grape' },
      { id: 3, 'peach' },
      { id: 1, 'banana' }
    ]);
  
    hamster.uniqueFruits; // [ { id: 1, 'banana' }, { id: 2, 'grape' }, { id: 3, 'peach' }]
    ```
  
    @method uniqBy
    @for @ember/object/computed
    @static
    @param {String} dependentKey
    @param {String} propertyKey
    @return {ComputedProperty} computes a new array with all the
    unique elements from the dependent array
    @public
  */
  function uniqBy(dependentKey, propertyKey) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @uniqBy as a decorator directly, but it requires `dependentKey` and `propertyKey` parameters', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    (true && !(!/[[\]{}]/g.test(dependentKey)) && (0, _debug.assert)(`Dependent key passed to \`uniqBy\` computed macro shouldn't contain brace expanding pattern.`, !/[[\]{}]/g.test(dependentKey)));
    return (0, _object.computed)(`${dependentKey}.[]`, function () {
      var list = (0, _object.get)(this, dependentKey);
      return isNativeOrEmberArray(list) ? (0, _array.uniqBy)(list, propertyKey) : (0, _array.A)();
    }).readOnly();
  }
  /**
    A computed property which returns a new array with all the unique elements
    from one or more dependent arrays.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { union } from '@ember/object/computed';
  
    class Hamster {
      constructor(fruits, vegetables) {
        set(this, 'fruits', fruits);
        set(this, 'vegetables', vegetables);
      }
  
      @union('fruits', 'vegetables') uniqueFruits;
    });
  
    let hamster = new, Hamster(
      [
        'banana',
        'grape',
        'kale',
        'banana',
        'tomato'
      ],
      [
        'tomato',
        'carrot',
        'lettuce'
      ]
    );
  
    hamster.uniqueFruits; // ['banana', 'grape', 'kale', 'tomato', 'carrot', 'lettuce']
    ```
  
    @method union
    @for @ember/object/computed
    @static
    @param {String} propertyKey*
    @return {ComputedProperty} computes a new array with all the unique elements
    from one or more dependent arrays.
    @public
  */
  var union = uniq;
  /**
    A computed property which returns a new array with all the elements
    two or more dependent arrays have in common.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { intersect } from '@ember/object/computed';
  
    class FriendGroups {
      constructor(adaFriends, charlesFriends) {
        set(this, 'adaFriends', adaFriends);
        set(this, 'charlesFriends', charlesFriends);
      }
  
      @intersect('adaFriends', 'charlesFriends') friendsInCommon;
    }
  
    let groups = new FriendGroups(
      ['Charles Babbage', 'John Hobhouse', 'William King', 'Mary Somerville'],
      ['William King', 'Mary Somerville', 'Ada Lovelace', 'George Peacock']
    );
  
    groups.friendsInCommon; // ['William King', 'Mary Somerville']
    ```
  
    @method intersect
    @for @ember/object/computed
    @static
    @param {String} propertyKey*
    @return {ComputedProperty} computes a new array with all the duplicated
    elements from the dependent arrays
    @public
  */
  _exports.union = union;
  function intersect(dependentKey) {
    for (var _len2 = arguments.length, additionalDependentKeys = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      additionalDependentKeys[_key2 - 1] = arguments[_key2];
    }
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @intersect as a decorator directly, but it requires atleast one dependent key parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    var args = [dependentKey, ...additionalDependentKeys];
    return multiArrayMacro(args, function (dependentKeys) {
      var arrays = dependentKeys.map(dependentKey => {
        var array = (0, _object.get)(this, dependentKey);
        return Array.isArray(array) ? array : [];
      });
      var firstArray = arrays.pop();
      (true && !(firstArray) && (0, _debug.assert)('Attempted to apply multiArrayMacro for intersect without any dependentKeys', firstArray));
      var results = firstArray.filter(candidate => {
        for (var array of arrays) {
          var found = false;
          for (var item of array) {
            if (item === candidate) {
              found = true;
              break;
            }
          }
          if (found === false) {
            return false;
          }
        }
        return true;
      });
      return (0, _array.A)(results);
    }, 'intersect');
  }
  /**
    A computed property which returns a new array with all the properties from the
    first dependent array that are not in the second dependent array.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { setDiff } from '@ember/object/computed';
  
    class Hamster {
      constructor(likes, fruits) {
        set(this, 'likes', likes);
        set(this, 'fruits', fruits);
      }
  
      @setDiff('likes', 'fruits') wants;
    }
  
    let hamster = new Hamster(
      [
        'banana',
        'grape',
        'kale'
      ],
      [
        'grape',
        'kale',
      ]
    );
  
    hamster.wants; // ['banana']
    ```
  
    @method setDiff
    @for @ember/object/computed
    @static
    @param {String} setAProperty
    @param {String} setBProperty
    @return {ComputedProperty} computes a new array with all the items from the
    first dependent array that are not in the second dependent array
    @public
  */
  function setDiff(setAProperty, setBProperty) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @setDiff as a decorator directly, but it requires atleast one dependent key parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    (true && !(arguments.length === 2) && (0, _debug.assert)('`setDiff` computed macro requires exactly two dependent arrays.', arguments.length === 2));
    (true && !(!/[[\]{}]/g.test(setAProperty) && !/[[\]{}]/g.test(setBProperty)) && (0, _debug.assert)(`Dependent keys passed to \`setDiff\` computed macro shouldn't contain brace expanding pattern.`, !/[[\]{}]/g.test(setAProperty) && !/[[\]{}]/g.test(setBProperty)));
    return (0, _object.computed)(`${setAProperty}.[]`, `${setBProperty}.[]`, function () {
      var setA = (0, _object.get)(this, setAProperty);
      var setB = (0, _object.get)(this, setBProperty);
      if (!isNativeOrEmberArray(setA)) {
        return (0, _array.A)();
      }
      if (!isNativeOrEmberArray(setB)) {
        return setA;
      }
      return setA.filter(x => setB.indexOf(x) === -1);
    }).readOnly();
  }
  /**
    A computed property that returns the array of values for the provided
    dependent properties.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { collect } from '@ember/object/computed';
  
    class Hamster {
      @collect('hat', 'shirt') clothes;
    }
  
    let hamster = new Hamster();
  
    hamster.clothes; // [null, null]
  
    set(hamster, 'hat', 'Camp Hat');
    set(hamster, 'shirt', 'Camp Shirt');
    hamster.clothes; // ['Camp Hat', 'Camp Shirt']
    ```
  
    @method collect
    @for @ember/object/computed
    @static
    @param {String} dependentKey*
    @return {ComputedProperty} computed property which maps values of all passed
    in properties to an array.
    @public
  */
  function collect(dependentKey) {
    for (var _len3 = arguments.length, additionalDependentKeys = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      additionalDependentKeys[_key3 - 1] = arguments[_key3];
    }
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @collect as a decorator directly, but it requires atleast one dependent key parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    var dependentKeys = [dependentKey, ...additionalDependentKeys];
    return multiArrayMacro(dependentKeys, function () {
      var res = dependentKeys.map(key => {
        var val = (0, _object.get)(this, key);
        return val === undefined ? null : val;
      });
      return (0, _array.A)(res);
    }, 'collect');
  }
  function sort(itemsKey, additionalDependentKeysOrDefinition, sortDefinition) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @sort as a decorator directly, but it requires atleast an `itemsKey` parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    if (true /* DEBUG */) {
      var argumentsValid = false;
      if (arguments.length === 2) {
        argumentsValid = typeof itemsKey === 'string' && (typeof additionalDependentKeysOrDefinition === 'string' || typeof additionalDependentKeysOrDefinition === 'function');
      }
      if (arguments.length === 3) {
        argumentsValid = typeof itemsKey === 'string' && Array.isArray(additionalDependentKeysOrDefinition) && typeof sortDefinition === 'function';
      }
      (true && !(argumentsValid) && (0, _debug.assert)('The `sort` computed macro can either be used with an array of sort properties or with a sort function. If used with an array of sort properties, it must receive exactly two arguments: the key of the array to sort, and the key of the array of sort properties. If used with a sort function, it may receive up to three arguments: the key of the array to sort, an optional additional array of dependent keys for the computed property, and the sort function.', argumentsValid));
    }
    var additionalDependentKeys;
    var sortDefinitionOrString;
    if (Array.isArray(additionalDependentKeysOrDefinition)) {
      additionalDependentKeys = additionalDependentKeysOrDefinition;
      sortDefinitionOrString = sortDefinition;
    } else {
      additionalDependentKeys = [];
      sortDefinitionOrString = additionalDependentKeysOrDefinition;
    }
    if (typeof sortDefinitionOrString === 'function') {
      return customSort(itemsKey, additionalDependentKeys, sortDefinitionOrString);
    } else {
      return propertySort(itemsKey, sortDefinitionOrString);
    }
  }
  function customSort(itemsKey, additionalDependentKeys, comparator) {
    return arrayMacro(itemsKey, additionalDependentKeys, function (value) {
      return value.slice().sort((x, y) => comparator.call(this, x, y));
    });
  }
  // This one needs to dynamically set up and tear down observers on the itemsKey
  // depending on the sortProperties
  function propertySort(itemsKey, sortPropertiesKey) {
    var cp = (0, _metal.autoComputed)(function (key) {
      var sortProperties = (0, _object.get)(this, sortPropertiesKey);
      (true && !(function (arr) {
        return isNativeOrEmberArray(arr) && arr.every(s => typeof s === 'string');
      }(sortProperties)) && (0, _debug.assert)(`The sort definition for '${key}' on ${this} must be a function or an array of strings`, function (arr) {
        return isNativeOrEmberArray(arr) && arr.every(s => typeof s === 'string');
      }(sortProperties)));
      var itemsKeyIsAtThis = itemsKey === '@this';
      var normalizedSortProperties = normalizeSortProperties(sortProperties);
      var items = itemsKeyIsAtThis ? this : (0, _object.get)(this, itemsKey);
      if (!isNativeOrEmberArray(items)) {
        return (0, _array.A)();
      }
      if (normalizedSortProperties.length === 0) {
        return (0, _array.A)(items.slice());
      } else {
        return sortByNormalizedSortProperties(items, normalizedSortProperties);
      }
    }).readOnly();
    return cp;
  }
  function normalizeSortProperties(sortProperties) {
    var callback = p => {
      var [prop, direction] = p.split(':');
      direction = direction || 'asc';
      // SAFETY: There will always be at least one value returned by split
      return [prop, direction];
    };
    // This nonsense is necessary since technically the two map implementations diverge.
    return Array.isArray(sortProperties) ? sortProperties.map(callback) : sortProperties.map(callback);
  }
  function sortByNormalizedSortProperties(items, normalizedSortProperties) {
    return (0, _array.A)(items.slice().sort((itemA, itemB) => {
      for (var [prop, direction] of normalizedSortProperties) {
        var result = (0, _utils.compare)((0, _object.get)(itemA, prop), (0, _object.get)(itemB, prop));
        if (result !== 0) {
          return direction === 'desc' ? -1 * result : result;
        }
      }
      return 0;
    }));
  }
});
define("@ember/object/mixin", ["exports", "@ember/-internals/container", "@ember/-internals/meta", "@ember/-internals/utils", "@ember/debug", "@glimmer/util", "@ember/-internals/metal", "@ember/object/events"], function (_exports, _container, _meta, _utils, _debug, _util, _metal, _events) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.applyMixin = applyMixin;
  _exports.default = void 0;
  _exports.mixin = mixin;
  /**
  @module @ember/object/mixin
  */

  var a_concat = Array.prototype.concat;
  var {
    isArray
  } = Array;
  function extractAccessors(properties) {
    if (properties !== undefined) {
      for (var key of Object.keys(properties)) {
        var desc = Object.getOwnPropertyDescriptor(properties, key);
        if (desc.get !== undefined || desc.set !== undefined) {
          Object.defineProperty(properties, key, {
            value: (0, _metal.nativeDescDecorator)(desc)
          });
        }
      }
    }
    return properties;
  }
  function concatenatedMixinProperties(concatProp, props, values, base) {
    // reset before adding each new mixin to pickup concats from previous
    var concats = values[concatProp] || base[concatProp];
    if (props[concatProp]) {
      concats = concats ? a_concat.call(concats, props[concatProp]) : props[concatProp];
    }
    return concats;
  }
  function giveDecoratorSuper(key, decorator, property, descs) {
    if (property === true) {
      return decorator;
    }
    var originalGetter = property._getter;
    if (originalGetter === undefined) {
      return decorator;
    }
    var superDesc = descs[key];
    // Check to see if the super property is a decorator first, if so load its descriptor
    var superProperty = typeof superDesc === 'function' ? (0, _metal.descriptorForDecorator)(superDesc) : superDesc;
    if (superProperty === undefined || superProperty === true) {
      return decorator;
    }
    var superGetter = superProperty._getter;
    if (superGetter === undefined) {
      return decorator;
    }
    var get = (0, _utils.wrap)(originalGetter, superGetter);
    var set;
    var originalSetter = property._setter;
    var superSetter = superProperty._setter;
    if (superSetter !== undefined) {
      if (originalSetter !== undefined) {
        set = (0, _utils.wrap)(originalSetter, superSetter);
      } else {
        // If the super property has a setter, we default to using it no matter what.
        // This is clearly very broken and weird, but it's what was here so we have
        // to keep it until the next major at least.
        //
        // TODO: Add a deprecation here.
        set = superSetter;
      }
    } else {
      set = originalSetter;
    }
    // only create a new CP if we must
    if (get !== originalGetter || set !== originalSetter) {
      // Since multiple mixins may inherit from the same parent, we need
      // to clone the computed property so that other mixins do not receive
      // the wrapped version.
      var dependentKeys = property._dependentKeys || [];
      var newProperty = new _metal.ComputedProperty([...dependentKeys, {
        get,
        set
      }]);
      newProperty._readOnly = property._readOnly;
      newProperty._meta = property._meta;
      newProperty.enumerable = property.enumerable;
      // SAFETY: We passed in the impl for this class
      return (0, _metal.makeComputedDecorator)(newProperty, _metal.ComputedProperty);
    }
    return decorator;
  }
  function giveMethodSuper(key, method, values, descs) {
    // Methods overwrite computed properties, and do not call super to them.
    if (descs[key] !== undefined) {
      return method;
    }
    // Find the original method in a parent mixin
    var superMethod = values[key];
    // Only wrap the new method if the original method was a function
    if (typeof superMethod === 'function') {
      return (0, _utils.wrap)(method, superMethod);
    }
    return method;
  }
  function simpleMakeArray(value) {
    if (!value) {
      return [];
    } else if (!Array.isArray(value)) {
      return [value];
    } else {
      return value;
    }
  }
  function applyConcatenatedProperties(key, value, values) {
    var baseValue = values[key];
    var ret = simpleMakeArray(baseValue).concat(simpleMakeArray(value));
    if (true /* DEBUG */) {
      // it is possible to use concatenatedProperties with strings (which cannot be frozen)
      // only freeze objects...
      if (typeof ret === 'object' && ret !== null) {
        // prevent mutating `concatenatedProperties` array after it is applied
        Object.freeze(ret);
      }
    }
    return ret;
  }
  function applyMergedProperties(key, value, values) {
    var baseValue = values[key];
    (true && !(!isArray(value)) && (0, _debug.assert)(`You passed in \`${JSON.stringify(value)}\` as the value for \`${key}\` but \`${key}\` cannot be an Array`, !isArray(value)));
    if (!baseValue) {
      return value;
    }
    var newBase = Object.assign({}, baseValue);
    var hasFunction = false;
    var props = Object.keys(value);
    for (var prop of props) {
      var propValue = value[prop];
      if (typeof propValue === 'function') {
        hasFunction = true;
        newBase[prop] = giveMethodSuper(prop, propValue, baseValue, {});
      } else {
        newBase[prop] = propValue;
      }
    }
    if (hasFunction) {
      newBase._super = _utils.ROOT;
    }
    return newBase;
  }
  function mergeMixins(mixins, meta, descs, values, base, keys, keysWithSuper) {
    var currentMixin;
    for (var i = 0; i < mixins.length; i++) {
      currentMixin = mixins[i];
      (true && !(typeof currentMixin === 'object' && currentMixin !== null && Object.prototype.toString.call(currentMixin) !== '[object Array]') && (0, _debug.assert)(`Expected hash or Mixin instance, got ${Object.prototype.toString.call(currentMixin)}`, typeof currentMixin === 'object' && currentMixin !== null && Object.prototype.toString.call(currentMixin) !== '[object Array]'));
      if (MIXINS.has(currentMixin)) {
        if (meta.hasMixin(currentMixin)) {
          continue;
        }
        meta.addMixin(currentMixin);
        var {
          properties,
          mixins: _mixins
        } = currentMixin;
        if (properties !== undefined) {
          mergeProps(meta, properties, descs, values, base, keys, keysWithSuper);
        } else if (_mixins !== undefined) {
          mergeMixins(_mixins, meta, descs, values, base, keys, keysWithSuper);
          if (currentMixin instanceof Mixin && currentMixin._without !== undefined) {
            currentMixin._without.forEach(keyName => {
              // deleting the key means we won't process the value
              var index = keys.indexOf(keyName);
              if (index !== -1) {
                keys.splice(index, 1);
              }
            });
          }
        }
      } else {
        mergeProps(meta, currentMixin, descs, values, base, keys, keysWithSuper);
      }
    }
  }
  function mergeProps(meta, props, descs, values, base, keys, keysWithSuper) {
    var concats = concatenatedMixinProperties('concatenatedProperties', props, values, base);
    var mergings = concatenatedMixinProperties('mergedProperties', props, values, base);
    var propKeys = Object.keys(props);
    for (var key of propKeys) {
      var value = props[key];
      if (value === undefined) continue;
      if (keys.indexOf(key) === -1) {
        keys.push(key);
        var desc = meta.peekDescriptors(key);
        if (desc === undefined) {
          // If the value is a classic decorator, we don't want to actually
          // access it, because that will execute the decorator while we're
          // building the class.
          if (!(0, _metal.isClassicDecorator)(value)) {
            // The superclass did not have a CP, which means it may have
            // observers or listeners on that property.
            var prev = values[key] = base[key];
            if (typeof prev === 'function') {
              updateObserversAndListeners(base, key, prev, false);
            }
          }
        } else {
          descs[key] = desc;
          // The super desc will be overwritten on descs, so save off the fact that
          // there was a super so we know to Object.defineProperty when writing
          // the value
          keysWithSuper.push(key);
          desc.teardown(base, key, meta);
        }
      }
      var isFunction = typeof value === 'function';
      if (isFunction) {
        var _desc = (0, _metal.descriptorForDecorator)(value);
        if (_desc !== undefined) {
          // Wrap descriptor function to implement _super() if needed
          descs[key] = giveDecoratorSuper(key, value, _desc, descs);
          values[key] = undefined;
          continue;
        }
      }
      if (concats && concats.indexOf(key) >= 0 || key === 'concatenatedProperties' || key === 'mergedProperties') {
        value = applyConcatenatedProperties(key, value, values);
      } else if (mergings && mergings.indexOf(key) > -1) {
        value = applyMergedProperties(key, value, values);
      } else if (isFunction) {
        value = giveMethodSuper(key, value, values, descs);
      }
      values[key] = value;
      descs[key] = undefined;
    }
  }
  function updateObserversAndListeners(obj, key, fn, add) {
    var meta = (0, _utils.observerListenerMetaFor)(fn);
    if (meta === undefined) return;
    var {
      observers,
      listeners
    } = meta;
    if (observers !== undefined) {
      var updateObserver = add ? _metal.addObserver : _metal.removeObserver;
      for (var path of observers.paths) {
        updateObserver(obj, path, null, key, observers.sync);
      }
    }
    if (listeners !== undefined) {
      var updateListener = add ? _events.addListener : _events.removeListener;
      for (var listener of listeners) {
        updateListener(obj, listener, null, key);
      }
    }
  }
  function applyMixin(obj, mixins, _hideKeys) {
    if (_hideKeys === void 0) {
      _hideKeys = false;
    }
    var descs = Object.create(null);
    var values = Object.create(null);
    var meta = (0, _meta.meta)(obj);
    var keys = [];
    var keysWithSuper = [];
    obj._super = _utils.ROOT;
    // Go through all mixins and hashes passed in, and:
    //
    // * Handle concatenated properties
    // * Handle merged properties
    // * Set up _super wrapping if necessary
    // * Set up computed property descriptors
    // * Copying `toString` in broken browsers
    mergeMixins(mixins, meta, descs, values, obj, keys, keysWithSuper);
    for (var key of keys) {
      var value = values[key];
      var desc = descs[key];
      if (value !== undefined) {
        if (typeof value === 'function') {
          updateObserversAndListeners(obj, key, value, true);
        }
        (0, _metal.defineValue)(obj, key, value, keysWithSuper.indexOf(key) !== -1, !_hideKeys);
      } else if (desc !== undefined) {
        (0, _metal.defineDecorator)(obj, key, desc, meta);
      }
    }
    if (!meta.isPrototypeMeta(obj)) {
      (0, _metal.revalidateObservers)(obj);
    }
    return obj;
  }
  /**
    @method mixin
    @param obj
    @param mixins*
    @return obj
    @private
  */
  function mixin(obj) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    applyMixin(obj, args);
    return obj;
  }
  var MIXINS = new _util._WeakSet();
  /**
    The `Mixin` class allows you to create mixins, whose properties can be
    added to other classes. For instance,
  
    ```javascript
    import Mixin from '@ember/object/mixin';
  
    const EditableMixin = Mixin.create({
      edit() {
        console.log('starting to edit');
        this.set('isEditing', true);
      },
      isEditing: false
    });
    ```
  
    ```javascript
    import EmberObject from '@ember/object';
    import EditableMixin from '../mixins/editable';
  
    // Mix mixins into classes by passing them as the first arguments to
    // `.extend.`
    const Comment = EmberObject.extend(EditableMixin, {
      post: null
    });
  
    let comment = Comment.create({
      post: somePost
    });
  
    comment.edit(); // outputs 'starting to edit'
    ```
  
    Note that Mixins are created with `Mixin.create`, not
    `Mixin.extend`.
  
    Note that mixins extend a constructor's prototype so arrays and object literals
    defined as properties will be shared amongst objects that implement the mixin.
    If you want to define a property in a mixin that is not shared, you can define
    it either as a computed property or have it be created on initialization of the object.
  
    ```javascript
    // filters array will be shared amongst any object implementing mixin
    import Mixin from '@ember/object/mixin';
    import { A } from '@ember/array';
  
    const FilterableMixin = Mixin.create({
      filters: A()
    });
    ```
  
    ```javascript
    import Mixin from '@ember/object/mixin';
    import { A } from '@ember/array';
    import { computed } from '@ember/object';
  
    // filters will be a separate array for every object implementing the mixin
    const FilterableMixin = Mixin.create({
      filters: computed(function() {
        return A();
      })
    });
    ```
  
    ```javascript
    import Mixin from '@ember/object/mixin';
    import { A } from '@ember/array';
  
    // filters will be created as a separate array during the object's initialization
    const Filterable = Mixin.create({
      filters: null,
  
      init() {
        this._super(...arguments);
        this.set("filters", A());
      }
    });
    ```
  
    @class Mixin
    @public
  */
  class Mixin {
    /** @internal */
    constructor(mixins, properties) {
      MIXINS.add(this);
      this.properties = extractAccessors(properties);
      this.mixins = buildMixinsArray(mixins);
      this.ownerConstructor = undefined;
      this._without = undefined;
      if (true /* DEBUG */) {
        // Eagerly add INIT_FACTORY to avoid issues in DEBUG as a result of Object.seal(mixin)
        this[_container.INIT_FACTORY] = null;
        /*
          In debug builds, we seal mixins to help avoid performance pitfalls.
                 In IE11 there is a quirk that prevents sealed objects from being added
          to a WeakMap. Unfortunately, the mixin system currently relies on
          weak maps in `guidFor`, so we need to prime the guid cache weak map.
        */
        (0, _utils.guidFor)(this);
        if (Mixin._disableDebugSeal !== true) {
          Object.seal(this);
        }
      }
    }
    /**
      @method create
      @for @ember/object/mixin
      @static
      @param arguments*
      @public
    */
    static create() {
      (0, _metal.setUnprocessedMixins)();
      var M = this;
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return new M(args, undefined);
    }
    // returns the mixins currently applied to the specified object
    // TODO: Make `mixin`
    /** @internal */
    static mixins(obj) {
      var meta = (0, _meta.peekMeta)(obj);
      var ret = [];
      if (meta === null) {
        return ret;
      }
      meta.forEachMixins(currentMixin => {
        // skip primitive mixins since these are always anonymous
        if (!currentMixin.properties) {
          ret.push(currentMixin);
        }
      });
      return ret;
    }
    /**
      @method reopen
      @param arguments*
      @private
      @internal
    */
    reopen() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      if (args.length === 0) {
        return;
      }
      if (this.properties) {
        var currentMixin = new Mixin(undefined, this.properties);
        this.properties = undefined;
        this.mixins = [currentMixin];
      } else if (!this.mixins) {
        this.mixins = [];
      }
      this.mixins = this.mixins.concat(buildMixinsArray(args));
      return this;
    }
    /**
      @method apply
      @param obj
      @return applied object
      @private
      @internal
    */
    apply(obj, _hideKeys) {
      if (_hideKeys === void 0) {
        _hideKeys = false;
      }
      // Ember.NativeArray is a normal Ember.Mixin that we mix into `Array.prototype` when prototype extensions are enabled
      // mutating a native object prototype like this should _not_ result in enumerable properties being added (or we have significant
      // issues with things like deep equality checks from test frameworks, or things like jQuery.extend(true, [], [])).
      //
      // _hideKeys disables enumerablity when applying the mixin. This is a hack, and we should stop mutating the array prototype by default 😫
      return applyMixin(obj, [this], _hideKeys);
    }
    /** @internal */
    applyPartial(obj) {
      return applyMixin(obj, [this]);
    }
    /**
      @method detect
      @param obj
      @return {Boolean}
      @private
      @internal
    */
    detect(obj) {
      if (typeof obj !== 'object' || obj === null) {
        return false;
      }
      if (MIXINS.has(obj)) {
        return _detect(obj, this);
      }
      var meta = (0, _meta.peekMeta)(obj);
      if (meta === null) {
        return false;
      }
      return meta.hasMixin(this);
    }
    /** @internal */
    without() {
      var ret = new Mixin([this]);
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }
      ret._without = args;
      return ret;
    }
    /** @internal */
    keys() {
      var keys = _keys(this);
      (true && !(keys) && (0, _debug.assert)('[BUG] Missing keys for mixin!', keys));
      return keys;
    }
    /** @internal */
    toString() {
      return '(unknown mixin)';
    }
  }
  _exports.default = Mixin;
  if (true /* DEBUG */) {
    Object.defineProperty(Mixin, '_disableDebugSeal', {
      configurable: true,
      enumerable: false,
      writable: true,
      value: false
    });
  }
  function buildMixinsArray(mixins) {
    var length = mixins && mixins.length || 0;
    var m = undefined;
    if (length > 0) {
      m = new Array(length);
      for (var i = 0; i < length; i++) {
        var x = mixins[i];
        (true && !(typeof x === 'object' && x !== null && Object.prototype.toString.call(x) !== '[object Array]') && (0, _debug.assert)(`Expected hash or Mixin instance, got ${Object.prototype.toString.call(x)}`, typeof x === 'object' && x !== null && Object.prototype.toString.call(x) !== '[object Array]'));
        if (MIXINS.has(x)) {
          m[i] = x;
        } else {
          m[i] = new Mixin(undefined, x);
        }
      }
    }
    return m;
  }
  if (true /* DEBUG */) {
    Object.seal(Mixin.prototype);
  }
  function _detect(curMixin, targetMixin, seen) {
    if (seen === void 0) {
      seen = new Set();
    }
    if (seen.has(curMixin)) {
      return false;
    }
    seen.add(curMixin);
    if (curMixin === targetMixin) {
      return true;
    }
    var mixins = curMixin.mixins;
    if (mixins) {
      return mixins.some(mixin => _detect(mixin, targetMixin, seen));
    }
    return false;
  }
  function _keys(mixin, ret, seen) {
    if (ret === void 0) {
      ret = new Set();
    }
    if (seen === void 0) {
      seen = new Set();
    }
    if (seen.has(mixin)) {
      return;
    }
    seen.add(mixin);
    if (mixin.properties) {
      var props = Object.keys(mixin.properties);
      for (var prop of props) {
        ret.add(prop);
      }
    } else if (mixin.mixins) {
      mixin.mixins.forEach(x => _keys(x, ret, seen));
    }
    return ret;
  }
});
define("@ember/object/observable", ["exports", "@ember/-internals/meta", "@ember/-internals/metal", "@ember/object", "@ember/object/mixin", "@ember/debug"], function (_exports, _meta, _metal, _object, _mixin, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module @ember/object/observable
  */

  var Observable = _mixin.default.create({
    get(keyName) {
      return (0, _object.get)(this, keyName);
    },
    getProperties() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return (0, _object.getProperties)(this, ...args);
    },
    set(keyName, value) {
      return (0, _object.set)(this, keyName, value);
    },
    setProperties(hash) {
      return (0, _object.setProperties)(this, hash);
    },
    /**
      Begins a grouping of property changes.
         You can use this method to group property changes so that notifications
      will not be sent until the changes are finished. If you plan to make a
      large number of changes to an object at one time, you should call this
      method at the beginning of the changes to begin deferring change
      notifications. When you are done making changes, call
      `endPropertyChanges()` to deliver the deferred change notifications and end
      deferring.
         @method beginPropertyChanges
      @return {Observable}
      @private
    */
    beginPropertyChanges() {
      (0, _metal.beginPropertyChanges)();
      return this;
    },
    /**
      Ends a grouping of property changes.
         You can use this method to group property changes so that notifications
      will not be sent until the changes are finished. If you plan to make a
      large number of changes to an object at one time, you should call
      `beginPropertyChanges()` at the beginning of the changes to defer change
      notifications. When you are done making changes, call this method to
      deliver the deferred change notifications and end deferring.
         @method endPropertyChanges
      @return {Observable}
      @private
    */
    endPropertyChanges() {
      (0, _metal.endPropertyChanges)();
      return this;
    },
    notifyPropertyChange(keyName) {
      (0, _metal.notifyPropertyChange)(this, keyName);
      return this;
    },
    addObserver(key, target, method, sync) {
      (0, _metal.addObserver)(this, key, target, method, sync);
      return this;
    },
    removeObserver(key, target, method, sync) {
      (0, _metal.removeObserver)(this, key, target, method, sync);
      return this;
    },
    /**
      Returns `true` if the object currently has observers registered for a
      particular key. You can use this method to potentially defer performing
      an expensive action until someone begins observing a particular property
      on the object.
         @method hasObserverFor
      @param {String} key Key to check
      @return {Boolean}
      @private
    */
    hasObserverFor(key) {
      return (0, _metal.hasListeners)(this, `${key}:change`);
    },
    incrementProperty(keyName, increment) {
      if (increment === void 0) {
        increment = 1;
      }
      (true && !(!isNaN(parseFloat(String(increment))) && isFinite(increment)) && (0, _debug.assert)('Must pass a numeric value to incrementProperty', !isNaN(parseFloat(String(increment))) && isFinite(increment)));
      return (0, _object.set)(this, keyName, (parseFloat((0, _object.get)(this, keyName)) || 0) + increment);
    },
    decrementProperty(keyName, decrement) {
      if (decrement === void 0) {
        decrement = 1;
      }
      (true && !((typeof decrement === 'number' || !isNaN(parseFloat(decrement))) && isFinite(decrement)) && (0, _debug.assert)('Must pass a numeric value to decrementProperty', (typeof decrement === 'number' || !isNaN(parseFloat(decrement))) && isFinite(decrement)));
      return (0, _object.set)(this, keyName, ((0, _object.get)(this, keyName) || 0) - decrement);
    },
    toggleProperty(keyName) {
      return (0, _object.set)(this, keyName, !(0, _object.get)(this, keyName));
    },
    cacheFor(keyName) {
      var meta = (0, _meta.peekMeta)(this);
      if (meta !== null) {
        return meta.valueFor(keyName);
      }
    }
  });
  var _default = Observable;
  _exports.default = _default;
});
define("@ember/object/observers", ["exports", "@ember/-internals/metal"], function (_exports, _metal) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "addObserver", {
    enumerable: true,
    get: function () {
      return _metal.addObserver;
    }
  });
  Object.defineProperty(_exports, "removeObserver", {
    enumerable: true,
    get: function () {
      return _metal.removeObserver;
    }
  });
});
define("@ember/object/promise-proxy-mixin", ["exports", "@ember/object", "@ember/object/mixin"], function (_exports, _object, _mixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
    @module @ember/object/promise-proxy-mixin
  */
  function tap(proxy, promise) {
    (0, _object.setProperties)(proxy, {
      isFulfilled: false,
      isRejected: false
    });
    return promise.then(value => {
      if (!proxy.isDestroyed && !proxy.isDestroying) {
        (0, _object.setProperties)(proxy, {
          content: value,
          isFulfilled: true
        });
      }
      return value;
    }, reason => {
      if (!proxy.isDestroyed && !proxy.isDestroying) {
        (0, _object.setProperties)(proxy, {
          reason,
          isRejected: true
        });
      }
      throw reason;
    }, 'Ember: PromiseProxy');
  }
  var PromiseProxyMixin = _mixin.default.create({
    reason: null,
    isPending: (0, _object.computed)('isSettled', function () {
      return !(0, _object.get)(this, 'isSettled');
    }).readOnly(),
    isSettled: (0, _object.computed)('isRejected', 'isFulfilled', function () {
      return (0, _object.get)(this, 'isRejected') || (0, _object.get)(this, 'isFulfilled');
    }).readOnly(),
    isRejected: false,
    isFulfilled: false,
    promise: (0, _object.computed)({
      get() {
        throw new Error("PromiseProxy's promise must be set");
      },
      set(_key, promise) {
        return tap(this, promise);
      }
    }),
    then: promiseAlias('then'),
    catch: promiseAlias('catch'),
    finally: promiseAlias('finally')
  });
  function promiseAlias(name) {
    return function () {
      var promise = (0, _object.get)(this, 'promise');
      // We need this cast because `Parameters` is deferred so that it is not
      // possible for TS to see it will always produce the right type. However,
      // since `AnyFn` has a rest type, it is allowed. See discussion on [this
      // issue](https://github.com/microsoft/TypeScript/issues/47615).
      return promise[name](...arguments);
    };
  }
  var _default = PromiseProxyMixin;
  _exports.default = _default;
});
define("@ember/object/proxy", ["exports", "@ember/object/-internals", "@ember/-internals/runtime"], function (_exports, _internals, _runtime) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module @ember/object/proxy
  */

  class ObjectProxy extends _internals.FrameworkObject {}
  ObjectProxy.PrototypeMixin.reopen(_runtime._ProxyMixin);
  var _default = ObjectProxy;
  _exports.default = _default;
});
define("@ember/owner/index", ["exports", "@ember/-internals/owner"], function (_exports, _owner) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.getOwner = void 0;
  Object.defineProperty(_exports, "setOwner", {
    enumerable: true,
    get: function () {
      return _owner.setOwner;
    }
  });
  /**
    Ember’s dependency injection system is built on the idea of an "owner": an
    object responsible for managing items which can be registered and looked up
    with the system.
  
    This module does not provide any concrete instances of owners. Instead, it
    defines the core type, `Owner`, which specifies the public API contract for an
    owner. The primary concrete implementations of `Owner` are `EngineInstance`,
    from `@ember/engine/instance`, and its `ApplicationInstance` subclass, from
    `@ember/application/instance`.
  
    Along with `Owner` itself, this module provides a number of supporting types
    related to Ember's DI system:
  
    - `Factory`, Ember's primary interface for something which can create class
      instances registered with the DI system.
  
    - `FactoryManager`, an interface for inspecting a `Factory`'s class.
  
    - `Resolver`, an interface defining the contract for the object responsible
      for mapping string names to the corresponding classes. For example, when you
      write `@service('session')`, a resolver is responsible to map that back to
      the `Session` service class in your codebase. Normally, this is handled for
      you automatically with `ember-resolver`, which is the main implementor of
      this interface.
  
    For more details on each, see their per-item docs.
  
    @module @ember/owner
    @public
  */
  // We need to provide a narrower public interface to `getOwner` so that we only
  // expose the `Owner` type, *not* our richer `InternalOwner` type and its
  // various bits of private API.

  // NOTE: this documentation appears here instead of at the definition site so
  // it can appear correctly in both API docs and for TS, while providing a richer
  // internal representation for Ember's own usage.
  /**
    Framework objects in an Ember application (components, services, routes, etc.)
    are created via a factory and dependency injection system. Each of these
    objects is the responsibility of an "owner", which handled its
    instantiation and manages its lifetime.
  
    `getOwner` fetches the owner object responsible for an instance. This can
    be used to lookup or resolve other class instances, or register new factories
    into the owner.
  
    For example, this component dynamically looks up a service based on the
    `audioType` passed as an argument:
  
    ```app/components/play-audio.js
    import Component from '@glimmer/component';
    import { action } from '@ember/object';
    import { getOwner } from '@ember/application';
  
    // Usage:
    //
    //   <PlayAudio @audioType={{@model.audioType}} @audioFile={{@model.file}}/>
    //
    export default class extends Component {
      get audioService() {
        return getOwner(this)?.lookup(`service:${this.args.audioType}`);
      }
  
      @action
      onPlay() {
        this.audioService?.play(this.args.audioFile);
      }
    }
    ```
  
    @method getOwner
    @static
    @for @ember/owner
    @param {Object} object An object with an owner.
    @return {Object} An owner object.
    @since 2.3.0
    @public
  */
  // SAFETY: the cast here is necessary, instead of using an assignment, because
  // TS (not incorrectly! Nothing expressly relates them) does not see that the
  // `InternalOwner` and `Owner` do actually have identical constraints on their
  // relations to the `DIRegistry`.
  var getOwner = _owner.getOwner;
  _exports.getOwner = getOwner;
});
define("@ember/polyfills/index", ["exports", "@ember/polyfills/lib/assign"], function (_exports, _assign) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "assign", {
    enumerable: true,
    get: function () {
      return _assign.assign;
    }
  });
  _exports.hasPropertyAccessors = void 0;
  var hasPropertyAccessors = true;
  _exports.hasPropertyAccessors = hasPropertyAccessors;
});
define("@ember/polyfills/lib/assign", ["exports", "@ember/debug"], function (_exports, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.assign = assign;
  /**
    Copy properties from a source object to a target object. Source arguments remain unchanged.
  
    ```javascript
    import { assign } from '@ember/polyfills';
  
    var a = { first: 'Yehuda' };
    var b = { last: 'Katz' };
    var c = { company: 'Other Company' };
    var d = { company: 'Tilde Inc.' };
    assign(a, b, c, d); // a === { first: 'Yehuda', last: 'Katz', company: 'Tilde Inc.' };
    ```
  
    @method assign
    @for @ember/polyfills
    @param {Object} target The object to assign into
    @param {Object} ...args The objects to copy properties from
    @return {Object}
    @public
    @static
  */
  function assign(target) {
    (true && !(false) && (0, _debug.deprecate)('Use of `assign` has been deprecated. Please use `Object.assign` or the spread operator instead.', false, {
      id: 'ember-polyfills.deprecate-assign',
      until: '5.0.0',
      url: 'https://deprecations.emberjs.com/v4.x/#toc_ember-polyfills-deprecate-assign',
      for: 'ember-source',
      since: {
        available: '4.0.0',
        enabled: '4.0.0'
      }
    }));
    for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      rest[_key - 1] = arguments[_key];
    }
    return Object.assign(target, ...rest);
  }
});
define("@ember/renderer/index", ["exports", "@ember/-internals/glimmer"], function (_exports, _glimmer) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "renderSettled", {
    enumerable: true,
    get: function () {
      return _glimmer.renderSettled;
    }
  });
});
define("@ember/routing/-internals", ["exports", "@ember/routing/lib/router_state", "@ember/routing/lib/routing-service", "@ember/routing/lib/utils", "@ember/routing/lib/generate_controller", "@ember/routing/lib/cache", "@ember/routing/lib/dsl", "@ember/routing/lib/controller_for"], function (_exports, _router_state, _routingService, _utils, _generate_controller, _cache, _dsl, _controller_for) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "BucketCache", {
    enumerable: true,
    get: function () {
      return _cache.default;
    }
  });
  Object.defineProperty(_exports, "DSL", {
    enumerable: true,
    get: function () {
      return _dsl.default;
    }
  });
  Object.defineProperty(_exports, "RouterState", {
    enumerable: true,
    get: function () {
      return _router_state.default;
    }
  });
  Object.defineProperty(_exports, "RoutingService", {
    enumerable: true,
    get: function () {
      return _routingService.default;
    }
  });
  Object.defineProperty(_exports, "controllerFor", {
    enumerable: true,
    get: function () {
      return _controller_for.default;
    }
  });
  Object.defineProperty(_exports, "deprecateTransitionMethods", {
    enumerable: true,
    get: function () {
      return _utils.deprecateTransitionMethods;
    }
  });
  Object.defineProperty(_exports, "generateController", {
    enumerable: true,
    get: function () {
      return _generate_controller.default;
    }
  });
  Object.defineProperty(_exports, "generateControllerFactory", {
    enumerable: true,
    get: function () {
      return _generate_controller.generateControllerFactory;
    }
  });
  Object.defineProperty(_exports, "prefixRouteNameArg", {
    enumerable: true,
    get: function () {
      return _utils.prefixRouteNameArg;
    }
  });
});
define("@ember/routing/auto-location", ["exports", "@ember/-internals/browser-environment", "@ember/-internals/owner", "@ember/object", "@ember/debug", "@ember/routing/lib/location-utils"], function (_exports, _browserEnvironment, _owner, _object, _debug, _locationUtils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.getHashPath = getHashPath;
  _exports.getHistoryPath = getHistoryPath;
  /**
  @module @ember/routing/auto-location
  */
  /**
    AutoLocation will select the best location option based off browser
    support with the priority order: history, hash, none.
  
    Clean pushState paths accessed by hashchange-only browsers will be redirected
    to the hash-equivalent and vice versa so future transitions are consistent.
  
    Keep in mind that since some of your users will use `HistoryLocation`, your
    server must serve the Ember app at all the routes you define.
  
    Browsers that support the `history` API will use `HistoryLocation`, those that
    do not, but still support the `hashchange` event will use `HashLocation`, and
    in the rare case neither is supported will use `NoneLocation`.
  
    Example:
  
    ```app/router.js
    Router.map(function() {
      this.route('posts', function() {
        this.route('new');
      });
    });
  
    Router.reopen({
      location: 'auto'
    });
    ```
  
    This will result in a posts.new url of `/posts/new` for modern browsers that
    support the `history` api or `/#/posts/new` for older ones, like Internet
    Explorer 9 and below.
  
    When a user visits a link to your application, they will be automatically
    upgraded or downgraded to the appropriate `Location` class, with the URL
    transformed accordingly, if needed.
  
    Keep in mind that since some of your users will use `HistoryLocation`, your
    server must serve the Ember app at all the routes you define.
  
    @class AutoLocation
    @static
    @protected
  */
  class AutoLocation extends _object.default {
    constructor() {
      super(...arguments);
      this.implementation = 'auto';
    }
    /**
     Called by the router to instruct the location to do any feature detection
     necessary. In the case of AutoLocation, we detect whether to use history
     or hash concrete implementations.
        @private
    */
    detect() {
      var rootURL = this.rootURL;
      (true && !(rootURL.charAt(rootURL.length - 1) === '/') && (0, _debug.assert)('rootURL must end with a trailing forward slash e.g. "/app/"', rootURL.charAt(rootURL.length - 1) === '/'));
      var implementation = detectImplementation({
        location: this.location,
        history: this.history,
        userAgent: this.userAgent,
        rootURL,
        documentMode: this.documentMode,
        global: this.global
      });
      if (implementation === false) {
        (0, _object.set)(this, 'cancelRouterSetup', true);
        implementation = 'none';
      }
      var owner = (0, _owner.getOwner)(this);
      (true && !(owner) && (0, _debug.assert)('AutoLocation is unexpectedly missing an owner', owner));
      var concrete = owner.lookup(`location:${implementation}`);
      (true && !(concrete !== undefined) && (0, _debug.assert)(`Could not find location '${implementation}'.`, concrete !== undefined));
      (0, _object.set)(concrete, 'rootURL', rootURL);
      (0, _object.set)(this, 'concreteImplementation', concrete);
    }
    willDestroy() {
      var {
        concreteImplementation
      } = this;
      if (concreteImplementation) {
        concreteImplementation.destroy();
      }
    }
  }
  _exports.default = AutoLocation;
  AutoLocation.reopen({
    rootURL: '/',
    initState: delegateToConcreteImplementation('initState'),
    getURL: delegateToConcreteImplementation('getURL'),
    setURL: delegateToConcreteImplementation('setURL'),
    replaceURL: delegateToConcreteImplementation('replaceURL'),
    onUpdateURL: delegateToConcreteImplementation('onUpdateURL'),
    formatURL: delegateToConcreteImplementation('formatURL'),
    location: _browserEnvironment.location,
    history: _browserEnvironment.history,
    global: _browserEnvironment.window,
    userAgent: _browserEnvironment.userAgent,
    cancelRouterSetup: false
  });
  function delegateToConcreteImplementation(methodName) {
    return function () {
      var _a;
      var {
        concreteImplementation
      } = this;
      (true && !(concreteImplementation) && (0, _debug.assert)("AutoLocation's detect() method should be called before calling any other hooks.", concreteImplementation)); // We need this cast because `Parameters` is deferred so that it is not
      // possible for TS to see it will always produce the right type. However,
      // since `AnyFn` has a rest type, it is allowed. See discussion on [this
      // issue](https://github.com/microsoft/TypeScript/issues/47615).
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return (_a = concreteImplementation[methodName]) === null || _a === void 0 ? void 0 : _a.call(concreteImplementation, ...args);
    };
  }
  function detectImplementation(options) {
    var {
      location,
      userAgent,
      history,
      documentMode,
      global,
      rootURL
    } = options;
    var implementation = 'none';
    var cancelRouterSetup = false;
    var currentPath = (0, _locationUtils.getFullPath)(location);
    if ((0, _locationUtils.supportsHistory)(userAgent, history)) {
      var historyPath = getHistoryPath(rootURL, location);
      // If the browser supports history and we have a history path, we can use
      // the history location with no redirects.
      if (currentPath === historyPath) {
        implementation = 'history';
      } else if (currentPath.substring(0, 2) === '/#') {
        history.replaceState({
          path: historyPath
        }, '', historyPath);
        implementation = 'history';
      } else {
        cancelRouterSetup = true;
        (0, _locationUtils.replacePath)(location, historyPath);
      }
    } else if ((0, _locationUtils.supportsHashChange)(documentMode, global)) {
      var hashPath = getHashPath(rootURL, location);
      // Be sure we're using a hashed path, otherwise let's switch over it to so
      // we start off clean and consistent. We'll count an index path with no
      // hash as "good enough" as well.
      if (currentPath === hashPath || currentPath === '/' && hashPath === '/#/') {
        implementation = 'hash';
      } else {
        // Our URL isn't in the expected hash-supported format, so we want to
        // cancel the router setup and replace the URL to start off clean
        cancelRouterSetup = true;
        (0, _locationUtils.replacePath)(location, hashPath);
      }
    }
    if (cancelRouterSetup) {
      return false;
    }
    return implementation;
  }
  /**
    @private
  
    Returns the current path as it should appear for HistoryLocation supported
    browsers. This may very well differ from the real current path (e.g. if it
    starts off as a hashed URL)
  */
  function getHistoryPath(rootURL, location) {
    var path = (0, _locationUtils.getPath)(location);
    var hash = (0, _locationUtils.getHash)(location);
    var query = (0, _locationUtils.getQuery)(location);
    var rootURLIndex = path.indexOf(rootURL);
    var routeHash;
    var hashParts;
    (true && !(rootURLIndex === 0) && (0, _debug.assert)(`Path ${path} does not start with the provided rootURL ${rootURL}`, rootURLIndex === 0)); // By convention, Ember.js routes using HashLocation are required to start
    // with `#/`. Anything else should NOT be considered a route and should
    // be passed straight through, without transformation.
    if (hash.substring(0, 2) === '#/') {
      // There could be extra hash segments after the route
      hashParts = hash.substring(1).split('#');
      // The first one is always the route url
      routeHash = hashParts.shift();
      // If the path already has a trailing slash, remove the one
      // from the hashed route so we don't double up.
      if (path.charAt(path.length - 1) === '/') {
        routeHash = routeHash.substring(1);
      }
      // This is the "expected" final order
      path += routeHash + query;
      if (hashParts.length) {
        path += `#${hashParts.join('#')}`;
      }
    } else {
      path += query + hash;
    }
    return path;
  }
  /**
    @private
  
    Returns the current path as it should appear for HashLocation supported
    browsers. This may very well differ from the real current path.
  
    @method _getHashPath
  */
  function getHashPath(rootURL, location) {
    var path = rootURL;
    var historyPath = getHistoryPath(rootURL, location);
    var routePath = historyPath.substring(rootURL.length);
    if (routePath !== '') {
      if (routePath[0] !== '/') {
        routePath = `/${routePath}`;
      }
      path += `#${routePath}`;
    }
    return path;
  }
});
define("@ember/routing/hash-location", ["exports", "@ember/object", "@ember/runloop", "@ember/routing/lib/location-utils"], function (_exports, _object, _runloop, _locationUtils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module @ember/routing/hash-location
  */
  /**
    `HashLocation` implements the location API using the browser's
    hash. At present, it relies on a `hashchange` event existing in the
    browser.
  
    Using `HashLocation` results in URLs with a `#` (hash sign) separating the
    server side URL portion of the URL from the portion that is used by Ember.
  
    Example:
  
    ```app/router.js
    Router.map(function() {
      this.route('posts', function() {
        this.route('new');
      });
    });
  
    Router.reopen({
      location: 'hash'
    });
    ```
  
    This will result in a posts.new url of `/#/posts/new`.
  
    @class HashLocation
    @extends EmberObject
    @protected
  */
  class HashLocation extends _object.default {
    constructor() {
      super(...arguments);
      this.implementation = 'hash';
      this.lastSetURL = null;
    }
    init() {
      (0, _object.set)(this, 'location', this._location || window.location);
      this._hashchangeHandler = undefined;
    }
    /**
      @private
         Returns normalized location.hash
         @since 1.5.1
      @method getHash
    */
    getHash() {
      return (0, _locationUtils.getHash)(this.location);
    }
    /**
      Returns the normalized URL, constructed from `location.hash`.
         e.g. `#/foo` => `/foo` as well as `#/foo#bar` => `/foo#bar`.
         By convention, hashed paths must begin with a forward slash, otherwise they
      are not treated as a path so we can distinguish intent.
         @private
      @method getURL
    */
    getURL() {
      var originalPath = this.getHash().substring(1);
      var outPath = originalPath;
      if (outPath[0] !== '/') {
        outPath = '/';
        // Only add the # if the path isn't empty.
        // We do NOT want `/#` since the ampersand
        // is only included (conventionally) when
        // the location.hash has a value
        if (originalPath) {
          outPath += `#${originalPath}`;
        }
      }
      return outPath;
    }
    /**
      Set the `location.hash` and remembers what was set. This prevents
      `onUpdateURL` callbacks from triggering when the hash was set by
      `HashLocation`.
         @private
      @method setURL
      @param path {String}
    */
    setURL(path) {
      this.location.hash = path;
      (0, _object.set)(this, 'lastSetURL', path);
    }
    /**
      Uses location.replace to update the url without a page reload
      or history modification.
         @private
      @method replaceURL
      @param path {String}
    */
    replaceURL(path) {
      this.location.replace(`#${path}`);
      (0, _object.set)(this, 'lastSetURL', path);
    }
    /**
      Register a callback to be invoked when the hash changes. These
      callbacks will execute when the user presses the back or forward
      button, but not after `setURL` is invoked.
         @private
      @method onUpdateURL
      @param callback {Function}
    */
    onUpdateURL(callback) {
      this._removeEventListener();
      this._hashchangeHandler = (0, _runloop.bind)(this, function (_event) {
        var path = this.getURL();
        if (this.lastSetURL === path) {
          return;
        }
        (0, _object.set)(this, 'lastSetURL', null);
        callback(path);
      });
      window.addEventListener('hashchange', this._hashchangeHandler);
    }
    /**
      Given a URL, formats it to be placed into the page as part
      of an element's `href` attribute.
         This is used, for example, when using the {{action}} helper
      to generate a URL based on an event.
         @private
      @method formatURL
      @param url {String}
    */
    formatURL(url) {
      return `#${url}`;
    }
    /**
      Cleans up the HashLocation event listener.
         @private
      @method willDestroy
    */
    willDestroy() {
      this._removeEventListener();
    }
    _removeEventListener() {
      if (this._hashchangeHandler) {
        window.removeEventListener('hashchange', this._hashchangeHandler);
      }
    }
  }
  _exports.default = HashLocation;
});
define("@ember/routing/history-location", ["exports", "@ember/object", "@ember/routing/lib/location-utils"], function (_exports, _object, _locationUtils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module @ember/routing/history-location
  */
  var popstateFired = false;
  function _uuid() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
      var r, v;
      r = Math.random() * 16 | 0;
      v = c === 'x' ? r : r & 3 | 8;
      return v.toString(16);
    });
  }
  /**
    HistoryLocation implements the location API using the browser's
    history.pushState API.
  
    Using `HistoryLocation` results in URLs that are indistinguishable from a
    standard URL. This relies upon the browser's `history` API.
  
    Example:
  
    ```app/router.js
    Router.map(function() {
      this.route('posts', function() {
        this.route('new');
      });
    });
  
    Router.reopen({
      location: 'history'
    });
    ```
  
    This will result in a posts.new url of `/posts/new`.
  
    Keep in mind that your server must serve the Ember app at all the routes you
    define.
  
    Using `HistoryLocation` will also result in location states being recorded by
    the browser `history` API with the following schema:
  
    ```
    window.history.state -> { path: '/', uuid: '3552e730-b4a6-46bd-b8bf-d8c3c1a97e0a' }
    ```
  
    This allows each in-app location state to be tracked uniquely across history
    state changes via the `uuid` field.
  
    @class HistoryLocation
    @extends EmberObject
    @protected
  */
  class HistoryLocation extends _object.default {
    constructor() {
      super(...arguments);
      this.implementation = 'history';
      /**
        Will be pre-pended to path upon state change
               @property rootURL
        @default '/'
        @private
      */
      this.rootURL = '/';
    }
    /**
      @private
         Returns normalized location.hash
         @method getHash
    */
    getHash() {
      return (0, _locationUtils.getHash)(this.location);
    }
    init() {
      var _a;
      this._super(...arguments);
      var base = document.querySelector('base');
      var baseURL = '';
      if (base !== null && base.hasAttribute('href')) {
        baseURL = (_a = base.getAttribute('href')) !== null && _a !== void 0 ? _a : '';
      }
      (0, _object.set)(this, 'baseURL', baseURL);
      (0, _object.set)(this, 'location', this.location || window.location);
      this._popstateHandler = undefined;
    }
    /**
      Used to set state on first call to setURL
         @private
      @method initState
    */
    initState() {
      var history = this.history || window.history;
      (0, _object.set)(this, 'history', history);
      var {
        state
      } = history;
      var path = this.formatURL(this.getURL());
      if (state && state.path === path) {
        // preserve existing state
        // used for webkit workaround, since there will be no initial popstate event
        this._previousURL = this.getURL();
      } else {
        this.replaceState(path);
      }
    }
    /**
      Returns the current `location.pathname` without `rootURL` or `baseURL`
         @private
      @method getURL
      @return url {String}
    */
    getURL() {
      var {
        location,
        rootURL,
        baseURL
      } = this;
      var path = location.pathname;
      // remove trailing slashes if they exists
      rootURL = rootURL.replace(/\/$/, '');
      baseURL = baseURL.replace(/\/$/, '');
      // remove baseURL and rootURL from start of path
      var url = path.replace(new RegExp(`^${baseURL}(?=/|$)`), '').replace(new RegExp(`^${rootURL}(?=/|$)`), '').replace(/\/\//g, '/'); // remove extra slashes
      var search = location.search || '';
      url += search + this.getHash();
      return url;
    }
    /**
      Uses `history.pushState` to update the url without a page reload.
         @private
      @method setURL
      @param path {String}
    */
    setURL(path) {
      var {
        state
      } = this.history;
      path = this.formatURL(path);
      if (!state || state.path !== path) {
        this.pushState(path);
      }
    }
    /**
      Uses `history.replaceState` to update the url without a page reload
      or history modification.
         @private
      @method replaceURL
      @param path {String}
    */
    replaceURL(path) {
      var {
        state
      } = this.history;
      path = this.formatURL(path);
      if (!state || state.path !== path) {
        this.replaceState(path);
      }
    }
    /**
     Pushes a new state.
        @private
     @method pushState
     @param path {String}
    */
    pushState(path) {
      var state = {
        path,
        uuid: _uuid()
      };
      this.history.pushState(state, null, path);
      // used for webkit workaround
      this._previousURL = this.getURL();
    }
    /**
     Replaces the current state.
        @private
     @method replaceState
     @param path {String}
    */
    replaceState(path) {
      var state = {
        path,
        uuid: _uuid()
      };
      this.history.replaceState(state, null, path);
      // used for webkit workaround
      this._previousURL = this.getURL();
    }
    /**
      Register a callback to be invoked whenever the browser
      history changes, including using forward and back buttons.
         @private
      @method onUpdateURL
      @param callback {Function}
    */
    onUpdateURL(callback) {
      this._removeEventListener();
      this._popstateHandler = () => {
        // Ignore initial page load popstate event in Chrome
        if (!popstateFired) {
          popstateFired = true;
          if (this.getURL() === this._previousURL) {
            return;
          }
        }
        callback(this.getURL());
      };
      window.addEventListener('popstate', this._popstateHandler);
    }
    /**
      Used when using `{{action}}` helper.  The url is always appended to the rootURL.
         @private
      @method formatURL
      @param url {String}
      @return formatted url {String}
    */
    formatURL(url) {
      var {
        rootURL,
        baseURL
      } = this;
      if (url !== '') {
        // remove trailing slashes if they exists
        rootURL = rootURL.replace(/\/$/, '');
        baseURL = baseURL.replace(/\/$/, '');
      } else if (baseURL[0] === '/' && rootURL[0] === '/') {
        // if baseURL and rootURL both start with a slash
        // ... remove trailing slash from baseURL if it exists
        baseURL = baseURL.replace(/\/$/, '');
      }
      return baseURL + rootURL + url;
    }
    /**
      Cleans up the HistoryLocation event listener.
         @private
      @method willDestroy
    */
    willDestroy() {
      this._removeEventListener();
    }
    _removeEventListener() {
      if (this._popstateHandler) {
        window.removeEventListener('popstate', this._popstateHandler);
      }
    }
  }
  _exports.default = HistoryLocation;
});
define("@ember/routing/index", ["exports", "@ember/-internals/glimmer"], function (_exports, _glimmer) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "LinkTo", {
    enumerable: true,
    get: function () {
      return _glimmer.LinkTo;
    }
  });
});
define("@ember/routing/lib/cache", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
    A two-tiered cache with support for fallback values when doing lookups.
    Uses "buckets" and then "keys" to cache values.
  
    @private
    @class BucketCache
  */
  class BucketCache {
    constructor() {
      this.cache = new Map();
    }
    has(bucketKey) {
      return this.cache.has(bucketKey);
    }
    stash(bucketKey, key, value) {
      var bucket = this.cache.get(bucketKey);
      if (bucket === undefined) {
        bucket = new Map();
        this.cache.set(bucketKey, bucket);
      }
      bucket.set(key, value);
    }
    lookup(bucketKey, prop, defaultValue) {
      if (!this.has(bucketKey)) {
        return defaultValue;
      }
      var bucket = this.cache.get(bucketKey);
      if (bucket.has(prop)) {
        return bucket.get(prop);
      } else {
        return defaultValue;
      }
    }
  }
  _exports.default = BucketCache;
});
define("@ember/routing/lib/controller_for", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = controllerFor;
  /**
    @module ember/routing
  */
  /**
    Finds a controller instance.
  
    @for Ember
    @method controllerFor
    @private
  */
  function controllerFor(container, controllerName, lookupOptions) {
    return container.lookup(`controller:${controllerName}`, lookupOptions);
  }
});
define("@ember/routing/lib/dsl", ["exports", "@ember/debug"], function (_exports, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var uuid = 0;
  function isCallback(value) {
    return typeof value === 'function';
  }
  function isOptions(value) {
    return value !== null && typeof value === 'object';
  }
  class DSLImpl {
    constructor(name, options) {
      if (name === void 0) {
        name = null;
      }
      this.explicitIndex = false;
      this.parent = name;
      this.enableLoadingSubstates = Boolean(options && options.enableLoadingSubstates);
      this.matches = [];
      this.options = options;
    }
    route(name, _options, _callback) {
      var options;
      var callback = null;
      var dummyErrorRoute = `/_unused_dummy_error_path_route_${name}/:error`;
      if (isCallback(_options)) {
        (true && !(arguments.length === 2) && (0, _debug.assert)('Unexpected arguments', arguments.length === 2));
        options = {};
        callback = _options;
      } else if (isCallback(_callback)) {
        (true && !(arguments.length === 3) && (0, _debug.assert)('Unexpected arguments', arguments.length === 3));
        (true && !(isOptions(_options)) && (0, _debug.assert)('Unexpected arguments', isOptions(_options)));
        options = _options;
        callback = _callback;
      } else {
        options = _options || {};
      }
      (true && !((() => {
        if (options.overrideNameAssertion === true) {
          return true;
        }
        return ['basic', 'application'].indexOf(name) === -1;
      })()) && (0, _debug.assert)(`'${name}' cannot be used as a route name.`, (() => {
        if (options.overrideNameAssertion === true) {
          return true;
        }
        return ['basic', 'application'].indexOf(name) === -1;
      })()));
      (true && !(name.indexOf(':') === -1) && (0, _debug.assert)(`'${name}' is not a valid route name. It cannot contain a ':'. You may want to use the 'path' option instead.`, name.indexOf(':') === -1));
      if (this.enableLoadingSubstates) {
        createRoute(this, `${name}_loading`, {
          resetNamespace: options.resetNamespace
        });
        createRoute(this, `${name}_error`, {
          resetNamespace: options.resetNamespace,
          path: dummyErrorRoute
        });
      }
      if (callback) {
        var fullName = getFullName(this, name, options.resetNamespace);
        var dsl = new DSLImpl(fullName, this.options);
        createRoute(dsl, 'loading');
        createRoute(dsl, 'error', {
          path: dummyErrorRoute
        });
        callback.call(dsl);
        createRoute(this, name, options, dsl.generate());
      } else {
        createRoute(this, name, options);
      }
    }
    push(url, name, callback, serialize) {
      var parts = name.split('.');
      if (this.options.engineInfo) {
        var localFullName = name.slice(this.options.engineInfo.fullName.length + 1);
        var routeInfo = Object.assign({
          localFullName
        }, this.options.engineInfo);
        if (serialize) {
          routeInfo.serializeMethod = serialize;
        }
        this.options.addRouteForEngine(name, routeInfo);
      } else if (serialize) {
        throw new Error(`Defining a route serializer on route '${name}' outside an Engine is not allowed.`);
      }
      if (url === '' || url === '/' || parts[parts.length - 1] === 'index') {
        this.explicitIndex = true;
      }
      this.matches.push(url, name, callback);
    }
    generate() {
      var dslMatches = this.matches;
      if (!this.explicitIndex) {
        this.route('index', {
          path: '/'
        });
      }
      return match => {
        for (var i = 0; i < dslMatches.length; i += 3) {
          match(dslMatches[i]).to(dslMatches[i + 1], dslMatches[i + 2]);
        }
      };
    }
    mount(_name, options) {
      if (options === void 0) {
        options = {};
      }
      var engineRouteMap = this.options.resolveRouteMap(_name);
      var name = _name;
      if (options.as) {
        name = options.as;
      }
      var fullName = getFullName(this, name, options.resetNamespace);
      var engineInfo = {
        name: _name,
        instanceId: uuid++,
        mountPoint: fullName,
        fullName
      };
      var path = options.path;
      if (typeof path !== 'string') {
        path = `/${name}`;
      }
      var callback;
      var dummyErrorRoute = `/_unused_dummy_error_path_route_${name}/:error`;
      if (engineRouteMap) {
        var shouldResetEngineInfo = false;
        var oldEngineInfo = this.options.engineInfo;
        if (oldEngineInfo) {
          shouldResetEngineInfo = true;
          this.options.engineInfo = engineInfo;
        }
        var optionsForChild = Object.assign({
          engineInfo
        }, this.options);
        var childDSL = new DSLImpl(fullName, optionsForChild);
        createRoute(childDSL, 'loading');
        createRoute(childDSL, 'error', {
          path: dummyErrorRoute
        });
        engineRouteMap.class.call(childDSL);
        callback = childDSL.generate();
        if (shouldResetEngineInfo) {
          this.options.engineInfo = oldEngineInfo;
        }
      }
      var localFullName = 'application';
      var routeInfo = Object.assign({
        localFullName
      }, engineInfo);
      if (this.enableLoadingSubstates) {
        // These values are important to register the loading routes under their
        // proper names for the Router and within the Engine's registry.
        var substateName = `${name}_loading`;
        var _localFullName = `application_loading`;
        var _routeInfo = Object.assign({
          localFullName: _localFullName
        }, engineInfo);
        createRoute(this, substateName, {
          resetNamespace: options.resetNamespace
        });
        this.options.addRouteForEngine(substateName, _routeInfo);
        substateName = `${name}_error`;
        _localFullName = `application_error`;
        _routeInfo = Object.assign({
          localFullName: _localFullName
        }, engineInfo);
        createRoute(this, substateName, {
          resetNamespace: options.resetNamespace,
          path: dummyErrorRoute
        });
        this.options.addRouteForEngine(substateName, _routeInfo);
      }
      this.options.addRouteForEngine(fullName, routeInfo);
      this.push(path, fullName, callback);
    }
  }
  _exports.default = DSLImpl;
  function canNest(dsl) {
    return dsl.parent !== 'application';
  }
  function getFullName(dsl, name, resetNamespace) {
    if (canNest(dsl) && resetNamespace !== true) {
      return `${dsl.parent}.${name}`;
    } else {
      return name;
    }
  }
  function createRoute(dsl, name, options, callback) {
    if (options === void 0) {
      options = {};
    }
    var fullName = getFullName(dsl, name, options.resetNamespace);
    if (typeof options.path !== 'string') {
      options.path = `/${name}`;
    }
    dsl.push(options.path, fullName, callback, options.serialize);
  }
});
define("@ember/routing/lib/engines", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
});
define("@ember/routing/lib/generate_controller", ["exports", "@ember/-internals/metal", "@ember/controller", "@ember/debug"], function (_exports, _metal, _controller, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = generateController;
  _exports.generateControllerFactory = generateControllerFactory;
  /**
   @module ember/routing
  */
  /**
    Generates a controller factory
  
    @for Ember
    @method generateControllerFactory
    @private
  */
  function generateControllerFactory(owner, controllerName) {
    var factoryManager = owner.factoryFor('controller:basic');
    (true && !(factoryManager !== undefined) && (0, _debug.assert)('[BUG] unexpectedly missing a factoryManager for `controller:basic`', factoryManager !== undefined)); // SAFETY: This is *not* safe, and the cast should be removed in favor of the
    // `assert()` below after altering *tests*. It is left in this state for the
    // moment in the interest of keeping type-only changes separate from changes
    // to the runtime behavior of the system, even for tests.
    var Factory = factoryManager.class;
    // assert(
    //   '[BUG] factory for `controller:main` is unexpectedly not a Controller',
    //   ((factory): factory is typeof Controller => factory === Controller)(Factory)
    // );
    Factory = Factory.extend({
      toString() {
        return `(generated ${controllerName} controller)`;
      }
    });
    var fullName = `controller:${controllerName}`;
    owner.register(fullName, Factory);
    return owner.factoryFor(fullName);
  }
  /**
    Generates and instantiates a controller extending from `controller:basic`
    if present, or `Controller` if not.
  
    @for Ember
    @method generateController
    @private
    @since 1.3.0
  */
  function generateController(owner, controllerName) {
    generateControllerFactory(owner, controllerName);
    var fullName = `controller:${controllerName}`;
    var instance = owner.lookup(fullName);
    (true && !(instance instanceof _controller.default) && (0, _debug.assert)('Expected an instance of controller', instance instanceof _controller.default));
    if (true /* DEBUG */) {
      if ((0, _metal.get)(instance, 'namespace.LOG_ACTIVE_GENERATION')) {
        (0, _debug.info)(`generated -> ${fullName}`, {
          fullName
        });
      }
    }
    return instance;
  }
});
define("@ember/routing/lib/location-utils", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.getFullPath = getFullPath;
  _exports.getHash = getHash;
  _exports.getOrigin = getOrigin;
  _exports.getPath = getPath;
  _exports.getQuery = getQuery;
  _exports.replacePath = replacePath;
  _exports.supportsHashChange = supportsHashChange;
  _exports.supportsHistory = supportsHistory;
  /**
    @private
  
    Returns the current `location.pathname`, normalized for IE inconsistencies.
  */
  function getPath(location) {
    var pathname = location.pathname;
    // Various versions of IE/Opera don't always return a leading slash
    if (pathname[0] !== '/') {
      pathname = `/${pathname}`;
    }
    return pathname;
  }
  /**
    @private
  
    Returns the current `location.search`.
  */
  function getQuery(location) {
    return location.search;
  }
  /**
    @private
  
    Returns the hash or empty string
  */
  function getHash(location) {
    if (location.hash !== undefined) {
      return location.hash.substring(0);
    }
    return '';
  }
  function getFullPath(location) {
    return getPath(location) + getQuery(location) + getHash(location);
  }
  function getOrigin(location) {
    var origin = location.origin;
    // Older browsers, especially IE, don't have origin
    if (!origin) {
      origin = `${location.protocol}//${location.hostname}`;
      if (location.port) {
        origin += `:${location.port}`;
      }
    }
    return origin;
  }
  /*
    `documentMode` only exist in Internet Explorer, and it's tested because IE8 running in
    IE7 compatibility mode claims to support `onhashchange` but actually does not.
  
    `global` is an object that may have an `onhashchange` property.
  
    @private
    @function supportsHashChange
  */
  function supportsHashChange(documentMode, global) {
    return Boolean(global && 'onhashchange' in global && (documentMode === undefined || documentMode > 7));
  }
  /*
    `userAgent` is a user agent string. We use user agent testing here, because
    the stock Android browser is known to have buggy versions of the History API,
    in some Android versions.
  
    @private
    @function supportsHistory
  */
  function supportsHistory(userAgent, history) {
    // Boosted from Modernizr: https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
    // The stock browser on Android 2.2 & 2.3, and 4.0.x returns positive on history support
    // Unfortunately support is really buggy and there is no clean way to detect
    // these bugs, so we fall back to a user agent sniff :(
    // We only want Android 2 and 4.0, stock browser, and not Chrome which identifies
    // itself as 'Mobile Safari' as well, nor Windows Phone.
    if ((userAgent.indexOf('Android 2.') !== -1 || userAgent.indexOf('Android 4.0') !== -1) && userAgent.indexOf('Mobile Safari') !== -1 && userAgent.indexOf('Chrome') === -1 && userAgent.indexOf('Windows Phone') === -1) {
      return false;
    }
    return Boolean(history && 'pushState' in history);
  }
  /**
    Replaces the current location, making sure we explicitly include the origin
    to prevent redirecting to a different origin.
  
    @private
  */
  function replacePath(location, path) {
    location.replace(getOrigin(location) + path);
  }
});
define("@ember/routing/lib/query_params", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  class QueryParams {
    constructor(values) {
      if (values === void 0) {
        values = null;
      }
      this.isQueryParams = true;
      this.values = values;
    }
  }
  _exports.default = QueryParams;
});
define("@ember/routing/lib/route-info", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
});
define("@ember/routing/lib/router_state", ["exports", "@ember/routing/lib/utils"], function (_exports, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  class RouterState {
    constructor(emberRouter, router, routerJsState) {
      this.emberRouter = emberRouter;
      this.router = router;
      this.routerJsState = routerJsState;
    }
    isActiveIntent(routeName, models, queryParams) {
      var state = this.routerJsState;
      if (!this.router.isActiveIntent(routeName, models, undefined, state)) {
        return false;
      }
      if (queryParams !== undefined && Object.keys(queryParams).length > 0) {
        var visibleQueryParams = Object.assign({}, queryParams);
        this.emberRouter._prepareQueryParams(routeName, models, visibleQueryParams);
        return (0, _utils.shallowEqual)(visibleQueryParams, state.queryParams);
      }
      return true;
    }
  }
  _exports.default = RouterState;
});
define("@ember/routing/lib/routing-service", ["exports", "@ember/-internals/owner", "@ember/debug", "@ember/object/computed", "@ember/service", "@ember/routing/router", "@ember/routing/router-service"], function (_exports, _owner, _debug, _computed, _service, _router2, _routerService) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module ember
  */

  /**
    The Routing service is used by LinkTo, and provides facilities for
    the component/view layer to interact with the router.
  
    This is a private service for internal usage only. For public usage,
    refer to the `Router` service.
  
    @private
    @class RoutingService
  */
  class RoutingService extends _service.default {
    get router() {
      var router = this[_routerService.ROUTER];
      if (router !== undefined) {
        return router;
      }
      var owner = (0, _owner.getOwner)(this);
      (true && !(owner) && (0, _debug.assert)('RoutingService is unexpectedly missing an owner', owner));
      var _router = owner.lookup('router:main');
      (true && !(_router instanceof _router2.default) && (0, _debug.assert)('ROUTING SERVICE BUG: Expected router to be an instance of EmberRouter', _router instanceof _router2.default));
      _router.setupRouter();
      return this[_routerService.ROUTER] = _router;
    }
    hasRoute(routeName) {
      return this.router.hasRoute(routeName);
    }
    transitionTo(routeName, models, queryParams, shouldReplace) {
      var transition = this.router._doTransition(routeName, models, queryParams);
      if (shouldReplace) {
        transition.method('replace');
      }
      return transition;
    }
    normalizeQueryParams(routeName, models, queryParams) {
      this.router._prepareQueryParams(routeName, models, queryParams);
    }
    _generateURL(routeName, models, queryParams) {
      var visibleQueryParams = {};
      if (queryParams) {
        Object.assign(visibleQueryParams, queryParams);
        this.normalizeQueryParams(routeName, models, visibleQueryParams);
      }
      return this.router.generate(routeName, ...models, {
        queryParams: visibleQueryParams
      });
    }
    generateURL(routeName, models, queryParams) {
      if (this.router._initialTransitionStarted) {
        return this._generateURL(routeName, models, queryParams);
      } else {
        // Swallow error when transition has not started.
        // When rendering in tests without visit(), we cannot infer the route context which <LinkTo/> needs be aware of
        try {
          return this._generateURL(routeName, models, queryParams);
        } catch (_e) {
          return;
        }
      }
    }
    isActiveForRoute(contexts, queryParams, routeName, routerState) {
      var handlers = this.router._routerMicrolib.recognizer.handlersFor(routeName);
      var leafName = handlers[handlers.length - 1].handler;
      var maximumContexts = numberOfContextsAcceptedByHandler(routeName, handlers);
      // NOTE: any ugliness in the calculation of activeness is largely
      // due to the fact that we support automatic normalizing of
      // `resource` -> `resource.index`, even though there might be
      // dynamic segments / query params defined on `resource.index`
      // which complicates (and makes somewhat ambiguous) the calculation
      // of activeness for links that link to `resource` instead of
      // directly to `resource.index`.
      // if we don't have enough contexts revert back to full route name
      // this is because the leaf route will use one of the contexts
      if (contexts.length > maximumContexts) {
        routeName = leafName;
      }
      return routerState.isActiveIntent(routeName, contexts, queryParams);
    }
  }
  _exports.default = RoutingService;
  RoutingService.reopen({
    targetState: (0, _computed.readOnly)('router.targetState'),
    currentState: (0, _computed.readOnly)('router.currentState'),
    currentRouteName: (0, _computed.readOnly)('router.currentRouteName'),
    currentPath: (0, _computed.readOnly)('router.currentPath')
  });
  function numberOfContextsAcceptedByHandler(handlerName, handlerInfos) {
    var req = 0;
    for (var i = 0; i < handlerInfos.length; i++) {
      req += handlerInfos[i].names.length;
      if (handlerInfos[i].handler === handlerName) {
        break;
      }
    }
    return req;
  }
});
define("@ember/routing/lib/utils", ["exports", "@ember/-internals/metal", "@ember/-internals/owner", "@ember/debug", "@ember/engine/instance", "router_js"], function (_exports, _metal, _owner, _debug, _instance, _router_js) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.calculateCacheKey = calculateCacheKey;
  _exports.deprecateTransitionMethods = deprecateTransitionMethods;
  _exports.extractRouteArgs = extractRouteArgs;
  _exports.getActiveTargetName = getActiveTargetName;
  _exports.normalizeControllerQueryParams = normalizeControllerQueryParams;
  _exports.prefixRouteNameArg = prefixRouteNameArg;
  _exports.resemblesURL = resemblesURL;
  _exports.shallowEqual = shallowEqual;
  _exports.stashParamNames = stashParamNames;
  var ALL_PERIODS_REGEX = /\./g;
  function extractRouteArgs(args) {
    // SAFETY: This should just be the same thing
    args = args.slice();
    var possibleOptions = args[args.length - 1];
    var queryParams;
    if (isRouteOptions(possibleOptions)) {
      args.pop(); // Remove options
      queryParams = possibleOptions.queryParams;
    } else {
      queryParams = {};
    }
    var routeName;
    if (typeof args[0] === 'string') {
      routeName = args.shift();
      // We just checked this!
      (true && !(typeof routeName === 'string') && (0, _debug.assert)('routeName is a string', typeof routeName === 'string'));
    }
    // SAFTEY: We removed the name and options if they existed, only models left.
    var models = args;
    return {
      routeName,
      models,
      queryParams
    };
  }
  function getActiveTargetName(router) {
    var routeInfos = router.activeTransition ? router.activeTransition[_router_js.STATE_SYMBOL].routeInfos : router.state.routeInfos;
    var lastRouteInfo = routeInfos[routeInfos.length - 1];
    (true && !(lastRouteInfo) && (0, _debug.assert)('has last route info', lastRouteInfo));
    return lastRouteInfo.name;
  }
  function stashParamNames(router, routeInfos) {
    if (routeInfos['_namesStashed']) {
      return;
    }
    // This helper exists because router.js/route-recognizer.js awkwardly
    // keeps separate a routeInfo's list of parameter names depending
    // on whether a URL transition or named transition is happening.
    // Hopefully we can remove this in the future.
    var routeInfo = routeInfos[routeInfos.length - 1];
    (true && !(routeInfo) && (0, _debug.assert)('has route info', routeInfo));
    var targetRouteName = routeInfo.name;
    var recogHandlers = router._routerMicrolib.recognizer.handlersFor(targetRouteName);
    var dynamicParent;
    for (var i = 0; i < routeInfos.length; ++i) {
      var _routeInfo = routeInfos[i];
      (true && !(_routeInfo) && (0, _debug.assert)('has route info', _routeInfo));
      var names = recogHandlers[i].names;
      if (names.length) {
        dynamicParent = _routeInfo;
      }
      _routeInfo['_names'] = names;
      var route = _routeInfo.route;
      // SAFETY: This cast should be idential. I don't understand why it is needed.
      route._stashNames(_routeInfo, dynamicParent);
    }
    routeInfos['_namesStashed'] = true;
  }
  function _calculateCacheValuePrefix(prefix, part) {
    // calculates the dot separated sections from prefix that are also
    // at the start of part - which gives us the route name
    // given : prefix = site.article.comments, part = site.article.id
    //      - returns: site.article (use get(values[site.article], 'id') to get the dynamic part - used below)
    // given : prefix = site.article, part = site.article.id
    //      - returns: site.article. (use get(values[site.article], 'id') to get the dynamic part - used below)
    var prefixParts = prefix.split('.');
    var currPrefix = '';
    for (var i = 0; i < prefixParts.length; i++) {
      var currPart = prefixParts.slice(0, i + 1).join('.');
      if (part.indexOf(currPart) !== 0) {
        break;
      }
      currPrefix = currPart;
    }
    return currPrefix;
  }
  /*
    Stolen from Controller
  */
  function calculateCacheKey(prefix, parts, values) {
    if (parts === void 0) {
      parts = [];
    }
    var suffixes = '';
    for (var part of parts) {
      var cacheValuePrefix = _calculateCacheValuePrefix(prefix, part);
      var value = void 0;
      if (values) {
        if (cacheValuePrefix && cacheValuePrefix in values) {
          var partRemovedPrefix = part.indexOf(cacheValuePrefix) === 0 ? part.substring(cacheValuePrefix.length + 1) : part;
          value = (0, _metal.get)(values[cacheValuePrefix], partRemovedPrefix);
        } else {
          value = (0, _metal.get)(values, part);
        }
      }
      suffixes += `::${part}:${value}`;
    }
    return prefix + suffixes.replace(ALL_PERIODS_REGEX, '-');
  }
  /*
    Controller-defined query parameters can come in three shapes:
  
    Array
      queryParams: ['foo', 'bar']
    Array of simple objects where value is an alias
      queryParams: [
        {
          'foo': 'rename_foo_to_this'
        },
        {
          'bar': 'call_bar_this_instead'
        }
      ]
    Array of fully defined objects
      queryParams: [
        {
          'foo': {
            as: 'rename_foo_to_this'
          },
        }
        {
          'bar': {
            as: 'call_bar_this_instead',
            scope: 'controller'
          }
        }
      ]
  
    This helper normalizes all three possible styles into the
    'Array of fully defined objects' style.
  */
  function normalizeControllerQueryParams(queryParams) {
    var qpMap = {};
    for (var queryParam of queryParams) {
      accumulateQueryParamDescriptors(queryParam, qpMap);
    }
    return qpMap;
  }
  function accumulateQueryParamDescriptors(_desc, accum) {
    var desc = typeof _desc === 'string' ? {
      [_desc]: {
        as: null
      }
    } : _desc;
    for (var key in desc) {
      if (!Object.prototype.hasOwnProperty.call(desc, key)) {
        return;
      }
      var _singleDesc = desc[key];
      var singleDesc = typeof _singleDesc === 'string' ? {
        as: _singleDesc
      } : _singleDesc;
      var partialVal = accum[key] || {
        as: null,
        scope: 'model'
      };
      var val = Object.assign(Object.assign({}, partialVal), singleDesc);
      accum[key] = val;
    }
  }
  /*
    Check if a routeName resembles a url instead
  
    @private
  */
  function resemblesURL(str) {
    return typeof str === 'string' && (str === '' || str[0] === '/');
  }
  /*
    Returns an arguments array where the route name arg is prefixed based on the mount point
  
    @private
  */
  function prefixRouteNameArg(route, args) {
    var routeName;
    var owner = (0, _owner.getOwner)(route);
    (true && !(owner instanceof _instance.default) && (0, _debug.assert)('Expected route to have EngineInstance as owner', owner instanceof _instance.default));
    var prefix = owner.mountPoint;
    // only alter the routeName if it's actually referencing a route.
    if (owner.routable && typeof args[0] === 'string') {
      routeName = args[0];
      if (resemblesURL(routeName)) {
        throw new Error('Programmatic transitions by URL cannot be used within an Engine. Please use the route name instead.');
      } else {
        routeName = `${prefix}.${routeName}`;
        args[0] = routeName;
      }
    }
    return args;
  }
  function shallowEqual(a, b) {
    var aCount = 0;
    var bCount = 0;
    for (var kA in a) {
      if (Object.prototype.hasOwnProperty.call(a, kA)) {
        if (a[kA] !== b[kA]) {
          return false;
        }
        aCount++;
      }
    }
    for (var kB in b) {
      if (Object.prototype.hasOwnProperty.call(b, kB)) {
        bCount++;
      }
    }
    return aCount === bCount;
  }
  function deprecateTransitionMethods(frameworkClass, methodName) {
    (true && !(false) && (0, _debug.deprecate)(`Calling ${methodName} on a ${frameworkClass} is deprecated. Use the RouterService instead.`, false, {
      id: 'routing.transition-methods',
      for: 'ember-source',
      since: {
        available: '3.26.0',
        enabled: '3.26.0'
      },
      until: '5.0.0',
      url: 'https://deprecations.emberjs.com/v3.x/#toc_routing-transition-methods'
    }));
  }
  function isRouteOptions(value) {
    if (value && typeof value === 'object') {
      var qps = value.queryParams;
      if (qps && typeof qps === 'object') {
        return Object.keys(qps).every(k => typeof k === 'string');
      }
    }
    return false;
  }
});
define("@ember/routing/location", ["exports", "@ember/debug"], function (_exports, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module @ember/routing/location
  */
  /**
    Location returns an instance of the correct implementation of
    the `location` API.
  
    ## Implementations
  
    You can pass an implementation name (`hash`, `history`, `none`, `auto`) to force a
    particular implementation to be used in your application.
  
    See [HashLocation](/ember/release/classes/HashLocation).
    See [HistoryLocation](/ember/release/classes/HistoryLocation).
    See [NoneLocation](/ember/release/classes/NoneLocation).
    See [AutoLocation](/ember/release/classes/AutoLocation).
  
    ## Location API
  
    Each location implementation must provide the following methods:
  
    * implementation: returns the string name used to reference the implementation.
    * getURL: returns the current URL.
    * setURL(path): sets the current URL.
    * replaceURL(path): replace the current URL (optional).
    * onUpdateURL(callback): triggers the callback when the URL changes.
    * formatURL(url): formats `url` to be placed into `href` attribute.
    * detect() (optional): instructs the location to do any feature detection
        necessary. If the location needs to redirect to a different URL, it
        can cancel routing by setting the `cancelRouterSetup` property on itself
        to `false`.
  
    Calling setURL or replaceURL will not trigger onUpdateURL callbacks.
  
    ## Custom implementation
  
    Ember scans `app/locations/*` for extending the Location API.
  
    Example:
  
    ```javascript
    import HistoryLocation from '@ember/routing/history-location';
  
    export default class MyHistory {
      implementation = 'my-custom-history';
  
      constructor() {
        this._history = HistoryLocation.create(...arguments);
      }
  
      create() {
        return new this(...arguments);
      }
  
      pushState(path) {
         this._history.pushState(path);
      }
    }
    ```
  
    @class Location
    @private
  */
  var _default = {
    /**
     This is deprecated in favor of using the container to lookup the location
     implementation as desired.
        For example:
        ```javascript
     // Given a location registered as follows:
     container.register('location:history-test', HistoryTestLocation);
        // You could create a new instance via:
     container.lookup('location:history-test');
     ```
         @method create
      @param {Object} options
      @return {Object} an instance of an implementation of the `location` API
      @deprecated Use the container to lookup the location implementation that you
      need.
      @private
    */
    create(options) {
      var implementation = options === null || options === void 0 ? void 0 : options.implementation;
      (true && !(implementation) && (0, _debug.assert)("Location.create: you must specify a 'implementation' option", implementation));
      var implementationClass = this.implementations[implementation];
      (true && !(implementationClass) && (0, _debug.assert)(`Location.create: ${implementation} is not a valid implementation`, implementationClass));
      (true && !(false) && (0, _debug.deprecate)("Calling `create` on Location class is deprecated. Instead, use `container.lookup('location:my-location')` to lookup the location you need.", false, {
        id: 'deprecate-auto-location',
        until: '5.0.0',
        url: 'https://emberjs.com/deprecations/v4.x#toc_deprecate-auto-location',
        for: 'ember-source',
        since: {
          available: '4.1.0',
          enabled: '4.1.0'
        }
      }));
      return implementationClass.create(...arguments);
    },
    implementations: {}
  };
  _exports.default = _default;
});
define("@ember/routing/none-location", ["exports", "@ember/object", "@ember/debug"], function (_exports, _object, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module @ember/routing/none-location
  */
  /**
    NoneLocation does not interact with the browser. It is useful for
    testing, or when you need to manage state with your Router, but temporarily
    don't want it to muck with the URL (for example when you embed your
    application in a larger page).
  
    Using `NoneLocation` causes Ember to not store the applications URL state
    in the actual URL. This is generally used for testing purposes, and is one
    of the changes made when calling `App.setupForTesting()`.
  
    @class NoneLocation
    @extends EmberObject
    @protected
  */
  class NoneLocation extends _object.default {
    constructor() {
      super(...arguments);
      this.implementation = 'none';
    }
    initState() {
      this._super(...arguments);
      var {
        rootURL
      } = this;
      // This assert doesn't have anything to do with state initialization,
      // but we're hijacking this method since it's called after the route has
      // set the rootURL property on its Location instance.
      (true && !(rootURL.charAt(rootURL.length - 1) === '/') && (0, _debug.assert)('rootURL must end with a trailing forward slash e.g. "/app/"', rootURL.charAt(rootURL.length - 1) === '/'));
    }
    /**
      Returns the current path without `rootURL`.
         @private
      @method getURL
      @return {String} path
    */
    getURL() {
      var {
        path,
        rootURL
      } = this;
      // remove trailing slashes if they exists
      rootURL = rootURL.replace(/\/$/, '');
      // remove rootURL from url
      return path.replace(new RegExp(`^${rootURL}(?=/|$)`), '');
    }
    /**
      Set the path and remembers what was set. Using this method
      to change the path will not invoke the `updateURL` callback.
         @private
      @method setURL
      @param path {String}
    */
    setURL(path) {
      (0, _object.set)(this, 'path', path);
    }
    /**
      Register a callback to be invoked when the path changes. These
      callbacks will execute when the user presses the back or forward
      button, but not after `setURL` is invoked.
         @private
      @method onUpdateURL
      @param callback {Function}
    */
    onUpdateURL(callback) {
      this.updateCallback = callback;
    }
    /**
      Sets the path and calls the `updateURL` callback.
         @private
      @method handleURL
      @param url {String}
    */
    handleURL(url) {
      (0, _object.set)(this, 'path', url);
      this.updateCallback(url);
    }
    /**
      Given a URL, formats it to be placed into the page as part
      of an element's `href` attribute.
         This is used, for example, when using the {{action}} helper
      to generate a URL based on an event.
         @private
      @method formatURL
      @param url {String}
      @return {String} url
    */
    formatURL(url) {
      var {
        rootURL
      } = this;
      if (url !== '') {
        // remove trailing slashes if they exists
        rootURL = rootURL.replace(/\/$/, '');
      }
      return rootURL + url;
    }
  }
  _exports.default = NoneLocation;
  NoneLocation.reopen({
    path: '',
    rootURL: '/'
  });
});
define("@ember/routing/route-info", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
});
define("@ember/routing/route", ["exports", "@ember/-internals/container", "@ember/-internals/metal", "@ember/-internals/owner", "@ember/routing/-internals", "@ember/object", "@ember/object/evented", "@ember/array", "@ember/-internals/runtime", "@ember/utils", "@ember/-internals/utils", "@ember/controller", "@ember/debug", "@ember/engine/instance", "@ember/object/compat", "@ember/runloop", "router_js", "@ember/routing/router", "@ember/routing/lib/utils"], function (_exports, _container, _metal, _owner, _internals, _object, _evented, _array, _runtime, _utils, _utils2, _controller2, _debug, _instance, _compat, _runloop, _router_js, _router, _utils3) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.defaultSerialize = _exports.default = _exports.ROUTE_CONNECTIONS = void 0;
  _exports.getFullQueryParams = getFullQueryParams;
  _exports.hasDefaultSerialize = hasDefaultSerialize;
  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
      if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var ROUTE_CONNECTIONS = new WeakMap();
  _exports.ROUTE_CONNECTIONS = ROUTE_CONNECTIONS;
  var RENDER = Symbol('render');
  class Route extends _object.default.extend(_runtime.ActionHandler, _evented.default) {
    constructor(owner) {
      super(owner);
      this.context = {};
      if (owner) {
        var router = owner.lookup('router:main');
        var bucketCache = owner.lookup((0, _container.privatize)`-bucket-cache:main`);
        (true && !(router instanceof _router.default && bucketCache instanceof _internals.BucketCache) && (0, _debug.assert)('ROUTER BUG: Expected route injections to be defined on the route. This is an internal bug, please open an issue on Github if you see this message!', router instanceof _router.default && bucketCache instanceof _internals.BucketCache));
        this._router = router;
        this._bucketCache = bucketCache;
        this._topLevelViewTemplate = owner.lookup('template:-outlet');
        this._environment = owner.lookup('-environment:main');
      }
    }
    /**
      A hook you can implement to convert the route's model into parameters
      for the URL.
         ```app/router.js
      // ...
         Router.map(function() {
        this.route('post', { path: '/posts/:post_id' });
      });
         ```
         ```app/routes/post.js
      import Route from '@ember/routing/route';
         export default class PostRoute extends Route {
        model({ post_id }) {
          // the server returns `{ id: 12 }`
          return fetch(`/posts/${post_id}`;
        }
           serialize(model) {
          // this will make the URL `/posts/12`
          return { post_id: model.id };
        }
      }
      ```
         The default `serialize` method will insert the model's `id` into the
      route's dynamic segment (in this case, `:post_id`) if the segment contains '_id'.
      If the route has multiple dynamic segments or does not contain '_id', `serialize`
      will return `getProperties(model, params)`
         This method is called when `transitionTo` is called with a context
      in order to populate the URL.
         @method serialize
      @param {Object} model the routes model
      @param {Array} params an Array of parameter names for the current
        route (in the example, `['post_id']`.
      @return {Object} the serialized parameters
      @since 1.0.0
      @public
    */
    serialize(model, params) {
      if (params.length < 1 || !model) {
        return;
      }
      var object = {};
      if (params.length === 1) {
        var [name] = params;
        (true && !(name) && (0, _debug.assert)('has name', name));
        if (typeof model === 'object' && name in model) {
          object[name] = (0, _object.get)(model, name);
        } else if (/_id$/.test(name)) {
          object[name] = (0, _object.get)(model, 'id');
        } else if ((0, _utils2.isProxy)(model)) {
          object[name] = (0, _object.get)(model, name);
        }
      } else {
        object = (0, _object.getProperties)(model, params);
      }
      return object;
    }
    /**
      Sets the name for this route, including a fully resolved name for routes
      inside engines.
         @private
      @method _setRouteName
      @param {String} name
    */
    _setRouteName(name) {
      this.routeName = name;
      var owner = (0, _owner.getOwner)(this);
      (true && !(owner instanceof _instance.default) && (0, _debug.assert)('Expected route to have EngineInstance as owner', owner instanceof _instance.default));
      this.fullRouteName = getEngineRouteName(owner, name);
    }
    /**
      @private
         @method _stashNames
    */
    _stashNames(routeInfo, dynamicParent) {
      if (this._names) {
        return;
      }
      var names = this._names = routeInfo['_names'];
      if (!names.length) {
        routeInfo = dynamicParent;
        names = routeInfo && routeInfo['_names'] || [];
      }
      // SAFETY: Since `_qp` is protected we can't infer the type
      var qps = (0, _object.get)(this, '_qp').qps;
      var namePaths = new Array(names.length);
      for (var a = 0; a < names.length; ++a) {
        namePaths[a] = `${routeInfo.name}.${names[a]}`;
      }
      for (var qp of qps) {
        if (qp.scope === 'model') {
          qp.parts = namePaths;
        }
      }
    }
    /**
      @private
         @property _activeQPChanged
    */
    _activeQPChanged(qp, value) {
      this._router._activeQPChanged(qp.scopedPropertyName, value);
    }
    /**
      @private
      @method _updatingQPChanged
    */
    _updatingQPChanged(qp) {
      this._router._updatingQPChanged(qp.urlKey);
    }
    /**
      Returns a hash containing the parameters of an ancestor route.
         You may notice that `this.paramsFor` sometimes works when referring to a
      child route, but this behavior should not be relied upon as only ancestor
      routes are certain to be loaded in time.
         Example
         ```app/router.js
      // ...
         Router.map(function() {
        this.route('member', { path: ':name' }, function() {
          this.route('interest', { path: ':interest' });
        });
      });
      ```
         ```app/routes/member.js
      import Route from '@ember/routing/route';
         export default class MemberRoute extends Route {
        queryParams = {
          memberQp: { refreshModel: true }
        }
      }
      ```
         ```app/routes/member/interest.js
      import Route from '@ember/routing/route';
         export default class MemberInterestRoute extends Route {
        queryParams = {
          interestQp: { refreshModel: true }
        }
           model() {
          return this.paramsFor('member');
        }
      }
      ```
         If we visit `/turing/maths?memberQp=member&interestQp=interest` the model for
      the `member.interest` route is a hash with:
         * `name`: `turing`
      * `memberQp`: `member`
         @method paramsFor
      @param {String} name
      @return {Object} hash containing the parameters of the route `name`
      @since 1.4.0
      @public
    */
    paramsFor(name) {
      var owner = (0, _owner.getOwner)(this);
      (true && !(owner) && (0, _debug.assert)('Route is unexpectedly missing an owner', owner));
      var route = owner.lookup(`route:${name}`);
      if (route === undefined) {
        return {};
      }
      var transition = this._router._routerMicrolib.activeTransition;
      var state = transition ? transition[_router_js.STATE_SYMBOL] : this._router._routerMicrolib.state;
      var fullName = route.fullRouteName;
      var params = Object.assign({}, state.params[fullName]);
      var queryParams = getQueryParamsFor(route, state);
      return Object.entries(queryParams).reduce((params, _ref) => {
        var [key, value] = _ref;
        (true && !(!params[key]) && (0, _debug.assert)(`The route '${this.routeName}' has both a dynamic segment and query param with name '${key}'. Please rename one to avoid collisions.`, !params[key]));
        params[key] = value;
        return params;
      }, params);
    }
    /**
      Serializes the query parameter key
         @method serializeQueryParamKey
      @param {String} controllerPropertyName
      @private
    */
    serializeQueryParamKey(controllerPropertyName) {
      return controllerPropertyName;
    }
    /**
      Serializes value of the query parameter based on defaultValueType
         @method serializeQueryParam
      @param {Object} value
      @param {String} urlKey
      @param {String} defaultValueType
      @private
    */
    serializeQueryParam(value, _urlKey, defaultValueType) {
      // urlKey isn't used here, but anyone overriding
      // can use it to provide serialization specific
      // to a certain query param.
      return this._router._serializeQueryParam(value, defaultValueType);
    }
    /**
      Deserializes value of the query parameter based on defaultValueType
         @method deserializeQueryParam
      @param {Object} value
      @param {String} urlKey
      @param {String} defaultValueType
      @private
    */
    deserializeQueryParam(value, _urlKey, defaultValueType) {
      // urlKey isn't used here, but anyone overriding
      // can use it to provide deserialization specific
      // to a certain query param.
      return this._router._deserializeQueryParam(value, defaultValueType);
    }
    /**
      @private
         @property _optionsForQueryParam
    */
    _optionsForQueryParam(qp) {
      var queryParams = (0, _object.get)(this, 'queryParams');
      return (0, _object.get)(queryParams, qp.urlKey) || (0, _object.get)(queryParams, qp.prop) || queryParams[qp.urlKey] || queryParams[qp.prop] || {};
    }
    /**
      A hook you can use to reset controller values either when the model
      changes or the route is exiting.
         ```app/routes/articles.js
      import Route from '@ember/routing/route';
         export default class ArticlesRoute extends Route {
        resetController(controller, isExiting, transition) {
          if (isExiting && transition.targetName !== 'error') {
            controller.set('page', 1);
          }
        }
      }
      ```
         @method resetController
      @param {Controller} controller instance
      @param {Boolean} isExiting
      @param {Object} transition
      @since 1.7.0
      @public
    */
    resetController(_controller, _isExiting, _transition) {
      return this;
    }
    /**
      @private
         @method exit
    */
    exit(transition) {
      this.deactivate(transition);
      this.trigger('deactivate', transition);
      this.teardownViews();
    }
    /**
      @private
         @method _internalReset
      @since 3.6.0
    */
    _internalReset(isExiting, transition) {
      var controller = this.controller;
      // SAFETY: Since `_qp` is protected we can't infer the type
      controller['_qpDelegate'] = (0, _object.get)(this, '_qp').states.inactive;
      this.resetController(controller, isExiting, transition);
    }
    /**
      @private
         @method enter
    */
    enter(transition) {
      ROUTE_CONNECTIONS.set(this, []);
      this.activate(transition);
      this.trigger('activate', transition);
    }
    /**
      This event is triggered when the router enters the route. It is
      not executed when the model for the route changes.
         ```app/routes/application.js
      import { on } from '@ember/object/evented';
      import Route from '@ember/routing/route';
         export default Route.extend({
        collectAnalytics: on('activate', function(){
          collectAnalytics();
        })
      });
      ```
         @event activate
      @since 1.9.0
      @public
    */
    /**
      This event is triggered when the router completely exits this
      route. It is not executed when the model for the route changes.
         ```app/routes/index.js
      import { on } from '@ember/object/evented';
      import Route from '@ember/routing/route';
         export default Route.extend({
        trackPageLeaveAnalytics: on('deactivate', function(){
          trackPageLeaveAnalytics();
        })
      });
      ```
         @event deactivate
      @since 1.9.0
      @public
    */
    /**
      This hook is executed when the router completely exits this route. It is
      not executed when the model for the route changes.
         @method deactivate
      @param {Transition} transition
      @since 1.0.0
      @public
    */
    deactivate(_transition) {}
    /**
      This hook is executed when the router enters the route. It is not executed
      when the model for the route changes.
         @method activate
      @param {Transition} transition
      @since 1.0.0
      @public
    */
    activate(_transition) {}
    /**
      Transition the application into another route. The route may
      be either a single route or route path:
         ```javascript
      this.transitionTo('blogPosts');
      this.transitionTo('blogPosts.recentEntries');
      ```
         Optionally supply a model for the route in question. The model
      will be serialized into the URL using the `serialize` hook of
      the route:
         ```javascript
      this.transitionTo('blogPost', aPost);
      ```
         If a literal is passed (such as a number or a string), it will
      be treated as an identifier instead. In this case, the `model`
      hook of the route will be triggered:
         ```javascript
      this.transitionTo('blogPost', 1);
      ```
         Multiple models will be applied last to first recursively up the
      route tree.
         ```app/routes.js
      // ...
         Router.map(function() {
        this.route('blogPost', { path:':blogPostId' }, function() {
          this.route('blogComment', { path: ':blogCommentId' });
        });
      });
         export default Router;
      ```
         ```javascript
      this.transitionTo('blogComment', aPost, aComment);
      this.transitionTo('blogComment', 1, 13);
      ```
         It is also possible to pass a URL (a string that starts with a
      `/`).
         ```javascript
      this.transitionTo('/');
      this.transitionTo('/blog/post/1/comment/13');
      this.transitionTo('/blog/posts?sort=title');
      ```
         An options hash with a `queryParams` property may be provided as
      the final argument to add query parameters to the destination URL.
         ```javascript
      this.transitionTo('blogPost', 1, {
        queryParams: { showComments: 'true' }
      });
         // if you just want to transition the query parameters without changing the route
      this.transitionTo({ queryParams: { sort: 'date' } });
      ```
         See also [replaceWith](#method_replaceWith).
         Simple Transition Example
         ```app/routes.js
      // ...
         Router.map(function() {
        this.route('index');
        this.route('secret');
        this.route('fourOhFour', { path: '*:' });
      });
         export default Router;
      ```
         ```app/routes/index.js
      import Route from '@ember/routing/route';
      import { action } from '@ember/object';
         export default class IndexRoute extends Route {
        @action
        moveToSecret(context) {
          if (authorized()) {
            this.transitionTo('secret', context);
          } else {
            this.transitionTo('fourOhFour');
          }
        }
      }
      ```
         Transition to a nested route
         ```app/router.js
      // ...
         Router.map(function() {
        this.route('articles', { path: '/articles' }, function() {
          this.route('new');
        });
      });
         export default Router;
      ```
         ```app/routes/index.js
      import Route from '@ember/routing/route';
      import { action } from '@ember/object';
         export default class IndexRoute extends Route {
        @action
        transitionToNewArticle() {
          this.transitionTo('articles.new');
        }
      }
      ```
         Multiple Models Example
         ```app/router.js
      // ...
         Router.map(function() {
        this.route('index');
           this.route('breakfast', { path: ':breakfastId' }, function() {
          this.route('cereal', { path: ':cerealId' });
        });
      });
         export default Router;
      ```
         ```app/routes/index.js
      import Route from '@ember/routing/route';
      import { action } from '@ember/object';
         export default class IndexRoute extends Route {
        @action
        moveToChocolateCereal() {
          let cereal = { cerealId: 'ChocolateYumminess' };
          let breakfast = { breakfastId: 'CerealAndMilk' };
             this.transitionTo('breakfast.cereal', breakfast, cereal);
        }
      }
      ```
         Nested Route with Query String Example
         ```app/routes.js
      // ...
         Router.map(function() {
        this.route('fruits', function() {
          this.route('apples');
        });
      });
         export default Router;
      ```
         ```app/routes/index.js
      import Route from '@ember/routing/route';
         export default class IndexRoute extends Route {
        @action
        transitionToApples() {
          this.transitionTo('fruits.apples', { queryParams: { color: 'red' } });
        }
      }
      ```
         @method transitionTo
      @param {String} [name] the name of the route or a URL.
      @param {...Object} [models] the model(s) or identifier(s) to be used while
        transitioning to the route.
      @param {Object} [options] optional hash with a queryParams property
        containing a mapping of query parameters. May be supplied as the only
        parameter to trigger a query-parameter-only transition.
      @return {Transition} the transition object associated with this
        attempted transition
      @since 1.0.0
      @deprecated Use transitionTo from the Router service instead.
      @public
    */
    transitionTo() {
      (0, _utils3.deprecateTransitionMethods)('route', 'transitionTo');
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return this._router.transitionTo(...(0, _utils3.prefixRouteNameArg)(this, args));
    }
    /**
      Perform a synchronous transition into another route without attempting
      to resolve promises, update the URL, or abort any currently active
      asynchronous transitions (i.e. regular transitions caused by
      `transitionTo` or URL changes).
         This method is handy for performing intermediate transitions on the
      way to a final destination route, and is called internally by the
      default implementations of the `error` and `loading` handlers.
         @method intermediateTransitionTo
      @param {String} name the name of the route
      @param {...Object} models the model(s) to be used while transitioning
      to the route.
      @since 1.2.0
      @public
     */
    intermediateTransitionTo() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      var [name, ...preparedArgs] = (0, _utils3.prefixRouteNameArg)(this, args);
      this._router.intermediateTransitionTo(name, ...preparedArgs);
    }
    /**
      Refresh the model on this route and any child routes, firing the
      `beforeModel`, `model`, and `afterModel` hooks in a similar fashion
      to how routes are entered when transitioning in from other route.
      The current route params (e.g. `article_id`) will be passed in
      to the respective model hooks, and if a different model is returned,
      `setupController` and associated route hooks will re-fire as well.
         An example usage of this method is re-querying the server for the
      latest information using the same parameters as when the route
      was first entered.
         Note that this will cause `model` hooks to fire even on routes
      that were provided a model object when the route was initially
      entered.
         @method refresh
      @return {Transition} the transition object associated with this
        attempted transition
      @since 1.4.0
      @public
     */
    refresh() {
      return this._router._routerMicrolib.refresh(this);
    }
    /**
      Transition into another route while replacing the current URL, if possible.
      This will replace the current history entry instead of adding a new one.
      Beside that, it is identical to `transitionTo` in all other respects. See
      'transitionTo' for additional information regarding multiple models.
         Example
         ```app/router.js
      // ...
         Router.map(function() {
        this.route('index');
        this.route('secret');
      });
         export default Router;
      ```
         ```app/routes/secret.js
      import Route from '@ember/routing/route';
         export default class SecretRoute Route {
        afterModel() {
          if (!authorized()){
            this.replaceWith('index');
          }
        }
      }
      ```
         @method replaceWith
      @param {String} name the name of the route or a URL
      @param {...Object} models the model(s) or identifier(s) to be used while
        transitioning to the route.
      @param {Object} [options] optional hash with a queryParams property
        containing a mapping of query parameters
      @return {Transition} the transition object associated with this
        attempted transition
      @since 1.0.0
      @deprecated Use replaceWith from the Router service instead.
      @public
    */
    replaceWith() {
      (0, _utils3.deprecateTransitionMethods)('route', 'replaceWith');
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      return this._router.replaceWith(...(0, _utils3.prefixRouteNameArg)(this, args));
    }
    /**
      This hook is the entry point for router.js
         @private
      @method setup
    */
    setup(context, transition) {
      var controllerName = this.controllerName || this.routeName;
      var definedController = this.controllerFor(controllerName, true);
      var controller = definedController !== null && definedController !== void 0 ? definedController : this.generateController(controllerName);
      // SAFETY: Since `_qp` is protected we can't infer the type
      var queryParams = (0, _object.get)(this, '_qp');
      // Assign the route's controller so that it can more easily be
      // referenced in action handlers. Side effects. Side effects everywhere.
      if (!this.controller) {
        var propNames = queryParams.propertyNames;
        addQueryParamsObservers(controller, propNames);
        this.controller = controller;
      }
      var states = queryParams.states;
      controller._qpDelegate = states.allowOverrides;
      if (transition) {
        // Update the model dep values used to calculate cache keys.
        (0, _utils3.stashParamNames)(this._router, transition[_router_js.STATE_SYMBOL].routeInfos);
        var cache = this._bucketCache;
        var params = transition[_router_js.PARAMS_SYMBOL];
        var allParams = queryParams.propertyNames;
        allParams.forEach(prop => {
          var aQp = queryParams.map[prop];
          (true && !(aQp) && (0, _debug.assert)('expected aQp', aQp));
          aQp.values = params;
          var cacheKey = (0, _utils3.calculateCacheKey)(aQp.route.fullRouteName, aQp.parts, aQp.values);
          var value = cache.lookup(cacheKey, prop, aQp.undecoratedDefaultValue);
          (0, _object.set)(controller, prop, value);
        });
        var qpValues = getQueryParamsFor(this, transition[_router_js.STATE_SYMBOL]);
        (0, _object.setProperties)(controller, qpValues);
      }
      this.setupController(controller, context, transition);
      if (this._environment.options.shouldRender) {
        this[RENDER]();
      }
      // Setup can cause changes to QPs which need to be propogated immediately in
      // some situations. Eventually, we should work on making these async somehow.
      (0, _metal.flushAsyncObservers)(false);
    }
    /*
      Called when a query parameter for this route changes, regardless of whether the route
      is currently part of the active route hierarchy. This will update the query parameter's
      value in the cache so if this route becomes active, the cache value has been updated.
    */
    _qpChanged(prop, value, qp) {
      if (!qp) {
        return;
      }
      // Update model-dep cache
      var cache = this._bucketCache;
      var cacheKey = (0, _utils3.calculateCacheKey)(qp.route.fullRouteName, qp.parts, qp.values);
      cache.stash(cacheKey, prop, value);
    }
    beforeModel(_transition) {}
    afterModel(_resolvedModel, _transition) {}
    /**
      A hook you can implement to optionally redirect to another route.
         Calling `this.transitionTo` from inside of the `redirect` hook will
      abort the current transition (into the route that has implemented `redirect`).
         `redirect` and `afterModel` behave very similarly and are
      called almost at the same time, but they have an important
      distinction when calling `this.transitionTo` to a child route
      of the current route. From `afterModel`, this new transition
      invalidates the current transition, causing `beforeModel`,
      `model`, and `afterModel` hooks to be called again. But the
      same transition started from `redirect` does _not_ invalidate
      the current transition. In other words, by the time the `redirect`
      hook has been called, both the resolved model and the attempted
      entry into this route are considered fully validated.
         @method redirect
      @param {Object} model the model for this route
      @param {Transition} transition the transition object associated with the current transition
      @since 1.0.0
      @public
    */
    redirect(_model, _transition) {}
    /**
      Called when the context is changed by router.js.
         @private
      @method contextDidChange
    */
    contextDidChange() {
      this.currentModel = this.context;
    }
    /**
      A hook you can implement to convert the URL into the model for
      this route.
         ```app/router.js
      // ...
         Router.map(function() {
        this.route('post', { path: '/posts/:post_id' });
      });
         export default Router;
      ```
         The model for the `post` route is `store.findRecord('post', params.post_id)`.
         By default, if your route has a dynamic segment ending in `_id`:
         * The model class is determined from the segment (`post_id`'s
        class is `App.Post`)
      * The find method is called on the model class with the value of
        the dynamic segment.
         Note that for routes with dynamic segments, this hook is not always
      executed. If the route is entered through a transition (e.g. when
      using the `link-to` Handlebars helper or the `transitionTo` method
      of routes), and a model context is already provided this hook
      is not called.
         A model context does not include a primitive string or number,
      which does cause the model hook to be called.
         Routes without dynamic segments will always execute the model hook.
         ```javascript
      // no dynamic segment, model hook always called
      this.transitionTo('posts');
         // model passed in, so model hook not called
      thePost = store.findRecord('post', 1);
      this.transitionTo('post', thePost);
         // integer passed in, model hook is called
      this.transitionTo('post', 1);
         // model id passed in, model hook is called
      // useful for forcing the hook to execute
      thePost = store.findRecord('post', 1);
      this.transitionTo('post', thePost.id);
      ```
         This hook follows the asynchronous/promise semantics
      described in the documentation for `beforeModel`. In particular,
      if a promise returned from `model` fails, the error will be
      handled by the `error` hook on `Route`.
         Example
         ```app/routes/post.js
      import Route from '@ember/routing/route';
         export default class PostRoute extends Route {
        model(params) {
          return this.store.findRecord('post', params.post_id);
        }
      }
      ```
         @method model
      @param {Object} params the parameters extracted from the URL
      @param {Transition} transition
      @return {any | Promise<any>} the model for this route. If
        a promise is returned, the transition will pause until
        the promise resolves, and the resolved value of the promise
        will be used as the model for this route.
      @since 1.0.0
      @public
    */
    model(params, transition) {
      var name, sawParams, value;
      // SAFETY: Since `_qp` is protected we can't infer the type
      var queryParams = (0, _object.get)(this, '_qp').map;
      for (var prop in params) {
        if (prop === 'queryParams' || queryParams && prop in queryParams) {
          continue;
        }
        var match = prop.match(/^(.*)_id$/);
        if (match !== null) {
          name = match[1];
          value = params[prop];
        }
        sawParams = true;
      }
      if (!name) {
        if (sawParams) {
          // SAFETY: This should be equivalent
          return Object.assign({}, params);
        } else {
          if (transition.resolveIndex < 1) {
            return;
          }
          // SAFETY: This should be correct, but TS is unable to infer this.
          return transition[_router_js.STATE_SYMBOL].routeInfos[transition.resolveIndex - 1].context;
        }
      }
      return this.findModel(name, value);
    }
    /**
      @private
      @method deserialize
      @param {Object} params the parameters extracted from the URL
      @param {Transition} transition
      @return {any | Promise<any>} the model for this route.
         Router.js hook.
     */
    deserialize(_params, transition) {
      return this.model(this._paramsFor(this.routeName, _params), transition);
    }
    /**
         @method findModel
      @param {String} type the model type
      @param {Object} value the value passed to find
      @private
    */
    findModel() {
      return (0, _object.get)(this, 'store').find(...arguments);
    }
    /**
      A hook you can use to setup the controller for the current route.
         This method is called with the controller for the current route and the
      model supplied by the `model` hook.
         By default, the `setupController` hook sets the `model` property of
      the controller to the specified `model` when it is not `undefined`.
         If you implement the `setupController` hook in your Route, it will
      prevent this default behavior. If you want to preserve that behavior
      when implementing your `setupController` function, make sure to call
      `super`:
         ```app/routes/photos.js
      import Route from '@ember/routing/route';
         export default class PhotosRoute extends Route {
        model() {
          return this.store.findAll('photo');
        }
           setupController(controller, model) {
          super.setupController(controller, model);
             this.controllerFor('application').set('showingPhotos', true);
        }
      }
      ```
         The provided controller will be one resolved based on the name
      of this route.
         If no explicit controller is defined, Ember will automatically create one.
         As an example, consider the router:
         ```app/router.js
      // ...
         Router.map(function() {
        this.route('post', { path: '/posts/:post_id' });
      });
         export default Router;
      ```
         If you have defined a file for the post controller,
      the framework will use it.
      If it is not defined, a basic `Controller` instance would be used.
         @example Behavior of a basic Controller
         ```app/routes/post.js
      import Route from '@ember/routing/route';
         export default class PostRoute extends Route {
        setupController(controller, model) {
          controller.set('model', model);
        }
      });
      ```
         @method setupController
      @param {Controller} controller instance
      @param {Object} model
      @param {Transition} [transition]
      @since 1.0.0
      @public
    */
    setupController(controller, context, _transition) {
      if (controller && context !== undefined) {
        (0, _object.set)(controller, 'model', context);
      }
    }
    controllerFor(name, _skipAssert) {
      if (_skipAssert === void 0) {
        _skipAssert = false;
      }
      var owner = (0, _owner.getOwner)(this);
      (true && !(owner) && (0, _debug.assert)('Route is unexpectedly missing an owner', owner));
      var route = owner.lookup(`route:${name}`);
      if (route && route.controllerName) {
        name = route.controllerName;
      }
      var controller = owner.lookup(`controller:${name}`);
      // NOTE: We're specifically checking that skipAssert is true, because according
      //   to the old API the second parameter was model. We do not want people who
      //   passed a model to skip the assertion.
      (true && !(controller !== undefined || _skipAssert === true) && (0, _debug.assert)(`The controller named '${name}' could not be found. Make sure that this route exists and has already been entered at least once. If you are accessing a controller not associated with a route, make sure the controller class is explicitly defined.`, controller !== undefined || _skipAssert === true));
      (true && !(controller === undefined || controller instanceof _controller2.default) && (0, _debug.assert)(`Expected controller:${name} to be an instance of Controller`, controller === undefined || controller instanceof _controller2.default));
      return controller;
    }
    /**
      Generates a controller for a route.
         Example
         ```app/routes/post.js
      import Route from '@ember/routing/route';
         export default class Post extends Route {
        setupController(controller, post) {
          super.setupController(controller, post);
             this.generateController('posts');
        }
      }
      ```
         @method generateController
      @param {String} name the name of the controller
      @private
    */
    generateController(name) {
      var owner = (0, _owner.getOwner)(this);
      (true && !(owner) && (0, _debug.assert)('Route is unexpectedly missing an owner', owner));
      return (0, _internals.generateController)(owner, name);
    }
    /**
      Returns the resolved model of a parent (or any ancestor) route
      in a route hierarchy.  During a transition, all routes
      must resolve a model object, and if a route
      needs access to a parent route's model in order to
      resolve a model (or just reuse the model from a parent),
      it can call `this.modelFor(theNameOfParentRoute)` to
      retrieve it. If the ancestor route's model was a promise,
      its resolved result is returned.
         Example
         ```app/router.js
      // ...
         Router.map(function() {
        this.route('post', { path: '/posts/:post_id' }, function() {
          this.route('comments');
        });
      });
         export default Router;
      ```
         ```app/routes/post/comments.js
      import Route from '@ember/routing/route';
         export default class PostCommentsRoute extends Route {
        model() {
          let post = this.modelFor('post');
             return post.comments;
        }
      }
      ```
         @method modelFor
      @param {String} name the name of the route
      @return {Object} the model object
      @since 1.0.0
      @public
    */
    modelFor(_name) {
      var name;
      var owner = (0, _owner.getOwner)(this);
      (true && !(owner instanceof _instance.default) && (0, _debug.assert)('Expected router owner to be an EngineInstance', owner instanceof _instance.default));
      var transition = this._router && this._router._routerMicrolib ? this._router._routerMicrolib.activeTransition : undefined;
      // Only change the route name when there is an active transition.
      // Otherwise, use the passed in route name.
      if (owner.routable && transition !== undefined) {
        name = getEngineRouteName(owner, _name);
      } else {
        name = _name;
      }
      var route = owner.lookup(`route:${name}`);
      // If we are mid-transition, we want to try and look up
      // resolved parent contexts on the current transitionEvent.
      if (transition !== undefined && transition !== null) {
        var modelLookupName = route && route.routeName || name;
        if (Object.prototype.hasOwnProperty.call(transition.resolvedModels, modelLookupName)) {
          return transition.resolvedModels[modelLookupName];
        }
      }
      return route === null || route === void 0 ? void 0 : route.currentModel;
    }
    /**
      `this[RENDER]` is used to render a template into a region of another template
      (indicated by an `{{outlet}}`).
         @method this[RENDER]
      @param {String} name the name of the template to render
      @param {Object} [options] the options
      @param {String} [options.into] the template to render into,
                      referenced by name. Defaults to the parent template
      @param {String} [options.outlet] the outlet inside `options.into` to render into.
                      Defaults to 'main'
      @param {String|Object} [options.controller] the controller to use for this template,
                      referenced by name or as a controller instance. Defaults to the Route's paired controller
      @param {Object} [options.model] the model object to set on `options.controller`.
                      Defaults to the return value of the Route's model hook
      @private
     */
    [RENDER](name, options) {
      var renderOptions = buildRenderOptions(this, name, options);
      ROUTE_CONNECTIONS.get(this).push(renderOptions);
      (0, _runloop.once)(this._router, '_setOutlets');
    }
    willDestroy() {
      this.teardownViews();
    }
    /**
      @private
         @method teardownViews
    */
    teardownViews() {
      var connections = ROUTE_CONNECTIONS.get(this);
      if (connections !== undefined && connections.length > 0) {
        ROUTE_CONNECTIONS.set(this, []);
        (0, _runloop.once)(this._router, '_setOutlets');
      }
    }
    buildRouteInfoMetadata() {}
    _paramsFor(routeName, params) {
      var transition = this._router._routerMicrolib.activeTransition;
      if (transition !== undefined) {
        return this.paramsFor(routeName);
      }
      return params;
    }
    /**
      Store property provides a hook for data persistence libraries to inject themselves.
         By default, this store property provides the exact same functionality previously
      in the model hook.
         Currently, the required interface is:
         `store.find(modelName, findArguments)`
         @property store
      @type {Object}
      @private
    */
    get store() {
      var owner = (0, _owner.getOwner)(this);
      (true && !(owner) && (0, _debug.assert)('Route is unexpectedly missing an owner', owner));
      var routeName = this.routeName;
      return {
        find(name, value) {
          var modelClass = owner.factoryFor(`model:${name}`);
          (true && !(Boolean(modelClass)) && (0, _debug.assert)(`You used the dynamic segment \`${name}_id\` in your route ` + `\`${routeName}\` for which Ember requires you provide a ` + `data-loading implementation. Commonly, that is done by ` + `adding a model hook implementation on the route ` + `(\`model({${name}_id}) {\`) or by injecting an implemention of ` + `a data store: \`@service store;\`.`, Boolean(modelClass)));
          if (!modelClass) {
            return;
          }
          modelClass = modelClass.class;
          (true && !(typeof modelClass.find === 'function') && (0, _debug.assert)(`You used the dynamic segment \`${name}_id\` in your route ` + `\`${routeName}\` for which Ember requires you provide a ` + `data-loading implementation. Commonly, that is done by ` + `adding a model hook implementation on the route ` + `(\`model({${name}_id}) {\`) or by injecting an implemention of ` + `a data store: \`@service store;\`.\n\n` + `Rarely, applications may attempt to use a legacy behavior where ` + `the model class (in this case \`${name}\`) is resolved and the ` + `\`find\` method on that class is invoked to load data. In this ` + `application, a model of \`${name}\` was found but it did not ` + `provide a \`find\` method. You should not add a \`find\` ` + `method to your model. Instead, please implement an appropriate ` + `\`model\` hook on the \`${routeName}\` route.`, typeof modelClass.find === 'function'));
          return modelClass.find(value);
        }
      };
    }
    set store(value) {
      (0, _metal.defineProperty)(this, 'store', null, value);
    }
    /**
      @private
      @property _qp
      */
    get _qp() {
      var combinedQueryParameterConfiguration = {};
      var controllerName = this.controllerName || this.routeName;
      var owner = (0, _owner.getOwner)(this);
      (true && !(owner) && (0, _debug.assert)('Route is unexpectedly missing an owner', owner));
      var controller = owner.lookup(`controller:${controllerName}`);
      var queryParameterConfiguraton = (0, _object.get)(this, 'queryParams');
      var hasRouterDefinedQueryParams = Object.keys(queryParameterConfiguraton).length > 0;
      if (controller) {
        (true && !(controller instanceof _controller2.default) && (0, _debug.assert)('Expected an instance of controller', controller instanceof _controller2.default)); // the developer has authored a controller class in their application for
        // this route find its query params and normalize their object shape them
        // merge in the query params for the route. As a mergedProperty,
        // Route#queryParams is always at least `{}`
        var controllerDefinedQueryParameterConfiguration = (0, _object.get)(controller, 'queryParams') || [];
        var normalizedControllerQueryParameterConfiguration = (0, _utils3.normalizeControllerQueryParams)(controllerDefinedQueryParameterConfiguration);
        combinedQueryParameterConfiguration = mergeEachQueryParams(normalizedControllerQueryParameterConfiguration, queryParameterConfiguraton);
      } else if (hasRouterDefinedQueryParams) {
        // the developer has not defined a controller but *has* supplied route query params.
        // Generate a class for them so we can later insert default values
        controller = (0, _internals.generateController)(owner, controllerName);
        combinedQueryParameterConfiguration = queryParameterConfiguraton;
      }
      var qps = [];
      var map = {};
      var propertyNames = [];
      for (var propName in combinedQueryParameterConfiguration) {
        if (!Object.prototype.hasOwnProperty.call(combinedQueryParameterConfiguration, propName)) {
          continue;
        }
        // to support the dubious feature of using unknownProperty
        // on queryParams configuration
        if (propName === 'unknownProperty' || propName === '_super') {
          // possible todo: issue deprecation warning?
          continue;
        }
        var desc = combinedQueryParameterConfiguration[propName];
        (true && !(desc) && (0, _debug.assert)(`[BUG] missing query parameter configuration for ${propName}`, desc));
        var scope = desc.scope || 'model';
        var parts = undefined;
        if (scope === 'controller') {
          parts = [];
        }
        var urlKey = desc.as || this.serializeQueryParamKey(propName);
        var defaultValue = (0, _object.get)(controller, propName);
        defaultValue = copyDefaultValue(defaultValue);
        var type = desc.type || (0, _utils.typeOf)(defaultValue);
        var defaultValueSerialized = this.serializeQueryParam(defaultValue, urlKey, type);
        var scopedPropertyName = `${controllerName}:${propName}`;
        var qp = {
          undecoratedDefaultValue: (0, _object.get)(controller, propName),
          defaultValue,
          serializedDefaultValue: defaultValueSerialized,
          serializedValue: defaultValueSerialized,
          type,
          urlKey,
          prop: propName,
          scopedPropertyName,
          controllerName,
          route: this,
          parts,
          values: null,
          scope
        };
        map[propName] = map[urlKey] = map[scopedPropertyName] = qp;
        qps.push(qp);
        propertyNames.push(propName);
      }
      return {
        qps,
        map,
        propertyNames,
        states: {
          /*
            Called when a query parameter changes in the URL, this route cares
            about that query parameter, but the route is not currently
            in the active route hierarchy.
          */
          inactive: (prop, value) => {
            var qp = map[prop];
            (true && !(qp) && (0, _debug.assert)('expected inactive callback to only be called for registered qps', qp));
            this._qpChanged(prop, value, qp);
          },
          /*
            Called when a query parameter changes in the URL, this route cares
            about that query parameter, and the route is currently
            in the active route hierarchy.
          */
          active: (prop, value) => {
            var qp = map[prop];
            (true && !(qp) && (0, _debug.assert)('expected active callback to only be called for registered qps', qp));
            this._qpChanged(prop, value, qp);
            return this._activeQPChanged(qp, value);
          },
          /*
            Called when a value of a query parameter this route handles changes in a controller
            and the route is currently in the active route hierarchy.
          */
          allowOverrides: (prop, value) => {
            var qp = map[prop];
            (true && !(qp) && (0, _debug.assert)('expected allowOverrides callback to only be called for registered qps', qp));
            this._qpChanged(prop, value, qp);
            return this._updatingQPChanged(qp);
          }
        }
      };
    }
  }
  Route.isRouteFactory = true;
  __decorate([_object.computed], Route.prototype, "store", null);
  __decorate([_object.computed], Route.prototype, "_qp", null);
  function parentRoute(route) {
    var routeInfo = routeInfoFor(route, route._router._routerMicrolib.state.routeInfos, -1);
    return routeInfo && routeInfo.route;
  }
  function routeInfoFor(route, routeInfos, offset) {
    if (offset === void 0) {
      offset = 0;
    }
    if (!routeInfos) {
      return;
    }
    var current;
    for (var i = 0; i < routeInfos.length; i++) {
      var routeInfo = routeInfos[i];
      (true && !(routeInfo) && (0, _debug.assert)('has current routeInfo', routeInfo));
      current = routeInfo.route;
      if (current === route) {
        return routeInfos[i + offset];
      }
    }
    return;
  }
  function buildRenderOptions(route, nameOrOptions, options) {
    var isDefaultRender = !nameOrOptions && !options;
    var _name;
    if (!isDefaultRender) {
      if (typeof nameOrOptions === 'object' && !options) {
        _name = route.templateName || route.routeName;
        options = nameOrOptions;
      } else {
        (true && !(!(0, _utils.isEmpty)(nameOrOptions)) && (0, _debug.assert)('The name in the given arguments is undefined or empty string', !(0, _utils.isEmpty)(nameOrOptions)));
        _name = nameOrOptions;
      }
    }
    (true && !(isDefaultRender || !(options && 'outlet' in options && options.outlet === undefined)) && (0, _debug.assert)('You passed undefined as the outlet name.', isDefaultRender || !(options && 'outlet' in options && options.outlet === undefined)));
    var owner = (0, _owner.getOwner)(route);
    (true && !(owner) && (0, _debug.assert)('Route is unexpectedly missing an owner', owner));
    var name, templateName, into, outlet, model;
    var controller;
    if (options) {
      into = options.into && options.into.replace(/\//g, '.');
      outlet = options.outlet;
      controller = options.controller;
      model = options.model;
    }
    outlet = outlet || 'main';
    if (isDefaultRender) {
      name = route.routeName;
      templateName = route.templateName || name;
    } else {
      name = _name.replace(/\//g, '.');
      templateName = name;
    }
    if (controller === undefined) {
      if (isDefaultRender) {
        controller = route.controllerName || owner.lookup(`controller:${name}`);
      } else {
        controller = owner.lookup(`controller:${name}`) || route.controllerName || route.routeName;
      }
    }
    if (typeof controller === 'string') {
      var controllerName = controller;
      controller = owner.lookup(`controller:${controllerName}`);
      (true && !(isDefaultRender || controller !== undefined) && (0, _debug.assert)(`You passed \`controller: '${controllerName}'\` into the \`render\` method, but no such controller could be found.`, isDefaultRender || controller !== undefined));
    }
    (true && !(controller instanceof _controller2.default) && (0, _debug.assert)('Expected an instance of controller', controller instanceof _controller2.default));
    if (model === undefined) {
      model = route.currentModel;
    } else {
      controller.set('model', model);
    }
    var template = owner.lookup(`template:${templateName}`);
    (true && !(isDefaultRender || template !== undefined) && (0, _debug.assert)(`Could not find "${templateName}" template, view, or component.`, isDefaultRender || template !== undefined));
    var parent;
    if (into && (parent = parentRoute(route)) && into === parent.routeName) {
      into = undefined;
    }
    var renderOptions = {
      owner,
      into,
      outlet,
      name,
      controller,
      model,
      template: template !== undefined ? template(owner) : route._topLevelViewTemplate(owner)
    };
    if (true /* DEBUG */) {
      var LOG_VIEW_LOOKUPS = (0, _object.get)(route._router, 'namespace.LOG_VIEW_LOOKUPS');
      if (LOG_VIEW_LOOKUPS && !template) {
        (0, _debug.info)(`Could not find "${name}" template. Nothing will be rendered`, {
          fullName: `template:${name}`
        });
      }
    }
    return renderOptions;
  }
  function getFullQueryParams(router, state) {
    if (state.fullQueryParams) {
      return state.fullQueryParams;
    }
    var haveAllRouteInfosResolved = state.routeInfos.every(routeInfo => routeInfo.route);
    var fullQueryParamsState = Object.assign({}, state.queryParams);
    router._deserializeQueryParams(state.routeInfos, fullQueryParamsState);
    // only cache query params state if all routeinfos have resolved; it's possible
    // for lazy routes to not have resolved when `getFullQueryParams` is called, so
    // we wait until all routes have resolved prior to caching query params state
    if (haveAllRouteInfosResolved) {
      state.fullQueryParams = fullQueryParamsState;
    }
    return fullQueryParamsState;
  }
  function getQueryParamsFor(route, state) {
    state.queryParamsFor = state.queryParamsFor || {};
    var name = route.fullRouteName;
    var existing = state.queryParamsFor[name];
    if (existing) {
      return existing;
    }
    var fullQueryParams = getFullQueryParams(route._router, state);
    var params = state.queryParamsFor[name] = {};
    // Copy over all the query params for this route/controller into params hash.
    // SAFETY: Since `_qp` is protected we can't infer the type
    var qps = (0, _object.get)(route, '_qp').qps;
    for (var qp of qps) {
      // Put deserialized qp on params hash.
      var qpValueWasPassedIn = (qp.prop in fullQueryParams);
      params[qp.prop] = qpValueWasPassedIn ? fullQueryParams[qp.prop] : copyDefaultValue(qp.defaultValue);
    }
    return params;
  }
  // FIXME: This should probably actually return a `NativeArray` if the passed in value is an Array.
  function copyDefaultValue(value) {
    if (Array.isArray(value)) {
      // SAFETY: We lost the type data about the array if we don't cast.
      return (0, _array.A)(value.slice());
    }
    return value;
  }
  /*
    Merges all query parameters from a controller with those from
    a route, returning a new object and avoiding any mutations to
    the existing objects.
  */
  function mergeEachQueryParams(controllerQP, routeQP) {
    var qps = {};
    var keysAlreadyMergedOrSkippable = {
      defaultValue: true,
      type: true,
      scope: true,
      as: true
    };
    // first loop over all controller qps, merging them with any matching route qps
    // into a new empty object to avoid mutating.
    for (var cqpName in controllerQP) {
      if (!Object.prototype.hasOwnProperty.call(controllerQP, cqpName)) {
        continue;
      }
      qps[cqpName] = Object.assign(Object.assign({}, controllerQP[cqpName]), routeQP[cqpName]);
      // allows us to skip this QP when we check route QPs.
      keysAlreadyMergedOrSkippable[cqpName] = true;
    }
    // loop over all route qps, skipping those that were merged in the first pass
    // because they also appear in controller qps
    for (var rqpName in routeQP) {
      if (!Object.prototype.hasOwnProperty.call(routeQP, rqpName) || keysAlreadyMergedOrSkippable[rqpName]) {
        continue;
      }
      qps[rqpName] = Object.assign(Object.assign({}, routeQP[rqpName]), controllerQP[rqpName]);
    }
    return qps;
  }
  function addQueryParamsObservers(controller, propNames) {
    propNames.forEach(prop => {
      if ((0, _metal.descriptorForProperty)(controller, prop) === undefined) {
        var desc = (0, _utils2.lookupDescriptor)(controller, prop);
        if (desc !== null && (typeof desc.get === 'function' || typeof desc.set === 'function')) {
          (0, _metal.defineProperty)(controller, prop, (0, _compat.dependentKeyCompat)({
            get: desc.get,
            set: desc.set
          }));
        }
      }
      (0, _metal.addObserver)(controller, `${prop}.[]`, controller, controller._qpChanged, false);
    });
  }
  function getEngineRouteName(engine, routeName) {
    if (engine.routable) {
      var prefix = engine.mountPoint;
      if (routeName === 'application') {
        return prefix;
      } else {
        return `${prefix}.${routeName}`;
      }
    }
    return routeName;
  }
  var defaultSerialize = Route.prototype.serialize;
  _exports.defaultSerialize = defaultSerialize;
  function hasDefaultSerialize(route) {
    return route.serialize === defaultSerialize;
  }
  // Set these here so they can be overridden with extend
  Route.reopen({
    mergedProperties: ['queryParams'],
    queryParams: {},
    templateName: null,
    controllerName: null,
    send() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }
      (true && !(!this.isDestroying && !this.isDestroyed) && (0, _debug.assert)(`Attempted to call .send() with the action '${args[0]}' on the destroyed route '${this.routeName}'.`, !this.isDestroying && !this.isDestroyed));
      if (this._router && this._router._routerMicrolib || !(0, _debug.isTesting)()) {
        this._router.send(...args);
      } else {
        var name = args.shift();
        var action = this.actions[name];
        if (action) {
          return action.apply(this, args);
        }
      }
    },
    /**
      The controller associated with this route.
         Example
         ```app/routes/form.js
      import Route from '@ember/routing/route';
      import { action } from '@ember/object';
         export default class FormRoute extends Route {
        @action
        willTransition(transition) {
          if (this.controller.get('userHasEnteredData') &&
              !confirm('Are you sure you want to abandon progress?')) {
            transition.abort();
          } else {
            // Bubble the `willTransition` action so that
            // parent routes can decide whether or not to abort.
            return true;
          }
        }
      }
      ```
         @property controller
      @type Controller
      @since 1.6.0
      @public
    */
    actions: {
      /**
      This action is called when one or more query params have changed. Bubbles.
           @method queryParamsDidChange
      @param changed {Object} Keys are names of query params that have changed.
      @param totalPresent {Object} Keys are names of query params that are currently set.
      @param removed {Object} Keys are names of query params that have been removed.
      @returns {boolean}
      @private
      */
      queryParamsDidChange(changed, _totalPresent, removed) {
        // SAFETY: Since `_qp` is protected we can't infer the type
        var qpMap = (0, _object.get)(this, '_qp').map;
        var totalChanged = Object.keys(changed).concat(Object.keys(removed));
        for (var change of totalChanged) {
          var qp = qpMap[change];
          if (qp) {
            var options = this._optionsForQueryParam(qp);
            (true && !(options && typeof options === 'object') && (0, _debug.assert)('options exists', options && typeof options === 'object'));
            if ((0, _object.get)(options, 'refreshModel') && this._router.currentState) {
              this.refresh();
              break;
            }
          }
        }
        return true;
      },
      finalizeQueryParamChange(params, finalParams, transition) {
        if (this.fullRouteName !== 'application') {
          return true;
        }
        // Transition object is absent for intermediate transitions.
        if (!transition) {
          return;
        }
        var routeInfos = transition[_router_js.STATE_SYMBOL].routeInfos;
        var router = this._router;
        var qpMeta = router._queryParamsFor(routeInfos);
        var changes = router._qpUpdates;
        var qpUpdated = false;
        var replaceUrl;
        (0, _utils3.stashParamNames)(router, routeInfos);
        for (var qp of qpMeta.qps) {
          var route = qp.route;
          var controller = route.controller;
          var presentKey = qp.urlKey in params && qp.urlKey;
          // Do a reverse lookup to see if the changed query
          // param URL key corresponds to a QP property on
          // this controller.
          var value = void 0;
          var svalue = void 0;
          if (changes.has(qp.urlKey)) {
            // Value updated in/before setupController
            value = (0, _object.get)(controller, qp.prop);
            svalue = route.serializeQueryParam(value, qp.urlKey, qp.type);
          } else {
            if (presentKey) {
              svalue = params[presentKey];
              if (svalue !== undefined) {
                value = route.deserializeQueryParam(svalue, qp.urlKey, qp.type);
              }
            } else {
              // No QP provided; use default value.
              svalue = qp.serializedDefaultValue;
              value = copyDefaultValue(qp.defaultValue);
            }
          }
          // SAFETY: Since `_qp` is protected we can't infer the type
          controller._qpDelegate = (0, _object.get)(route, '_qp').states.inactive;
          var thisQueryParamChanged = svalue !== qp.serializedValue;
          if (thisQueryParamChanged) {
            if (transition.queryParamsOnly && replaceUrl !== false) {
              var options = route._optionsForQueryParam(qp);
              var replaceConfigValue = (0, _object.get)(options, 'replace');
              if (replaceConfigValue) {
                replaceUrl = true;
              } else if (replaceConfigValue === false) {
                // Explicit pushState wins over any other replaceStates.
                replaceUrl = false;
              }
            }
            (0, _object.set)(controller, qp.prop, value);
            qpUpdated = true;
          }
          // Stash current serialized value of controller.
          qp.serializedValue = svalue;
          var thisQueryParamHasDefaultValue = qp.serializedDefaultValue === svalue;
          if (!thisQueryParamHasDefaultValue) {
            finalParams.push({
              value: svalue,
              visible: true,
              key: presentKey || qp.urlKey
            });
          }
        }
        // Some QPs have been updated, and those changes need to be propogated
        // immediately. Eventually, we should work on making this async somehow.
        if (qpUpdated === true) {
          (0, _metal.flushAsyncObservers)(false);
        }
        if (replaceUrl) {
          transition.method('replace');
        }
        qpMeta.qps.forEach(qp => {
          // SAFETY: Since `_qp` is protected we can't infer the type
          var routeQpMeta = (0, _object.get)(qp.route, '_qp');
          var finalizedController = qp.route.controller;
          finalizedController['_qpDelegate'] = (0, _object.get)(routeQpMeta, 'states.active');
        });
        router._qpUpdates.clear();
        return;
      }
    }
  });
  var _default = Route;
  _exports.default = _default;
});
define("@ember/routing/router-service", ["exports", "@ember/-internals/owner", "@ember/object/evented", "@ember/debug", "@ember/object/computed", "@ember/service", "@glimmer/validator", "@ember/routing/router", "@ember/routing/lib/utils"], function (_exports, _owner, _evented, _debug, _computed, _service, _validator, _router2, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports.ROUTER = void 0;
  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
      if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  /**
   * @module @ember/routing/router-service
   */

  var ROUTER = Symbol('ROUTER');
  _exports.ROUTER = ROUTER;
  function cleanURL(url, rootURL) {
    if (rootURL === '/') {
      return url;
    }
    return url.substring(rootURL.length);
  }
  class RouterService extends _service.default.extend(_evented.default) {
    get _router() {
      var router = this[ROUTER];
      if (router !== undefined) {
        return router;
      }
      var owner = (0, _owner.getOwner)(this);
      (true && !(owner) && (0, _debug.assert)('RouterService is unexpectedly missing an owner', owner));
      var _router = owner.lookup('router:main');
      (true && !(_router instanceof _router2.default) && (0, _debug.assert)('ROUTER SERVICE BUG: Expected router to be an instance of EmberRouter', _router instanceof _router2.default));
      return this[ROUTER] = _router;
    }
    willDestroy() {
      super.willDestroy();
      this[ROUTER] = undefined;
    }
    /**
       Transition the application into another route. The route may
       be either a single route or route path:
          Calling `transitionTo` from the Router service will cause default query parameter values to be included in the URL.
       This behavior is different from calling `transitionTo` on a route or `transitionToRoute` on a controller.
       See the [Router Service RFC](https://github.com/emberjs/rfcs/blob/master/text/0095-router-service.md#query-parameter-semantics) for more info.
          In the following example we use the Router service to navigate to a route with a
       specific model from a Component in the first action, and in the second we trigger
       a query-params only transition.
          ```app/components/example.js
       import Component from '@glimmer/component';
       import { action } from '@ember/object';
       import { service } from '@ember/service';
          export default class extends Component {
         @service router;
            @action
         goToComments(post) {
           this.router.transitionTo('comments', post);
         }
            @action
         fetchMoreComments(latestComment) {
           this.router.transitionTo({
             queryParams: { commentsAfter: latestComment }
           });
         }
       }
       ```
          @method transitionTo
       @param {String} [routeNameOrUrl] the name of the route or a URL
       @param {...Object} [models] the model(s) or identifier(s) to be used while
         transitioning to the route.
       @param {Object} [options] optional hash with a queryParams property
         containing a mapping of query parameters. May be supplied as the only
        parameter to trigger a query-parameter-only transition.
       @return {Transition} the transition object associated with this
         attempted transition
       @public
     */
    transitionTo() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      if ((0, _utils.resemblesURL)(args[0])) {
        // NOTE: this `args[0] as string` cast is safe and TS correctly infers it
        // in 3.6+, so it can be removed when TS is upgraded.
        return this._router._doURLTransition('transitionTo', args[0]);
      }
      var {
        routeName,
        models,
        queryParams
      } = (0, _utils.extractRouteArgs)(args);
      var transition = this._router._doTransition(routeName, models, queryParams, true);
      return transition;
    }
    /**
       Similar to `transitionTo`, but instead of adding the destination to the browser's URL history,
       it replaces the entry for the current route.
       When the user clicks the "back" button in the browser, there will be fewer steps.
       This is most commonly used to manage redirects in a way that does not cause confusing additions
       to the user's browsing history.
          Calling `replaceWith` from the Router service will cause default query parameter values to be included in the URL.
       This behavior is different from calling `replaceWith` on a route.
       See the [Router Service RFC](https://github.com/emberjs/rfcs/blob/master/text/0095-router-service.md#query-parameter-semantics) for more info.
          Usage example:
          ```app/routes/application.js
       import Route from '@ember/routing/route';
          export default class extends Route {
         beforeModel() {
           if (!authorized()){
             this.replaceWith('unauthorized');
           }
         }
       });
       ```
          @method replaceWith
       @param {String} routeNameOrUrl the name of the route or a URL of the desired destination
       @param {...Object} models the model(s) or identifier(s) to be used while
         transitioning to the route i.e. an object of params to pass to the destination route
       @param {Object} [options] optional hash with a queryParams property
         containing a mapping of query parameters
       @return {Transition} the transition object associated with this
         attempted transition
       @public
     */
    replaceWith() {
      return this.transitionTo(...arguments).method('replace');
    }
    /**
      Generate a URL based on the supplied route name and optionally a model. The
      URL is returned as a string that can be used for any purpose.
         In this example, the URL for the `author.books` route for a given author
      is copied to the clipboard.
         ```app/templates/application.hbs
      <CopyLink @author={{hash id="tomster" name="Tomster"}} />
      ```
         ```app/components/copy-link.js
      import Component from '@glimmer/component';
      import { service } from '@ember/service';
      import { action } from '@ember/object';
         export default class CopyLinkComponent extends Component {
        @service router;
        @service clipboard;
           @action
        copyBooksURL() {
          if (this.author) {
            const url = this.router.urlFor('author.books', this.args.author);
            this.clipboard.set(url);
            // Clipboard now has /author/tomster/books
          }
        }
      }
      ```
         Just like with `transitionTo` and `replaceWith`, `urlFor` can also handle
      query parameters.
         ```app/templates/application.hbs
      <CopyLink @author={{hash id="tomster" name="Tomster"}} />
      ```
         ```app/components/copy-link.js
      import Component from '@glimmer/component';
      import { service } from '@ember/service';
      import { action } from '@ember/object';
         export default class CopyLinkComponent extends Component {
        @service router;
        @service clipboard;
           @action
        copyOnlyEmberBooksURL() {
          if (this.author) {
            const url = this.router.urlFor('author.books', this.author, {
              queryParams: { filter: 'emberjs' }
            });
            this.clipboard.set(url);
            // Clipboard now has /author/tomster/books?filter=emberjs
          }
        }
      }
      ```
          @method urlFor
       @param {String} routeName the name of the route
       @param {...Object} models the model(s) for the route.
       @param {Object} [options] optional hash with a queryParams property
         containing a mapping of query parameters
       @return {String} the string representing the generated URL
       @public
     */
    urlFor(routeName) {
      this._router.setupRouter();
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }
      return this._router.generate(routeName, ...args);
    }
    /**
       Returns `true` if `routeName/models/queryParams` is the active route, where `models` and `queryParams` are optional.
       See [model](api/ember/release/classes/Route/methods/model?anchor=model) and
       [queryParams](/api/ember/3.7/classes/Route/properties/queryParams?anchor=queryParams) for more information about these arguments.
          In the following example, `isActive` will return `true` if the current route is `/posts`.
          ```app/components/posts.js
       import Component from '@glimmer/component';
       import { service } from '@ember/service';
          export default class extends Component {
         @service router;
            displayComments() {
           return this.router.isActive('posts');
         }
       });
       ```
          The next example includes a dynamic segment, and will return `true` if the current route is `/posts/1`,
       assuming the post has an id of 1:
          ```app/components/posts.js
       import Component from '@glimmer/component';
       import { service } from '@ember/service';
          export default class extends Component {
         @service router;
            displayComments(post) {
           return this.router.isActive('posts', post.id);
         }
       });
       ```
          Where `post.id` is the id of a specific post, which is represented in the route as /posts/[post.id].
       If `post.id` is equal to 1, then isActive will return true if the current route is /posts/1, and false if the route is anything else.
          @method isActive
       @param {String} routeName the name of the route
       @param {...Object} models the model(s) or identifier(s) to be used when determining the active route.
       @param {Object} [options] optional hash with a queryParams property
         containing a mapping of query parameters
       @return {boolean} true if the provided routeName/models/queryParams are active
       @public
     */
    isActive() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      var {
        routeName,
        models,
        queryParams
      } = (0, _utils.extractRouteArgs)(args);
      var routerMicrolib = this._router._routerMicrolib;
      // When using isActive() in a getter, we want to entagle with the auto-tracking system
      // for example,
      // in
      // get isBarActive() {
      //   return isActive('foo.bar');
      // }
      //
      // you'd expect isBarActive to be dirtied when the route changes.
      //
      // https://github.com/emberjs/ember.js/issues/19004
      (0, _validator.consumeTag)((0, _validator.tagFor)(this._router, 'currentURL'));
      // UNSAFE: casting `routeName as string` here encodes the existing
      // assumption but may be wrong: `extractRouteArgs` correctly returns it as
      // `string | undefined`. There may be bugs if `isActiveIntent` does
      // not correctly account for `undefined` values for `routeName`. Spoilers:
      // it *does not* account for this being `undefined`.
      if (!routerMicrolib.isActiveIntent(routeName, models)) {
        return false;
      }
      var hasQueryParams = Object.keys(queryParams).length > 0;
      if (hasQueryParams) {
        // UNSAFE: casting `routeName as string` here encodes the existing
        // assumption but may be wrong: `extractRouteArgs` correctly returns it
        // as `string | undefined`. There may be bugs if `_prepareQueryParams`
        // does not correctly account for `undefined` values for `routeName`.
        //  Spoilers: under the hood this currently uses router.js APIs which
        // *do not* account for this being `undefined`.
        var targetRouteName = routeName;
        queryParams = Object.assign({}, queryParams);
        this._router._prepareQueryParams(targetRouteName, models, queryParams, true /* fromRouterService */);
        var currentQueryParams = Object.assign({}, routerMicrolib.state.queryParams);
        this._router._prepareQueryParams(targetRouteName, models, currentQueryParams, true /* fromRouterService */);
        return (0, _utils.shallowEqual)(queryParams, currentQueryParams);
      }
      return true;
    }
    /**
       Takes a string URL and returns a `RouteInfo` for the leafmost route represented
       by the URL. Returns `null` if the URL is not recognized. This method expects to
       receive the actual URL as seen by the browser including the app's `rootURL`.
          See [RouteInfo](/ember/release/classes/RouteInfo) for more info.
          In the following example `recognize` is used to verify if a path belongs to our
       application before transitioning to it.
          ```
       import Component from '@ember/component';
       import { service } from '@ember/service';
          export default class extends Component {
         @service router;
         path = '/';
            click() {
           if (this.router.recognize(this.path)) {
             this.router.transitionTo(this.path);
           }
         }
       }
       ```
           @method recognize
        @param {String} url
        @return {RouteInfo | null}
        @public
      */
    recognize(url) {
      (true && !(url.indexOf(this.rootURL) === 0) && (0, _debug.assert)(`You must pass a url that begins with the application's rootURL "${this.rootURL}"`, url.indexOf(this.rootURL) === 0));
      this._router.setupRouter();
      var internalURL = cleanURL(url, this.rootURL);
      return this._router._routerMicrolib.recognize(internalURL);
    }
    /**
      Takes a string URL and returns a promise that resolves to a
      `RouteInfoWithAttributes` for the leafmost route represented by the URL.
      The promise rejects if the URL is not recognized or an unhandled exception
      is encountered. This method expects to receive the actual URL as seen by
      the browser including the app's `rootURL`.
           @method recognizeAndLoad
        @param {String} url
        @return {RouteInfo}
        @public
     */
    recognizeAndLoad(url) {
      (true && !(url.indexOf(this.rootURL) === 0) && (0, _debug.assert)(`You must pass a url that begins with the application's rootURL "${this.rootURL}"`, url.indexOf(this.rootURL) === 0));
      this._router.setupRouter();
      var internalURL = cleanURL(url, this.rootURL);
      return this._router._routerMicrolib.recognizeAndLoad(internalURL);
    }
    /**
      You can register a listener for events emitted by this service with `.on()`:
         ```app/routes/contact-form.js
      import Route from '@ember/routing';
      import { service } from '@ember/service';
         export default class extends Route {
        @service router;
           activate() {
          this.router.on('routeWillChange', (transition) => {
            if (!transition.to.find(route => route.name === this.routeName)) {
              alert("Please save or cancel your changes.");
              transition.abort();
            }
          })
        }
      }
      ```
         @method on
      @param {String} eventName
      @param {Function} callback
      @public
    */
    /**
      You can unregister a listener for events emitted by this service with `.off()`:
         ```app/routes/contact-form.js
      import Route from '@ember/routing';
      import { service } from '@ember/service';
         export default class ContactFormRoute extends Route {
        @service router;
           callback = (transition) => {
          if (!transition.to.find(route => route.name === this.routeName)) {
            alert('Please save or cancel your changes.');
            transition.abort();
          }
        };
           activate() {
          this.router.on('routeWillChange', this.callback);
        }
           deactivate() {
          this.router.off('routeWillChange', this.callback);
        }
      }
      ```
         @method off
      @param {String} eventName
      @param {Function} callback
      @public
    */
    /**
      The `routeWillChange` event is fired at the beginning of any
      attempted transition with a `Transition` object as the sole
      argument. This action can be used for aborting, redirecting,
      or decorating the transition from the currently active routes.
         A good example is preventing navigation when a form is
      half-filled out:
         ```app/routes/contact-form.js
      import Route from '@ember/routing';
      import { service } from '@ember/service';
         export default class extends Route {
        @service router;
           activate() {
          this.router.on('routeWillChange', (transition) => {
            if (!transition.to.find(route => route.name === this.routeName)) {
              alert("Please save or cancel your changes.");
              transition.abort();
            }
          })
        }
      }
      ```
         The `routeWillChange` event fires whenever a new route is chosen as the desired target of a transition. This includes `transitionTo`, `replaceWith`, all redirection for any reason including error handling, and abort. Aborting implies changing the desired target back to where you already were. Once a transition has completed, `routeDidChange` fires.
         @event routeWillChange
      @param {Transition} transition
      @public
    */
    /**
      The `routeDidChange` event only fires once a transition has settled.
      This includes aborts and error substates. Like the `routeWillChange` event
      it receives a Transition as the sole argument.
         A good example is sending some analytics when the route has transitioned:
         ```app/routes/contact-form.js
      import Route from '@ember/routing';
      import { service } from '@ember/service';
         export default class extends Route {
        @service router;
           activate() {
          this.router.on('routeDidChange', (transition) => {
            ga.send('pageView', {
              current: transition.to.name,
              from: transition.from.name
            });
          })
        }
      }
      ```
         `routeDidChange` will be called after any `Route`'s
      [didTransition](/ember/release/classes/Route/events/didTransition?anchor=didTransition)
      action has been fired.
      The updates of properties
      [currentURL](/ember/release/classes/RouterService/properties/currentURL?anchor=currentURL),
      [currentRouteName](/ember/release/classes/RouterService/properties/currentURL?anchor=currentRouteName)
      and
      [currentRoute](/ember/release/classes/RouterService/properties/currentURL?anchor=currentRoute)
      are completed at the time `routeDidChange` is called.
         @event routeDidChange
      @param {Transition} transition
      @public
    */
    /**
     * Refreshes all currently active routes, doing a full transition.
     * If a route name is provided and refers to a currently active route,
     * it will refresh only that route and its descendents.
     * Returns a promise that will be resolved once the refresh is complete.
     * All resetController, beforeModel, model, afterModel, redirect, and setupController
     * hooks will be called again. You will get new data from the model hook.
     *
     * @method refresh
     * @param {String} [routeName] the route to refresh (along with all child routes)
     * @return Transition
     * @public
     */
    refresh(pivotRouteName) {
      if (!pivotRouteName) {
        return this._router._routerMicrolib.refresh();
      }
      (true && !(this._router.hasRoute(pivotRouteName)) && (0, _debug.assert)(`The route "${pivotRouteName}" was not found`, this._router.hasRoute(pivotRouteName)));
      (true && !(this.isActive(pivotRouteName)) && (0, _debug.assert)(`The route "${pivotRouteName}" is currently not active`, this.isActive(pivotRouteName)));
      var owner = (0, _owner.getOwner)(this);
      (true && !(owner) && (0, _debug.assert)('RouterService is unexpectedly missing an owner', owner));
      var pivotRoute = owner.lookup(`route:${pivotRouteName}`);
      // R could be instantiated with a different sub-type
      // @ts-ignore
      return this._router._routerMicrolib.refresh(pivotRoute);
    }
  }
  _exports.default = RouterService;
  __decorate([(0, _computed.readOnly)('_router.currentRouteName')], RouterService.prototype, "currentRouteName", void 0);
  __decorate([(0, _computed.readOnly)('_router.currentURL')], RouterService.prototype, "currentURL", void 0);
  __decorate([(0, _computed.readOnly)('_router.location')], RouterService.prototype, "location", void 0);
  __decorate([(0, _computed.readOnly)('_router.rootURL')], RouterService.prototype, "rootURL", void 0);
  __decorate([(0, _computed.readOnly)('_router.currentRoute')], RouterService.prototype, "currentRoute", void 0);
});
define("@ember/routing/router", ["exports", "@ember/-internals/container", "@ember/object", "@ember/owner", "@ember/routing/-internals", "@ember/routing/lib/utils", "@ember/routing/location", "@ember/array", "@ember/utils", "@ember/object/evented", "@ember/debug", "@ember/runloop", "@ember/routing/route", "router_js", "@ember/engine/instance"], function (_exports, _container, _object, _owner, _internals, _utils, _location, _array, _utils2, _evented, _debug, _runloop, _route, _router_js, _instance) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.triggerEvent = triggerEvent;
  /**
  @module @ember/routing/router
  */
  function defaultDidTransition(infos) {
    updatePaths(this);
    this._cancelSlowTransitionTimer();
    this.notifyPropertyChange('url');
    this.set('currentState', this.targetState);
    if (true /* DEBUG */) {
      // @ts-expect-error namespace isn't public
      if (this.namespace.LOG_TRANSITIONS) {
        // eslint-disable-next-line no-console
        console.log(`Transitioned into '${EmberRouter._routePath(infos)}'`);
      }
    }
  }
  function defaultWillTransition(oldInfos, newInfos) {
    if (true /* DEBUG */) {
      // @ts-expect-error namespace isn't public
      if (this.namespace.LOG_TRANSITIONS) {
        // eslint-disable-next-line no-console
        console.log(`Preparing to transition from '${EmberRouter._routePath(oldInfos)}' to '${EmberRouter._routePath(newInfos)}'`);
      }
    }
  }
  var freezeRouteInfo;
  if (true /* DEBUG */) {
    freezeRouteInfo = transition => {
      if (transition.from !== null && !Object.isFrozen(transition.from)) {
        Object.freeze(transition.from);
      }
      if (transition.to !== null && !Object.isFrozen(transition.to)) {
        Object.freeze(transition.to);
      }
    };
  }
  function K() {
    return this;
  }
  var {
    slice
  } = Array.prototype;
  /**
    The `EmberRouter` class manages the application state and URLs. Refer to
    the [routing guide](https://guides.emberjs.com/release/routing/) for documentation.
  
    @class EmberRouter
    @extends EmberObject
    @uses Evented
    @public
  */
  class EmberRouter extends _object.default.extend(_evented.default) {
    /**
      The `Router.map` function allows you to define mappings from URLs to routes
      in your application. These mappings are defined within the
      supplied callback function using `this.route`.
         The first parameter is the name of the route which is used by default as the
      path name as well.
         The second parameter is the optional options hash. Available options are:
           * `path`: allows you to provide your own path as well as mark dynamic
          segments.
        * `resetNamespace`: false by default; when nesting routes, ember will
          combine the route names to form the fully-qualified route name, which is
          used with `{{link-to}}` or manually transitioning to routes. Setting
          `resetNamespace: true` will cause the route not to inherit from its
          parent route's names. This is handy for preventing extremely long route names.
          Keep in mind that the actual URL path behavior is still retained.
         The third parameter is a function, which can be used to nest routes.
      Nested routes, by default, will have the parent route tree's route name and
      path prepended to it's own.
         ```app/router.js
      Router.map(function(){
        this.route('post', { path: '/post/:post_id' }, function() {
          this.route('edit');
          this.route('comments', { resetNamespace: true }, function() {
            this.route('new');
          });
        });
      });
      ```
         @method map
      @param callback
      @public
    */
    static map(callback) {
      if (!this.dslCallbacks) {
        this.dslCallbacks = [];
        // FIXME: Can we remove this?
        this.reopenClass({
          dslCallbacks: this.dslCallbacks
        });
      }
      this.dslCallbacks.push(callback);
      return this;
    }
    static _routePath(routeInfos) {
      var path = [];
      // We have to handle coalescing resource names that
      // are prefixed with their parent's names, e.g.
      // ['foo', 'foo.bar.baz'] => 'foo.bar.baz', not 'foo.foo.bar.baz'
      function intersectionMatches(a1, a2) {
        for (var i = 0; i < a1.length; ++i) {
          if (a1[i] !== a2[i]) {
            return false;
          }
        }
        return true;
      }
      var name, nameParts, oldNameParts;
      for (var i = 1; i < routeInfos.length; i++) {
        var routeInfo = routeInfos[i];
        (true && !(routeInfo) && (0, _debug.assert)('has routeInfo', routeInfo));
        name = routeInfo.name;
        nameParts = name.split('.');
        oldNameParts = slice.call(path);
        while (oldNameParts.length) {
          if (intersectionMatches(oldNameParts, nameParts)) {
            break;
          }
          oldNameParts.shift();
        }
        path.push(...nameParts.slice(oldNameParts.length));
      }
      return path.join('.');
    }
    // Note that owner is actually required in this scenario, but since it is strictly
    // optional in other contexts trying to make it required here confuses TS.
    constructor(owner) {
      super(owner);
      this._didSetupRouter = false;
      this._initialTransitionStarted = false;
      this.currentURL = null;
      this.currentRouteName = null;
      this.currentPath = null;
      this.currentRoute = null;
      this._qpCache = Object.create(null);
      // Set of QueryParam['urlKey']
      this._qpUpdates = new Set();
      this._queuedQPChanges = {};
      this._toplevelView = null;
      this._handledErrors = new Set();
      this._engineInstances = Object.create(null);
      this._engineInfoByRoute = Object.create(null);
      this._slowTransitionTimer = null;
      this.currentState = null;
      this.targetState = null;
      (true && !(owner) && (0, _debug.assert)('BUG: Missing owner', owner));
      this._resetQueuedQueryParameterChanges();
      this.namespace = owner.lookup('application:main');
      var bucketCache = owner.lookup((0, _container.privatize)`-bucket-cache:main`);
      (true && !(bucketCache instanceof _internals.BucketCache) && (0, _debug.assert)('BUG: BucketCache should always be present', bucketCache instanceof _internals.BucketCache));
      this._bucketCache = bucketCache;
      var routerService = owner.lookup('service:router');
      (true && !(routerService !== undefined) && (0, _debug.assert)('BUG: RouterService should always be present', routerService !== undefined));
      this._routerService = routerService;
    }
    _initRouterJs() {
      var location = (0, _object.get)(this, 'location');
      var router = this;
      var owner = (0, _owner.getOwner)(this);
      (true && !(owner) && (0, _debug.assert)('Router is unexpectedly missing an owner', owner));
      var seen = Object.create(null);
      class PrivateRouter extends _router_js.default {
        getRoute(name) {
          var routeName = name;
          var routeOwner = owner;
          var engineInfo = router._engineInfoByRoute[routeName];
          if (engineInfo) {
            var engineInstance = router._getEngineInstance(engineInfo);
            routeOwner = engineInstance;
            routeName = engineInfo.localFullName;
          }
          var fullRouteName = `route:${routeName}`;
          (true && !(routeOwner) && (0, _debug.assert)('Route is unexpectedly missing an owner', routeOwner));
          var route = routeOwner.lookup(fullRouteName);
          if (seen[name]) {
            (true && !(route) && (0, _debug.assert)('seen routes should exist', route));
            return route;
          }
          seen[name] = true;
          if (!route) {
            // SAFETY: this is configured in `commonSetupRegistry` in the
            // `@ember/application/lib` package.
            var DefaultRoute = routeOwner.factoryFor('route:basic').class;
            routeOwner.register(fullRouteName, DefaultRoute.extend());
            route = routeOwner.lookup(fullRouteName);
            if (true /* DEBUG */) {
              if (router.namespace.LOG_ACTIVE_GENERATION) {
                (0, _debug.info)(`generated -> ${fullRouteName}`, {
                  fullName: fullRouteName
                });
              }
            }
          }
          route._setRouteName(routeName);
          if (engineInfo && !(0, _route.hasDefaultSerialize)(route)) {
            throw new Error('Defining a custom serialize method on an Engine route is not supported.');
          }
          return route;
        }
        getSerializer(name) {
          var engineInfo = router._engineInfoByRoute[name];
          // If this is not an Engine route, we fall back to the handler for serialization
          if (!engineInfo) {
            return;
          }
          return engineInfo.serializeMethod || _route.defaultSerialize;
        }
        updateURL(path) {
          (0, _runloop.once)(() => {
            location.setURL(path);
            (0, _object.set)(router, 'currentURL', path);
          });
        }
        // TODO: merge into routeDidChange
        didTransition(infos) {
          (true && !(router.didTransition === defaultDidTransition) && (0, _debug.assert)('You attempted to override the "didTransition" method which has been deprecated. Please inject the router service and listen to the "routeDidChange" event.', router.didTransition === defaultDidTransition));
          router.didTransition(infos);
        }
        // TODO: merge into routeWillChange
        willTransition(oldInfos, newInfos) {
          (true && !(router.willTransition === defaultWillTransition) && (0, _debug.assert)('You attempted to override the "willTransition" method which has been deprecated. Please inject the router service and listen to the "routeWillChange" event.', router.willTransition === defaultWillTransition));
          router.willTransition(oldInfos, newInfos);
        }
        triggerEvent(routeInfos, ignoreFailure, name, args) {
          return triggerEvent.bind(router)(routeInfos, ignoreFailure, name, args);
        }
        routeWillChange(transition) {
          router.trigger('routeWillChange', transition);
          if (true /* DEBUG */) {
            freezeRouteInfo(transition);
          }
          router._routerService.trigger('routeWillChange', transition);
          // in case of intermediate transition we update the current route
          // to make router.currentRoute.name consistent with router.currentRouteName
          // see https://github.com/emberjs/ember.js/issues/19449
          if (transition.isIntermediate) {
            router.set('currentRoute', transition.to);
          }
        }
        routeDidChange(transition) {
          router.set('currentRoute', transition.to);
          (0, _runloop.once)(() => {
            router.trigger('routeDidChange', transition);
            if (true /* DEBUG */) {
              freezeRouteInfo(transition);
            }
            router._routerService.trigger('routeDidChange', transition);
          });
        }
        transitionDidError(error, transition) {
          if (error.wasAborted || transition.isAborted) {
            // If the error was a transition erorr or the transition aborted
            // log the abort.
            return (0, _router_js.logAbort)(transition);
          } else {
            // Otherwise trigger the "error" event to attempt an intermediate
            // transition into an error substate
            transition.trigger(false, 'error', error.error, transition, error.route);
            if (router._isErrorHandled(error.error)) {
              // If we handled the error with a substate just roll the state back on
              // the transition and send the "routeDidChange" event for landing on
              // the error substate and return the error.
              transition.rollback();
              this.routeDidChange(transition);
              return error.error;
            } else {
              // If it was not handled, abort the transition completely and return
              // the error.
              transition.abort();
              return error.error;
            }
          }
        }
        replaceURL(url) {
          if (location.replaceURL) {
            var doReplaceURL = () => {
              location.replaceURL(url);
              (0, _object.set)(router, 'currentURL', url);
            };
            (0, _runloop.once)(doReplaceURL);
          } else {
            this.updateURL(url);
          }
        }
      }
      var routerMicrolib = this._routerMicrolib = new PrivateRouter();
      var dslCallbacks = this.constructor.dslCallbacks || [K];
      var dsl = this._buildDSL();
      dsl.route('application', {
        path: '/',
        resetNamespace: true,
        overrideNameAssertion: true
      }, function () {
        for (var i = 0; i < dslCallbacks.length; i++) {
          dslCallbacks[i].call(this);
        }
      });
      if (true /* DEBUG */) {
        if (this.namespace.LOG_TRANSITIONS_INTERNAL) {
          routerMicrolib.log = console.log.bind(console); // eslint-disable-line no-console
        }
      }

      routerMicrolib.map(dsl.generate());
    }
    _buildDSL() {
      var enableLoadingSubstates = this._hasModuleBasedResolver();
      var router = this;
      var owner = (0, _owner.getOwner)(this);
      (true && !(owner) && (0, _debug.assert)('Router is unexpectedly missing an owner', owner));
      var options = {
        enableLoadingSubstates,
        resolveRouteMap(name) {
          return owner.factoryFor(`route-map:${name}`);
        },
        addRouteForEngine(name, engineInfo) {
          if (!router._engineInfoByRoute[name]) {
            router._engineInfoByRoute[name] = engineInfo;
          }
        }
      };
      return new _internals.DSL(null, options);
    }
    /*
      Resets all pending query parameter changes.
      Called after transitioning to a new route
      based on query parameter changes.
    */
    _resetQueuedQueryParameterChanges() {
      this._queuedQPChanges = {};
    }
    _hasModuleBasedResolver() {
      var owner = (0, _owner.getOwner)(this);
      (true && !(owner) && (0, _debug.assert)('Router is unexpectedly missing an owner', owner));
      var resolver = (0, _object.get)(owner, 'application.__registry__.resolver.moduleBasedResolver');
      return Boolean(resolver);
    }
    /**
      Initializes the current router instance and sets up the change handling
      event listeners used by the instances `location` implementation.
         A property named `initialURL` will be used to determine the initial URL.
      If no value is found `/` will be used.
         @method startRouting
      @private
    */
    startRouting() {
      if (this.setupRouter()) {
        var initialURL = (0, _object.get)(this, 'initialURL');
        if (initialURL === undefined) {
          initialURL = (0, _object.get)(this, 'location').getURL();
        }
        var initialTransition = this.handleURL(initialURL);
        if (initialTransition && initialTransition.error) {
          throw initialTransition.error;
        }
      }
    }
    setupRouter() {
      if (this._didSetupRouter) {
        return false;
      }
      this._didSetupRouter = true;
      this._setupLocation();
      var location = (0, _object.get)(this, 'location');
      // Allow the Location class to cancel the router setup while it refreshes
      // the page
      if ((0, _object.get)(location, 'cancelRouterSetup')) {
        return false;
      }
      this._initRouterJs();
      location.onUpdateURL(url => {
        this.handleURL(url);
      });
      return true;
    }
    _setOutlets() {
      // This is triggered async during Route#willDestroy.
      // If the router is also being destroyed we do not want to
      // to create another this._toplevelView (and leak the renderer)
      if (this.isDestroying || this.isDestroyed) {
        return;
      }
      var routeInfos = this._routerMicrolib.currentRouteInfos;
      if (!routeInfos) {
        return;
      }
      var defaultParentState;
      var liveRoutes = null;
      for (var routeInfo of routeInfos) {
        var route = routeInfo.route;
        var connections = _route.ROUTE_CONNECTIONS.get(route);
        var ownState = void 0;
        if (connections.length === 0) {
          ownState = representEmptyRoute(liveRoutes, defaultParentState, route);
        } else {
          for (var j = 0; j < connections.length; j++) {
            var appended = appendLiveRoute(liveRoutes, defaultParentState, connections[j]);
            liveRoutes = appended.liveRoutes;
            var {
              name,
              outlet
            } = appended.ownState.render;
            if (name === route.routeName || outlet === 'main') {
              ownState = appended.ownState;
            }
          }
        }
        defaultParentState = ownState;
      }
      // when a transitionTo happens after the validation phase
      // during the initial transition _setOutlets is called
      // when no routes are active. However, it will get called
      // again with the correct values during the next turn of
      // the runloop
      if (!liveRoutes) {
        return;
      }
      if (!this._toplevelView) {
        var owner = (0, _owner.getOwner)(this);
        (true && !(owner) && (0, _debug.assert)('Router is unexpectedly missing an owner', owner)); // SAFETY: we don't presently have any type registries internally to make
        // this safe, so in each of these cases we assume that nothing *else* is
        // registered at this `FullName`, and simply check to make sure that
        // *something* is.
        var OutletView = owner.factoryFor('view:-outlet');
        (true && !(OutletView !== undefined) && (0, _debug.assert)('[BUG] unexpectedly missing `view:-outlet`', OutletView !== undefined));
        var application = owner.lookup('application:main');
        (true && !(application !== undefined) && (0, _debug.assert)('[BUG] unexpectedly missing `application:-main`', application !== undefined));
        var environment = owner.lookup('-environment:main');
        (true && !(environment !== undefined) && (0, _debug.assert)('[BUG] unexpectedly missing `-environment:main`', environment !== undefined));
        var template = owner.lookup('template:-outlet');
        (true && !(template !== undefined) && (0, _debug.assert)('[BUG] unexpectedly missing `template:-outlet`', template !== undefined));
        this._toplevelView = OutletView.create({
          environment,
          template,
          application
        });
        this._toplevelView.setOutletState(liveRoutes);
        // TODO(SAFETY): At least one test runs without this set correctly. At a
        // later time, update the test to configure this correctly. The test ID:
        // `Router Service - non application test:  RouterService#transitionTo with basic route`
        var instance = owner.lookup('-application-instance:main');
        // let instance = owner.lookup('-application-instance:main') as ApplicationInstance | undefined;
        // assert('[BUG] unexpectedly missing `-application-instance:main`', instance !== undefined);
        if (instance) {
          // SAFETY: LOL. This is calling a deprecated API with a type that we
          // cannot actually confirm at a type level *is* a `ViewMixin`. Seems:
          // not great on multiple fronts!
          instance.didCreateRootView(this._toplevelView);
        }
      } else {
        this._toplevelView.setOutletState(liveRoutes);
      }
    }
    handleURL(url) {
      // Until we have an ember-idiomatic way of accessing #hashes, we need to
      // remove it because router.js doesn't know how to handle it.
      var _url = url.split(/#(.+)?/)[0];
      return this._doURLTransition('handleURL', _url);
    }
    _doURLTransition(routerJsMethod, url) {
      this._initialTransitionStarted = true;
      var transition = this._routerMicrolib[routerJsMethod](url || '/');
      didBeginTransition(transition, this);
      return transition;
    }
    /**
      Transition the application into another route. The route may
      be either a single route or route path:
         @method transitionTo
      @param {String} [name] the name of the route or a URL
      @param {...Object} models the model(s) or identifier(s) to be used while
        transitioning to the route.
      @param {Object} [options] optional hash with a queryParams property
        containing a mapping of query parameters
      @return {Transition} the transition object associated with this
        attempted transition
      @public
    */
    transitionTo() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      if ((0, _utils.resemblesURL)(args[0])) {
        (true && !(!this.isDestroying && !this.isDestroyed) && (0, _debug.assert)(`A transition was attempted from '${this.currentRouteName}' to '${args[0]}' but the application instance has already been destroyed.`, !this.isDestroying && !this.isDestroyed));
        return this._doURLTransition('transitionTo', args[0]);
      }
      var {
        routeName,
        models,
        queryParams
      } = (0, _utils.extractRouteArgs)(args);
      (true && !(!this.isDestroying && !this.isDestroyed) && (0, _debug.assert)(`A transition was attempted from '${this.currentRouteName}' to '${routeName}' but the application instance has already been destroyed.`, !this.isDestroying && !this.isDestroyed));
      return this._doTransition(routeName, models, queryParams);
    }
    intermediateTransitionTo(name) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }
      this._routerMicrolib.intermediateTransitionTo(name, ...args);
      updatePaths(this);
      if (true /* DEBUG */) {
        var infos = this._routerMicrolib.currentRouteInfos;
        if (this.namespace.LOG_TRANSITIONS) {
          (true && !(infos) && (0, _debug.assert)('expected infos to be set', infos)); // eslint-disable-next-line no-console
          console.log(`Intermediate-transitioned into '${EmberRouter._routePath(infos)}'`);
        }
      }
    }
    /**
      Similar to `transitionTo`, but instead of adding the destination to the browser's URL history,
      it replaces the entry for the current route.
      When the user clicks the "back" button in the browser, there will be fewer steps.
      This is most commonly used to manage redirects in a way that does not cause confusing additions
      to the user's browsing history.
         @method replaceWith
      @param {String} [name] the name of the route or a URL
      @param {...Object} models the model(s) or identifier(s) to be used while
        transitioning to the route.
      @param {Object} [options] optional hash with a queryParams property
        containing a mapping of query parameters
      @return {Transition} the transition object associated with this
        attempted transition
      @public
    */
    replaceWith() {
      return this.transitionTo(...arguments).method('replace');
    }
    generate(name) {
      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }
      var url = this._routerMicrolib.generate(name, ...args);
      (true && !(typeof this.location !== 'string') && (0, _debug.assert)('expected non-string location', typeof this.location !== 'string'));
      return this.location.formatURL(url);
    }
    /**
      Determines if the supplied route is currently active.
         @method isActive
      @param routeName
      @return {Boolean}
      @private
    */
    isActive(routeName) {
      return this._routerMicrolib.isActive(routeName);
    }
    /**
      An alternative form of `isActive` that doesn't require
      manual concatenation of the arguments into a single
      array.
         @method isActiveIntent
      @param routeName
      @param models
      @param queryParams
      @return {Boolean}
      @private
      @since 1.7.0
    */
    isActiveIntent(routeName, models, queryParams) {
      return this.currentState.isActiveIntent(routeName, models, queryParams);
    }
    send(name) {
      for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        args[_key4 - 1] = arguments[_key4];
      }
      /*name, context*/
      this._routerMicrolib.trigger(name, ...args);
    }
    /**
      Does this router instance have the given route.
         @method hasRoute
      @return {Boolean}
      @private
    */
    hasRoute(route) {
      return this._routerMicrolib.hasRoute(route);
    }
    /**
      Resets the state of the router by clearing the current route
      handlers and deactivating them.
         @private
      @method reset
     */
    reset() {
      this._didSetupRouter = false;
      this._initialTransitionStarted = false;
      if (this._routerMicrolib) {
        this._routerMicrolib.reset();
      }
    }
    willDestroy() {
      if (this._toplevelView) {
        this._toplevelView.destroy();
        this._toplevelView = null;
      }
      super.willDestroy();
      this.reset();
      var instances = this._engineInstances;
      for (var name in instances) {
        var instanceMap = instances[name];
        (true && !(instanceMap) && (0, _debug.assert)('has instanceMap', instanceMap));
        for (var id in instanceMap) {
          var instance = instanceMap[id];
          (true && !(instance) && (0, _debug.assert)('has instance', instance));
          (0, _runloop.run)(instance, 'destroy');
        }
      }
    }
    /*
      Called when an active route's query parameter has changed.
      These changes are batched into a runloop run and trigger
      a single transition.
    */
    _activeQPChanged(queryParameterName, newValue) {
      this._queuedQPChanges[queryParameterName] = newValue;
      (0, _runloop.once)(this, this._fireQueryParamTransition);
    }
    // The queryParameterName is QueryParam['urlKey']
    _updatingQPChanged(queryParameterName) {
      this._qpUpdates.add(queryParameterName);
    }
    /*
      Triggers a transition to a route based on query parameter changes.
      This is called once per runloop, to batch changes.
         e.g.
         if these methods are called in succession:
      this._activeQPChanged('foo', '10');
        // results in _queuedQPChanges = { foo: '10' }
      this._activeQPChanged('bar', false);
        // results in _queuedQPChanges = { foo: '10', bar: false }
         _queuedQPChanges will represent both of these changes
      and the transition using `transitionTo` will be triggered
      once.
    */
    _fireQueryParamTransition() {
      this.transitionTo({
        queryParams: this._queuedQPChanges
      });
      this._resetQueuedQueryParameterChanges();
    }
    _setupLocation() {
      var location = this.location;
      var rootURL = this.rootURL;
      var owner = (0, _owner.getOwner)(this);
      (true && !(owner) && (0, _debug.assert)('Router is unexpectedly missing an owner', owner));
      if ('string' === typeof location) {
        var resolvedLocation = owner.lookup(`location:${location}`);
        if (location === 'auto') {
          (true && !(false) && (0, _debug.deprecate)("Router location 'auto' is deprecated. Most users will want to set `locationType` to 'history' in config/environment.js for no change in behavior. See deprecation docs for details.", false, {
            id: 'deprecate-auto-location',
            until: '5.0.0',
            url: 'https://emberjs.com/deprecations/v4.x#toc_deprecate-auto-location',
            for: 'ember-source',
            since: {
              available: '4.1.0',
              enabled: '4.1.0'
            }
          }));
        }
        if (resolvedLocation !== undefined) {
          location = (0, _object.set)(this, 'location', resolvedLocation);
        } else {
          // Allow for deprecated registration of custom location API's
          var options = {
            implementation: location
          };
          location = (0, _object.set)(this, 'location', _location.default.create(options));
        }
      }
      if (location !== null && typeof location === 'object') {
        if (rootURL) {
          (0, _object.set)(location, 'rootURL', rootURL);
        }
        // Allow the location to do any feature detection, such as AutoLocation
        // detecting history support. This gives it a chance to set its
        // `cancelRouterSetup` property which aborts routing.
        if (typeof location.detect === 'function') {
          if (this.location !== 'auto') {
            (true && !(false) && (0, _debug.deprecate)('The `detect` method on the Location object is deprecated. If you need detection you can run your detection code in app.js, before setting the location type.', false, {
              id: 'deprecate-auto-location',
              until: '5.0.0',
              url: 'https://emberjs.com/deprecations/v4.x#toc_deprecate-auto-location',
              for: 'ember-source',
              since: {
                available: '4.1.0',
                enabled: '4.1.0'
              }
            }));
          }
          location.detect();
        }
        // ensure that initState is called AFTER the rootURL is set on
        // the location instance
        if (typeof location.initState === 'function') {
          location.initState();
        }
      }
    }
    /**
      Serializes the given query params according to their QP meta information.
         @private
      @method _serializeQueryParams
      @param {Arrray<RouteInfo>} routeInfos
      @param {Object} queryParams
      @return {Void}
    */
    _serializeQueryParams(routeInfos, queryParams) {
      forEachQueryParam(this, routeInfos, queryParams, (key, value, qp) => {
        if (qp) {
          delete queryParams[key];
          queryParams[qp.urlKey] = qp.route.serializeQueryParam(value, qp.urlKey, qp.type);
        } else if (value === undefined) {
          return; // We don't serialize undefined values
        } else {
          queryParams[key] = this._serializeQueryParam(value, (0, _utils2.typeOf)(value));
        }
      });
    }
    /**
      Serializes the value of a query parameter based on a type
         @private
      @method _serializeQueryParam
      @param {Object} value
      @param {String} type
    */
    _serializeQueryParam(value, type) {
      if (value === null || value === undefined) {
        return value;
      } else if (type === 'array') {
        return JSON.stringify(value);
      }
      return `${value}`;
    }
    /**
      Deserializes the given query params according to their QP meta information.
         @private
      @method _deserializeQueryParams
      @param {Array<RouteInfo>} routeInfos
      @param {Object} queryParams
      @return {Void}
    */
    _deserializeQueryParams(routeInfos, queryParams) {
      forEachQueryParam(this, routeInfos, queryParams, (key, value, qp) => {
        // If we don't have QP meta info for a given key, then we do nothing
        // because all values will be treated as strings
        if (qp) {
          delete queryParams[key];
          queryParams[qp.prop] = qp.route.deserializeQueryParam(value, qp.urlKey, qp.type);
        }
      });
    }
    /**
      Deserializes the value of a query parameter based on a default type
         @private
      @method _deserializeQueryParam
      @param {Object} value
      @param {String} defaultType
    */
    _deserializeQueryParam(value, defaultType) {
      if (value === null || value === undefined) {
        return value;
      } else if (defaultType === 'boolean') {
        return value === 'true';
      } else if (defaultType === 'number') {
        return Number(value).valueOf();
      } else if (defaultType === 'array') {
        return (0, _array.A)(JSON.parse(value));
      }
      return value;
    }
    /**
      Removes (prunes) any query params with default values from the given QP
      object. Default values are determined from the QP meta information per key.
         @private
      @method _pruneDefaultQueryParamValues
      @param {Array<RouteInfo>} routeInfos
      @param {Object} queryParams
      @return {Void}
    */
    _pruneDefaultQueryParamValues(routeInfos, queryParams) {
      var qps = this._queryParamsFor(routeInfos);
      for (var key in queryParams) {
        var qp = qps.map[key];
        if (qp && qp.serializedDefaultValue === queryParams[key]) {
          delete queryParams[key];
        }
      }
    }
    _doTransition(_targetRouteName, models, _queryParams, _fromRouterService) {
      var targetRouteName = _targetRouteName || (0, _utils.getActiveTargetName)(this._routerMicrolib);
      (true && !(Boolean(targetRouteName) && this._routerMicrolib.hasRoute(targetRouteName)) && (0, _debug.assert)(`The route ${targetRouteName} was not found`, Boolean(targetRouteName) && this._routerMicrolib.hasRoute(targetRouteName)));
      this._initialTransitionStarted = true;
      var queryParams = {};
      this._processActiveTransitionQueryParams(targetRouteName, models, queryParams, _queryParams);
      Object.assign(queryParams, _queryParams);
      this._prepareQueryParams(targetRouteName, models, queryParams, Boolean(_fromRouterService));
      var transition = this._routerMicrolib.transitionTo(targetRouteName, ...models, {
        queryParams
      });
      didBeginTransition(transition, this);
      return transition;
    }
    _processActiveTransitionQueryParams(targetRouteName, models, queryParams, _queryParams) {
      // merge in any queryParams from the active transition which could include
      // queryParams from the url on initial load.
      if (!this._routerMicrolib.activeTransition) {
        return;
      }
      var unchangedQPs = {};
      var qpUpdates = this._qpUpdates;
      var params = (0, _route.getFullQueryParams)(this, this._routerMicrolib.activeTransition[_router_js.STATE_SYMBOL]);
      for (var key in params) {
        if (!qpUpdates.has(key)) {
          unchangedQPs[key] = params[key];
        }
      }
      // We need to fully scope queryParams so that we can create one object
      // that represents both passed-in queryParams and ones that aren't changed
      // from the active transition.
      this._fullyScopeQueryParams(targetRouteName, models, _queryParams);
      this._fullyScopeQueryParams(targetRouteName, models, unchangedQPs);
      Object.assign(queryParams, unchangedQPs);
    }
    /**
      Prepares the query params for a URL or Transition. Restores any undefined QP
      keys/values, serializes all values, and then prunes any default values.
         @private
      @method _prepareQueryParams
      @param {String} targetRouteName
      @param {Array<Object>} models
      @param {Object} queryParams
      @param {boolean} keepDefaultQueryParamValues
      @return {Void}
    */
    _prepareQueryParams(targetRouteName, models, queryParams, _fromRouterService) {
      var state = calculatePostTransitionState(this, targetRouteName, models);
      this._hydrateUnsuppliedQueryParams(state, queryParams, Boolean(_fromRouterService));
      this._serializeQueryParams(state.routeInfos, queryParams);
      if (!_fromRouterService) {
        this._pruneDefaultQueryParamValues(state.routeInfos, queryParams);
      }
    }
    /**
      Returns the meta information for the query params of a given route. This
      will be overridden to allow support for lazy routes.
         @private
      @method _getQPMeta
      @param {RouteInfo} routeInfo
      @return {Object}
    */
    _getQPMeta(routeInfo) {
      var route = routeInfo.route;
      return route && (0, _object.get)(route, '_qp');
    }
    /**
      Returns a merged query params meta object for a given set of routeInfos.
      Useful for knowing what query params are available for a given route hierarchy.
         @private
      @method _queryParamsFor
      @param {Array<RouteInfo>} routeInfos
      @return {Object}
     */
    _queryParamsFor(routeInfos) {
      var routeInfoLength = routeInfos.length;
      var leafRouteName = routeInfos[routeInfoLength - 1].name;
      var cached = this._qpCache[leafRouteName];
      if (cached !== undefined) {
        return cached;
      }
      var shouldCache = true;
      var map = {};
      var qps = [];
      var qpsByUrlKey = true /* DEBUG */ ? {} : null;
      var qpMeta;
      var urlKey;
      var qpOther;
      for (var routeInfo of routeInfos) {
        qpMeta = this._getQPMeta(routeInfo);
        if (!qpMeta) {
          shouldCache = false;
          continue;
        }
        // Loop over each QP to make sure we don't have any collisions by urlKey
        for (var qp of qpMeta.qps) {
          if (true /* DEBUG */) {
            urlKey = qp.urlKey;
            qpOther = qpsByUrlKey[urlKey];
            if (qpOther && qpOther.controllerName !== qp.controllerName) {
              (true && !(false) && (0, _debug.assert)(`You're not allowed to have more than one controller property map to the same query param key, but both \`${qpOther.scopedPropertyName}\` and \`${qp.scopedPropertyName}\` map to \`${urlKey}\`. You can fix this by mapping one of the controller properties to a different query param key via the \`as\` config option, e.g. \`${qpOther.prop}: { as: 'other-${qpOther.prop}' }\``, false));
            }
            qpsByUrlKey[urlKey] = qp;
          }
          qps.push(qp);
        }
        Object.assign(map, qpMeta.map);
      }
      var finalQPMeta = {
        qps,
        map
      };
      if (shouldCache) {
        this._qpCache[leafRouteName] = finalQPMeta;
      }
      return finalQPMeta;
    }
    /**
      Maps all query param keys to their fully scoped property name of the form
      `controllerName:propName`.
         @private
      @method _fullyScopeQueryParams
      @param {String} leafRouteName
      @param {Array<Object>} contexts
      @param {Object} queryParams
      @return {Void}
    */
    _fullyScopeQueryParams(leafRouteName, contexts, queryParams) {
      var state = calculatePostTransitionState(this, leafRouteName, contexts);
      var routeInfos = state.routeInfos;
      var qpMeta;
      for (var routeInfo of routeInfos) {
        qpMeta = this._getQPMeta(routeInfo);
        if (!qpMeta) {
          continue;
        }
        for (var qp of qpMeta.qps) {
          var presentProp = qp.prop in queryParams && qp.prop || qp.scopedPropertyName in queryParams && qp.scopedPropertyName || qp.urlKey in queryParams && qp.urlKey;
          if (presentProp) {
            if (presentProp !== qp.scopedPropertyName) {
              queryParams[qp.scopedPropertyName] = queryParams[presentProp];
              delete queryParams[presentProp];
            }
          }
        }
      }
    }
    /**
      Hydrates (adds/restores) any query params that have pre-existing values into
      the given queryParams hash. This is what allows query params to be "sticky"
      and restore their last known values for their scope.
         @private
      @method _hydrateUnsuppliedQueryParams
      @param {TransitionState} state
      @param {Object} queryParams
      @return {Void}
    */
    _hydrateUnsuppliedQueryParams(state, queryParams, _fromRouterService) {
      var routeInfos = state.routeInfos;
      var appCache = this._bucketCache;
      var qpMeta;
      var qp;
      var presentProp;
      for (var routeInfo of routeInfos) {
        qpMeta = this._getQPMeta(routeInfo);
        if (!qpMeta) {
          continue;
        }
        // Needs to stay for index loop to avoid throwIfClosureRequired
        for (var j = 0, qpLen = qpMeta.qps.length; j < qpLen; ++j) {
          qp = qpMeta.qps[j];
          (true && !(qp) && (0, _debug.assert)('expected qp', qp));
          presentProp = qp.prop in queryParams && qp.prop || qp.scopedPropertyName in queryParams && qp.scopedPropertyName || qp.urlKey in queryParams && qp.urlKey;
          (true && !(function () {
            if (qp.urlKey === presentProp || qp.scopedPropertyName === presentProp) {
              return true;
            }
            if (_fromRouterService && presentProp !== false && qp.urlKey !== qp.prop) {
              // assumptions (mainly from current transitionTo_test):
              // - this is only supposed to be run when there is an alias to a query param and the alias is used to set the param
              // - when there is no alias: qp.urlKey == qp.prop
              return false;
            }
            return true;
          }()) && (0, _debug.assert)(`You passed the \`${presentProp}\` query parameter during a transition into ${qp.route.routeName}, please update to ${qp.urlKey}`, function () {
            if (qp.urlKey === presentProp || qp.scopedPropertyName === presentProp) {
              return true;
            }
            if (_fromRouterService && presentProp !== false && qp.urlKey !== qp.prop) {
              return false;
            }
            return true;
          }()));
          if (presentProp) {
            if (presentProp !== qp.scopedPropertyName) {
              queryParams[qp.scopedPropertyName] = queryParams[presentProp];
              delete queryParams[presentProp];
            }
          } else {
            var cacheKey = (0, _utils.calculateCacheKey)(qp.route.fullRouteName, qp.parts, state.params);
            (true && !(appCache) && (0, _debug.assert)('ROUTER BUG: expected appCache to be defined. This is an internal bug, please open an issue on Github if you see this message!', appCache));
            queryParams[qp.scopedPropertyName] = appCache.lookup(cacheKey, qp.prop, qp.defaultValue);
          }
        }
      }
    }
    _scheduleLoadingEvent(transition, originRoute) {
      this._cancelSlowTransitionTimer();
      this._slowTransitionTimer = (0, _runloop.scheduleOnce)('routerTransitions', this, this._handleSlowTransition, transition, originRoute);
    }
    _handleSlowTransition(transition, originRoute) {
      if (!this._routerMicrolib.activeTransition) {
        // Don't fire an event if we've since moved on from
        // the transition that put us in a loading state.
        return;
      }
      var targetState = new _internals.RouterState(this, this._routerMicrolib, this._routerMicrolib.activeTransition[_router_js.STATE_SYMBOL]);
      this.set('targetState', targetState);
      transition.trigger(true, 'loading', transition, originRoute);
    }
    _cancelSlowTransitionTimer() {
      if (this._slowTransitionTimer) {
        (0, _runloop.cancel)(this._slowTransitionTimer);
      }
      this._slowTransitionTimer = null;
    }
    // These three helper functions are used to ensure errors aren't
    // re-raised if they're handled in a route's error action.
    _markErrorAsHandled(error) {
      this._handledErrors.add(error);
    }
    _isErrorHandled(error) {
      return this._handledErrors.has(error);
    }
    _clearHandledError(error) {
      this._handledErrors.delete(error);
    }
    _getEngineInstance(_ref) {
      var {
        name,
        instanceId,
        mountPoint
      } = _ref;
      var engineInstances = this._engineInstances;
      var namedInstances = engineInstances[name];
      if (!namedInstances) {
        namedInstances = Object.create(null);
        engineInstances[name] = namedInstances;
      }
      // We just set these!
      (true && !(namedInstances) && (0, _debug.assert)('has namedInstances', namedInstances));
      var engineInstance = namedInstances[instanceId];
      if (!engineInstance) {
        var owner = (0, _owner.getOwner)(this);
        (true && !(owner instanceof _instance.default) && (0, _debug.assert)('Expected router to have EngineInstance as owner', owner instanceof _instance.default));
        (true && !(owner.hasRegistration(`engine:${name}`)) && (0, _debug.assert)(`You attempted to mount the engine '${name}' in your router map, but the engine can not be found.`, owner.hasRegistration(`engine:${name}`)));
        engineInstance = owner.buildChildEngineInstance(name, {
          routable: true,
          mountPoint
        });
        engineInstance.boot();
        namedInstances[instanceId] = engineInstance;
      }
      return engineInstance;
    }
  }
  /*
    Helper function for iterating over routes in a set of routeInfos that are
    at or above the given origin route. Example: if `originRoute` === 'foo.bar'
    and the routeInfos given were for 'foo.bar.baz', then the given callback
    will be invoked with the routes for 'foo.bar', 'foo', and 'application'
    individually.
  
    If the callback returns anything other than `true`, then iteration will stop.
  
    @private
    @param {Route} originRoute
    @param {Array<RouteInfo>} routeInfos
    @param {Function} callback
    @return {Void}
   */
  function forEachRouteAbove(routeInfos, callback) {
    for (var i = routeInfos.length - 1; i >= 0; --i) {
      var routeInfo = routeInfos[i];
      (true && !(routeInfo) && (0, _debug.assert)('has routeInfo', routeInfo));
      var route = routeInfo.route;
      // routeInfo.handler being `undefined` generally means either:
      //
      // 1. an error occurred during creation of the route in question
      // 2. the route is across an async boundary (e.g. within an engine)
      //
      // In both of these cases, we cannot invoke the callback on that specific
      // route, because it just doesn't exist...
      if (route === undefined) {
        continue;
      }
      if (callback(route, routeInfo) !== true) {
        return;
      }
    }
  }
  // These get invoked when an action bubbles above ApplicationRoute
  // and are not meant to be overridable.
  var defaultActionHandlers = {
    willResolveModel(_routeInfos, transition, originRoute) {
      this._scheduleLoadingEvent(transition, originRoute);
    },
    // Attempt to find an appropriate error route or substate to enter.
    error(routeInfos, error, transition) {
      var router = this;
      var routeInfoWithError = routeInfos[routeInfos.length - 1];
      forEachRouteAbove(routeInfos, (route, routeInfo) => {
        // We don't check the leaf most routeInfo since that would
        // technically be below where we're at in the route hierarchy.
        if (routeInfo !== routeInfoWithError) {
          // Check for the existence of an 'error' route.
          var errorRouteName = findRouteStateName(route, 'error');
          if (errorRouteName) {
            router._markErrorAsHandled(error);
            router.intermediateTransitionTo(errorRouteName, error);
            return false;
          }
        }
        // Check for an 'error' substate route
        var errorSubstateName = findRouteSubstateName(route, 'error');
        if (errorSubstateName) {
          router._markErrorAsHandled(error);
          router.intermediateTransitionTo(errorSubstateName, error);
          return false;
        }
        return true;
      });
      logError(error, `Error while processing route: ${transition.targetName}`);
    },
    // Attempt to find an appropriate loading route or substate to enter.
    loading(routeInfos, transition) {
      var router = this;
      var routeInfoWithSlowLoading = routeInfos[routeInfos.length - 1];
      forEachRouteAbove(routeInfos, (route, routeInfo) => {
        // We don't check the leaf most routeInfos since that would
        // technically be below where we're at in the route hierarchy.
        if (routeInfo !== routeInfoWithSlowLoading) {
          // Check for the existence of a 'loading' route.
          var loadingRouteName = findRouteStateName(route, 'loading');
          if (loadingRouteName) {
            router.intermediateTransitionTo(loadingRouteName);
            return false;
          }
        }
        // Check for loading substate
        var loadingSubstateName = findRouteSubstateName(route, 'loading');
        if (loadingSubstateName) {
          router.intermediateTransitionTo(loadingSubstateName);
          return false;
        }
        // Don't bubble above pivot route.
        return transition.pivotHandler !== route;
      });
    }
  };
  function logError(_error, initialMessage) {
    var errorArgs = [];
    var error;
    if (_error && typeof _error === 'object' && typeof _error.errorThrown === 'object') {
      error = _error.errorThrown;
    } else {
      error = _error;
    }
    if (initialMessage) {
      errorArgs.push(initialMessage);
    }
    if (error) {
      if (error.message) {
        errorArgs.push(error.message);
      }
      if (error.stack) {
        errorArgs.push(error.stack);
      }
      if (typeof error === 'string') {
        errorArgs.push(error);
      }
    }
    console.error(...errorArgs); //eslint-disable-line no-console
  }
  /**
    Finds the name of the substate route if it exists for the given route. A
    substate route is of the form `route_state`, such as `foo_loading`.
  
    @private
    @param {Route} route
    @param {String} state
    @return {String}
  */
  function findRouteSubstateName(route, state) {
    var owner = (0, _owner.getOwner)(route);
    (true && !(owner) && (0, _debug.assert)('Route is unexpectedly missing an owner', owner));
    var {
      routeName,
      fullRouteName,
      _router: router
    } = route;
    var substateName = `${routeName}_${state}`;
    var substateNameFull = `${fullRouteName}_${state}`;
    return routeHasBeenDefined(owner, router, substateName, substateNameFull) ? substateNameFull : '';
  }
  /**
    Finds the name of the state route if it exists for the given route. A state
    route is of the form `route.state`, such as `foo.loading`. Properly Handles
    `application` named routes.
  
    @private
    @param {Route} route
    @param {String} state
    @return {String}
  */
  function findRouteStateName(route, state) {
    var owner = (0, _owner.getOwner)(route);
    (true && !(owner) && (0, _debug.assert)('Route is unexpectedly missing an owner', owner));
    var {
      routeName,
      fullRouteName,
      _router: router
    } = route;
    var stateName = routeName === 'application' ? state : `${routeName}.${state}`;
    var stateNameFull = fullRouteName === 'application' ? state : `${fullRouteName}.${state}`;
    return routeHasBeenDefined(owner, router, stateName, stateNameFull) ? stateNameFull : '';
  }
  /**
    Determines whether or not a route has been defined by checking that the route
    is in the Router's map and the owner has a registration for that route.
  
    @private
    @param {Owner} owner
    @param {Router} router
    @param {String} localName
    @param {String} fullName
    @return {Boolean}
  */
  function routeHasBeenDefined(owner, router, localName, fullName) {
    var routerHasRoute = router.hasRoute(fullName);
    var ownerHasRoute = owner.factoryFor(`template:${localName}`) || owner.factoryFor(`route:${localName}`);
    return routerHasRoute && ownerHasRoute;
  }
  function triggerEvent(routeInfos, ignoreFailure, name, args) {
    if (!routeInfos) {
      if (ignoreFailure) {
        return;
      }
      // TODO: update?
      throw new Error(`Can't trigger action '${name}' because your app hasn't finished transitioning into its first route. To trigger an action on destination routes during a transition, you can call \`.send()\` on the \`Transition\` object passed to the \`model/beforeModel/afterModel\` hooks.`);
    }
    var eventWasHandled = false;
    var routeInfo, handler, actionHandler;
    for (var i = routeInfos.length - 1; i >= 0; i--) {
      routeInfo = routeInfos[i];
      (true && !(routeInfo) && (0, _debug.assert)('[BUG] Missing routeInfo', routeInfo));
      handler = routeInfo.route;
      actionHandler = handler && handler.actions && handler.actions[name];
      if (actionHandler) {
        if (actionHandler.apply(handler, args) === true) {
          eventWasHandled = true;
        } else {
          // Should only hit here if a non-bubbling error action is triggered on a route.
          if (name === 'error') {
            (true && !(handler) && (0, _debug.assert)('[BUG] Missing handler', handler));
            handler._router._markErrorAsHandled(args[0]);
          }
          return;
        }
      }
    }
    var defaultHandler = defaultActionHandlers[name];
    if (defaultHandler) {
      defaultHandler.call(this, routeInfos, ...args);
      return;
    }
    if (!eventWasHandled && !ignoreFailure) {
      throw new Error(`Nothing handled the action '${name}'. If you did handle the action, this error can be caused by returning true from an action handler in a controller, causing the action to bubble.`);
    }
  }
  function calculatePostTransitionState(emberRouter, leafRouteName, contexts) {
    var state = emberRouter._routerMicrolib.applyIntent(leafRouteName, contexts);
    var {
      routeInfos,
      params
    } = state;
    for (var routeInfo of routeInfos) {
      // If the routeInfo is not resolved, we serialize the context into params
      if (!routeInfo.isResolved) {
        params[routeInfo.name] = routeInfo.serialize(routeInfo.context);
      } else {
        params[routeInfo.name] = routeInfo.params;
      }
    }
    return state;
  }
  function updatePaths(router) {
    var infos = router._routerMicrolib.currentRouteInfos;
    if (infos.length === 0) {
      return;
    }
    var path = EmberRouter._routePath(infos);
    var info = infos[infos.length - 1];
    (true && !(info) && (0, _debug.assert)('expected info', info));
    var currentRouteName = info.name;
    var location = router.location;
    (true && !(typeof location !== 'string') && (0, _debug.assert)('expected location to not be a string', typeof location !== 'string'));
    var currentURL = location.getURL();
    (0, _object.set)(router, 'currentPath', path);
    (0, _object.set)(router, 'currentRouteName', currentRouteName);
    (0, _object.set)(router, 'currentURL', currentURL);
  }
  function didBeginTransition(transition, router) {
    var routerState = new _internals.RouterState(router, router._routerMicrolib, transition[_router_js.STATE_SYMBOL]);
    if (!router.currentState) {
      router.set('currentState', routerState);
    }
    router.set('targetState', routerState);
    transition.promise = transition.catch(error => {
      if (router._isErrorHandled(error)) {
        router._clearHandledError(error);
      } else {
        throw error;
      }
    }, 'Transition Error');
  }
  function forEachQueryParam(router, routeInfos, queryParams, callback) {
    var qpCache = router._queryParamsFor(routeInfos);
    for (var key in queryParams) {
      if (!Object.prototype.hasOwnProperty.call(queryParams, key)) {
        continue;
      }
      var value = queryParams[key];
      var qp = qpCache.map[key];
      callback(key, value, qp);
    }
  }
  function findLiveRoute(liveRoutes, name) {
    if (!liveRoutes) {
      return;
    }
    var stack = [liveRoutes];
    while (stack.length > 0) {
      var test = stack.shift();
      if (test.render.name === name) {
        return test;
      }
      var outlets = test.outlets;
      for (var outletName in outlets) {
        stack.push(outlets[outletName]);
      }
    }
    return;
  }
  function appendLiveRoute(liveRoutes, defaultParentState, renderOptions) {
    var ownState = {
      render: renderOptions,
      outlets: Object.create(null),
      wasUsed: false
    };
    var target;
    if (renderOptions.into) {
      target = findLiveRoute(liveRoutes, renderOptions.into);
    } else {
      target = defaultParentState;
    }
    if (target) {
      (0, _object.set)(target.outlets, renderOptions.outlet, ownState);
    } else {
      liveRoutes = ownState;
    }
    return {
      liveRoutes,
      ownState
    };
  }
  function representEmptyRoute(liveRoutes, defaultParentState, _ref2) {
    var {
      routeName
    } = _ref2;
    // the route didn't render anything
    var alreadyAppended = findLiveRoute(liveRoutes, routeName);
    if (alreadyAppended) {
      // But some other route has already rendered our default
      // template, so that becomes the default target for any
      // children we may have.
      return alreadyAppended;
    } else {
      // Create an entry to represent our default template name,
      // just so other routes can target it and inherit its place
      // in the outlet hierarchy.
      defaultParentState.outlets['main'] = {
        render: {
          name: routeName,
          outlet: 'main'
        },
        outlets: {}
      };
      return defaultParentState;
    }
  }
  EmberRouter.reopen({
    didTransition: defaultDidTransition,
    willTransition: defaultWillTransition,
    rootURL: '/',
    location: 'hash',
    // FIXME: Does this need to be overrideable via extend?
    url: (0, _object.computed)(function () {
      var location = (0, _object.get)(this, 'location');
      if (typeof location === 'string') {
        return undefined;
      }
      return location.getURL();
    })
  });
  var _default = EmberRouter;
  _exports.default = _default;
});
define("@ember/routing/transition", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
});
define("@ember/runloop/index", ["exports", "@ember/debug", "@ember/-internals/error-handling", "@ember/-internals/metal", "backburner"], function (_exports, _debug, _errorHandling, _metal, _backburner2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports._backburner = void 0;
  _exports._cancelTimers = _cancelTimers;
  _exports._getCurrentRunLoop = _getCurrentRunLoop;
  _exports._hasScheduledTimers = _hasScheduledTimers;
  _exports._rsvpErrorQueue = _exports._queues = void 0;
  _exports.begin = begin;
  _exports.bind = bind;
  _exports.cancel = cancel;
  _exports.debounce = debounce;
  _exports.end = end;
  _exports.join = join;
  _exports.later = later;
  _exports.next = next;
  _exports.once = once;
  _exports.run = run;
  _exports.schedule = schedule;
  _exports.scheduleOnce = scheduleOnce;
  _exports.throttle = throttle;
  var currentRunLoop = null;
  function _getCurrentRunLoop() {
    return currentRunLoop;
  }
  function onBegin(current) {
    currentRunLoop = current;
  }
  function onEnd(_current, next) {
    currentRunLoop = next;
    (0, _metal.flushAsyncObservers)();
  }
  function flush(queueName, next) {
    if (queueName === 'render' || queueName === _rsvpErrorQueue) {
      (0, _metal.flushAsyncObservers)();
    }
    next();
  }
  var _rsvpErrorQueue = `${Math.random()}${Date.now()}`.replace('.', '');
  /**
    Array of named queues. This array determines the order in which queues
    are flushed at the end of the RunLoop. You can define your own queues by
    simply adding the queue name to this array. Normally you should not need
    to inspect or modify this property.
  
    @property queues
    @type Array
    @default ['actions', 'destroy']
    @private
  */
  _exports._rsvpErrorQueue = _rsvpErrorQueue;
  var _queues = ['actions',
  // used in router transitions to prevent unnecessary loading state entry
  // if all context promises resolve on the 'actions' queue first
  'routerTransitions', 'render', 'afterRender', 'destroy',
  // used to re-throw unhandled RSVP rejection errors specifically in this
  // position to avoid breaking anything rendered in the other sections
  _rsvpErrorQueue];
  _exports._queues = _queues;
  var _backburner = new _backburner2.default(_queues, {
    defaultQueue: 'actions',
    onBegin,
    onEnd,
    onErrorTarget: _errorHandling.onErrorTarget,
    onErrorMethod: 'onerror',
    flush
  });
  _exports._backburner = _backburner;
  function run() {
    // @ts-expect-error TS doesn't like our spread args
    return _backburner.run(...arguments);
  }
  function join(methodOrTarget, methodOrArg) {
    for (var _len = arguments.length, additionalArgs = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      additionalArgs[_key - 2] = arguments[_key];
    }
    return _backburner.join(methodOrTarget, methodOrArg, ...additionalArgs);
  }
  function bind() {
    for (var _len2 = arguments.length, curried = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      curried[_key2] = arguments[_key2];
    }
    (true && !(function (methodOrTarget, methodOrArg) {
      // Applies the same logic as backburner parseArgs for detecting if a method
      // is actually being passed.
      var length = arguments.length;
      if (length === 0) {
        return false;
      } else if (length === 1) {
        return typeof methodOrTarget === 'function';
      } else {
        return typeof methodOrArg === 'function' ||
        // second argument is a function
        methodOrTarget !== null && typeof methodOrArg === 'string' && methodOrArg in methodOrTarget ||
        // second argument is the name of a method in first argument
        typeof methodOrTarget === 'function' //first argument is a function
        ;
      }
      // @ts-expect-error TS doesn't like our spread args
    }(...curried)) && (0, _debug.assert)('could not find a suitable method to bind', function (methodOrTarget, methodOrArg) {
      var length = arguments.length;
      if (length === 0) {
        return false;
      } else if (length === 1) {
        return typeof methodOrTarget === 'function';
      } else {
        return typeof methodOrArg === 'function' || methodOrTarget !== null && typeof methodOrArg === 'string' && methodOrArg in methodOrTarget || typeof methodOrTarget === 'function';
      }
    }(...curried))); // @ts-expect-error TS doesn't like our spread args
    return function () {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      return join(...curried.concat(args));
    };
  }
  /**
    Begins a new RunLoop. Any deferred actions invoked after the begin will
    be buffered until you invoke a matching call to `end()`. This is
    a lower-level way to use a RunLoop instead of using `run()`.
  
    ```javascript
    import { begin, end } from '@ember/runloop';
  
    begin();
    // code to be executed within a RunLoop
    end();
    ```
  
    @method begin
    @static
    @for @ember/runloop
    @return {void}
    @public
  */
  function begin() {
    _backburner.begin();
  }
  /**
    Ends a RunLoop. This must be called sometime after you call
    `begin()` to flush any deferred actions. This is a lower-level way
    to use a RunLoop instead of using `run()`.
  
    ```javascript
    import { begin, end } from '@ember/runloop';
  
    begin();
    // code to be executed within a RunLoop
    end();
    ```
  
    @method end
    @static
    @for @ember/runloop
    @return {void}
    @public
  */
  function end() {
    _backburner.end();
  }
  function schedule() {
    // @ts-expect-error TS doesn't like the rest args here
    return _backburner.schedule(...arguments);
  }
  // Used by global test teardown
  function _hasScheduledTimers() {
    return _backburner.hasTimers();
  }
  // Used by global test teardown
  function _cancelTimers() {
    _backburner.cancelTimers();
  }
  function later() {
    return _backburner.later(...arguments);
  }
  function once() {
    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }
    // @ts-expect-error TS doesn't like the rest args here
    return _backburner.scheduleOnce('actions', ...args);
  }
  function scheduleOnce() {
    // @ts-expect-error TS doesn't like the rest args here
    return _backburner.scheduleOnce(...arguments);
  }
  function next() {
    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
      args[_key5] = arguments[_key5];
    }
    return _backburner.later(...args, 1);
  }
  /**
    Cancels a scheduled item. Must be a value returned by `later()`,
    `once()`, `scheduleOnce()`, `next()`, `debounce()`, or
    `throttle()`.
  
    ```javascript
    import {
      next,
      cancel,
      later,
      scheduleOnce,
      once,
      throttle,
      debounce
    } from '@ember/runloop';
  
    let runNext = next(myContext, function() {
      // will not be executed
    });
  
    cancel(runNext);
  
    let runLater = later(myContext, function() {
      // will not be executed
    }, 500);
  
    cancel(runLater);
  
    let runScheduleOnce = scheduleOnce('afterRender', myContext, function() {
      // will not be executed
    });
  
    cancel(runScheduleOnce);
  
    let runOnce = once(myContext, function() {
      // will not be executed
    });
  
    cancel(runOnce);
  
    let throttle = throttle(myContext, function() {
      // will not be executed
    }, 1, false);
  
    cancel(throttle);
  
    let debounce = debounce(myContext, function() {
      // will not be executed
    }, 1);
  
    cancel(debounce);
  
    let debounceImmediate = debounce(myContext, function() {
      // will be executed since we passed in true (immediate)
    }, 100, true);
  
    // the 100ms delay until this method can be called again will be canceled
    cancel(debounceImmediate);
    ```
  
    @method cancel
    @static
    @for @ember/runloop
    @param {Object} timer Timer object to cancel
    @return {Boolean} true if canceled or false/undefined if it wasn't found
    @public
  */
  function cancel(timer) {
    return _backburner.cancel(timer);
  }
  function debounce() {
    // @ts-expect-error TS doesn't like the rest args here
    return _backburner.debounce(...arguments);
  }
  function throttle() {
    // @ts-expect-error TS doesn't like the rest args here
    return _backburner.throttle(...arguments);
  }
});
define("@ember/service/index", ["exports", "@ember/object/-internals", "@ember/-internals/metal"], function (_exports, _internals, _metal) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.inject = inject;
  _exports.service = service;
  function inject() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return (0, _metal.inject)('service', ...args);
  }
  function service() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    return (0, _metal.inject)('service', ...args);
  }
  /**
    @class Service
    @extends EmberObject
    @since 1.10.0
    @public
  */
  class Service extends _internals.FrameworkObject {}
  _exports.default = Service;
  Service.isServiceFactory = true;
});
define("@ember/string/index", ["exports", "@ember/string/lib/string_registry", "@ember/-internals/utils", "@ember/debug", "@ember/-internals/glimmer"], function (_exports, _string_registry, _utils, _debug, _glimmer) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "_getStrings", {
    enumerable: true,
    get: function () {
      return _string_registry.getStrings;
    }
  });
  Object.defineProperty(_exports, "_setStrings", {
    enumerable: true,
    get: function () {
      return _string_registry.setStrings;
    }
  });
  _exports.camelize = camelize;
  _exports.capitalize = capitalize;
  _exports.classify = classify;
  _exports.dasherize = dasherize;
  _exports.decamelize = decamelize;
  _exports.htmlSafe = htmlSafe;
  _exports.isHTMLSafe = isHTMLSafe;
  _exports.underscore = underscore;
  _exports.w = w;
  /**
  This module is deprecated and should not be used.
  See [the deprecations guide](https://deprecations.emberjs.com/v4.x#toc_ember-string-from-ember-module)
  for more details.
  
  @module @ember/string
  */

  var STRING_DASHERIZE_REGEXP = /[ _]/g;
  var STRING_DASHERIZE_CACHE = new _utils.Cache(1000, key => decamelize(key).replace(STRING_DASHERIZE_REGEXP, '-'));
  var STRING_CAMELIZE_REGEXP_1 = /(-|_|\.|\s)+(.)?/g;
  var STRING_CAMELIZE_REGEXP_2 = /(^|\/)([A-Z])/g;
  var CAMELIZE_CACHE = new _utils.Cache(1000, key => key.replace(STRING_CAMELIZE_REGEXP_1, (_match, _separator, chr) => chr ? chr.toUpperCase() : '').replace(STRING_CAMELIZE_REGEXP_2, (match /*, separator, chr */) => match.toLowerCase()));
  var STRING_CLASSIFY_REGEXP_1 = /^(-|_)+(.)?/;
  var STRING_CLASSIFY_REGEXP_2 = /(.)(-|_|\.|\s)+(.)?/g;
  var STRING_CLASSIFY_REGEXP_3 = /(^|\/|\.)([a-z])/g;
  var CLASSIFY_CACHE = new _utils.Cache(1000, str => {
    var replace1 = (_match, _separator, chr) => chr ? `_${chr.toUpperCase()}` : '';
    var replace2 = (_match, initialChar, _separator, chr) => initialChar + (chr ? chr.toUpperCase() : '');
    var parts = str.split('/');
    for (var i = 0; i < parts.length; i++) {
      parts[i] = parts[i].replace(STRING_CLASSIFY_REGEXP_1, replace1).replace(STRING_CLASSIFY_REGEXP_2, replace2);
    }
    return parts.join('/').replace(STRING_CLASSIFY_REGEXP_3, (match /*, separator, chr */) => match.toUpperCase());
  });
  var STRING_UNDERSCORE_REGEXP_1 = /([a-z\d])([A-Z]+)/g;
  var STRING_UNDERSCORE_REGEXP_2 = /-|\s+/g;
  var UNDERSCORE_CACHE = new _utils.Cache(1000, str => str.replace(STRING_UNDERSCORE_REGEXP_1, '$1_$2').replace(STRING_UNDERSCORE_REGEXP_2, '_').toLowerCase());
  var STRING_CAPITALIZE_REGEXP = /(^|\/)([a-z\u00C0-\u024F])/g;
  var CAPITALIZE_CACHE = new _utils.Cache(1000, str => str.replace(STRING_CAPITALIZE_REGEXP, (match /*, separator, chr */) => match.toUpperCase()));
  var STRING_DECAMELIZE_REGEXP = /([a-z\d])([A-Z])/g;
  var DECAMELIZE_CACHE = new _utils.Cache(1000, str => str.replace(STRING_DECAMELIZE_REGEXP, '$1_$2').toLowerCase());
  /**
    Defines string helper methods including string formatting and localization.
  
    @class String
    @public
    @deprecated Add the package `@ember/string` to your project to use in place of this module.
  */
  /**
    Splits a string into separate units separated by spaces, eliminating any
    empty strings in the process.
  
    ```javascript
    import { w } from '@ember/string';
  
    w("alpha beta gamma").forEach(function(key) {
      console.log(key);
    });
  
    // > alpha
    // > beta
    // > gamma
    ```
  
    @method w
    @param {String} str The string to split
    @return {Array} array containing the split strings
    @public
    @deprecated Add `@ember/string` to your package.json
  */
  function w(str) {
    deprecateImportFromInternalString();
    return str.split(/\s+/);
  }
  /**
    Converts a camelized string into all lower case separated by underscores.
  
    ```javascript
    import { decamelize } from '@ember/string';
  
    decamelize('innerHTML');          // 'inner_html'
    decamelize('action_name');        // 'action_name'
    decamelize('css-class-name');     // 'css-class-name'
    decamelize('my favorite items');  // 'my favorite items'
    ```
  
    @method decamelize
    @param {String} str The string to decamelize.
    @return {String} the decamelized string.
    @public
    @deprecated Add `@ember/string` to your package.json
  */
  function decamelize(str) {
    deprecateImportFromInternalString();
    return DECAMELIZE_CACHE.get(str);
  }
  /**
    Replaces underscores, spaces, or camelCase with dashes.
  
    ```javascript
    import { dasherize } from '@ember/string';
  
    dasherize('innerHTML');                // 'inner-html'
    dasherize('action_name');              // 'action-name'
    dasherize('css-class-name');           // 'css-class-name'
    dasherize('my favorite items');        // 'my-favorite-items'
    dasherize('privateDocs/ownerInvoice';  // 'private-docs/owner-invoice'
    ```
  
    @method dasherize
    @param {String} str The string to dasherize.
    @return {String} the dasherized string.
    @public
    @deprecated Add `@ember/string` to your package.json
  */
  function dasherize(str) {
    deprecateImportFromInternalString();
    return STRING_DASHERIZE_CACHE.get(str);
  }
  /**
    Returns the lowerCamelCase form of a string.
  
    ```javascript
    import { camelize } from '@ember/string';
  
    camelize('innerHTML');                   // 'innerHTML'
    camelize('action_name');                 // 'actionName'
    camelize('css-class-name');              // 'cssClassName'
    camelize('my favorite items');           // 'myFavoriteItems'
    camelize('My Favorite Items');           // 'myFavoriteItems'
    camelize('private-docs/owner-invoice');  // 'privateDocs/ownerInvoice'
    ```
  
    @method camelize
    @param {String} str The string to camelize.
    @return {String} the camelized string.
    @public
    @deprecated Add `@ember/string` to your package.json
  */
  function camelize(str) {
    deprecateImportFromInternalString();
    return CAMELIZE_CACHE.get(str);
  }
  /**
    Returns the UpperCamelCase form of a string.
  
    ```javascript
    import { classify } from '@ember/string';
  
    classify('innerHTML');                   // 'InnerHTML'
    classify('action_name');                 // 'ActionName'
    classify('css-class-name');              // 'CssClassName'
    classify('my favorite items');           // 'MyFavoriteItems'
    classify('private-docs/owner-invoice');  // 'PrivateDocs/OwnerInvoice'
    ```
  
    @method classify
    @param {String} str the string to classify
    @return {String} the classified string
    @public
    @deprecated Add `@ember/string` to your package.json
  */
  function classify(str) {
    deprecateImportFromInternalString();
    return CLASSIFY_CACHE.get(str);
  }
  /**
    More general than decamelize. Returns the lower\_case\_and\_underscored
    form of a string.
  
    ```javascript
    import { underscore } from '@ember/string';
  
    underscore('innerHTML');                 // 'inner_html'
    underscore('action_name');               // 'action_name'
    underscore('css-class-name');            // 'css_class_name'
    underscore('my favorite items');         // 'my_favorite_items'
    underscore('privateDocs/ownerInvoice');  // 'private_docs/owner_invoice'
    ```
  
    @method underscore
    @param {String} str The string to underscore.
    @return {String} the underscored string.
    @public
    @deprecated Add `@ember/string` to your package.json
  */
  function underscore(str) {
    deprecateImportFromInternalString();
    return UNDERSCORE_CACHE.get(str);
  }
  /**
    Returns the Capitalized form of a string
  
    ```javascript
    import { capitalize } from '@ember/string';
  
    capitalize('innerHTML')                 // 'InnerHTML'
    capitalize('action_name')               // 'Action_name'
    capitalize('css-class-name')            // 'Css-class-name'
    capitalize('my favorite items')         // 'My favorite items'
    capitalize('privateDocs/ownerInvoice'); // 'PrivateDocs/ownerInvoice'
    ```
  
    @method capitalize
    @param {String} str The string to capitalize.
    @return {String} The capitalized string.
    @public
    @deprecated Add `@ember/string` to your package.json
  */
  function capitalize(str) {
    deprecateImportFromInternalString();
    return CAPITALIZE_CACHE.get(str);
  }
  function deprecateImportFromInternalString() {
    (true && !(false) && (0, _debug.deprecate)('Importing from `@ember/string` without having the `@ember/string` package in your project is deprecated. Please add `@ember/string` to your `package.json', false, {
      id: 'ember-string.add-package',
      for: 'ember-source',
      since: {
        available: '4.10',
        enabled: '4.10'
      },
      until: '5.0.0',
      url: 'https://deprecations.emberjs.com/v4.x/#toc_ember-string-add-package'
    }));
  }
  function deprecateImportFromString(name, message) {
    if (message === void 0) {
      message = `Importing ${name} from '@ember/string' is deprecated. Please import ${name} from '@ember/template' instead.`;
    }
    (true && !(false) && (0, _debug.deprecate)(message, false, {
      id: 'ember-string.htmlsafe-ishtmlsafe',
      for: 'ember-source',
      since: {
        available: '4.10',
        enabled: '4.10'
      },
      until: '5.0.0',
      url: 'https://deprecations.emberjs.com/v3.x/#toc_ember-string-htmlsafe-ishtmlsafe'
    }));
  }
  function htmlSafe(str) {
    deprecateImportFromString('htmlSafe');
    return (0, _glimmer.htmlSafe)(str);
  }
  function isHTMLSafe(str) {
    deprecateImportFromString('isHTMLSafe');
    return (0, _glimmer.isHTMLSafe)(str);
  }
});
define("@ember/string/lib/string_registry", ["exports", "@ember/debug"], function (_exports, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.getStrings = getStrings;
  _exports.setStrings = setStrings;
  // STATE within a module is frowned upon, this exists
  // to support Ember.STRINGS but shield ember internals from this legacy global
  // API.
  var STRINGS = {};
  function setStrings(strings) {
    deprecateEmberStrings();
    STRINGS = strings;
  }
  function getStrings() {
    deprecateEmberStrings();
    return STRINGS;
  }
  function deprecateEmberStrings() {
    (true && !(false) && (0, _debug.deprecate)('Ember.STRINGS is deprecated. It is no longer used by Ember.', false, {
      id: 'ember-strings',
      for: 'ember-source',
      since: {
        available: '4.10',
        enabled: '4.10.'
      },
      until: '5.0.0'
    }));
  }
});
define("@ember/template-compilation/index", ["exports", "ember-template-compiler"], function (_exports, _emberTemplateCompiler) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "compileTemplate", {
    enumerable: true,
    get: function () {
      return _emberTemplateCompiler.compile;
    }
  });
  _exports.precompileTemplate = void 0;
  var precompileTemplate;
  _exports.precompileTemplate = precompileTemplate;
  if (true /* DEBUG */) {
    _exports.precompileTemplate = precompileTemplate = () => {
      throw new Error('Attempted to call `precompileTemplate` at runtime, but this API is meant to be used at compile time. You should use `compileTemplate` instead.');
    };
  }
});
define("@ember/template-factory/index", ["exports", "@glimmer/opcode-compiler"], function (_exports, _opcodeCompiler) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "createTemplateFactory", {
    enumerable: true,
    get: function () {
      return _opcodeCompiler.templateFactory;
    }
  });
});
define("@ember/template/index", ["exports", "@ember/-internals/glimmer"], function (_exports, _glimmer) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "htmlSafe", {
    enumerable: true,
    get: function () {
      return _glimmer.htmlSafe;
    }
  });
  Object.defineProperty(_exports, "isHTMLSafe", {
    enumerable: true,
    get: function () {
      return _glimmer.isHTMLSafe;
    }
  });
});
define("@ember/test/adapter", ["exports", "ember-testing"], function (_exports, _emberTesting) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _emberTesting.Adapter;
  _exports.default = _default;
});
define("@ember/test/index", ["exports", "require"], function (_exports, _require) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.unregisterWaiter = _exports.unregisterHelper = _exports.registerWaiter = _exports.registerHelper = _exports.registerAsyncHelper = void 0;
  var registerAsyncHelper;
  _exports.registerAsyncHelper = registerAsyncHelper;
  var registerHelper;
  _exports.registerHelper = registerHelper;
  var registerWaiter;
  _exports.registerWaiter = registerWaiter;
  var unregisterHelper;
  _exports.unregisterHelper = unregisterHelper;
  var unregisterWaiter;
  _exports.unregisterWaiter = unregisterWaiter;
  if ((0, _require.has)('ember-testing')) {
    var {
      Test
    } = (0, _require.default)("ember-testing");
    _exports.registerAsyncHelper = registerAsyncHelper = Test.registerAsyncHelper;
    _exports.registerHelper = registerHelper = Test.registerHelper;
    _exports.registerWaiter = registerWaiter = Test.registerWaiter;
    _exports.unregisterHelper = unregisterHelper = Test.unregisterHelper;
    _exports.unregisterWaiter = unregisterWaiter = Test.unregisterWaiter;
  } else {
    var testingNotAvailableMessage = () => {
      throw new Error('Attempted to use test utilities, but `ember-testing` was not included');
    };
    _exports.registerAsyncHelper = registerAsyncHelper = testingNotAvailableMessage;
    _exports.registerHelper = registerHelper = testingNotAvailableMessage;
    _exports.registerWaiter = registerWaiter = testingNotAvailableMessage;
    _exports.unregisterHelper = unregisterHelper = testingNotAvailableMessage;
    _exports.unregisterWaiter = unregisterWaiter = testingNotAvailableMessage;
  }
});
define("@ember/utils/index", ["exports", "@ember/utils/lib/is_none", "@ember/utils/lib/is_blank", "@ember/utils/lib/is_empty", "@ember/utils/lib/is_present", "@ember/utils/lib/is-equal", "@ember/utils/lib/type-of", "@ember/utils/lib/compare"], function (_exports, _is_none, _is_blank, _is_empty, _is_present, _isEqual, _typeOf, _compare) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "compare", {
    enumerable: true,
    get: function () {
      return _compare.default;
    }
  });
  Object.defineProperty(_exports, "isBlank", {
    enumerable: true,
    get: function () {
      return _is_blank.default;
    }
  });
  Object.defineProperty(_exports, "isEmpty", {
    enumerable: true,
    get: function () {
      return _is_empty.default;
    }
  });
  Object.defineProperty(_exports, "isEqual", {
    enumerable: true,
    get: function () {
      return _isEqual.default;
    }
  });
  Object.defineProperty(_exports, "isNone", {
    enumerable: true,
    get: function () {
      return _is_none.default;
    }
  });
  Object.defineProperty(_exports, "isPresent", {
    enumerable: true,
    get: function () {
      return _is_present.default;
    }
  });
  Object.defineProperty(_exports, "typeOf", {
    enumerable: true,
    get: function () {
      return _typeOf.default;
    }
  });
});
define("@ember/utils/lib/compare", ["exports", "@ember/utils/lib/type-of", "@ember/-internals/runtime", "@ember/debug"], function (_exports, _typeOf, _runtime, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = compare;
  var TYPE_ORDER = {
    undefined: 0,
    null: 1,
    boolean: 2,
    number: 3,
    string: 4,
    array: 5,
    object: 6,
    instance: 7,
    function: 8,
    class: 9,
    date: 10,
    regexp: 11,
    filelist: 12,
    error: 13
  };
  //
  // the spaceship operator
  //
  //                      `. ___
  //                     __,' __`.                _..----....____
  //         __...--.'``;.   ,.   ;``--..__     .'    ,-._    _.-'
  //   _..-''-------'   `'   `'   `'     O ``-''._   (,;') _,'
  // ,'________________                          \`-._`-','
  //  `._              ```````````------...___   '-.._'-:
  //     ```--.._      ,.                     ````--...__\-.
  //             `.--. `-` "INFINITY IS LESS     ____    |  |`
  //               `. `.   THAN BEYOND"        ,'`````.  ;  ;`
  //                 `._`.        __________   `.      \'__/`
  //                    `-:._____/______/___/____`.     \  `
  //                                |       `._    `.    \
  //                                `._________`-.   `.   `.___
  //                                              SSt  `------'`
  function spaceship(a, b) {
    // SAFETY: `Math.sign` always returns `-1` for negative, `0` for zero, and `1`
    // for positive numbers. (The extra precision is useful for the way we use
    // this in the context of `compare`.)
    return Math.sign(a - b);
  }
  /**
   @module @ember/utils
  */
  /**
   Compares two javascript values and returns:
  
    - -1 if the first is smaller than the second,
    - 0 if both are equal,
    - 1 if the first is greater than the second.
  
    ```javascript
    import { compare } from '@ember/utils';
  
    compare('hello', 'hello');  // 0
    compare('abc', 'dfg');      // -1
    compare(2, 1);              // 1
    ```
  
   If the types of the two objects are different precedence occurs in the
   following order, with types earlier in the list considered `<` types
   later in the list:
  
    - undefined
    - null
    - boolean
    - number
    - string
    - array
    - object
    - instance
    - function
    - class
    - date
  
    ```javascript
    import { compare } from '@ember/utils';
  
    compare('hello', 50);       // 1
    compare(50, 'hello');       // -1
    ```
  
   @method compare
   @for @ember/utils
   @static
   @param {Object} v First value to compare
   @param {Object} w Second value to compare
   @return {Number} -1 if v < w, 0 if v = w and 1 if v > w.
   @public
  */
  function compare(v, w) {
    if (v === w) {
      return 0;
    }
    var type1 = (0, _typeOf.default)(v);
    var type2 = (0, _typeOf.default)(w);
    if (type1 === 'instance' && isComparable(v) && v.constructor.compare) {
      return v.constructor.compare(v, w);
    }
    if (type2 === 'instance' && isComparable(w) && w.constructor.compare) {
      // SAFETY: Multiplying by a negative just changes the sign
      return w.constructor.compare(w, v) * -1;
    }
    var res = spaceship(TYPE_ORDER[type1], TYPE_ORDER[type2]);
    if (res !== 0) {
      return res;
    }
    // types are equal - so we have to check values now
    switch (type1) {
      case 'boolean':
        (true && !(typeof v === 'boolean' && typeof w === 'boolean') && (0, _debug.assert)('both are boolean', typeof v === 'boolean' && typeof w === 'boolean'));
        return spaceship(Number(v), Number(w));
      case 'number':
        (true && !(typeof v === 'number' && typeof w === 'number') && (0, _debug.assert)('both are numbers', typeof v === 'number' && typeof w === 'number'));
        return spaceship(v, w);
      case 'string':
        (true && !(typeof v === 'string' && typeof w === 'string') && (0, _debug.assert)('both are strings', typeof v === 'string' && typeof w === 'string'));
        return spaceship(v.localeCompare(w), 0);
      case 'array':
        {
          (true && !(Array.isArray(v) && Array.isArray(w)) && (0, _debug.assert)('both are arrays', Array.isArray(v) && Array.isArray(w)));
          var vLen = v.length;
          var wLen = w.length;
          var len = Math.min(vLen, wLen);
          for (var i = 0; i < len; i++) {
            var r = compare(v[i], w[i]);
            if (r !== 0) {
              return r;
            }
          }
          // all elements are equal now
          // shorter array should be ordered first
          return spaceship(vLen, wLen);
        }
      case 'instance':
        if (isComparable(v) && v.compare) {
          return v.compare(v, w);
        }
        return 0;
      case 'date':
        (true && !(v instanceof Date && w instanceof Date) && (0, _debug.assert)('both are dates', v instanceof Date && w instanceof Date));
        return spaceship(v.getTime(), w.getTime());
      default:
        return 0;
    }
  }
  function isComparable(value) {
    return _runtime.Comparable.detect(value);
  }
});
define("@ember/utils/lib/is-equal", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = isEqual;
  /**
   @module @ember/utils
  */
  /**
    Compares two objects, returning true if they are equal.
  
    ```javascript
    import { isEqual } from '@ember/utils';
  
    isEqual('hello', 'hello');                   // true
    isEqual(1, 2);                               // false
    ```
  
    `isEqual` is a more specific comparison than a triple equal comparison.
    It will call the `isEqual` instance method on the objects being
    compared, allowing finer control over when objects should be considered
    equal to each other.
  
    ```javascript
    import { isEqual } from '@ember/utils';
    import EmberObject from '@ember/object';
  
    let Person = EmberObject.extend({
      isEqual(other) { return this.ssn == other.ssn; }
    });
  
    let personA = Person.create({name: 'Muhammad Ali', ssn: '123-45-6789'});
    let personB = Person.create({name: 'Cassius Clay', ssn: '123-45-6789'});
  
    isEqual(personA, personB); // true
    ```
  
    Due to the expense of array comparisons, collections will never be equal to
    each other even if each of their items are equal to each other.
  
    ```javascript
    import { isEqual } from '@ember/utils';
  
    isEqual([4, 2], [4, 2]);                     // false
    ```
  
    @method isEqual
    @for @ember/utils
    @static
    @param {Object} a first object to compare
    @param {Object} b second object to compare
    @return {Boolean}
    @public
  */
  function isEqual(a, b) {
    if (a && typeof a.isEqual === 'function') {
      return a.isEqual(b);
    }
    if (a instanceof Date && b instanceof Date) {
      return a.getTime() === b.getTime();
    }
    return a === b;
  }
});
define("@ember/utils/lib/is_blank", ["exports", "@ember/utils/lib/is_empty"], function (_exports, _is_empty) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = isBlank;
  /**
   @module @ember/utils
  */
  /**
    A value is blank if it is empty or a whitespace string.
  
    ```javascript
    import { isBlank } from '@ember/utils';
  
    isBlank(null);            // true
    isBlank(undefined);       // true
    isBlank('');              // true
    isBlank([]);              // true
    isBlank('\n\t');          // true
    isBlank('  ');            // true
    isBlank({});              // false
    isBlank('\n\t Hello');    // false
    isBlank('Hello world');   // false
    isBlank([1,2,3]);         // false
    ```
  
    @method isBlank
    @static
    @for @ember/utils
    @param {Object} obj Value to test
    @return {Boolean}
    @since 1.5.0
    @public
  */
  function isBlank(obj) {
    return (0, _is_empty.default)(obj) || typeof obj === 'string' && /\S/.test(obj) === false;
  }
});
define("@ember/utils/lib/is_empty", ["exports", "@ember/object", "@ember/-internals/metal"], function (_exports, _object, _metal) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = isEmpty;
  /**
   @module @ember/utils
  */
  /**
    Verifies that a value is `null` or `undefined`, an empty string, or an empty
    array.
  
    Constrains the rules on `isNone` by returning true for empty strings and
    empty arrays.
  
    If the value is an object with a `size` property of type number, it is used
    to check emptiness.
  
    ```javascript
    isEmpty(null);             // true
    isEmpty(undefined);        // true
    isEmpty('');               // true
    isEmpty([]);               // true
    isEmpty({ size: 0});       // true
    isEmpty({});               // false
    isEmpty('Adam Hawkins');   // false
    isEmpty([0,1,2]);          // false
    isEmpty('\n\t');           // false
    isEmpty('  ');             // false
    isEmpty({ size: 1 })       // false
    isEmpty({ size: () => 0 }) // false
    ```
  
    @method isEmpty
    @static
    @for @ember/utils
    @param {Object} obj Value to test
    @return {Boolean}
    @public
  */
  function isEmpty(obj) {
    if (obj === null || obj === undefined) {
      return true;
    }
    if (!(0, _metal.hasUnknownProperty)(obj) && typeof obj.size === 'number') {
      return !obj.size;
    }
    if (typeof obj === 'object') {
      var size = (0, _object.get)(obj, 'size');
      if (typeof size === 'number') {
        return !size;
      }
      var length = (0, _object.get)(obj, 'length');
      if (typeof length === 'number') {
        return !length;
      }
    }
    if (typeof obj.length === 'number' && typeof obj !== 'function') {
      return !obj.length;
    }
    return false;
  }
});
define("@ember/utils/lib/is_none", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = isNone;
  /**
   @module @ember/utils
  */
  /**
    Returns true if the passed value is null or undefined. This avoids errors
    from JSLint complaining about use of ==, which can be technically
    confusing.
  
    ```javascript
    isNone(null);          // true
    isNone(undefined);     // true
    isNone('');            // false
    isNone([]);            // false
    isNone(function() {}); // false
    ```
  
    @method isNone
    @static
    @for @ember/utils
    @param {Object} obj Value to test
    @return {Boolean}
    @public
  */
  function isNone(obj) {
    return obj === null || obj === undefined;
  }
});
define("@ember/utils/lib/is_present", ["exports", "@ember/utils/lib/is_blank"], function (_exports, _is_blank) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = isPresent;
  /**
   @module @ember/utils
  */
  /**
    A value is present if it not `isBlank`.
  
    ```javascript
    isPresent(null);            // false
    isPresent(undefined);       // false
    isPresent('');              // false
    isPresent('  ');            // false
    isPresent('\n\t');          // false
    isPresent([]);              // false
    isPresent({ length: 0 });   // false
    isPresent(false);           // true
    isPresent(true);            // true
    isPresent('string');        // true
    isPresent(0);               // true
    isPresent(function() {});   // true
    isPresent({});              // true
    isPresent('\n\t Hello');    // true
    isPresent([1, 2, 3]);       // true
    ```
  
    @method isPresent
    @static
    @for @ember/utils
    @param {Object} obj Value to test
    @return {Boolean}
    @since 1.8.0
    @public
  */
  function isPresent(obj) {
    return !(0, _is_blank.default)(obj);
  }
});
define("@ember/utils/lib/type-of", ["exports", "@ember/object/core"], function (_exports, _core) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = typeOf;
  // ........................................
  // TYPING & ARRAY MESSAGING
  //
  var TYPE_MAP = {
    '[object Boolean]': 'boolean',
    '[object Number]': 'number',
    '[object String]': 'string',
    '[object Function]': 'function',
    '[object AsyncFunction]': 'function',
    '[object Array]': 'array',
    '[object Date]': 'date',
    '[object RegExp]': 'regexp',
    '[object Object]': 'object',
    '[object FileList]': 'filelist'
  };
  var {
    toString
  } = Object.prototype;
  /**
   @module @ember/utils
  */
  /**
    Returns a consistent type for the passed object.
  
    Use this instead of the built-in `typeof` to get the type of an item.
    It will return the same result across all browsers and includes a bit
    more detail. Here is what will be returned:
  
        | Return Value  | Meaning                                              |
        |---------------|------------------------------------------------------|
        | 'string'      | String primitive or String object.                   |
        | 'number'      | Number primitive or Number object.                   |
        | 'boolean'     | Boolean primitive or Boolean object.                 |
        | 'null'        | Null value                                           |
        | 'undefined'   | Undefined value                                      |
        | 'function'    | A function                                           |
        | 'array'       | An instance of Array                                 |
        | 'regexp'      | An instance of RegExp                                |
        | 'date'        | An instance of Date                                  |
        | 'filelist'    | An instance of FileList                              |
        | 'class'       | An Ember class (created using EmberObject.extend())  |
        | 'instance'    | An Ember object instance                             |
        | 'error'       | An instance of the Error object                      |
        | 'object'      | A JavaScript object not inheriting from EmberObject  |
  
    Examples:
  
    ```javascript
    import { A } from '@ember/array';
    import { typeOf } from '@ember/utils';
    import EmberObject from '@ember/object';
  
    typeOf();                       // 'undefined'
    typeOf(null);                   // 'null'
    typeOf(undefined);              // 'undefined'
    typeOf('michael');              // 'string'
    typeOf(new String('michael'));  // 'string'
    typeOf(101);                    // 'number'
    typeOf(new Number(101));        // 'number'
    typeOf(true);                   // 'boolean'
    typeOf(new Boolean(true));      // 'boolean'
    typeOf(A);                      // 'function'
    typeOf(A());                    // 'array'
    typeOf([1, 2, 90]);             // 'array'
    typeOf(/abc/);                  // 'regexp'
    typeOf(new Date());             // 'date'
    typeOf(event.target.files);     // 'filelist'
    typeOf(EmberObject.extend());   // 'class'
    typeOf(EmberObject.create());   // 'instance'
    typeOf(new Error('teamocil'));  // 'error'
  
    // 'normal' JavaScript object
    typeOf({ a: 'b' });             // 'object'
    ```
  
    @method typeOf
    @for @ember/utils
    @param item the item to check
    @return {String} the type
    @public
    @static
  */
  function typeOf(item) {
    if (item === null) {
      return 'null';
    }
    if (item === undefined) {
      return 'undefined';
    }
    var ret = TYPE_MAP[toString.call(item)] || 'object';
    if (ret === 'function') {
      if (_core.default.detect(item)) {
        ret = 'class';
      }
    } else if (ret === 'object') {
      if (item instanceof Error) {
        ret = 'error';
      } else if (item instanceof _core.default) {
        ret = 'instance';
      } else if (item instanceof Date) {
        ret = 'date';
      }
    }
    return ret;
  }
});
define("@ember/version/index", ["exports", "ember/version"], function (_exports, _version) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "VERSION", {
    enumerable: true,
    get: function () {
      return _version.default;
    }
  });
});
define("@glimmer/destroyable", ["exports", "@glimmer/util", "@glimmer/global-context"], function (_exports, _util, _globalContext) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports._hasDestroyableChildren = _hasDestroyableChildren;
  _exports.assertDestroyablesDestroyed = void 0;
  _exports.associateDestroyableChild = associateDestroyableChild;
  _exports.destroy = destroy;
  _exports.destroyChildren = destroyChildren;
  _exports.enableDestroyableTracking = void 0;
  _exports.isDestroyed = isDestroyed;
  _exports.isDestroying = isDestroying;
  _exports.registerDestructor = registerDestructor;
  _exports.unregisterDestructor = unregisterDestructor;
  var DESTROYABLE_META = new WeakMap();
  function push(collection, newItem) {
    if (collection === null) {
      return newItem;
    } else if (Array.isArray(collection)) {
      collection.push(newItem);
      return collection;
    } else {
      return [collection, newItem];
    }
  }
  function iterate(collection, fn) {
    if (Array.isArray(collection)) {
      for (var i = 0; i < collection.length; i++) {
        fn(collection[i]);
      }
    } else if (collection !== null) {
      fn(collection);
    }
  }
  function remove(collection, item, message) {
    if (true /* DEBUG */) {
      var collectionIsItem = collection === item;
      var collectionContainsItem = Array.isArray(collection) && collection.indexOf(item) !== -1;
      if (!collectionIsItem && !collectionContainsItem) {
        throw new Error(String(message));
      }
    }
    if (Array.isArray(collection) && collection.length > 1) {
      var index = collection.indexOf(item);
      collection.splice(index, 1);
      return collection;
    } else {
      return null;
    }
  }
  function getDestroyableMeta(destroyable) {
    var meta = DESTROYABLE_META.get(destroyable);
    if (meta === undefined) {
      meta = {
        parents: null,
        children: null,
        eagerDestructors: null,
        destructors: null,
        state: 0
        /* Live */
      };

      if (true /* DEBUG */) {
        meta.source = destroyable;
      }
      DESTROYABLE_META.set(destroyable, meta);
    }
    return meta;
  }
  function associateDestroyableChild(parent, child) {
    if (true /* DEBUG */ && isDestroying(parent)) {
      throw new Error('Attempted to associate a destroyable child with an object that is already destroying or destroyed');
    }
    var parentMeta = getDestroyableMeta(parent);
    var childMeta = getDestroyableMeta(child);
    parentMeta.children = push(parentMeta.children, child);
    childMeta.parents = push(childMeta.parents, parent);
    return child;
  }
  function registerDestructor(destroyable, destructor, eager) {
    if (eager === void 0) {
      eager = false;
    }
    if (true /* DEBUG */ && isDestroying(destroyable)) {
      throw new Error('Attempted to register a destructor with an object that is already destroying or destroyed');
    }
    var meta = getDestroyableMeta(destroyable);
    var destructorsKey = eager === true ? 'eagerDestructors' : 'destructors';
    meta[destructorsKey] = push(meta[destructorsKey], destructor);
    return destructor;
  }
  function unregisterDestructor(destroyable, destructor, eager) {
    if (eager === void 0) {
      eager = false;
    }
    if (true /* DEBUG */ && isDestroying(destroyable)) {
      throw new Error('Attempted to unregister a destructor with an object that is already destroying or destroyed');
    }
    var meta = getDestroyableMeta(destroyable);
    var destructorsKey = eager === true ? 'eagerDestructors' : 'destructors';
    meta[destructorsKey] = remove(meta[destructorsKey], destructor, true /* DEBUG */ && 'attempted to remove a destructor that was not registered with the destroyable');
  } ////////////

  function destroy(destroyable) {
    var meta = getDestroyableMeta(destroyable);
    if (meta.state >= 1
    /* Destroying */) return;
    var {
      parents,
      children,
      eagerDestructors,
      destructors
    } = meta;
    meta.state = 1
    /* Destroying */;

    iterate(children, destroy);
    iterate(eagerDestructors, destructor => destructor(destroyable));
    iterate(destructors, destructor => (0, _globalContext.scheduleDestroy)(destroyable, destructor));
    (0, _globalContext.scheduleDestroyed)(() => {
      iterate(parents, parent => removeChildFromParent(destroyable, parent));
      meta.state = 2
      /* Destroyed */;
    });
  }

  function removeChildFromParent(child, parent) {
    var parentMeta = getDestroyableMeta(parent);
    if (parentMeta.state === 0
    /* Live */) {
      parentMeta.children = remove(parentMeta.children, child, true /* DEBUG */ && "attempted to remove child from parent, but the parent's children did not contain the child. This is likely a bug with destructors.");
    }
  }
  function destroyChildren(destroyable) {
    var {
      children
    } = getDestroyableMeta(destroyable);
    iterate(children, destroy);
  }
  function _hasDestroyableChildren(destroyable) {
    var meta = DESTROYABLE_META.get(destroyable);
    return meta === undefined ? false : meta.children !== null;
  }
  function isDestroying(destroyable) {
    var meta = DESTROYABLE_META.get(destroyable);
    return meta === undefined ? false : meta.state >= 1
    /* Destroying */;
  }

  function isDestroyed(destroyable) {
    var meta = DESTROYABLE_META.get(destroyable);
    return meta === undefined ? false : meta.state >= 2
    /* Destroyed */;
  } ////////////

  var enableDestroyableTracking;
  _exports.enableDestroyableTracking = enableDestroyableTracking;
  var assertDestroyablesDestroyed;
  _exports.assertDestroyablesDestroyed = assertDestroyablesDestroyed;
  if (true /* DEBUG */) {
    var isTesting = false;
    _exports.enableDestroyableTracking = enableDestroyableTracking = () => {
      if (isTesting) {
        // Reset destroyable meta just in case, before throwing the error
        DESTROYABLE_META = new WeakMap();
        throw new Error('Attempted to start destroyable testing, but you did not end the previous destroyable test. Did you forget to call `assertDestroyablesDestroyed()`');
      }
      isTesting = true;
      DESTROYABLE_META = new Map();
    };
    _exports.assertDestroyablesDestroyed = assertDestroyablesDestroyed = () => {
      if (!isTesting) {
        throw new Error('Attempted to assert destroyables destroyed, but you did not start a destroyable test. Did you forget to call `enableDestroyableTracking()`');
      }
      isTesting = false;
      var map = DESTROYABLE_META;
      DESTROYABLE_META = new WeakMap();
      var undestroyed = [];
      map.forEach(meta => {
        if (meta.state !== 2
        /* Destroyed */) {
          undestroyed.push(meta.source);
        }
      });
      if (undestroyed.length > 0) {
        var objectsToString = undestroyed.map(_util.debugToString).join('\n    ');
        var error = new Error(`Some destroyables were not destroyed during this test:\n    ${objectsToString}`);
        error.destroyables = undestroyed;
        throw error;
      }
    };
  }
});
define("@glimmer/encoder", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.InstructionEncoderImpl = void 0;
  class InstructionEncoderImpl {
    constructor(buffer) {
      this.buffer = buffer;
      this.size = 0;
    }
    encode(type, machine) {
      if (type > 255
      /* TYPE_SIZE */) {
        throw new Error(`Opcode type over 8-bits. Got ${type}.`);
      }
      var first = type | machine | arguments.length - 2 << 8
      /* ARG_SHIFT */;

      this.buffer.push(first);
      for (var i = 2; i < arguments.length; i++) {
        var op = arguments[i];
        if (true /* DEBUG */ && typeof op === 'number' && op > 2147483647
        /* MAX_SIZE */) {
          throw new Error(`Operand over 32-bits. Got ${op}.`);
        }
        this.buffer.push(op);
      }
      this.size = this.buffer.length;
    }
    patch(position, target) {
      if (this.buffer[position + 1] === -1) {
        this.buffer[position + 1] = target;
      } else {
        throw new Error('Trying to patch operand in populated slot instead of a reserved slot.');
      }
    }
  }
  _exports.InstructionEncoderImpl = InstructionEncoderImpl;
});
define("@glimmer/env", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.DEBUG = _exports.CI = void 0;
  var DEBUG = false;
  _exports.DEBUG = DEBUG;
  var CI = false;
  _exports.CI = CI;
});
define("@glimmer/global-context", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.warnIfStyleNotTrusted = _exports.toIterator = _exports.toBool = _exports.testOverrideGlobalContext = _exports.setProp = _exports.setPath = _exports.scheduleRevalidate = _exports.scheduleDestroyed = _exports.scheduleDestroy = _exports.getProp = _exports.getPath = _exports.deprecate = _exports.default = _exports.assertGlobalContextWasSet = _exports.assert = _exports.FEATURE_DEFAULT_HELPER_MANAGER = void 0;
  /**
   * This package contains global context functions for Glimmer. These functions
   * are set by the embedding environment and must be set before initial render.
   *
   * These functions should meet the following criteria:
   *
   * - Must be provided by the embedder, due to having framework specific
   *   behaviors (e.g. interop with classic Ember behaviors that should not be
   *   upstreamed) or to being out of scope for the VM (e.g. scheduling a
   *   revalidation)
   * - Never differ between render roots
   * - Never change over time
   *
   */

  var FEATURE_DEFAULT_HELPER_MANAGER = true; //////////

  /**
   * Schedules a VM revalidation.
   *
   * Note: this has a default value so that tags can warm themselves when first loaded.
   */
  _exports.FEATURE_DEFAULT_HELPER_MANAGER = FEATURE_DEFAULT_HELPER_MANAGER;
  var scheduleRevalidate = () => {};
  /**
   * Schedules a destructor to run
   *
   * @param destroyable The destroyable being destroyed
   * @param destructor The destructor being scheduled
   */
  _exports.scheduleRevalidate = scheduleRevalidate;
  var scheduleDestroy;
  /**
   * Finalizes destruction
   *
   * @param finalizer finalizer function
   */
  _exports.scheduleDestroy = scheduleDestroy;
  var scheduleDestroyed;
  /**
   * Hook to provide iterators for `{{each}}` loops
   *
   * @param value The value to create an iterator for
   */
  _exports.scheduleDestroyed = scheduleDestroyed;
  var toIterator;
  /**
   * Hook to specify truthiness within Glimmer templates
   *
   * @param value The value to convert to a boolean
   */
  _exports.toIterator = toIterator;
  var toBool;
  /**
   * Hook for specifying how Glimmer should access properties in cases where it
   * needs to. For instance, accessing an object's values in templates.
   *
   * @param obj The object provided to get a value from
   * @param path The path to get the value from
   */
  _exports.toBool = toBool;
  var getProp;
  /**
   * Hook for specifying how Glimmer should update props in cases where it needs
   * to. For instance, when updating a template reference (e.g. 2-way-binding)
   *
   * @param obj The object provided to get a value from
   * @param prop The prop to set the value at
   * @param value The value to set the value to
   */
  _exports.getProp = getProp;
  var setProp;
  /**
   * Hook for specifying how Glimmer should access paths in cases where it needs
   * to. For instance, the `key` value of `{{each}}` loops.
   *
   * @param obj The object provided to get a value from
   * @param path The path to get the value from
   */
  _exports.setProp = setProp;
  var getPath;
  /**
   * Hook for specifying how Glimmer should update paths in cases where it needs
   * to. For instance, when updating a template reference (e.g. 2-way-binding)
   *
   * @param obj The object provided to get a value from
   * @param path The path to get the value from
   */
  _exports.getPath = getPath;
  var setPath;
  /**
   * Hook to warn if a style binding string or value was not marked as trusted
   * (e.g. HTMLSafe)
   */
  _exports.setPath = setPath;
  var warnIfStyleNotTrusted;
  /**
   * Hook to customize assertion messages in the VM. Usages can be stripped out
   * by using the @glimmer/vm-babel-plugins package.
   */
  _exports.warnIfStyleNotTrusted = warnIfStyleNotTrusted;
  var assert;
  /**
   * Hook to customize deprecation messages in the VM. Usages can be stripped out
   * by using the @glimmer/vm-babel-plugins package.
   */
  _exports.assert = assert;
  var deprecate;
  _exports.deprecate = deprecate;
  var globalContextWasSet = false;
  function setGlobalContext(context) {
    var _a;
    if (true /* DEBUG */) {
      if (globalContextWasSet) {
        throw new Error('Attempted to set the global context twice. This should only be set once.');
      }
      globalContextWasSet = true;
    }
    _exports.scheduleRevalidate = scheduleRevalidate = context.scheduleRevalidate;
    _exports.scheduleDestroy = scheduleDestroy = context.scheduleDestroy;
    _exports.scheduleDestroyed = scheduleDestroyed = context.scheduleDestroyed;
    _exports.toIterator = toIterator = context.toIterator;
    _exports.toBool = toBool = context.toBool;
    _exports.getProp = getProp = context.getProp;
    _exports.setProp = setProp = context.setProp;
    _exports.getPath = getPath = context.getPath;
    _exports.setPath = setPath = context.setPath;
    _exports.warnIfStyleNotTrusted = warnIfStyleNotTrusted = context.warnIfStyleNotTrusted;
    _exports.assert = assert = context.assert;
    _exports.deprecate = deprecate = context.deprecate;
    if (typeof ((_a = context.FEATURES) === null || _a === void 0 ? void 0 : _a.DEFAULT_HELPER_MANAGER) === 'boolean') {
      _exports.FEATURE_DEFAULT_HELPER_MANAGER = FEATURE_DEFAULT_HELPER_MANAGER = context.FEATURES.DEFAULT_HELPER_MANAGER;
    }
  }
  var assertGlobalContextWasSet;
  _exports.assertGlobalContextWasSet = assertGlobalContextWasSet;
  var testOverrideGlobalContext;
  _exports.testOverrideGlobalContext = testOverrideGlobalContext;
  if (true /* DEBUG */) {
    _exports.assertGlobalContextWasSet = assertGlobalContextWasSet = () => {
      if (globalContextWasSet === false) {
        throw new Error('The global context for Glimmer VM was not set. You must set these global context functions to let Glimmer VM know how to accomplish certain operations. You can do this by importing `setGlobalContext` from `@glimmer/global-context`');
      }
    };
    _exports.testOverrideGlobalContext = testOverrideGlobalContext = context => {
      var originalGlobalContext = globalContextWasSet ? {
        scheduleRevalidate,
        scheduleDestroy,
        scheduleDestroyed,
        toIterator,
        toBool,
        getProp,
        setProp,
        getPath,
        setPath,
        warnIfStyleNotTrusted,
        assert,
        deprecate
      } : null;
      if (context === null) {
        globalContextWasSet = false;
      } else {
        globalContextWasSet = true;
      } // We use `undefined as any` here to unset the values when resetting the
      // context at the end of a test.

      _exports.scheduleRevalidate = scheduleRevalidate = (context === null || context === void 0 ? void 0 : context.scheduleRevalidate) || undefined;
      _exports.scheduleDestroy = scheduleDestroy = (context === null || context === void 0 ? void 0 : context.scheduleDestroy) || undefined;
      _exports.scheduleDestroyed = scheduleDestroyed = (context === null || context === void 0 ? void 0 : context.scheduleDestroyed) || undefined;
      _exports.toIterator = toIterator = (context === null || context === void 0 ? void 0 : context.toIterator) || undefined;
      _exports.toBool = toBool = (context === null || context === void 0 ? void 0 : context.toBool) || undefined;
      _exports.getProp = getProp = (context === null || context === void 0 ? void 0 : context.getProp) || undefined;
      _exports.setProp = setProp = (context === null || context === void 0 ? void 0 : context.setProp) || undefined;
      _exports.getPath = getPath = (context === null || context === void 0 ? void 0 : context.getPath) || undefined;
      _exports.setPath = setPath = (context === null || context === void 0 ? void 0 : context.setPath) || undefined;
      _exports.warnIfStyleNotTrusted = warnIfStyleNotTrusted = (context === null || context === void 0 ? void 0 : context.warnIfStyleNotTrusted) || undefined;
      _exports.assert = assert = (context === null || context === void 0 ? void 0 : context.assert) || undefined;
      _exports.deprecate = deprecate = (context === null || context === void 0 ? void 0 : context.deprecate) || undefined;
      return originalGlobalContext;
    };
  }
  var _default = setGlobalContext;
  _exports.default = _default;
});
define("@glimmer/low-level", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Storage = _exports.Stack = void 0;
  class Storage {
    constructor() {
      this.array = [];
      this.next = 0;
    }
    add(element) {
      var {
        next: slot,
        array
      } = this;
      if (slot === array.length) {
        this.next++;
      } else {
        var prev = array[slot];
        this.next = prev;
      }
      this.array[slot] = element;
      return slot;
    }
    deref(pointer) {
      return this.array[pointer];
    }
    drop(pointer) {
      this.array[pointer] = this.next;
      this.next = pointer;
    }
  }
  _exports.Storage = Storage;
  class Stack {
    constructor(vec) {
      if (vec === void 0) {
        vec = [];
      }
      this.vec = vec;
    }
    clone() {
      return new Stack(this.vec.slice());
    }
    sliceFrom(start) {
      return new Stack(this.vec.slice(start));
    }
    slice(start, end) {
      return new Stack(this.vec.slice(start, end));
    }
    copy(from, to) {
      this.vec[to] = this.vec[from];
    } // TODO: how to model u64 argument?

    writeRaw(pos, value) {
      // TODO: Grow?
      this.vec[pos] = value;
    } // TODO: partially decoded enum?

    getRaw(pos) {
      return this.vec[pos];
    }
    reset() {
      this.vec.length = 0;
    }
    len() {
      return this.vec.length;
    }
  }
  _exports.Stack = Stack;
});
define("@glimmer/manager", ["exports", "@glimmer/util", "@glimmer/reference", "@glimmer/validator", "@glimmer/destroyable", "@glimmer/global-context"], function (_exports, _util, _reference, _validator, _destroyable, _globalContext) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.CustomModifierManager = _exports.CustomHelperManager = _exports.CustomComponentManager = void 0;
  _exports.capabilityFlagsFrom = capabilityFlagsFrom;
  _exports.componentCapabilities = componentCapabilities;
  _exports.getComponentTemplate = getComponentTemplate;
  _exports.getCustomTagFor = getCustomTagFor;
  _exports.getInternalComponentManager = getInternalComponentManager;
  _exports.getInternalHelperManager = getInternalHelperManager;
  _exports.getInternalModifierManager = getInternalModifierManager;
  _exports.hasCapability = hasCapability;
  _exports.hasDestroyable = hasDestroyable;
  _exports.hasInternalComponentManager = hasInternalComponentManager;
  _exports.hasInternalHelperManager = hasInternalHelperManager;
  _exports.hasInternalModifierManager = hasInternalModifierManager;
  _exports.hasValue = hasValue;
  _exports.helperCapabilities = helperCapabilities;
  _exports.managerHasCapability = managerHasCapability;
  _exports.modifierCapabilities = modifierCapabilities;
  _exports.setComponentManager = setComponentManager;
  _exports.setComponentTemplate = setComponentTemplate;
  _exports.setCustomTagFor = setCustomTagFor;
  _exports.setHelperManager = setHelperManager;
  _exports.setInternalComponentManager = setInternalComponentManager;
  _exports.setInternalHelperManager = setInternalHelperManager;
  _exports.setInternalModifierManager = setInternalModifierManager;
  _exports.setModifierManager = setModifierManager;
  var FROM_CAPABILITIES = true /* DEBUG */ ? new _util._WeakSet() : undefined;
  function buildCapabilities(capabilities) {
    if (true /* DEBUG */) {
      FROM_CAPABILITIES.add(capabilities);
      Object.freeze(capabilities);
    }
    return capabilities;
  }
  /**
   * Converts a ComponentCapabilities object into a 32-bit integer representation.
   */

  function capabilityFlagsFrom(capabilities) {
    return 0 | (capabilities.dynamicLayout ? 1
    /* DynamicLayout */ : 0) | (capabilities.dynamicTag ? 2
    /* DynamicTag */ : 0) | (capabilities.prepareArgs ? 4
    /* PrepareArgs */ : 0) | (capabilities.createArgs ? 8
    /* CreateArgs */ : 0) | (capabilities.attributeHook ? 16
    /* AttributeHook */ : 0) | (capabilities.elementHook ? 32
    /* ElementHook */ : 0) | (capabilities.dynamicScope ? 64
    /* DynamicScope */ : 0) | (capabilities.createCaller ? 128
    /* CreateCaller */ : 0) | (capabilities.updateHook ? 256
    /* UpdateHook */ : 0) | (capabilities.createInstance ? 512
    /* CreateInstance */ : 0) | (capabilities.wrapped ? 1024
    /* Wrapped */ : 0) | (capabilities.willDestroy ? 2048
    /* WillDestroy */ : 0) | (capabilities.hasSubOwner ? 4096
    /* HasSubOwner */ : 0);
  }
  function managerHasCapability(_manager, capabilities, capability) {
    return !!(capabilities & capability);
  }
  function hasCapability(capabilities, capability) {
    return !!(capabilities & capability);
  }
  var CUSTOM_TAG_FOR = new WeakMap();
  function getCustomTagFor(obj) {
    return CUSTOM_TAG_FOR.get(obj);
  }
  function setCustomTagFor(obj, customTagFn) {
    CUSTOM_TAG_FOR.set(obj, customTagFn);
  }
  function convertToInt(prop) {
    if (typeof prop === 'symbol') return null;
    var num = Number(prop);
    if (isNaN(num)) return null;
    return num % 1 === 0 ? num : null;
  }
  function tagForNamedArg(namedArgs, key) {
    return (0, _validator.track)(() => {
      if (key in namedArgs) {
        (0, _reference.valueForRef)(namedArgs[key]);
      }
    });
  }
  function tagForPositionalArg(positionalArgs, key) {
    return (0, _validator.track)(() => {
      if (key === '[]') {
        // consume all of the tags in the positional array
        positionalArgs.forEach(_reference.valueForRef);
      }
      var parsed = convertToInt(key);
      if (parsed !== null && parsed < positionalArgs.length) {
        // consume the tag of the referenced index
        (0, _reference.valueForRef)(positionalArgs[parsed]);
      }
    });
  }
  var argsProxyFor;
  class NamedArgsProxy {
    constructor(named) {
      this.named = named;
    }
    get(_target, prop) {
      var ref = this.named[prop];
      if (ref !== undefined) {
        return (0, _reference.valueForRef)(ref);
      }
    }
    has(_target, prop) {
      return prop in this.named;
    }
    ownKeys() {
      return Object.keys(this.named);
    }
    isExtensible() {
      return false;
    }
    getOwnPropertyDescriptor(_target, prop) {
      if (true /* DEBUG */ && !(prop in this.named)) {
        throw new Error(`args proxies do not have real property descriptors, so you should never need to call getOwnPropertyDescriptor yourself. This code exists for enumerability, such as in for-in loops and Object.keys(). Attempted to get the descriptor for \`${String(prop)}\``);
      }
      return {
        enumerable: true,
        configurable: true
      };
    }
  }
  class PositionalArgsProxy {
    constructor(positional) {
      this.positional = positional;
    }
    get(target, prop) {
      var {
        positional
      } = this;
      if (prop === 'length') {
        return positional.length;
      }
      var parsed = convertToInt(prop);
      if (parsed !== null && parsed < positional.length) {
        return (0, _reference.valueForRef)(positional[parsed]);
      }
      return target[prop];
    }
    isExtensible() {
      return false;
    }
    has(_target, prop) {
      var parsed = convertToInt(prop);
      return parsed !== null && parsed < this.positional.length;
    }
  }
  if (_util.HAS_NATIVE_PROXY) {
    argsProxyFor = (capturedArgs, type) => {
      var {
        named,
        positional
      } = capturedArgs;
      var getNamedTag = (_obj, key) => tagForNamedArg(named, key);
      var getPositionalTag = (_obj, key) => tagForPositionalArg(positional, key);
      var namedHandler = new NamedArgsProxy(named);
      var positionalHandler = new PositionalArgsProxy(positional);
      var namedTarget = Object.create(null);
      var positionalTarget = [];
      if (true /* DEBUG */) {
        var setHandler = function (_target, prop) {
          throw new Error(`You attempted to set ${String(prop)} on the arguments of a component, helper, or modifier. Arguments are immutable and cannot be updated directly; they always represent the values that are passed down. If you want to set default values, you should use a getter and local tracked state instead.`);
        };
        var forInDebugHandler = () => {
          throw new Error(`Object.keys() was called on the positional arguments array for a ${type}, which is not supported. This function is a low-level function that should not need to be called for positional argument arrays. You may be attempting to iterate over the array using for...in instead of for...of.`);
        };
        namedHandler.set = setHandler;
        positionalHandler.set = setHandler;
        positionalHandler.ownKeys = forInDebugHandler;
      }
      var namedProxy = new Proxy(namedTarget, namedHandler);
      var positionalProxy = new Proxy(positionalTarget, positionalHandler);
      setCustomTagFor(namedProxy, getNamedTag);
      setCustomTagFor(positionalProxy, getPositionalTag);
      return {
        named: namedProxy,
        positional: positionalProxy
      };
    };
  } else {
    argsProxyFor = (capturedArgs, _type) => {
      var {
        named,
        positional
      } = capturedArgs;
      var getNamedTag = (_obj, key) => tagForNamedArg(named, key);
      var getPositionalTag = (_obj, key) => tagForPositionalArg(positional, key);
      var namedProxy = {};
      var positionalProxy = [];
      setCustomTagFor(namedProxy, getNamedTag);
      setCustomTagFor(positionalProxy, getPositionalTag);
      Object.keys(named).forEach(name => {
        Object.defineProperty(namedProxy, name, {
          enumerable: true,
          configurable: true,
          get() {
            return (0, _reference.valueForRef)(named[name]);
          }
        });
      });
      positional.forEach((ref, index) => {
        Object.defineProperty(positionalProxy, index, {
          enumerable: true,
          configurable: true,
          get() {
            return (0, _reference.valueForRef)(ref);
          }
        });
      });
      if (true /* DEBUG */) {
        // Prevent mutations in development mode. This will not prevent the
        // proxy from updating, but will prevent assigning new values or pushing
        // for instance.
        Object.freeze(namedProxy);
        Object.freeze(positionalProxy);
      }
      return {
        named: namedProxy,
        positional: positionalProxy
      };
    };
  }
  function helperCapabilities(managerAPI, options) {
    if (options === void 0) {
      options = {};
    }
    if (true /* DEBUG */ && managerAPI !== '3.23') {
      throw new Error('Invalid helper manager compatibility specified');
    }
    if (true /* DEBUG */ && (!(options.hasValue || options.hasScheduledEffect) || options.hasValue && options.hasScheduledEffect)) {
      throw new Error('You must pass either the `hasValue` OR the `hasScheduledEffect` capability when defining a helper manager. Passing neither, or both, is not permitted.');
    }
    if (true /* DEBUG */ && options.hasScheduledEffect) {
      throw new Error('The `hasScheduledEffect` capability has not yet been implemented for helper managers. Please pass `hasValue` instead');
    }
    return buildCapabilities({
      hasValue: Boolean(options.hasValue),
      hasDestroyable: Boolean(options.hasDestroyable),
      hasScheduledEffect: Boolean(options.hasScheduledEffect)
    });
  } ////////////

  function hasValue(manager) {
    return manager.capabilities.hasValue;
  }
  function hasDestroyable(manager) {
    return manager.capabilities.hasDestroyable;
  } ////////////

  class CustomHelperManager {
    constructor(factory) {
      this.factory = factory;
      this.helperManagerDelegates = new WeakMap();
      this.undefinedDelegate = null;
    }
    getDelegateForOwner(owner) {
      var delegate = this.helperManagerDelegates.get(owner);
      if (delegate === undefined) {
        var {
          factory
        } = this;
        delegate = factory(owner);
        if (true /* DEBUG */ && !FROM_CAPABILITIES.has(delegate.capabilities)) {
          // TODO: This error message should make sense in both Ember and Glimmer https://github.com/glimmerjs/glimmer-vm/issues/1200
          throw new Error(`Custom helper managers must have a \`capabilities\` property that is the result of calling the \`capabilities('3.23')\` (imported via \`import { capabilities } from '@ember/helper';\`). Received: \`${JSON.stringify(delegate.capabilities)}\` for: \`${delegate}\``);
        }
        this.helperManagerDelegates.set(owner, delegate);
      }
      return delegate;
    }
    getDelegateFor(owner) {
      if (owner === undefined) {
        var {
          undefinedDelegate
        } = this;
        if (undefinedDelegate === null) {
          var {
            factory
          } = this;
          this.undefinedDelegate = undefinedDelegate = factory(undefined);
        }
        return undefinedDelegate;
      } else {
        return this.getDelegateForOwner(owner);
      }
    }
    getHelper(definition) {
      return (capturedArgs, owner) => {
        var _a, _b;
        var manager = this.getDelegateFor(owner);
        var args = argsProxyFor(capturedArgs, 'helper');
        var bucket = manager.createHelper(definition, args);
        if (hasValue(manager)) {
          var cache = (0, _reference.createComputeRef)(() => manager.getValue(bucket), null, true /* DEBUG */ && manager.getDebugName && manager.getDebugName(definition));
          if (hasDestroyable(manager)) {
            (0, _destroyable.associateDestroyableChild)(cache, manager.getDestroyable(bucket));
          }
          return cache;
        } else if (hasDestroyable(manager)) {
          var ref = (0, _reference.createConstRef)(undefined, true /* DEBUG */ && ((_b = (_a = manager.getDebugName) === null || _a === void 0 ? void 0 : _a.call(manager, definition)) !== null && _b !== void 0 ? _b : 'unknown helper'));
          (0, _destroyable.associateDestroyableChild)(ref, manager.getDestroyable(bucket));
          return ref;
        } else {
          return _reference.UNDEFINED_REFERENCE;
        }
      };
    }
  }
  _exports.CustomHelperManager = CustomHelperManager;
  class FunctionHelperManager {
    constructor() {
      this.capabilities = buildCapabilities({
        hasValue: true,
        hasDestroyable: false,
        hasScheduledEffect: false
      });
    }
    createHelper(fn, args) {
      return {
        fn,
        args
      };
    }
    getValue(_ref) {
      var {
        fn,
        args
      } = _ref;
      if (Object.keys(args.named).length > 0) {
        var argsForFn = [...args.positional, args.named];
        return fn(...argsForFn);
      }
      return fn(...args.positional);
    }
    getDebugName(fn) {
      if (fn.name) {
        return `(helper function ${fn.name})`;
      }
      return '(anonymous helper function)';
    }
  }
  var COMPONENT_MANAGERS = new WeakMap();
  var MODIFIER_MANAGERS = new WeakMap();
  var HELPER_MANAGERS = new WeakMap(); ///////////

  var getPrototypeOf = Object.getPrototypeOf;
  function setManager(map, manager, obj) {
    if (true /* DEBUG */ && (typeof obj !== 'object' || obj === null) && typeof obj !== 'function') {
      throw new Error(`Attempted to set a manager on a non-object value. Managers can only be associated with objects or functions. Value was ${(0, _util.debugToString)(obj)}`);
    }
    if (true /* DEBUG */ && map.has(obj)) {
      throw new Error(`Attempted to set the same type of manager multiple times on a value. You can only associate one manager of each type with a given value. Value was ${(0, _util.debugToString)(obj)}`);
    }
    map.set(obj, manager);
    return obj;
  }
  function getManager(map, obj) {
    var pointer = obj;
    while (pointer !== undefined && pointer !== null) {
      var manager = map.get(pointer);
      if (manager !== undefined) {
        return manager;
      }
      pointer = getPrototypeOf(pointer);
    }
    return undefined;
  } ///////////

  function setInternalModifierManager(manager, definition) {
    return setManager(MODIFIER_MANAGERS, manager, definition);
  }
  function getInternalModifierManager(definition, isOptional) {
    if (true /* DEBUG */ && typeof definition !== 'function' && (typeof definition !== 'object' || definition === null)) {
      throw new Error(`Attempted to use a value as a modifier, but it was not an object or function. Modifier definitions must be objects or functions with an associated modifier manager. The value was: ${definition}`);
    }
    var manager = getManager(MODIFIER_MANAGERS, definition);
    if (manager === undefined) {
      if (isOptional === true) {
        return null;
      } else if (true /* DEBUG */) {
        throw new Error(`Attempted to load a modifier, but there wasn't a modifier manager associated with the definition. The definition was: ${(0, _util.debugToString)(definition)}`);
      }
    }
    return manager;
  }
  function setInternalHelperManager(manager, definition) {
    return setManager(HELPER_MANAGERS, manager, definition);
  }
  var DEFAULT_MANAGER = new CustomHelperManager(() => new FunctionHelperManager());
  function getInternalHelperManager(definition, isOptional) {
    if (true /* DEBUG */ && typeof definition !== 'function' && (typeof definition !== 'object' || definition === null)) {
      throw new Error(`Attempted to use a value as a helper, but it was not an object or function. Helper definitions must be objects or functions with an associated helper manager. The value was: ${definition}`);
    }
    var manager = getManager(HELPER_MANAGERS, definition);
    if (_globalContext.FEATURE_DEFAULT_HELPER_MANAGER) {
      // Functions are special-cased because functions are defined
      // as the "default" helper, per: https://github.com/emberjs/rfcs/pull/756
      if (manager === undefined && typeof definition === 'function') {
        manager = DEFAULT_MANAGER;
      }
    }
    if (manager) {
      return manager;
    } else if (isOptional === true) {
      return null;
    } else if (true /* DEBUG */) {
      throw new Error(`Attempted to load a helper, but there wasn't a helper manager associated with the definition. The definition was: ${(0, _util.debugToString)(definition)}`);
    }
    return null;
  }
  function setInternalComponentManager(factory, obj) {
    return setManager(COMPONENT_MANAGERS, factory, obj);
  }
  function getInternalComponentManager(definition, isOptional) {
    if (true /* DEBUG */ && typeof definition !== 'function' && (typeof definition !== 'object' || definition === null)) {
      throw new Error(`Attempted to use a value as a component, but it was not an object or function. Component definitions must be objects or functions with an associated component manager. The value was: ${definition}`);
    }
    var manager = getManager(COMPONENT_MANAGERS, definition);
    if (manager === undefined) {
      if (isOptional === true) {
        return null;
      } else if (true /* DEBUG */) {
        throw new Error(`Attempted to load a component, but there wasn't a component manager associated with the definition. The definition was: ${(0, _util.debugToString)(definition)}`);
      }
    }
    return manager;
  } ///////////

  function hasInternalComponentManager(definition) {
    return hasDefaultComponentManager(definition) || getManager(COMPONENT_MANAGERS, definition) !== undefined;
  }
  function hasInternalHelperManager(definition) {
    return hasDefaultHelperManager(definition) || getManager(HELPER_MANAGERS, definition) !== undefined;
  }
  function hasInternalModifierManager(definition) {
    return hasDefaultModifierManager(definition) || getManager(MODIFIER_MANAGERS, definition) !== undefined;
  }
  function hasDefaultComponentManager(_definition) {
    return false;
  }
  function hasDefaultHelperManager(definition) {
    if (_globalContext.FEATURE_DEFAULT_HELPER_MANAGER) {
      return typeof definition === 'function';
    }
    return false;
  }
  function hasDefaultModifierManager(_definition) {
    return false;
  }
  var CAPABILITIES = {
    dynamicLayout: false,
    dynamicTag: false,
    prepareArgs: false,
    createArgs: true,
    attributeHook: false,
    elementHook: false,
    createCaller: false,
    dynamicScope: true,
    updateHook: true,
    createInstance: true,
    wrapped: false,
    willDestroy: false,
    hasSubOwner: false
  };
  function componentCapabilities(managerAPI, options) {
    if (options === void 0) {
      options = {};
    }
    if (true /* DEBUG */ && managerAPI !== '3.13') {
      throw new Error('Invalid component manager compatibility specified');
    }
    var updateHook = Boolean(options.updateHook);
    return buildCapabilities({
      asyncLifeCycleCallbacks: Boolean(options.asyncLifecycleCallbacks),
      destructor: Boolean(options.destructor),
      updateHook
    });
  }
  function hasAsyncLifeCycleCallbacks(delegate) {
    return delegate.capabilities.asyncLifeCycleCallbacks;
  }
  function hasUpdateHook(delegate) {
    return delegate.capabilities.updateHook;
  }
  function hasAsyncUpdateHook(delegate) {
    return hasAsyncLifeCycleCallbacks(delegate) && hasUpdateHook(delegate);
  }
  function hasDestructors(delegate) {
    return delegate.capabilities.destructor;
  }
  /**
    The CustomComponentManager allows addons to provide custom component
    implementations that integrate seamlessly into Ember. This is accomplished
    through a delegate, registered with the custom component manager, which
    implements a set of hooks that determine component behavior.
  
    To create a custom component manager, instantiate a new CustomComponentManager
    class and pass the delegate as the first argument:
  
    ```js
    let manager = new CustomComponentManager({
      // ...delegate implementation...
    });
    ```
  
    ## Delegate Hooks
  
    Throughout the lifecycle of a component, the component manager will invoke
    delegate hooks that are responsible for surfacing those lifecycle changes to
    the end developer.
  
    * `create()` - invoked when a new instance of a component should be created
    * `update()` - invoked when the arguments passed to a component change
    * `getContext()` - returns the object that should be
  */

  class CustomComponentManager {
    constructor(factory) {
      this.factory = factory;
      this.componentManagerDelegates = new WeakMap();
    }
    getDelegateFor(owner) {
      var {
        componentManagerDelegates
      } = this;
      var delegate = componentManagerDelegates.get(owner);
      if (delegate === undefined) {
        var {
          factory
        } = this;
        delegate = factory(owner);
        if (true /* DEBUG */ && !FROM_CAPABILITIES.has(delegate.capabilities)) {
          // TODO: This error message should make sense in both Ember and Glimmer https://github.com/glimmerjs/glimmer-vm/issues/1200
          throw new Error(`Custom component managers must have a \`capabilities\` property that is the result of calling the \`capabilities('3.13')\` (imported via \`import { capabilities } from '@ember/component';\`). Received: \`${JSON.stringify(delegate.capabilities)}\` for: \`${delegate}\``);
        }
        componentManagerDelegates.set(owner, delegate);
      }
      return delegate;
    }
    create(owner, definition, vmArgs) {
      var delegate = this.getDelegateFor(owner);
      var args = argsProxyFor(vmArgs.capture(), 'component');
      var component = delegate.createComponent(definition, args);
      return new CustomComponentState(component, delegate, args);
    }
    getDebugName(definition) {
      return typeof definition === 'function' ? definition.name : definition.toString();
    }
    update(bucket) {
      var {
        delegate
      } = bucket;
      if (hasUpdateHook(delegate)) {
        var {
          component,
          args
        } = bucket;
        delegate.updateComponent(component, args);
      }
    }
    didCreate(_ref2) {
      var {
        component,
        delegate
      } = _ref2;
      if (hasAsyncLifeCycleCallbacks(delegate)) {
        delegate.didCreateComponent(component);
      }
    }
    didUpdate(_ref3) {
      var {
        component,
        delegate
      } = _ref3;
      if (hasAsyncUpdateHook(delegate)) {
        delegate.didUpdateComponent(component);
      }
    }
    didRenderLayout() {}
    didUpdateLayout() {}
    getSelf(_ref4) {
      var {
        component,
        delegate
      } = _ref4;
      return (0, _reference.createConstRef)(delegate.getContext(component), 'this');
    }
    getDestroyable(bucket) {
      var {
        delegate
      } = bucket;
      if (hasDestructors(delegate)) {
        var {
          component
        } = bucket;
        (0, _destroyable.registerDestructor)(bucket, () => delegate.destroyComponent(component));
        return bucket;
      }
      return null;
    }
    getCapabilities() {
      return CAPABILITIES;
    }
  }
  /**
   * Stores internal state about a component instance after it's been created.
   */
  _exports.CustomComponentManager = CustomComponentManager;
  class CustomComponentState {
    constructor(component, delegate, args) {
      this.component = component;
      this.delegate = delegate;
      this.args = args;
    }
  }
  function modifierCapabilities(managerAPI, optionalFeatures) {
    if (optionalFeatures === void 0) {
      optionalFeatures = {};
    }
    if (true /* DEBUG */ && managerAPI !== '3.22') {
      throw new Error('Invalid modifier manager compatibility specified');
    }
    return buildCapabilities({
      disableAutoTracking: Boolean(optionalFeatures.disableAutoTracking)
    });
  }
  /**
    The CustomModifierManager allows addons to provide custom modifier
    implementations that integrate seamlessly into Ember. This is accomplished
    through a delegate, registered with the custom modifier manager, which
    implements a set of hooks that determine modifier behavior.
    To create a custom modifier manager, instantiate a new CustomModifierManager
    class and pass the delegate as the first argument:
  
    ```js
    let manager = new CustomModifierManager({
      // ...delegate implementation...
    });
    ```
  
    ## Delegate Hooks
  
    Throughout the lifecycle of a modifier, the modifier manager will invoke
    delegate hooks that are responsible for surfacing those lifecycle changes to
    the end developer.
    * `createModifier()` - invoked when a new instance of a modifier should be created
    * `installModifier()` - invoked when the modifier is installed on the element
    * `updateModifier()` - invoked when the arguments passed to a modifier change
    * `destroyModifier()` - invoked when the modifier is about to be destroyed
  */

  class CustomModifierManager {
    constructor(factory) {
      this.factory = factory;
      this.componentManagerDelegates = new WeakMap();
    }
    getDelegateFor(owner) {
      var {
        componentManagerDelegates
      } = this;
      var delegate = componentManagerDelegates.get(owner);
      if (delegate === undefined) {
        var {
          factory
        } = this;
        delegate = factory(owner);
        if (true /* DEBUG */ && !FROM_CAPABILITIES.has(delegate.capabilities)) {
          // TODO: This error message should make sense in both Ember and Glimmer https://github.com/glimmerjs/glimmer-vm/issues/1200
          throw new Error(`Custom modifier managers must have a \`capabilities\` property that is the result of calling the \`capabilities('3.22')\` (imported via \`import { capabilities } from '@ember/modifier';\`). Received: \`${JSON.stringify(delegate.capabilities)}\` for: \`${delegate}\``);
        }
        componentManagerDelegates.set(owner, delegate);
      }
      return delegate;
    }
    create(owner, element, definition, capturedArgs) {
      var delegate = this.getDelegateFor(owner);
      var args = argsProxyFor(capturedArgs, 'modifier');
      var instance = delegate.createModifier(definition, args);
      var tag = (0, _validator.createUpdatableTag)();
      var state;
      state = {
        tag,
        element,
        delegate,
        args,
        modifier: instance
      };
      if (true /* DEBUG */) {
        state.debugName = typeof definition === 'function' ? definition.name : definition.toString();
      }
      (0, _destroyable.registerDestructor)(state, () => delegate.destroyModifier(instance, args));
      return state;
    }
    getDebugName(_ref5) {
      var {
        debugName
      } = _ref5;
      return debugName;
    }
    getTag(_ref6) {
      var {
        tag
      } = _ref6;
      return tag;
    }
    install(_ref7) {
      var {
        element,
        args,
        modifier,
        delegate
      } = _ref7;
      var {
        capabilities
      } = delegate;
      if (capabilities.disableAutoTracking === true) {
        (0, _validator.untrack)(() => delegate.installModifier(modifier, element, args));
      } else {
        delegate.installModifier(modifier, element, args);
      }
    }
    update(_ref8) {
      var {
        args,
        modifier,
        delegate
      } = _ref8;
      var {
        capabilities
      } = delegate;
      if (capabilities.disableAutoTracking === true) {
        (0, _validator.untrack)(() => delegate.updateModifier(modifier, args));
      } else {
        delegate.updateModifier(modifier, args);
      }
    }
    getDestroyable(state) {
      return state;
    }
  }
  _exports.CustomModifierManager = CustomModifierManager;
  function setComponentManager(factory, obj) {
    return setInternalComponentManager(new CustomComponentManager(factory), obj);
  }
  function setModifierManager(factory, obj) {
    return setInternalModifierManager(new CustomModifierManager(factory), obj);
  }
  function setHelperManager(factory, obj) {
    return setInternalHelperManager(new CustomHelperManager(factory), obj);
  }
  var TEMPLATES = new WeakMap();
  var getPrototypeOf$1 = Object.getPrototypeOf;
  function setComponentTemplate(factory, obj) {
    if (true /* DEBUG */ && !(obj !== null && (typeof obj === 'object' || typeof obj === 'function'))) {
      throw new Error(`Cannot call \`setComponentTemplate\` on \`${(0, _util.debugToString)(obj)}\``);
    }
    if (true /* DEBUG */ && TEMPLATES.has(obj)) {
      throw new Error(`Cannot call \`setComponentTemplate\` multiple times on the same class (\`${(0, _util.debugToString)(obj)}\`)`);
    }
    TEMPLATES.set(obj, factory);
    return obj;
  }
  function getComponentTemplate(obj) {
    var pointer = obj;
    while (pointer !== null) {
      var template = TEMPLATES.get(pointer);
      if (template !== undefined) {
        return template;
      }
      pointer = getPrototypeOf$1(pointer);
    }
    return undefined;
  }
});
define("@glimmer/node", ["exports", "@glimmer/runtime", "@simple-dom/document"], function (_exports, _runtime, _document) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.NodeDOMTreeConstruction = void 0;
  _exports.serializeBuilder = serializeBuilder;
  class NodeDOMTreeConstruction extends _runtime.DOMTreeConstruction {
    constructor(doc) {
      super(doc || (0, _document.default)());
    } // override to prevent usage of `this.document` until after the constructor

    setupUselessElement() {}
    insertHTMLBefore(parent, reference, html) {
      var raw = this.document.createRawHTMLSection(html);
      parent.insertBefore(raw, reference);
      return new _runtime.ConcreteBounds(parent, raw, raw);
    } // override to avoid SVG detection/work when in node (this is not needed in SSR)

    createElement(tag) {
      return this.document.createElement(tag);
    } // override to avoid namespace shenanigans when in node (this is not needed in SSR)

    setAttribute(element, name, value) {
      element.setAttribute(name, value);
    }
  }
  _exports.NodeDOMTreeConstruction = NodeDOMTreeConstruction;
  var TEXT_NODE = 3;
  var NEEDS_EXTRA_CLOSE = new WeakMap();
  function currentNode(cursor) {
    var {
      element,
      nextSibling
    } = cursor;
    if (nextSibling === null) {
      return element.lastChild;
    } else {
      return nextSibling.previousSibling;
    }
  }
  class SerializeBuilder extends _runtime.NewElementBuilder {
    constructor() {
      super(...arguments);
      this.serializeBlockDepth = 0;
    }
    __openBlock() {
      var {
        tagName
      } = this.element;
      if (tagName !== 'TITLE' && tagName !== 'SCRIPT' && tagName !== 'STYLE') {
        var depth = this.serializeBlockDepth++;
        this.__appendComment(`%+b:${depth}%`);
      }
      super.__openBlock();
    }
    __closeBlock() {
      var {
        tagName
      } = this.element;
      super.__closeBlock();
      if (tagName !== 'TITLE' && tagName !== 'SCRIPT' && tagName !== 'STYLE') {
        var depth = --this.serializeBlockDepth;
        this.__appendComment(`%-b:${depth}%`);
      }
    }
    __appendHTML(html) {
      var {
        tagName
      } = this.element;
      if (tagName === 'TITLE' || tagName === 'SCRIPT' || tagName === 'STYLE') {
        return super.__appendHTML(html);
      } // Do we need to run the html tokenizer here?

      var first = this.__appendComment('%glmr%');
      if (tagName === 'TABLE') {
        var openIndex = html.indexOf('<');
        if (openIndex > -1) {
          var tr = html.slice(openIndex + 1, openIndex + 3);
          if (tr === 'tr') {
            html = `<tbody>${html}</tbody>`;
          }
        }
      }
      if (html === '') {
        this.__appendComment('% %');
      } else {
        super.__appendHTML(html);
      }
      var last = this.__appendComment('%glmr%');
      return new _runtime.ConcreteBounds(this.element, first, last);
    }
    __appendText(string) {
      var {
        tagName
      } = this.element;
      var current = currentNode(this);
      if (tagName === 'TITLE' || tagName === 'SCRIPT' || tagName === 'STYLE') {
        return super.__appendText(string);
      } else if (string === '') {
        return this.__appendComment('% %');
      } else if (current && current.nodeType === TEXT_NODE) {
        this.__appendComment('%|%');
      }
      return super.__appendText(string);
    }
    closeElement() {
      if (NEEDS_EXTRA_CLOSE.has(this.element)) {
        NEEDS_EXTRA_CLOSE.delete(this.element);
        super.closeElement();
      }
      return super.closeElement();
    }
    openElement(tag) {
      if (tag === 'tr') {
        if (this.element.tagName !== 'TBODY' && this.element.tagName !== 'THEAD' && this.element.tagName !== 'TFOOT') {
          this.openElement('tbody'); // This prevents the closeBlock comment from being re-parented
          // under the auto inserted tbody. Rehydration builder needs to
          // account for the insertion since it is injected here and not
          // really in the template.

          NEEDS_EXTRA_CLOSE.set(this.constructing, true);
          this.flushElement(null);
        }
      }
      return super.openElement(tag);
    }
    pushRemoteElement(element, cursorId, insertBefore) {
      if (insertBefore === void 0) {
        insertBefore = null;
      }
      var {
        dom
      } = this;
      var script = dom.createElement('script');
      script.setAttribute('glmr', cursorId);
      dom.insertBefore(element, script, insertBefore);
      return super.pushRemoteElement(element, cursorId, insertBefore);
    }
  }
  function serializeBuilder(env, cursor) {
    return SerializeBuilder.forInitialRender(env, cursor);
  }
});
define("@glimmer/opcode-compiler", ["exports", "@glimmer/util", "@glimmer/vm", "@glimmer/global-context", "@glimmer/manager", "@glimmer/encoder"], function (_exports, _util, _vm, _globalContext, _manager, _encoder) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.WrappedBuilder = _exports.StdLib = _exports.MINIMAL_CAPABILITIES = _exports.EMPTY_BLOCKS = _exports.DEFAULT_CAPABILITIES = _exports.CompileTimeCompilationContextImpl = void 0;
  _exports.compilable = compilable;
  _exports.compileStatements = compileStatements;
  _exports.compileStd = compileStd;
  _exports.debugCompiler = void 0;
  _exports.invokeStaticBlock = InvokeStaticBlock;
  _exports.invokeStaticBlockWithStack = InvokeStaticBlockWithStack;
  _exports.meta = meta;
  _exports.programCompilationContext = programCompilationContext;
  _exports.templateCacheCounters = void 0;
  _exports.templateCompilationContext = templateCompilationContext;
  _exports.templateFactory = templateFactory;
  class NamedBlocksImpl {
    constructor(blocks) {
      this.blocks = blocks;
      this.names = blocks ? Object.keys(blocks) : [];
    }
    get(name) {
      if (!this.blocks) return null;
      return this.blocks[name] || null;
    }
    has(name) {
      var {
        blocks
      } = this;
      return blocks !== null && name in blocks;
    }
    with(name, block) {
      var {
        blocks
      } = this;
      if (blocks) {
        return new NamedBlocksImpl((0, _util.assign)({}, blocks, {
          [name]: block
        }));
      } else {
        return new NamedBlocksImpl({
          [name]: block
        });
      }
    }
    get hasAny() {
      return this.blocks !== null;
    }
  }
  var EMPTY_BLOCKS = new NamedBlocksImpl(null);
  _exports.EMPTY_BLOCKS = EMPTY_BLOCKS;
  function namedBlocks(blocks) {
    if (blocks === null) {
      return EMPTY_BLOCKS;
    }
    var out = (0, _util.dict)();
    var [keys, values] = blocks;
    for (var i = 0; i < keys.length; i++) {
      out[keys[i]] = values[i];
    }
    return new NamedBlocksImpl(out);
  }
  function labelOperand(value) {
    return {
      type: 1
      /* Label */,

      value
    };
  }
  function evalSymbolsOperand() {
    return {
      type: 3
      /* EvalSymbols */,

      value: undefined
    };
  }
  function isStrictMode() {
    return {
      type: 2
      /* IsStrictMode */,

      value: undefined
    };
  }
  function blockOperand(value) {
    return {
      type: 4
      /* Block */,

      value
    };
  }
  function stdlibOperand(value) {
    return {
      type: 5
      /* StdLib */,

      value
    };
  }
  function nonSmallIntOperand(value) {
    return {
      type: 6
      /* NonSmallInt */,

      value
    };
  }
  function symbolTableOperand(value) {
    return {
      type: 7
      /* SymbolTable */,

      value
    };
  }
  function layoutOperand(value) {
    return {
      type: 8
      /* Layout */,

      value
    };
  }
  function isGetLikeTuple(opcode) {
    return Array.isArray(opcode) && opcode.length === 2;
  }
  function makeResolutionTypeVerifier(typeToVerify) {
    return opcode => {
      if (!isGetLikeTuple(opcode)) return false;
      var type = opcode[0];
      return type === 31
      /* GetStrictFree */ || type === 32
      /* GetTemplateSymbol */ || type === typeToVerify;
    };
  }
  var isGetFreeComponent = makeResolutionTypeVerifier(39
  /* GetFreeAsComponentHead */);

  var isGetFreeModifier = makeResolutionTypeVerifier(38
  /* GetFreeAsModifierHead */);

  var isGetFreeHelper = makeResolutionTypeVerifier(37
  /* GetFreeAsHelperHead */);

  var isGetFreeComponentOrHelper = makeResolutionTypeVerifier(35
  /* GetFreeAsComponentOrHelperHead */);

  var isGetFreeOptionalComponentOrHelper = makeResolutionTypeVerifier(34
  /* GetFreeAsComponentOrHelperHeadOrThisFallback */);

  function assertResolverInvariants(meta) {
    if (true /* DEBUG */) {
      if (!meta.upvars) {
        throw new Error('Attempted to resolve a component, helper, or modifier, but no free vars were found');
      }
      if (!meta.owner) {
        throw new Error('Attempted to resolve a component, helper, or modifier, but no owner was associated with the template it was being resolved from');
      }
    }
    return meta;
  }
  /**
   * <Foo/>
   * <Foo></Foo>
   * <Foo @arg={{true}} />
   */

  function resolveComponent(resolver, constants, meta, _ref) {
    var [, expr, then] = _ref;
    var type = expr[0];
    if (true /* DEBUG */ && expr[0] === 31
    /* GetStrictFree */) {
      throw new Error(`Attempted to resolve a component in a strict mode template, but that value was not in scope: ${meta.upvars[expr[1]]}`);
    }
    if (type === 32
    /* GetTemplateSymbol */) {
      var {
        scopeValues,
        owner
      } = meta;
      var definition = scopeValues[expr[1]];
      then(constants.component(definition, owner));
    } else {
      var {
        upvars,
        owner: _owner
      } = assertResolverInvariants(meta);
      var name = upvars[expr[1]];
      var _definition = resolver.lookupComponent(name, _owner);
      if (true /* DEBUG */ && (typeof _definition !== 'object' || _definition === null)) {
        throw new Error(`Attempted to resolve \`${name}\`, which was expected to be a component, but nothing was found.`);
      }
      then(constants.resolvedComponent(_definition, name));
    }
  }
  /**
   * (helper)
   * (helper arg)
   */

  function resolveHelper(resolver, constants, meta, _ref2) {
    var [, expr, then] = _ref2;
    var type = expr[0];
    if (type === 32
    /* GetTemplateSymbol */) {
      var {
        scopeValues
      } = meta;
      var definition = scopeValues[expr[1]];
      then(constants.helper(definition));
    } else if (type === 31
    /* GetStrictFree */) {
      then(lookupBuiltInHelper(expr, resolver, meta, constants, 'helper'));
    } else {
      var {
        upvars,
        owner
      } = assertResolverInvariants(meta);
      var name = upvars[expr[1]];
      var helper = resolver.lookupHelper(name, owner);
      if (true /* DEBUG */ && helper === null) {
        throw new Error(`Attempted to resolve \`${name}\`, which was expected to be a helper, but nothing was found.`);
      }
      then(constants.helper(helper, name));
    }
  }
  /**
   * <div {{modifier}}/>
   * <div {{modifier arg}}/>
   * <Foo {{modifier}}/>
   */

  function resolveModifier(resolver, constants, meta, _ref3) {
    var [, expr, then] = _ref3;
    var type = expr[0];
    if (type === 32
    /* GetTemplateSymbol */) {
      var {
        scopeValues
      } = meta;
      var definition = scopeValues[expr[1]];
      then(constants.modifier(definition));
    } else if (type === 31
    /* GetStrictFree */) {
      var {
        upvars
      } = assertResolverInvariants(meta);
      var name = upvars[expr[1]];
      var modifier = resolver.lookupBuiltInModifier(name);
      if (true /* DEBUG */ && modifier === null) {
        throw new Error(`Attempted to resolve a modifier in a strict mode template, but it was not in scope: ${name}`);
      }
      then(constants.modifier(modifier, name));
    } else {
      var {
        upvars: _upvars,
        owner
      } = assertResolverInvariants(meta);
      var _name2 = _upvars[expr[1]];
      var _modifier = resolver.lookupModifier(_name2, owner);
      if (true /* DEBUG */ && _modifier === null) {
        throw new Error(`Attempted to resolve \`${_name2}\`, which was expected to be a modifier, but nothing was found.`);
      }
      then(constants.modifier(_modifier, _name2));
    }
  }
  /**
   * {{component-or-helper arg}}
   */

  function resolveComponentOrHelper(resolver, constants, meta, _ref4) {
    var [, expr, {
      ifComponent,
      ifHelper
    }] = _ref4;
    var type = expr[0];
    if (type === 32
    /* GetTemplateSymbol */) {
      var {
        scopeValues,
        owner
      } = meta;
      var definition = scopeValues[expr[1]];
      var component = constants.component(definition, owner, true);
      if (component !== null) {
        ifComponent(component);
        return;
      }
      var helper = constants.helper(definition, null, true);
      if (true /* DEBUG */ && helper === null) {
        throw new Error(`Attempted to use a value as either a component or helper, but it did not have a component manager or helper manager associated with it. The value was: ${(0, _util.debugToString)(definition)}`);
      }
      ifHelper(helper);
    } else if (type === 31
    /* GetStrictFree */) {
      ifHelper(lookupBuiltInHelper(expr, resolver, meta, constants, 'component or helper'));
    } else {
      var {
        upvars,
        owner: _owner2
      } = assertResolverInvariants(meta);
      var name = upvars[expr[1]];
      var _definition2 = resolver.lookupComponent(name, _owner2);
      if (_definition2 !== null) {
        ifComponent(constants.resolvedComponent(_definition2, name));
      } else {
        var _helper = resolver.lookupHelper(name, _owner2);
        if (true /* DEBUG */ && _helper === null) {
          throw new Error(`Attempted to resolve \`${name}\`, which was expected to be a component or helper, but nothing was found.`);
        }
        ifHelper(constants.helper(_helper, name));
      }
    }
  }
  /**
   * <Foo @arg={{helper}}>
   */

  function resolveOptionalHelper(resolver, constants, meta, _ref5) {
    var [, expr, {
      ifHelper
    }] = _ref5;
    var {
      upvars,
      owner
    } = assertResolverInvariants(meta);
    var name = upvars[expr[1]];
    var helper = resolver.lookupHelper(name, owner);
    if (helper) {
      ifHelper(constants.helper(helper, name), name, meta.moduleName);
    }
  }
  /**
   * {{maybeHelperOrComponent}}
   */

  function resolveOptionalComponentOrHelper(resolver, constants, meta, _ref6) {
    var [, expr, {
      ifComponent,
      ifHelper,
      ifValue
    }] = _ref6;
    var type = expr[0];
    if (type === 32
    /* GetTemplateSymbol */) {
      var {
        scopeValues,
        owner
      } = meta;
      var definition = scopeValues[expr[1]];
      if (typeof definition !== 'function' && (typeof definition !== 'object' || definition === null)) {
        // The value is not an object, so it can't be a component or helper.
        ifValue(constants.value(definition));
        return;
      }
      var component = constants.component(definition, owner, true);
      if (component !== null) {
        ifComponent(component);
        return;
      }
      var helper = constants.helper(definition, null, true);
      if (helper !== null) {
        ifHelper(helper);
        return;
      }
      ifValue(constants.value(definition));
    } else if (type === 31
    /* GetStrictFree */) {
      ifHelper(lookupBuiltInHelper(expr, resolver, meta, constants, 'value'));
    } else {
      var {
        upvars,
        owner: _owner3
      } = assertResolverInvariants(meta);
      var name = upvars[expr[1]];
      var _definition3 = resolver.lookupComponent(name, _owner3);
      if (_definition3 !== null) {
        ifComponent(constants.resolvedComponent(_definition3, name));
        return;
      }
      var _helper2 = resolver.lookupHelper(name, _owner3);
      if (_helper2 !== null) {
        ifHelper(constants.helper(_helper2, name));
      }
    }
  }
  function lookupBuiltInHelper(expr, resolver, meta, constants, type) {
    var {
      upvars
    } = assertResolverInvariants(meta);
    var name = upvars[expr[1]];
    var helper = resolver.lookupBuiltInHelper(name);
    if (true /* DEBUG */ && helper === null) {
      // Keyword helper did not exist, which means that we're attempting to use a
      // value of some kind that is not in scope
      throw new Error(`Attempted to resolve a ${type} in a strict mode template, but that value was not in scope: ${meta.upvars[expr[1]]}`);
    }
    return constants.helper(helper, name);
  }
  class Compilers {
    constructor() {
      this.names = {};
      this.funcs = [];
    }
    add(name, func) {
      this.names[name] = this.funcs.push(func) - 1;
    }
    compile(op, sexp) {
      var name = sexp[0];
      var index = this.names[name];
      var func = this.funcs[index];
      func(op, sexp);
    }
  }
  var EXPRESSIONS = new Compilers();
  EXPRESSIONS.add(29
  /* Concat */, (op, _ref7) => {
    var [, parts] = _ref7;
    for (var part of parts) {
      expr(op, part);
    }
    op(27
    /* Concat */, parts.length);
  });
  EXPRESSIONS.add(28
  /* Call */, (op, _ref8) => {
    var [, expression, positional, named] = _ref8;
    if (isGetFreeHelper(expression)) {
      op(1005
      /* ResolveHelper */, expression, handle => {
        Call(op, handle, positional, named);
      });
    } else {
      expr(op, expression);
      CallDynamic(op, positional, named);
    }
  });
  EXPRESSIONS.add(50
  /* Curry */, (op, _ref9) => {
    var [, expr$$1, type, positional, named] = _ref9;
    Curry(op, type, expr$$1, positional, named);
  });
  EXPRESSIONS.add(30
  /* GetSymbol */, (op, _ref10) => {
    var [, sym, path] = _ref10;
    op(21
    /* GetVariable */, sym);
    withPath(op, path);
  });
  EXPRESSIONS.add(32
  /* GetTemplateSymbol */, (op, _ref11) => {
    var [, sym, path] = _ref11;
    op(1011
    /* ResolveTemplateLocal */, sym, handle => {
      op(29
      /* ConstantReference */, handle);
      withPath(op, path);
    });
  });
  EXPRESSIONS.add(31
  /* GetStrictFree */, (op, _ref12) => {
    var [, sym, _path] = _ref12;
    op(1009
    /* ResolveFree */, sym, _handle => {// TODO: Implement in strict mode
    });
  });
  EXPRESSIONS.add(34
  /* GetFreeAsComponentOrHelperHeadOrThisFallback */, () => {
    // TODO: The logic for this opcode currently exists in STATEMENTS.Append, since
    // we want different wrapping logic depending on if we are invoking a component,
    // helper, or {{this}} fallback. Eventually we fix the opcodes so that we can
    // traverse the subexpression tree like normal in this location.
    throw new Error('unimplemented opcode');
  });
  EXPRESSIONS.add(36
  /* GetFreeAsHelperHeadOrThisFallback */, (op, expr$$1) => {
    // <div id={{baz}}>
    op(1010
    /* ResolveLocal */, expr$$1[1], _name => {
      op(1006
      /* ResolveOptionalHelper */, expr$$1, {
        ifHelper: handle => {
          Call(op, handle, null, null);
        }
      });
    });
  });
  EXPRESSIONS.add(99
  /* GetFreeAsDeprecatedHelperHeadOrThisFallback */, (op, expr$$1) => {
    // <Foo @bar={{baz}}>
    op(1010
    /* ResolveLocal */, expr$$1[1], _name => {
      op(1006
      /* ResolveOptionalHelper */, expr$$1, {
        ifHelper: (handle, name, moduleName) => {
          (true && (0, _globalContext.assert)(expr$$1[2] && expr$$1[2].length === 1, '[BUG] Missing argument name'));
          var arg = expr$$1[2][0];
          (true && !(false) && (0, _globalContext.deprecate)(`The \`${name}\` helper was used in the \`${moduleName}\` template as \`${arg}={{${name}}}\`. ` + `This is ambigious between wanting the \`${arg}\` argument to be the \`${name}\` helper itself, ` + `or the result of invoking the \`${name}\` helper (current behavior). ` + `This implicit invocation behavior has been deprecated.\n\n` + `Instead, please explicitly invoke the helper with parenthesis, i.e. \`${arg}={{(${name})}}\`.\n\n` + `Note: the parenthesis are only required in this exact scenario where an ambiguity is present – where ` + `\`${name}\` referes to a global helper (as opposed to a local variable), AND ` + `the \`${name}\` helper invocation does not take any arguments, AND ` + `this occurs in a named argument position of a component invocation.\n\n` + `We expect this combination to be quite rare, as most helpers require at least one argument. ` + `There is no need to refactor helper invocations in cases where this deprecation was not triggered.`, false, {
            id: 'argument-less-helper-paren-less-invocation'
          }));
          Call(op, handle, null, null);
        }
      });
    });
  });
  function withPath(op, path) {
    if (path === undefined || path.length === 0) return;
    for (var i = 0; i < path.length; i++) {
      op(22
      /* GetProperty */, path[i]);
    }
  }
  EXPRESSIONS.add(27
  /* Undefined */, op => PushPrimitiveReference(op, undefined));
  EXPRESSIONS.add(48
  /* HasBlock */, (op, _ref13) => {
    var [, block] = _ref13;
    expr(op, block);
    op(25
    /* HasBlock */);
  });

  EXPRESSIONS.add(49
  /* HasBlockParams */, (op, _ref14) => {
    var [, block] = _ref14;
    expr(op, block);
    op(24
    /* SpreadBlock */);

    op(61
    /* CompileBlock */);

    op(26
    /* HasBlockParams */);
  });

  EXPRESSIONS.add(52
  /* IfInline */, (op, _ref15) => {
    var [, condition, truthy, falsy] = _ref15;
    // Push in reverse order
    expr(op, falsy);
    expr(op, truthy);
    expr(op, condition);
    op(109
    /* IfInline */);
  });

  EXPRESSIONS.add(51
  /* Not */, (op, _ref16) => {
    var [, value] = _ref16;
    expr(op, value);
    op(110
    /* Not */);
  });

  EXPRESSIONS.add(53
  /* GetDynamicVar */, (op, _ref17) => {
    var [, expression] = _ref17;
    expr(op, expression);
    op(111
    /* GetDynamicVar */);
  });

  EXPRESSIONS.add(54
  /* Log */, (op, _ref18) => {
    var [, positional] = _ref18;
    op(0
    /* PushFrame */);

    SimpleArgs(op, positional, null, false);
    op(112
    /* Log */);

    op(1
    /* PopFrame */);

    op(36
    /* Fetch */, _vm.$v0);
  });
  function expr(op, expression) {
    if (Array.isArray(expression)) {
      EXPRESSIONS.compile(op, expression);
    } else {
      PushPrimitive(op, expression);
      op(31
      /* PrimitiveReference */);
    }
  }

  /**
   * Compile arguments, pushing an Arguments object onto the stack.
   *
   * @param args.params
   * @param args.hash
   * @param args.blocks
   * @param args.atNames
   */

  function CompileArgs(op, positional, named, blocks, atNames) {
    var blockNames = blocks.names;
    for (var i = 0; i < blockNames.length; i++) {
      PushYieldableBlock(op, blocks.get(blockNames[i]));
    }
    var count = CompilePositional(op, positional);
    var flags = count << 4;
    if (atNames) flags |= 0b1000;
    if (blocks) {
      flags |= 0b111;
    }
    var names = _util.EMPTY_ARRAY;
    if (named) {
      names = named[0];
      var val = named[1];
      for (var _i = 0; _i < val.length; _i++) {
        expr(op, val[_i]);
      }
    }
    op(82
    /* PushArgs */, names, blockNames, flags);
  }
  function SimpleArgs(op, positional, named, atNames) {
    if (positional === null && named === null) {
      op(83
      /* PushEmptyArgs */);

      return;
    }
    var count = CompilePositional(op, positional);
    var flags = count << 4;
    if (atNames) flags |= 0b1000;
    var names = _util.EMPTY_STRING_ARRAY;
    if (named) {
      names = named[0];
      var val = named[1];
      for (var i = 0; i < val.length; i++) {
        expr(op, val[i]);
      }
    }
    op(82
    /* PushArgs */, names, _util.EMPTY_STRING_ARRAY, flags);
  }
  /**
   * Compile an optional list of positional arguments, which pushes each argument
   * onto the stack and returns the number of parameters compiled
   *
   * @param positional an optional list of positional arguments
   */

  function CompilePositional(op, positional) {
    if (positional === null) return 0;
    for (var i = 0; i < positional.length; i++) {
      expr(op, positional[i]);
    }
    return positional.length;
  }
  function meta(layout) {
    var _a, _b;
    var [, symbols,, upvars] = layout.block;
    return {
      evalSymbols: evalSymbols(layout),
      upvars: upvars,
      scopeValues: (_b = (_a = layout.scope) === null || _a === void 0 ? void 0 : _a.call(layout)) !== null && _b !== void 0 ? _b : null,
      isStrictMode: layout.isStrictMode,
      moduleName: layout.moduleName,
      owner: layout.owner,
      size: symbols.length
    };
  }
  function evalSymbols(layout) {
    var {
      block
    } = layout;
    var [, symbols, hasEval] = block;
    return hasEval ? symbols : null;
  }

  /**
   * Push a reference onto the stack corresponding to a statically known primitive
   * @param value A JavaScript primitive (undefined, null, boolean, number or string)
   */

  function PushPrimitiveReference(op, value) {
    PushPrimitive(op, value);
    op(31
    /* PrimitiveReference */);
  }
  /**
   * Push an encoded representation of a JavaScript primitive on the stack
   *
   * @param value A JavaScript primitive (undefined, null, boolean, number or string)
   */

  function PushPrimitive(op, primitive) {
    var p = primitive;
    if (typeof p === 'number') {
      p = (0, _util.isSmallInt)(p) ? (0, _util.encodeImmediate)(p) : nonSmallIntOperand(p);
    }
    op(30
    /* Primitive */, p);
  }
  /**
   * Invoke a foreign function (a "helper") based on a statically known handle
   *
   * @param op The op creation function
   * @param handle A handle
   * @param positional An optional list of expressions to compile
   * @param named An optional list of named arguments (name + expression) to compile
   */

  function Call(op, handle, positional, named) {
    op(0
    /* PushFrame */);

    SimpleArgs(op, positional, named, false);
    op(16
    /* Helper */, handle);
    op(1
    /* PopFrame */);

    op(36
    /* Fetch */, _vm.$v0);
  }
  /**
   * Invoke a foreign function (a "helper") based on a dynamically loaded definition
   *
   * @param op The op creation function
   * @param positional An optional list of expressions to compile
   * @param named An optional list of named arguments (name + expression) to compile
   */

  function CallDynamic(op, positional, named, append) {
    op(0
    /* PushFrame */);

    SimpleArgs(op, positional, named, false);
    op(33
    /* Dup */, _vm.$fp, 1);
    op(107
    /* DynamicHelper */);

    if (append) {
      op(36
      /* Fetch */, _vm.$v0);
      append();
      op(1
      /* PopFrame */);

      op(34
      /* Pop */, 1);
    } else {
      op(1
      /* PopFrame */);

      op(34
      /* Pop */, 1);
      op(36
      /* Fetch */, _vm.$v0);
    }
  }
  /**
   * Evaluate statements in the context of new dynamic scope entries. Move entries from the
   * stack into named entries in the dynamic scope, then evaluate the statements, then pop
   * the dynamic scope
   *
   * @param names a list of dynamic scope names
   * @param block a function that returns a list of statements to evaluate
   */

  function DynamicScope(op, names, block) {
    op(59
    /* PushDynamicScope */);

    op(58
    /* BindDynamicScope */, names);
    block();
    op(60
    /* PopDynamicScope */);
  }

  function Curry(op, type, definition, positional, named) {
    op(0
    /* PushFrame */);

    SimpleArgs(op, positional, named, false);
    op(86
    /* CaptureArgs */);

    expr(op, definition);
    op(77
    /* Curry */, type, isStrictMode());
    op(1
    /* PopFrame */);

    op(36
    /* Fetch */, _vm.$v0);
  }

  /**
   * Yield to a block located at a particular symbol location.
   *
   * @param to the symbol containing the block to yield to
   * @param params optional block parameters to yield to the block
   */

  function YieldBlock(op, to, positional) {
    SimpleArgs(op, positional, null, true);
    op(23
    /* GetBlock */, to);
    op(24
    /* SpreadBlock */);

    op(61
    /* CompileBlock */);

    op(64
    /* InvokeYield */);

    op(40
    /* PopScope */);

    op(1
    /* PopFrame */);
  }
  /**
   * Push an (optional) yieldable block onto the stack. The yieldable block must be known
   * statically at compile time.
   *
   * @param block An optional Compilable block
   */

  function PushYieldableBlock(op, block) {
    PushSymbolTable(op, block && block[1]);
    op(62
    /* PushBlockScope */);

    PushCompilable(op, block);
  }
  /**
   * Invoke a block that is known statically at compile time.
   *
   * @param block a Compilable block
   */

  function InvokeStaticBlock(op, block) {
    op(0
    /* PushFrame */);

    PushCompilable(op, block);
    op(61
    /* CompileBlock */);

    op(2
    /* InvokeVirtual */);

    op(1
    /* PopFrame */);
  }
  /**
   * Invoke a static block, preserving some number of stack entries for use in
   * updating.
   *
   * @param block A compilable block
   * @param callerCount A number of stack entries to preserve
   */

  function InvokeStaticBlockWithStack(op, block, callerCount) {
    var parameters = block[1];
    var calleeCount = parameters.length;
    var count = Math.min(callerCount, calleeCount);
    if (count === 0) {
      InvokeStaticBlock(op, block);
      return;
    }
    op(0
    /* PushFrame */);

    if (count) {
      op(39
      /* ChildScope */);

      for (var i = 0; i < count; i++) {
        op(33
        /* Dup */, _vm.$fp, callerCount - i);
        op(19
        /* SetVariable */, parameters[i]);
      }
    }
    PushCompilable(op, block);
    op(61
    /* CompileBlock */);

    op(2
    /* InvokeVirtual */);

    if (count) {
      op(40
      /* PopScope */);
    }

    op(1
    /* PopFrame */);
  }

  function PushSymbolTable(op, parameters) {
    if (parameters !== null) {
      op(63
      /* PushSymbolTable */, symbolTableOperand({
        parameters
      }));
    } else {
      PushPrimitive(op, null);
    }
  }
  function PushCompilable(op, _block) {
    if (_block === null) {
      PushPrimitive(op, null);
    } else {
      op(28
      /* Constant */, blockOperand(_block));
    }
  }
  function SwitchCases(op, bootstrap, callback) {
    // Setup the switch DSL
    var clauses = [];
    var count = 0;
    function when(match, callback) {
      clauses.push({
        match,
        callback,
        label: `CLAUSE${count++}`
      });
    } // Call the callback

    callback(when); // Emit the opcodes for the switch

    op(69
    /* Enter */, 1);
    bootstrap();
    op(1001
    /* StartLabels */); // First, emit the jump opcodes. We don't need a jump for the last
    // opcode, since it bleeds directly into its clause.

    for (var clause of clauses.slice(0, -1)) {
      op(67
      /* JumpEq */, labelOperand(clause.label), clause.match);
    } // Enumerate the clauses in reverse order. Earlier matches will
    // require fewer checks.

    for (var i = clauses.length - 1; i >= 0; i--) {
      var _clause = clauses[i];
      op(1000
      /* Label */, _clause.label);
      op(34
      /* Pop */, 1);
      _clause.callback(); // The first match is special: it is placed directly before the END
      // label, so no additional jump is needed at the end of it.

      if (i !== 0) {
        op(4
        /* Jump */, labelOperand('END'));
      }
    }
    op(1000
    /* Label */, 'END');
    op(1002
    /* StopLabels */);

    op(70
    /* Exit */);
  }
  /**
   * A convenience for pushing some arguments on the stack and
   * running some code if the code needs to be re-executed during
   * updating execution if some of the arguments have changed.
   *
   * # Initial Execution
   *
   * The `args` function should push zero or more arguments onto
   * the stack and return the number of arguments pushed.
   *
   * The `body` function provides the instructions to execute both
   * during initial execution and during updating execution.
   *
   * Internally, this function starts by pushing a new frame, so
   * that the body can return and sets the return point ($ra) to
   * the ENDINITIAL label.
   *
   * It then executes the `args` function, which adds instructions
   * responsible for pushing the arguments for the block to the
   * stack. These arguments will be restored to the stack before
   * updating execution.
   *
   * Next, it adds the Enter opcode, which marks the current position
   * in the DOM, and remembers the current $pc (the next instruction)
   * as the first instruction to execute during updating execution.
   *
   * Next, it runs `body`, which adds the opcodes that should
   * execute both during initial execution and during updating execution.
   * If the `body` wishes to finish early, it should Jump to the
   * `FINALLY` label.
   *
   * Next, it adds the FINALLY label, followed by:
   *
   * - the Exit opcode, which finalizes the marked DOM started by the
   *   Enter opcode.
   * - the Return opcode, which returns to the current return point
   *   ($ra).
   *
   * Finally, it adds the ENDINITIAL label followed by the PopFrame
   * instruction, which restores $fp, $sp and $ra.
   *
   * # Updating Execution
   *
   * Updating execution for this `replayable` occurs if the `body` added an
   * assertion, via one of the `JumpIf`, `JumpUnless` or `AssertSame` opcodes.
   *
   * If, during updating executon, the assertion fails, the initial VM is
   * restored, and the stored arguments are pushed onto the stack. The DOM
   * between the starting and ending markers is cleared, and the VM's cursor
   * is set to the area just cleared.
   *
   * The return point ($ra) is set to -1, the exit instruction.
   *
   * Finally, the $pc is set to to the instruction saved off by the
   * Enter opcode during initial execution, and execution proceeds as
   * usual.
   *
   * The only difference is that when a `Return` instruction is
   * encountered, the program jumps to -1 rather than the END label,
   * and the PopFrame opcode is not needed.
   */

  function Replayable(op, args, body) {
    // Start a new label frame, to give END and RETURN
    // a unique meaning.
    op(1001
    /* StartLabels */);

    op(0
    /* PushFrame */); // If the body invokes a block, its return will return to
    // END. Otherwise, the return in RETURN will return to END.

    op(6
    /* ReturnTo */, labelOperand('ENDINITIAL')); // Push the arguments onto the stack. The args() function
    // tells us how many stack elements to retain for re-execution
    // when updating.

    var count = args(); // Start a new updating closure, remembering `count` elements
    // from the stack. Everything after this point, and before END,
    // will execute both initially and to update the block.
    //
    // The enter and exit opcodes also track the area of the DOM
    // associated with this block. If an assertion inside the block
    // fails (for example, the test value changes from true to false
    // in an #if), the DOM is cleared and the program is re-executed,
    // restoring `count` elements to the stack and executing the
    // instructions between the enter and exit.

    op(69
    /* Enter */, count); // Evaluate the body of the block. The body of the block may
    // return, which will jump execution to END during initial
    // execution, and exit the updating routine.

    body(); // All execution paths in the body should run the FINALLY once
    // they are done. It is executed both during initial execution
    // and during updating execution.

    op(1000
    /* Label */, 'FINALLY'); // Finalize the DOM.

    op(70
    /* Exit */); // In initial execution, this is a noop: it returns to the
    // immediately following opcode. In updating execution, this
    // exits the updating routine.

    op(5
    /* Return */); // Cleanup code for the block. Runs on initial execution
    // but not on updating.

    op(1000
    /* Label */, 'ENDINITIAL');
    op(1
    /* PopFrame */);

    op(1002
    /* StopLabels */);
  }
  /**
   * A specialized version of the `replayable` convenience that allows the
   * caller to provide different code based upon whether the item at
   * the top of the stack is true or false.
   *
   * As in `replayable`, the `ifTrue` and `ifFalse` code can invoke `return`.
   *
   * During the initial execution, a `return` will continue execution
   * in the cleanup code, which finalizes the current DOM block and pops
   * the current frame.
   *
   * During the updating execution, a `return` will exit the updating
   * routine, as it can reuse the DOM block and is always only a single
   * frame deep.
   */

  function ReplayableIf(op, args, ifTrue, ifFalse) {
    return Replayable(op, args, () => {
      // If the conditional is false, jump to the ELSE label.
      op(66
      /* JumpUnless */, labelOperand('ELSE')); // Otherwise, execute the code associated with the true branch.

      ifTrue(); // We're done, so return. In the initial execution, this runs
      // the cleanup code. In the updating VM, it exits the updating
      // routine.

      op(4
      /* Jump */, labelOperand('FINALLY'));
      op(1000
      /* Label */, 'ELSE'); // If the conditional is false, and code associatied ith the
      // false branch was provided, execute it. If there was no code
      // associated with the false branch, jumping to the else statement
      // has no other behavior.

      if (ifFalse !== undefined) {
        ifFalse();
      }
    });
  }
  var ATTRS_BLOCK = '&attrs';
  function InvokeComponent(op, component, _elementBlock, positional, named, _blocks) {
    var {
      compilable,
      capabilities,
      handle
    } = component;
    var elementBlock = _elementBlock ? [_elementBlock, []] : null;
    var blocks = Array.isArray(_blocks) || _blocks === null ? namedBlocks(_blocks) : _blocks;
    if (compilable) {
      op(78
      /* PushComponentDefinition */, handle);
      InvokeStaticComponent(op, {
        capabilities: capabilities,
        layout: compilable,
        elementBlock,
        positional,
        named,
        blocks
      });
    } else {
      op(78
      /* PushComponentDefinition */, handle);
      InvokeNonStaticComponent(op, {
        capabilities: capabilities,
        elementBlock,
        positional,
        named,
        atNames: true,
        blocks
      });
    }
  }
  function InvokeDynamicComponent(op, definition, _elementBlock, positional, named, _blocks, atNames, curried) {
    var elementBlock = _elementBlock ? [_elementBlock, []] : null;
    var blocks = Array.isArray(_blocks) || _blocks === null ? namedBlocks(_blocks) : _blocks;
    Replayable(op, () => {
      expr(op, definition);
      op(33
      /* Dup */, _vm.$sp, 0);
      return 2;
    }, () => {
      op(66
      /* JumpUnless */, labelOperand('ELSE'));
      if (curried) {
        op(81
        /* ResolveCurriedComponent */);
      } else {
        op(80
        /* ResolveDynamicComponent */, isStrictMode());
      }
      op(79
      /* PushDynamicComponentInstance */);

      InvokeNonStaticComponent(op, {
        capabilities: true,
        elementBlock,
        positional,
        named,
        atNames,
        blocks
      });
      op(1000
      /* Label */, 'ELSE');
    });
  }
  function InvokeStaticComponent(op, _ref19) {
    var {
      capabilities,
      layout,
      elementBlock,
      positional,
      named,
      blocks
    } = _ref19;
    var {
      symbolTable
    } = layout;
    var bailOut = symbolTable.hasEval || (0, _manager.hasCapability)(capabilities, 4
    /* PrepareArgs */);

    if (bailOut) {
      InvokeNonStaticComponent(op, {
        capabilities,
        elementBlock,
        positional,
        named,
        atNames: true,
        blocks,
        layout
      });
      return;
    }
    op(36
    /* Fetch */, _vm.$s0);
    op(33
    /* Dup */, _vm.$sp, 1);
    op(35
    /* Load */, _vm.$s0);
    op(0
    /* PushFrame */); // Setup arguments

    var {
      symbols
    } = symbolTable; // As we push values onto the stack, we store the symbols associated  with them
    // so that we can set them on the scope later on with SetVariable and SetBlock

    var blockSymbols = [];
    var argSymbols = [];
    var argNames = []; // First we push the blocks onto the stack

    var blockNames = blocks.names; // Starting with the attrs block, if it exists and is referenced in the component

    if (elementBlock !== null) {
      var symbol = symbols.indexOf(ATTRS_BLOCK);
      if (symbol !== -1) {
        PushYieldableBlock(op, elementBlock);
        blockSymbols.push(symbol);
      }
    } // Followed by the other blocks, if they exist and are referenced in the component.
    // Also store the index of the associated symbol.

    for (var i = 0; i < blockNames.length; i++) {
      var name = blockNames[i];
      var _symbol = symbols.indexOf(`&${name}`);
      if (_symbol !== -1) {
        PushYieldableBlock(op, blocks.get(name));
        blockSymbols.push(_symbol);
      }
    } // Next up we have arguments. If the component has the `createArgs` capability,
    // then it wants access to the arguments in JavaScript. We can't know whether
    // or not an argument is used, so we have to give access to all of them.

    if ((0, _manager.hasCapability)(capabilities, 8
    /* CreateArgs */)) {
      // First we push positional arguments
      var count = CompilePositional(op, positional); // setup the flags with the count of positionals, and to indicate that atNames
      // are used

      var flags = count << 4;
      flags |= 0b1000;
      var names = _util.EMPTY_STRING_ARRAY; // Next, if named args exist, push them all. If they have an associated symbol
      // in the invoked component (e.g. they are used within its template), we push
      // that symbol. If not, we still push the expression as it may be used, and
      // we store the symbol as -1 (this is used later).

      if (named !== null) {
        names = named[0];
        var val = named[1];
        for (var _i2 = 0; _i2 < val.length; _i2++) {
          var _symbol2 = symbols.indexOf(names[_i2]);
          expr(op, val[_i2]);
          argSymbols.push(_symbol2);
        }
      } // Finally, push the VM arguments themselves. These args won't need access
      // to blocks (they aren't accessible from userland anyways), so we push an
      // empty array instead of the actual block names.

      op(82
      /* PushArgs */, names, _util.EMPTY_STRING_ARRAY, flags); // And push an extra pop operation to remove the args before we begin setting
      // variables on the local context

      argSymbols.push(-1);
    } else if (named !== null) {
      // If the component does not have the `createArgs` capability, then the only
      // expressions we need to push onto the stack are those that are actually
      // referenced in the template of the invoked component (e.g. have symbols).
      var _names = named[0];
      var _val = named[1];
      for (var _i3 = 0; _i3 < _val.length; _i3++) {
        var _name3 = _names[_i3];
        var _symbol3 = symbols.indexOf(_name3);
        if (_symbol3 !== -1) {
          expr(op, _val[_i3]);
          argSymbols.push(_symbol3);
          argNames.push(_name3);
        }
      }
    }
    op(97
    /* BeginComponentTransaction */, _vm.$s0);
    if ((0, _manager.hasCapability)(capabilities, 64
    /* DynamicScope */)) {
      op(59
      /* PushDynamicScope */);
    }

    if ((0, _manager.hasCapability)(capabilities, 512
    /* CreateInstance */)) {
      op(87
      /* CreateComponent */, blocks.has('default') | 0, _vm.$s0);
    }
    op(88
    /* RegisterComponentDestructor */, _vm.$s0);
    if ((0, _manager.hasCapability)(capabilities, 8
    /* CreateArgs */)) {
      op(90
      /* GetComponentSelf */, _vm.$s0);
    } else {
      op(90
      /* GetComponentSelf */, _vm.$s0, argNames);
    } // Setup the new root scope for the component

    op(37
    /* RootScope */, symbols.length + 1, Object.keys(blocks).length > 0 ? 1 : 0); // Pop the self reference off the stack and set it to the symbol for `this`
    // in the new scope. This is why all subsequent symbols are increased by one.

    op(19
    /* SetVariable */, 0); // Going in reverse, now we pop the args/blocks off the stack, starting with
    // arguments, and assign them to their symbols in the new scope.

    for (var _i4 = argSymbols.length - 1; _i4 >= 0; _i4--) {
      var _symbol4 = argSymbols[_i4];
      if (_symbol4 === -1) {
        // The expression was not bound to a local symbol, it was only pushed to be
        // used with VM args in the javascript side
        op(34
        /* Pop */, 1);
      } else {
        op(19
        /* SetVariable */, _symbol4 + 1);
      }
    } // if any positional params exist, pop them off the stack as well

    if (positional !== null) {
      op(34
      /* Pop */, positional.length);
    } // Finish up by popping off and assigning blocks

    for (var _i5 = blockSymbols.length - 1; _i5 >= 0; _i5--) {
      var _symbol5 = blockSymbols[_i5];
      op(20
      /* SetBlock */, _symbol5 + 1);
    }
    op(28
    /* Constant */, layoutOperand(layout));
    op(61
    /* CompileBlock */);

    op(2
    /* InvokeVirtual */);

    op(100
    /* DidRenderLayout */, _vm.$s0);
    op(1
    /* PopFrame */);

    op(40
    /* PopScope */);

    if ((0, _manager.hasCapability)(capabilities, 64
    /* DynamicScope */)) {
      op(60
      /* PopDynamicScope */);
    }

    op(98
    /* CommitComponentTransaction */);

    op(35
    /* Load */, _vm.$s0);
  }
  function InvokeNonStaticComponent(op, _ref20) {
    var {
      capabilities,
      elementBlock,
      positional,
      named,
      atNames,
      blocks: namedBlocks$$1,
      layout
    } = _ref20;
    var bindableBlocks = !!namedBlocks$$1;
    var bindableAtNames = capabilities === true || (0, _manager.hasCapability)(capabilities, 4
    /* PrepareArgs */) || !!(named && named[0].length !== 0);
    var blocks = namedBlocks$$1.with('attrs', elementBlock);
    op(36
    /* Fetch */, _vm.$s0);
    op(33
    /* Dup */, _vm.$sp, 1);
    op(35
    /* Load */, _vm.$s0);
    op(0
    /* PushFrame */);

    CompileArgs(op, positional, named, blocks, atNames);
    op(85
    /* PrepareArgs */, _vm.$s0);
    invokePreparedComponent(op, blocks.has('default'), bindableBlocks, bindableAtNames, () => {
      if (layout) {
        op(63
        /* PushSymbolTable */, symbolTableOperand(layout.symbolTable));
        op(28
        /* Constant */, layoutOperand(layout));
        op(61
        /* CompileBlock */);
      } else {
        op(92
        /* GetComponentLayout */, _vm.$s0);
      }
      op(95
      /* PopulateLayout */, _vm.$s0);
    });
    op(35
    /* Load */, _vm.$s0);
  }
  function WrappedComponent(op, layout, attrsBlockNumber) {
    op(1001
    /* StartLabels */);

    WithSavedRegister(op, _vm.$s1, () => {
      op(91
      /* GetComponentTagName */, _vm.$s0);
      op(31
      /* PrimitiveReference */);

      op(33
      /* Dup */, _vm.$sp, 0);
    });
    op(66
    /* JumpUnless */, labelOperand('BODY'));
    op(36
    /* Fetch */, _vm.$s1);
    op(89
    /* PutComponentOperations */);

    op(49
    /* OpenDynamicElement */);

    op(99
    /* DidCreateElement */, _vm.$s0);
    YieldBlock(op, attrsBlockNumber, null);
    op(54
    /* FlushElement */);

    op(1000
    /* Label */, 'BODY');
    InvokeStaticBlock(op, [layout.block[0], []]);
    op(36
    /* Fetch */, _vm.$s1);
    op(66
    /* JumpUnless */, labelOperand('END'));
    op(55
    /* CloseElement */);

    op(1000
    /* Label */, 'END');
    op(35
    /* Load */, _vm.$s1);
    op(1002
    /* StopLabels */);
  }

  function invokePreparedComponent(op, hasBlock, bindableBlocks, bindableAtNames, populateLayout) {
    if (populateLayout === void 0) {
      populateLayout = null;
    }
    op(97
    /* BeginComponentTransaction */, _vm.$s0);
    op(59
    /* PushDynamicScope */);

    op(87
    /* CreateComponent */, hasBlock | 0, _vm.$s0); // this has to run after createComponent to allow
    // for late-bound layouts, but a caller is free
    // to populate the layout earlier if it wants to
    // and do nothing here.

    if (populateLayout) {
      populateLayout();
    }
    op(88
    /* RegisterComponentDestructor */, _vm.$s0);
    op(90
    /* GetComponentSelf */, _vm.$s0);
    op(38
    /* VirtualRootScope */, _vm.$s0);
    op(19
    /* SetVariable */, 0);
    op(94
    /* SetupForEval */, _vm.$s0);
    if (bindableAtNames) op(17
    /* SetNamedVariables */, _vm.$s0);
    if (bindableBlocks) op(18
    /* SetBlocks */, _vm.$s0);
    op(34
    /* Pop */, 1);
    op(96
    /* InvokeComponentLayout */, _vm.$s0);
    op(100
    /* DidRenderLayout */, _vm.$s0);
    op(1
    /* PopFrame */);

    op(40
    /* PopScope */);

    op(60
    /* PopDynamicScope */);

    op(98
    /* CommitComponentTransaction */);
  }

  function InvokeBareComponent(op) {
    op(36
    /* Fetch */, _vm.$s0);
    op(33
    /* Dup */, _vm.$sp, 1);
    op(35
    /* Load */, _vm.$s0);
    op(0
    /* PushFrame */);

    op(83
    /* PushEmptyArgs */);

    op(85
    /* PrepareArgs */, _vm.$s0);
    invokePreparedComponent(op, false, false, true, () => {
      op(92
      /* GetComponentLayout */, _vm.$s0);
      op(95
      /* PopulateLayout */, _vm.$s0);
    });
    op(35
    /* Load */, _vm.$s0);
  }
  function WithSavedRegister(op, register, block) {
    op(36
    /* Fetch */, register);
    block();
    op(35
    /* Load */, register);
  }
  class StdLib {
    constructor(main, trustingGuardedAppend, cautiousGuardedAppend, trustingNonDynamicAppend, cautiousNonDynamicAppend) {
      this.main = main;
      this.trustingGuardedAppend = trustingGuardedAppend;
      this.cautiousGuardedAppend = cautiousGuardedAppend;
      this.trustingNonDynamicAppend = trustingNonDynamicAppend;
      this.cautiousNonDynamicAppend = cautiousNonDynamicAppend;
    }
    get 'trusting-append'() {
      return this.trustingGuardedAppend;
    }
    get 'cautious-append'() {
      return this.cautiousGuardedAppend;
    }
    get 'trusting-non-dynamic-append'() {
      return this.trustingNonDynamicAppend;
    }
    get 'cautious-non-dynamic-append'() {
      return this.cautiousNonDynamicAppend;
    }
    getAppend(trusting) {
      return trusting ? this.trustingGuardedAppend : this.cautiousGuardedAppend;
    }
  }
  _exports.StdLib = StdLib;
  function programCompilationContext(artifacts, resolver) {
    return new CompileTimeCompilationContextImpl(artifacts, resolver);
  }
  function templateCompilationContext(program, meta) {
    var encoder = new EncoderImpl(program.heap, meta, program.stdlib);
    return {
      program,
      encoder,
      meta
    };
  }
  var debugCompiler;
  _exports.debugCompiler = debugCompiler;
  var STATEMENTS = new Compilers();
  var INFLATE_ATTR_TABLE = ['class', 'id', 'value', 'name', 'type', 'style', 'href'];
  var INFLATE_TAG_TABLE = ['div', 'span', 'p', 'a'];
  function inflateTagName(tagName) {
    return typeof tagName === 'string' ? tagName : INFLATE_TAG_TABLE[tagName];
  }
  function inflateAttrName(attrName) {
    return typeof attrName === 'string' ? attrName : INFLATE_ATTR_TABLE[attrName];
  }
  STATEMENTS.add(3
  /* Comment */, (op, sexp) => op(42
  /* Comment */, sexp[1]));
  STATEMENTS.add(13
  /* CloseElement */, op => op(55
  /* CloseElement */));

  STATEMENTS.add(12
  /* FlushElement */, op => op(54
  /* FlushElement */));

  STATEMENTS.add(4
  /* Modifier */, (op, _ref21) => {
    var [, expression, positional, named] = _ref21;
    if (isGetFreeModifier(expression)) {
      op(1003
      /* ResolveModifier */, expression, handle => {
        op(0
        /* PushFrame */);

        SimpleArgs(op, positional, named, false);
        op(57
        /* Modifier */, handle);
        op(1
        /* PopFrame */);
      });
    } else {
      expr(op, expression);
      op(0
      /* PushFrame */);

      SimpleArgs(op, positional, named, false);
      op(33
      /* Dup */, _vm.$fp, 1);
      op(108
      /* DynamicModifier */);

      op(1
      /* PopFrame */);
    }
  });

  STATEMENTS.add(14
  /* StaticAttr */, (op, _ref22) => {
    var [, name, value, namespace] = _ref22;
    op(51
    /* StaticAttr */, inflateAttrName(name), value, namespace !== null && namespace !== void 0 ? namespace : null);
  });
  STATEMENTS.add(24
  /* StaticComponentAttr */, (op, _ref23) => {
    var [, name, value, namespace] = _ref23;
    op(105
    /* StaticComponentAttr */, inflateAttrName(name), value, namespace !== null && namespace !== void 0 ? namespace : null);
  });
  STATEMENTS.add(15
  /* DynamicAttr */, (op, _ref24) => {
    var [, name, value, namespace] = _ref24;
    expr(op, value);
    op(52
    /* DynamicAttr */, inflateAttrName(name), false, namespace !== null && namespace !== void 0 ? namespace : null);
  });
  STATEMENTS.add(22
  /* TrustingDynamicAttr */, (op, _ref25) => {
    var [, name, value, namespace] = _ref25;
    expr(op, value);
    op(52
    /* DynamicAttr */, inflateAttrName(name), true, namespace !== null && namespace !== void 0 ? namespace : null);
  });
  STATEMENTS.add(16
  /* ComponentAttr */, (op, _ref26) => {
    var [, name, value, namespace] = _ref26;
    expr(op, value);
    op(53
    /* ComponentAttr */, inflateAttrName(name), false, namespace !== null && namespace !== void 0 ? namespace : null);
  });
  STATEMENTS.add(23
  /* TrustingComponentAttr */, (op, _ref27) => {
    var [, name, value, namespace] = _ref27;
    expr(op, value);
    op(53
    /* ComponentAttr */, inflateAttrName(name), true, namespace !== null && namespace !== void 0 ? namespace : null);
  });
  STATEMENTS.add(10
  /* OpenElement */, (op, _ref28) => {
    var [, tag] = _ref28;
    op(48
    /* OpenElement */, inflateTagName(tag));
  });
  STATEMENTS.add(11
  /* OpenElementWithSplat */, (op, _ref29) => {
    var [, tag] = _ref29;
    op(89
    /* PutComponentOperations */);

    op(48
    /* OpenElement */, inflateTagName(tag));
  });
  STATEMENTS.add(8
  /* Component */, (op, _ref30) => {
    var [, expr$$1, elementBlock, named, blocks] = _ref30;
    if (isGetFreeComponent(expr$$1)) {
      op(1004
      /* ResolveComponent */, expr$$1, component => {
        InvokeComponent(op, component, elementBlock, null, named, blocks);
      });
    } else {
      // otherwise, the component name was an expression, so resolve the expression
      // and invoke it as a dynamic component
      InvokeDynamicComponent(op, expr$$1, elementBlock, null, named, blocks, true, true);
    }
  });
  STATEMENTS.add(18
  /* Yield */, (op, _ref31) => {
    var [, to, params] = _ref31;
    return YieldBlock(op, to, params);
  });
  STATEMENTS.add(17
  /* AttrSplat */, (op, _ref32) => {
    var [, to] = _ref32;
    return YieldBlock(op, to, null);
  });
  STATEMENTS.add(26
  /* Debugger */, (op, _ref33) => {
    var [, evalInfo] = _ref33;
    return op(103
    /* Debugger */, evalSymbolsOperand(), evalInfo);
  });
  STATEMENTS.add(1
  /* Append */, (op, _ref34) => {
    var [, value] = _ref34;
    // Special case for static values
    if (!Array.isArray(value)) {
      op(41
      /* Text */, value === null || value === undefined ? '' : String(value));
    } else if (isGetFreeOptionalComponentOrHelper(value)) {
      op(1008
      /* ResolveOptionalComponentOrHelper */, value, {
        ifComponent(component) {
          InvokeComponent(op, component, null, null, null, null);
        },
        ifHelper(handle) {
          op(0
          /* PushFrame */);

          Call(op, handle, null, null);
          op(3
          /* InvokeStatic */, stdlibOperand('cautious-non-dynamic-append'));
          op(1
          /* PopFrame */);
        },

        ifValue(handle) {
          op(0
          /* PushFrame */);

          op(29
          /* ConstantReference */, handle);
          op(3
          /* InvokeStatic */, stdlibOperand('cautious-non-dynamic-append'));
          op(1
          /* PopFrame */);
        }
      });
    } else if (value[0] === 28
    /* Call */) {
      var [, expression, positional, named] = value;
      if (isGetFreeComponentOrHelper(expression)) {
        op(1007
        /* ResolveComponentOrHelper */, expression, {
          ifComponent(component) {
            InvokeComponent(op, component, null, positional, hashToArgs(named), null);
          },
          ifHelper(handle) {
            op(0
            /* PushFrame */);

            Call(op, handle, positional, named);
            op(3
            /* InvokeStatic */, stdlibOperand('cautious-non-dynamic-append'));
            op(1
            /* PopFrame */);
          }
        });
      } else {
        SwitchCases(op, () => {
          expr(op, expression);
          op(106
          /* DynamicContentType */);
        }, when => {
          when(0
          /* Component */, () => {
            op(81
            /* ResolveCurriedComponent */);

            op(79
            /* PushDynamicComponentInstance */);

            InvokeNonStaticComponent(op, {
              capabilities: true,
              elementBlock: null,
              positional,
              named,
              atNames: false,
              blocks: namedBlocks(null)
            });
          });
          when(1
          /* Helper */, () => {
            CallDynamic(op, positional, named, () => {
              op(3
              /* InvokeStatic */, stdlibOperand('cautious-non-dynamic-append'));
            });
          });
        });
      }
    } else {
      op(0
      /* PushFrame */);

      expr(op, value);
      op(3
      /* InvokeStatic */, stdlibOperand('cautious-append'));
      op(1
      /* PopFrame */);
    }
  });

  STATEMENTS.add(2
  /* TrustingAppend */, (op, _ref35) => {
    var [, value] = _ref35;
    if (!Array.isArray(value)) {
      op(41
      /* Text */, value === null || value === undefined ? '' : String(value));
    } else {
      op(0
      /* PushFrame */);

      expr(op, value);
      op(3
      /* InvokeStatic */, stdlibOperand('trusting-append'));
      op(1
      /* PopFrame */);
    }
  });

  STATEMENTS.add(6
  /* Block */, (op, _ref36) => {
    var [, expr$$1, positional, named, blocks] = _ref36;
    if (isGetFreeComponent(expr$$1)) {
      op(1004
      /* ResolveComponent */, expr$$1, component => {
        InvokeComponent(op, component, null, positional, hashToArgs(named), blocks);
      });
    } else {
      InvokeDynamicComponent(op, expr$$1, null, positional, named, blocks, false, false);
    }
  });
  STATEMENTS.add(40
  /* InElement */, (op, _ref37) => {
    var [, block, guid, destination, insertBefore] = _ref37;
    ReplayableIf(op, () => {
      expr(op, guid);
      if (insertBefore === undefined) {
        PushPrimitiveReference(op, undefined);
      } else {
        expr(op, insertBefore);
      }
      expr(op, destination);
      op(33
      /* Dup */, _vm.$sp, 0);
      return 4;
    }, () => {
      op(50
      /* PushRemoteElement */);

      InvokeStaticBlock(op, block);
      op(56
      /* PopRemoteElement */);
    });
  });

  STATEMENTS.add(41
  /* If */, (op, _ref38) => {
    var [, condition, block, inverse] = _ref38;
    return ReplayableIf(op, () => {
      expr(op, condition);
      op(71
      /* ToBoolean */);

      return 1;
    }, () => {
      InvokeStaticBlock(op, block);
    }, inverse ? () => {
      InvokeStaticBlock(op, inverse);
    } : undefined);
  });
  STATEMENTS.add(42
  /* Each */, (op, _ref39) => {
    var [, value, key, block, inverse] = _ref39;
    return Replayable(op, () => {
      if (key) {
        expr(op, key);
      } else {
        PushPrimitiveReference(op, null);
      }
      expr(op, value);
      return 2;
    }, () => {
      op(72
      /* EnterList */, labelOperand('BODY'), labelOperand('ELSE'));
      op(0
      /* PushFrame */);

      op(33
      /* Dup */, _vm.$fp, 1);
      op(6
      /* ReturnTo */, labelOperand('ITER'));
      op(1000
      /* Label */, 'ITER');
      op(74
      /* Iterate */, labelOperand('BREAK'));
      op(1000
      /* Label */, 'BODY');
      InvokeStaticBlockWithStack(op, block, 2);
      op(34
      /* Pop */, 2);
      op(4
      /* Jump */, labelOperand('FINALLY'));
      op(1000
      /* Label */, 'BREAK');
      op(1
      /* PopFrame */);

      op(73
      /* ExitList */);

      op(4
      /* Jump */, labelOperand('FINALLY'));
      op(1000
      /* Label */, 'ELSE');
      if (inverse) {
        InvokeStaticBlock(op, inverse);
      }
    });
  });
  STATEMENTS.add(43
  /* With */, (op, _ref40) => {
    var [, value, block, inverse] = _ref40;
    ReplayableIf(op, () => {
      expr(op, value);
      op(33
      /* Dup */, _vm.$sp, 0);
      op(71
      /* ToBoolean */);

      return 2;
    }, () => {
      InvokeStaticBlockWithStack(op, block, 1);
    }, () => {
      if (inverse) {
        InvokeStaticBlock(op, inverse);
      }
    });
  });
  STATEMENTS.add(44
  /* Let */, (op, _ref41) => {
    var [, positional, block] = _ref41;
    var count = CompilePositional(op, positional);
    InvokeStaticBlockWithStack(op, block, count);
  });
  STATEMENTS.add(45
  /* WithDynamicVars */, (op, _ref42) => {
    var [, named, block] = _ref42;
    if (named) {
      var [names, expressions] = named;
      CompilePositional(op, expressions);
      DynamicScope(op, names, () => {
        InvokeStaticBlock(op, block);
      });
    } else {
      InvokeStaticBlock(op, block);
    }
  });
  STATEMENTS.add(46
  /* InvokeComponent */, (op, _ref43) => {
    var [, expr$$1, positional, named, blocks] = _ref43;
    if (isGetFreeComponent(expr$$1)) {
      op(1004
      /* ResolveComponent */, expr$$1, component => {
        InvokeComponent(op, component, null, positional, hashToArgs(named), blocks);
      });
    } else {
      InvokeDynamicComponent(op, expr$$1, null, positional, named, blocks, false, false);
    }
  });
  function hashToArgs(hash) {
    if (hash === null) return null;
    var names = hash[0].map(key => `@${key}`);
    return [names, hash[1]];
  }
  var PLACEHOLDER_HANDLE = -1;
  class CompilableTemplateImpl {
    constructor(statements, meta$$1,
    // Part of CompilableTemplate
    symbolTable,
    // Used for debugging
    moduleName) {
      if (moduleName === void 0) {
        moduleName = 'plain block';
      }
      this.statements = statements;
      this.meta = meta$$1;
      this.symbolTable = symbolTable;
      this.moduleName = moduleName;
      this.compiled = null;
    } // Part of CompilableTemplate

    compile(context) {
      return maybeCompile(this, context);
    }
  }
  function compilable(layout, moduleName) {
    var [statements, symbols, hasEval] = layout.block;
    return new CompilableTemplateImpl(statements, meta(layout), {
      symbols,
      hasEval
    }, moduleName);
  }
  function maybeCompile(compilable, context) {
    if (compilable.compiled !== null) return compilable.compiled;
    compilable.compiled = PLACEHOLDER_HANDLE;
    var {
      statements,
      meta: meta$$1
    } = compilable;
    var result = compileStatements(statements, meta$$1, context);
    compilable.compiled = result;
    return result;
  }
  function compileStatements(statements, meta$$1, syntaxContext) {
    var sCompiler = STATEMENTS;
    var context = templateCompilationContext(syntaxContext, meta$$1);
    var {
      encoder,
      program: {
        constants,
        resolver
      }
    } = context;
    function pushOp() {
      for (var _len = arguments.length, op = new Array(_len), _key = 0; _key < _len; _key++) {
        op[_key] = arguments[_key];
      }
      encodeOp(encoder, constants, resolver, meta$$1, op);
    }
    for (var i = 0; i < statements.length; i++) {
      sCompiler.compile(pushOp, statements[i]);
    }
    var handle = context.encoder.commit(meta$$1.size);
    return handle;
  }
  function compilableBlock(block, containing) {
    return new CompilableTemplateImpl(block[0], containing, {
      parameters: block[1] || _util.EMPTY_ARRAY
    });
  }
  class Labels {
    constructor() {
      this.labels = (0, _util.dict)();
      this.targets = [];
    }
    label(name, index) {
      this.labels[name] = index;
    }
    target(at, target) {
      this.targets.push({
        at,
        target
      });
    }
    patch(heap) {
      var {
        targets,
        labels
      } = this;
      for (var i = 0; i < targets.length; i++) {
        var {
          at,
          target
        } = targets[i];
        var address = labels[target] - at;
        heap.setbyaddr(at, address);
      }
    }
  }
  function encodeOp(encoder, constants, resolver, meta, op) {
    if (isBuilderOpcode(op[0])) {
      var [type, ...operands] = op;
      encoder.push(constants, type, ...operands);
    } else {
      switch (op[0]) {
        case 1000
        /* Label */:
          return encoder.label(op[1]);
        case 1001
        /* StartLabels */:
          return encoder.startLabels();
        case 1002
        /* StopLabels */:
          return encoder.stopLabels();
        case 1004
        /* ResolveComponent */:
          return resolveComponent(resolver, constants, meta, op);
        case 1003
        /* ResolveModifier */:
          return resolveModifier(resolver, constants, meta, op);
        case 1005
        /* ResolveHelper */:
          return resolveHelper(resolver, constants, meta, op);
        case 1007
        /* ResolveComponentOrHelper */:
          return resolveComponentOrHelper(resolver, constants, meta, op);
        case 1006
        /* ResolveOptionalHelper */:
          return resolveOptionalHelper(resolver, constants, meta, op);
        case 1008
        /* ResolveOptionalComponentOrHelper */:
          return resolveOptionalComponentOrHelper(resolver, constants, meta, op);
        case 1010
        /* ResolveLocal */:
          var freeVar = op[1];
          var name = meta.upvars[freeVar];
          var andThen = op[2];
          andThen(name, meta.moduleName);
          break;
        case 1011
        /* ResolveTemplateLocal */:
          var [, valueIndex, then] = op;
          var value = meta.scopeValues[valueIndex];
          then(constants.value(value));
          break;
        case 1009
        /* ResolveFree */:
          if (true /* DEBUG */) {
            var [, upvarIndex] = op;
            var freeName = meta.upvars[upvarIndex];
            throw new Error(`Attempted to resolve a value in a strict mode template, but that value was not in scope: ${freeName}`);
          }
          break;
        default:
          throw new Error(`Unexpected high level opcode ${op[0]}`);
      }
    }
  }
  class EncoderImpl {
    constructor(heap, meta, stdlib) {
      this.heap = heap;
      this.meta = meta;
      this.stdlib = stdlib;
      this.labelsStack = new _util.Stack();
      this.encoder = new _encoder.InstructionEncoderImpl([]);
      this.errors = [];
      this.handle = heap.malloc();
    }
    error(error) {
      this.encoder.encode(30
      /* Primitive */, 0);
      this.errors.push(error);
    }
    commit(size) {
      var handle = this.handle;
      this.heap.push(5
      /* Return */ | 1024
      /* MACHINE_MASK */);

      this.heap.finishMalloc(handle, size);
      if (this.errors.length) {
        return {
          errors: this.errors,
          handle
        };
      } else {
        return handle;
      }
    }
    push(constants, type) {
      var {
        heap
      } = this;
      if (true /* DEBUG */ && type > 255
      /* TYPE_SIZE */) {
        throw new Error(`Opcode type over 8-bits. Got ${type}.`);
      }
      var machine = (0, _vm.isMachineOp)(type) ? 1024
      /* MACHINE_MASK */ : 0;
      var first = type | machine | (arguments.length <= 2 ? 0 : arguments.length - 2) << 8
      /* ARG_SHIFT */;

      heap.push(first);
      for (var i = 0; i < (arguments.length <= 2 ? 0 : arguments.length - 2); i++) {
        var op = i + 2 < 2 || arguments.length <= i + 2 ? undefined : arguments[i + 2];
        heap.push(this.operand(constants, op));
      }
    }
    operand(constants, operand) {
      if (typeof operand === 'number') {
        return operand;
      }
      if (typeof operand === 'object' && operand !== null) {
        if (Array.isArray(operand)) {
          return (0, _util.encodeHandle)(constants.array(operand));
        } else {
          switch (operand.type) {
            case 1
            /* Label */:
              this.currentLabels.target(this.heap.offset, operand.value);
              return -1;
            case 2
            /* IsStrictMode */:
              return (0, _util.encodeHandle)(constants.value(this.meta.isStrictMode));
            case 3
            /* EvalSymbols */:
              return (0, _util.encodeHandle)(constants.array(this.meta.evalSymbols || _util.EMPTY_STRING_ARRAY));
            case 4
            /* Block */:
              return (0, _util.encodeHandle)(constants.value(compilableBlock(operand.value, this.meta)));
            case 5
            /* StdLib */:
              return this.stdlib[operand.value];
            case 6
            /* NonSmallInt */:

            case 7
            /* SymbolTable */:

            case 8
            /* Layout */:
              return constants.value(operand.value);
          }
        }
      }
      return (0, _util.encodeHandle)(constants.value(operand));
    }
    get currentLabels() {
      return this.labelsStack.current;
    }
    label(name) {
      this.currentLabels.label(name, this.heap.offset + 1);
    }
    startLabels() {
      this.labelsStack.push(new Labels());
    }
    stopLabels() {
      var label = this.labelsStack.pop();
      label.patch(this.heap);
    }
  }
  function isBuilderOpcode(op) {
    return op < 1000
    /* Start */;
  }

  function main(op) {
    op(75
    /* Main */, _vm.$s0);
    invokePreparedComponent(op, false, false, true);
  }
  /**
   * Append content to the DOM. This standard function triages content and does the
   * right thing based upon whether it's a string, safe string, component, fragment
   * or node.
   *
   * @param trusting whether to interpolate a string as raw HTML (corresponds to
   * triple curlies)
   */

  function StdAppend(op, trusting, nonDynamicAppend) {
    SwitchCases(op, () => op(76
    /* ContentType */), when => {
      when(2
      /* String */, () => {
        if (trusting) {
          op(68
          /* AssertSame */);

          op(43
          /* AppendHTML */);
        } else {
          op(47
          /* AppendText */);
        }
      });

      if (typeof nonDynamicAppend === 'number') {
        when(0
        /* Component */, () => {
          op(81
          /* ResolveCurriedComponent */);

          op(79
          /* PushDynamicComponentInstance */);

          InvokeBareComponent(op);
        });
        when(1
        /* Helper */, () => {
          CallDynamic(op, null, null, () => {
            op(3
            /* InvokeStatic */, nonDynamicAppend);
          });
        });
      } else {
        // when non-dynamic, we can no longer call the value (potentially because we've already called it)
        // this prevents infinite loops. We instead coerce the value, whatever it is, into the DOM.
        when(0
        /* Component */, () => {
          op(47
          /* AppendText */);
        });

        when(1
        /* Helper */, () => {
          op(47
          /* AppendText */);
        });
      }

      when(4
      /* SafeString */, () => {
        op(68
        /* AssertSame */);

        op(44
        /* AppendSafeHTML */);
      });

      when(5
      /* Fragment */, () => {
        op(68
        /* AssertSame */);

        op(45
        /* AppendDocumentFragment */);
      });

      when(6
      /* Node */, () => {
        op(68
        /* AssertSame */);

        op(46
        /* AppendNode */);
      });
    });
  }

  function compileStd(context) {
    var mainHandle = build(context, op => main(op));
    var trustingGuardedNonDynamicAppend = build(context, op => StdAppend(op, true, null));
    var cautiousGuardedNonDynamicAppend = build(context, op => StdAppend(op, false, null));
    var trustingGuardedDynamicAppend = build(context, op => StdAppend(op, true, trustingGuardedNonDynamicAppend));
    var cautiousGuardedDynamicAppend = build(context, op => StdAppend(op, false, cautiousGuardedNonDynamicAppend));
    return new StdLib(mainHandle, trustingGuardedDynamicAppend, cautiousGuardedDynamicAppend, trustingGuardedNonDynamicAppend, cautiousGuardedNonDynamicAppend);
  }
  var STDLIB_META = {
    evalSymbols: null,
    upvars: null,
    moduleName: 'stdlib',
    // TODO: ??
    scopeValues: null,
    isStrictMode: true,
    owner: null,
    size: 0
  };
  function build(program, callback) {
    var {
      constants,
      heap,
      resolver
    } = program;
    var encoder = new EncoderImpl(heap, STDLIB_META);
    function pushOp() {
      for (var _len2 = arguments.length, op = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        op[_key2] = arguments[_key2];
      }
      encodeOp(encoder, constants, resolver, STDLIB_META, op);
    }
    callback(pushOp);
    var result = encoder.commit(0);
    if (typeof result !== 'number') {
      // This shouldn't be possible
      throw new Error(`Unexpected errors compiling std`);
    } else {
      return result;
    }
  }
  class CompileTimeCompilationContextImpl {
    constructor(_ref44, resolver) {
      var {
        constants,
        heap
      } = _ref44;
      this.resolver = resolver;
      this.constants = constants;
      this.heap = heap;
      this.stdlib = compileStd(this);
    }
  }
  _exports.CompileTimeCompilationContextImpl = CompileTimeCompilationContextImpl;
  var DEFAULT_CAPABILITIES = {
    dynamicLayout: true,
    dynamicTag: true,
    prepareArgs: true,
    createArgs: true,
    attributeHook: false,
    elementHook: false,
    dynamicScope: true,
    createCaller: false,
    updateHook: true,
    createInstance: true,
    wrapped: false,
    willDestroy: false,
    hasSubOwner: false
  };
  _exports.DEFAULT_CAPABILITIES = DEFAULT_CAPABILITIES;
  var MINIMAL_CAPABILITIES = {
    dynamicLayout: false,
    dynamicTag: false,
    prepareArgs: false,
    createArgs: false,
    attributeHook: false,
    elementHook: false,
    dynamicScope: false,
    createCaller: false,
    updateHook: false,
    createInstance: false,
    wrapped: false,
    willDestroy: false,
    hasSubOwner: false
  };
  _exports.MINIMAL_CAPABILITIES = MINIMAL_CAPABILITIES;
  class WrappedBuilder {
    constructor(layout, moduleName) {
      this.layout = layout;
      this.moduleName = moduleName;
      this.compiled = null;
      var {
        block
      } = layout;
      var [, symbols, hasEval] = block;
      symbols = symbols.slice(); // ensure ATTRS_BLOCK is always included (only once) in the list of symbols

      var attrsBlockIndex = symbols.indexOf(ATTRS_BLOCK);
      if (attrsBlockIndex === -1) {
        this.attrsBlockNumber = symbols.push(ATTRS_BLOCK);
      } else {
        this.attrsBlockNumber = attrsBlockIndex + 1;
      }
      this.symbolTable = {
        hasEval,
        symbols
      };
    }
    compile(syntax) {
      if (this.compiled !== null) return this.compiled;
      var m = meta(this.layout);
      var context = templateCompilationContext(syntax, m);
      var {
        encoder,
        program: {
          constants,
          resolver
        }
      } = context;
      function pushOp() {
        for (var _len3 = arguments.length, op = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          op[_key3] = arguments[_key3];
        }
        encodeOp(encoder, constants, resolver, m, op);
      }
      WrappedComponent(pushOp, this.layout, this.attrsBlockNumber);
      var handle = context.encoder.commit(m.size);
      if (typeof handle !== 'number') {
        return handle;
      }
      this.compiled = handle;
      return handle;
    }
  }
  _exports.WrappedBuilder = WrappedBuilder;
  var clientId = 0;
  var templateCacheCounters = {
    cacheHit: 0,
    cacheMiss: 0
  };
  /**
   * Wraps a template js in a template module to change it into a factory
   * that handles lazy parsing the template and to create per env singletons
   * of the template.
   */
  _exports.templateCacheCounters = templateCacheCounters;
  function templateFactory(_ref45) {
    var {
      id: templateId,
      moduleName,
      block,
      scope,
      isStrictMode
    } = _ref45;
    // TODO(template-refactors): This should be removed in the near future, as it
    // appears that id is unused. It is currently kept for backwards compat reasons.
    var id = templateId || `client-${clientId++}`; // TODO: This caches JSON serialized output once in case a template is
    // compiled by multiple owners, but we haven't verified if this is actually
    // helpful. We should benchmark this in the future.

    var parsedBlock;
    var ownerlessTemplate = null;
    var templateCache = new WeakMap();
    var factory = owner => {
      if (parsedBlock === undefined) {
        parsedBlock = JSON.parse(block);
      }
      if (owner === undefined) {
        if (ownerlessTemplate === null) {
          templateCacheCounters.cacheMiss++;
          ownerlessTemplate = new TemplateImpl({
            id,
            block: parsedBlock,
            moduleName,
            owner: null,
            scope,
            isStrictMode
          });
        } else {
          templateCacheCounters.cacheHit++;
        }
        return ownerlessTemplate;
      }
      var result = templateCache.get(owner);
      if (result === undefined) {
        templateCacheCounters.cacheMiss++;
        result = new TemplateImpl({
          id,
          block: parsedBlock,
          moduleName,
          owner,
          scope,
          isStrictMode
        });
        templateCache.set(owner, result);
      } else {
        templateCacheCounters.cacheHit++;
      }
      return result;
    };
    factory.__id = id;
    factory.__meta = {
      moduleName
    };
    return factory;
  }
  class TemplateImpl {
    constructor(parsedLayout) {
      this.parsedLayout = parsedLayout;
      this.result = 'ok';
      this.layout = null;
      this.wrappedLayout = null;
    }
    get moduleName() {
      return this.parsedLayout.moduleName;
    }
    get id() {
      return this.parsedLayout.id;
    } // TODO(template-refactors): This should be removed in the near future, it is
    // only being exposed for backwards compatibility

    get referrer() {
      return {
        moduleName: this.parsedLayout.moduleName,
        owner: this.parsedLayout.owner
      };
    }
    asLayout() {
      if (this.layout) return this.layout;
      return this.layout = compilable((0, _util.assign)({}, this.parsedLayout), this.moduleName);
    }
    asWrappedLayout() {
      if (this.wrappedLayout) return this.wrappedLayout;
      return this.wrappedLayout = new WrappedBuilder((0, _util.assign)({}, this.parsedLayout), this.moduleName);
    }
  }
});
define("@glimmer/owner", ["exports", "@glimmer/util"], function (_exports, _util) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.OWNER = void 0;
  _exports.getOwner = getOwner;
  _exports.setOwner = setOwner;
  var OWNER = (0, _util.symbol)('OWNER');
  /**
    Framework objects in a Glimmer application may receive an owner object.
    Glimmer is unopinionated about this owner, but will forward it through its
    internal resolution system, and through its managers if it is provided.
  */
  _exports.OWNER = OWNER;
  function getOwner(object) {
    return object[OWNER];
  }
  /**
    `setOwner` set's an object's owner
  */

  function setOwner(object, owner) {
    object[OWNER] = owner;
  }
});
define("@glimmer/program", ["exports", "@glimmer/util", "@glimmer/manager", "@glimmer/opcode-compiler"], function (_exports, _util, _manager, _opcodeCompiler) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RuntimeProgramImpl = _exports.RuntimeOpImpl = _exports.RuntimeHeapImpl = _exports.RuntimeConstantsImpl = _exports.HeapImpl = _exports.ConstantsImpl = _exports.CompileTimeConstantImpl = void 0;
  _exports.artifacts = artifacts;
  _exports.hydrateHeap = hydrateHeap;
  /**
   * Default component template, which is a plain yield
   */
  var DEFAULT_TEMPLATE_BLOCK = [[[18
  /* Yield */, 1, null]], ['&default'], false, []];
  var DEFAULT_TEMPLATE = {
    // random uuid
    id: '1b32f5c2-7623-43d6-a0ad-9672898920a1',
    moduleName: '__default__.hbs',
    block: JSON.stringify(DEFAULT_TEMPLATE_BLOCK),
    scope: null,
    isStrictMode: true
  };
  var WELL_KNOWN_EMPTY_ARRAY = Object.freeze([]);
  var STARTER_CONSTANTS = (0, _util.constants)(WELL_KNOWN_EMPTY_ARRAY);
  var WELL_KNOWN_EMPTY_ARRAY_POSITION = STARTER_CONSTANTS.indexOf(WELL_KNOWN_EMPTY_ARRAY);
  class CompileTimeConstantImpl {
    constructor() {
      // `0` means NULL
      this.values = STARTER_CONSTANTS.slice();
      this.indexMap = new Map(this.values.map((value, index) => [value, index]));
    }
    value(value) {
      var indexMap = this.indexMap;
      var index = indexMap.get(value);
      if (index === undefined) {
        index = this.values.push(value) - 1;
        indexMap.set(value, index);
      }
      return index;
    }
    array(values) {
      if (values.length === 0) {
        return WELL_KNOWN_EMPTY_ARRAY_POSITION;
      }
      var handles = new Array(values.length);
      for (var i = 0; i < values.length; i++) {
        handles[i] = this.value(values[i]);
      }
      return this.value(handles);
    }
    toPool() {
      return this.values;
    }
  }
  _exports.CompileTimeConstantImpl = CompileTimeConstantImpl;
  class RuntimeConstantsImpl {
    constructor(pool) {
      this.values = pool;
    }
    getValue(handle) {
      return this.values[handle];
    }
    getArray(value) {
      var handles = this.getValue(value);
      var reified = new Array(handles.length);
      for (var i = 0; i < handles.length; i++) {
        var n = handles[i];
        reified[i] = this.getValue(n);
      }
      return reified;
    }
  }
  _exports.RuntimeConstantsImpl = RuntimeConstantsImpl;
  class ConstantsImpl extends CompileTimeConstantImpl {
    constructor() {
      super(...arguments);
      this.reifiedArrs = {
        [WELL_KNOWN_EMPTY_ARRAY_POSITION]: WELL_KNOWN_EMPTY_ARRAY
      };
      this.defaultTemplate = (0, _opcodeCompiler.templateFactory)(DEFAULT_TEMPLATE)(); // Used for tests and debugging purposes, and to be able to analyze large apps
      // This is why it's enabled even in production

      this.helperDefinitionCount = 0;
      this.modifierDefinitionCount = 0;
      this.componentDefinitionCount = 0;
      this.helperDefinitionCache = new WeakMap();
      this.modifierDefinitionCache = new WeakMap();
      this.componentDefinitionCache = new WeakMap();
    }
    helper(definitionState,
    // TODO: Add a way to expose resolved name for debugging
    _resolvedName, isOptional) {
      if (_resolvedName === void 0) {
        _resolvedName = null;
      }
      var handle = this.helperDefinitionCache.get(definitionState);
      if (handle === undefined) {
        var managerOrHelper = (0, _manager.getInternalHelperManager)(definitionState, isOptional);
        if (managerOrHelper === null) {
          this.helperDefinitionCache.set(definitionState, null);
          return null;
        }
        var helper = typeof managerOrHelper === 'function' ? managerOrHelper : managerOrHelper.getHelper(definitionState);
        handle = this.value(helper);
        this.helperDefinitionCache.set(definitionState, handle);
        this.helperDefinitionCount++;
      }
      return handle;
    }
    modifier(definitionState, resolvedName, isOptional) {
      if (resolvedName === void 0) {
        resolvedName = null;
      }
      var handle = this.modifierDefinitionCache.get(definitionState);
      if (handle === undefined) {
        var manager = (0, _manager.getInternalModifierManager)(definitionState, isOptional);
        if (manager === null) {
          this.modifierDefinitionCache.set(definitionState, null);
          return null;
        }
        var definition = {
          resolvedName,
          manager,
          state: definitionState
        };
        handle = this.value(definition);
        this.modifierDefinitionCache.set(definitionState, handle);
        this.modifierDefinitionCount++;
      }
      return handle;
    }
    component(definitionState, owner, isOptional) {
      var _a;
      var definition = this.componentDefinitionCache.get(definitionState);
      if (definition === undefined) {
        var manager = (0, _manager.getInternalComponentManager)(definitionState, isOptional);
        if (manager === null) {
          this.componentDefinitionCache.set(definitionState, null);
          return null;
        }
        var capabilities = (0, _manager.capabilityFlagsFrom)(manager.getCapabilities(definitionState));
        var templateFactory$$1 = (0, _manager.getComponentTemplate)(definitionState);
        var compilable = null;
        var template;
        if (!(0, _manager.managerHasCapability)(manager, capabilities, 1
        /* DynamicLayout */)) {
          template = (_a = templateFactory$$1 === null || templateFactory$$1 === void 0 ? void 0 : templateFactory$$1(owner)) !== null && _a !== void 0 ? _a : this.defaultTemplate;
        } else {
          template = templateFactory$$1 === null || templateFactory$$1 === void 0 ? void 0 : templateFactory$$1(owner);
        }
        if (template !== undefined) {
          template = (0, _util.unwrapTemplate)(template);
          compilable = (0, _manager.managerHasCapability)(manager, capabilities, 1024
          /* Wrapped */) ? template.asWrappedLayout() : template.asLayout();
        }
        definition = {
          resolvedName: null,
          handle: -1,
          manager,
          capabilities,
          state: definitionState,
          compilable
        };
        definition.handle = this.value(definition);
        this.componentDefinitionCache.set(definitionState, definition);
        this.componentDefinitionCount++;
      }
      return definition;
    }
    resolvedComponent(resolvedDefinition, resolvedName) {
      var definition = this.componentDefinitionCache.get(resolvedDefinition);
      if (definition === undefined) {
        var {
          manager,
          state,
          template
        } = resolvedDefinition;
        var capabilities = (0, _manager.capabilityFlagsFrom)(manager.getCapabilities(resolvedDefinition));
        var compilable = null;
        if (!(0, _manager.managerHasCapability)(manager, capabilities, 1
        /* DynamicLayout */)) {
          template = template !== null && template !== void 0 ? template : this.defaultTemplate;
        }
        if (template !== null) {
          template = (0, _util.unwrapTemplate)(template);
          compilable = (0, _manager.managerHasCapability)(manager, capabilities, 1024
          /* Wrapped */) ? template.asWrappedLayout() : template.asLayout();
        }
        definition = {
          resolvedName,
          handle: -1,
          manager,
          capabilities,
          state,
          compilable
        };
        definition.handle = this.value(definition);
        this.componentDefinitionCache.set(resolvedDefinition, definition);
        this.componentDefinitionCount++;
      }
      return definition;
    }
    getValue(index) {
      return this.values[index];
    }
    getArray(index) {
      var reifiedArrs = this.reifiedArrs;
      var reified = reifiedArrs[index];
      if (reified === undefined) {
        var names = this.getValue(index);
        reified = new Array(names.length);
        for (var i = 0; i < names.length; i++) {
          reified[i] = this.getValue(names[i]);
        }
        reifiedArrs[index] = reified;
      }
      return reified;
    }
  }
  _exports.ConstantsImpl = ConstantsImpl;
  class RuntimeOpImpl {
    constructor(heap) {
      this.heap = heap;
      this.offset = 0;
    }
    get size() {
      var rawType = this.heap.getbyaddr(this.offset);
      return ((rawType & 768
      /* OPERAND_LEN_MASK */) >> 8
      /* ARG_SHIFT */) + 1;
    }
    get isMachine() {
      var rawType = this.heap.getbyaddr(this.offset);
      return rawType & 1024
      /* MACHINE_MASK */ ? 1 : 0;
    }
    get type() {
      return this.heap.getbyaddr(this.offset) & 255
      /* TYPE_MASK */;
    }

    get op1() {
      return this.heap.getbyaddr(this.offset + 1);
    }
    get op2() {
      return this.heap.getbyaddr(this.offset + 2);
    }
    get op3() {
      return this.heap.getbyaddr(this.offset + 3);
    }
  }
  _exports.RuntimeOpImpl = RuntimeOpImpl;
  var PAGE_SIZE = 0x100000;
  class RuntimeHeapImpl {
    constructor(serializedHeap) {
      var {
        buffer,
        table
      } = serializedHeap;
      this.heap = new Int32Array(buffer);
      this.table = table;
    } // It is illegal to close over this address, as compaction
    // may move it. However, it is legal to use this address
    // multiple times between compactions.

    getaddr(handle) {
      return this.table[handle];
    }
    getbyaddr(address) {
      return this.heap[address];
    }
    sizeof(handle) {
      return sizeof(this.table, handle);
    }
  }
  _exports.RuntimeHeapImpl = RuntimeHeapImpl;
  function hydrateHeap(serializedHeap) {
    return new RuntimeHeapImpl(serializedHeap);
  }
  /**
   * The Heap is responsible for dynamically allocating
   * memory in which we read/write the VM's instructions
   * from/to. When we malloc we pass out a VMHandle, which
   * is used as an indirect way of accessing the memory during
   * execution of the VM. Internally we track the different
   * regions of the memory in an int array known as the table.
   *
   * The table 32-bit aligned and has the following layout:
   *
   * | ... | hp (u32) |       info (u32)   | size (u32) |
   * | ... |  Handle  | Scope Size | State | Size       |
   * | ... | 32bits   | 30bits     | 2bits | 32bit      |
   *
   * With this information we effectively have the ability to
   * control when we want to free memory. That being said you
   * can not free during execution as raw address are only
   * valid during the execution. This means you cannot close
   * over them as you will have a bad memory access exception.
   */

  class HeapImpl {
    constructor() {
      this.offset = 0;
      this.handle = 0;
      this.heap = new Int32Array(PAGE_SIZE);
      this.handleTable = [];
      this.handleState = [];
    }
    push(item) {
      this.sizeCheck();
      this.heap[this.offset++] = item;
    }
    sizeCheck() {
      var {
        heap
      } = this;
      if (this.offset === this.heap.length) {
        var newHeap = new Int32Array(heap.length + PAGE_SIZE);
        newHeap.set(heap, 0);
        this.heap = newHeap;
      }
    }
    getbyaddr(address) {
      return this.heap[address];
    }
    setbyaddr(address, value) {
      this.heap[address] = value;
    }
    malloc() {
      // push offset, info, size
      this.handleTable.push(this.offset);
      return this.handleTable.length - 1;
    }
    finishMalloc(handle) {}
    size() {
      return this.offset;
    } // It is illegal to close over this address, as compaction
    // may move it. However, it is legal to use this address
    // multiple times between compactions.

    getaddr(handle) {
      return this.handleTable[handle];
    }
    sizeof(handle) {
      return sizeof(this.handleTable, handle);
    }
    free(handle) {
      this.handleState[handle] = 1
      /* Freed */;
    }
    /**
     * The heap uses the [Mark-Compact Algorithm](https://en.wikipedia.org/wiki/Mark-compact_algorithm) to shift
     * reachable memory to the bottom of the heap and freeable
     * memory to the top of the heap. When we have shifted all
     * the reachable memory to the top of the heap, we move the
     * offset to the next free position.
     */

    compact() {
      var compactedSize = 0;
      var {
        handleTable,
        handleState,
        heap
      } = this;
      for (var i = 0; i < length; i++) {
        var offset = handleTable[i];
        var size = handleTable[i + 1] - offset;
        var state = handleState[i];
        if (state === 2
        /* Purged */) {
          continue;
        } else if (state === 1
        /* Freed */) {
          // transition to "already freed" aka "purged"
          // a good improvement would be to reuse
          // these slots
          handleState[i] = 2
          /* Purged */;

          compactedSize += size;
        } else if (state === 0
        /* Allocated */) {
          for (var j = offset; j <= i + size; j++) {
            heap[j - compactedSize] = heap[j];
          }
          handleTable[i] = offset - compactedSize;
        } else if (state === 3
        /* Pointer */) {
          handleTable[i] = offset - compactedSize;
        }
      }
      this.offset = this.offset - compactedSize;
    }
    capture(offset) {
      if (offset === void 0) {
        offset = this.offset;
      }
      // Only called in eager mode
      var buffer = slice(this.heap, 0, offset).buffer;
      return {
        handle: this.handle,
        table: this.handleTable,
        buffer: buffer
      };
    }
  }
  _exports.HeapImpl = HeapImpl;
  class RuntimeProgramImpl {
    constructor(constants$$1, heap) {
      this.constants = constants$$1;
      this.heap = heap;
      this._opcode = new RuntimeOpImpl(this.heap);
    }
    opcode(offset) {
      this._opcode.offset = offset;
      return this._opcode;
    }
  }
  _exports.RuntimeProgramImpl = RuntimeProgramImpl;
  function slice(arr, start, end) {
    if (arr.slice !== undefined) {
      return arr.slice(start, end);
    }
    var ret = new Int32Array(end);
    for (; start < end; start++) {
      ret[start] = arr[start];
    }
    return ret;
  }
  function sizeof(table, handle) {
    {
      return -1;
    }
  }
  function artifacts() {
    return {
      constants: new ConstantsImpl(),
      heap: new HeapImpl()
    };
  }
});
define("@glimmer/reference", ["exports", "@glimmer/global-context", "@glimmer/util", "@glimmer/validator"], function (_exports, _globalContext, _util, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.UNDEFINED_REFERENCE = _exports.TRUE_REFERENCE = _exports.REFERENCE = _exports.NULL_REFERENCE = _exports.FALSE_REFERENCE = void 0;
  _exports.childRefFor = childRefFor;
  _exports.childRefFromParts = childRefFromParts;
  _exports.createComputeRef = createComputeRef;
  _exports.createConstRef = createConstRef;
  _exports.createDebugAliasRef = void 0;
  _exports.createInvokableRef = createInvokableRef;
  _exports.createIteratorItemRef = createIteratorItemRef;
  _exports.createIteratorRef = createIteratorRef;
  _exports.createPrimitiveRef = createPrimitiveRef;
  _exports.createReadOnlyRef = createReadOnlyRef;
  _exports.createUnboundRef = createUnboundRef;
  _exports.isConstRef = isConstRef;
  _exports.isInvokableRef = isInvokableRef;
  _exports.isUpdatableRef = isUpdatableRef;
  _exports.updateRef = updateRef;
  _exports.valueForRef = valueForRef;
  var REFERENCE = (0, _util.symbol)('REFERENCE');
  _exports.REFERENCE = REFERENCE;
  class ReferenceImpl {
    constructor(type) {
      this.tag = null;
      this.lastRevision = _validator.INITIAL;
      this.children = null;
      this.compute = null;
      this.update = null;
      this[REFERENCE] = type;
    }
  }
  function createPrimitiveRef(value) {
    var ref = new ReferenceImpl(2
    /* Unbound */);

    ref.tag = _validator.CONSTANT_TAG;
    ref.lastValue = value;
    if (true /* DEBUG */) {
      ref.debugLabel = String(value);
    }
    return ref;
  }
  var UNDEFINED_REFERENCE = createPrimitiveRef(undefined);
  _exports.UNDEFINED_REFERENCE = UNDEFINED_REFERENCE;
  var NULL_REFERENCE = createPrimitiveRef(null);
  _exports.NULL_REFERENCE = NULL_REFERENCE;
  var TRUE_REFERENCE = createPrimitiveRef(true);
  _exports.TRUE_REFERENCE = TRUE_REFERENCE;
  var FALSE_REFERENCE = createPrimitiveRef(false);
  _exports.FALSE_REFERENCE = FALSE_REFERENCE;
  function createConstRef(value, debugLabel) {
    var ref = new ReferenceImpl(0
    /* Constant */);

    ref.lastValue = value;
    ref.tag = _validator.CONSTANT_TAG;
    if (true /* DEBUG */) {
      ref.debugLabel = debugLabel;
    }
    return ref;
  }
  function createUnboundRef(value, debugLabel) {
    var ref = new ReferenceImpl(2
    /* Unbound */);

    ref.lastValue = value;
    ref.tag = _validator.CONSTANT_TAG;
    if (true /* DEBUG */) {
      ref.debugLabel = debugLabel;
    }
    return ref;
  }
  function createComputeRef(compute, update, debugLabel) {
    if (update === void 0) {
      update = null;
    }
    if (debugLabel === void 0) {
      debugLabel = 'unknown';
    }
    var ref = new ReferenceImpl(1
    /* Compute */);

    ref.compute = compute;
    ref.update = update;
    if (true /* DEBUG */) {
      ref.debugLabel = `(result of a \`${debugLabel}\` helper)`;
    }
    return ref;
  }
  function createReadOnlyRef(ref) {
    if (!isUpdatableRef(ref)) return ref;
    return createComputeRef(() => valueForRef(ref), null, ref.debugLabel);
  }
  function isInvokableRef(ref) {
    return ref[REFERENCE] === 3
    /* Invokable */;
  }

  function createInvokableRef(inner) {
    var ref = createComputeRef(() => valueForRef(inner), value => updateRef(inner, value));
    ref.debugLabel = inner.debugLabel;
    ref[REFERENCE] = 3
    /* Invokable */;

    return ref;
  }
  function isConstRef(_ref) {
    var ref = _ref;
    return ref.tag === _validator.CONSTANT_TAG;
  }
  function isUpdatableRef(_ref) {
    var ref = _ref;
    return ref.update !== null;
  }
  function valueForRef(_ref) {
    var ref = _ref;
    var {
      tag
    } = ref;
    if (tag === _validator.CONSTANT_TAG) {
      return ref.lastValue;
    }
    var {
      lastRevision
    } = ref;
    var lastValue;
    if (tag === null || !(0, _validator.validateTag)(tag, lastRevision)) {
      var {
        compute
      } = ref;
      tag = ref.tag = (0, _validator.track)(() => {
        lastValue = ref.lastValue = compute();
      }, true /* DEBUG */ && ref.debugLabel);
      ref.lastRevision = (0, _validator.valueForTag)(tag);
    } else {
      lastValue = ref.lastValue;
    }
    (0, _validator.consumeTag)(tag);
    return lastValue;
  }
  function updateRef(_ref, value) {
    var ref = _ref;
    var update = ref.update;
    update(value);
  }
  function childRefFor(_parentRef, path) {
    var parentRef = _parentRef;
    var type = parentRef[REFERENCE];
    var children = parentRef.children;
    var child;
    if (children === null) {
      children = parentRef.children = new Map();
    } else {
      child = children.get(path);
      if (child !== undefined) {
        return child;
      }
    }
    if (type === 2
    /* Unbound */) {
      var parent = valueForRef(parentRef);
      if ((0, _util.isDict)(parent)) {
        child = createUnboundRef(parent[path], true /* DEBUG */ && `${parentRef.debugLabel}.${path}`);
      } else {
        child = UNDEFINED_REFERENCE;
      }
    } else {
      child = createComputeRef(() => {
        var parent = valueForRef(parentRef);
        if ((0, _util.isDict)(parent)) {
          return (0, _globalContext.getProp)(parent, path);
        }
      }, val => {
        var parent = valueForRef(parentRef);
        if ((0, _util.isDict)(parent)) {
          return (0, _globalContext.setProp)(parent, path, val);
        }
      });
      if (true /* DEBUG */) {
        child.debugLabel = `${parentRef.debugLabel}.${path}`;
      }
    }
    children.set(path, child);
    return child;
  }
  function childRefFromParts(root, parts) {
    var reference = root;
    for (var i = 0; i < parts.length; i++) {
      reference = childRefFor(reference, parts[i]);
    }
    return reference;
  }
  var createDebugAliasRef;
  _exports.createDebugAliasRef = createDebugAliasRef;
  if (true /* DEBUG */) {
    _exports.createDebugAliasRef = createDebugAliasRef = (debugLabel, inner) => {
      var update = isUpdatableRef(inner) ? value => updateRef(inner, value) : null;
      var ref = createComputeRef(() => valueForRef(inner), update);
      ref[REFERENCE] = inner[REFERENCE];
      ref.debugLabel = debugLabel;
      return ref;
    };
  }
  var NULL_IDENTITY = {};
  var KEY = (_, index) => index;
  var INDEX = (_, index) => String(index);
  var IDENTITY = item => {
    if (item === null) {
      // Returning null as an identity will cause failures since the iterator
      // can't tell that it's actually supposed to be null
      return NULL_IDENTITY;
    }
    return item;
  };
  function keyForPath(path) {
    if (true /* DEBUG */ && path[0] === '@') {
      throw new Error(`invalid keypath: '${path}', valid keys: @index, @identity, or a path`);
    }
    return uniqueKeyFor(item => (0, _globalContext.getPath)(item, path));
  }
  function makeKeyFor(key) {
    switch (key) {
      case '@key':
        return uniqueKeyFor(KEY);
      case '@index':
        return uniqueKeyFor(INDEX);
      case '@identity':
        return uniqueKeyFor(IDENTITY);
      default:
        return keyForPath(key);
    }
  }
  class WeakMapWithPrimitives {
    get weakMap() {
      if (this._weakMap === undefined) {
        this._weakMap = new WeakMap();
      }
      return this._weakMap;
    }
    get primitiveMap() {
      if (this._primitiveMap === undefined) {
        this._primitiveMap = new Map();
      }
      return this._primitiveMap;
    }
    set(key, value) {
      if ((0, _util.isObject)(key)) {
        this.weakMap.set(key, value);
      } else {
        this.primitiveMap.set(key, value);
      }
    }
    get(key) {
      if ((0, _util.isObject)(key)) {
        return this.weakMap.get(key);
      } else {
        return this.primitiveMap.get(key);
      }
    }
  }
  var IDENTITIES = new WeakMapWithPrimitives();
  function identityForNthOccurence(value, count) {
    var identities = IDENTITIES.get(value);
    if (identities === undefined) {
      identities = [];
      IDENTITIES.set(value, identities);
    }
    var identity = identities[count];
    if (identity === undefined) {
      identity = {
        value,
        count
      };
      identities[count] = identity;
    }
    return identity;
  }
  /**
   * When iterating over a list, it's possible that an item with the same unique
   * key could be encountered twice:
   *
   * ```js
   * let arr = ['same', 'different', 'same', 'same'];
   * ```
   *
   * In general, we want to treat these items as _unique within the list_. To do
   * this, we track the occurences of every item as we iterate the list, and when
   * an item occurs more than once, we generate a new unique key just for that
   * item, and that occurence within the list. The next time we iterate the list,
   * and encounter an item for the nth time, we can get the _same_ key, and let
   * Glimmer know that it should reuse the DOM for the previous nth occurence.
   */

  function uniqueKeyFor(keyFor) {
    var seen = new WeakMapWithPrimitives();
    return (value, memo) => {
      var key = keyFor(value, memo);
      var count = seen.get(key) || 0;
      seen.set(key, count + 1);
      if (count === 0) {
        return key;
      }
      return identityForNthOccurence(key, count);
    };
  }
  function createIteratorRef(listRef, key) {
    return createComputeRef(() => {
      var iterable = valueForRef(listRef);
      var keyFor = makeKeyFor(key);
      if (Array.isArray(iterable)) {
        return new ArrayIterator(iterable, keyFor);
      }
      var maybeIterator = (0, _globalContext.toIterator)(iterable);
      if (maybeIterator === null) {
        return new ArrayIterator(_util.EMPTY_ARRAY, () => null);
      }
      return new IteratorWrapper(maybeIterator, keyFor);
    });
  }
  function createIteratorItemRef(_value) {
    var value = _value;
    var tag = (0, _validator.createTag)();
    return createComputeRef(() => {
      (0, _validator.consumeTag)(tag);
      return value;
    }, newValue => {
      if (value !== newValue) {
        value = newValue;
        (0, _validator.dirtyTag)(tag);
      }
    });
  }
  class IteratorWrapper {
    constructor(inner, keyFor) {
      this.inner = inner;
      this.keyFor = keyFor;
    }
    isEmpty() {
      return this.inner.isEmpty();
    }
    next() {
      var nextValue = this.inner.next();
      if (nextValue !== null) {
        nextValue.key = this.keyFor(nextValue.value, nextValue.memo);
      }
      return nextValue;
    }
  }
  class ArrayIterator {
    constructor(iterator, keyFor) {
      this.iterator = iterator;
      this.keyFor = keyFor;
      this.pos = 0;
      if (iterator.length === 0) {
        this.current = {
          kind: 'empty'
        };
      } else {
        this.current = {
          kind: 'first',
          value: iterator[this.pos]
        };
      }
    }
    isEmpty() {
      return this.current.kind === 'empty';
    }
    next() {
      var value;
      var current = this.current;
      if (current.kind === 'first') {
        this.current = {
          kind: 'progress'
        };
        value = current.value;
      } else if (this.pos >= this.iterator.length - 1) {
        return null;
      } else {
        value = this.iterator[++this.pos];
      }
      var {
        keyFor
      } = this;
      var key = keyFor(value, this.pos);
      var memo = this.pos;
      return {
        key,
        value,
        memo
      };
    }
  }
});
define("@glimmer/runtime", ["exports", "@glimmer/util", "@glimmer/reference", "@glimmer/global-context", "@glimmer/destroyable", "@glimmer/vm", "@glimmer/validator", "@glimmer/manager", "@glimmer/program", "@glimmer/owner", "@glimmer/runtime"], function (_exports, _util, _reference, _globalContext, _destroyable2, _vm2, _validator, _manager5, _program, _owner2, _runtime) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.array = _exports.UpdatingVM = _exports.UpdatableBlockImpl = _exports.TemplateOnlyComponentManager = _exports.TemplateOnlyComponent = _exports.TEMPLATE_ONLY_COMPONENT_MANAGER = _exports.SimpleDynamicAttribute = _exports.SERIALIZATION_FIRST_NODE_STRING = _exports.RemoteLiveBlock = _exports.RehydrateBuilder = _exports.PartialScopeImpl = _exports.NewElementBuilder = _exports.LowLevelVM = _exports.IDOMChanges = _exports.EnvironmentImpl = _exports.EMPTY_POSITIONAL = _exports.EMPTY_NAMED = _exports.EMPTY_ARGS = _exports.DynamicScopeImpl = _exports.DynamicAttribute = _exports.DOMTreeConstruction = _exports.DOMChanges = _exports.CursorImpl = _exports.CurriedValue = _exports.ConcreteBounds = void 0;
  _exports.clear = clear;
  _exports.clientBuilder = clientBuilder;
  _exports.concat = void 0;
  _exports.createCapturedArgs = createCapturedArgs;
  _exports.curry = curry;
  Object.defineProperty(_exports, "destroy", {
    enumerable: true,
    get: function () {
      return _destroyable2.destroy;
    }
  });
  _exports.dynamicAttribute = dynamicAttribute;
  _exports.hash = _exports.get = _exports.fn = void 0;
  _exports.inTransaction = inTransaction;
  _exports.invokeHelper = invokeHelper;
  Object.defineProperty(_exports, "isDestroyed", {
    enumerable: true,
    get: function () {
      return _destroyable2.isDestroyed;
    }
  });
  Object.defineProperty(_exports, "isDestroying", {
    enumerable: true,
    get: function () {
      return _destroyable2.isDestroying;
    }
  });
  _exports.isSerializationFirstNode = isSerializationFirstNode;
  _exports.isWhitespace = isWhitespace;
  _exports.normalizeProperty = normalizeProperty;
  _exports.on = void 0;
  Object.defineProperty(_exports, "registerDestructor", {
    enumerable: true,
    get: function () {
      return _destroyable2.registerDestructor;
    }
  });
  _exports.rehydrationBuilder = rehydrationBuilder;
  _exports.reifyArgs = reifyArgs;
  _exports.reifyNamed = reifyNamed$1;
  _exports.reifyPositional = reifyPositional$1;
  _exports.renderComponent = renderComponent;
  _exports.renderMain = renderMain;
  _exports.renderSync = renderSync;
  _exports.resetDebuggerCallback = resetDebuggerCallback;
  _exports.runtimeContext = runtimeContext;
  _exports.setDebuggerCallback = setDebuggerCallback;
  _exports.templateOnlyComponent = templateOnlyComponent;
  class DynamicScopeImpl {
    constructor(bucket) {
      if (bucket) {
        this.bucket = (0, _util.assign)({}, bucket);
      } else {
        this.bucket = {};
      }
    }
    get(key) {
      return this.bucket[key];
    }
    set(key, reference) {
      return this.bucket[key] = reference;
    }
    child() {
      return new DynamicScopeImpl(this.bucket);
    }
  }
  _exports.DynamicScopeImpl = DynamicScopeImpl;
  class PartialScopeImpl {
    constructor(
    // the 0th slot is `self`
    slots, owner, callerScope,
    // named arguments and blocks passed to a layout that uses eval
    evalScope,
    // locals in scope when the partial was invoked
    partialMap) {
      this.slots = slots;
      this.owner = owner;
      this.callerScope = callerScope;
      this.evalScope = evalScope;
      this.partialMap = partialMap;
    }
    static root(self, size, owner) {
      if (size === void 0) {
        size = 0;
      }
      var refs = new Array(size + 1);
      for (var i = 0; i <= size; i++) {
        refs[i] = _reference.UNDEFINED_REFERENCE;
      }
      return new PartialScopeImpl(refs, owner, null, null, null).init({
        self
      });
    }
    static sized(size, owner) {
      if (size === void 0) {
        size = 0;
      }
      var refs = new Array(size + 1);
      for (var i = 0; i <= size; i++) {
        refs[i] = _reference.UNDEFINED_REFERENCE;
      }
      return new PartialScopeImpl(refs, owner, null, null, null);
    }
    init(_ref) {
      var {
        self
      } = _ref;
      this.slots[0] = self;
      return this;
    }
    getSelf() {
      return this.get(0);
    }
    getSymbol(symbol$$1) {
      return this.get(symbol$$1);
    }
    getBlock(symbol$$1) {
      var block = this.get(symbol$$1);
      return block === _reference.UNDEFINED_REFERENCE ? null : block;
    }
    getEvalScope() {
      return this.evalScope;
    }
    getPartialMap() {
      return this.partialMap;
    }
    bind(symbol$$1, value) {
      this.set(symbol$$1, value);
    }
    bindSelf(self) {
      this.set(0, self);
    }
    bindSymbol(symbol$$1, value) {
      this.set(symbol$$1, value);
    }
    bindBlock(symbol$$1, value) {
      this.set(symbol$$1, value);
    }
    bindEvalScope(map) {
      this.evalScope = map;
    }
    bindPartialMap(map) {
      this.partialMap = map;
    }
    bindCallerScope(scope) {
      this.callerScope = scope;
    }
    getCallerScope() {
      return this.callerScope;
    }
    child() {
      return new PartialScopeImpl(this.slots.slice(), this.owner, this.callerScope, this.evalScope, this.partialMap);
    }
    get(index) {
      if (index >= this.slots.length) {
        throw new RangeError(`BUG: cannot get $${index} from scope; length=${this.slots.length}`);
      }
      return this.slots[index];
    }
    set(index, value) {
      if (index >= this.slots.length) {
        throw new RangeError(`BUG: cannot get $${index} from scope; length=${this.slots.length}`);
      }
      this.slots[index] = value;
    }
  }

  // the VM in other classes, but are not intended to be a part of
  // Glimmer's API.
  _exports.PartialScopeImpl = PartialScopeImpl;
  var INNER_VM = (0, _util.symbol)('INNER_VM');
  var DESTROYABLE_STACK = (0, _util.symbol)('DESTROYABLE_STACK');
  var STACKS = (0, _util.symbol)('STACKS');
  var REGISTERS = (0, _util.symbol)('REGISTERS');
  var HEAP = (0, _util.symbol)('HEAP');
  var CONSTANTS = (0, _util.symbol)('CONSTANTS');
  var ARGS = (0, _util.symbol)('ARGS');
  var PC = (0, _util.symbol)('PC');
  class CursorImpl {
    constructor(element, nextSibling) {
      this.element = element;
      this.nextSibling = nextSibling;
    }
  }
  _exports.CursorImpl = CursorImpl;
  class ConcreteBounds {
    constructor(parentNode, first, last) {
      this.parentNode = parentNode;
      this.first = first;
      this.last = last;
    }
    parentElement() {
      return this.parentNode;
    }
    firstNode() {
      return this.first;
    }
    lastNode() {
      return this.last;
    }
  }
  _exports.ConcreteBounds = ConcreteBounds;
  class SingleNodeBounds {
    constructor(parentNode, node) {
      this.parentNode = parentNode;
      this.node = node;
    }
    parentElement() {
      return this.parentNode;
    }
    firstNode() {
      return this.node;
    }
    lastNode() {
      return this.node;
    }
  }
  function move(bounds, reference) {
    var parent = bounds.parentElement();
    var first = bounds.firstNode();
    var last = bounds.lastNode();
    var current = first;
    while (true) {
      var next = current.nextSibling;
      parent.insertBefore(current, reference);
      if (current === last) {
        return next;
      }
      current = next;
    }
  }
  function clear(bounds) {
    var parent = bounds.parentElement();
    var first = bounds.firstNode();
    var last = bounds.lastNode();
    var current = first;
    while (true) {
      var next = current.nextSibling;
      parent.removeChild(current);
      if (current === last) {
        return next;
      }
      current = next;
    }
  }
  function normalizeStringValue(value) {
    if (isEmpty(value)) {
      return '';
    }
    return String(value);
  }
  function shouldCoerce(value) {
    return isString(value) || isEmpty(value) || typeof value === 'boolean' || typeof value === 'number';
  }
  function isEmpty(value) {
    return value === null || value === undefined || typeof value.toString !== 'function';
  }
  function isSafeString(value) {
    return typeof value === 'object' && value !== null && typeof value.toHTML === 'function';
  }
  function isNode(value) {
    return typeof value === 'object' && value !== null && typeof value.nodeType === 'number';
  }
  function isFragment(value) {
    return isNode(value) && value.nodeType === 11;
  }
  function isString(value) {
    return typeof value === 'string';
  }

  /*
   * @method normalizeProperty
   * @param element {HTMLElement}
   * @param slotName {String}
   * @returns {Object} { name, type }
   */
  function normalizeProperty(element, slotName) {
    var type, normalized;
    if (slotName in element) {
      normalized = slotName;
      type = 'prop';
    } else {
      var lower = slotName.toLowerCase();
      if (lower in element) {
        type = 'prop';
        normalized = lower;
      } else {
        type = 'attr';
        normalized = slotName;
      }
    }
    if (type === 'prop' && (normalized.toLowerCase() === 'style' || preferAttr(element.tagName, normalized))) {
      type = 'attr';
    }
    return {
      normalized,
      type
    };
  }
  // * browser bug
  // * strange spec outlier

  var ATTR_OVERRIDES = {
    INPUT: {
      form: true,
      // Chrome 46.0.2464.0: 'autocorrect' in document.createElement('input') === false
      // Safari 8.0.7: 'autocorrect' in document.createElement('input') === false
      // Mobile Safari (iOS 8.4 simulator): 'autocorrect' in document.createElement('input') === true
      autocorrect: true,
      // Chrome 54.0.2840.98: 'list' in document.createElement('input') === true
      // Safari 9.1.3: 'list' in document.createElement('input') === false
      list: true
    },
    // element.form is actually a legitimate readOnly property, that is to be
    // mutated, but must be mutated by setAttribute...
    SELECT: {
      form: true
    },
    OPTION: {
      form: true
    },
    TEXTAREA: {
      form: true
    },
    LABEL: {
      form: true
    },
    FIELDSET: {
      form: true
    },
    LEGEND: {
      form: true
    },
    OBJECT: {
      form: true
    },
    OUTPUT: {
      form: true
    },
    BUTTON: {
      form: true
    }
  };
  function preferAttr(tagName, propName) {
    var tag = ATTR_OVERRIDES[tagName.toUpperCase()];
    return tag && tag[propName.toLowerCase()] || false;
  }
  var badProtocols = ['javascript:', 'vbscript:'];
  var badTags = ['A', 'BODY', 'LINK', 'IMG', 'IFRAME', 'BASE', 'FORM'];
  var badTagsForDataURI = ['EMBED'];
  var badAttributes = ['href', 'src', 'background', 'action'];
  var badAttributesForDataURI = ['src'];
  function has(array, item) {
    return array.indexOf(item) !== -1;
  }
  function checkURI(tagName, attribute) {
    return (tagName === null || has(badTags, tagName)) && has(badAttributes, attribute);
  }
  function checkDataURI(tagName, attribute) {
    if (tagName === null) return false;
    return has(badTagsForDataURI, tagName) && has(badAttributesForDataURI, attribute);
  }
  function requiresSanitization(tagName, attribute) {
    return checkURI(tagName, attribute) || checkDataURI(tagName, attribute);
  }
  var protocolForUrl;
  if (typeof URL === 'object' && URL !== null &&
  // this is super annoying, TS thinks that URL **must** be a function so `URL.parse` check
  // thinks it is `never` without this `as unknown as any`
  typeof URL.parse === 'function') {
    // In Ember-land the `fastboot` package sets the `URL` global to `require('url')`
    // ultimately, this should be changed (so that we can either rely on the natural `URL` global
    // that exists) but for now we have to detect the specific `FastBoot` case first
    //
    // a future version of `fastboot` will detect if this legacy URL setup is required (by
    // inspecting Ember version) and if new enough, it will avoid shadowing the `URL` global
    // constructor with `require('url')`.
    var nodeURL = URL;
    protocolForUrl = url => {
      var protocol = null;
      if (typeof url === 'string') {
        protocol = nodeURL.parse(url).protocol;
      }
      return protocol === null ? ':' : protocol;
    };
  } else if (typeof URL === 'function') {
    protocolForUrl = _url => {
      try {
        var url = new URL(_url);
        return url.protocol;
      } catch (error) {
        // any non-fully qualified url string will trigger an error (because there is no
        // baseURI that we can provide; in that case we **know** that the protocol is
        // "safe" because it isn't specifically one of the `badProtocols` listed above
        // (and those protocols can never be the default baseURI)
        return ':';
      }
    };
  } else {
    // fallback for IE11 support
    var parsingNode = document.createElement('a');
    protocolForUrl = url => {
      parsingNode.href = url;
      return parsingNode.protocol;
    };
  }
  function sanitizeAttributeValue(element, attribute, value) {
    var tagName = null;
    if (value === null || value === undefined) {
      return value;
    }
    if (isSafeString(value)) {
      return value.toHTML();
    }
    if (!element) {
      tagName = null;
    } else {
      tagName = element.tagName.toUpperCase();
    }
    var str = normalizeStringValue(value);
    if (checkURI(tagName, attribute)) {
      var protocol = protocolForUrl(str);
      if (has(badProtocols, protocol)) {
        return `unsafe:${str}`;
      }
    }
    if (checkDataURI(tagName, attribute)) {
      return `unsafe:${str}`;
    }
    return str;
  }
  function dynamicAttribute(element, attr, namespace, isTrusting) {
    if (isTrusting === void 0) {
      isTrusting = false;
    }
    var {
      tagName,
      namespaceURI
    } = element;
    var attribute = {
      element,
      name: attr,
      namespace
    };
    if (true /* DEBUG */ && attr === 'style' && !isTrusting) {
      return new DebugStyleAttributeManager(attribute);
    }
    if (namespaceURI === "http://www.w3.org/2000/svg"
    /* SVG */) {
      return buildDynamicAttribute(tagName, attr, attribute);
    }
    var {
      type,
      normalized
    } = normalizeProperty(element, attr);
    if (type === 'attr') {
      return buildDynamicAttribute(tagName, normalized, attribute);
    } else {
      return buildDynamicProperty(tagName, normalized, attribute);
    }
  }
  function buildDynamicAttribute(tagName, name, attribute) {
    if (requiresSanitization(tagName, name)) {
      return new SafeDynamicAttribute(attribute);
    } else {
      return new SimpleDynamicAttribute(attribute);
    }
  }
  function buildDynamicProperty(tagName, name, attribute) {
    if (requiresSanitization(tagName, name)) {
      return new SafeDynamicProperty(name, attribute);
    }
    if (isUserInputValue(tagName, name)) {
      return new InputValueDynamicAttribute(name, attribute);
    }
    if (isOptionSelected(tagName, name)) {
      return new OptionSelectedDynamicAttribute(name, attribute);
    }
    return new DefaultDynamicProperty(name, attribute);
  }
  class DynamicAttribute {
    constructor(attribute) {
      this.attribute = attribute;
    }
  }
  _exports.DynamicAttribute = DynamicAttribute;
  class SimpleDynamicAttribute extends DynamicAttribute {
    set(dom, value, _env) {
      var normalizedValue = normalizeValue(value);
      if (normalizedValue !== null) {
        var {
          name,
          namespace
        } = this.attribute;
        dom.__setAttribute(name, normalizedValue, namespace);
      }
    }
    update(value, _env) {
      var normalizedValue = normalizeValue(value);
      var {
        element,
        name
      } = this.attribute;
      if (normalizedValue === null) {
        element.removeAttribute(name);
      } else {
        element.setAttribute(name, normalizedValue);
      }
    }
  }
  _exports.SimpleDynamicAttribute = SimpleDynamicAttribute;
  class DefaultDynamicProperty extends DynamicAttribute {
    constructor(normalizedName, attribute) {
      super(attribute);
      this.normalizedName = normalizedName;
    }
    set(dom, value, _env) {
      if (value !== null && value !== undefined) {
        this.value = value;
        dom.__setProperty(this.normalizedName, value);
      }
    }
    update(value, _env) {
      var {
        element
      } = this.attribute;
      if (this.value !== value) {
        element[this.normalizedName] = this.value = value;
        if (value === null || value === undefined) {
          this.removeAttribute();
        }
      }
    }
    removeAttribute() {
      // TODO this sucks but to preserve properties first and to meet current
      // semantics we must do this.
      var {
        element,
        namespace
      } = this.attribute;
      if (namespace) {
        element.removeAttributeNS(namespace, this.normalizedName);
      } else {
        element.removeAttribute(this.normalizedName);
      }
    }
  }
  class SafeDynamicProperty extends DefaultDynamicProperty {
    set(dom, value, env) {
      var {
        element,
        name
      } = this.attribute;
      var sanitized = sanitizeAttributeValue(element, name, value);
      super.set(dom, sanitized, env);
    }
    update(value, env) {
      var {
        element,
        name
      } = this.attribute;
      var sanitized = sanitizeAttributeValue(element, name, value);
      super.update(sanitized, env);
    }
  }
  class SafeDynamicAttribute extends SimpleDynamicAttribute {
    set(dom, value, env) {
      var {
        element,
        name
      } = this.attribute;
      var sanitized = sanitizeAttributeValue(element, name, value);
      super.set(dom, sanitized, env);
    }
    update(value, env) {
      var {
        element,
        name
      } = this.attribute;
      var sanitized = sanitizeAttributeValue(element, name, value);
      super.update(sanitized, env);
    }
  }
  class InputValueDynamicAttribute extends DefaultDynamicProperty {
    set(dom, value) {
      dom.__setProperty('value', normalizeStringValue(value));
    }
    update(value) {
      var input = this.attribute.element;
      var currentValue = input.value;
      var normalizedValue = normalizeStringValue(value);
      if (currentValue !== normalizedValue) {
        input.value = normalizedValue;
      }
    }
  }
  class OptionSelectedDynamicAttribute extends DefaultDynamicProperty {
    set(dom, value) {
      if (value !== null && value !== undefined && value !== false) {
        dom.__setProperty('selected', true);
      }
    }
    update(value) {
      var option = this.attribute.element;
      if (value) {
        option.selected = true;
      } else {
        option.selected = false;
      }
    }
  }
  function isOptionSelected(tagName, attribute) {
    return tagName === 'OPTION' && attribute === 'selected';
  }
  function isUserInputValue(tagName, attribute) {
    return (tagName === 'INPUT' || tagName === 'TEXTAREA') && attribute === 'value';
  }
  function normalizeValue(value) {
    if (value === false || value === undefined || value === null || typeof value.toString === 'undefined') {
      return null;
    }
    if (value === true) {
      return '';
    } // onclick function etc in SSR

    if (typeof value === 'function') {
      return null;
    }
    return String(value);
  }
  var DebugStyleAttributeManager;
  if (true /* DEBUG */) {
    DebugStyleAttributeManager = class extends SimpleDynamicAttribute {
      set(dom, value, env) {
        (0, _globalContext.warnIfStyleNotTrusted)(value);
        super.set(dom, value, env);
      }
      update(value, env) {
        (0, _globalContext.warnIfStyleNotTrusted)(value);
        super.update(value, env);
      }
    };
  }
  var _a;
  class First {
    constructor(node) {
      this.node = node;
    }
    firstNode() {
      return this.node;
    }
  }
  class Last {
    constructor(node) {
      this.node = node;
    }
    lastNode() {
      return this.node;
    }
  }
  var CURSOR_STACK = (0, _util.symbol)('CURSOR_STACK');
  class NewElementBuilder {
    constructor(env, parentNode, nextSibling) {
      this.constructing = null;
      this.operations = null;
      this[_a] = new _util.Stack();
      this.modifierStack = new _util.Stack();
      this.blockStack = new _util.Stack();
      this.pushElement(parentNode, nextSibling);
      this.env = env;
      this.dom = env.getAppendOperations();
      this.updateOperations = env.getDOM();
    }
    static forInitialRender(env, cursor) {
      return new this(env, cursor.element, cursor.nextSibling).initialize();
    }
    static resume(env, block) {
      var parentNode = block.parentElement();
      var nextSibling = block.reset(env);
      var stack = new this(env, parentNode, nextSibling).initialize();
      stack.pushLiveBlock(block);
      return stack;
    }
    initialize() {
      this.pushSimpleBlock();
      return this;
    }
    debugBlocks() {
      return this.blockStack.toArray();
    }
    get element() {
      return this[CURSOR_STACK].current.element;
    }
    get nextSibling() {
      return this[CURSOR_STACK].current.nextSibling;
    }
    get hasBlocks() {
      return this.blockStack.size > 0;
    }
    block() {
      return this.blockStack.current;
    }
    popElement() {
      this[CURSOR_STACK].pop();
      this[CURSOR_STACK].current;
    }
    pushSimpleBlock() {
      return this.pushLiveBlock(new SimpleLiveBlock(this.element));
    }
    pushUpdatableBlock() {
      return this.pushLiveBlock(new UpdatableBlockImpl(this.element));
    }
    pushBlockList(list) {
      return this.pushLiveBlock(new LiveBlockList(this.element, list));
    }
    pushLiveBlock(block, isRemote) {
      if (isRemote === void 0) {
        isRemote = false;
      }
      var current = this.blockStack.current;
      if (current !== null) {
        if (!isRemote) {
          current.didAppendBounds(block);
        }
      }
      this.__openBlock();
      this.blockStack.push(block);
      return block;
    }
    popBlock() {
      this.block().finalize(this);
      this.__closeBlock();
      return this.blockStack.pop();
    }
    __openBlock() {}
    __closeBlock() {} // todo return seems unused

    openElement(tag) {
      var element = this.__openElement(tag);
      this.constructing = element;
      return element;
    }
    __openElement(tag) {
      return this.dom.createElement(tag, this.element);
    }
    flushElement(modifiers) {
      var parent = this.element;
      var element = this.constructing;
      this.__flushElement(parent, element);
      this.constructing = null;
      this.operations = null;
      this.pushModifiers(modifiers);
      this.pushElement(element, null);
      this.didOpenElement(element);
    }
    __flushElement(parent, constructing) {
      this.dom.insertBefore(parent, constructing, this.nextSibling);
    }
    closeElement() {
      this.willCloseElement();
      this.popElement();
      return this.popModifiers();
    }
    pushRemoteElement(element, guid, insertBefore) {
      return this.__pushRemoteElement(element, guid, insertBefore);
    }
    __pushRemoteElement(element, _guid, insertBefore) {
      this.pushElement(element, insertBefore);
      if (insertBefore === undefined) {
        while (element.lastChild) {
          element.removeChild(element.lastChild);
        }
      }
      var block = new RemoteLiveBlock(element);
      return this.pushLiveBlock(block, true);
    }
    popRemoteElement() {
      this.popBlock();
      this.popElement();
    }
    pushElement(element, nextSibling) {
      if (nextSibling === void 0) {
        nextSibling = null;
      }
      this[CURSOR_STACK].push(new CursorImpl(element, nextSibling));
    }
    pushModifiers(modifiers) {
      this.modifierStack.push(modifiers);
    }
    popModifiers() {
      return this.modifierStack.pop();
    }
    didAppendBounds(bounds) {
      this.block().didAppendBounds(bounds);
      return bounds;
    }
    didAppendNode(node) {
      this.block().didAppendNode(node);
      return node;
    }
    didOpenElement(element) {
      this.block().openElement(element);
      return element;
    }
    willCloseElement() {
      this.block().closeElement();
    }
    appendText(string) {
      return this.didAppendNode(this.__appendText(string));
    }
    __appendText(text) {
      var {
        dom,
        element,
        nextSibling
      } = this;
      var node = dom.createTextNode(text);
      dom.insertBefore(element, node, nextSibling);
      return node;
    }
    __appendNode(node) {
      this.dom.insertBefore(this.element, node, this.nextSibling);
      return node;
    }
    __appendFragment(fragment) {
      var first = fragment.firstChild;
      if (first) {
        var ret = new ConcreteBounds(this.element, first, fragment.lastChild);
        this.dom.insertBefore(this.element, fragment, this.nextSibling);
        return ret;
      } else {
        return new SingleNodeBounds(this.element, this.__appendComment(''));
      }
    }
    __appendHTML(html) {
      return this.dom.insertHTMLBefore(this.element, this.nextSibling, html);
    }
    appendDynamicHTML(value) {
      var bounds = this.trustedContent(value);
      this.didAppendBounds(bounds);
    }
    appendDynamicText(value) {
      var node = this.untrustedContent(value);
      this.didAppendNode(node);
      return node;
    }
    appendDynamicFragment(value) {
      var bounds = this.__appendFragment(value);
      this.didAppendBounds(bounds);
    }
    appendDynamicNode(value) {
      var node = this.__appendNode(value);
      var bounds = new SingleNodeBounds(this.element, node);
      this.didAppendBounds(bounds);
    }
    trustedContent(value) {
      return this.__appendHTML(value);
    }
    untrustedContent(value) {
      return this.__appendText(value);
    }
    appendComment(string) {
      return this.didAppendNode(this.__appendComment(string));
    }
    __appendComment(string) {
      var {
        dom,
        element,
        nextSibling
      } = this;
      var node = dom.createComment(string);
      dom.insertBefore(element, node, nextSibling);
      return node;
    }
    __setAttribute(name, value, namespace) {
      this.dom.setAttribute(this.constructing, name, value, namespace);
    }
    __setProperty(name, value) {
      this.constructing[name] = value;
    }
    setStaticAttribute(name, value, namespace) {
      this.__setAttribute(name, value, namespace);
    }
    setDynamicAttribute(name, value, trusting, namespace) {
      var element = this.constructing;
      var attribute = dynamicAttribute(element, name, namespace, trusting);
      attribute.set(this, value, this.env);
      return attribute;
    }
  }
  _exports.NewElementBuilder = NewElementBuilder;
  _a = CURSOR_STACK;
  class SimpleLiveBlock {
    constructor(parent) {
      this.parent = parent;
      this.first = null;
      this.last = null;
      this.nesting = 0;
    }
    parentElement() {
      return this.parent;
    }
    firstNode() {
      var first = this.first;
      return first.firstNode();
    }
    lastNode() {
      var last = this.last;
      return last.lastNode();
    }
    openElement(element) {
      this.didAppendNode(element);
      this.nesting++;
    }
    closeElement() {
      this.nesting--;
    }
    didAppendNode(node) {
      if (this.nesting !== 0) return;
      if (!this.first) {
        this.first = new First(node);
      }
      this.last = new Last(node);
    }
    didAppendBounds(bounds) {
      if (this.nesting !== 0) return;
      if (!this.first) {
        this.first = bounds;
      }
      this.last = bounds;
    }
    finalize(stack) {
      if (this.first === null) {
        stack.appendComment('');
      }
    }
  }
  class RemoteLiveBlock extends SimpleLiveBlock {
    constructor(parent) {
      super(parent);
      (0, _destroyable2.registerDestructor)(this, () => {
        // In general, you only need to clear the root of a hierarchy, and should never
        // need to clear any child nodes. This is an important constraint that gives us
        // a strong guarantee that clearing a subtree is a single DOM operation.
        //
        // Because remote blocks are not normally physically nested inside of the tree
        // that they are logically nested inside, we manually clear remote blocks when
        // a logical parent is cleared.
        //
        // HOWEVER, it is currently possible for a remote block to be physically nested
        // inside of the block it is logically contained inside of. This happens when
        // the remote block is appended to the end of the application's entire element.
        //
        // The problem with that scenario is that Glimmer believes that it owns more of
        // the DOM than it actually does. The code is attempting to write past the end
        // of the Glimmer-managed root, but Glimmer isn't aware of that.
        //
        // The correct solution to that problem is for Glimmer to be aware of the end
        // of the bounds that it owns, and once we make that change, this check could
        // be removed.
        //
        // For now, a more targeted fix is to check whether the node was already removed
        // and avoid clearing the node if it was. In most cases this shouldn't happen,
        // so this might hide bugs where the code clears nested nodes unnecessarily,
        // so we should eventually try to do the correct fix.
        if (this.parentElement() === this.firstNode().parentNode) {
          clear(this);
        }
      });
    }
  }
  _exports.RemoteLiveBlock = RemoteLiveBlock;
  class UpdatableBlockImpl extends SimpleLiveBlock {
    reset() {
      (0, _destroyable2.destroy)(this);
      var nextSibling = clear(this);
      this.first = null;
      this.last = null;
      this.nesting = 0;
      return nextSibling;
    }
  } // FIXME: All the noops in here indicate a modelling problem
  _exports.UpdatableBlockImpl = UpdatableBlockImpl;
  class LiveBlockList {
    constructor(parent, boundList) {
      this.parent = parent;
      this.boundList = boundList;
      this.parent = parent;
      this.boundList = boundList;
    }
    parentElement() {
      return this.parent;
    }
    firstNode() {
      var head = this.boundList[0];
      return head.firstNode();
    }
    lastNode() {
      var boundList = this.boundList;
      var tail = boundList[boundList.length - 1];
      return tail.lastNode();
    }
    openElement(_element) {}
    closeElement() {}
    didAppendNode(_node) {}
    didAppendBounds(_bounds) {}
    finalize(_stack) {}
  }
  function clientBuilder(env, cursor) {
    return NewElementBuilder.forInitialRender(env, cursor);
  }
  class AppendOpcodes {
    constructor() {
      this.evaluateOpcode = (0, _util.fillNulls)(104
      /* Size */).slice();
    }
    add(name, evaluate, kind) {
      if (kind === void 0) {
        kind = 'syscall';
      }
      this.evaluateOpcode[name] = {
        syscall: kind !== 'machine',
        evaluate
      };
    }
    debugBefore(vm, opcode) {
      var params = undefined;
      var opName = undefined;
      var sp;
      return {
        sp: sp,
        pc: vm.fetchValue(_vm2.$pc),
        name: opName,
        params,
        type: opcode.type,
        isMachine: opcode.isMachine,
        size: opcode.size,
        state: undefined
      };
    }
    debugAfter(vm, pre) {}
    evaluate(vm, opcode, type) {
      var operation = this.evaluateOpcode[type];
      if (operation.syscall) {
        operation.evaluate(vm, opcode);
      } else {
        operation.evaluate(vm[INNER_VM], opcode);
      }
    }
  }
  var APPEND_OPCODES = new AppendOpcodes();
  function createConcatRef(partsRefs) {
    return (0, _reference.createComputeRef)(() => {
      var parts = new Array();
      for (var i = 0; i < partsRefs.length; i++) {
        var value = (0, _reference.valueForRef)(partsRefs[i]);
        if (value !== null && value !== undefined) {
          parts[i] = castToString(value);
        }
      }
      if (parts.length > 0) {
        return parts.join('');
      }
      return null;
    });
  }
  function castToString(value) {
    if (typeof value.toString !== 'function') {
      return '';
    }
    return String(value);
  }
  var TYPE = (0, _util.symbol)('TYPE');
  var INNER = (0, _util.symbol)('INNER');
  var OWNER = (0, _util.symbol)('OWNER');
  var ARGS$1 = (0, _util.symbol)('ARGS');
  var RESOLVED = (0, _util.symbol)('RESOLVED');
  var CURRIED_VALUES = new _util._WeakSet();
  function isCurriedValue(value) {
    return CURRIED_VALUES.has(value);
  }
  function isCurriedType(value, type) {
    return isCurriedValue(value) && value[TYPE] === type;
  }
  class CurriedValue {
    /** @internal */
    constructor(type, inner, owner, args, resolved) {
      if (resolved === void 0) {
        resolved = false;
      }
      CURRIED_VALUES.add(this);
      this[TYPE] = type;
      this[INNER] = inner;
      this[OWNER] = owner;
      this[ARGS$1] = args;
      this[RESOLVED] = resolved;
    }
  }
  _exports.CurriedValue = CurriedValue;
  function resolveCurriedValue(curriedValue) {
    var currentWrapper = curriedValue;
    var positional;
    var named;
    var definition, owner, resolved;
    while (true) {
      var {
        [ARGS$1]: curriedArgs,
        [INNER]: inner
      } = currentWrapper;
      if (curriedArgs !== null) {
        var {
          named: curriedNamed,
          positional: curriedPositional
        } = curriedArgs;
        if (curriedPositional.length > 0) {
          positional = positional === undefined ? curriedPositional : curriedPositional.concat(positional);
        }
        if (named === undefined) {
          named = [];
        }
        named.unshift(curriedNamed);
      }
      if (!isCurriedValue(inner)) {
        // Save off the owner that this helper was curried with. Later on,
        // we'll fetch the value of this register and set it as the owner on the
        // new root scope.
        definition = inner;
        owner = currentWrapper[OWNER];
        resolved = currentWrapper[RESOLVED];
        break;
      }
      currentWrapper = inner;
    }
    return {
      definition,
      owner,
      resolved,
      positional,
      named
    };
  }
  function curry(type, spec, owner, args, resolved) {
    if (resolved === void 0) {
      resolved = false;
    }
    return new CurriedValue(type, spec, owner, args, resolved);
  }
  function createCurryRef(type, inner, owner, args, resolver, isStrict) {
    var lastValue, curriedDefinition;
    return (0, _reference.createComputeRef)(() => {
      var value = (0, _reference.valueForRef)(inner);
      if (value === lastValue) {
        return curriedDefinition;
      }
      if (isCurriedType(value, type)) {
        curriedDefinition = args ? curry(type, value, owner, args) : args;
      } else if (type === 0
      /* Component */ && typeof value === 'string' && value) {
        // Only components should enter this path, as helpers and modifiers do not
        // support string based resolution
        if (true /* DEBUG */) {
          if (isStrict) {
            throw new Error(`Attempted to resolve a dynamic component with a string definition, \`${value}\` in a strict mode template. In strict mode, using strings to resolve component definitions is prohibited. You can instead import the component definition and use it directly.`);
          }
          var resolvedDefinition = resolver.lookupComponent(value, owner);
          if (!resolvedDefinition) {
            throw new Error(`Attempted to resolve \`${value}\`, which was expected to be a component, but nothing was found.`);
          }
        }
        curriedDefinition = curry(type, value, owner, args);
      } else if ((0, _util.isObject)(value)) {
        curriedDefinition = curry(type, value, owner, args);
      } else {
        curriedDefinition = null;
      }
      lastValue = value;
      return curriedDefinition;
    });
  }

  /*
    The calling convention is:
  
    * 0-N block arguments at the bottom
    * 0-N positional arguments next (left-to-right)
    * 0-N named arguments next
  */

  class VMArgumentsImpl {
    constructor() {
      this.stack = null;
      this.positional = new PositionalArgumentsImpl();
      this.named = new NamedArgumentsImpl();
      this.blocks = new BlockArgumentsImpl();
    }
    empty(stack) {
      var base = stack[REGISTERS][_vm2.$sp] + 1;
      this.named.empty(stack, base);
      this.positional.empty(stack, base);
      this.blocks.empty(stack, base);
      return this;
    }
    setup(stack, names, blockNames, positionalCount, atNames) {
      this.stack = stack;
      /*
             | ... | blocks      | positional  | named |
             | ... | b0    b1    | p0 p1 p2 p3 | n0 n1 |
       index | ... | 4/5/6 7/8/9 | 10 11 12 13 | 14 15 |
                     ^             ^             ^  ^
                   bbase         pbase       nbase  sp
      */

      var named = this.named;
      var namedCount = names.length;
      var namedBase = stack[REGISTERS][_vm2.$sp] - namedCount + 1;
      named.setup(stack, namedBase, namedCount, names, atNames);
      var positional = this.positional;
      var positionalBase = namedBase - positionalCount;
      positional.setup(stack, positionalBase, positionalCount);
      var blocks = this.blocks;
      var blocksCount = blockNames.length;
      var blocksBase = positionalBase - blocksCount * 3;
      blocks.setup(stack, blocksBase, blocksCount, blockNames);
    }
    get base() {
      return this.blocks.base;
    }
    get length() {
      return this.positional.length + this.named.length + this.blocks.length * 3;
    }
    at(pos) {
      return this.positional.at(pos);
    }
    realloc(offset) {
      var {
        stack
      } = this;
      if (offset > 0 && stack !== null) {
        var {
          positional,
          named
        } = this;
        var newBase = positional.base + offset;
        var length = positional.length + named.length;
        for (var i = length - 1; i >= 0; i--) {
          stack.copy(i + positional.base, i + newBase);
        }
        positional.base += offset;
        named.base += offset;
        stack[REGISTERS][_vm2.$sp] += offset;
      }
    }
    capture() {
      var positional = this.positional.length === 0 ? EMPTY_POSITIONAL : this.positional.capture();
      var named = this.named.length === 0 ? EMPTY_NAMED : this.named.capture();
      return {
        named,
        positional
      };
    }
    clear() {
      var {
        stack,
        length
      } = this;
      if (length > 0 && stack !== null) stack.pop(length);
    }
  }
  var EMPTY_REFERENCES = (0, _util.emptyArray)();
  class PositionalArgumentsImpl {
    constructor() {
      this.base = 0;
      this.length = 0;
      this.stack = null;
      this._references = null;
    }
    empty(stack, base) {
      this.stack = stack;
      this.base = base;
      this.length = 0;
      this._references = EMPTY_REFERENCES;
    }
    setup(stack, base, length) {
      this.stack = stack;
      this.base = base;
      this.length = length;
      if (length === 0) {
        this._references = EMPTY_REFERENCES;
      } else {
        this._references = null;
      }
    }
    at(position) {
      var {
        base,
        length,
        stack
      } = this;
      if (position < 0 || position >= length) {
        return _reference.UNDEFINED_REFERENCE;
      }
      return stack.get(position, base);
    }
    capture() {
      return this.references;
    }
    prepend(other) {
      var additions = other.length;
      if (additions > 0) {
        var {
          base,
          length,
          stack
        } = this;
        this.base = base = base - additions;
        this.length = length + additions;
        for (var i = 0; i < additions; i++) {
          stack.set(other[i], i, base);
        }
        this._references = null;
      }
    }
    get references() {
      var references = this._references;
      if (!references) {
        var {
          stack,
          base,
          length
        } = this;
        references = this._references = stack.slice(base, base + length);
      }
      return references;
    }
  }
  class NamedArgumentsImpl {
    constructor() {
      this.base = 0;
      this.length = 0;
      this._references = null;
      this._names = _util.EMPTY_STRING_ARRAY;
      this._atNames = _util.EMPTY_STRING_ARRAY;
    }
    empty(stack, base) {
      this.stack = stack;
      this.base = base;
      this.length = 0;
      this._references = EMPTY_REFERENCES;
      this._names = _util.EMPTY_STRING_ARRAY;
      this._atNames = _util.EMPTY_STRING_ARRAY;
    }
    setup(stack, base, length, names, atNames) {
      this.stack = stack;
      this.base = base;
      this.length = length;
      if (length === 0) {
        this._references = EMPTY_REFERENCES;
        this._names = _util.EMPTY_STRING_ARRAY;
        this._atNames = _util.EMPTY_STRING_ARRAY;
      } else {
        this._references = null;
        if (atNames) {
          this._names = null;
          this._atNames = names;
        } else {
          this._names = names;
          this._atNames = null;
        }
      }
    }
    get names() {
      var names = this._names;
      if (!names) {
        names = this._names = this._atNames.map(this.toSyntheticName);
      }
      return names;
    }
    get atNames() {
      var atNames = this._atNames;
      if (!atNames) {
        atNames = this._atNames = this._names.map(this.toAtName);
      }
      return atNames;
    }
    has(name) {
      return this.names.indexOf(name) !== -1;
    }
    get(name, atNames) {
      if (atNames === void 0) {
        atNames = false;
      }
      var {
        base,
        stack
      } = this;
      var names = atNames ? this.atNames : this.names;
      var idx = names.indexOf(name);
      if (idx === -1) {
        return _reference.UNDEFINED_REFERENCE;
      }
      var ref = stack.get(idx, base);
      if (true /* DEBUG */) {
        return (0, _reference.createDebugAliasRef)(atNames ? name : `@${name}`, ref);
      } else {
        return ref;
      }
    }
    capture() {
      var {
        names,
        references
      } = this;
      var map = (0, _util.dict)();
      for (var i = 0; i < names.length; i++) {
        var name = names[i];
        if (true /* DEBUG */) {
          map[name] = (0, _reference.createDebugAliasRef)(`@${name}`, references[i]);
        } else {
          map[name] = references[i];
        }
      }
      return map;
    }
    merge(other) {
      var keys = Object.keys(other);
      if (keys.length > 0) {
        var {
          names,
          length,
          stack
        } = this;
        var newNames = names.slice();
        for (var i = 0; i < keys.length; i++) {
          var name = keys[i];
          var idx = newNames.indexOf(name);
          if (idx === -1) {
            length = newNames.push(name);
            stack.push(other[name]);
          }
        }
        this.length = length;
        this._references = null;
        this._names = newNames;
        this._atNames = null;
      }
    }
    get references() {
      var references = this._references;
      if (!references) {
        var {
          base,
          length,
          stack
        } = this;
        references = this._references = stack.slice(base, base + length);
      }
      return references;
    }
    toSyntheticName(name) {
      return name.slice(1);
    }
    toAtName(name) {
      return `@${name}`;
    }
  }
  function toSymbolName(name) {
    return `&${name}`;
  }
  var EMPTY_BLOCK_VALUES = (0, _util.emptyArray)();
  class BlockArgumentsImpl {
    constructor() {
      this.internalValues = null;
      this._symbolNames = null;
      this.internalTag = null;
      this.names = _util.EMPTY_STRING_ARRAY;
      this.length = 0;
      this.base = 0;
    }
    empty(stack, base) {
      this.stack = stack;
      this.names = _util.EMPTY_STRING_ARRAY;
      this.base = base;
      this.length = 0;
      this._symbolNames = null;
      this.internalTag = _validator.CONSTANT_TAG;
      this.internalValues = EMPTY_BLOCK_VALUES;
    }
    setup(stack, base, length, names) {
      this.stack = stack;
      this.names = names;
      this.base = base;
      this.length = length;
      this._symbolNames = null;
      if (length === 0) {
        this.internalTag = _validator.CONSTANT_TAG;
        this.internalValues = EMPTY_BLOCK_VALUES;
      } else {
        this.internalTag = null;
        this.internalValues = null;
      }
    }
    get values() {
      var values = this.internalValues;
      if (!values) {
        var {
          base,
          length,
          stack
        } = this;
        values = this.internalValues = stack.slice(base, base + length * 3);
      }
      return values;
    }
    has(name) {
      return this.names.indexOf(name) !== -1;
    }
    get(name) {
      var idx = this.names.indexOf(name);
      if (idx === -1) {
        return null;
      }
      var {
        base,
        stack
      } = this;
      var table = stack.get(idx * 3, base);
      var scope = stack.get(idx * 3 + 1, base);
      var handle = stack.get(idx * 3 + 2, base);
      return handle === null ? null : [handle, scope, table];
    }
    capture() {
      return new CapturedBlockArgumentsImpl(this.names, this.values);
    }
    get symbolNames() {
      var symbolNames = this._symbolNames;
      if (symbolNames === null) {
        symbolNames = this._symbolNames = this.names.map(toSymbolName);
      }
      return symbolNames;
    }
  }
  class CapturedBlockArgumentsImpl {
    constructor(names, values) {
      this.names = names;
      this.values = values;
      this.length = names.length;
    }
    has(name) {
      return this.names.indexOf(name) !== -1;
    }
    get(name) {
      var idx = this.names.indexOf(name);
      if (idx === -1) return null;
      return [this.values[idx * 3 + 2], this.values[idx * 3 + 1], this.values[idx * 3]];
    }
  }
  function createCapturedArgs(named, positional) {
    return {
      named,
      positional
    };
  }
  function reifyNamed$1(named) {
    var reified = (0, _util.dict)();
    for (var key in named) {
      reified[key] = (0, _reference.valueForRef)(named[key]);
    }
    return reified;
  }
  function reifyPositional$1(positional) {
    return positional.map(_reference.valueForRef);
  }
  function reifyArgs(args) {
    return {
      named: reifyNamed$1(args.named),
      positional: reifyPositional$1(args.positional)
    };
  }
  var EMPTY_NAMED = Object.freeze(Object.create(null));
  _exports.EMPTY_NAMED = EMPTY_NAMED;
  var EMPTY_POSITIONAL = EMPTY_REFERENCES;
  _exports.EMPTY_POSITIONAL = EMPTY_POSITIONAL;
  var EMPTY_ARGS = createCapturedArgs(EMPTY_NAMED, EMPTY_POSITIONAL);
  _exports.EMPTY_ARGS = EMPTY_ARGS;
  APPEND_OPCODES.add(77
  /* Curry */, (vm, _ref2) => {
    var {
      op1: type,
      op2: _isStrict
    } = _ref2;
    var stack = vm.stack;
    var definition = stack.pop();
    var capturedArgs = stack.pop();
    var owner = vm.getOwner();
    var resolver = vm.runtime.resolver;
    var isStrict = false;
    if (true /* DEBUG */) {
      // strict check only happens in DEBUG builds, no reason to load it otherwise
      isStrict = vm[CONSTANTS].getValue((0, _util.decodeHandle)(_isStrict));
    }
    vm.loadValue(_vm2.$v0, createCurryRef(type, definition, owner, capturedArgs, resolver, isStrict));
  });
  APPEND_OPCODES.add(107
  /* DynamicHelper */, vm => {
    var stack = vm.stack;
    var ref = stack.pop();
    var args = stack.pop().capture();
    var helperRef;
    var initialOwner = vm.getOwner();
    var helperInstanceRef = (0, _reference.createComputeRef)(() => {
      if (helperRef !== undefined) {
        (0, _destroyable2.destroy)(helperRef);
      }
      var definition = (0, _reference.valueForRef)(ref);
      if (isCurriedType(definition, 1
      /* Helper */)) {
        var {
          definition: resolvedDef,
          owner,
          positional,
          named
        } = resolveCurriedValue(definition);
        var _helper = resolveHelper(vm[CONSTANTS], resolvedDef, ref);
        if (named !== undefined) {
          args.named = (0, _util.assign)({}, ...named, args.named);
        }
        if (positional !== undefined) {
          args.positional = positional.concat(args.positional);
        }
        helperRef = _helper(args, owner);
        (0, _destroyable2.associateDestroyableChild)(helperInstanceRef, helperRef);
      } else if ((0, _util.isObject)(definition)) {
        var _helper2 = resolveHelper(vm[CONSTANTS], definition, ref);
        helperRef = _helper2(args, initialOwner);
        if ((0, _destroyable2._hasDestroyableChildren)(helperRef)) {
          (0, _destroyable2.associateDestroyableChild)(helperInstanceRef, helperRef);
        }
      } else {
        helperRef = _reference.UNDEFINED_REFERENCE;
      }
    });
    var helperValueRef = (0, _reference.createComputeRef)(() => {
      (0, _reference.valueForRef)(helperInstanceRef);
      return (0, _reference.valueForRef)(helperRef);
    });
    vm.associateDestroyable(helperInstanceRef);
    vm.loadValue(_vm2.$v0, helperValueRef);
  });
  function resolveHelper(constants, definition, ref) {
    var handle = constants.helper(definition, null, true);
    if (true /* DEBUG */ && handle === null) {
      throw new Error(`Expected a dynamic helper definition, but received an object or function that did not have a helper manager associated with it. The dynamic invocation was \`{{${ref.debugLabel}}}\` or \`(${ref.debugLabel})\`, and the incorrect definition is the value at the path \`${ref.debugLabel}\`, which was: ${(0, _util.debugToString)(definition)}`);
    }
    return constants.getValue(handle);
  }
  APPEND_OPCODES.add(16
  /* Helper */, (vm, _ref3) => {
    var {
      op1: handle
    } = _ref3;
    var stack = vm.stack;
    var helper = vm[CONSTANTS].getValue(handle);
    var args = stack.pop();
    var value = helper(args.capture(), vm.getOwner(), vm.dynamicScope());
    if ((0, _destroyable2._hasDestroyableChildren)(value)) {
      vm.associateDestroyable(value);
    }
    vm.loadValue(_vm2.$v0, value);
  });
  APPEND_OPCODES.add(21
  /* GetVariable */, (vm, _ref4) => {
    var {
      op1: symbol$$1
    } = _ref4;
    var expr = vm.referenceForSymbol(symbol$$1);
    vm.stack.push(expr);
  });
  APPEND_OPCODES.add(19
  /* SetVariable */, (vm, _ref5) => {
    var {
      op1: symbol$$1
    } = _ref5;
    var expr = vm.stack.pop();
    vm.scope().bindSymbol(symbol$$1, expr);
  });
  APPEND_OPCODES.add(20
  /* SetBlock */, (vm, _ref6) => {
    var {
      op1: symbol$$1
    } = _ref6;
    var handle = vm.stack.pop();
    var scope = vm.stack.pop();
    var table = vm.stack.pop();
    vm.scope().bindBlock(symbol$$1, [handle, scope, table]);
  });
  APPEND_OPCODES.add(102
  /* ResolveMaybeLocal */, (vm, _ref7) => {
    var {
      op1: _name
    } = _ref7;
    var name = vm[CONSTANTS].getValue(_name);
    var locals = vm.scope().getPartialMap();
    var ref = locals[name];
    if (ref === undefined) {
      ref = (0, _reference.childRefFor)(vm.getSelf(), name);
    }
    vm.stack.push(ref);
  });
  APPEND_OPCODES.add(37
  /* RootScope */, (vm, _ref8) => {
    var {
      op1: symbols
    } = _ref8;
    vm.pushRootScope(symbols, vm.getOwner());
  });
  APPEND_OPCODES.add(22
  /* GetProperty */, (vm, _ref9) => {
    var {
      op1: _key
    } = _ref9;
    var key = vm[CONSTANTS].getValue(_key);
    var expr = vm.stack.pop();
    vm.stack.push((0, _reference.childRefFor)(expr, key));
  });
  APPEND_OPCODES.add(23
  /* GetBlock */, (vm, _ref10) => {
    var {
      op1: _block
    } = _ref10;
    var {
      stack
    } = vm;
    var block = vm.scope().getBlock(_block);
    stack.push(block);
  });
  APPEND_OPCODES.add(24
  /* SpreadBlock */, vm => {
    var {
      stack
    } = vm;
    var block = stack.pop();
    if (block && !isUndefinedReference(block)) {
      var [handleOrCompilable, scope, table] = block;
      stack.push(table);
      stack.push(scope);
      stack.push(handleOrCompilable);
    } else {
      stack.push(null);
      stack.push(null);
      stack.push(null);
    }
  });
  function isUndefinedReference(input) {
    return input === _reference.UNDEFINED_REFERENCE;
  }
  APPEND_OPCODES.add(25
  /* HasBlock */, vm => {
    var {
      stack
    } = vm;
    var block = stack.pop();
    if (block && !isUndefinedReference(block)) {
      stack.push(_reference.TRUE_REFERENCE);
    } else {
      stack.push(_reference.FALSE_REFERENCE);
    }
  });
  APPEND_OPCODES.add(26
  /* HasBlockParams */, vm => {
    // FIXME(mmun): should only need to push the symbol table
    var block = vm.stack.pop();
    var scope = vm.stack.pop();
    var table = vm.stack.pop();
    var hasBlockParams = table && table.parameters.length;
    vm.stack.push(hasBlockParams ? _reference.TRUE_REFERENCE : _reference.FALSE_REFERENCE);
  });
  APPEND_OPCODES.add(27
  /* Concat */, (vm, _ref11) => {
    var {
      op1: count
    } = _ref11;
    var out = new Array(count);
    for (var i = count; i > 0; i--) {
      var offset = i - 1;
      out[offset] = vm.stack.pop();
    }
    vm.stack.push(createConcatRef(out));
  });
  APPEND_OPCODES.add(109
  /* IfInline */, vm => {
    var condition = vm.stack.pop();
    var truthy = vm.stack.pop();
    var falsy = vm.stack.pop();
    vm.stack.push((0, _reference.createComputeRef)(() => {
      if ((0, _globalContext.toBool)((0, _reference.valueForRef)(condition)) === true) {
        return (0, _reference.valueForRef)(truthy);
      } else {
        return (0, _reference.valueForRef)(falsy);
      }
    }));
  });
  APPEND_OPCODES.add(110
  /* Not */, vm => {
    var ref = vm.stack.pop();
    vm.stack.push((0, _reference.createComputeRef)(() => {
      return !(0, _globalContext.toBool)((0, _reference.valueForRef)(ref));
    }));
  });
  APPEND_OPCODES.add(111
  /* GetDynamicVar */, vm => {
    var scope = vm.dynamicScope();
    var stack = vm.stack;
    var nameRef = stack.pop();
    stack.push((0, _reference.createComputeRef)(() => {
      var name = String((0, _reference.valueForRef)(nameRef));
      return (0, _reference.valueForRef)(scope.get(name));
    }));
  });
  APPEND_OPCODES.add(112
  /* Log */, vm => {
    var {
      positional
    } = vm.stack.pop().capture();
    vm.loadValue(_vm2.$v0, (0, _reference.createComputeRef)(() => {
      // eslint-disable-next-line no-console
      console.log(...reifyPositional$1(positional));
    }));
  });
  function resolveComponent(resolver, constants, name, owner) {
    var definition = resolver.lookupComponent(name, owner);
    if (true /* DEBUG */ && !definition) {
      throw new Error(`Attempted to resolve \`${name}\`, which was expected to be a component, but nothing was found.`);
    }
    return constants.resolvedComponent(definition, name);
  }

  /** @internal */
  function hasCustomDebugRenderTreeLifecycle(manager) {
    return 'getDebugCustomRenderTree' in manager;
  }
  function createClassListRef(list) {
    return (0, _reference.createComputeRef)(() => {
      var ret = [];
      for (var i = 0; i < list.length; i++) {
        var ref = list[i];
        var value = normalizeStringValue(typeof ref === 'string' ? ref : (0, _reference.valueForRef)(list[i]));
        if (value) ret.push(value);
      }
      return ret.length === 0 ? null : ret.join(' ');
    });
  }
  APPEND_OPCODES.add(39
  /* ChildScope */, vm => vm.pushChildScope());
  APPEND_OPCODES.add(40
  /* PopScope */, vm => vm.popScope());
  APPEND_OPCODES.add(59
  /* PushDynamicScope */, vm => vm.pushDynamicScope());
  APPEND_OPCODES.add(60
  /* PopDynamicScope */, vm => vm.popDynamicScope());
  APPEND_OPCODES.add(28
  /* Constant */, (vm, _ref12) => {
    var {
      op1: other
    } = _ref12;
    vm.stack.push(vm[CONSTANTS].getValue((0, _util.decodeHandle)(other)));
  });
  APPEND_OPCODES.add(29
  /* ConstantReference */, (vm, _ref13) => {
    var {
      op1: other
    } = _ref13;
    vm.stack.push((0, _reference.createConstRef)(vm[CONSTANTS].getValue((0, _util.decodeHandle)(other)), false));
  });
  APPEND_OPCODES.add(30
  /* Primitive */, (vm, _ref14) => {
    var {
      op1: primitive
    } = _ref14;
    var stack = vm.stack;
    if ((0, _util.isHandle)(primitive)) {
      // it is a handle which does not already exist on the stack
      var value = vm[CONSTANTS].getValue((0, _util.decodeHandle)(primitive));
      stack.push(value);
    } else {
      // is already an encoded immediate or primitive handle
      stack.push((0, _util.decodeImmediate)(primitive));
    }
  });
  APPEND_OPCODES.add(31
  /* PrimitiveReference */, vm => {
    var stack = vm.stack;
    var value = stack.pop();
    var ref;
    if (value === undefined) {
      ref = _reference.UNDEFINED_REFERENCE;
    } else if (value === null) {
      ref = _reference.NULL_REFERENCE;
    } else if (value === true) {
      ref = _reference.TRUE_REFERENCE;
    } else if (value === false) {
      ref = _reference.FALSE_REFERENCE;
    } else {
      ref = (0, _reference.createPrimitiveRef)(value);
    }
    stack.push(ref);
  });
  APPEND_OPCODES.add(33
  /* Dup */, (vm, _ref15) => {
    var {
      op1: register,
      op2: offset
    } = _ref15;
    var position = vm.fetchValue(register) - offset;
    vm.stack.dup(position);
  });
  APPEND_OPCODES.add(34
  /* Pop */, (vm, _ref16) => {
    var {
      op1: count
    } = _ref16;
    vm.stack.pop(count);
  });
  APPEND_OPCODES.add(35
  /* Load */, (vm, _ref17) => {
    var {
      op1: register
    } = _ref17;
    vm.load(register);
  });
  APPEND_OPCODES.add(36
  /* Fetch */, (vm, _ref18) => {
    var {
      op1: register
    } = _ref18;
    vm.fetch(register);
  });
  APPEND_OPCODES.add(58
  /* BindDynamicScope */, (vm, _ref19) => {
    var {
      op1: _names
    } = _ref19;
    var names = vm[CONSTANTS].getArray(_names);
    vm.bindDynamicScope(names);
  });
  APPEND_OPCODES.add(69
  /* Enter */, (vm, _ref20) => {
    var {
      op1: args
    } = _ref20;
    vm.enter(args);
  });
  APPEND_OPCODES.add(70
  /* Exit */, vm => {
    vm.exit();
  });
  APPEND_OPCODES.add(63
  /* PushSymbolTable */, (vm, _ref21) => {
    var {
      op1: _table
    } = _ref21;
    var stack = vm.stack;
    stack.push(vm[CONSTANTS].getValue(_table));
  });
  APPEND_OPCODES.add(62
  /* PushBlockScope */, vm => {
    var stack = vm.stack;
    stack.push(vm.scope());
  });
  APPEND_OPCODES.add(61
  /* CompileBlock */, vm => {
    var stack = vm.stack;
    var block = stack.pop();
    if (block) {
      stack.push(vm.compile(block));
    } else {
      stack.push(null);
    }
  });
  APPEND_OPCODES.add(64
  /* InvokeYield */, vm => {
    var {
      stack
    } = vm;
    var handle = stack.pop();
    var scope = stack.pop();
    var table = stack.pop();
    var args = stack.pop();
    if (table === null) {
      // To balance the pop{Frame,Scope}
      vm.pushFrame();
      vm.pushScope(scope !== null && scope !== void 0 ? scope : vm.scope());
      return;
    }
    var invokingScope = scope; // If necessary, create a child scope

    {
      var locals = table.parameters;
      var localsCount = locals.length;
      if (localsCount > 0) {
        invokingScope = invokingScope.child();
        for (var i = 0; i < localsCount; i++) {
          invokingScope.bindSymbol(locals[i], args.at(i));
        }
      }
    }
    vm.pushFrame();
    vm.pushScope(invokingScope);
    vm.call(handle);
  });
  APPEND_OPCODES.add(65
  /* JumpIf */, (vm, _ref22) => {
    var {
      op1: target
    } = _ref22;
    var reference = vm.stack.pop();
    var value = Boolean((0, _reference.valueForRef)(reference));
    if ((0, _reference.isConstRef)(reference)) {
      if (value === true) {
        vm.goto(target);
      }
    } else {
      if (value === true) {
        vm.goto(target);
      }
      vm.updateWith(new Assert(reference));
    }
  });
  APPEND_OPCODES.add(66
  /* JumpUnless */, (vm, _ref23) => {
    var {
      op1: target
    } = _ref23;
    var reference = vm.stack.pop();
    var value = Boolean((0, _reference.valueForRef)(reference));
    if ((0, _reference.isConstRef)(reference)) {
      if (value === false) {
        vm.goto(target);
      }
    } else {
      if (value === false) {
        vm.goto(target);
      }
      vm.updateWith(new Assert(reference));
    }
  });
  APPEND_OPCODES.add(67
  /* JumpEq */, (vm, _ref24) => {
    var {
      op1: target,
      op2: comparison
    } = _ref24;
    var other = vm.stack.peek();
    if (other === comparison) {
      vm.goto(target);
    }
  });
  APPEND_OPCODES.add(68
  /* AssertSame */, vm => {
    var reference = vm.stack.peek();
    if ((0, _reference.isConstRef)(reference) === false) {
      vm.updateWith(new Assert(reference));
    }
  });
  APPEND_OPCODES.add(71
  /* ToBoolean */, vm => {
    var {
      stack
    } = vm;
    var valueRef = stack.pop();
    stack.push((0, _reference.createComputeRef)(() => (0, _globalContext.toBool)((0, _reference.valueForRef)(valueRef))));
  });
  class Assert {
    constructor(ref) {
      this.ref = ref;
      this.last = (0, _reference.valueForRef)(ref);
    }
    evaluate(vm) {
      var {
        last,
        ref
      } = this;
      var current = (0, _reference.valueForRef)(ref);
      if (last !== current) {
        vm.throw();
      }
    }
  }
  class AssertFilter {
    constructor(ref, filter) {
      this.ref = ref;
      this.filter = filter;
      this.last = filter((0, _reference.valueForRef)(ref));
    }
    evaluate(vm) {
      var {
        last,
        ref,
        filter
      } = this;
      var current = filter((0, _reference.valueForRef)(ref));
      if (last !== current) {
        vm.throw();
      }
    }
  }
  class JumpIfNotModifiedOpcode {
    constructor() {
      this.tag = _validator.CONSTANT_TAG;
      this.lastRevision = _validator.INITIAL;
    }
    finalize(tag, target) {
      this.target = target;
      this.didModify(tag);
    }
    evaluate(vm) {
      var {
        tag,
        target,
        lastRevision
      } = this;
      if (!vm.alwaysRevalidate && (0, _validator.validateTag)(tag, lastRevision)) {
        (0, _validator.consumeTag)(tag);
        vm.goto(target);
      }
    }
    didModify(tag) {
      this.tag = tag;
      this.lastRevision = (0, _validator.valueForTag)(this.tag);
      (0, _validator.consumeTag)(tag);
    }
  }
  class BeginTrackFrameOpcode {
    constructor(debugLabel) {
      this.debugLabel = debugLabel;
    }
    evaluate() {
      (0, _validator.beginTrackFrame)(this.debugLabel);
    }
  }
  class EndTrackFrameOpcode {
    constructor(target) {
      this.target = target;
    }
    evaluate() {
      var tag = (0, _validator.endTrackFrame)();
      this.target.didModify(tag);
    }
  }
  APPEND_OPCODES.add(41
  /* Text */, (vm, _ref25) => {
    var {
      op1: text
    } = _ref25;
    vm.elements().appendText(vm[CONSTANTS].getValue(text));
  });
  APPEND_OPCODES.add(42
  /* Comment */, (vm, _ref26) => {
    var {
      op1: text
    } = _ref26;
    vm.elements().appendComment(vm[CONSTANTS].getValue(text));
  });
  APPEND_OPCODES.add(48
  /* OpenElement */, (vm, _ref27) => {
    var {
      op1: tag
    } = _ref27;
    vm.elements().openElement(vm[CONSTANTS].getValue(tag));
  });
  APPEND_OPCODES.add(49
  /* OpenDynamicElement */, vm => {
    var tagName = (0, _reference.valueForRef)(vm.stack.pop());
    vm.elements().openElement(tagName);
  });
  APPEND_OPCODES.add(50
  /* PushRemoteElement */, vm => {
    var elementRef = vm.stack.pop();
    var insertBeforeRef = vm.stack.pop();
    var guidRef = vm.stack.pop();
    var element = (0, _reference.valueForRef)(elementRef);
    var insertBefore = (0, _reference.valueForRef)(insertBeforeRef);
    var guid = (0, _reference.valueForRef)(guidRef);
    if (!(0, _reference.isConstRef)(elementRef)) {
      vm.updateWith(new Assert(elementRef));
    }
    if (insertBefore !== undefined && !(0, _reference.isConstRef)(insertBeforeRef)) {
      vm.updateWith(new Assert(insertBeforeRef));
    }
    var block = vm.elements().pushRemoteElement(element, guid, insertBefore);
    if (block) vm.associateDestroyable(block);
  });
  APPEND_OPCODES.add(56
  /* PopRemoteElement */, vm => {
    vm.elements().popRemoteElement();
  });
  APPEND_OPCODES.add(54
  /* FlushElement */, vm => {
    var operations = vm.fetchValue(_vm2.$t0);
    var modifiers = null;
    if (operations) {
      modifiers = operations.flush(vm);
      vm.loadValue(_vm2.$t0, null);
    }
    vm.elements().flushElement(modifiers);
  });
  APPEND_OPCODES.add(55
  /* CloseElement */, vm => {
    var modifiers = vm.elements().closeElement();
    if (modifiers) {
      modifiers.forEach(modifier => {
        vm.env.scheduleInstallModifier(modifier);
        var {
          manager,
          state
        } = modifier;
        var d = manager.getDestroyable(state);
        if (d) {
          vm.associateDestroyable(d);
        }
      });
    }
  });
  APPEND_OPCODES.add(57
  /* Modifier */, (vm, _ref28) => {
    var {
      op1: handle
    } = _ref28;
    if (vm.env.isInteractive === false) {
      return;
    }
    var owner = vm.getOwner();
    var args = vm.stack.pop();
    var definition = vm[CONSTANTS].getValue(handle);
    var {
      manager
    } = definition;
    var {
      constructing
    } = vm.elements();
    var state = manager.create(owner, constructing, definition.state, args.capture());
    var instance = {
      manager,
      state,
      definition
    };
    var operations = vm.fetchValue(_vm2.$t0);
    operations.addModifier(instance);
    var tag = manager.getTag(state);
    if (tag !== null) {
      (0, _validator.consumeTag)(tag);
      return vm.updateWith(new UpdateModifierOpcode(tag, instance));
    }
  });
  APPEND_OPCODES.add(108
  /* DynamicModifier */, vm => {
    if (vm.env.isInteractive === false) {
      return;
    }
    var {
      stack,
      [CONSTANTS]: constants
    } = vm;
    var ref = stack.pop();
    var args = stack.pop().capture();
    var {
      constructing
    } = vm.elements();
    var initialOwner = vm.getOwner();
    var instanceRef = (0, _reference.createComputeRef)(() => {
      var value = (0, _reference.valueForRef)(ref);
      var owner;
      if (!(0, _util.isObject)(value)) {
        return;
      }
      var hostDefinition;
      if (isCurriedType(value, 2
      /* Modifier */)) {
        var {
          definition: resolvedDefinition,
          owner: curriedOwner,
          positional,
          named
        } = resolveCurriedValue(value);
        hostDefinition = resolvedDefinition;
        owner = curriedOwner;
        if (positional !== undefined) {
          args.positional = positional.concat(args.positional);
        }
        if (named !== undefined) {
          args.named = (0, _util.assign)({}, ...named, args.named);
        }
      } else {
        hostDefinition = value;
        owner = initialOwner;
      }
      var handle = constants.modifier(hostDefinition, null, true);
      if (true /* DEBUG */ && handle === null) {
        throw new Error(`Expected a dynamic modifier definition, but received an object or function that did not have a modifier manager associated with it. The dynamic invocation was \`{{${ref.debugLabel}}}\`, and the incorrect definition is the value at the path \`${ref.debugLabel}\`, which was: ${(0, _util.debugToString)(hostDefinition)}`);
      }
      var definition = constants.getValue(handle);
      var {
        manager
      } = definition;
      var state = manager.create(owner, constructing, definition.state, args);
      return {
        manager,
        state,
        definition
      };
    });
    var instance = (0, _reference.valueForRef)(instanceRef);
    var tag = null;
    if (instance !== undefined) {
      var operations = vm.fetchValue(_vm2.$t0);
      operations.addModifier(instance);
      tag = instance.manager.getTag(instance.state);
      if (tag !== null) {
        (0, _validator.consumeTag)(tag);
      }
    }
    if (!(0, _reference.isConstRef)(ref) || tag) {
      return vm.updateWith(new UpdateDynamicModifierOpcode(tag, instance, instanceRef));
    }
  });
  class UpdateModifierOpcode {
    constructor(tag, modifier) {
      this.tag = tag;
      this.modifier = modifier;
      this.lastUpdated = (0, _validator.valueForTag)(tag);
    }
    evaluate(vm) {
      var {
        modifier,
        tag,
        lastUpdated
      } = this;
      (0, _validator.consumeTag)(tag);
      if (!(0, _validator.validateTag)(tag, lastUpdated)) {
        vm.env.scheduleUpdateModifier(modifier);
        this.lastUpdated = (0, _validator.valueForTag)(tag);
      }
    }
  }
  class UpdateDynamicModifierOpcode {
    constructor(tag, instance, instanceRef) {
      this.tag = tag;
      this.instance = instance;
      this.instanceRef = instanceRef;
      this.lastUpdated = (0, _validator.valueForTag)(tag !== null && tag !== void 0 ? tag : _validator.CURRENT_TAG);
    }
    evaluate(vm) {
      var {
        tag,
        lastUpdated,
        instance,
        instanceRef
      } = this;
      var newInstance = (0, _reference.valueForRef)(instanceRef);
      if (newInstance !== instance) {
        if (instance !== undefined) {
          var destroyable = instance.manager.getDestroyable(instance.state);
          if (destroyable !== null) {
            (0, _destroyable2.destroy)(destroyable);
          }
        }
        if (newInstance !== undefined) {
          var {
            manager,
            state
          } = newInstance;
          var _destroyable = manager.getDestroyable(state);
          if (_destroyable !== null) {
            (0, _destroyable2.associateDestroyableChild)(this, _destroyable);
          }
          tag = manager.getTag(state);
          if (tag !== null) {
            this.lastUpdated = (0, _validator.valueForTag)(tag);
          }
          this.tag = tag;
          vm.env.scheduleInstallModifier(newInstance);
        }
        this.instance = newInstance;
      } else if (tag !== null && !(0, _validator.validateTag)(tag, lastUpdated)) {
        vm.env.scheduleUpdateModifier(instance);
        this.lastUpdated = (0, _validator.valueForTag)(tag);
      }
      if (tag !== null) {
        (0, _validator.consumeTag)(tag);
      }
    }
  }
  APPEND_OPCODES.add(51
  /* StaticAttr */, (vm, _ref29) => {
    var {
      op1: _name,
      op2: _value,
      op3: _namespace
    } = _ref29;
    var name = vm[CONSTANTS].getValue(_name);
    var value = vm[CONSTANTS].getValue(_value);
    var namespace = _namespace ? vm[CONSTANTS].getValue(_namespace) : null;
    vm.elements().setStaticAttribute(name, value, namespace);
  });
  APPEND_OPCODES.add(52
  /* DynamicAttr */, (vm, _ref30) => {
    var {
      op1: _name,
      op2: _trusting,
      op3: _namespace
    } = _ref30;
    var name = vm[CONSTANTS].getValue(_name);
    var trusting = vm[CONSTANTS].getValue(_trusting);
    var reference = vm.stack.pop();
    var value = (0, _reference.valueForRef)(reference);
    var namespace = _namespace ? vm[CONSTANTS].getValue(_namespace) : null;
    var attribute = vm.elements().setDynamicAttribute(name, value, trusting, namespace);
    if (!(0, _reference.isConstRef)(reference)) {
      vm.updateWith(new UpdateDynamicAttributeOpcode(reference, attribute, vm.env));
    }
  });
  class UpdateDynamicAttributeOpcode {
    constructor(reference, attribute, env) {
      var initialized = false;
      this.updateRef = (0, _reference.createComputeRef)(() => {
        var value = (0, _reference.valueForRef)(reference);
        if (initialized === true) {
          attribute.update(value, env);
        } else {
          initialized = true;
        }
      });
      (0, _reference.valueForRef)(this.updateRef);
    }
    evaluate() {
      (0, _reference.valueForRef)(this.updateRef);
    }
  }
  APPEND_OPCODES.add(78
  /* PushComponentDefinition */, (vm, _ref31) => {
    var {
      op1: handle
    } = _ref31;
    var definition = vm[CONSTANTS].getValue(handle);
    var {
      manager,
      capabilities
    } = definition;
    var instance = {
      definition,
      manager,
      capabilities,
      state: null,
      handle: null,
      table: null,
      lookup: null
    };
    vm.stack.push(instance);
  });
  APPEND_OPCODES.add(80
  /* ResolveDynamicComponent */, (vm, _ref32) => {
    var {
      op1: _isStrict
    } = _ref32;
    var stack = vm.stack;
    var component = (0, _reference.valueForRef)(stack.pop());
    var constants = vm[CONSTANTS];
    var owner = vm.getOwner();
    var isStrict = constants.getValue(_isStrict);
    vm.loadValue(_vm2.$t1, null); // Clear the temp register

    var definition;
    if (typeof component === 'string') {
      if (true /* DEBUG */ && isStrict) {
        throw new Error(`Attempted to resolve a dynamic component with a string definition, \`${component}\` in a strict mode template. In strict mode, using strings to resolve component definitions is prohibited. You can instead import the component definition and use it directly.`);
      }
      var resolvedDefinition = resolveComponent(vm.runtime.resolver, constants, component, owner);
      definition = resolvedDefinition;
    } else if (isCurriedValue(component)) {
      definition = component;
    } else {
      definition = constants.component(component, owner);
    }
    stack.push(definition);
  });
  APPEND_OPCODES.add(81
  /* ResolveCurriedComponent */, vm => {
    var stack = vm.stack;
    var ref = stack.pop();
    var value = (0, _reference.valueForRef)(ref);
    var constants = vm[CONSTANTS];
    var definition;
    if (true /* DEBUG */ && !(typeof value === 'function' || typeof value === 'object' && value !== null)) {
      throw new Error(`Expected a component definition, but received ${value}. You may have accidentally done <${ref.debugLabel}>, where "${ref.debugLabel}" was a string instead of a curried component definition. You must either use the component definition directly, or use the {{component}} helper to create a curried component definition when invoking dynamically.`);
    }
    if (isCurriedValue(value)) {
      definition = value;
    } else {
      definition = constants.component(value, vm.getOwner(), true);
      if (true /* DEBUG */ && definition === null) {
        throw new Error(`Expected a dynamic component definition, but received an object or function that did not have a component manager associated with it. The dynamic invocation was \`<${ref.debugLabel}>\` or \`{{${ref.debugLabel}}}\`, and the incorrect definition is the value at the path \`${ref.debugLabel}\`, which was: ${(0, _util.debugToString)(value)}`);
      }
    }
    stack.push(definition);
  });
  APPEND_OPCODES.add(79
  /* PushDynamicComponentInstance */, vm => {
    var {
      stack
    } = vm;
    var definition = stack.pop();
    var capabilities, manager;
    if (isCurriedValue(definition)) {
      manager = capabilities = null;
    } else {
      manager = definition.manager;
      capabilities = definition.capabilities;
    }
    stack.push({
      definition,
      capabilities,
      manager,
      state: null,
      handle: null,
      table: null
    });
  });
  APPEND_OPCODES.add(82
  /* PushArgs */, (vm, _ref33) => {
    var {
      op1: _names,
      op2: _blockNames,
      op3: flags
    } = _ref33;
    var stack = vm.stack;
    var names = vm[CONSTANTS].getArray(_names);
    var positionalCount = flags >> 4;
    var atNames = flags & 0b1000;
    var blockNames = flags & 0b0111 ? vm[CONSTANTS].getArray(_blockNames) : _util.EMPTY_STRING_ARRAY;
    vm[ARGS].setup(stack, names, blockNames, positionalCount, !!atNames);
    stack.push(vm[ARGS]);
  });
  APPEND_OPCODES.add(83
  /* PushEmptyArgs */, vm => {
    var {
      stack
    } = vm;
    stack.push(vm[ARGS].empty(stack));
  });
  APPEND_OPCODES.add(86
  /* CaptureArgs */, vm => {
    var stack = vm.stack;
    var args = stack.pop();
    var capturedArgs = args.capture();
    stack.push(capturedArgs);
  });
  APPEND_OPCODES.add(85
  /* PrepareArgs */, (vm, _ref34) => {
    var {
      op1: _state
    } = _ref34;
    var stack = vm.stack;
    var instance = vm.fetchValue(_state);
    var args = stack.pop();
    var {
      definition
    } = instance;
    if (isCurriedType(definition, 0
    /* Component */)) {
      var constants = vm[CONSTANTS];
      var {
        definition: resolvedDefinition,
        owner,
        resolved,
        positional,
        named
      } = resolveCurriedValue(definition);
      if (resolved === true) {
        definition = resolvedDefinition;
      } else if (typeof resolvedDefinition === 'string') {
        var resolvedValue = vm.runtime.resolver.lookupComponent(resolvedDefinition, owner);
        definition = constants.resolvedComponent(resolvedValue, resolvedDefinition);
      } else {
        definition = constants.component(resolvedDefinition, owner);
      }
      if (named !== undefined) {
        args.named.merge((0, _util.assign)({}, ...named));
      }
      if (positional !== undefined) {
        args.realloc(positional.length);
        args.positional.prepend(positional);
      }
      var {
        manager: _manager
      } = definition;
      instance.definition = definition;
      instance.manager = _manager;
      instance.capabilities = definition.capabilities; // Save off the owner that this component was curried with. Later on,
      // we'll fetch the value of this register and set it as the owner on the
      // new root scope.

      vm.loadValue(_vm2.$t1, owner);
    }
    var {
      manager,
      state
    } = definition;
    var capabilities = instance.capabilities;
    if (!(0, _manager5.managerHasCapability)(manager, capabilities, 4
    /* PrepareArgs */)) {
      stack.push(args);
      return;
    }
    var blocks = args.blocks.values;
    var blockNames = args.blocks.names;
    var preparedArgs = manager.prepareArgs(state, args);
    if (preparedArgs) {
      args.clear();
      for (var i = 0; i < blocks.length; i++) {
        stack.push(blocks[i]);
      }
      var {
        positional: _positional,
        named: _named
      } = preparedArgs;
      var positionalCount = _positional.length;
      for (var _i = 0; _i < positionalCount; _i++) {
        stack.push(_positional[_i]);
      }
      var names = Object.keys(_named);
      for (var _i2 = 0; _i2 < names.length; _i2++) {
        stack.push(_named[names[_i2]]);
      }
      args.setup(stack, names, blockNames, positionalCount, false);
    }
    stack.push(args);
  });
  APPEND_OPCODES.add(87
  /* CreateComponent */, (vm, _ref35) => {
    var {
      op1: flags,
      op2: _state
    } = _ref35;
    var instance = vm.fetchValue(_state);
    var {
      definition,
      manager,
      capabilities
    } = instance;
    if (!(0, _manager5.managerHasCapability)(manager, capabilities, 512
    /* CreateInstance */)) {
      // TODO: Closure and Main components are always invoked dynamically, so this
      // opcode may run even if this capability is not enabled. In the future we
      // should handle this in a better way.
      return;
    }
    var dynamicScope = null;
    if ((0, _manager5.managerHasCapability)(manager, capabilities, 64
    /* DynamicScope */)) {
      dynamicScope = vm.dynamicScope();
    }
    var hasDefaultBlock = flags & 1;
    var args = null;
    if ((0, _manager5.managerHasCapability)(manager, capabilities, 8
    /* CreateArgs */)) {
      args = vm.stack.peek();
    }
    var self = null;
    if ((0, _manager5.managerHasCapability)(manager, capabilities, 128
    /* CreateCaller */)) {
      self = vm.getSelf();
    }
    var state = manager.create(vm.getOwner(), definition.state, args, vm.env, dynamicScope, self, !!hasDefaultBlock); // We want to reuse the `state` POJO here, because we know that the opcodes
    // only transition at exactly one place.

    instance.state = state;
    if ((0, _manager5.managerHasCapability)(manager, capabilities, 256
    /* UpdateHook */)) {
      vm.updateWith(new UpdateComponentOpcode(state, manager, dynamicScope));
    }
  });
  APPEND_OPCODES.add(88
  /* RegisterComponentDestructor */, (vm, _ref36) => {
    var {
      op1: _state
    } = _ref36;
    var {
      manager,
      state,
      capabilities
    } = vm.fetchValue(_state);
    var d = manager.getDestroyable(state);
    if (true /* DEBUG */ && !(0, _manager5.managerHasCapability)(manager, capabilities, 2048
    /* WillDestroy */) && d !== null && typeof 'willDestroy' in d) {
      throw new Error('BUG: Destructor has willDestroy, but the willDestroy capability was not enabled for this component. Pre-destruction hooks must be explicitly opted into');
    }
    if (d) vm.associateDestroyable(d);
  });
  APPEND_OPCODES.add(97
  /* BeginComponentTransaction */, (vm, _ref37) => {
    var {
      op1: _state
    } = _ref37;
    var _a;
    var name;
    if (true /* DEBUG */) {
      var {
        definition,
        manager
      } = vm.fetchValue(_state);
      name = (_a = definition.resolvedName) !== null && _a !== void 0 ? _a : manager.getDebugName(definition.state);
    }
    vm.beginCacheGroup(name);
    vm.elements().pushSimpleBlock();
  });
  APPEND_OPCODES.add(89
  /* PutComponentOperations */, vm => {
    vm.loadValue(_vm2.$t0, new ComponentElementOperations());
  });
  APPEND_OPCODES.add(53
  /* ComponentAttr */, (vm, _ref38) => {
    var {
      op1: _name,
      op2: _trusting,
      op3: _namespace
    } = _ref38;
    var name = vm[CONSTANTS].getValue(_name);
    var trusting = vm[CONSTANTS].getValue(_trusting);
    var reference = vm.stack.pop();
    var namespace = _namespace ? vm[CONSTANTS].getValue(_namespace) : null;
    vm.fetchValue(_vm2.$t0).setAttribute(name, reference, trusting, namespace);
  });
  APPEND_OPCODES.add(105
  /* StaticComponentAttr */, (vm, _ref39) => {
    var {
      op1: _name,
      op2: _value,
      op3: _namespace
    } = _ref39;
    var name = vm[CONSTANTS].getValue(_name);
    var value = vm[CONSTANTS].getValue(_value);
    var namespace = _namespace ? vm[CONSTANTS].getValue(_namespace) : null;
    vm.fetchValue(_vm2.$t0).setStaticAttribute(name, value, namespace);
  });
  class ComponentElementOperations {
    constructor() {
      this.attributes = (0, _util.dict)();
      this.classes = [];
      this.modifiers = [];
    }
    setAttribute(name, value, trusting, namespace) {
      var deferred = {
        value,
        namespace,
        trusting
      };
      if (name === 'class') {
        this.classes.push(value);
      }
      this.attributes[name] = deferred;
    }
    setStaticAttribute(name, value, namespace) {
      var deferred = {
        value,
        namespace
      };
      if (name === 'class') {
        this.classes.push(value);
      }
      this.attributes[name] = deferred;
    }
    addModifier(modifier) {
      this.modifiers.push(modifier);
    }
    flush(vm) {
      var type;
      var attributes = this.attributes;
      for (var name in this.attributes) {
        if (name === 'type') {
          type = attributes[name];
          continue;
        }
        var attr = this.attributes[name];
        if (name === 'class') {
          setDeferredAttr(vm, 'class', mergeClasses(this.classes), attr.namespace, attr.trusting);
        } else {
          setDeferredAttr(vm, name, attr.value, attr.namespace, attr.trusting);
        }
      }
      if (type !== undefined) {
        setDeferredAttr(vm, 'type', type.value, type.namespace, type.trusting);
      }
      return this.modifiers;
    }
  }
  function mergeClasses(classes) {
    if (classes.length === 0) {
      return '';
    }
    if (classes.length === 1) {
      return classes[0];
    }
    if (allStringClasses(classes)) {
      return classes.join(' ');
    }
    return createClassListRef(classes);
  }
  function allStringClasses(classes) {
    for (var i = 0; i < classes.length; i++) {
      if (typeof classes[i] !== 'string') {
        return false;
      }
    }
    return true;
  }
  function setDeferredAttr(vm, name, value, namespace, trusting) {
    if (trusting === void 0) {
      trusting = false;
    }
    if (typeof value === 'string') {
      vm.elements().setStaticAttribute(name, value, namespace);
    } else {
      var attribute = vm.elements().setDynamicAttribute(name, (0, _reference.valueForRef)(value), trusting, namespace);
      if (!(0, _reference.isConstRef)(value)) {
        vm.updateWith(new UpdateDynamicAttributeOpcode(value, attribute, vm.env));
      }
    }
  }
  APPEND_OPCODES.add(99
  /* DidCreateElement */, (vm, _ref40) => {
    var {
      op1: _state
    } = _ref40;
    var {
      definition,
      state
    } = vm.fetchValue(_state);
    var {
      manager
    } = definition;
    var operations = vm.fetchValue(_vm2.$t0);
    manager.didCreateElement(state, vm.elements().constructing, operations);
  });
  APPEND_OPCODES.add(90
  /* GetComponentSelf */, (vm, _ref41) => {
    var {
      op1: _state,
      op2: _names
    } = _ref41;
    var _a;
    var instance = vm.fetchValue(_state);
    var {
      definition,
      state
    } = instance;
    var {
      manager
    } = definition;
    var selfRef = manager.getSelf(state);
    if (vm.env.debugRenderTree !== undefined) {
      var _instance = vm.fetchValue(_state);
      var {
        definition: _definition,
        manager: _manager2
      } = _instance;
      var args;
      if (vm.stack.peek() === vm[ARGS]) {
        args = vm[ARGS].capture();
      } else {
        var names = vm[CONSTANTS].getArray(_names);
        vm[ARGS].setup(vm.stack, names, [], 0, true);
        args = vm[ARGS].capture();
      }
      var moduleName;
      var compilable = _definition.compilable;
      if (compilable === null) {
        compilable = _manager2.getDynamicLayout(state, vm.runtime.resolver);
        if (compilable !== null) {
          moduleName = compilable.moduleName;
        } else {
          moduleName = '__default__.hbs';
        }
      } else {
        moduleName = compilable.moduleName;
      } // For tearing down the debugRenderTree

      vm.associateDestroyable(_instance);
      if (hasCustomDebugRenderTreeLifecycle(_manager2)) {
        var nodes = _manager2.getDebugCustomRenderTree(_instance.definition.state, _instance.state, args, moduleName);
        nodes.forEach(node => {
          var {
            bucket
          } = node;
          vm.env.debugRenderTree.create(bucket, node);
          (0, _destroyable2.registerDestructor)(_instance, () => {
            var _a;
            (_a = vm.env.debugRenderTree) === null || _a === void 0 ? void 0 : _a.willDestroy(bucket);
          });
          vm.updateWith(new DebugRenderTreeUpdateOpcode(bucket));
        });
      } else {
        var name = (_a = _definition.resolvedName) !== null && _a !== void 0 ? _a : _manager2.getDebugName(_definition.state);
        vm.env.debugRenderTree.create(_instance, {
          type: 'component',
          name,
          args,
          template: moduleName,
          instance: (0, _reference.valueForRef)(selfRef)
        });
        vm.associateDestroyable(_instance);
        (0, _destroyable2.registerDestructor)(_instance, () => {
          var _a;
          (_a = vm.env.debugRenderTree) === null || _a === void 0 ? void 0 : _a.willDestroy(_instance);
        });
        vm.updateWith(new DebugRenderTreeUpdateOpcode(_instance));
      }
    }
    vm.stack.push(selfRef);
  });
  APPEND_OPCODES.add(91
  /* GetComponentTagName */, (vm, _ref42) => {
    var {
      op1: _state
    } = _ref42;
    var {
      definition,
      state
    } = vm.fetchValue(_state);
    var {
      manager
    } = definition;
    var tagName = manager.getTagName(state); // User provided value from JS, so we don't bother to encode

    vm.stack.push(tagName);
  }); // Dynamic Invocation Only

  APPEND_OPCODES.add(92
  /* GetComponentLayout */, (vm, _ref43) => {
    var {
      op1: _state
    } = _ref43;
    var instance = vm.fetchValue(_state);
    var {
      manager,
      definition
    } = instance;
    var {
      stack
    } = vm;
    var {
      compilable
    } = definition;
    if (compilable === null) {
      var {
        capabilities
      } = instance;
      compilable = manager.getDynamicLayout(instance.state, vm.runtime.resolver);
      if (compilable === null) {
        if ((0, _manager5.managerHasCapability)(manager, capabilities, 1024
        /* Wrapped */)) {
          compilable = (0, _util.unwrapTemplate)(vm[CONSTANTS].defaultTemplate).asWrappedLayout();
        } else {
          compilable = (0, _util.unwrapTemplate)(vm[CONSTANTS].defaultTemplate).asLayout();
        }
      }
    }
    var handle = compilable.compile(vm.context);
    stack.push(compilable.symbolTable);
    stack.push(handle);
  });
  APPEND_OPCODES.add(75
  /* Main */, (vm, _ref44) => {
    var {
      op1: register
    } = _ref44;
    var definition = vm.stack.pop();
    var invocation = vm.stack.pop();
    var {
      manager,
      capabilities
    } = definition;
    var state = {
      definition,
      manager,
      capabilities,
      state: null,
      handle: invocation.handle,
      table: invocation.symbolTable,
      lookup: null
    };
    vm.loadValue(register, state);
  });
  APPEND_OPCODES.add(95
  /* PopulateLayout */, (vm, _ref45) => {
    var {
      op1: _state
    } = _ref45;
    var {
      stack
    } = vm; // In DEBUG handles could be ErrHandle objects

    var handle = stack.pop();
    var table = stack.pop();
    var state = vm.fetchValue(_state);
    state.handle = handle;
    state.table = table;
  });
  APPEND_OPCODES.add(38
  /* VirtualRootScope */, (vm, _ref46) => {
    var {
      op1: _state
    } = _ref46;
    var {
      table,
      manager,
      capabilities,
      state
    } = vm.fetchValue(_state);
    var owner;
    if ((0, _manager5.managerHasCapability)(manager, capabilities, 4096
    /* HasSubOwner */)) {
      owner = manager.getOwner(state);
      vm.loadValue(_vm2.$t1, null); // Clear the temp register
    } else {
      // Check the temp register to see if an owner was resolved from currying
      owner = vm.fetchValue(_vm2.$t1);
      if (owner === null) {
        // If an owner wasn't found, default to using the current owner. This
        // will happen for normal dynamic component invocation,
        // e.g. <SomeClassicEmberComponent/>
        owner = vm.getOwner();
      } else {
        // Else the owner was found, so clear the temp register. This will happen
        // if we are loading a curried component, e.g. <@someCurriedComponent/>
        vm.loadValue(_vm2.$t1, null);
      }
    }
    vm.pushRootScope(table.symbols.length + 1, owner);
  });
  APPEND_OPCODES.add(94
  /* SetupForEval */, (vm, _ref47) => {
    var {
      op1: _state
    } = _ref47;
    var state = vm.fetchValue(_state);
    if (state.table.hasEval) {
      var lookup = state.lookup = (0, _util.dict)();
      vm.scope().bindEvalScope(lookup);
    }
  });
  APPEND_OPCODES.add(17
  /* SetNamedVariables */, (vm, _ref48) => {
    var {
      op1: _state
    } = _ref48;
    var state = vm.fetchValue(_state);
    var scope = vm.scope();
    var args = vm.stack.peek();
    var callerNames = args.named.atNames;
    for (var i = callerNames.length - 1; i >= 0; i--) {
      var atName = callerNames[i];
      var symbol$$1 = state.table.symbols.indexOf(callerNames[i]);
      var value = args.named.get(atName, true);
      if (symbol$$1 !== -1) scope.bindSymbol(symbol$$1 + 1, value);
      if (state.lookup) state.lookup[atName] = value;
    }
  });
  function bindBlock(symbolName, blockName, state, blocks, vm) {
    var symbol$$1 = state.table.symbols.indexOf(symbolName);
    var block = blocks.get(blockName);
    if (symbol$$1 !== -1) vm.scope().bindBlock(symbol$$1 + 1, block);
    if (state.lookup) state.lookup[symbolName] = block;
  }
  APPEND_OPCODES.add(18
  /* SetBlocks */, (vm, _ref49) => {
    var {
      op1: _state
    } = _ref49;
    var state = vm.fetchValue(_state);
    var {
      blocks
    } = vm.stack.peek();
    for (var i = 0; i < blocks.names.length; i++) {
      bindBlock(blocks.symbolNames[i], blocks.names[i], state, blocks, vm);
    }
  }); // Dynamic Invocation Only

  APPEND_OPCODES.add(96
  /* InvokeComponentLayout */, (vm, _ref50) => {
    var {
      op1: _state
    } = _ref50;
    var state = vm.fetchValue(_state);
    vm.call(state.handle);
  });
  APPEND_OPCODES.add(100
  /* DidRenderLayout */, (vm, _ref51) => {
    var {
      op1: _state
    } = _ref51;
    var instance = vm.fetchValue(_state);
    var {
      manager,
      state,
      capabilities
    } = instance;
    var bounds = vm.elements().popBlock();
    if (vm.env.debugRenderTree !== undefined) {
      if (hasCustomDebugRenderTreeLifecycle(manager)) {
        var nodes = manager.getDebugCustomRenderTree(instance.definition.state, state, EMPTY_ARGS);
        nodes.reverse().forEach(node => {
          var {
            bucket
          } = node;
          vm.env.debugRenderTree.didRender(bucket, bounds);
          vm.updateWith(new DebugRenderTreeDidRenderOpcode(bucket, bounds));
        });
      } else {
        vm.env.debugRenderTree.didRender(instance, bounds);
        vm.updateWith(new DebugRenderTreeDidRenderOpcode(instance, bounds));
      }
    }
    if ((0, _manager5.managerHasCapability)(manager, capabilities, 512
    /* CreateInstance */)) {
      var mgr = manager;
      mgr.didRenderLayout(state, bounds);
      vm.env.didCreate(instance);
      vm.updateWith(new DidUpdateLayoutOpcode(instance, bounds));
    }
  });
  APPEND_OPCODES.add(98
  /* CommitComponentTransaction */, vm => {
    vm.commitCacheGroup();
  });
  class UpdateComponentOpcode {
    constructor(component, manager, dynamicScope) {
      this.component = component;
      this.manager = manager;
      this.dynamicScope = dynamicScope;
    }
    evaluate(_vm) {
      var {
        component,
        manager,
        dynamicScope
      } = this;
      manager.update(component, dynamicScope);
    }
  }
  class DidUpdateLayoutOpcode {
    constructor(component, bounds) {
      this.component = component;
      this.bounds = bounds;
    }
    evaluate(vm) {
      var {
        component,
        bounds
      } = this;
      var {
        manager,
        state
      } = component;
      manager.didUpdateLayout(state, bounds);
      vm.env.didUpdate(component);
    }
  }
  class DebugRenderTreeUpdateOpcode {
    constructor(bucket) {
      this.bucket = bucket;
    }
    evaluate(vm) {
      var _a;
      (_a = vm.env.debugRenderTree) === null || _a === void 0 ? void 0 : _a.update(this.bucket);
    }
  }
  class DebugRenderTreeDidRenderOpcode {
    constructor(bucket, bounds) {
      this.bucket = bucket;
      this.bounds = bounds;
    }
    evaluate(vm) {
      var _a;
      (_a = vm.env.debugRenderTree) === null || _a === void 0 ? void 0 : _a.didRender(this.bucket, this.bounds);
    }
  }
  class DynamicTextContent {
    constructor(node, reference, lastValue) {
      this.node = node;
      this.reference = reference;
      this.lastValue = lastValue;
    }
    evaluate() {
      var value = (0, _reference.valueForRef)(this.reference);
      var {
        lastValue
      } = this;
      if (value === lastValue) return;
      var normalized;
      if (isEmpty(value)) {
        normalized = '';
      } else if (isString(value)) {
        normalized = value;
      } else {
        normalized = String(value);
      }
      if (normalized !== lastValue) {
        var textNode = this.node;
        textNode.nodeValue = this.lastValue = normalized;
      }
    }
  }
  function toContentType(value) {
    if (shouldCoerce(value)) {
      return 2
      /* String */;
    } else if (isCurriedType(value, 0
    /* Component */) || (0, _manager5.hasInternalComponentManager)(value)) {
      return 0
      /* Component */;
    } else if (isCurriedType(value, 1
    /* Helper */) || (0, _manager5.hasInternalHelperManager)(value)) {
      return 1
      /* Helper */;
    } else if (isSafeString(value)) {
      return 4
      /* SafeString */;
    } else if (isFragment(value)) {
      return 5
      /* Fragment */;
    } else if (isNode(value)) {
      return 6
      /* Node */;
    } else {
      return 2
      /* String */;
    }
  }

  function toDynamicContentType(value) {
    if (!(0, _util.isObject)(value)) {
      return 2
      /* String */;
    }

    if (isCurriedType(value, 0
    /* Component */) || (0, _manager5.hasInternalComponentManager)(value)) {
      return 0
      /* Component */;
    } else {
      if (true /* DEBUG */ && !isCurriedType(value, 1
      /* Helper */) && !(0, _manager5.hasInternalHelperManager)(value)) {
        throw new Error(`Attempted use a dynamic value as a component or helper, but that value did not have an associated component or helper manager. The value was: ${value}`);
      }
      return 1
      /* Helper */;
    }
  }

  APPEND_OPCODES.add(76
  /* ContentType */, vm => {
    var reference = vm.stack.peek();
    vm.stack.push(toContentType((0, _reference.valueForRef)(reference)));
    if (!(0, _reference.isConstRef)(reference)) {
      vm.updateWith(new AssertFilter(reference, toContentType));
    }
  });
  APPEND_OPCODES.add(106
  /* DynamicContentType */, vm => {
    var reference = vm.stack.peek();
    vm.stack.push(toDynamicContentType((0, _reference.valueForRef)(reference)));
    if (!(0, _reference.isConstRef)(reference)) {
      vm.updateWith(new AssertFilter(reference, toDynamicContentType));
    }
  });
  APPEND_OPCODES.add(43
  /* AppendHTML */, vm => {
    var reference = vm.stack.pop();
    var rawValue = (0, _reference.valueForRef)(reference);
    var value = isEmpty(rawValue) ? '' : String(rawValue);
    vm.elements().appendDynamicHTML(value);
  });
  APPEND_OPCODES.add(44
  /* AppendSafeHTML */, vm => {
    var reference = vm.stack.pop();
    var rawValue = (0, _reference.valueForRef)(reference).toHTML();
    var value = isEmpty(rawValue) ? '' : rawValue;
    vm.elements().appendDynamicHTML(value);
  });
  APPEND_OPCODES.add(47
  /* AppendText */, vm => {
    var reference = vm.stack.pop();
    var rawValue = (0, _reference.valueForRef)(reference);
    var value = isEmpty(rawValue) ? '' : String(rawValue);
    var node = vm.elements().appendDynamicText(value);
    if (!(0, _reference.isConstRef)(reference)) {
      vm.updateWith(new DynamicTextContent(node, reference, value));
    }
  });
  APPEND_OPCODES.add(45
  /* AppendDocumentFragment */, vm => {
    var reference = vm.stack.pop();
    var value = (0, _reference.valueForRef)(reference);
    vm.elements().appendDynamicFragment(value);
  });
  APPEND_OPCODES.add(46
  /* AppendNode */, vm => {
    var reference = vm.stack.pop();
    var value = (0, _reference.valueForRef)(reference);
    vm.elements().appendDynamicNode(value);
  });
  function debugCallback(context, get) {
    // eslint-disable-next-line no-console
    console.info('Use `context`, and `get(<path>)` to debug this template.'); // for example...
    // eslint-disable-next-line no-unused-expressions

    context === get('this'); // eslint-disable-next-line no-debugger

    debugger;
  }
  var callback = debugCallback; // For testing purposes

  function setDebuggerCallback(cb) {
    callback = cb;
  }
  function resetDebuggerCallback() {
    callback = debugCallback;
  }
  class ScopeInspector {
    constructor(scope, symbols, evalInfo) {
      this.scope = scope;
      this.locals = (0, _util.dict)();
      for (var i = 0; i < evalInfo.length; i++) {
        var slot = evalInfo[i];
        var name = symbols[slot - 1];
        var ref = scope.getSymbol(slot);
        this.locals[name] = ref;
      }
    }
    get(path) {
      var {
        scope,
        locals
      } = this;
      var parts = path.split('.');
      var [head, ...tail] = path.split('.');
      var evalScope = scope.getEvalScope();
      var ref;
      if (head === 'this') {
        ref = scope.getSelf();
      } else if (locals[head]) {
        ref = locals[head];
      } else if (head.indexOf('@') === 0 && evalScope[head]) {
        ref = evalScope[head];
      } else {
        ref = this.scope.getSelf();
        tail = parts;
      }
      return tail.reduce((r, part) => (0, _reference.childRefFor)(r, part), ref);
    }
  }
  APPEND_OPCODES.add(103
  /* Debugger */, (vm, _ref52) => {
    var {
      op1: _symbols,
      op2: _evalInfo
    } = _ref52;
    var symbols = vm[CONSTANTS].getArray(_symbols);
    var evalInfo = vm[CONSTANTS].getArray((0, _util.decodeHandle)(_evalInfo));
    var inspector = new ScopeInspector(vm.scope(), symbols, evalInfo);
    callback((0, _reference.valueForRef)(vm.getSelf()), path => (0, _reference.valueForRef)(inspector.get(path)));
  });
  APPEND_OPCODES.add(72
  /* EnterList */, (vm, _ref53) => {
    var {
      op1: relativeStart,
      op2: elseTarget
    } = _ref53;
    var stack = vm.stack;
    var listRef = stack.pop();
    var keyRef = stack.pop();
    var keyValue = (0, _reference.valueForRef)(keyRef);
    var key = keyValue === null ? '@identity' : String(keyValue);
    var iteratorRef = (0, _reference.createIteratorRef)(listRef, key);
    var iterator = (0, _reference.valueForRef)(iteratorRef);
    vm.updateWith(new AssertFilter(iteratorRef, iterator => iterator.isEmpty()));
    if (iterator.isEmpty() === true) {
      // TODO: Fix this offset, should be accurate
      vm.goto(elseTarget + 1);
    } else {
      vm.enterList(iteratorRef, relativeStart);
      vm.stack.push(iterator);
    }
  });
  APPEND_OPCODES.add(73
  /* ExitList */, vm => {
    vm.exitList();
  });
  APPEND_OPCODES.add(74
  /* Iterate */, (vm, _ref54) => {
    var {
      op1: breaks
    } = _ref54;
    var stack = vm.stack;
    var iterator = stack.peek();
    var item = iterator.next();
    if (item !== null) {
      vm.registerItem(vm.enterItem(item));
    } else {
      vm.goto(breaks);
    }
  });
  var CAPABILITIES = {
    dynamicLayout: false,
    dynamicTag: false,
    prepareArgs: false,
    createArgs: false,
    attributeHook: false,
    elementHook: false,
    createCaller: false,
    dynamicScope: false,
    updateHook: false,
    createInstance: false,
    wrapped: false,
    willDestroy: false,
    hasSubOwner: false
  };
  class TemplateOnlyComponentManager {
    getCapabilities() {
      return CAPABILITIES;
    }
    getDebugName(_ref55) {
      var {
        name
      } = _ref55;
      return name;
    }
    getSelf() {
      return _reference.NULL_REFERENCE;
    }
    getDestroyable() {
      return null;
    }
  }
  _exports.TemplateOnlyComponentManager = TemplateOnlyComponentManager;
  var TEMPLATE_ONLY_COMPONENT_MANAGER = new TemplateOnlyComponentManager(); // This is only exported for types, don't use this class directly
  _exports.TEMPLATE_ONLY_COMPONENT_MANAGER = TEMPLATE_ONLY_COMPONENT_MANAGER;
  class TemplateOnlyComponentDefinition {
    constructor(moduleName, name) {
      if (moduleName === void 0) {
        moduleName = '@glimmer/component/template-only';
      }
      if (name === void 0) {
        name = '(unknown template-only component)';
      }
      this.moduleName = moduleName;
      this.name = name;
    }
    toString() {
      return this.moduleName;
    }
  }
  _exports.TemplateOnlyComponent = TemplateOnlyComponentDefinition;
  (0, _manager5.setInternalComponentManager)(TEMPLATE_ONLY_COMPONENT_MANAGER, TemplateOnlyComponentDefinition.prototype);
  /**
    This utility function is used to declare a given component has no backing class. When the rendering engine detects this it
    is able to perform a number of optimizations. Templates that are associated with `templateOnly()` will be rendered _as is_
    without adding a wrapping `<div>` (or any of the other element customization behaviors of [@ember/component](/ember/release/classes/Component)).
    Specifically, this means that the template will be rendered as "outer HTML".
  
    In general, this method will be used by build time tooling and would not be directly written in an application. However,
    at times it may be useful to use directly to leverage the "outer HTML" semantics mentioned above. For example, if an addon would like
    to use these semantics for its templates but cannot be certain it will only be consumed by applications that have enabled the
    `template-only-glimmer-components` optional feature.
  
    @example
  
    ```js
    import { templateOnlyComponent } from '@glimmer/runtime';
  
    export default templateOnlyComponent();
    ```
  
    @public
    @method templateOnly
    @param {String} moduleName the module name that the template only component represents, this will be used for debugging purposes
    @category EMBER_GLIMMER_SET_COMPONENT_TEMPLATE
  */

  function templateOnlyComponent(moduleName, name) {
    return new TemplateOnlyComponentDefinition(moduleName, name);
  }

  // http://www.w3.org/TR/html/syntax.html#html-integration-point
  var SVG_INTEGRATION_POINTS = {
    foreignObject: 1,
    desc: 1,
    title: 1
  }; // http://www.w3.org/TR/html/syntax.html#adjust-svg-attributes
  // TODO: Adjust SVG attributes
  // http://www.w3.org/TR/html/syntax.html#parsing-main-inforeign
  // TODO: Adjust SVG elements
  // http://www.w3.org/TR/html/syntax.html#parsing-main-inforeign

  var BLACKLIST_TABLE = Object.create(null);
  class DOMOperations {
    constructor(document) {
      this.document = document;
      this.setupUselessElement();
    } // split into separate method so that NodeDOMTreeConstruction
    // can override it.

    setupUselessElement() {
      this.uselessElement = this.document.createElement('div');
    }
    createElement(tag, context) {
      var isElementInSVGNamespace, isHTMLIntegrationPoint;
      if (context) {
        isElementInSVGNamespace = context.namespaceURI === "http://www.w3.org/2000/svg"
        /* SVG */ || tag === 'svg';
        isHTMLIntegrationPoint = !!SVG_INTEGRATION_POINTS[context.tagName];
      } else {
        isElementInSVGNamespace = tag === 'svg';
        isHTMLIntegrationPoint = false;
      }
      if (isElementInSVGNamespace && !isHTMLIntegrationPoint) {
        // FIXME: This does not properly handle <font> with color, face, or
        // size attributes, which is also disallowed by the spec. We should fix
        // this.
        if (BLACKLIST_TABLE[tag]) {
          throw new Error(`Cannot create a ${tag} inside an SVG context`);
        }
        return this.document.createElementNS("http://www.w3.org/2000/svg"
        /* SVG */, tag);
      } else {
        return this.document.createElement(tag);
      }
    }
    insertBefore(parent, node, reference) {
      parent.insertBefore(node, reference);
    }
    insertHTMLBefore(parent, nextSibling, html) {
      if (html === '') {
        var comment = this.createComment('');
        parent.insertBefore(comment, nextSibling);
        return new ConcreteBounds(parent, comment, comment);
      }
      var prev = nextSibling ? nextSibling.previousSibling : parent.lastChild;
      var last;
      if (nextSibling === null) {
        parent.insertAdjacentHTML("beforeend"
        /* beforeend */, html);
        last = parent.lastChild;
      } else if (nextSibling instanceof HTMLElement) {
        nextSibling.insertAdjacentHTML('beforebegin', html);
        last = nextSibling.previousSibling;
      } else {
        // Non-element nodes do not support insertAdjacentHTML, so add an
        // element and call it on that element. Then remove the element.
        //
        // This also protects Edge, IE and Firefox w/o the inspector open
        // from merging adjacent text nodes. See ./compat/text-node-merging-fix.ts
        var {
          uselessElement
        } = this;
        parent.insertBefore(uselessElement, nextSibling);
        uselessElement.insertAdjacentHTML("beforebegin"
        /* beforebegin */, html);
        last = uselessElement.previousSibling;
        parent.removeChild(uselessElement);
      }
      var first = prev ? prev.nextSibling : parent.firstChild;
      return new ConcreteBounds(parent, first, last);
    }
    createTextNode(text) {
      return this.document.createTextNode(text);
    }
    createComment(data) {
      return this.document.createComment(data);
    }
  }
  function moveNodesBefore(source, target, nextSibling) {
    var first = source.firstChild;
    var last = first;
    var current = first;
    while (current) {
      var next = current.nextSibling;
      target.insertBefore(current, nextSibling);
      last = current;
      current = next;
    }
    return new ConcreteBounds(target, first, last);
  }
  var SVG_NAMESPACE = "http://www.w3.org/2000/svg"
  /* SVG */; // Patch:    insertAdjacentHTML on SVG Fix
  // Browsers: Safari, IE, Edge, Firefox ~33-34
  // Reason:   insertAdjacentHTML does not exist on SVG elements in Safari. It is
  //           present but throws an exception on IE and Edge. Old versions of
  //           Firefox create nodes in the incorrect namespace.
  // Fix:      Since IE and Edge silently fail to create SVG nodes using
  //           innerHTML, and because Firefox may create nodes in the incorrect
  //           namespace using innerHTML on SVG elements, an HTML-string wrapping
  //           approach is used. A pre/post SVG tag is added to the string, then
  //           that whole string is added to a div. The created nodes are plucked
  //           out and applied to the target location on DOM.

  function applySVGInnerHTMLFix(document, DOMClass, svgNamespace) {
    if (!document) return DOMClass;
    if (!shouldApplyFix(document, svgNamespace)) {
      return DOMClass;
    }
    var div = document.createElement('div');
    return class DOMChangesWithSVGInnerHTMLFix extends DOMClass {
      insertHTMLBefore(parent, nextSibling, html) {
        if (html === '') {
          return super.insertHTMLBefore(parent, nextSibling, html);
        }
        if (parent.namespaceURI !== svgNamespace) {
          return super.insertHTMLBefore(parent, nextSibling, html);
        }
        return fixSVG(parent, div, html, nextSibling);
      }
    };
  }
  function fixSVG(parent, div, html, reference) {
    var source; // This is important, because descendants of the <foreignObject> integration
    // point are parsed in the HTML namespace

    if (parent.tagName.toUpperCase() === 'FOREIGNOBJECT') {
      // IE, Edge: also do not correctly support using `innerHTML` on SVG
      // namespaced elements. So here a wrapper is used.
      var wrappedHtml = '<svg><foreignObject>' + html + '</foreignObject></svg>';
      (0, _util.clearElement)(div);
      div.insertAdjacentHTML("afterbegin"
      /* afterbegin */, wrappedHtml);
      source = div.firstChild.firstChild;
    } else {
      // IE, Edge: also do not correctly support using `innerHTML` on SVG
      // namespaced elements. So here a wrapper is used.
      var _wrappedHtml = '<svg>' + html + '</svg>';
      (0, _util.clearElement)(div);
      div.insertAdjacentHTML("afterbegin"
      /* afterbegin */, _wrappedHtml);
      source = div.firstChild;
    }
    return moveNodesBefore(source, parent, reference);
  }
  function shouldApplyFix(document, svgNamespace) {
    var svg = document.createElementNS(svgNamespace, 'svg');
    try {
      svg.insertAdjacentHTML("beforeend"
      /* beforeend */, '<circle></circle>');
    } catch (e) {// IE, Edge: Will throw, insertAdjacentHTML is unsupported on SVG
      // Safari: Will throw, insertAdjacentHTML is not present on SVG
    } finally {
      // FF: Old versions will create a node in the wrong namespace
      if (svg.childNodes.length === 1 && svg.firstChild.namespaceURI === SVG_NAMESPACE) {
        // The test worked as expected, no fix required
        return false;
      }
      return true;
    }
  }

  // Patch:    Adjacent text node merging fix
  // Browsers: IE, Edge, Firefox w/o inspector open
  // Reason:   These browsers will merge adjacent text nodes. For example given
  //           <div>Hello</div> with div.insertAdjacentHTML(' world') browsers
  //           with proper behavior will populate div.childNodes with two items.
  //           These browsers will populate it with one merged node instead.
  // Fix:      Add these nodes to a wrapper element, then iterate the childNodes
  //           of that wrapper and move the nodes to their target location. Note
  //           that potential SVG bugs will have been handled before this fix.
  //           Note that this fix must only apply to the previous text node, as
  //           the base implementation of `insertHTMLBefore` already handles
  //           following text nodes correctly.
  function applyTextNodeMergingFix(document, DOMClass) {
    if (!document) return DOMClass;
    if (!shouldApplyFix$1(document)) {
      return DOMClass;
    }
    return class DOMChangesWithTextNodeMergingFix extends DOMClass {
      constructor(document) {
        super(document);
        this.uselessComment = document.createComment('');
      }
      insertHTMLBefore(parent, nextSibling, html) {
        if (html === '') {
          return super.insertHTMLBefore(parent, nextSibling, html);
        }
        var didSetUselessComment = false;
        var nextPrevious = nextSibling ? nextSibling.previousSibling : parent.lastChild;
        if (nextPrevious && nextPrevious instanceof Text) {
          didSetUselessComment = true;
          parent.insertBefore(this.uselessComment, nextSibling);
        }
        var bounds = super.insertHTMLBefore(parent, nextSibling, html);
        if (didSetUselessComment) {
          parent.removeChild(this.uselessComment);
        }
        return bounds;
      }
    };
  }
  function shouldApplyFix$1(document) {
    var mergingTextDiv = document.createElement('div');
    mergingTextDiv.appendChild(document.createTextNode('first'));
    mergingTextDiv.insertAdjacentHTML("beforeend"
    /* beforeend */, 'second');
    if (mergingTextDiv.childNodes.length === 2) {
      // It worked as expected, no fix required
      return false;
    }
    return true;
  }
  ['b', 'big', 'blockquote', 'body', 'br', 'center', 'code', 'dd', 'div', 'dl', 'dt', 'em', 'embed', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'hr', 'i', 'img', 'li', 'listing', 'main', 'meta', 'nobr', 'ol', 'p', 'pre', 'ruby', 's', 'small', 'span', 'strong', 'strike', 'sub', 'sup', 'table', 'tt', 'u', 'ul', 'var'].forEach(tag => BLACKLIST_TABLE[tag] = 1);
  var WHITESPACE = /[\t-\r \xA0\u1680\u180E\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]/;
  var doc = typeof document === 'undefined' ? null : document;
  function isWhitespace(string) {
    return WHITESPACE.test(string);
  }
  var DOM;
  (function (DOM) {
    class TreeConstruction extends DOMOperations {
      createElementNS(namespace, tag) {
        return this.document.createElementNS(namespace, tag);
      }
      setAttribute(element, name, value, namespace) {
        if (namespace === void 0) {
          namespace = null;
        }
        if (namespace) {
          element.setAttributeNS(namespace, name, value);
        } else {
          element.setAttribute(name, value);
        }
      }
    }
    DOM.TreeConstruction = TreeConstruction;
    var appliedTreeConstruction = TreeConstruction;
    appliedTreeConstruction = applyTextNodeMergingFix(doc, appliedTreeConstruction);
    appliedTreeConstruction = applySVGInnerHTMLFix(doc, appliedTreeConstruction, "http://www.w3.org/2000/svg"
    /* SVG */);

    DOM.DOMTreeConstruction = appliedTreeConstruction;
  })(DOM || (DOM = {}));
  class DOMChangesImpl extends DOMOperations {
    constructor(document) {
      super(document);
      this.document = document;
      this.namespace = null;
    }
    setAttribute(element, name, value) {
      element.setAttribute(name, value);
    }
    removeAttribute(element, name) {
      element.removeAttribute(name);
    }
    insertAfter(element, node, reference) {
      this.insertBefore(element, node, reference.nextSibling);
    }
  }
  _exports.IDOMChanges = DOMChangesImpl;
  var helper = DOMChangesImpl;
  helper = applyTextNodeMergingFix(doc, helper);
  helper = applySVGInnerHTMLFix(doc, helper, "http://www.w3.org/2000/svg"
  /* SVG */);

  var helper$1 = helper;
  _exports.DOMChanges = helper$1;
  var DOMTreeConstruction = DOM.DOMTreeConstruction;
  _exports.DOMTreeConstruction = DOMTreeConstruction;
  var GUID = 0;
  class Ref {
    constructor(value) {
      this.id = GUID++;
      this.value = value;
    }
    get() {
      return this.value;
    }
    release() {
      if (true /* DEBUG */ && this.value === null) {
        throw new Error('BUG: double release?');
      }
      this.value = null;
    }
    toString() {
      var label = `Ref ${this.id}`;
      if (this.value === null) {
        return `${label} (released)`;
      } else {
        try {
          return `${label}: ${this.value}`;
        } catch (_a) {
          return label;
        }
      }
    }
  }
  class DebugRenderTreeImpl {
    constructor() {
      this.stack = new _util.Stack();
      this.refs = new WeakMap();
      this.roots = new Set();
      this.nodes = new WeakMap();
    }
    begin() {
      this.reset();
    }
    create(state, node) {
      var internalNode = (0, _util.assign)({}, node, {
        bounds: null,
        refs: new Set()
      });
      this.nodes.set(state, internalNode);
      this.appendChild(internalNode, state);
      this.enter(state);
    }
    update(state) {
      this.enter(state);
    }
    didRender(state, bounds) {
      if (true /* DEBUG */ && this.stack.current !== state) {
        throw new Error(`BUG: expecting ${this.stack.current}, got ${state}`);
      }
      this.nodeFor(state).bounds = bounds;
      this.exit();
    }
    willDestroy(state) {
      this.refs.get(state).release();
    }
    commit() {
      this.reset();
    }
    capture() {
      return this.captureRefs(this.roots);
    }
    reset() {
      if (this.stack.size !== 0) {
        // We probably encountered an error during the rendering loop. This will
        // likely trigger undefined behavior and memory leaks as the error left
        // things in an inconsistent state. It is recommended that the user
        // refresh the page.
        // TODO: We could warn here? But this happens all the time in our tests?
        // Clean up the root reference to prevent errors from happening if we
        // attempt to capture the render tree (Ember Inspector may do this)
        var root = this.stack.toArray()[0];
        var ref = this.refs.get(root);
        if (ref !== undefined) {
          this.roots.delete(ref);
        }
        while (!this.stack.isEmpty()) {
          this.stack.pop();
        }
      }
    }
    enter(state) {
      this.stack.push(state);
    }
    exit() {
      if (true /* DEBUG */ && this.stack.size === 0) {
        throw new Error('BUG: unbalanced pop');
      }
      this.stack.pop();
    }
    nodeFor(state) {
      return this.nodes.get(state);
    }
    appendChild(node, state) {
      if (true /* DEBUG */ && this.refs.has(state)) {
        throw new Error('BUG: child already appended');
      }
      var parent = this.stack.current;
      var ref = new Ref(state);
      this.refs.set(state, ref);
      if (parent) {
        var parentNode = this.nodeFor(parent);
        parentNode.refs.add(ref);
        node.parent = parentNode;
      } else {
        this.roots.add(ref);
      }
    }
    captureRefs(refs) {
      var captured = [];
      refs.forEach(ref => {
        var state = ref.get();
        if (state) {
          captured.push(this.captureNode(`render-node:${ref.id}`, state));
        } else {
          refs.delete(ref);
        }
      });
      return captured;
    }
    captureNode(id, state) {
      var node = this.nodeFor(state);
      var {
        type,
        name,
        args,
        instance,
        refs
      } = node;
      var template = this.captureTemplate(node);
      var bounds = this.captureBounds(node);
      var children = this.captureRefs(refs);
      return {
        id,
        type,
        name,
        args: reifyArgs(args),
        instance,
        template,
        bounds,
        children
      };
    }
    captureTemplate(_ref56) {
      var {
        template
      } = _ref56;
      return template || null;
    }
    captureBounds(node) {
      var bounds = node.bounds;
      var parentElement = bounds.parentElement();
      var firstNode = bounds.firstNode();
      var lastNode = bounds.lastNode();
      return {
        parentElement,
        firstNode,
        lastNode
      };
    }
  }
  var _a$1;
  var TRANSACTION = (0, _util.symbol)('TRANSACTION');
  class TransactionImpl {
    constructor() {
      this.scheduledInstallModifiers = [];
      this.scheduledUpdateModifiers = [];
      this.createdComponents = [];
      this.updatedComponents = [];
    }
    didCreate(component) {
      this.createdComponents.push(component);
    }
    didUpdate(component) {
      this.updatedComponents.push(component);
    }
    scheduleInstallModifier(modifier) {
      this.scheduledInstallModifiers.push(modifier);
    }
    scheduleUpdateModifier(modifier) {
      this.scheduledUpdateModifiers.push(modifier);
    }
    commit() {
      var {
        createdComponents,
        updatedComponents
      } = this;
      for (var i = 0; i < createdComponents.length; i++) {
        var {
          manager: _manager3,
          state: _state2
        } = createdComponents[i];
        _manager3.didCreate(_state2);
      }
      for (var _i3 = 0; _i3 < updatedComponents.length; _i3++) {
        var {
          manager: _manager4,
          state: _state3
        } = updatedComponents[_i3];
        _manager4.didUpdate(_state3);
      }
      var {
        scheduledInstallModifiers,
        scheduledUpdateModifiers
      } = this; // Prevent a transpilation issue we guard against in Ember, the
      // throw-if-closure-required issue

      var manager, state;
      for (var _i4 = 0; _i4 < scheduledInstallModifiers.length; _i4++) {
        var modifier = scheduledInstallModifiers[_i4];
        manager = modifier.manager;
        state = modifier.state;
        var modifierTag = manager.getTag(state);
        if (modifierTag !== null) {
          var tag = (0, _validator.track)(
          // eslint-disable-next-line no-loop-func
          () => manager.install(state), true /* DEBUG */ && `- While rendering:\n  (instance of a \`${modifier.definition.resolvedName || manager.getDebugName(modifier.definition.state)}\` modifier)`);
          (0, _validator.updateTag)(modifierTag, tag);
        } else {
          manager.install(state);
        }
      }
      for (var _i5 = 0; _i5 < scheduledUpdateModifiers.length; _i5++) {
        var _modifier = scheduledUpdateModifiers[_i5];
        manager = _modifier.manager;
        state = _modifier.state;
        var _modifierTag = manager.getTag(state);
        if (_modifierTag !== null) {
          var _tag = (0, _validator.track)(
          // eslint-disable-next-line no-loop-func
          () => manager.update(state), true /* DEBUG */ && `- While rendering:\n  (instance of a \`${_modifier.definition.resolvedName || manager.getDebugName(_modifier.definition.state)}\` modifier)`);
          (0, _validator.updateTag)(_modifierTag, _tag);
        } else {
          manager.update(state);
        }
      }
    }
  }
  class EnvironmentImpl {
    constructor(options, delegate) {
      this.delegate = delegate;
      this[_a$1] = null; // Delegate methods and values

      this.isInteractive = this.delegate.isInteractive;
      this.debugRenderTree = this.delegate.enableDebugTooling ? new DebugRenderTreeImpl() : undefined;
      if (options.appendOperations) {
        this.appendOperations = options.appendOperations;
        this.updateOperations = options.updateOperations;
      } else if (options.document) {
        this.appendOperations = new DOMTreeConstruction(options.document);
        this.updateOperations = new DOMChangesImpl(options.document);
      } else if (true /* DEBUG */) {
        throw new Error('you must pass document or appendOperations to a new runtime');
      }
    }
    getAppendOperations() {
      return this.appendOperations;
    }
    getDOM() {
      return this.updateOperations;
    }
    begin() {
      var _b;
      (_b = this.debugRenderTree) === null || _b === void 0 ? void 0 : _b.begin();
      this[TRANSACTION] = new TransactionImpl();
    }
    get transaction() {
      return this[TRANSACTION];
    }
    didCreate(component) {
      this.transaction.didCreate(component);
    }
    didUpdate(component) {
      this.transaction.didUpdate(component);
    }
    scheduleInstallModifier(modifier) {
      if (this.isInteractive) {
        this.transaction.scheduleInstallModifier(modifier);
      }
    }
    scheduleUpdateModifier(modifier) {
      if (this.isInteractive) {
        this.transaction.scheduleUpdateModifier(modifier);
      }
    }
    commit() {
      var _b;
      var transaction = this.transaction;
      this[TRANSACTION] = null;
      transaction.commit();
      (_b = this.debugRenderTree) === null || _b === void 0 ? void 0 : _b.commit();
      this.delegate.onTransactionCommit();
    }
  }
  _exports.EnvironmentImpl = EnvironmentImpl;
  _a$1 = TRANSACTION;
  function runtimeContext(options, delegate, artifacts, resolver) {
    return {
      env: new EnvironmentImpl(options, delegate),
      program: new _program.RuntimeProgramImpl(artifacts.constants, artifacts.heap),
      resolver: resolver
    };
  }
  function inTransaction(env, cb) {
    if (!env[TRANSACTION]) {
      env.begin();
      try {
        cb();
      } finally {
        env.commit();
      }
    } else {
      cb();
    }
  }
  function initializeRegistersWithSP(sp) {
    return [0, -1, sp, 0];
  }
  class LowLevelVM {
    constructor(stack, heap, program, externs, registers) {
      this.stack = stack;
      this.heap = heap;
      this.program = program;
      this.externs = externs;
      this.registers = registers;
      this.currentOpSize = 0;
    }
    fetchRegister(register) {
      return this.registers[register];
    }
    loadRegister(register, value) {
      this.registers[register] = value;
    }
    setPc(pc) {
      this.registers[_vm2.$pc] = pc;
    } // Start a new frame and save $ra and $fp on the stack

    pushFrame() {
      this.stack.push(this.registers[_vm2.$ra]);
      this.stack.push(this.registers[_vm2.$fp]);
      this.registers[_vm2.$fp] = this.registers[_vm2.$sp] - 1;
    } // Restore $ra, $sp and $fp

    popFrame() {
      this.registers[_vm2.$sp] = this.registers[_vm2.$fp] - 1;
      this.registers[_vm2.$ra] = this.stack.get(0);
      this.registers[_vm2.$fp] = this.stack.get(1);
    }
    pushSmallFrame() {
      this.stack.push(this.registers[_vm2.$ra]);
    }
    popSmallFrame() {
      this.registers[_vm2.$ra] = this.stack.pop();
    } // Jump to an address in `program`

    goto(offset) {
      this.setPc(this.target(offset));
    }
    target(offset) {
      return this.registers[_vm2.$pc] + offset - this.currentOpSize;
    } // Save $pc into $ra, then jump to a new address in `program` (jal in MIPS)

    call(handle) {
      this.registers[_vm2.$ra] = this.registers[_vm2.$pc];
      this.setPc(this.heap.getaddr(handle));
    } // Put a specific `program` address in $ra

    returnTo(offset) {
      this.registers[_vm2.$ra] = this.target(offset);
    } // Return to the `program` address stored in $ra

    return() {
      this.setPc(this.registers[_vm2.$ra]);
    }
    nextStatement() {
      var {
        registers,
        program
      } = this;
      var pc = registers[_vm2.$pc];
      if (pc === -1) {
        return null;
      } // We have to save off the current operations size so that
      // when we do a jump we can calculate the correct offset
      // to where we are going. We can't simply ask for the size
      // in a jump because we have have already incremented the
      // program counter to the next instruction prior to executing.

      var opcode = program.opcode(pc);
      var operationSize = this.currentOpSize = opcode.size;
      this.registers[_vm2.$pc] += operationSize;
      return opcode;
    }
    evaluateOuter(opcode, vm) {
      {
        this.evaluateInner(opcode, vm);
      }
    }
    evaluateInner(opcode, vm) {
      if (opcode.isMachine) {
        this.evaluateMachine(opcode);
      } else {
        this.evaluateSyscall(opcode, vm);
      }
    }
    evaluateMachine(opcode) {
      switch (opcode.type) {
        case 0
        /* PushFrame */:
          return this.pushFrame();
        case 1
        /* PopFrame */:
          return this.popFrame();
        case 3
        /* InvokeStatic */:
          return this.call(opcode.op1);
        case 2
        /* InvokeVirtual */:
          return this.call(this.stack.pop());
        case 4
        /* Jump */:
          return this.goto(opcode.op1);
        case 5
        /* Return */:
          return this.return();
        case 6
        /* ReturnTo */:
          return this.returnTo(opcode.op1);
      }
    }
    evaluateSyscall(opcode, vm) {
      APPEND_OPCODES.evaluate(vm, opcode, opcode.type);
    }
  }
  class UpdatingVMImpl {
    constructor(env, _ref57) {
      var {
        alwaysRevalidate = false
      } = _ref57;
      this.frameStack = new _util.Stack();
      this.env = env;
      this.dom = env.getDOM();
      this.alwaysRevalidate = alwaysRevalidate;
    }
    execute(opcodes, handler) {
      if (true /* DEBUG */) {
        var hasErrored = true;
        try {
          (0, _validator.runInTrackingTransaction)(() => this._execute(opcodes, handler), '- While rendering:'); // using a boolean here to avoid breaking ergonomics of "pause on uncaught exceptions"
          // which would happen with a `catch` + `throw`

          hasErrored = false;
        } finally {
          if (hasErrored) {
            // eslint-disable-next-line no-console
            console.error(`\n\nError occurred:\n\n${(0, _validator.resetTracking)()}\n\n`);
          }
        }
      } else {
        this._execute(opcodes, handler);
      }
    }
    _execute(opcodes, handler) {
      var {
        frameStack
      } = this;
      this.try(opcodes, handler);
      while (true) {
        if (frameStack.isEmpty()) break;
        var opcode = this.frame.nextStatement();
        if (opcode === undefined) {
          frameStack.pop();
          continue;
        }
        opcode.evaluate(this);
      }
    }
    get frame() {
      return this.frameStack.current;
    }
    goto(index) {
      this.frame.goto(index);
    }
    try(ops, handler) {
      this.frameStack.push(new UpdatingVMFrame(ops, handler));
    }
    throw() {
      this.frame.handleException();
      this.frameStack.pop();
    }
  }
  _exports.UpdatingVM = UpdatingVMImpl;
  class ResumableVMStateImpl {
    constructor(state, resumeCallback) {
      this.state = state;
      this.resumeCallback = resumeCallback;
    }
    resume(runtime, builder) {
      return this.resumeCallback(runtime, this.state, builder);
    }
  }
  class BlockOpcode {
    constructor(state, runtime, bounds, children) {
      this.state = state;
      this.runtime = runtime;
      this.children = children;
      this.bounds = bounds;
    }
    parentElement() {
      return this.bounds.parentElement();
    }
    firstNode() {
      return this.bounds.firstNode();
    }
    lastNode() {
      return this.bounds.lastNode();
    }
    evaluate(vm) {
      vm.try(this.children, null);
    }
  }
  class TryOpcode extends BlockOpcode {
    constructor() {
      super(...arguments);
      this.type = 'try';
    }
    evaluate(vm) {
      vm.try(this.children, this);
    }
    handleException() {
      var {
        state,
        bounds,
        runtime
      } = this;
      (0, _destroyable2.destroyChildren)(this);
      var elementStack = NewElementBuilder.resume(runtime.env, bounds);
      var vm = state.resume(runtime, elementStack);
      var updating = [];
      var children = this.children = [];
      var result = vm.execute(vm => {
        vm.pushUpdating(updating);
        vm.updateWith(this);
        vm.pushUpdating(children);
      });
      (0, _destroyable2.associateDestroyableChild)(this, result.drop);
    }
  }
  class ListItemOpcode extends TryOpcode {
    constructor(state, runtime, bounds, key, memo, value) {
      super(state, runtime, bounds, []);
      this.key = key;
      this.memo = memo;
      this.value = value;
      this.retained = false;
      this.index = -1;
    }
    updateReferences(item) {
      this.retained = true;
      (0, _reference.updateRef)(this.value, item.value);
      (0, _reference.updateRef)(this.memo, item.memo);
    }
    shouldRemove() {
      return !this.retained;
    }
    reset() {
      this.retained = false;
    }
  }
  class ListBlockOpcode extends BlockOpcode {
    constructor(state, runtime, bounds, children, iterableRef) {
      super(state, runtime, bounds, children);
      this.iterableRef = iterableRef;
      this.type = 'list-block';
      this.opcodeMap = new Map();
      this.marker = null;
      this.lastIterator = (0, _reference.valueForRef)(iterableRef);
    }
    initializeChild(opcode) {
      opcode.index = this.children.length - 1;
      this.opcodeMap.set(opcode.key, opcode);
    }
    evaluate(vm) {
      var iterator = (0, _reference.valueForRef)(this.iterableRef);
      if (this.lastIterator !== iterator) {
        var {
          bounds
        } = this;
        var {
          dom
        } = vm;
        var marker = this.marker = dom.createComment('');
        dom.insertAfter(bounds.parentElement(), marker, bounds.lastNode());
        this.sync(iterator);
        this.parentElement().removeChild(marker);
        this.marker = null;
        this.lastIterator = iterator;
      } // Run now-updated updating opcodes

      super.evaluate(vm);
    }
    sync(iterator) {
      var {
        opcodeMap: itemMap,
        children
      } = this;
      var currentOpcodeIndex = 0;
      var seenIndex = 0;
      this.children = this.bounds.boundList = [];
      while (true) {
        var item = iterator.next();
        if (item === null) break;
        var opcode = children[currentOpcodeIndex];
        var {
          key
        } = item; // Items that have already been found and moved will already be retained,
        // we can continue until we find the next unretained item

        while (opcode !== undefined && opcode.retained === true) {
          opcode = children[++currentOpcodeIndex];
        }
        if (opcode !== undefined && opcode.key === key) {
          this.retainItem(opcode, item);
          currentOpcodeIndex++;
        } else if (itemMap.has(key)) {
          var itemOpcode = itemMap.get(key); // The item opcode was seen already, so we should move it.

          if (itemOpcode.index < seenIndex) {
            this.moveItem(itemOpcode, item, opcode);
          } else {
            // Update the seen index, we are going to be moving this item around
            // so any other items that come before it will likely need to move as
            // well.
            seenIndex = itemOpcode.index;
            var seenUnretained = false; // iterate through all of the opcodes between the current position and
            // the position of the item's opcode, and determine if they are all
            // retained.

            for (var i = currentOpcodeIndex + 1; i < seenIndex; i++) {
              if (children[i].retained === false) {
                seenUnretained = true;
                break;
              }
            } // If we have seen only retained opcodes between this and the matching
            // opcode, it means that all the opcodes in between have been moved
            // already, and we can safely retain this item's opcode.

            if (seenUnretained === false) {
              this.retainItem(itemOpcode, item);
              currentOpcodeIndex = seenIndex + 1;
            } else {
              this.moveItem(itemOpcode, item, opcode);
              currentOpcodeIndex++;
            }
          }
        } else {
          this.insertItem(item, opcode);
        }
      }
      for (var _i6 = 0; _i6 < children.length; _i6++) {
        var _opcode = children[_i6];
        if (_opcode.retained === false) {
          this.deleteItem(_opcode);
        } else {
          _opcode.reset();
        }
      }
    }
    retainItem(opcode, item) {
      var {
        children
      } = this;
      (0, _reference.updateRef)(opcode.memo, item.memo);
      (0, _reference.updateRef)(opcode.value, item.value);
      opcode.retained = true;
      opcode.index = children.length;
      children.push(opcode);
    }
    insertItem(item, before) {
      var {
        opcodeMap,
        bounds,
        state,
        runtime,
        children
      } = this;
      var {
        key
      } = item;
      var nextSibling = before === undefined ? this.marker : before.firstNode();
      var elementStack = NewElementBuilder.forInitialRender(runtime.env, {
        element: bounds.parentElement(),
        nextSibling
      });
      var vm = state.resume(runtime, elementStack);
      vm.execute(vm => {
        vm.pushUpdating();
        var opcode = vm.enterItem(item);
        opcode.index = children.length;
        children.push(opcode);
        opcodeMap.set(key, opcode);
        (0, _destroyable2.associateDestroyableChild)(this, opcode);
      });
    }
    moveItem(opcode, item, before) {
      var {
        children
      } = this;
      (0, _reference.updateRef)(opcode.memo, item.memo);
      (0, _reference.updateRef)(opcode.value, item.value);
      opcode.retained = true;
      var currentSibling, nextSibling;
      if (before === undefined) {
        move(opcode, this.marker);
      } else {
        currentSibling = opcode.lastNode().nextSibling;
        nextSibling = before.firstNode(); // Items are moved throughout the algorithm, so there are cases where the
        // the items already happen to be siblings (e.g. an item in between was
        // moved before this move happened). Check to see if they are siblings
        // first before doing the move.

        if (currentSibling !== nextSibling) {
          move(opcode, nextSibling);
        }
      }
      opcode.index = children.length;
      children.push(opcode);
    }
    deleteItem(opcode) {
      (0, _destroyable2.destroy)(opcode);
      clear(opcode);
      this.opcodeMap.delete(opcode.key);
    }
  }
  class UpdatingVMFrame {
    constructor(ops, exceptionHandler) {
      this.ops = ops;
      this.exceptionHandler = exceptionHandler;
      this.current = 0;
    }
    goto(index) {
      this.current = index;
    }
    nextStatement() {
      return this.ops[this.current++];
    }
    handleException() {
      if (this.exceptionHandler) {
        this.exceptionHandler.handleException();
      }
    }
  }
  class RenderResultImpl {
    constructor(env, updating, bounds, drop) {
      this.env = env;
      this.updating = updating;
      this.bounds = bounds;
      this.drop = drop;
      (0, _destroyable2.associateDestroyableChild)(this, drop);
      (0, _destroyable2.registerDestructor)(this, () => clear(this.bounds));
    }
    rerender(_temp) {
      var {
        alwaysRevalidate = false
      } = _temp === void 0 ? {
        alwaysRevalidate: false
      } : _temp;
      var {
        env,
        updating
      } = this;
      var vm = new UpdatingVMImpl(env, {
        alwaysRevalidate
      });
      vm.execute(updating, this);
    }
    parentElement() {
      return this.bounds.parentElement();
    }
    firstNode() {
      return this.bounds.firstNode();
    }
    lastNode() {
      return this.bounds.lastNode();
    }
    handleException() {
      throw 'this should never happen';
    }
  }
  class EvaluationStackImpl {
    // fp -> sp
    constructor(stack, registers) {
      if (stack === void 0) {
        stack = [];
      }
      this.stack = stack;
      this[REGISTERS] = registers;
    }
    static restore(snapshot) {
      return new this(snapshot.slice(), initializeRegistersWithSP(snapshot.length - 1));
    }
    push(value) {
      this.stack[++this[REGISTERS][_vm2.$sp]] = value;
    }
    dup(position) {
      if (position === void 0) {
        position = this[REGISTERS][_vm2.$sp];
      }
      this.stack[++this[REGISTERS][_vm2.$sp]] = this.stack[position];
    }
    copy(from, to) {
      this.stack[to] = this.stack[from];
    }
    pop(n) {
      if (n === void 0) {
        n = 1;
      }
      var top = this.stack[this[REGISTERS][_vm2.$sp]];
      this[REGISTERS][_vm2.$sp] -= n;
      return top;
    }
    peek(offset) {
      if (offset === void 0) {
        offset = 0;
      }
      return this.stack[this[REGISTERS][_vm2.$sp] - offset];
    }
    get(offset, base) {
      if (base === void 0) {
        base = this[REGISTERS][_vm2.$fp];
      }
      return this.stack[base + offset];
    }
    set(value, offset, base) {
      if (base === void 0) {
        base = this[REGISTERS][_vm2.$fp];
      }
      this.stack[base + offset] = value;
    }
    slice(start, end) {
      return this.stack.slice(start, end);
    }
    capture(items) {
      var end = this[REGISTERS][_vm2.$sp] + 1;
      var start = end - items;
      return this.stack.slice(start, end);
    }
    reset() {
      this.stack.length = 0;
    }
    toArray() {
      return this.stack.slice(this[REGISTERS][_vm2.$fp], this[REGISTERS][_vm2.$sp] + 1);
    }
  }
  var _a$2, _b;
  class Stacks {
    constructor() {
      this.scope = new _util.Stack();
      this.dynamicScope = new _util.Stack();
      this.updating = new _util.Stack();
      this.cache = new _util.Stack();
      this.list = new _util.Stack();
    }
  }
  class VM {
    /**
     * End of migrated.
     */
    constructor(runtime, _ref58, elementStack, context) {
      var {
        pc,
        scope,
        dynamicScope,
        stack
      } = _ref58;
      this.runtime = runtime;
      this.elementStack = elementStack;
      this.context = context;
      this[_a$2] = new Stacks();
      this[_b] = new _util.Stack();
      this.s0 = null;
      this.s1 = null;
      this.t0 = null;
      this.t1 = null;
      this.v0 = null;
      this.resume = initVM(this.context);
      if (true /* DEBUG */) {
        (0, _globalContext.assertGlobalContextWasSet)();
      }
      var evalStack = EvaluationStackImpl.restore(stack);
      evalStack[REGISTERS][_vm2.$pc] = pc;
      evalStack[REGISTERS][_vm2.$sp] = stack.length - 1;
      evalStack[REGISTERS][_vm2.$fp] = -1;
      this[HEAP] = this.program.heap;
      this[CONSTANTS] = this.program.constants;
      this.elementStack = elementStack;
      this[STACKS].scope.push(scope);
      this[STACKS].dynamicScope.push(dynamicScope);
      this[ARGS] = new VMArgumentsImpl();
      this[INNER_VM] = new LowLevelVM(evalStack, this[HEAP], runtime.program, {
        debugBefore: opcode => {
          return APPEND_OPCODES.debugBefore(this, opcode);
        },
        debugAfter: state => {
          APPEND_OPCODES.debugAfter(this, state);
        }
      }, evalStack[REGISTERS]);
      this.destructor = {};
      this[DESTROYABLE_STACK].push(this.destructor);
    }
    get stack() {
      return this[INNER_VM].stack;
    }
    /* Registers */

    get pc() {
      return this[INNER_VM].fetchRegister(_vm2.$pc);
    } // Fetch a value from a register onto the stack

    fetch(register) {
      var value = this.fetchValue(register);
      this.stack.push(value);
    } // Load a value from the stack into a register

    load(register) {
      var value = this.stack.pop();
      this.loadValue(register, value);
    }
    fetchValue(register) {
      if ((0, _vm2.isLowLevelRegister)(register)) {
        return this[INNER_VM].fetchRegister(register);
      }
      switch (register) {
        case _vm2.$s0:
          return this.s0;
        case _vm2.$s1:
          return this.s1;
        case _vm2.$t0:
          return this.t0;
        case _vm2.$t1:
          return this.t1;
        case _vm2.$v0:
          return this.v0;
      }
    } // Load a value into a register

    loadValue(register, value) {
      if ((0, _vm2.isLowLevelRegister)(register)) {
        this[INNER_VM].loadRegister(register, value);
      }
      switch (register) {
        case _vm2.$s0:
          this.s0 = value;
          break;
        case _vm2.$s1:
          this.s1 = value;
          break;
        case _vm2.$t0:
          this.t0 = value;
          break;
        case _vm2.$t1:
          this.t1 = value;
          break;
        case _vm2.$v0:
          this.v0 = value;
          break;
      }
    }
    /**
     * Migrated to Inner
     */
    // Start a new frame and save $ra and $fp on the stack

    pushFrame() {
      this[INNER_VM].pushFrame();
    } // Restore $ra, $sp and $fp

    popFrame() {
      this[INNER_VM].popFrame();
    } // Jump to an address in `program`

    goto(offset) {
      this[INNER_VM].goto(offset);
    } // Save $pc into $ra, then jump to a new address in `program` (jal in MIPS)

    call(handle) {
      this[INNER_VM].call(handle);
    } // Put a specific `program` address in $ra

    returnTo(offset) {
      this[INNER_VM].returnTo(offset);
    } // Return to the `program` address stored in $ra

    return() {
      this[INNER_VM].return();
    }
    static initial(runtime, context, _ref59) {
      var {
        handle,
        self,
        dynamicScope,
        treeBuilder,
        numSymbols,
        owner
      } = _ref59;
      var scope = PartialScopeImpl.root(self, numSymbols, owner);
      var state = vmState(runtime.program.heap.getaddr(handle), scope, dynamicScope);
      var vm = initVM(context)(runtime, state, treeBuilder);
      vm.pushUpdating();
      return vm;
    }
    static empty(runtime, _ref60, context) {
      var {
        handle,
        treeBuilder,
        dynamicScope,
        owner
      } = _ref60;
      var vm = initVM(context)(runtime, vmState(runtime.program.heap.getaddr(handle), PartialScopeImpl.root(_reference.UNDEFINED_REFERENCE, 0, owner), dynamicScope), treeBuilder);
      vm.pushUpdating();
      return vm;
    }
    compile(block) {
      var handle = (0, _util.unwrapHandle)(block.compile(this.context));
      return handle;
    }
    get program() {
      return this.runtime.program;
    }
    get env() {
      return this.runtime.env;
    }
    captureState(args, pc) {
      if (pc === void 0) {
        pc = this[INNER_VM].fetchRegister(_vm2.$pc);
      }
      return {
        pc,
        scope: this.scope(),
        dynamicScope: this.dynamicScope(),
        stack: this.stack.capture(args)
      };
    }
    capture(args, pc) {
      if (pc === void 0) {
        pc = this[INNER_VM].fetchRegister(_vm2.$pc);
      }
      return new ResumableVMStateImpl(this.captureState(args, pc), this.resume);
    }
    beginCacheGroup(name) {
      var opcodes = this.updating();
      var guard = new JumpIfNotModifiedOpcode();
      opcodes.push(guard);
      opcodes.push(new BeginTrackFrameOpcode(name));
      this[STACKS].cache.push(guard);
      (0, _validator.beginTrackFrame)(name);
    }
    commitCacheGroup() {
      var opcodes = this.updating();
      var guard = this[STACKS].cache.pop();
      var tag = (0, _validator.endTrackFrame)();
      opcodes.push(new EndTrackFrameOpcode(guard));
      guard.finalize(tag, opcodes.length);
    }
    enter(args) {
      var updating = [];
      var state = this.capture(args);
      var block = this.elements().pushUpdatableBlock();
      var tryOpcode = new TryOpcode(state, this.runtime, block, updating);
      this.didEnter(tryOpcode);
    }
    enterItem(_ref61) {
      var {
        key,
        value,
        memo
      } = _ref61;
      var {
        stack
      } = this;
      var valueRef = (0, _reference.createIteratorItemRef)(value);
      var memoRef = (0, _reference.createIteratorItemRef)(memo);
      stack.push(valueRef);
      stack.push(memoRef);
      var state = this.capture(2);
      var block = this.elements().pushUpdatableBlock();
      var opcode = new ListItemOpcode(state, this.runtime, block, key, memoRef, valueRef);
      this.didEnter(opcode);
      return opcode;
    }
    registerItem(opcode) {
      this.listBlock().initializeChild(opcode);
    }
    enterList(iterableRef, offset) {
      var updating = [];
      var addr = this[INNER_VM].target(offset);
      var state = this.capture(0, addr);
      var list = this.elements().pushBlockList(updating);
      var opcode = new ListBlockOpcode(state, this.runtime, list, updating, iterableRef);
      this[STACKS].list.push(opcode);
      this.didEnter(opcode);
    }
    didEnter(opcode) {
      this.associateDestroyable(opcode);
      this[DESTROYABLE_STACK].push(opcode);
      this.updateWith(opcode);
      this.pushUpdating(opcode.children);
    }
    exit() {
      this[DESTROYABLE_STACK].pop();
      this.elements().popBlock();
      this.popUpdating();
    }
    exitList() {
      this.exit();
      this[STACKS].list.pop();
    }
    pushUpdating(list) {
      if (list === void 0) {
        list = [];
      }
      this[STACKS].updating.push(list);
    }
    popUpdating() {
      return this[STACKS].updating.pop();
    }
    updateWith(opcode) {
      this.updating().push(opcode);
    }
    listBlock() {
      return this[STACKS].list.current;
    }
    associateDestroyable(child) {
      var parent = this[DESTROYABLE_STACK].current;
      (0, _destroyable2.associateDestroyableChild)(parent, child);
    }
    tryUpdating() {
      return this[STACKS].updating.current;
    }
    updating() {
      return this[STACKS].updating.current;
    }
    elements() {
      return this.elementStack;
    }
    scope() {
      return this[STACKS].scope.current;
    }
    dynamicScope() {
      return this[STACKS].dynamicScope.current;
    }
    pushChildScope() {
      this[STACKS].scope.push(this.scope().child());
    }
    pushDynamicScope() {
      var child = this.dynamicScope().child();
      this[STACKS].dynamicScope.push(child);
      return child;
    }
    pushRootScope(size, owner) {
      var scope = PartialScopeImpl.sized(size, owner);
      this[STACKS].scope.push(scope);
      return scope;
    }
    pushScope(scope) {
      this[STACKS].scope.push(scope);
    }
    popScope() {
      this[STACKS].scope.pop();
    }
    popDynamicScope() {
      this[STACKS].dynamicScope.pop();
    } /// SCOPE HELPERS

    getOwner() {
      return this.scope().owner;
    }
    getSelf() {
      return this.scope().getSelf();
    }
    referenceForSymbol(symbol$$1) {
      return this.scope().getSymbol(symbol$$1);
    } /// EXECUTION

    execute(initialize) {
      if (true /* DEBUG */) {
        var hasErrored = true;
        try {
          var value = this._execute(initialize); // using a boolean here to avoid breaking ergonomics of "pause on uncaught exceptions"
          // which would happen with a `catch` + `throw`

          hasErrored = false;
          return value;
        } finally {
          if (hasErrored) {
            // If any existing blocks are open, due to an error or something like
            // that, we need to close them all and clean things up properly.
            var elements = this.elements();
            while (elements.hasBlocks) {
              elements.popBlock();
            } // eslint-disable-next-line no-console

            console.error(`\n\nError occurred:\n\n${(0, _validator.resetTracking)()}\n\n`);
          }
        }
      } else {
        return this._execute(initialize);
      }
    }
    _execute(initialize) {
      if (initialize) initialize(this);
      var result;
      while (true) {
        result = this.next();
        if (result.done) break;
      }
      return result.value;
    }
    next() {
      var {
        env,
        elementStack
      } = this;
      var opcode = this[INNER_VM].nextStatement();
      var result;
      if (opcode !== null) {
        this[INNER_VM].evaluateOuter(opcode, this);
        result = {
          done: false,
          value: null
        };
      } else {
        // Unload the stack
        this.stack.reset();
        result = {
          done: true,
          value: new RenderResultImpl(env, this.popUpdating(), elementStack.popBlock(), this.destructor)
        };
      }
      return result;
    }
    bindDynamicScope(names) {
      var scope = this.dynamicScope();
      for (var i = names.length - 1; i >= 0; i--) {
        var name = names[i];
        scope.set(name, this.stack.pop());
      }
    }
  }
  _exports.LowLevelVM = VM;
  _a$2 = STACKS, _b = DESTROYABLE_STACK;
  function vmState(pc, scope, dynamicScope) {
    return {
      pc,
      scope,
      dynamicScope,
      stack: []
    };
  }
  function initVM(context) {
    return (runtime, state, builder) => new VM(runtime, state, builder, context);
  }
  class TemplateIteratorImpl {
    constructor(vm) {
      this.vm = vm;
    }
    next() {
      return this.vm.next();
    }
    sync() {
      if (true /* DEBUG */) {
        return (0, _validator.runInTrackingTransaction)(() => this.vm.execute(), '- While rendering:');
      } else {
        return this.vm.execute();
      }
    }
  }
  function renderSync(env, iterator) {
    var result;
    inTransaction(env, () => result = iterator.sync());
    return result;
  }
  function renderMain(runtime, context, owner, self, treeBuilder, layout, dynamicScope) {
    if (dynamicScope === void 0) {
      dynamicScope = new DynamicScopeImpl();
    }
    var handle = (0, _util.unwrapHandle)(layout.compile(context));
    var numSymbols = layout.symbolTable.symbols.length;
    var vm = VM.initial(runtime, context, {
      self,
      dynamicScope,
      treeBuilder,
      handle,
      numSymbols,
      owner
    });
    return new TemplateIteratorImpl(vm);
  }
  function renderInvocation(vm, context, owner, definition, args) {
    // Get a list of tuples of argument names and references, like
    // [['title', reference], ['name', reference]]
    var argList = Object.keys(args).map(key => [key, args[key]]);
    var blockNames = ['main', 'else', 'attrs']; // Prefix argument names with `@` symbol

    var argNames = argList.map(_ref62 => {
      var [name] = _ref62;
      return `@${name}`;
    });
    var reified = vm[CONSTANTS].component(definition, owner);
    vm.pushFrame(); // Push blocks on to the stack, three stack values per block

    for (var i = 0; i < 3 * blockNames.length; i++) {
      vm.stack.push(null);
    }
    vm.stack.push(null); // For each argument, push its backing reference on to the stack

    argList.forEach(_ref63 => {
      var [, reference] = _ref63;
      vm.stack.push(reference);
    }); // Configure VM based on blocks and args just pushed on to the stack.

    vm[ARGS].setup(vm.stack, argNames, blockNames, 0, true);
    var compilable = reified.compilable;
    var layoutHandle = (0, _util.unwrapHandle)(compilable.compile(context));
    var invocation = {
      handle: layoutHandle,
      symbolTable: compilable.symbolTable
    }; // Needed for the Op.Main opcode: arguments, component invocation object, and
    // component definition.

    vm.stack.push(vm[ARGS]);
    vm.stack.push(invocation);
    vm.stack.push(reified);
    return new TemplateIteratorImpl(vm);
  }
  function renderComponent(runtime, treeBuilder, context, owner, definition, args, dynamicScope) {
    if (args === void 0) {
      args = {};
    }
    if (dynamicScope === void 0) {
      dynamicScope = new DynamicScopeImpl();
    }
    var vm = VM.empty(runtime, {
      treeBuilder,
      handle: context.stdlib.main,
      dynamicScope,
      owner
    }, context);
    return renderInvocation(vm, context, owner, definition, recordToReference(args));
  }
  function recordToReference(record) {
    var root = (0, _reference.createConstRef)(record, 'args');
    return Object.keys(record).reduce((acc, key) => {
      acc[key] = (0, _reference.childRefFor)(root, key);
      return acc;
    }, {});
  }
  var SERIALIZATION_FIRST_NODE_STRING = '%+b:0%';
  _exports.SERIALIZATION_FIRST_NODE_STRING = SERIALIZATION_FIRST_NODE_STRING;
  function isSerializationFirstNode(node) {
    return node.nodeValue === SERIALIZATION_FIRST_NODE_STRING;
  }
  class RehydratingCursor extends CursorImpl {
    constructor(element, nextSibling, startingBlockDepth) {
      super(element, nextSibling);
      this.startingBlockDepth = startingBlockDepth;
      this.candidate = null;
      this.injectedOmittedNode = false;
      this.openBlockDepth = startingBlockDepth - 1;
    }
  }
  class RehydrateBuilder extends NewElementBuilder {
    constructor(env, parentNode, nextSibling) {
      super(env, parentNode, nextSibling);
      this.unmatchedAttributes = null;
      this.blockDepth = 0;
      if (nextSibling) throw new Error('Rehydration with nextSibling not supported');
      var node = this.currentCursor.element.firstChild;
      while (node !== null) {
        if (isOpenBlock(node)) {
          break;
        }
        node = node.nextSibling;
      }
      this.candidate = node;
      var startingBlockOffset = getBlockDepth(node);
      if (startingBlockOffset !== 0) {
        // We are rehydrating from a partial tree and not the root component
        // We need to add an extra block before the first block to rehydrate correctly
        // The extra block is needed since the renderComponent API creates a synthetic component invocation which generates the extra block
        var newBlockDepth = startingBlockOffset - 1;
        var newCandidate = this.dom.createComment(`%+b:${newBlockDepth}%`);
        node.parentNode.insertBefore(newCandidate, this.candidate);
        var closingNode = node.nextSibling;
        while (closingNode !== null) {
          if (isCloseBlock(closingNode) && getBlockDepth(closingNode) === startingBlockOffset) {
            break;
          }
          closingNode = closingNode.nextSibling;
        }
        var newClosingBlock = this.dom.createComment(`%-b:${newBlockDepth}%`);
        node.parentNode.insertBefore(newClosingBlock, closingNode.nextSibling);
        this.candidate = newCandidate;
        this.startingBlockOffset = newBlockDepth;
      } else {
        this.startingBlockOffset = 0;
      }
    }
    get currentCursor() {
      return this[CURSOR_STACK].current;
    }
    get candidate() {
      if (this.currentCursor) {
        return this.currentCursor.candidate;
      }
      return null;
    }
    set candidate(node) {
      var currentCursor = this.currentCursor;
      currentCursor.candidate = node;
    }
    disableRehydration(nextSibling) {
      var currentCursor = this.currentCursor; // rehydration will be disabled until we either:
      // * hit popElement (and return to using the parent elements cursor)
      // * hit closeBlock and the next sibling is a close block comment
      //   matching the expected openBlockDepth

      currentCursor.candidate = null;
      currentCursor.nextSibling = nextSibling;
    }
    enableRehydration(candidate) {
      var currentCursor = this.currentCursor;
      currentCursor.candidate = candidate;
      currentCursor.nextSibling = null;
    }
    pushElement(element, nextSibling) {
      if (nextSibling === void 0) {
        nextSibling = null;
      }
      var cursor = new RehydratingCursor(element, nextSibling, this.blockDepth || 0);
      /**
       * <div>   <---------------  currentCursor.element
       *   <!--%+b:1%--> <-------  would have been removed during openBlock
       *   <div> <---------------  currentCursor.candidate -> cursor.element
       *     <!--%+b:2%--> <-----  currentCursor.candidate.firstChild -> cursor.candidate
       *     Foo
       *     <!--%-b:2%-->
       *   </div>
       *   <!--%-b:1%-->  <------  becomes currentCursor.candidate
       */

      if (this.candidate !== null) {
        cursor.candidate = element.firstChild;
        this.candidate = element.nextSibling;
      }
      this[CURSOR_STACK].push(cursor);
    } // clears until the end of the current container
    // either the current open block or higher

    clearMismatch(candidate) {
      var current = candidate;
      var currentCursor = this.currentCursor;
      if (currentCursor !== null) {
        var openBlockDepth = currentCursor.openBlockDepth;
        if (openBlockDepth >= currentCursor.startingBlockDepth) {
          while (current) {
            if (isCloseBlock(current)) {
              var closeBlockDepth = getBlockDepthWithOffset(current, this.startingBlockOffset);
              if (openBlockDepth >= closeBlockDepth) {
                break;
              }
            }
            current = this.remove(current);
          }
        } else {
          while (current !== null) {
            current = this.remove(current);
          }
        } // current cursor parentNode should be openCandidate if element
        // or openCandidate.parentNode if comment

        this.disableRehydration(current);
      }
    }
    __openBlock() {
      var {
        currentCursor
      } = this;
      if (currentCursor === null) return;
      var blockDepth = this.blockDepth;
      this.blockDepth++;
      var {
        candidate
      } = currentCursor;
      if (candidate === null) return;
      var {
        tagName
      } = currentCursor.element;
      if (isOpenBlock(candidate) && getBlockDepthWithOffset(candidate, this.startingBlockOffset) === blockDepth) {
        this.candidate = this.remove(candidate);
        currentCursor.openBlockDepth = blockDepth;
      } else if (tagName !== 'TITLE' && tagName !== 'SCRIPT' && tagName !== 'STYLE') {
        this.clearMismatch(candidate);
      }
    }
    __closeBlock() {
      var {
        currentCursor
      } = this;
      if (currentCursor === null) return; // openBlock is the last rehydrated open block

      var openBlockDepth = currentCursor.openBlockDepth; // this currently is the expected next open block depth

      this.blockDepth--;
      var {
        candidate
      } = currentCursor;
      var isRehydrating = false;
      if (candidate !== null) {
        isRehydrating = true; //assert(
        //  openBlockDepth === this.blockDepth,
        //  'when rehydrating, openBlockDepth should match this.blockDepth here'
        //);

        if (isCloseBlock(candidate) && getBlockDepthWithOffset(candidate, this.startingBlockOffset) === openBlockDepth) {
          var nextSibling = this.remove(candidate);
          this.candidate = nextSibling;
          currentCursor.openBlockDepth--;
        } else {
          // close the block and clear mismatch in parent container
          // we will be either at the end of the element
          // or at the end of our containing block
          this.clearMismatch(candidate);
          isRehydrating = false;
        }
      }
      if (isRehydrating === false) {
        // check if nextSibling matches our expected close block
        // if so, we remove the close block comment and
        // restore rehydration after clearMismatch disabled
        var _nextSibling = currentCursor.nextSibling;
        if (_nextSibling !== null && isCloseBlock(_nextSibling) && getBlockDepthWithOffset(_nextSibling, this.startingBlockOffset) === this.blockDepth) {
          // restore rehydration state
          var _candidate2 = this.remove(_nextSibling);
          this.enableRehydration(_candidate2);
          currentCursor.openBlockDepth--;
        }
      }
    }
    __appendNode(node) {
      var {
        candidate
      } = this; // This code path is only used when inserting precisely one node. It needs more
      // comparison logic, but we can probably lean on the cases where this code path
      // is actually used.

      if (candidate) {
        return candidate;
      } else {
        return super.__appendNode(node);
      }
    }
    __appendHTML(html) {
      var candidateBounds = this.markerBounds();
      if (candidateBounds) {
        var first = candidateBounds.firstNode();
        var last = candidateBounds.lastNode();
        var newBounds = new ConcreteBounds(this.element, first.nextSibling, last.previousSibling);
        var possibleEmptyMarker = this.remove(first);
        this.remove(last);
        if (possibleEmptyMarker !== null && isEmpty$1(possibleEmptyMarker)) {
          this.candidate = this.remove(possibleEmptyMarker);
          if (this.candidate !== null) {
            this.clearMismatch(this.candidate);
          }
        }
        return newBounds;
      } else {
        return super.__appendHTML(html);
      }
    }
    remove(node) {
      var element = node.parentNode;
      var next = node.nextSibling;
      element.removeChild(node);
      return next;
    }
    markerBounds() {
      var _candidate = this.candidate;
      if (_candidate && isMarker(_candidate)) {
        var first = _candidate;
        var last = first.nextSibling;
        while (last && !isMarker(last)) {
          last = last.nextSibling;
        }
        return new ConcreteBounds(this.element, first, last);
      } else {
        return null;
      }
    }
    __appendText(string) {
      var {
        candidate
      } = this;
      if (candidate) {
        if (isTextNode(candidate)) {
          if (candidate.nodeValue !== string) {
            candidate.nodeValue = string;
          }
          this.candidate = candidate.nextSibling;
          return candidate;
        } else if (isSeparator(candidate)) {
          this.candidate = this.remove(candidate);
          return this.__appendText(string);
        } else if (isEmpty$1(candidate) && string === '') {
          this.candidate = this.remove(candidate);
          return this.__appendText(string);
        } else {
          this.clearMismatch(candidate);
          return super.__appendText(string);
        }
      } else {
        return super.__appendText(string);
      }
    }
    __appendComment(string) {
      var _candidate = this.candidate;
      if (_candidate && isComment(_candidate)) {
        if (_candidate.nodeValue !== string) {
          _candidate.nodeValue = string;
        }
        this.candidate = _candidate.nextSibling;
        return _candidate;
      } else if (_candidate) {
        this.clearMismatch(_candidate);
      }
      return super.__appendComment(string);
    }
    __openElement(tag) {
      var _candidate = this.candidate;
      if (_candidate && isElement(_candidate) && isSameNodeType(_candidate, tag)) {
        this.unmatchedAttributes = [].slice.call(_candidate.attributes);
        return _candidate;
      } else if (_candidate) {
        if (isElement(_candidate) && _candidate.tagName === 'TBODY') {
          this.pushElement(_candidate, null);
          this.currentCursor.injectedOmittedNode = true;
          return this.__openElement(tag);
        }
        this.clearMismatch(_candidate);
      }
      return super.__openElement(tag);
    }
    __setAttribute(name, value, namespace) {
      var unmatched = this.unmatchedAttributes;
      if (unmatched) {
        var attr = findByName(unmatched, name);
        if (attr) {
          if (attr.value !== value) {
            attr.value = value;
          }
          unmatched.splice(unmatched.indexOf(attr), 1);
          return;
        }
      }
      return super.__setAttribute(name, value, namespace);
    }
    __setProperty(name, value) {
      var unmatched = this.unmatchedAttributes;
      if (unmatched) {
        var attr = findByName(unmatched, name);
        if (attr) {
          if (attr.value !== value) {
            attr.value = value;
          }
          unmatched.splice(unmatched.indexOf(attr), 1);
          return;
        }
      }
      return super.__setProperty(name, value);
    }
    __flushElement(parent, constructing) {
      var {
        unmatchedAttributes: unmatched
      } = this;
      if (unmatched) {
        for (var i = 0; i < unmatched.length; i++) {
          this.constructing.removeAttribute(unmatched[i].name);
        }
        this.unmatchedAttributes = null;
      } else {
        super.__flushElement(parent, constructing);
      }
    }
    willCloseElement() {
      var {
        candidate,
        currentCursor
      } = this;
      if (candidate !== null) {
        this.clearMismatch(candidate);
      }
      if (currentCursor && currentCursor.injectedOmittedNode) {
        this.popElement();
      }
      super.willCloseElement();
    }
    getMarker(element, guid) {
      var marker = element.querySelector(`script[glmr="${guid}"]`);
      if (marker) {
        return marker;
      }
      return null;
    }
    __pushRemoteElement(element, cursorId, insertBefore) {
      var marker = this.getMarker(element, cursorId);
      if (insertBefore === undefined) {
        while (element.firstChild !== null && element.firstChild !== marker) {
          this.remove(element.firstChild);
        }
        insertBefore = null;
      }
      var cursor = new RehydratingCursor(element, null, this.blockDepth);
      this[CURSOR_STACK].push(cursor);
      if (marker === null) {
        this.disableRehydration(insertBefore);
      } else {
        this.candidate = this.remove(marker);
      }
      var block = new RemoteLiveBlock(element);
      return this.pushLiveBlock(block, true);
    }
    didAppendBounds(bounds) {
      super.didAppendBounds(bounds);
      if (this.candidate) {
        var last = bounds.lastNode();
        this.candidate = last && last.nextSibling;
      }
      return bounds;
    }
  }
  _exports.RehydrateBuilder = RehydrateBuilder;
  function isTextNode(node) {
    return node.nodeType === 3;
  }
  function isComment(node) {
    return node.nodeType === 8;
  }
  function isOpenBlock(node) {
    return node.nodeType === 8
    /* COMMENT_NODE */ && node.nodeValue.lastIndexOf('%+b:', 0) === 0;
  }
  function isCloseBlock(node) {
    return node.nodeType === 8
    /* COMMENT_NODE */ && node.nodeValue.lastIndexOf('%-b:', 0) === 0;
  }
  function getBlockDepth(node) {
    return parseInt(node.nodeValue.slice(4), 10);
  }
  function getBlockDepthWithOffset(node, offset) {
    return getBlockDepth(node) - offset;
  }
  function isElement(node) {
    return node.nodeType === 1;
  }
  function isMarker(node) {
    return node.nodeType === 8 && node.nodeValue === '%glmr%';
  }
  function isSeparator(node) {
    return node.nodeType === 8 && node.nodeValue === '%|%';
  }
  function isEmpty$1(node) {
    return node.nodeType === 8 && node.nodeValue === '% %';
  }
  function isSameNodeType(candidate, tag) {
    if (candidate.namespaceURI === "http://www.w3.org/2000/svg"
    /* SVG */) {
      return candidate.tagName === tag;
    }
    return candidate.tagName === tag.toUpperCase();
  }
  function findByName(array, name) {
    for (var i = 0; i < array.length; i++) {
      var attr = array[i];
      if (attr.name === name) return attr;
    }
    return undefined;
  }
  function rehydrationBuilder(env, cursor) {
    return RehydrateBuilder.forInitialRender(env, cursor);
  }
  var ARGS_CACHES = true /* DEBUG */ ? new WeakMap() : undefined;
  function getArgs(proxy) {
    return (0, _validator.getValue)(true /* DEBUG */ ? ARGS_CACHES.get(proxy) : proxy.argsCache);
  }
  class SimpleArgsProxy {
    constructor(context, computeArgs) {
      if (computeArgs === void 0) {
        computeArgs = () => EMPTY_ARGS;
      }
      var argsCache = (0, _validator.createCache)(() => computeArgs(context));
      if (true /* DEBUG */) {
        ARGS_CACHES.set(this, argsCache);
        Object.freeze(this);
      } else {
        this.argsCache = argsCache;
      }
    }
    get named() {
      return getArgs(this).named || EMPTY_NAMED;
    }
    get positional() {
      return getArgs(this).positional || EMPTY_POSITIONAL;
    }
  } ////////////

  function invokeHelper(context, definition, computeArgs) {
    if (true /* DEBUG */ && (typeof context !== 'object' || context === null)) {
      throw new Error(`Expected a context object to be passed as the first parameter to invokeHelper, got ${context}`);
    }
    var owner = (0, _owner2.getOwner)(context);
    var internalManager = (0, _manager5.getInternalHelperManager)(definition); // TODO: figure out why assert isn't using the TS assert thing

    if (true /* DEBUG */ && !internalManager) {
      throw new Error(`Expected a helper definition to be passed as the second parameter to invokeHelper, but no helper manager was found. The definition value that was passed was \`${(0, _util.debugToString)(definition)}\`. Did you use setHelperManager to associate a helper manager with this value?`);
    }
    if (true /* DEBUG */ && typeof internalManager === 'function') {
      throw new Error('Found a helper manager, but it was an internal built-in helper manager. `invokeHelper` does not support internal helpers yet.');
    }
    var manager = internalManager.getDelegateFor(owner);
    var args = new SimpleArgsProxy(context, computeArgs);
    var bucket = manager.createHelper(definition, args);
    var cache;
    if ((0, _manager5.hasValue)(manager)) {
      cache = (0, _validator.createCache)(() => {
        if (true /* DEBUG */ && ((0, _destroyable2.isDestroying)(cache) || (0, _destroyable2.isDestroyed)(cache))) {
          throw new Error(`You attempted to get the value of a helper after the helper was destroyed, which is not allowed`);
        }
        return manager.getValue(bucket);
      });
      (0, _destroyable2.associateDestroyableChild)(context, cache);
    } else {
      throw new Error('TODO: unreachable, to be implemented with hasScheduledEffect');
    }
    if ((0, _manager5.hasDestroyable)(manager)) {
      var destroyable = manager.getDestroyable(bucket);
      (0, _destroyable2.associateDestroyableChild)(cache, destroyable);
    }
    return cache;
  }
  function internalHelper(helper) {
    return (0, _manager5.setInternalHelperManager)(helper, {});
  }
  var context = (0, _util.buildUntouchableThis)('`fn` helper');
  /**
    The `fn` helper allows you to ensure a function that you are passing off
    to another component, helper, or modifier has access to arguments that are
    available in the template.
  
    For example, if you have an `each` helper looping over a number of items, you
    may need to pass a function that expects to receive the item as an argument
    to a component invoked within the loop. Here's how you could use the `fn`
    helper to pass both the function and its arguments together:
  
      ```app/templates/components/items-listing.hbs
    {{#each @items as |item|}}
      <DisplayItem @item=item @select={{fn this.handleSelected item}} />
    {{/each}}
    ```
  
    ```app/components/items-list.js
    import Component from '@glimmer/component';
    import { action } from '@ember/object';
  
    export default class ItemsList extends Component {
      handleSelected = (item) => {
        // ...snip...
      }
    }
    ```
  
    In this case the `display-item` component will receive a normal function
    that it can invoke. When it invokes the function, the `handleSelected`
    function will receive the `item` and any arguments passed, thanks to the
    `fn` helper.
  
    Let's take look at what that means in a couple circumstances:
  
    - When invoked as `this.args.select()` the `handleSelected` function will
      receive the `item` from the loop as its first and only argument.
    - When invoked as `this.args.select('foo')` the `handleSelected` function
      will receive the `item` from the loop as its first argument and the
      string `'foo'` as its second argument.
  
    In the example above, we used an arrow function to ensure that
    `handleSelected` is properly bound to the `items-list`, but let's explore what
    happens if we left out the arrow function:
  
    ```app/components/items-list.js
    import Component from '@glimmer/component';
  
    export default class ItemsList extends Component {
      handleSelected(item) {
        // ...snip...
      }
    }
    ```
  
    In this example, when `handleSelected` is invoked inside the `display-item`
    component, it will **not** have access to the component instance. In other
    words, it will have no `this` context, so please make sure your functions
    are bound (via an arrow function or other means) before passing into `fn`!
  
    See also [partial application](https://en.wikipedia.org/wiki/Partial_application).
  
    @method fn
    @public
  */

  var fn = internalHelper(_ref64 => {
    var {
      positional
    } = _ref64;
    var callbackRef = positional[0];
    if (true /* DEBUG */) assertCallbackIsFn(callbackRef);
    return (0, _reference.createComputeRef)(() => {
      return function () {
        var [fn, ...args] = (0, _runtime.reifyPositional)(positional);
        if (true /* DEBUG */) assertCallbackIsFn(callbackRef);
        for (var _len = arguments.length, invocationArgs = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {
          invocationArgs[_key2] = arguments[_key2];
        }
        if ((0, _reference.isInvokableRef)(callbackRef)) {
          var value = args.length > 0 ? args[0] : invocationArgs[0];
          return (0, _reference.updateRef)(callbackRef, value);
        } else {
          return fn.call(context, ...args, ...invocationArgs);
        }
      };
    }, null, 'fn');
  });
  _exports.fn = fn;
  function assertCallbackIsFn(callbackRef) {
    if (!(callbackRef && ((0, _reference.isInvokableRef)(callbackRef) || typeof (0, _reference.valueForRef)(callbackRef) === 'function'))) {
      throw new Error(`You must pass a function as the \`fn\` helper's first argument, you passed ${callbackRef ? (0, _reference.valueForRef)(callbackRef) : callbackRef}. While rendering:\n\n${callbackRef === null || callbackRef === void 0 ? void 0 : callbackRef.debugLabel}`);
    }
  }
  var wrapHashProxy;
  if (true /* DEBUG */) {
    wrapHashProxy = hash => {
      return new Proxy(hash, {
        set(target, key, value) {
          (true && !(false) && (0, _globalContext.deprecate)(`You set the '${String(key)}' property on a {{hash}} object. Setting properties on objects generated by {{hash}} is deprecated. Please update to use an object created with a tracked property or getter, or with a custom helper.`, false, {
            id: 'setting-on-hash'
          }));
          target[key] = value;
          return true;
        }
      });
    };
  }
  /**
     Use the `{{hash}}` helper to create a hash to pass as an option to your
     components. This is specially useful for contextual components where you can
     just yield a hash:
  
     ```handlebars
     {{yield (hash
        name='Sarah'
        title=office
     )}}
     ```
  
     Would result in an object such as:
  
     ```js
     { name: 'Sarah', title: this.get('office') }
     ```
  
     Where the `title` is bound to updates of the `office` property.
  
     Note that the hash is an empty object with no prototype chain, therefore
     common methods like `toString` are not available in the resulting hash.
     If you need to use such a method, you can use the `call` or `apply`
     approach:
  
     ```js
     function toString(obj) {
       return Object.prototype.toString.apply(obj);
     }
     ```
  
     @method hash
     @param {Object} options
     @return {Object} Hash
     @public
   */

  var hash = internalHelper(_ref65 => {
    var {
      named
    } = _ref65;
    var ref = (0, _reference.createComputeRef)(() => {
      var hash = (0, _runtime.reifyNamed)(named);
      if (true /* DEBUG */ && _util.HAS_NATIVE_PROXY) {
        hash = wrapHashProxy(hash);
      }
      return hash;
    }, null, 'hash'); // Setup the children so that templates can bypass getting the value of
    // the reference and treat children lazily

    var children = new Map();
    for (var name in named) {
      children.set(name, named[name]);
    }
    ref.children = children;
    return ref;
  });

  /**
     Use the `{{array}}` helper to create an array to pass as an option to your
     components.
  
     ```handlebars
     <MyComponent @people={{array
       'Tom Dale'
       'Yehuda Katz'
       this.myOtherPerson}}
     />
     ```
      or
     ```handlebars
     {{my-component people=(array
       'Tom Dale'
       'Yehuda Katz'
       this.myOtherPerson)
     }}
     ```
  
     Would result in an object such as:
  
     ```js
     ['Tom Dale', 'Yehuda Katz', this.get('myOtherPerson')]
     ```
  
     Where the 3rd item in the array is bound to updates of the `myOtherPerson` property.
  
     @method array
     @param {Array} options
     @return {Array} Array
     @public
   */
  _exports.hash = hash;
  var array = internalHelper(_ref66 => {
    var {
      positional
    } = _ref66;
    return (0, _reference.createComputeRef)(() => (0, _runtime.reifyPositional)(positional), null, 'array');
  });

  /**
    Dynamically look up a property on an object. The second argument to `{{get}}`
    should have a string value, although it can be bound.
  
    For example, these two usages are equivalent:
  
    ```app/components/developer-detail.js
    import Component from '@glimmer/component';
    import { tracked } from '@glimmer/tracking';
  
    export default class extends Component {
      @tracked developer = {
        name: "Sandi Metz",
        language: "Ruby"
      }
    }
    ```
  
    ```handlebars
    {{this.developer.name}}
    {{get this.developer "name"}}
    ```
  
    If there were several facts about a person, the `{{get}}` helper can dynamically
    pick one:
  
    ```app/templates/application.hbs
    <DeveloperDetail @factName="language" />
    ```
  
    ```handlebars
    {{get this.developer @factName}}
    ```
  
    For a more complex example, this template would allow the user to switch
    between showing the user's height and weight with a click:
  
    ```app/components/developer-detail.js
    import Component from '@glimmer/component';
    import { tracked } from '@glimmer/tracking';
  
    export default class extends Component {
      @tracked developer = {
        name: "Sandi Metz",
        language: "Ruby"
      }
  
      @tracked currentFact = 'name'
  
      showFact = (fact) => {
        this.currentFact = fact;
      }
    }
    ```
  
    ```app/components/developer-detail.js
    {{get this.developer this.currentFact}}
  
    <button {{on 'click' (fn this.showFact "name")}}>Show name</button>
    <button {{on 'click' (fn this.showFact "language")}}>Show language</button>
    ```
  
    The `{{get}}` helper can also respect mutable values itself. For example:
  
    ```app/components/developer-detail.js
    <Input @value={{mut (get this.person this.currentFact)}} />
  
    <button {{on 'click' (fn this.showFact "name")}}>Show name</button>
    <button {{on 'click' (fn this.showFact "language")}}>Show language</button>
    ```
  
    Would allow the user to swap what fact is being displayed, and also edit
    that fact via a two-way mutable binding.
  
    @public
    @method get
   */
  _exports.array = array;
  var get = internalHelper(_ref67 => {
    var {
      positional
    } = _ref67;
    var _a, _b;
    var sourceRef = (_a = positional[0]) !== null && _a !== void 0 ? _a : _reference.UNDEFINED_REFERENCE;
    var pathRef = (_b = positional[1]) !== null && _b !== void 0 ? _b : _reference.UNDEFINED_REFERENCE;
    return (0, _reference.createComputeRef)(() => {
      var source = (0, _reference.valueForRef)(sourceRef);
      if ((0, _util.isDict)(source)) {
        return (0, _globalContext.getPath)(source, String((0, _reference.valueForRef)(pathRef)));
      }
    }, value => {
      var source = (0, _reference.valueForRef)(sourceRef);
      if ((0, _util.isDict)(source)) {
        return (0, _globalContext.setPath)(source, String((0, _reference.valueForRef)(pathRef)), value);
      }
    }, 'get');
  });
  _exports.get = get;
  var isEmpty$2 = value => {
    return value === null || value === undefined || typeof value.toString !== 'function';
  };
  var normalizeTextValue = value => {
    if (isEmpty$2(value)) {
      return '';
    }
    return String(value);
  };
  /**
    Concatenates the given arguments into a string.
  
    Example:
  
    ```handlebars
    {{some-component name=(concat firstName " " lastName)}}
  
    {{! would pass name="<first name value> <last name value>" to the component}}
    ```
  
    or for angle bracket invocation, you actually don't need concat at all.
  
    ```handlebars
    <SomeComponent @name="{{firstName}} {{lastName}}" />
    ```
  
    @public
    @method concat
  */

  var concat = internalHelper(_ref68 => {
    var {
      positional
    } = _ref68;
    return (0, _reference.createComputeRef)(() => (0, _runtime.reifyPositional)(positional).map(normalizeTextValue).join(''), null, 'concat');
  });
  _exports.concat = concat;
  var untouchableContext = (0, _util.buildUntouchableThis)('`on` modifier');
  /*
    Internet Explorer 11 does not support `once` and also does not support
    passing `eventOptions`. In some situations it then throws a weird script
    error, like:
  
    ```
    Could not complete the operation due to error 80020101
    ```
  
    This flag determines, whether `{ once: true }` and thus also event options in
    general are supported.
  */

  var SUPPORTS_EVENT_OPTIONS = (() => {
    try {
      var div = document.createElement('div');
      var counter = 0;
      div.addEventListener('click', () => counter++, {
        once: true
      });
      var event;
      if (typeof Event === 'function') {
        event = new Event('click');
      } else {
        event = document.createEvent('Event');
        event.initEvent('click', true, true);
      }
      div.dispatchEvent(event);
      div.dispatchEvent(event);
      return counter === 1;
    } catch (error) {
      return false;
    }
  })();
  class OnModifierState {
    constructor(element, args) {
      this.tag = (0, _validator.createUpdatableTag)();
      this.shouldUpdate = true;
      this.element = element;
      this.args = args;
    }
    updateFromArgs() {
      var {
        args
      } = this;
      var {
        once,
        passive,
        capture
      } = (0, _runtime.reifyNamed)(args.named);
      if (once !== this.once) {
        this.once = once;
        this.shouldUpdate = true;
      }
      if (passive !== this.passive) {
        this.passive = passive;
        this.shouldUpdate = true;
      }
      if (capture !== this.capture) {
        this.capture = capture;
        this.shouldUpdate = true;
      }
      var options;
      if (once || passive || capture) {
        options = this.options = {
          once,
          passive,
          capture
        };
      } else {
        this.options = undefined;
      }
      if (true /* DEBUG */ && (args.positional[0] === undefined || typeof (0, _reference.valueForRef)(args.positional[0]) !== 'string')) {
        throw new Error('You must pass a valid DOM event name as the first argument to the `on` modifier');
      }
      var eventName = (0, _reference.valueForRef)(args.positional[0]);
      if (eventName !== this.eventName) {
        this.eventName = eventName;
        this.shouldUpdate = true;
      }
      var userProvidedCallbackReference = args.positional[1];
      if (true /* DEBUG */) {
        if (args.positional[1] === undefined) {
          throw new Error(`You must pass a function as the second argument to the \`on\` modifier.`);
        }
        var value = (0, _reference.valueForRef)(userProvidedCallbackReference);
        if (typeof value !== 'function') {
          throw new Error(`You must pass a function as the second argument to the \`on\` modifier; you passed ${value === null ? 'null' : typeof value}. While rendering:\n\n${userProvidedCallbackReference.debugLabel}`);
        }
      }
      var userProvidedCallback = (0, _reference.valueForRef)(userProvidedCallbackReference);
      if (userProvidedCallback !== this.userProvidedCallback) {
        this.userProvidedCallback = userProvidedCallback;
        this.shouldUpdate = true;
      }
      if (true /* DEBUG */ && args.positional.length !== 2) {
        throw new Error(`You can only pass two positional arguments (event name and callback) to the \`on\` modifier, but you provided ${args.positional.length}. Consider using the \`fn\` helper to provide additional arguments to the \`on\` callback.`);
      }
      var needsCustomCallback = SUPPORTS_EVENT_OPTIONS === false && once || /* needs manual once implementation */
      true /* DEBUG */ && passive;
      /* needs passive enforcement */

      if (this.shouldUpdate) {
        if (needsCustomCallback) {
          var _callback = this.callback = function (event) {
            if (true /* DEBUG */ && passive) {
              event.preventDefault = () => {
                throw new Error(`You marked this listener as 'passive', meaning that you must not call 'event.preventDefault()': \n\n${userProvidedCallback}`);
              };
            }
            if (!SUPPORTS_EVENT_OPTIONS && once) {
              removeEventListener(this, eventName, _callback, options);
            }
            return userProvidedCallback.call(untouchableContext, event);
          };
        } else if (true /* DEBUG */) {
          // prevent the callback from being bound to the element
          this.callback = userProvidedCallback.bind(untouchableContext);
        } else {
          this.callback = userProvidedCallback;
        }
      }
    }
  }
  var adds = 0;
  var removes = 0;
  function removeEventListener(element, eventName, callback, options) {
    removes++;
    if (SUPPORTS_EVENT_OPTIONS) {
      // when options are supported, use them across the board
      element.removeEventListener(eventName, callback, options);
    } else if (options !== undefined && options.capture) {
      // used only in the following case:
      //
      // `{ once: true | false, passive: true | false, capture: true }
      //
      // `once` is handled via a custom callback that removes after first
      // invocation so we only care about capture here as a boolean
      element.removeEventListener(eventName, callback, true);
    } else {
      // used only in the following cases:
      //
      // * where there is no options
      // * `{ once: true | false, passive: true | false, capture: false }
      element.removeEventListener(eventName, callback);
    }
  }
  function addEventListener(element, eventName, callback, options) {
    adds++;
    if (SUPPORTS_EVENT_OPTIONS) {
      // when options are supported, use them across the board
      element.addEventListener(eventName, callback, options);
    } else if (options !== undefined && options.capture) {
      // used only in the following case:
      //
      // `{ once: true | false, passive: true | false, capture: true }
      //
      // `once` is handled via a custom callback that removes after first
      // invocation so we only care about capture here as a boolean
      element.addEventListener(eventName, callback, true);
    } else {
      // used only in the following cases:
      //
      // * where there is no options
      // * `{ once: true | false, passive: true | false, capture: false }
      element.addEventListener(eventName, callback);
    }
  }
  /**
    The `{{on}}` modifier lets you easily add event listeners (it uses
    [EventTarget.addEventListener](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)
    internally).
  
    For example, if you'd like to run a function on your component when a `<button>`
    in the components template is clicked you might do something like:
  
    ```app/components/like-post.hbs
    <button {{on 'click' this.saveLike}}>Like this post!</button>
    ```
  
    ```app/components/like-post.js
    import Component from '@glimmer/component';
    import { action } from '@ember/object';
  
    export default class LikePostComponent extends Component {
      saveLike = () => {
        // someone likes your post!
        // better send a request off to your server...
      }
    }
    ```
  
    ### Arguments
  
    `{{on}}` accepts two positional arguments, and a few named arguments.
  
    The positional arguments are:
  
    - `event` -- the name to use when calling `addEventListener`
    - `callback` -- the function to be passed to `addEventListener`
  
    The named arguments are:
  
    - capture -- a `true` value indicates that events of this type will be dispatched
      to the registered listener before being dispatched to any EventTarget beneath it
      in the DOM tree.
    - once -- indicates that the listener should be invoked at most once after being
      added. If true, the listener would be automatically removed when invoked.
    - passive -- if `true`, indicates that the function specified by listener will never
      call preventDefault(). If a passive listener does call preventDefault(), the user
      agent will do nothing other than generate a console warning. See
      [Improving scrolling performance with passive listeners](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Improving_scrolling_performance_with_passive_listeners)
      to learn more.
  
    The callback function passed to `{{on}}` will receive any arguments that are passed
    to the event handler. Most commonly this would be the `event` itself.
  
    If you would like to pass additional arguments to the function you should use
    the `{{fn}}` helper.
  
    For example, in our example case above if you'd like to pass in the post that
    was being liked when the button is clicked you could do something like:
  
    ```app/components/like-post.hbs
    <button {{on 'click' (fn this.saveLike @post)}}>Like this post!</button>
    ```
  
    In this case, the `saveLike` function will receive two arguments: the click event
    and the value of `@post`.
  
    ### Function Context
  
    In the example above, we used an arrow function to ensure that `likePost` is
    properly bound to the `items-list`, but let's explore what happens if we
    left out the arrow function:
  
    ```app/components/like-post.js
    import Component from '@glimmer/component';
  
    export default class LikePostComponent extends Component {
      saveLike() {
        // ...snip...
      }
    }
    ```
  
    In this example, when the button is clicked `saveLike` will be invoked,
    it will **not** have access to the component instance. In other
    words, it will have no `this` context, so please make sure your functions
    are bound (via an arrow function or other means) before passing into `on`!
  
    @method on
    @public
  */

  class OnModifierManager {
    constructor() {
      this.SUPPORTS_EVENT_OPTIONS = SUPPORTS_EVENT_OPTIONS;
    }
    getDebugName() {
      return 'on';
    }
    get counters() {
      return {
        adds,
        removes
      };
    }
    create(_owner, element, _state, args) {
      return new OnModifierState(element, args);
    }
    getTag(state) {
      if (state === null) {
        return null;
      }
      return state.tag;
    }
    install(state) {
      if (state === null) {
        return;
      }
      state.updateFromArgs();
      var {
        element,
        eventName,
        callback,
        options
      } = state;
      addEventListener(element, eventName, callback, options);
      (0, _destroyable2.registerDestructor)(state, () => removeEventListener(element, eventName, callback, options));
      state.shouldUpdate = false;
    }
    update(state) {
      if (state === null) {
        return;
      } // stash prior state for el.removeEventListener

      var {
        element,
        eventName,
        callback,
        options
      } = state;
      state.updateFromArgs();
      if (!state.shouldUpdate) {
        return;
      } // use prior state values for removal

      removeEventListener(element, eventName, callback, options); // read updated values from the state object

      addEventListener(state.element, state.eventName, state.callback, state.options);
      state.shouldUpdate = false;
    }
    getDestroyable(state) {
      return state;
    }
  }
  var on = (0, _manager5.setInternalModifierManager)(new OnModifierManager(), {});
  _exports.on = on;
});
define("@glimmer/tracking/index", ["exports", "@ember/-internals/metal"], function (_exports, _metal) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "cached", {
    enumerable: true,
    get: function () {
      return _metal.cached;
    }
  });
  Object.defineProperty(_exports, "tracked", {
    enumerable: true,
    get: function () {
      return _metal.tracked;
    }
  });
});
define("@glimmer/tracking/primitives/cache", ["exports", "@ember/-internals/metal"], function (_exports, _metal) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "createCache", {
    enumerable: true,
    get: function () {
      return _metal.createCache;
    }
  });
  Object.defineProperty(_exports, "getValue", {
    enumerable: true,
    get: function () {
      return _metal.getValue;
    }
  });
  Object.defineProperty(_exports, "isConst", {
    enumerable: true,
    get: function () {
      return _metal.isConst;
    }
  });
});
define("@glimmer/util", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports._WeakSet = _exports.Stack = _exports.SERIALIZATION_FIRST_NODE_STRING = _exports.LOGGER = _exports.LOCAL_LOGGER = _exports.HAS_NATIVE_SYMBOL = _exports.HAS_NATIVE_PROXY = _exports.EMPTY_STRING_ARRAY = _exports.EMPTY_NUMBER_ARRAY = _exports.EMPTY_ARRAY = void 0;
  _exports.assert = debugAssert$$1;
  _exports.assertNever = assertNever;
  _exports.assertPresent = assertPresent;
  _exports.beginTestSteps = _exports.assign = void 0;
  _exports.buildUntouchableThis = buildUntouchableThis;
  _exports.castToBrowser = castToBrowser;
  _exports.castToSimple = castToSimple;
  _exports.checkNode = checkNode;
  _exports.clearElement = clearElement;
  _exports.constants = constants;
  _exports.debugToString = void 0;
  _exports.decodeHandle = decodeHandle;
  _exports.decodeImmediate = decodeImmediate;
  _exports.decodeNegative = decodeNegative;
  _exports.decodePositive = decodePositive;
  _exports.deprecate = deprecate$$1;
  _exports.dict = dict;
  _exports.emptyArray = emptyArray;
  _exports.encodeHandle = encodeHandle;
  _exports.encodeImmediate = encodeImmediate;
  _exports.encodeNegative = encodeNegative;
  _exports.encodePositive = encodePositive;
  _exports.endTestSteps = void 0;
  _exports.enumerableSymbol = enumerableSymbol;
  _exports.exhausted = exhausted;
  _exports.expect = expect;
  _exports.extractHandle = extractHandle;
  _exports.fillNulls = fillNulls;
  _exports.ifPresent = ifPresent;
  _exports.intern = intern;
  _exports.isDict = isDict;
  _exports.isEmptyArray = isEmptyArray;
  _exports.isErrHandle = isErrHandle;
  _exports.isHandle = isHandle;
  _exports.isNonPrimitiveHandle = isNonPrimitiveHandle;
  _exports.isObject = isObject;
  _exports.isOkHandle = isOkHandle;
  _exports.isPresent = isPresent;
  _exports.isSerializationFirstNode = isSerializationFirstNode;
  _exports.isSmallInt = isSmallInt;
  _exports.keys = keys;
  _exports.logStep = void 0;
  _exports.mapPresent = mapPresent;
  _exports.strip = strip;
  _exports.symbol = void 0;
  _exports.toPresentOption = toPresentOption;
  _exports.tuple = void 0;
  _exports.unreachable = unreachable;
  _exports.unwrap = unwrap;
  _exports.unwrapHandle = unwrapHandle;
  _exports.unwrapTemplate = unwrapTemplate;
  _exports.values = values;
  _exports.verifySteps = void 0;
  var EMPTY_ARRAY = Object.freeze([]);
  _exports.EMPTY_ARRAY = EMPTY_ARRAY;
  function emptyArray() {
    return EMPTY_ARRAY;
  }
  var EMPTY_STRING_ARRAY = emptyArray();
  _exports.EMPTY_STRING_ARRAY = EMPTY_STRING_ARRAY;
  var EMPTY_NUMBER_ARRAY = emptyArray();
  /**
   * This function returns `true` if the input array is the special empty array sentinel,
   * which is sometimes used for optimizations.
   */
  _exports.EMPTY_NUMBER_ARRAY = EMPTY_NUMBER_ARRAY;
  function isEmptyArray(input) {
    return input === EMPTY_ARRAY;
  }

  // import Logger from './logger';

  function debugAssert$$1(test, msg) {
    // if (!alreadyWarned) {
    //   alreadyWarned = true;
    //   Logger.warn("Don't leave debug assertions on in public builds");
    // }
    if (!test) {
      throw new Error(msg || 'assertion failure');
    }
  }
  function deprecate$$1(desc) {
    LOCAL_LOGGER.warn(`DEPRECATION: ${desc}`);
  }
  function dict() {
    return Object.create(null);
  }
  function isDict(u) {
    return u !== null && u !== undefined;
  }
  function isObject(u) {
    return typeof u === 'function' || typeof u === 'object' && u !== null;
  }
  class StackImpl {
    constructor(values) {
      if (values === void 0) {
        values = [];
      }
      this.current = null;
      this.stack = values;
    }
    get size() {
      return this.stack.length;
    }
    push(item) {
      this.current = item;
      this.stack.push(item);
    }
    pop() {
      var item = this.stack.pop();
      var len = this.stack.length;
      this.current = len === 0 ? null : this.stack[len - 1];
      return item === undefined ? null : item;
    }
    nth(from) {
      var len = this.stack.length;
      return len < from ? null : this.stack[len - from];
    }
    isEmpty() {
      return this.stack.length === 0;
    }
    toArray() {
      return this.stack;
    }
  }
  _exports.Stack = StackImpl;
  function clearElement(parent) {
    var current = parent.firstChild;
    while (current) {
      var next = current.nextSibling;
      parent.removeChild(current);
      current = next;
    }
  }
  var SERIALIZATION_FIRST_NODE_STRING = '%+b:0%';
  _exports.SERIALIZATION_FIRST_NODE_STRING = SERIALIZATION_FIRST_NODE_STRING;
  function isSerializationFirstNode(node) {
    return node.nodeValue === SERIALIZATION_FIRST_NODE_STRING;
  }
  var assign = Object.assign;
  _exports.assign = assign;
  function fillNulls(count) {
    var arr = new Array(count);
    for (var i = 0; i < count; i++) {
      arr[i] = null;
    }
    return arr;
  }
  function values(obj) {
    var vals = [];
    for (var key in obj) {
      vals.push(obj[key]);
    }
    return vals;
  }

  /**
    Strongly hint runtimes to intern the provided string.
  
    When do I need to use this function?
  
    For the most part, never. Pre-mature optimization is bad, and often the
    runtime does exactly what you need it to, and more often the trade-off isn't
    worth it.
  
    Why?
  
    Runtimes store strings in at least 2 different representations:
    Ropes and Symbols (interned strings). The Rope provides a memory efficient
    data-structure for strings created from concatenation or some other string
    manipulation like splitting.
  
    Unfortunately checking equality of different ropes can be quite costly as
    runtimes must resort to clever string comparison algorithms. These
    algorithms typically cost in proportion to the length of the string.
    Luckily, this is where the Symbols (interned strings) shine. As Symbols are
    unique by their string content, equality checks can be done by pointer
    comparison.
  
    How do I know if my string is a rope or symbol?
  
    Typically (warning general sweeping statement, but truthy in runtimes at
    present) static strings created as part of the JS source are interned.
    Strings often used for comparisons can be interned at runtime if some
    criteria are met.  One of these criteria can be the size of the entire rope.
    For example, in chrome 38 a rope longer then 12 characters will not
    intern, nor will segments of that rope.
  
    Some numbers: http://jsperf.com/eval-vs-keys/8
  
    Known Trick™
  
    @private
    @return {String} interned version of the provided string
  */
  function intern(str) {
    var obj = {};
    obj[str] = 1;
    for (var key in obj) {
      if (key === str) {
        return key;
      }
    }
    return str;
  }
  var HAS_NATIVE_PROXY = typeof Proxy === 'function';
  _exports.HAS_NATIVE_PROXY = HAS_NATIVE_PROXY;
  var HAS_NATIVE_SYMBOL = function () {
    if (typeof Symbol !== 'function') {
      return false;
    } // eslint-disable-next-line symbol-description

    return typeof Symbol() === 'symbol';
  }();
  _exports.HAS_NATIVE_SYMBOL = HAS_NATIVE_SYMBOL;
  function keys(obj) {
    return Object.keys(obj);
  }
  function unwrap(val) {
    if (val === null || val === undefined) throw new Error(`Expected value to be present`);
    return val;
  }
  function expect(val, message) {
    if (val === null || val === undefined) throw new Error(message);
    return val;
  }
  function unreachable(message) {
    if (message === void 0) {
      message = 'unreachable';
    }
    return new Error(message);
  }
  function exhausted(value) {
    throw new Error(`Exhausted ${value}`);
  }
  var tuple = function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return args;
  };
  _exports.tuple = tuple;
  function enumerableSymbol(key) {
    return intern(`__${key}${Math.floor(Math.random() * Date.now())}__`);
  }
  var symbol = HAS_NATIVE_SYMBOL ? Symbol : enumerableSymbol;
  _exports.symbol = symbol;
  function strip(strings) {
    var out = '';
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }
    for (var i = 0; i < strings.length; i++) {
      var string = strings[i];
      var dynamic = args[i] !== undefined ? String(args[i]) : '';
      out += `${string}${dynamic}`;
    }
    var lines = out.split('\n');
    while (lines.length && lines[0].match(/^\s*$/)) {
      lines.shift();
    }
    while (lines.length && lines[lines.length - 1].match(/^\s*$/)) {
      lines.pop();
    }
    var min = Infinity;
    for (var line of lines) {
      var leading = line.match(/^\s*/)[0].length;
      min = Math.min(min, leading);
    }
    var stripped = [];
    for (var _line of lines) {
      stripped.push(_line.slice(min));
    }
    return stripped.join('\n');
  }
  function isHandle(value) {
    return value >= 0;
  }
  function isNonPrimitiveHandle(value) {
    return value > 3
    /* ENCODED_UNDEFINED_HANDLE */;
  }

  function constants() {
    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      values[_key3] = arguments[_key3];
    }
    return [false, true, null, undefined, ...values];
  }
  function isSmallInt(value) {
    return value % 1 === 0 && value <= 536870911
    /* MAX_INT */ && value >= -536870912
    /* MIN_INT */;
  }

  function encodeNegative(num) {
    return num & -536870913
    /* SIGN_BIT */;
  }

  function decodeNegative(num) {
    return num | ~-536870913
    /* SIGN_BIT */;
  }

  function encodePositive(num) {
    return ~num;
  }
  function decodePositive(num) {
    return ~num;
  }
  function encodeHandle(num) {
    return num;
  }
  function decodeHandle(num) {
    return num;
  }
  function encodeImmediate(num) {
    num |= 0;
    return num < 0 ? encodeNegative(num) : encodePositive(num);
  }
  function decodeImmediate(num) {
    num |= 0;
    return num > -536870913
    /* SIGN_BIT */ ? decodePositive(num) : decodeNegative(num);
  } // Warm
  [1, -1].forEach(x => decodeImmediate(encodeImmediate(x)));
  function unwrapHandle(handle) {
    if (typeof handle === 'number') {
      return handle;
    } else {
      var error = handle.errors[0];
      throw new Error(`Compile Error: ${error.problem} @ ${error.span.start}..${error.span.end}`);
    }
  }
  function unwrapTemplate(template) {
    if (template.result === 'error') {
      throw new Error(`Compile Error: ${template.problem} @ ${template.span.start}..${template.span.end}`);
    }
    return template;
  }
  function extractHandle(handle) {
    if (typeof handle === 'number') {
      return handle;
    } else {
      return handle.handle;
    }
  }
  function isOkHandle(handle) {
    return typeof handle === 'number';
  }
  function isErrHandle(handle) {
    return typeof handle === 'number';
  }
  var weakSet = typeof WeakSet === 'function' ? WeakSet : class WeakSetPolyFill {
    constructor() {
      this._map = new WeakMap();
    }
    add(val) {
      this._map.set(val, true);
      return this;
    }
    delete(val) {
      return this._map.delete(val);
    }
    has(val) {
      return this._map.has(val);
    }
  };
  _exports._WeakSet = weakSet;
  function castToSimple(node) {
    if (isDocument(node)) {
      return node;
    } else if (isElement(node)) {
      return node;
    } else {
      return node;
    }
  }
  function castToBrowser(node, sugaryCheck) {
    if (node === null || node === undefined) {
      return null;
    }
    if (typeof document === undefined) {
      throw new Error('Attempted to cast to a browser node in a non-browser context');
    }
    if (isDocument(node)) {
      return node;
    }
    if (node.ownerDocument !== document) {
      throw new Error('Attempted to cast to a browser node with a node that was not created from this document');
    }
    return checkNode(node, sugaryCheck);
  }
  function checkError(from, check) {
    return new Error(`cannot cast a ${from} into ${check}`);
  }
  function isDocument(node) {
    return node.nodeType === 9
    /* DOCUMENT_NODE */;
  }

  function isElement(node) {
    return node.nodeType === 1
    /* ELEMENT_NODE */;
  }

  function checkNode(node, check) {
    var isMatch = false;
    if (node !== null) {
      if (typeof check === 'string') {
        isMatch = stringCheckNode(node, check);
      } else if (Array.isArray(check)) {
        isMatch = check.some(c => stringCheckNode(node, c));
      } else {
        throw unreachable();
      }
    }
    if (isMatch) {
      return node;
    } else {
      throw checkError(`SimpleElement(${node})`, check);
    }
  }
  function stringCheckNode(node, check) {
    switch (check) {
      case 'NODE':
        return true;
      case 'HTML':
        return node instanceof HTMLElement;
      case 'SVG':
        return node instanceof SVGElement;
      case 'ELEMENT':
        return node instanceof Element;
      default:
        if (check.toUpperCase() === check) {
          throw new Error(`BUG: this code is missing handling for a generic node type`);
        }
        return node instanceof Element && node.tagName.toLowerCase() === check;
    }
  }
  function isPresent(list) {
    return list.length > 0;
  }
  function ifPresent(list, ifPresent, otherwise) {
    if (isPresent(list)) {
      return ifPresent(list);
    } else {
      return otherwise();
    }
  }
  function toPresentOption(list) {
    if (isPresent(list)) {
      return list;
    } else {
      return null;
    }
  }
  function assertPresent(list, message) {
    if (message === void 0) {
      message = `unexpected empty list`;
    }
    if (!isPresent(list)) {
      throw new Error(message);
    }
  }
  function mapPresent(list, callback) {
    if (list === null) {
      return null;
    }
    var out = [];
    for (var item of list) {
      out.push(callback(item));
    }
    return out;
  }
  function buildUntouchableThis(source) {
    var context = null;
    if (true /* DEBUG */ && HAS_NATIVE_PROXY) {
      var assertOnProperty = property => {
        throw new Error(`You accessed \`this.${String(property)}\` from a function passed to the ${source}, but the function itself was not bound to a valid \`this\` context. Consider updating to use a bound function (for instance, use an arrow function, \`() => {}\`).`);
      };
      context = new Proxy({}, {
        get(_target, property) {
          assertOnProperty(property);
        },
        set(_target, property) {
          assertOnProperty(property);
          return false;
        },
        has(_target, property) {
          assertOnProperty(property);
          return false;
        }
      });
    }
    return context;
  }
  var debugToString;
  if (true /* DEBUG */) {
    var getFunctionName = fn => {
      var functionName = fn.name;
      if (functionName === undefined) {
        var match = Function.prototype.toString.call(fn).match(/function (\w+)\s*\(/);
        functionName = match && match[1] || '';
      }
      return functionName.replace(/^bound /, '');
    };
    var getObjectName = obj => {
      var name;
      var className;
      if (obj.constructor && typeof obj.constructor === 'function') {
        className = getFunctionName(obj.constructor);
      }
      if ('toString' in obj && obj.toString !== Object.prototype.toString && obj.toString !== Function.prototype.toString) {
        name = obj.toString();
      } // If the class has a decent looking name, and the `toString` is one of the
      // default Ember toStrings, replace the constructor portion of the toString
      // with the class name. We check the length of the class name to prevent doing
      // this when the value is minified.

      if (name && name.match(/<.*:ember\d+>/) && className && className[0] !== '_' && className.length > 2 && className !== 'Class') {
        return name.replace(/<.*:/, `<${className}:`);
      }
      return name || className;
    };
    var getPrimitiveName = value => {
      return String(value);
    };
    debugToString = value => {
      if (typeof value === 'function') {
        return getFunctionName(value) || `(unknown function)`;
      } else if (typeof value === 'object' && value !== null) {
        return getObjectName(value) || `(unknown object)`;
      } else {
        return getPrimitiveName(value);
      }
    };
  }
  var debugToString$1 = debugToString;
  _exports.debugToString = debugToString$1;
  var beginTestSteps;
  _exports.beginTestSteps = beginTestSteps;
  var endTestSteps;
  _exports.endTestSteps = endTestSteps;
  var verifySteps;
  _exports.verifySteps = verifySteps;
  var logStep;

  /**
   * This constant exists to make it easier to differentiate normal logs from
   * errant console.logs. LOCAL_LOGGER should only be used inside a
   * LOCAL_SHOULD_LOG check.
   *
   * It does not alleviate the need to check LOCAL_SHOULD_LOG, which is used
   * for stripping.
   */
  _exports.logStep = logStep;
  var LOCAL_LOGGER = console;
  /**
   * This constant exists to make it easier to differentiate normal logs from
   * errant console.logs. LOGGER can be used outside of LOCAL_SHOULD_LOG checks,
   * and is meant to be used in the rare situation where a console.* call is
   * actually appropriate.
   */
  _exports.LOCAL_LOGGER = LOCAL_LOGGER;
  var LOGGER = console;
  _exports.LOGGER = LOGGER;
  function assertNever(value, desc) {
    if (desc === void 0) {
      desc = 'unexpected unreachable branch';
    }
    LOGGER.log('unreachable', value);
    LOGGER.log(`${desc} :: ${JSON.stringify(value)} (${value})`);
    throw new Error(`code reached unreachable`);
  }
});
define("@glimmer/validator", ["exports", "@glimmer/global-context"], function (_exports, _globalContext) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.VolatileTag = _exports.VOLATILE_TAG = _exports.VOLATILE = _exports.INITIAL = _exports.CurrentTag = _exports.CURRENT_TAG = _exports.CONSTANT_TAG = _exports.CONSTANT = _exports.COMPUTE = _exports.ALLOW_CYCLES = void 0;
  _exports.beginTrackFrame = beginTrackFrame;
  _exports.beginTrackingTransaction = void 0;
  _exports.beginUntrackFrame = beginUntrackFrame;
  _exports.bump = bump;
  _exports.combine = void 0;
  _exports.consumeTag = consumeTag;
  _exports.createCache = createCache;
  _exports.createTag = createTag;
  _exports.createUpdatableTag = createUpdatableTag;
  _exports.dirtyTag = void 0;
  _exports.dirtyTagFor = dirtyTagFor;
  _exports.endTrackFrame = endTrackFrame;
  _exports.endTrackingTransaction = void 0;
  _exports.endUntrackFrame = endUntrackFrame;
  _exports.getValue = getValue;
  _exports.isConst = isConst;
  _exports.isConstTag = isConstTag;
  _exports.isTracking = isTracking;
  _exports.logTrackingStack = void 0;
  _exports.resetTracking = resetTracking;
  _exports.setTrackingTransactionEnv = _exports.runInTrackingTransaction = void 0;
  _exports.tagFor = tagFor;
  _exports.tagMetaFor = tagMetaFor;
  _exports.track = track;
  _exports.trackedData = trackedData;
  _exports.untrack = untrack;
  _exports.updateTag = void 0;
  _exports.validateTag = validateTag;
  _exports.valueForTag = valueForTag;
  // eslint-disable-next-line @typescript-eslint/ban-types
  function indexable(input) {
    return input;
  } // This is a duplicate utility from @glimmer/util because `@glimmer/validator`
  // should not depend on any other @glimmer packages, in order to avoid pulling
  // in types and prevent regressions in `@glimmer/tracking` (which has public types).

  var symbol = typeof Symbol !== 'undefined' ? Symbol :
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  key => `__${key}${Math.floor(Math.random() * Date.now())}__`; // eslint-disable-next-line @typescript-eslint/no-explicit-any

  var symbolFor = typeof Symbol !== 'undefined' ? Symbol.for : key => `__GLIMMER_VALIDATOR_SYMBOL_FOR_${key}`;
  function getGlobal() {
    // eslint-disable-next-line node/no-unsupported-features/es-builtins
    if (typeof globalThis !== 'undefined') return indexable(globalThis);
    if (typeof self !== 'undefined') return indexable(self);
    if (typeof window !== 'undefined') return indexable(window);
    if (typeof global !== 'undefined') return indexable(global);
    throw new Error('unable to locate global object');
  }
  function unwrap(val) {
    if (val === null || val === undefined) throw new Error(`Expected value to be present`);
    return val;
  }
  var beginTrackingTransaction;
  _exports.beginTrackingTransaction = beginTrackingTransaction;
  var endTrackingTransaction;
  _exports.endTrackingTransaction = endTrackingTransaction;
  var runInTrackingTransaction;
  _exports.runInTrackingTransaction = runInTrackingTransaction;
  var resetTrackingTransaction;
  var setTrackingTransactionEnv;
  _exports.setTrackingTransactionEnv = setTrackingTransactionEnv;
  var assertTagNotConsumed;
  var markTagAsConsumed;
  var logTrackingStack;
  _exports.logTrackingStack = logTrackingStack;
  if (true /* DEBUG */) {
    var CONSUMED_TAGS = null;
    var TRANSACTION_STACK = []; /////////

    var TRANSACTION_ENV = {
      debugMessage(obj, keyName) {
        var objName;
        if (typeof obj === 'function') {
          objName = obj.name;
        } else if (typeof obj === 'object' && obj !== null) {
          var className = obj.constructor && obj.constructor.name || '(unknown class)';
          objName = `(an instance of ${className})`;
        } else if (obj === undefined) {
          objName = '(an unknown tag)';
        } else {
          objName = String(obj);
        }
        var dirtyString = keyName ? `\`${keyName}\` on \`${objName}\`` : `\`${objName}\``;
        return `You attempted to update ${dirtyString}, but it had already been used previously in the same computation.  Attempting to update a value after using it in a computation can cause logical errors, infinite revalidation bugs, and performance issues, and is not supported.`;
      }
    };
    _exports.setTrackingTransactionEnv = setTrackingTransactionEnv = env => Object.assign(TRANSACTION_ENV, env);
    _exports.beginTrackingTransaction = beginTrackingTransaction = _debugLabel => {
      CONSUMED_TAGS = CONSUMED_TAGS || new WeakMap();
      var debugLabel = _debugLabel || undefined;
      var parent = TRANSACTION_STACK[TRANSACTION_STACK.length - 1] || null;
      TRANSACTION_STACK.push({
        parent,
        debugLabel
      });
    };
    _exports.endTrackingTransaction = endTrackingTransaction = () => {
      if (TRANSACTION_STACK.length === 0) {
        throw new Error('attempted to close a tracking transaction, but one was not open');
      }
      TRANSACTION_STACK.pop();
      if (TRANSACTION_STACK.length === 0) {
        CONSUMED_TAGS = null;
      }
    };
    resetTrackingTransaction = () => {
      var stack = '';
      if (TRANSACTION_STACK.length > 0) {
        stack = logTrackingStack(TRANSACTION_STACK[TRANSACTION_STACK.length - 1]);
      }
      TRANSACTION_STACK = [];
      CONSUMED_TAGS = null;
      return stack;
    };
    /**
     * Creates a global autotracking transaction. This will prevent any backflow
     * in any `track` calls within the transaction, even if they are not
     * externally consumed.
     *
     * `runInAutotrackingTransaction` can be called within itself, and it will add
     * onto the existing transaction if one exists.
     *
     * TODO: Only throw an error if the `track` is consumed.
     */

    _exports.runInTrackingTransaction = runInTrackingTransaction = (fn, debugLabel) => {
      beginTrackingTransaction(debugLabel);
      var didError = true;
      try {
        var value = fn();
        didError = false;
        return value;
      } finally {
        if (didError !== true) {
          endTrackingTransaction();
        }
      }
    };
    var nthIndex = function (str, pattern, n, startingPos) {
      if (startingPos === void 0) {
        startingPos = -1;
      }
      var i = startingPos;
      while (n-- > 0 && i++ < str.length) {
        i = str.indexOf(pattern, i);
        if (i < 0) break;
      }
      return i;
    };
    var makeTrackingErrorMessage = (transaction, obj, keyName) => {
      var message = [TRANSACTION_ENV.debugMessage(obj, keyName && String(keyName))];
      message.push(`\`${String(keyName)}\` was first used:`);
      message.push(logTrackingStack(transaction));
      message.push(`Stack trace for the update:`);
      return message.join('\n\n');
    };
    _exports.logTrackingStack = logTrackingStack = transaction => {
      var trackingStack = [];
      var current = transaction || TRANSACTION_STACK[TRANSACTION_STACK.length - 1];
      if (current === undefined) return '';
      while (current) {
        if (current.debugLabel) {
          trackingStack.unshift(current.debugLabel);
        }
        current = current.parent;
      } // TODO: Use String.prototype.repeat here once we can drop support for IE11

      return trackingStack.map((label, index) => Array(2 * index + 1).join(' ') + label).join('\n');
    };
    markTagAsConsumed = _tag => {
      if (!CONSUMED_TAGS || CONSUMED_TAGS.has(_tag)) return;
      CONSUMED_TAGS.set(_tag, TRANSACTION_STACK[TRANSACTION_STACK.length - 1]); // We need to mark the tag and all of its subtags as consumed, so we need to
      // cast it and access its internals. In the future this shouldn't be necessary,
      // this is only for computed properties.

      var tag = _tag;
      if (tag.subtag) {
        markTagAsConsumed(tag.subtag);
      }
      if (tag.subtags) {
        tag.subtags.forEach(tag => markTagAsConsumed(tag));
      }
    };
    assertTagNotConsumed = (tag, obj, keyName) => {
      if (CONSUMED_TAGS === null) return;
      var transaction = CONSUMED_TAGS.get(tag);
      if (!transaction) return; // This hack makes the assertion message nicer, we can cut off the first
      // few lines of the stack trace and let users know where the actual error
      // occurred.

      try {
        (true && (0, _globalContext.assert)(false, makeTrackingErrorMessage(transaction, obj, keyName)));
      } catch (e) {
        if (e.stack) {
          var updateStackBegin = e.stack.indexOf('Stack trace for the update:');
          if (updateStackBegin !== -1) {
            var start = nthIndex(e.stack, '\n', 1, updateStackBegin);
            var end = nthIndex(e.stack, '\n', 4, updateStackBegin);
            e.stack = e.stack.substr(0, start) + e.stack.substr(end);
          }
        }
        throw e;
      }
    };
  }
  var CONSTANT = 0;
  _exports.CONSTANT = CONSTANT;
  var INITIAL = 1;
  _exports.INITIAL = INITIAL;
  var VOLATILE = NaN;
  _exports.VOLATILE = VOLATILE;
  var $REVISION = INITIAL;
  function bump() {
    $REVISION++;
  } //////////

  var COMPUTE = symbol('TAG_COMPUTE'); //////////

  /**
   * `value` receives a tag and returns an opaque Revision based on that tag. This
   * snapshot can then later be passed to `validate` with the same tag to
   * determine if the tag has changed at all since the time that `value` was
   * called.
   *
   * @param tag
   */
  _exports.COMPUTE = COMPUTE;
  function valueForTag(tag) {
    return tag[COMPUTE]();
  }
  /**
   * `validate` receives a tag and a snapshot from a previous call to `value` with
   * the same tag, and determines if the tag is still valid compared to the
   * snapshot. If the tag's state has changed at all since then, `validate` will
   * return false, otherwise it will return true. This is used to determine if a
   * calculation related to the tags should be rerun.
   *
   * @param tag
   * @param snapshot
   */

  function validateTag(tag, snapshot) {
    return snapshot >= tag[COMPUTE]();
  }
  var TYPE = symbol('TAG_TYPE'); // this is basically a const
  // eslint-disable-next-line @typescript-eslint/naming-convention

  var ALLOW_CYCLES;
  _exports.ALLOW_CYCLES = ALLOW_CYCLES;
  if (true /* DEBUG */) {
    _exports.ALLOW_CYCLES = ALLOW_CYCLES = new WeakMap();
  }
  function allowsCycles(tag) {
    if (ALLOW_CYCLES === undefined) {
      return true;
    } else {
      return ALLOW_CYCLES.has(tag);
    }
  }
  class MonomorphicTagImpl {
    constructor(type) {
      this.revision = INITIAL;
      this.lastChecked = INITIAL;
      this.lastValue = INITIAL;
      this.isUpdating = false;
      this.subtag = null;
      this.subtagBufferCache = null;
      this[TYPE] = type;
    }
    static combine(tags) {
      switch (tags.length) {
        case 0:
          return CONSTANT_TAG;
        case 1:
          return tags[0];
        default:
          var tag = new MonomorphicTagImpl(2
          /* Combinator */);

          tag.subtag = tags;
          return tag;
      }
    }
    [COMPUTE]() {
      var {
        lastChecked
      } = this;
      if (this.isUpdating === true) {
        if (true /* DEBUG */ && !allowsCycles(this)) {
          throw new Error('Cycles in tags are not allowed');
        }
        this.lastChecked = ++$REVISION;
      } else if (lastChecked !== $REVISION) {
        this.isUpdating = true;
        this.lastChecked = $REVISION;
        try {
          var {
            subtag,
            revision
          } = this;
          if (subtag !== null) {
            if (Array.isArray(subtag)) {
              for (var i = 0; i < subtag.length; i++) {
                var value = subtag[i][COMPUTE]();
                revision = Math.max(value, revision);
              }
            } else {
              var subtagValue = subtag[COMPUTE]();
              if (subtagValue === this.subtagBufferCache) {
                revision = Math.max(revision, this.lastValue);
              } else {
                // Clear the temporary buffer cache
                this.subtagBufferCache = null;
                revision = Math.max(revision, subtagValue);
              }
            }
          }
          this.lastValue = revision;
        } finally {
          this.isUpdating = false;
        }
      }
      return this.lastValue;
    }
    static updateTag(_tag, _subtag) {
      if (true /* DEBUG */ && _tag[TYPE] !== 1
      /* Updatable */) {
        throw new Error('Attempted to update a tag that was not updatable');
      } // TODO: TS 3.7 should allow us to do this via assertion

      var tag = _tag;
      var subtag = _subtag;
      if (subtag === CONSTANT_TAG) {
        tag.subtag = null;
      } else {
        // There are two different possibilities when updating a subtag:
        //
        // 1. subtag[COMPUTE]() <= tag[COMPUTE]();
        // 2. subtag[COMPUTE]() > tag[COMPUTE]();
        //
        // The first possibility is completely fine within our caching model, but
        // the second possibility presents a problem. If the parent tag has
        // already been read, then it's value is cached and will not update to
        // reflect the subtag's greater value. Next time the cache is busted, the
        // subtag's value _will_ be read, and it's value will be _greater_ than
        // the saved snapshot of the parent, causing the resulting calculation to
        // be rerun erroneously.
        //
        // In order to prevent this, when we first update to a new subtag we store
        // its computed value, and then check against that computed value on
        // subsequent updates. If its value hasn't changed, then we return the
        // parent's previous value. Once the subtag changes for the first time,
        // we clear the cache and everything is finally in sync with the parent.
        tag.subtagBufferCache = subtag[COMPUTE]();
        tag.subtag = subtag;
      }
    }
    static dirtyTag(tag, disableConsumptionAssertion) {
      if (true /* DEBUG */ && !(tag[TYPE] === 1
      /* Updatable */ || tag[TYPE] === 0
      /* Dirtyable */)) {
        throw new Error('Attempted to dirty a tag that was not dirtyable');
      }
      if (true /* DEBUG */ && disableConsumptionAssertion !== true) {
        // Usually by this point, we've already asserted with better error information,
        // but this is our last line of defense.
        unwrap(assertTagNotConsumed)(tag);
      }
      tag.revision = ++$REVISION;
      (0, _globalContext.scheduleRevalidate)();
    }
  }
  var DIRTY_TAG = MonomorphicTagImpl.dirtyTag;
  _exports.dirtyTag = DIRTY_TAG;
  var UPDATE_TAG = MonomorphicTagImpl.updateTag; //////////
  _exports.updateTag = UPDATE_TAG;
  function createTag() {
    return new MonomorphicTagImpl(0
    /* Dirtyable */);
  }

  function createUpdatableTag() {
    return new MonomorphicTagImpl(1
    /* Updatable */);
  } //////////

  var CONSTANT_TAG = new MonomorphicTagImpl(3
  /* Constant */);
  _exports.CONSTANT_TAG = CONSTANT_TAG;
  function isConstTag(tag) {
    return tag === CONSTANT_TAG;
  } //////////

  class VolatileTag {
    [COMPUTE]() {
      return VOLATILE;
    }
  }
  _exports.VolatileTag = VolatileTag;
  var VOLATILE_TAG = new VolatileTag(); //////////
  _exports.VOLATILE_TAG = VOLATILE_TAG;
  class CurrentTag {
    [COMPUTE]() {
      return $REVISION;
    }
  }
  _exports.CurrentTag = CurrentTag;
  var CURRENT_TAG = new CurrentTag(); //////////
  _exports.CURRENT_TAG = CURRENT_TAG;
  var combine = MonomorphicTagImpl.combine; // Warm
  _exports.combine = combine;
  var tag1 = createUpdatableTag();
  var tag2 = createUpdatableTag();
  var tag3 = createUpdatableTag();
  valueForTag(tag1);
  DIRTY_TAG(tag1);
  valueForTag(tag1);
  UPDATE_TAG(tag1, combine([tag2, tag3]));
  valueForTag(tag1);
  DIRTY_TAG(tag2);
  valueForTag(tag1);
  DIRTY_TAG(tag3);
  valueForTag(tag1);
  UPDATE_TAG(tag1, tag3);
  valueForTag(tag1);
  DIRTY_TAG(tag3);
  valueForTag(tag1);
  function isObjectLike(u) {
    return typeof u === 'object' && u !== null || typeof u === 'function';
  }
  var TRACKED_TAGS = new WeakMap();
  function dirtyTagFor(obj, key, meta) {
    if (true /* DEBUG */ && !isObjectLike(obj)) {
      throw new Error(`BUG: Can't update a tag for a primitive`);
    }
    var tags = meta === undefined ? TRACKED_TAGS.get(obj) : meta; // No tags have been setup for this object yet, return

    if (tags === undefined) return; // Dirty the tag for the specific property if it exists

    var propertyTag = tags.get(key);
    if (propertyTag !== undefined) {
      if (true /* DEBUG */) {
        unwrap(assertTagNotConsumed)(propertyTag, obj, key);
      }
      DIRTY_TAG(propertyTag, true);
    }
  }
  function tagMetaFor(obj) {
    var tags = TRACKED_TAGS.get(obj);
    if (tags === undefined) {
      tags = new Map();
      TRACKED_TAGS.set(obj, tags);
    }
    return tags;
  }
  function tagFor(obj, key, meta) {
    var tags = meta === undefined ? tagMetaFor(obj) : meta;
    var tag = tags.get(key);
    if (tag === undefined) {
      tag = createUpdatableTag();
      tags.set(key, tag);
    }
    return tag;
  }

  /**
   * An object that that tracks @tracked properties that were consumed.
   */

  class Tracker {
    constructor() {
      this.tags = new Set();
      this.last = null;
    }
    add(tag) {
      if (tag === CONSTANT_TAG) return;
      this.tags.add(tag);
      if (true /* DEBUG */) {
        unwrap(markTagAsConsumed)(tag);
      }
      this.last = tag;
    }
    combine() {
      var {
        tags
      } = this;
      if (tags.size === 0) {
        return CONSTANT_TAG;
      } else if (tags.size === 1) {
        return this.last;
      } else {
        var tagsArr = [];
        tags.forEach(tag => tagsArr.push(tag));
        return combine(tagsArr);
      }
    }
  }
  /**
   * Whenever a tracked computed property is entered, the current tracker is
   * saved off and a new tracker is replaced.
   *
   * Any tracked properties consumed are added to the current tracker.
   *
   * When a tracked computed property is exited, the tracker's tags are
   * combined and added to the parent tracker.
   *
   * The consequence is that each tracked computed property has a tag
   * that corresponds to the tracked properties consumed inside of
   * itself, including child tracked computed properties.
   */

  var CURRENT_TRACKER = null;
  var OPEN_TRACK_FRAMES = [];
  function beginTrackFrame(debuggingContext) {
    OPEN_TRACK_FRAMES.push(CURRENT_TRACKER);
    CURRENT_TRACKER = new Tracker();
    if (true /* DEBUG */) {
      unwrap(beginTrackingTransaction)(debuggingContext);
    }
  }
  function endTrackFrame() {
    var current = CURRENT_TRACKER;
    if (true /* DEBUG */) {
      if (OPEN_TRACK_FRAMES.length === 0) {
        throw new Error('attempted to close a tracking frame, but one was not open');
      }
      unwrap(endTrackingTransaction)();
    }
    CURRENT_TRACKER = OPEN_TRACK_FRAMES.pop() || null;
    return unwrap(current).combine();
  }
  function beginUntrackFrame() {
    OPEN_TRACK_FRAMES.push(CURRENT_TRACKER);
    CURRENT_TRACKER = null;
  }
  function endUntrackFrame() {
    if (true /* DEBUG */ && OPEN_TRACK_FRAMES.length === 0) {
      throw new Error('attempted to close a tracking frame, but one was not open');
    }
    CURRENT_TRACKER = OPEN_TRACK_FRAMES.pop() || null;
  } // This function is only for handling errors and resetting to a valid state

  function resetTracking() {
    while (OPEN_TRACK_FRAMES.length > 0) {
      OPEN_TRACK_FRAMES.pop();
    }
    CURRENT_TRACKER = null;
    if (true /* DEBUG */) {
      return unwrap(resetTrackingTransaction)();
    }
  }
  function isTracking() {
    return CURRENT_TRACKER !== null;
  }
  function consumeTag(tag) {
    if (CURRENT_TRACKER !== null) {
      CURRENT_TRACKER.add(tag);
    }
  } //////////
  var FN = symbol('FN');
  var LAST_VALUE = symbol('LAST_VALUE');
  var TAG = symbol('TAG');
  var SNAPSHOT = symbol('SNAPSHOT');
  var DEBUG_LABEL = symbol('DEBUG_LABEL');
  function createCache(fn, debuggingLabel) {
    if (true /* DEBUG */ && !(typeof fn === 'function')) {
      throw new Error(`createCache() must be passed a function as its first parameter. Called with: ${String(fn)}`);
    }
    var cache = {
      [FN]: fn,
      [LAST_VALUE]: undefined,
      [TAG]: undefined,
      [SNAPSHOT]: -1
    };
    if (true /* DEBUG */) {
      cache[DEBUG_LABEL] = debuggingLabel;
    }
    return cache;
  }
  function getValue(cache) {
    assertCache(cache, 'getValue');
    var fn = cache[FN];
    var tag = cache[TAG];
    var snapshot = cache[SNAPSHOT];
    if (tag === undefined || !validateTag(tag, snapshot)) {
      beginTrackFrame();
      try {
        cache[LAST_VALUE] = fn();
      } finally {
        tag = endTrackFrame();
        cache[TAG] = tag;
        cache[SNAPSHOT] = valueForTag(tag);
        consumeTag(tag);
      }
    } else {
      consumeTag(tag);
    }
    return cache[LAST_VALUE];
  }
  function isConst(cache) {
    assertCache(cache, 'isConst');
    var tag = cache[TAG];
    assertTag(tag, cache);
    return isConstTag(tag);
  }
  function assertCache(value, fnName) {
    if (true /* DEBUG */ && !(typeof value === 'object' && value !== null && FN in value)) {
      throw new Error(`${fnName}() can only be used on an instance of a cache created with createCache(). Called with: ${String(value)}`);
    }
  } // replace this with `expect` when we can

  function assertTag(tag, cache) {
    if (true /* DEBUG */ && tag === undefined) {
      throw new Error(`isConst() can only be used on a cache once getValue() has been called at least once. Called with cache function:\n\n${String(cache[FN])}`);
    }
  } //////////
  // Legacy tracking APIs
  // track() shouldn't be necessary at all in the VM once the autotracking
  // refactors are merged, and we should generally be moving away from it. It may
  // be necessary in Ember for a while longer, but I think we'll be able to drop
  // it in favor of cache sooner rather than later.

  function track(callback, debugLabel) {
    beginTrackFrame(debugLabel);
    var tag;
    try {
      callback();
    } finally {
      tag = endTrackFrame();
    }
    return tag;
  } // untrack() is currently mainly used to handle places that were previously not
  // tracked, and that tracking now would cause backtracking rerender assertions.
  // I think once we move everyone forward onto modern APIs, we'll probably be
  // able to remove it, but I'm not sure yet.

  function untrack(callback) {
    beginUntrackFrame();
    try {
      return callback();
    } finally {
      endUntrackFrame();
    }
  }
  function trackedData(key, initializer) {
    var values = new WeakMap();
    var hasInitializer = typeof initializer === 'function';
    function getter(self) {
      consumeTag(tagFor(self, key));
      var value; // If the field has never been initialized, we should initialize it

      if (hasInitializer && !values.has(self)) {
        value = initializer.call(self);
        values.set(self, value);
      } else {
        value = values.get(self);
      }
      return value;
    }
    function setter(self, value) {
      dirtyTagFor(self, key);
      values.set(self, value);
    }
    return {
      getter,
      setter
    };
  }
  var GLIMMER_VALIDATOR_REGISTRATION = symbolFor('GLIMMER_VALIDATOR_REGISTRATION');
  var globalObj = getGlobal();
  if (globalObj[GLIMMER_VALIDATOR_REGISTRATION] === true) {
    throw new Error('The `@glimmer/validator` library has been included twice in this application. It could be different versions of the package, or the same version included twice by mistake. `@glimmer/validator` depends on having a single copy of the package in use at any time in an application, even if they are the same version. You must dedupe your build to remove the duplicate packages in order to prevent this error.');
  }
  globalObj[GLIMMER_VALIDATOR_REGISTRATION] = true;
});
define("@glimmer/vm", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.TemporaryRegister = _exports.SavedRegister = _exports.$v0 = _exports.$t1 = _exports.$t0 = _exports.$sp = _exports.$s1 = _exports.$s0 = _exports.$ra = _exports.$pc = _exports.$fp = void 0;
  _exports.isLowLevelRegister = isLowLevelRegister;
  _exports.isMachineOp = isMachineOp;
  _exports.isOp = isOp;
  /* This file is generated by build/debug.js */
  function isMachineOp(value) {
    return value >= 0 && value <= 15;
  }
  function isOp(value) {
    return value >= 16;
  }

  /**
   * Registers
   *
   * For the most part, these follows MIPS naming conventions, however the
   * register numbers are different.
   */
  // $0 or $pc (program counter): pointer into `program` for the next insturction; -1 means exit
  var $pc = 0; // $1 or $ra (return address): pointer into `program` for the return
  _exports.$pc = $pc;
  var $ra = 1; // $2 or $fp (frame pointer): pointer into the `evalStack` for the base of the stack
  _exports.$ra = $ra;
  var $fp = 2; // $3 or $sp (stack pointer): pointer into the `evalStack` for the top of the stack
  _exports.$fp = $fp;
  var $sp = 3; // $4-$5 or $s0-$s1 (saved): callee saved general-purpose registers
  _exports.$sp = $sp;
  var $s0 = 4;
  _exports.$s0 = $s0;
  var $s1 = 5; // $6-$7 or $t0-$t1 (temporaries): caller saved general-purpose registers
  _exports.$s1 = $s1;
  var $t0 = 6;
  _exports.$t0 = $t0;
  var $t1 = 7; // $8 or $v0 (return value)
  _exports.$t1 = $t1;
  var $v0 = 8;
  _exports.$v0 = $v0;
  function isLowLevelRegister(register) {
    return register <= $sp;
  }
  var SavedRegister;
  _exports.SavedRegister = SavedRegister;
  (function (SavedRegister) {
    SavedRegister[SavedRegister["s0"] = 4] = "s0";
    SavedRegister[SavedRegister["s1"] = 5] = "s1";
  })(SavedRegister || (_exports.SavedRegister = SavedRegister = {}));
  var TemporaryRegister;
  _exports.TemporaryRegister = TemporaryRegister;
  (function (TemporaryRegister) {
    TemporaryRegister[TemporaryRegister["t0"] = 6] = "t0";
    TemporaryRegister[TemporaryRegister["t1"] = 7] = "t1";
  })(TemporaryRegister || (_exports.TemporaryRegister = TemporaryRegister = {}));
});
define("@glimmer/wire-format", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.getStringFromValue = getStringFromValue;
  _exports.is = is;
  _exports.isArgument = isArgument;
  _exports.isAttribute = isAttribute;
  _exports.isGet = _exports.isFlushElement = void 0;
  _exports.isHelper = isHelper;
  _exports.isStringLiteral = isStringLiteral;
  function is(variant) {
    return function (value) {
      return Array.isArray(value) && value[0] === variant;
    };
  } // Statements

  var isFlushElement = is(12
  /* FlushElement */);
  _exports.isFlushElement = isFlushElement;
  function isAttribute(val) {
    return val[0] === 14
    /* StaticAttr */ || val[0] === 15
    /* DynamicAttr */ || val[0] === 22
    /* TrustingDynamicAttr */ || val[0] === 16
    /* ComponentAttr */ || val[0] === 24
    /* StaticComponentAttr */ || val[0] === 23
    /* TrustingComponentAttr */ || val[0] === 17
    /* AttrSplat */ || val[0] === 4
    /* Modifier */;
  }

  function isStringLiteral(expr) {
    return typeof expr === 'string';
  }
  function getStringFromValue(expr) {
    return expr;
  }
  function isArgument(val) {
    return val[0] === 21
    /* StaticArg */ || val[0] === 20
    /* DynamicArg */;
  }

  function isHelper(expr) {
    return Array.isArray(expr) && expr[0] === 28
    /* Call */;
  } // Expressions

  var isGet = is(30
  /* GetSymbol */);
  _exports.isGet = isGet;
});
define("@simple-dom/document", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var EMPTY_ATTRS = [];
  function indexOfAttribute(attributes, namespaceURI, localName) {
    for (var i = 0; i < attributes.length; i++) {
      var attr = attributes[i];
      if (attr.namespaceURI === namespaceURI && attr.localName === localName) {
        return i;
      }
    }
    return -1;
  }
  function adjustAttrName(namespaceURI, localName) {
    return namespaceURI === "http://www.w3.org/1999/xhtml" /* HTML */ ? localName.toLowerCase() : localName;
  }
  function getAttribute(attributes, namespaceURI, localName) {
    var index = indexOfAttribute(attributes, namespaceURI, localName);
    return index === -1 ? null : attributes[index].value;
  }
  function removeAttribute(attributes, namespaceURI, localName) {
    var index = indexOfAttribute(attributes, namespaceURI, localName);
    if (index !== -1) {
      attributes.splice(index, 1);
    }
  }
  // https://dom.spec.whatwg.org/#dom-element-setattributens
  function setAttribute(element, namespaceURI, prefix, localName, value) {
    if (typeof value !== 'string') {
      value = '' + value;
    }
    var {
      attributes
    } = element;
    if (attributes === EMPTY_ATTRS) {
      attributes = element.attributes = [];
    } else {
      var index = indexOfAttribute(attributes, namespaceURI, localName);
      if (index !== -1) {
        attributes[index].value = value;
        return;
      }
    }
    attributes.push({
      localName,
      name: prefix === null ? localName : prefix + ':' + localName,
      namespaceURI,
      prefix,
      specified: true,
      value
    });
  }
  class ChildNodes {
    constructor(node) {
      this.node = node;
      this.stale = true;
      this._length = 0;
    }
    get length() {
      if (this.stale) {
        this.stale = false;
        var len = 0;
        var child = this.node.firstChild;
        for (; child !== null; len++) {
          this[len] = child;
          child = child.nextSibling;
        }
        var oldLen = this._length;
        this._length = len;
        for (; len < oldLen; len++) {
          delete this[len];
        }
      }
      return this._length;
    }
    item(index) {
      return index < this.length ? this[index] : null;
    }
  }
  function cloneNode(node, deep) {
    var clone = nodeFrom(node);
    if (deep) {
      var child = node.firstChild;
      var nextChild = child;
      while (child !== null) {
        nextChild = child.nextSibling;
        clone.appendChild(child.cloneNode(true));
        child = nextChild;
      }
    }
    return clone;
  }
  function nodeFrom(node) {
    var namespaceURI;
    if (node.nodeType === 1 /* ELEMENT_NODE */) {
      namespaceURI = node.namespaceURI;
    }
    var clone = new SimpleNodeImpl(node.ownerDocument, node.nodeType, node.nodeName, node.nodeValue, namespaceURI);
    if (node.nodeType === 1 /* ELEMENT_NODE */) {
      clone.attributes = copyAttrs(node.attributes);
    }
    return clone;
  }
  function copyAttrs(attrs) {
    if (attrs === EMPTY_ATTRS) {
      return EMPTY_ATTRS;
    }
    var copy = [];
    for (var i = 0; i < attrs.length; i++) {
      var attr = attrs[i];
      copy.push({
        localName: attr.localName,
        name: attr.name,
        namespaceURI: attr.namespaceURI,
        prefix: attr.prefix,
        specified: true,
        value: attr.value
      });
    }
    return copy;
  }
  function insertBefore(parentNode, newChild, refChild) {
    invalidate(parentNode);
    insertBetween(parentNode, newChild, refChild === null ? parentNode.lastChild : refChild.previousSibling, refChild);
  }
  function removeChild(parentNode, oldChild) {
    invalidate(parentNode);
    removeBetween(parentNode, oldChild, oldChild.previousSibling, oldChild.nextSibling);
  }
  function invalidate(parentNode) {
    var childNodes = parentNode._childNodes;
    if (childNodes !== undefined) {
      childNodes.stale = true;
    }
  }
  function insertBetween(parentNode, newChild, previousSibling, nextSibling) {
    if (newChild.nodeType === 11 /* DOCUMENT_FRAGMENT_NODE */) {
      insertFragment(newChild, parentNode, previousSibling, nextSibling);
      return;
    }
    if (newChild.parentNode !== null) {
      removeChild(newChild.parentNode, newChild);
    }
    newChild.parentNode = parentNode;
    newChild.previousSibling = previousSibling;
    newChild.nextSibling = nextSibling;
    if (previousSibling === null) {
      parentNode.firstChild = newChild;
    } else {
      previousSibling.nextSibling = newChild;
    }
    if (nextSibling === null) {
      parentNode.lastChild = newChild;
    } else {
      nextSibling.previousSibling = newChild;
    }
  }
  function removeBetween(parentNode, oldChild, previousSibling, nextSibling) {
    oldChild.parentNode = null;
    oldChild.previousSibling = null;
    oldChild.nextSibling = null;
    if (previousSibling === null) {
      parentNode.firstChild = nextSibling;
    } else {
      previousSibling.nextSibling = nextSibling;
    }
    if (nextSibling === null) {
      parentNode.lastChild = previousSibling;
    } else {
      nextSibling.previousSibling = previousSibling;
    }
  }
  function insertFragment(fragment, parentNode, previousSibling, nextSibling) {
    var firstChild = fragment.firstChild;
    if (firstChild === null) {
      return;
    }
    fragment.firstChild = null;
    fragment.lastChild = null;
    var lastChild = firstChild;
    var newChild = firstChild;
    firstChild.previousSibling = previousSibling;
    if (previousSibling === null) {
      parentNode.firstChild = firstChild;
    } else {
      previousSibling.nextSibling = firstChild;
    }
    while (newChild !== null) {
      newChild.parentNode = parentNode;
      lastChild = newChild;
      newChild = newChild.nextSibling;
    }
    lastChild.nextSibling = nextSibling;
    if (nextSibling === null) {
      parentNode.lastChild = lastChild;
    } else {
      nextSibling.previousSibling = lastChild;
    }
  }
  function parseQualifiedName(qualifiedName) {
    var localName = qualifiedName;
    var prefix = null;
    var i = qualifiedName.indexOf(':');
    if (i !== -1) {
      prefix = qualifiedName.slice(0, i);
      localName = qualifiedName.slice(i + 1);
    }
    return [prefix, localName];
  }
  class SimpleNodeImpl {
    constructor(ownerDocument, nodeType, nodeName, nodeValue, namespaceURI) {
      this.ownerDocument = ownerDocument;
      this.nodeType = nodeType;
      this.nodeName = nodeName;
      this.nodeValue = nodeValue;
      this.namespaceURI = namespaceURI;
      this.parentNode = null;
      this.previousSibling = null;
      this.nextSibling = null;
      this.firstChild = null;
      this.lastChild = null;
      this.attributes = EMPTY_ATTRS;
      /**
       * @internal
       */
      this._childNodes = undefined;
    }
    get tagName() {
      return this.nodeName;
    }
    get childNodes() {
      var children = this._childNodes;
      if (children === undefined) {
        children = this._childNodes = new ChildNodes(this);
      }
      return children;
    }
    cloneNode(deep) {
      return cloneNode(this, deep === true);
    }
    appendChild(newChild) {
      insertBefore(this, newChild, null);
      return newChild;
    }
    insertBefore(newChild, refChild) {
      insertBefore(this, newChild, refChild);
      return newChild;
    }
    removeChild(oldChild) {
      removeChild(this, oldChild);
      return oldChild;
    }
    insertAdjacentHTML(position, html) {
      var raw = new SimpleNodeImpl(this.ownerDocument, -1 /* RAW_NODE */, '#raw', html, void 0);
      var parentNode;
      var nextSibling;
      switch (position) {
        case 'beforebegin':
          parentNode = this.parentNode;
          nextSibling = this;
          break;
        case 'afterbegin':
          parentNode = this;
          nextSibling = this.firstChild;
          break;
        case 'beforeend':
          parentNode = this;
          nextSibling = null;
          break;
        case 'afterend':
          parentNode = this.parentNode;
          nextSibling = this.nextSibling;
          break;
        default:
          throw new Error('invalid position');
      }
      if (parentNode === null) {
        throw new Error(`${position} requires a parentNode`);
      }
      insertBefore(parentNode, raw, nextSibling);
    }
    getAttribute(name) {
      var localName = adjustAttrName(this.namespaceURI, name);
      return getAttribute(this.attributes, null, localName);
    }
    getAttributeNS(namespaceURI, localName) {
      return getAttribute(this.attributes, namespaceURI, localName);
    }
    setAttribute(name, value) {
      var localName = adjustAttrName(this.namespaceURI, name);
      setAttribute(this, null, null, localName, value);
    }
    setAttributeNS(namespaceURI, qualifiedName, value) {
      var [prefix, localName] = parseQualifiedName(qualifiedName);
      setAttribute(this, namespaceURI, prefix, localName, value);
    }
    removeAttribute(name) {
      var localName = adjustAttrName(this.namespaceURI, name);
      removeAttribute(this.attributes, null, localName);
    }
    removeAttributeNS(namespaceURI, localName) {
      removeAttribute(this.attributes, namespaceURI, localName);
    }
    get doctype() {
      return this.firstChild;
    }
    get documentElement() {
      return this.lastChild;
    }
    get head() {
      return this.documentElement.firstChild;
    }
    get body() {
      return this.documentElement.lastChild;
    }
    createElement(name) {
      return new SimpleNodeImpl(this, 1 /* ELEMENT_NODE */, name.toUpperCase(), null, "http://www.w3.org/1999/xhtml" /* HTML */);
    }

    createElementNS(namespace, qualifiedName) {
      // Node name is case-preserving in XML contexts, but returns canonical uppercase form in HTML contexts
      // https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-104682815
      var nodeName = namespace === "http://www.w3.org/1999/xhtml" /* HTML */ ? qualifiedName.toUpperCase() : qualifiedName;
      // we don't care to parse the qualified name because we only support HTML documents
      // which don't support prefixed elements
      return new SimpleNodeImpl(this, 1 /* ELEMENT_NODE */, nodeName, null, namespace);
    }
    createTextNode(text) {
      return new SimpleNodeImpl(this, 3 /* TEXT_NODE */, '#text', text, void 0);
    }
    createComment(text) {
      return new SimpleNodeImpl(this, 8 /* COMMENT_NODE */, '#comment', text, void 0);
    }
    /**
     * Backwards compat
     * @deprecated
     */
    createRawHTMLSection(text) {
      return new SimpleNodeImpl(this, -1 /* RAW_NODE */, '#raw', text, void 0);
    }
    createDocumentFragment() {
      return new SimpleNodeImpl(this, 11 /* DOCUMENT_FRAGMENT_NODE */, '#document-fragment', null, void 0);
    }
  }
  function createHTMLDocument() {
    // dom.d.ts types ownerDocument as Document but for a document ownerDocument is null
    var document = new SimpleNodeImpl(null, 9 /* DOCUMENT_NODE */, '#document', null, "http://www.w3.org/1999/xhtml" /* HTML */);
    var doctype = new SimpleNodeImpl(document, 10 /* DOCUMENT_TYPE_NODE */, 'html', null, "http://www.w3.org/1999/xhtml" /* HTML */);
    var html = new SimpleNodeImpl(document, 1 /* ELEMENT_NODE */, 'HTML', null, "http://www.w3.org/1999/xhtml" /* HTML */);
    var head = new SimpleNodeImpl(document, 1 /* ELEMENT_NODE */, 'HEAD', null, "http://www.w3.org/1999/xhtml" /* HTML */);
    var body = new SimpleNodeImpl(document, 1 /* ELEMENT_NODE */, 'BODY', null, "http://www.w3.org/1999/xhtml" /* HTML */);
    html.appendChild(head);
    html.appendChild(body);
    document.appendChild(doctype);
    document.appendChild(html);
    return document;
  }
  var _default = createHTMLDocument;
  _exports.default = _default;
});
define("backburner", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.buildPlatform = buildPlatform;
  _exports.default = void 0;
  var SET_TIMEOUT = setTimeout;
  var NOOP = () => {};
  function buildNext(flush) {
    // Using "promises first" here to:
    //
    // 1) Ensure more consistent experience on browsers that
    //    have differently queued microtasks (separate queues for
    //    MutationObserver vs Promises).
    // 2) Ensure better debugging experiences (it shows up in Chrome
    //    call stack as "Promise.then (async)") which is more consistent
    //    with user expectations
    //
    // When Promise is unavailable use MutationObserver (mostly so that we
    // still get microtasks on IE11), and when neither MutationObserver and
    // Promise are present use a plain old setTimeout.
    if (typeof Promise === 'function') {
      var autorunPromise = Promise.resolve();
      return () => autorunPromise.then(flush);
    } else if (typeof MutationObserver === 'function') {
      var iterations = 0;
      var observer = new MutationObserver(flush);
      var node = document.createTextNode('');
      observer.observe(node, {
        characterData: true
      });
      return () => {
        iterations = ++iterations % 2;
        node.data = '' + iterations;
        return iterations;
      };
    } else {
      return () => SET_TIMEOUT(flush, 0);
    }
  }
  function buildPlatform(flush) {
    var clearNext = NOOP;
    return {
      setTimeout(fn, ms) {
        return setTimeout(fn, ms);
      },
      clearTimeout(timerId) {
        return clearTimeout(timerId);
      },
      now() {
        return Date.now();
      },
      next: buildNext(flush),
      clearNext
    };
  }
  var NUMBER = /\d+/;
  var TIMERS_OFFSET = 6;
  function isCoercableNumber(suspect) {
    var type = typeof suspect;
    return type === 'number' && suspect === suspect || type === 'string' && NUMBER.test(suspect);
  }
  function getOnError(options) {
    return options.onError || options.onErrorTarget && options.onErrorTarget[options.onErrorMethod];
  }
  function findItem(target, method, collection) {
    var index = -1;
    for (var i = 0, l = collection.length; i < l; i += 4) {
      if (collection[i] === target && collection[i + 1] === method) {
        index = i;
        break;
      }
    }
    return index;
  }
  function findTimerItem(target, method, collection) {
    var index = -1;
    for (var i = 2, l = collection.length; i < l; i += 6) {
      if (collection[i] === target && collection[i + 1] === method) {
        index = i - 2;
        break;
      }
    }
    return index;
  }
  function getQueueItems(items, queueItemLength, queueItemPositionOffset) {
    if (queueItemPositionOffset === void 0) {
      queueItemPositionOffset = 0;
    }
    var queueItems = [];
    for (var i = 0; i < items.length; i += queueItemLength) {
      var maybeError = items[i + 3 /* stack */ + queueItemPositionOffset];
      var queueItem = {
        target: items[i + 0 /* target */ + queueItemPositionOffset],
        method: items[i + 1 /* method */ + queueItemPositionOffset],
        args: items[i + 2 /* args */ + queueItemPositionOffset],
        stack: maybeError !== undefined && 'stack' in maybeError ? maybeError.stack : ''
      };
      queueItems.push(queueItem);
    }
    return queueItems;
  }
  function binarySearch(time, timers) {
    var start = 0;
    var end = timers.length - TIMERS_OFFSET;
    var middle;
    var l;
    while (start < end) {
      // since timers is an array of pairs 'l' will always
      // be an integer
      l = (end - start) / TIMERS_OFFSET;
      // compensate for the index in case even number
      // of pairs inside timers
      middle = start + l - l % TIMERS_OFFSET;
      if (time >= timers[middle]) {
        start = middle + TIMERS_OFFSET;
      } else {
        end = middle;
      }
    }
    return time >= timers[start] ? start + TIMERS_OFFSET : start;
  }
  var QUEUE_ITEM_LENGTH = 4;
  class Queue {
    constructor(name, options, globalOptions) {
      if (options === void 0) {
        options = {};
      }
      if (globalOptions === void 0) {
        globalOptions = {};
      }
      this._queueBeingFlushed = [];
      this.targetQueues = new Map();
      this.index = 0;
      this._queue = [];
      this.name = name;
      this.options = options;
      this.globalOptions = globalOptions;
    }
    stackFor(index) {
      if (index < this._queue.length) {
        var entry = this._queue[index * 3 + QUEUE_ITEM_LENGTH];
        if (entry) {
          return entry.stack;
        } else {
          return null;
        }
      }
    }
    flush(sync) {
      var {
        before,
        after
      } = this.options;
      var target;
      var method;
      var args;
      var errorRecordedForStack;
      this.targetQueues.clear();
      if (this._queueBeingFlushed.length === 0) {
        this._queueBeingFlushed = this._queue;
        this._queue = [];
      }
      if (before !== undefined) {
        before();
      }
      var invoke;
      var queueItems = this._queueBeingFlushed;
      if (queueItems.length > 0) {
        var onError = getOnError(this.globalOptions);
        invoke = onError ? this.invokeWithOnError : this.invoke;
        for (var i = this.index; i < queueItems.length; i += QUEUE_ITEM_LENGTH) {
          this.index += QUEUE_ITEM_LENGTH;
          method = queueItems[i + 1];
          // method could have been nullified / canceled during flush
          if (method !== null) {
            //
            //    ** Attention intrepid developer **
            //
            //    To find out the stack of this task when it was scheduled onto
            //    the run loop, add the following to your app.js:
            //
            //    Ember.run.backburner.DEBUG = true; // NOTE: This slows your app, don't leave it on in production.
            //
            //    Once that is in place, when you are at a breakpoint and navigate
            //    here in the stack explorer, you can look at `errorRecordedForStack.stack`,
            //    which will be the captured stack when this job was scheduled.
            //
            //    One possible long-term solution is the following Chrome issue:
            //       https://bugs.chromium.org/p/chromium/issues/detail?id=332624
            //
            target = queueItems[i];
            args = queueItems[i + 2];
            errorRecordedForStack = queueItems[i + 3]; // Debugging assistance
            invoke(target, method, args, onError, errorRecordedForStack);
          }
          if (this.index !== this._queueBeingFlushed.length && this.globalOptions.mustYield && this.globalOptions.mustYield()) {
            return 1 /* Pause */;
          }
        }
      }

      if (after !== undefined) {
        after();
      }
      this._queueBeingFlushed.length = 0;
      this.index = 0;
      if (sync !== false && this._queue.length > 0) {
        // check if new items have been added
        this.flush(true);
      }
    }
    hasWork() {
      return this._queueBeingFlushed.length > 0 || this._queue.length > 0;
    }
    cancel(_ref) {
      var {
        target,
        method
      } = _ref;
      var queue = this._queue;
      var targetQueueMap = this.targetQueues.get(target);
      if (targetQueueMap !== undefined) {
        targetQueueMap.delete(method);
      }
      var index = findItem(target, method, queue);
      if (index > -1) {
        queue.splice(index, QUEUE_ITEM_LENGTH);
        return true;
      }
      // if not found in current queue
      // could be in the queue that is being flushed
      queue = this._queueBeingFlushed;
      index = findItem(target, method, queue);
      if (index > -1) {
        queue[index + 1] = null;
        return true;
      }
      return false;
    }
    push(target, method, args, stack) {
      this._queue.push(target, method, args, stack);
      return {
        queue: this,
        target,
        method
      };
    }
    pushUnique(target, method, args, stack) {
      var localQueueMap = this.targetQueues.get(target);
      if (localQueueMap === undefined) {
        localQueueMap = new Map();
        this.targetQueues.set(target, localQueueMap);
      }
      var index = localQueueMap.get(method);
      if (index === undefined) {
        var queueIndex = this._queue.push(target, method, args, stack) - QUEUE_ITEM_LENGTH;
        localQueueMap.set(method, queueIndex);
      } else {
        var queue = this._queue;
        queue[index + 2] = args; // replace args
        queue[index + 3] = stack; // replace stack
      }

      return {
        queue: this,
        target,
        method
      };
    }
    _getDebugInfo(debugEnabled) {
      if (debugEnabled) {
        var debugInfo = getQueueItems(this._queue, QUEUE_ITEM_LENGTH);
        return debugInfo;
      }
      return undefined;
    }
    invoke(target, method, args /*, onError, errorRecordedForStack */) {
      if (args === undefined) {
        method.call(target);
      } else {
        method.apply(target, args);
      }
    }
    invokeWithOnError(target, method, args, onError, errorRecordedForStack) {
      try {
        if (args === undefined) {
          method.call(target);
        } else {
          method.apply(target, args);
        }
      } catch (error) {
        onError(error, errorRecordedForStack);
      }
    }
  }
  class DeferredActionQueues {
    constructor(queueNames, options) {
      if (queueNames === void 0) {
        queueNames = [];
      }
      this.queues = {};
      this.queueNameIndex = 0;
      this.queueNames = queueNames;
      queueNames.reduce(function (queues, queueName) {
        queues[queueName] = new Queue(queueName, options[queueName], options);
        return queues;
      }, this.queues);
    }
    /**
     * @method schedule
     * @param {String} queueName
     * @param {Any} target
     * @param {Any} method
     * @param {Any} args
     * @param {Boolean} onceFlag
     * @param {Any} stack
     * @return queue
     */
    schedule(queueName, target, method, args, onceFlag, stack) {
      var queues = this.queues;
      var queue = queues[queueName];
      if (queue === undefined) {
        throw new Error(`You attempted to schedule an action in a queue (${queueName}) that doesn\'t exist`);
      }
      if (method === undefined || method === null) {
        throw new Error(`You attempted to schedule an action in a queue (${queueName}) for a method that doesn\'t exist`);
      }
      this.queueNameIndex = 0;
      if (onceFlag) {
        return queue.pushUnique(target, method, args, stack);
      } else {
        return queue.push(target, method, args, stack);
      }
    }
    /**
     * DeferredActionQueues.flush() calls Queue.flush()
     *
     * @method flush
     * @param {Boolean} fromAutorun
     */
    flush(fromAutorun) {
      if (fromAutorun === void 0) {
        fromAutorun = false;
      }
      var queue;
      var queueName;
      var numberOfQueues = this.queueNames.length;
      while (this.queueNameIndex < numberOfQueues) {
        queueName = this.queueNames[this.queueNameIndex];
        queue = this.queues[queueName];
        if (queue.hasWork() === false) {
          this.queueNameIndex++;
          if (fromAutorun && this.queueNameIndex < numberOfQueues) {
            return 1 /* Pause */;
          }
        } else {
          if (queue.flush(false /* async */) === 1 /* Pause */) {
            return 1 /* Pause */;
          }
        }
      }
    }
    /**
     * Returns debug information for the current queues.
     *
     * @method _getDebugInfo
     * @param {Boolean} debugEnabled
     * @returns {IDebugInfo | undefined}
     */
    _getDebugInfo(debugEnabled) {
      if (debugEnabled) {
        var debugInfo = {};
        var queue;
        var queueName;
        var numberOfQueues = this.queueNames.length;
        var i = 0;
        while (i < numberOfQueues) {
          queueName = this.queueNames[i];
          queue = this.queues[queueName];
          debugInfo[queueName] = queue._getDebugInfo(debugEnabled);
          i++;
        }
        return debugInfo;
      }
      return;
    }
  }
  function iteratorDrain(fn) {
    var iterator = fn();
    var result = iterator.next();
    while (result.done === false) {
      result.value();
      result = iterator.next();
    }
  }
  var noop = function () {};
  var DISABLE_SCHEDULE = Object.freeze([]);
  function parseArgs() {
    var length = arguments.length;
    var args;
    var method;
    var target;
    if (length === 0) ;else if (length === 1) {
      target = null;
      method = arguments[0];
    } else {
      var argsIndex = 2;
      var methodOrTarget = arguments[0];
      var methodOrArgs = arguments[1];
      var type = typeof methodOrArgs;
      if (type === 'function') {
        target = methodOrTarget;
        method = methodOrArgs;
      } else if (methodOrTarget !== null && type === 'string' && methodOrArgs in methodOrTarget) {
        target = methodOrTarget;
        method = target[methodOrArgs];
      } else if (typeof methodOrTarget === 'function') {
        argsIndex = 1;
        target = null;
        method = methodOrTarget;
      }
      if (length > argsIndex) {
        var len = length - argsIndex;
        args = new Array(len);
        for (var i = 0; i < len; i++) {
          args[i] = arguments[i + argsIndex];
        }
      }
    }
    return [target, method, args];
  }
  function parseTimerArgs() {
    var [target, method, args] = parseArgs(...arguments);
    var wait = 0;
    var length = args !== undefined ? args.length : 0;
    if (length > 0) {
      var last = args[length - 1];
      if (isCoercableNumber(last)) {
        wait = parseInt(args.pop(), 10);
      }
    }
    return [target, method, args, wait];
  }
  function parseDebounceArgs() {
    var target;
    var method;
    var isImmediate;
    var args;
    var wait;
    if (arguments.length === 2) {
      method = arguments[0];
      wait = arguments[1];
      target = null;
    } else {
      [target, method, args] = parseArgs(...arguments);
      if (args === undefined) {
        wait = 0;
      } else {
        wait = args.pop();
        if (!isCoercableNumber(wait)) {
          isImmediate = wait === true;
          wait = args.pop();
        }
      }
    }
    wait = parseInt(wait, 10);
    return [target, method, args, wait, isImmediate];
  }
  var UUID = 0;
  var beginCount = 0;
  var endCount = 0;
  var beginEventCount = 0;
  var endEventCount = 0;
  var runCount = 0;
  var joinCount = 0;
  var deferCount = 0;
  var scheduleCount = 0;
  var scheduleIterableCount = 0;
  var deferOnceCount = 0;
  var scheduleOnceCount = 0;
  var setTimeoutCount = 0;
  var laterCount = 0;
  var throttleCount = 0;
  var debounceCount = 0;
  var cancelTimersCount = 0;
  var cancelCount = 0;
  var autorunsCreatedCount = 0;
  var autorunsCompletedCount = 0;
  var deferredActionQueuesCreatedCount = 0;
  var nestedDeferredActionQueuesCreated = 0;
  class Backburner {
    constructor(queueNames, options) {
      this.DEBUG = false;
      this.currentInstance = null;
      this.instanceStack = [];
      this._eventCallbacks = {
        end: [],
        begin: []
      };
      this._timerTimeoutId = null;
      this._timers = [];
      this._autorun = false;
      this._autorunStack = null;
      this.queueNames = queueNames;
      this.options = options || {};
      if (typeof this.options.defaultQueue === 'string') {
        this._defaultQueue = this.options.defaultQueue;
      } else {
        this._defaultQueue = this.queueNames[0];
      }
      this._onBegin = this.options.onBegin || noop;
      this._onEnd = this.options.onEnd || noop;
      this._boundRunExpiredTimers = this._runExpiredTimers.bind(this);
      this._boundAutorunEnd = () => {
        autorunsCompletedCount++;
        // if the autorun was already flushed, do nothing
        if (this._autorun === false) {
          return;
        }
        this._autorun = false;
        this._autorunStack = null;
        this._end(true /* fromAutorun */);
      };

      var builder = this.options._buildPlatform || buildPlatform;
      this._platform = builder(this._boundAutorunEnd);
    }
    get counters() {
      return {
        begin: beginCount,
        end: endCount,
        events: {
          begin: beginEventCount,
          end: endEventCount
        },
        autoruns: {
          created: autorunsCreatedCount,
          completed: autorunsCompletedCount
        },
        run: runCount,
        join: joinCount,
        defer: deferCount,
        schedule: scheduleCount,
        scheduleIterable: scheduleIterableCount,
        deferOnce: deferOnceCount,
        scheduleOnce: scheduleOnceCount,
        setTimeout: setTimeoutCount,
        later: laterCount,
        throttle: throttleCount,
        debounce: debounceCount,
        cancelTimers: cancelTimersCount,
        cancel: cancelCount,
        loops: {
          total: deferredActionQueuesCreatedCount,
          nested: nestedDeferredActionQueuesCreated
        }
      };
    }
    get defaultQueue() {
      return this._defaultQueue;
    }
    /*
      @method begin
      @return instantiated class DeferredActionQueues
    */
    begin() {
      beginCount++;
      var options = this.options;
      var previousInstance = this.currentInstance;
      var current;
      if (this._autorun !== false) {
        current = previousInstance;
        this._cancelAutorun();
      } else {
        if (previousInstance !== null) {
          nestedDeferredActionQueuesCreated++;
          this.instanceStack.push(previousInstance);
        }
        deferredActionQueuesCreatedCount++;
        current = this.currentInstance = new DeferredActionQueues(this.queueNames, options);
        beginEventCount++;
        this._trigger('begin', current, previousInstance);
      }
      this._onBegin(current, previousInstance);
      return current;
    }
    end() {
      endCount++;
      this._end(false);
    }
    on(eventName, callback) {
      if (typeof callback !== 'function') {
        throw new TypeError(`Callback must be a function`);
      }
      var callbacks = this._eventCallbacks[eventName];
      if (callbacks !== undefined) {
        callbacks.push(callback);
      } else {
        throw new TypeError(`Cannot on() event ${eventName} because it does not exist`);
      }
    }
    off(eventName, callback) {
      var callbacks = this._eventCallbacks[eventName];
      if (!eventName || callbacks === undefined) {
        throw new TypeError(`Cannot off() event ${eventName} because it does not exist`);
      }
      var callbackFound = false;
      if (callback) {
        for (var i = 0; i < callbacks.length; i++) {
          if (callbacks[i] === callback) {
            callbackFound = true;
            callbacks.splice(i, 1);
            i--;
          }
        }
      }
      if (!callbackFound) {
        throw new TypeError(`Cannot off() callback that does not exist`);
      }
    }
    run() {
      runCount++;
      var [target, method, args] = parseArgs(...arguments);
      return this._run(target, method, args);
    }
    join() {
      joinCount++;
      var [target, method, args] = parseArgs(...arguments);
      return this._join(target, method, args);
    }
    /**
     * @deprecated please use schedule instead.
     */
    defer(queueName, target, method) {
      deferCount++;
      for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
        args[_key - 3] = arguments[_key];
      }
      return this.schedule(queueName, target, method, ...args);
    }
    schedule(queueName) {
      scheduleCount++;
      for (var _len2 = arguments.length, _args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        _args[_key2 - 1] = arguments[_key2];
      }
      var [target, method, args] = parseArgs(..._args);
      var stack = this.DEBUG ? new Error() : undefined;
      return this._ensureInstance().schedule(queueName, target, method, args, false, stack);
    }
    /*
      Defer the passed iterable of functions to run inside the specified queue.
         @method scheduleIterable
      @param {String} queueName
      @param {Iterable} an iterable of functions to execute
      @return method result
    */
    scheduleIterable(queueName, iterable) {
      scheduleIterableCount++;
      var stack = this.DEBUG ? new Error() : undefined;
      return this._ensureInstance().schedule(queueName, null, iteratorDrain, [iterable], false, stack);
    }
    /**
     * @deprecated please use scheduleOnce instead.
     */
    deferOnce(queueName, target, method) {
      deferOnceCount++;
      for (var _len3 = arguments.length, args = new Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {
        args[_key3 - 3] = arguments[_key3];
      }
      return this.scheduleOnce(queueName, target, method, ...args);
    }
    scheduleOnce(queueName) {
      scheduleOnceCount++;
      for (var _len4 = arguments.length, _args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        _args[_key4 - 1] = arguments[_key4];
      }
      var [target, method, args] = parseArgs(..._args);
      var stack = this.DEBUG ? new Error() : undefined;
      return this._ensureInstance().schedule(queueName, target, method, args, true, stack);
    }
    setTimeout() {
      setTimeoutCount++;
      return this.later(...arguments);
    }
    later() {
      laterCount++;
      var [target, method, args, wait] = parseTimerArgs(...arguments);
      return this._later(target, method, args, wait);
    }
    throttle() {
      throttleCount++;
      var [target, method, args, wait, isImmediate = true] = parseDebounceArgs(...arguments);
      var index = findTimerItem(target, method, this._timers);
      var timerId;
      if (index === -1) {
        timerId = this._later(target, method, isImmediate ? DISABLE_SCHEDULE : args, wait);
        if (isImmediate) {
          this._join(target, method, args);
        }
      } else {
        timerId = this._timers[index + 1];
        var argIndex = index + 4;
        if (this._timers[argIndex] !== DISABLE_SCHEDULE) {
          this._timers[argIndex] = args;
        }
      }
      return timerId;
    }
    debounce() {
      debounceCount++;
      var [target, method, args, wait, isImmediate = false] = parseDebounceArgs(...arguments);
      var _timers = this._timers;
      var index = findTimerItem(target, method, _timers);
      var timerId;
      if (index === -1) {
        timerId = this._later(target, method, isImmediate ? DISABLE_SCHEDULE : args, wait);
        if (isImmediate) {
          this._join(target, method, args);
        }
      } else {
        var executeAt = this._platform.now() + wait;
        var argIndex = index + 4;
        if (_timers[argIndex] === DISABLE_SCHEDULE) {
          args = DISABLE_SCHEDULE;
        }
        timerId = _timers[index + 1];
        var i = binarySearch(executeAt, _timers);
        if (index + TIMERS_OFFSET === i) {
          _timers[index] = executeAt;
          _timers[argIndex] = args;
        } else {
          var stack = this._timers[index + 5];
          this._timers.splice(i, 0, executeAt, timerId, target, method, args, stack);
          this._timers.splice(index, TIMERS_OFFSET);
        }
        if (index === 0) {
          this._reinstallTimerTimeout();
        }
      }
      return timerId;
    }
    cancelTimers() {
      cancelTimersCount++;
      this._clearTimerTimeout();
      this._timers = [];
      this._cancelAutorun();
    }
    hasTimers() {
      return this._timers.length > 0 || this._autorun;
    }
    cancel(timer) {
      cancelCount++;
      if (timer === null || timer === undefined) {
        return false;
      }
      var timerType = typeof timer;
      if (timerType === 'number') {
        // we're cancelling a setTimeout or throttle or debounce
        return this._cancelLaterTimer(timer);
      } else if (timerType === 'object' && timer.queue && timer.method) {
        // we're cancelling a deferOnce
        return timer.queue.cancel(timer);
      }
      return false;
    }
    ensureInstance() {
      this._ensureInstance();
    }
    /**
     * Returns debug information related to the current instance of Backburner
     *
     * @method getDebugInfo
     * @returns {Object | undefined} Will return and Object containing debug information if
     * the DEBUG flag is set to true on the current instance of Backburner, else undefined.
     */
    getDebugInfo() {
      if (this.DEBUG) {
        return {
          autorun: this._autorunStack,
          counters: this.counters,
          timers: getQueueItems(this._timers, TIMERS_OFFSET, 2),
          instanceStack: [this.currentInstance, ...this.instanceStack].map(deferredActionQueue => deferredActionQueue && deferredActionQueue._getDebugInfo(this.DEBUG))
        };
      }
      return undefined;
    }
    _end(fromAutorun) {
      var currentInstance = this.currentInstance;
      var nextInstance = null;
      if (currentInstance === null) {
        throw new Error(`end called without begin`);
      }
      // Prevent double-finally bug in Safari 6.0.2 and iOS 6
      // This bug appears to be resolved in Safari 6.0.5 and iOS 7
      var finallyAlreadyCalled = false;
      var result;
      try {
        result = currentInstance.flush(fromAutorun);
      } finally {
        if (!finallyAlreadyCalled) {
          finallyAlreadyCalled = true;
          if (result === 1 /* Pause */) {
            var plannedNextQueue = this.queueNames[currentInstance.queueNameIndex];
            this._scheduleAutorun(plannedNextQueue);
          } else {
            this.currentInstance = null;
            if (this.instanceStack.length > 0) {
              nextInstance = this.instanceStack.pop();
              this.currentInstance = nextInstance;
            }
            this._trigger('end', currentInstance, nextInstance);
            this._onEnd(currentInstance, nextInstance);
          }
        }
      }
    }
    _join(target, method, args) {
      if (this.currentInstance === null) {
        return this._run(target, method, args);
      }
      if (target === undefined && args === undefined) {
        return method();
      } else {
        return method.apply(target, args);
      }
    }
    _run(target, method, args) {
      var onError = getOnError(this.options);
      this.begin();
      if (onError) {
        try {
          return method.apply(target, args);
        } catch (error) {
          onError(error);
        } finally {
          this.end();
        }
      } else {
        try {
          return method.apply(target, args);
        } finally {
          this.end();
        }
      }
    }
    _cancelAutorun() {
      if (this._autorun) {
        this._platform.clearNext();
        this._autorun = false;
        this._autorunStack = null;
      }
    }
    _later(target, method, args, wait) {
      var stack = this.DEBUG ? new Error() : undefined;
      var executeAt = this._platform.now() + wait;
      var id = UUID++;
      if (this._timers.length === 0) {
        this._timers.push(executeAt, id, target, method, args, stack);
        this._installTimerTimeout();
      } else {
        // find position to insert
        var i = binarySearch(executeAt, this._timers);
        this._timers.splice(i, 0, executeAt, id, target, method, args, stack);
        // always reinstall since it could be out of sync
        this._reinstallTimerTimeout();
      }
      return id;
    }
    _cancelLaterTimer(timer) {
      for (var i = 1; i < this._timers.length; i += TIMERS_OFFSET) {
        if (this._timers[i] === timer) {
          this._timers.splice(i - 1, TIMERS_OFFSET);
          if (i === 1) {
            this._reinstallTimerTimeout();
          }
          return true;
        }
      }
      return false;
    }
    /**
     Trigger an event. Supports up to two arguments. Designed around
     triggering transition events from one run loop instance to the
     next, which requires an argument for the  instance and then
     an argument for the next instance.
        @private
     @method _trigger
     @param {String} eventName
     @param {any} arg1
     @param {any} arg2
     */
    _trigger(eventName, arg1, arg2) {
      var callbacks = this._eventCallbacks[eventName];
      if (callbacks !== undefined) {
        for (var i = 0; i < callbacks.length; i++) {
          callbacks[i](arg1, arg2);
        }
      }
    }
    _runExpiredTimers() {
      this._timerTimeoutId = null;
      if (this._timers.length > 0) {
        this.begin();
        this._scheduleExpiredTimers();
        this.end();
      }
    }
    _scheduleExpiredTimers() {
      var timers = this._timers;
      var i = 0;
      var l = timers.length;
      var defaultQueue = this._defaultQueue;
      var n = this._platform.now();
      for (; i < l; i += TIMERS_OFFSET) {
        var executeAt = timers[i];
        if (executeAt > n) {
          break;
        }
        var args = timers[i + 4];
        if (args !== DISABLE_SCHEDULE) {
          var target = timers[i + 2];
          var method = timers[i + 3];
          var stack = timers[i + 5];
          this.currentInstance.schedule(defaultQueue, target, method, args, false, stack);
        }
      }
      timers.splice(0, i);
      this._installTimerTimeout();
    }
    _reinstallTimerTimeout() {
      this._clearTimerTimeout();
      this._installTimerTimeout();
    }
    _clearTimerTimeout() {
      if (this._timerTimeoutId === null) {
        return;
      }
      this._platform.clearTimeout(this._timerTimeoutId);
      this._timerTimeoutId = null;
    }
    _installTimerTimeout() {
      if (this._timers.length === 0) {
        return;
      }
      var minExpiresAt = this._timers[0];
      var n = this._platform.now();
      var wait = Math.max(0, minExpiresAt - n);
      this._timerTimeoutId = this._platform.setTimeout(this._boundRunExpiredTimers, wait);
    }
    _ensureInstance() {
      var currentInstance = this.currentInstance;
      if (currentInstance === null) {
        this._autorunStack = this.DEBUG ? new Error() : undefined;
        currentInstance = this.begin();
        this._scheduleAutorun(this.queueNames[0]);
      }
      return currentInstance;
    }
    _scheduleAutorun(plannedNextQueue) {
      autorunsCreatedCount++;
      var next = this._platform.next;
      var flush = this.options.flush;
      if (flush) {
        flush(plannedNextQueue, next);
      } else {
        next();
      }
      this._autorun = true;
    }
  }
  Backburner.Queue = Queue;
  Backburner.buildPlatform = buildPlatform;
  Backburner.buildNext = buildNext;
  var _default = Backburner;
  _exports.default = _default;
});
define("dag-map", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
   * A topologically ordered map of key/value pairs with a simple API for adding constraints.
   *
   * Edges can forward reference keys that have not been added yet (the forward reference will
   * map the key to undefined).
   */
  var DAG = function () {
    function DAG() {
      this._vertices = new Vertices();
    }
    /**
     * Adds a key/value pair with dependencies on other key/value pairs.
     *
     * @public
     * @param key    The key of the vertex to be added.
     * @param value  The value of that vertex.
     * @param before A key or array of keys of the vertices that must
     *               be visited before this vertex.
     * @param after  An string or array of strings with the keys of the
     *               vertices that must be after this vertex is visited.
     */
    DAG.prototype.add = function (key, value, before, after) {
      if (!key) throw new Error('argument `key` is required');
      var vertices = this._vertices;
      var v = vertices.add(key);
      v.val = value;
      if (before) {
        if (typeof before === "string") {
          vertices.addEdge(v, vertices.add(before));
        } else {
          for (var i = 0; i < before.length; i++) {
            vertices.addEdge(v, vertices.add(before[i]));
          }
        }
      }
      if (after) {
        if (typeof after === "string") {
          vertices.addEdge(vertices.add(after), v);
        } else {
          for (var i = 0; i < after.length; i++) {
            vertices.addEdge(vertices.add(after[i]), v);
          }
        }
      }
    };
    /**
     * @deprecated please use add.
     */
    DAG.prototype.addEdges = function (key, value, before, after) {
      this.add(key, value, before, after);
    };
    /**
     * Visits key/value pairs in topological order.
     *
     * @public
     * @param callback The function to be invoked with each key/value.
     */
    DAG.prototype.each = function (callback) {
      this._vertices.walk(callback);
    };
    /**
     * @deprecated please use each.
     */
    DAG.prototype.topsort = function (callback) {
      this.each(callback);
    };
    return DAG;
  }();
  var _default = DAG;
  /** @private */
  _exports.default = _default;
  var Vertices = function () {
    function Vertices() {
      this.length = 0;
      this.stack = new IntStack();
      this.path = new IntStack();
      this.result = new IntStack();
    }
    Vertices.prototype.add = function (key) {
      if (!key) throw new Error("missing key");
      var l = this.length | 0;
      var vertex;
      for (var i = 0; i < l; i++) {
        vertex = this[i];
        if (vertex.key === key) return vertex;
      }
      this.length = l + 1;
      return this[l] = {
        idx: l,
        key: key,
        val: undefined,
        out: false,
        flag: false,
        length: 0
      };
    };
    Vertices.prototype.addEdge = function (v, w) {
      this.check(v, w.key);
      var l = w.length | 0;
      for (var i = 0; i < l; i++) {
        if (w[i] === v.idx) return;
      }
      w.length = l + 1;
      w[l] = v.idx;
      v.out = true;
    };
    Vertices.prototype.walk = function (cb) {
      this.reset();
      for (var i = 0; i < this.length; i++) {
        var vertex = this[i];
        if (vertex.out) continue;
        this.visit(vertex, "");
      }
      this.each(this.result, cb);
    };
    Vertices.prototype.check = function (v, w) {
      if (v.key === w) {
        throw new Error("cycle detected: " + w + " <- " + w);
      }
      // quick check
      if (v.length === 0) return;
      // shallow check
      for (var i = 0; i < v.length; i++) {
        var key = this[v[i]].key;
        if (key === w) {
          throw new Error("cycle detected: " + w + " <- " + v.key + " <- " + w);
        }
      }
      // deep check
      this.reset();
      this.visit(v, w);
      if (this.path.length > 0) {
        var msg_1 = "cycle detected: " + w;
        this.each(this.path, function (key) {
          msg_1 += " <- " + key;
        });
        throw new Error(msg_1);
      }
    };
    Vertices.prototype.reset = function () {
      this.stack.length = 0;
      this.path.length = 0;
      this.result.length = 0;
      for (var i = 0, l = this.length; i < l; i++) {
        this[i].flag = false;
      }
    };
    Vertices.prototype.visit = function (start, search) {
      var _a = this,
        stack = _a.stack,
        path = _a.path,
        result = _a.result;
      stack.push(start.idx);
      while (stack.length) {
        var index = stack.pop() | 0;
        if (index >= 0) {
          // enter
          var vertex = this[index];
          if (vertex.flag) continue;
          vertex.flag = true;
          path.push(index);
          if (search === vertex.key) break;
          // push exit
          stack.push(~index);
          this.pushIncoming(vertex);
        } else {
          // exit
          path.pop();
          result.push(~index);
        }
      }
    };
    Vertices.prototype.pushIncoming = function (incomming) {
      var stack = this.stack;
      for (var i = incomming.length - 1; i >= 0; i--) {
        var index = incomming[i];
        if (!this[index].flag) {
          stack.push(index);
        }
      }
    };
    Vertices.prototype.each = function (indices, cb) {
      for (var i = 0, l = indices.length; i < l; i++) {
        var vertex = this[indices[i]];
        cb(vertex.key, vertex.val);
      }
    };
    return Vertices;
  }();
  /** @private */
  var IntStack = function () {
    function IntStack() {
      this.length = 0;
    }
    IntStack.prototype.push = function (n) {
      this[this.length++] = n | 0;
    };
    IntStack.prototype.pop = function () {
      return this[--this.length] | 0;
    };
    return IntStack;
  }();
});
define("ember-babel", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.assertThisInitialized = assertThisInitialized;
  _exports.classCallCheck = classCallCheck;
  _exports.createClass = createClass;
  _exports.createForOfIteratorHelperLoose = createForOfIteratorHelperLoose;
  _exports.createSuper = createSuper;
  _exports.inheritsLoose = inheritsLoose;
  _exports.objectDestructuringEmpty = objectDestructuringEmpty;
  _exports.possibleConstructorReturn = possibleConstructorReturn;
  _exports.taggedTemplateLiteralLoose = taggedTemplateLiteralLoose;
  _exports.wrapNativeSuper = wrapNativeSuper;
  /* globals Reflect */

  var setPrototypeOf = Object.setPrototypeOf;
  var getPrototypeOf = Object.getPrototypeOf;
  var hasReflectConstruct = typeof Reflect === 'object' && typeof Reflect.construct === 'function';
  var nativeWrapperCache = new Map();

  // Super minimal version of Babel's wrapNativeSuper. We only use this for
  // extending Function, for ComputedDecoratorImpl and AliasDecoratorImpl. We know
  // we will never directly create an instance of these classes so no need to
  // include `construct` code or other helpers.
  function wrapNativeSuper(Class) {
    if (nativeWrapperCache.has(Class)) {
      return nativeWrapperCache.get(Class);
    }
    function Wrapper() {}
    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    nativeWrapperCache.set(Class, Wrapper);
    return setPrototypeOf(Wrapper, Class);
  }
  function classCallCheck(instance, Constructor) {
    if (true /* DEBUG */) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function');
      }
    }
  }

  /*
    Overrides default `inheritsLoose` to _also_ call `Object.setPrototypeOf`.
    This is needed so that we can use `loose` option with the
    `@babel/plugin-transform-classes` (because we want simple assignment to the
    prototype wherever possible) but also keep our constructor based prototypal
    inheritance working properly
  */
  function inheritsLoose(subClass, superClass) {
    if (true /* DEBUG */) {
      if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError('Super expression must either be null or a function');
      }
    }
    subClass.prototype = Object.create(superClass === null ? null : superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass !== null) {
      setPrototypeOf(subClass, superClass);
    }
  }
  function taggedTemplateLiteralLoose(strings, raw) {
    if (!raw) {
      raw = strings.slice(0);
    }
    strings.raw = raw;
    return strings;
  }
  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ('value' in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  /*
    Differs from default implementation by avoiding boolean coercion of
    `protoProps` and `staticProps`.
  */
  function createClass(Constructor, protoProps, staticProps) {
    if (protoProps !== null && protoProps !== undefined) {
      _defineProperties(Constructor.prototype, protoProps);
    }
    if (staticProps !== null && staticProps !== undefined) {
      _defineProperties(Constructor, staticProps);
    }
    return Constructor;
  }
  function assertThisInitialized(self) {
    if (true /* DEBUG */ && self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
  }

  /*
    Adds `DEBUG` guard to error being thrown, and avoids boolean coercion of `call`.
  */
  function possibleConstructorReturn(self, call) {
    if (typeof call === 'object' && call !== null || typeof call === 'function') {
      return call;
    }
    return assertThisInitialized(self);
  }
  function objectDestructuringEmpty(obj) {
    if (true /* DEBUG */ && (obj === null || obj === undefined)) {
      throw new TypeError('Cannot destructure undefined');
    }
  }

  /*
    Differs from default implementation by checking for _any_ `Reflect.construct`
    (the default implementation tries to ensure that `Reflect.construct` is truly
    the native one).
  
    Original source: https://github.com/babel/babel/blob/v7.9.2/packages/babel-helpers/src/helpers.js#L738-L757
  */
  function createSuper(Derived) {
    return function () {
      var Super = getPrototypeOf(Derived);
      var result;
      if (hasReflectConstruct) {
        // NOTE: This doesn't work if this.__proto__.constructor has been modified.
        var NewTarget = getPrototypeOf(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return possibleConstructorReturn(this, result);
    };
  }

  /*
    Does not differ from default implementation.
  */
  function arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    var arr2 = new Array(len);
    for (var i = 0; i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }

  /*
    Does not differ from default implementation.
  */
  function unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === 'string') return arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === 'Object' && o.constructor) n = o.constructor.name;
    if (n === 'Map' || n === 'Set') return Array.from(n);
    if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
  }

  /*
    Does not differ from default implementation.
  */
  function createForOfIteratorHelperLoose(o) {
    var i = 0;
    if (typeof Symbol === 'undefined' || o[Symbol.iterator] == null) {
      // Fallback for engines without symbol support
      if (Array.isArray(o) || (o = unsupportedIterableToArray(o))) return function () {
        if (i >= o.length) return {
          done: true
        };
        return {
          done: false,
          value: o[i++]
        };
      };
      throw new TypeError('Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.');
    }
    i = o[Symbol.iterator]();
    return i.next.bind(i);
  }
});
define("ember-testing/index", ["exports", "ember-testing/lib/test", "ember-testing/lib/adapters/adapter", "ember-testing/lib/setup_for_testing", "ember-testing/lib/adapters/qunit", "ember-testing/lib/ext/application", "ember-testing/lib/ext/rsvp", "ember-testing/lib/helpers", "ember-testing/lib/initializers"], function (_exports, _test, _adapter, _setup_for_testing, _qunit, _application, _rsvp, _helpers, _initializers) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "Adapter", {
    enumerable: true,
    get: function () {
      return _adapter.default;
    }
  });
  Object.defineProperty(_exports, "QUnitAdapter", {
    enumerable: true,
    get: function () {
      return _qunit.default;
    }
  });
  Object.defineProperty(_exports, "Test", {
    enumerable: true,
    get: function () {
      return _test.default;
    }
  });
  Object.defineProperty(_exports, "setupForTesting", {
    enumerable: true,
    get: function () {
      return _setup_for_testing.default;
    }
  });
});
define("ember-testing/lib/adapters/adapter", ["exports", "@ember/object"], function (_exports, _object) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var Adapter = _object.default.extend({
    /**
      This callback will be called whenever an async operation is about to start.
         Override this to call your framework's methods that handle async
      operations.
         @public
      @method asyncStart
    */
    asyncStart() {},
    /**
      This callback will be called whenever an async operation has completed.
         @public
      @method asyncEnd
    */
    asyncEnd() {},
    /**
      Override this method with your testing framework's false assertion.
      This function is called whenever an exception occurs causing the testing
      promise to fail.
         QUnit example:
         ```javascript
        exception: function(error) {
          ok(false, error);
        };
      ```
         @public
      @method exception
      @param {String} error The exception to be raised.
    */
    exception(error) {
      throw error;
    }
  });
  var _default = Adapter;
  _exports.default = _default;
});
define("ember-testing/lib/adapters/qunit", ["exports", "@ember/debug", "ember-testing/lib/adapters/adapter"], function (_exports, _debug, _adapter) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /* globals QUnit */

  function isVeryOldQunit(obj) {
    return obj != null && typeof obj.stop === 'function';
  }
  var QUnitAdapter = _adapter.default.extend({
    init() {
      this.doneCallbacks = [];
    },
    asyncStart() {
      if (isVeryOldQunit(QUnit)) {
        // very old QUnit version
        // eslint-disable-next-line qunit/no-qunit-stop
        QUnit.stop();
      } else {
        this.doneCallbacks.push(QUnit.config.current ? QUnit.config.current.assert.async() : null);
      }
    },
    asyncEnd() {
      // checking for QUnit.stop here (even though we _need_ QUnit.start) because
      // QUnit.start() still exists in QUnit 2.x (it just throws an error when calling
      // inside a test context)
      if (isVeryOldQunit(QUnit)) {
        QUnit.start();
      } else {
        var done = this.doneCallbacks.pop();
        // This can be null if asyncStart() was called outside of a test
        if (done) {
          done();
        }
      }
    },
    exception(error) {
      QUnit.config.current.assert.ok(false, (0, _debug.inspect)(error));
    }
  });
  var _default = QUnitAdapter;
  _exports.default = _default;
});
define("ember-testing/lib/ext/application", ["@ember/application", "ember-testing/lib/setup_for_testing", "ember-testing/lib/test/helpers", "ember-testing/lib/test/promise", "ember-testing/lib/test/run", "ember-testing/lib/test/on_inject_helpers", "ember-testing/lib/test/adapter", "@ember/debug"], function (_application, _setup_for_testing, _helpers, _promise, _run, _on_inject_helpers, _adapter, _debug) {
  "use strict";

  _application.default.reopen({
    /**
     This property contains the testing helpers for the current application. These
     are created once you call `injectTestHelpers` on your `Application`
     instance. The included helpers are also available on the `window` object by
     default, but can be used from this object on the individual application also.
         @property testHelpers
      @type {Object}
      @default {}
      @public
    */
    testHelpers: {},
    /**
     This property will contain the original methods that were registered
     on the `helperContainer` before `injectTestHelpers` is called.
        When `removeTestHelpers` is called, these methods are restored to the
     `helperContainer`.
         @property originalMethods
      @type {Object}
      @default {}
      @private
      @since 1.3.0
    */
    originalMethods: {},
    /**
    This property indicates whether or not this application is currently in
    testing mode. This is set when `setupForTesting` is called on the current
    application.
       @property testing
    @type {Boolean}
    @default false
    @since 1.3.0
    @public
    */
    testing: false,
    /**
      This hook defers the readiness of the application, so that you can start
      the app when your tests are ready to run. It also sets the router's
      location to 'none', so that the window's location will not be modified
      (preventing both accidental leaking of state between tests and interference
      with your testing framework). `setupForTesting` should only be called after
      setting a custom `router` class (for example `App.Router = Router.extend(`).
         Example:
         ```
      App.setupForTesting();
      ```
         @method setupForTesting
      @public
    */
    setupForTesting() {
      (0, _setup_for_testing.default)();
      this.testing = true;
      this.resolveRegistration('router:main').reopen({
        location: 'none'
      });
    },
    /**
      This will be used as the container to inject the test helpers into. By
      default the helpers are injected into `window`.
         @property helperContainer
      @type {Object} The object to be used for test helpers.
      @default window
      @since 1.2.0
      @private
    */
    helperContainer: null,
    /**
      This injects the test helpers into the `helperContainer` object. If an object is provided
      it will be used as the helperContainer. If `helperContainer` is not set it will default
      to `window`. If a function of the same name has already been defined it will be cached
      (so that it can be reset if the helper is removed with `unregisterHelper` or
      `removeTestHelpers`).
         Any callbacks registered with `onInjectHelpers` will be called once the
      helpers have been injected.
         Example:
      ```
      App.injectTestHelpers();
      ```
         @method injectTestHelpers
      @public
    */
    injectTestHelpers(helperContainer) {
      if (helperContainer) {
        this.helperContainer = helperContainer;
      } else {
        this.helperContainer = window;
      }
      this.reopen({
        willDestroy() {
          this._super(...arguments);
          this.removeTestHelpers();
        }
      });
      this.testHelpers = {};
      for (var name in _helpers.helpers) {
        // SAFETY: It is safe to access a property on an object
        this.originalMethods[name] = this.helperContainer[name];
        // SAFETY: It is not quite as safe to do this, but it _seems_ to be ok.
        this.testHelpers[name] = this.helperContainer[name] = helper(this, name);
        // SAFETY: We checked that it exists
        protoWrap(_promise.default.prototype, name, helper(this, name), _helpers.helpers[name].meta.wait);
      }
      (0, _on_inject_helpers.invokeInjectHelpersCallbacks)(this);
    },
    /**
      This removes all helpers that have been registered, and resets and functions
      that were overridden by the helpers.
         Example:
         ```javascript
      App.removeTestHelpers();
      ```
         @public
      @method removeTestHelpers
    */
    removeTestHelpers() {
      if (!this.helperContainer) {
        return;
      }
      for (var name in _helpers.helpers) {
        this.helperContainer[name] = this.originalMethods[name];
        // SAFETY: This is a weird thing, but it's not technically unsafe here.
        delete _promise.default.prototype[name];
        delete this.testHelpers[name];
        delete this.originalMethods[name];
      }
    }
  });
  // This method is no longer needed
  // But still here for backwards compatibility
  // of helper chaining
  function protoWrap(proto, name, callback, isAsync) {
    // SAFETY: This isn't entirely safe, but it _seems_ to be ok.
    proto[name] = function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      if (isAsync) {
        return callback.apply(this, args);
      } else {
        // SAFETY: This is not actually safe.
        return this.then(function () {
          return callback.apply(this, args);
        });
      }
    };
  }
  function helper(app, name) {
    var helper = _helpers.helpers[name];
    (true && !(helper) && (0, _debug.assert)(`[BUG] Missing helper: ${name}`, helper));
    var fn = helper.method;
    var meta = helper.meta;
    if (!meta.wait) {
      return function () {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        return fn.apply(app, [app, ...args]);
      };
    }
    return function () {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      var lastPromise = (0, _run.default)(() => (0, _promise.resolve)((0, _promise.getLastPromise)()));
      // wait for last helper's promise to resolve and then
      // execute. To be safe, we need to tell the adapter we're going
      // asynchronous here, because fn may not be invoked before we
      // return.
      (0, _adapter.asyncStart)();
      return lastPromise.then(() => fn.apply(app, [app, ...args])).finally(_adapter.asyncEnd);
    };
  }
});
define("ember-testing/lib/ext/rsvp", ["exports", "@ember/-internals/runtime", "@ember/runloop", "@ember/debug", "ember-testing/lib/test/adapter"], function (_exports, _runtime, _runloop, _debug, _adapter) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _runtime.RSVP.configure('async', function (callback, promise) {
    // if schedule will cause autorun, we need to inform adapter
    if ((0, _debug.isTesting)() && !_runloop._backburner.currentInstance) {
      (0, _adapter.asyncStart)();
      _runloop._backburner.schedule('actions', () => {
        (0, _adapter.asyncEnd)();
        callback(promise);
      });
    } else {
      _runloop._backburner.schedule('actions', () => callback(promise));
    }
  });
  var _default = _runtime.RSVP;
  _exports.default = _default;
});
define("ember-testing/lib/helpers", ["ember-testing/lib/test/helpers", "ember-testing/lib/helpers/and_then", "ember-testing/lib/helpers/current_path", "ember-testing/lib/helpers/current_route_name", "ember-testing/lib/helpers/current_url", "ember-testing/lib/helpers/pause_test", "ember-testing/lib/helpers/visit", "ember-testing/lib/helpers/wait"], function (_helpers, _and_then, _current_path, _current_route_name, _current_url, _pause_test, _visit, _wait) {
  "use strict";

  (0, _helpers.registerAsyncHelper)('visit', _visit.default);
  (0, _helpers.registerAsyncHelper)('wait', _wait.default);
  (0, _helpers.registerAsyncHelper)('andThen', _and_then.default);
  (0, _helpers.registerAsyncHelper)('pauseTest', _pause_test.pauseTest);
  (0, _helpers.registerHelper)('currentRouteName', _current_route_name.default);
  (0, _helpers.registerHelper)('currentPath', _current_path.default);
  (0, _helpers.registerHelper)('currentURL', _current_url.default);
  (0, _helpers.registerHelper)('resumeTest', _pause_test.resumeTest);
});
define("ember-testing/lib/helpers/and_then", ["exports", "@ember/debug"], function (_exports, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = andThen;
  function andThen(app, callback) {
    var wait = app.testHelpers['wait'];
    (true && !(wait) && (0, _debug.assert)('[BUG] Missing wait helper', wait));
    return wait(callback(app));
  }
});
define("ember-testing/lib/helpers/current_path", ["exports", "@ember/object", "@ember/routing/-internals", "@ember/debug"], function (_exports, _object, _internals, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = currentPath;
  /**
  @module ember
  */

  /**
    Returns the current path.
  
  Example:
  
  ```javascript
  function validateURL() {
    equal(currentPath(), 'some.path.index', "correct path was transitioned into.");
  }
  
  click('#some-link-id').then(validateURL);
  ```
  
  @method currentPath
  @return {Object} The currently active path.
  @since 1.5.0
  @public
  */
  function currentPath(app) {
    (true && !(app.__container__) && (0, _debug.assert)('[BUG] app.__container__ is not set', app.__container__));
    var routingService = app.__container__.lookup('service:-routing');
    (true && !(routingService instanceof _internals.RoutingService) && (0, _debug.assert)('[BUG] service:-routing is not a RoutingService', routingService instanceof _internals.RoutingService));
    return (0, _object.get)(routingService, 'currentPath');
  }
});
define("ember-testing/lib/helpers/current_route_name", ["exports", "@ember/object", "@ember/routing/-internals", "@ember/debug"], function (_exports, _object, _internals, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = currentRouteName;
  /**
  @module ember
  */

  /**
    Returns the currently active route name.
  
  Example:
  
  ```javascript
  function validateRouteName() {
    equal(currentRouteName(), 'some.path', "correct route was transitioned into.");
  }
  visit('/some/path').then(validateRouteName)
  ```
  
  @method currentRouteName
  @return {Object} The name of the currently active route.
  @since 1.5.0
  @public
  */
  function currentRouteName(app) {
    (true && !(app.__container__) && (0, _debug.assert)('[BUG] app.__container__ is not set', app.__container__));
    var routingService = app.__container__.lookup('service:-routing');
    (true && !(routingService instanceof _internals.RoutingService) && (0, _debug.assert)('[BUG] service:-routing is not a RoutingService', routingService instanceof _internals.RoutingService));
    return (0, _object.get)(routingService, 'currentRouteName');
  }
});
define("ember-testing/lib/helpers/current_url", ["exports", "@ember/object", "@ember/debug", "@ember/routing/router"], function (_exports, _object, _debug, _router) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = currentURL;
  /**
  @module ember
  */

  /**
    Returns the current URL.
  
  Example:
  
  ```javascript
  function validateURL() {
    equal(currentURL(), '/some/path', "correct URL was transitioned into.");
  }
  
  click('#some-link-id').then(validateURL);
  ```
  
  @method currentURL
  @return {Object} The currently active URL.
  @since 1.5.0
  @public
  */
  function currentURL(app) {
    (true && !(app.__container__) && (0, _debug.assert)('[BUG] app.__container__ is not set', app.__container__));
    var router = app.__container__.lookup('router:main');
    (true && !(router instanceof _router.default) && (0, _debug.assert)('[BUG] router:main is not a Router', router instanceof _router.default));
    var location = (0, _object.get)(router, 'location');
    (true && !(typeof location !== 'string') && (0, _debug.assert)('[BUG] location is still a string', typeof location !== 'string'));
    return location.getURL();
  }
});
define("ember-testing/lib/helpers/pause_test", ["exports", "@ember/-internals/runtime", "@ember/debug"], function (_exports, _runtime, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.pauseTest = pauseTest;
  _exports.resumeTest = resumeTest;
  /**
  @module ember
  */

  var resume;
  /**
   Resumes a test paused by `pauseTest`.
  
   @method resumeTest
   @return {void}
   @public
  */
  function resumeTest() {
    (true && !(resume) && (0, _debug.assert)('Testing has not been paused. There is nothing to resume.', resume));
    resume();
    resume = undefined;
  }
  /**
   Pauses the current test - this is useful for debugging while testing or for test-driving.
   It allows you to inspect the state of your application at any point.
   Example (The test will pause before clicking the button):
  
   ```javascript
   visit('/')
   return pauseTest();
   click('.btn');
   ```
  
   You may want to turn off the timeout before pausing.
  
   qunit (timeout available to use as of 2.4.0):
  
   ```
   visit('/');
   assert.timeout(0);
   return pauseTest();
   click('.btn');
   ```
  
   mocha (timeout happens automatically as of ember-mocha v0.14.0):
  
   ```
   visit('/');
   this.timeout(0);
   return pauseTest();
   click('.btn');
   ```
  
  
   @since 1.9.0
   @method pauseTest
   @return {Object} A promise that will never resolve
   @public
  */
  function pauseTest() {
    (0, _debug.info)('Testing paused. Use `resumeTest()` to continue.');
    return new _runtime.RSVP.Promise(resolve => {
      resume = resolve;
    }, 'TestAdapter paused promise');
  }
});
define("ember-testing/lib/helpers/visit", ["exports", "@ember/debug", "@ember/routing/router", "@ember/runloop"], function (_exports, _debug, _router, _runloop) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = visit;
  /**
    Loads a route, sets up any controllers, and renders any templates associated
    with the route as though a real user had triggered the route change while
    using your app.
  
    Example:
  
    ```javascript
    visit('posts/index').then(function() {
      // assert something
    });
    ```
  
    @method visit
    @param {String} url the name of the route
    @return {RSVP.Promise<undefined>}
    @public
  */
  function visit(app, url) {
    (true && !(app.__container__) && (0, _debug.assert)('[BUG] Missing container', app.__container__));
    var router = app.__container__.lookup('router:main');
    (true && !(router instanceof _router.default) && (0, _debug.assert)('[BUG] router:main is not a Router', router instanceof _router.default));
    var shouldHandleURL = false;
    app.boot().then(() => {
      (true && !(typeof router.location !== 'string') && (0, _debug.assert)('[BUG] router.location is still a string', typeof router.location !== 'string'));
      router.location.setURL(url);
      if (shouldHandleURL) {
        (true && !(app.__deprecatedInstance__) && (0, _debug.assert)("[BUG] __deprecatedInstance__ isn't set", app.__deprecatedInstance__));
        (0, _runloop.run)(app.__deprecatedInstance__, 'handleURL', url);
      }
    });
    if (app._readinessDeferrals > 0) {
      // SAFETY: This should be safe, though it is odd.
      router.initialURL = url;
      (0, _runloop.run)(app, 'advanceReadiness');
      delete router.initialURL;
    } else {
      shouldHandleURL = true;
    }
    var wait = app.testHelpers['wait'];
    (true && !(wait) && (0, _debug.assert)('[BUG] missing wait helper', wait));
    return wait();
  }
});
define("ember-testing/lib/helpers/wait", ["exports", "ember-testing/lib/test/waiters", "@ember/-internals/runtime", "@ember/runloop", "ember-testing/lib/test/pending_requests", "@ember/debug", "@ember/routing/router"], function (_exports, _waiters, _runtime, _runloop, _pending_requests, _debug, _router) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = wait;
  /**
  @module ember
  */

  /**
    Causes the run loop to process any pending events. This is used to ensure that
    any async operations from other helpers (or your assertions) have been processed.
  
    This is most often used as the return value for the helper functions (see 'click',
    'fillIn','visit',etc). However, there is a method to register a test helper which
    utilizes this method without the need to actually call `wait()` in your helpers.
  
    The `wait` helper is built into `registerAsyncHelper` by default. You will not need
    to `return app.testHelpers.wait();` - the wait behavior is provided for you.
  
    Example:
  
    ```javascript
    import { registerAsyncHelper } from '@ember/test';
  
    registerAsyncHelper('loginUser', function(app, username, password) {
      visit('secured/path/here')
        .fillIn('#username', username)
        .fillIn('#password', password)
        .click('.submit');
    });
    ```
  
    @method wait
    @param {Object} value The value to be returned.
    @return {RSVP.Promise<any>} Promise that resolves to the passed value.
    @public
    @since 1.0.0
  */
  function wait(app, value) {
    return new _runtime.RSVP.Promise(function (resolve) {
      (true && !(app.__container__) && (0, _debug.assert)('[BUG] Missing container', app.__container__));
      var router = app.__container__.lookup('router:main');
      (true && !(router instanceof _router.default) && (0, _debug.assert)('[BUG] Expected router:main to be a subclass of Ember Router', router instanceof _router.default)); // Every 10ms, poll for the async thing to have finished
      var watcher = setInterval(() => {
        // 1. If the router is loading, keep polling
        var routerIsLoading = router._routerMicrolib && Boolean(router._routerMicrolib.activeTransition);
        if (routerIsLoading) {
          return;
        }
        // 2. If there are pending Ajax requests, keep polling
        if ((0, _pending_requests.pendingRequests)()) {
          return;
        }
        // 3. If there are scheduled timers or we are inside of a run loop, keep polling
        if ((0, _runloop._hasScheduledTimers)() || (0, _runloop._getCurrentRunLoop)()) {
          return;
        }
        if ((0, _waiters.checkWaiters)()) {
          return;
        }
        // Stop polling
        clearInterval(watcher);
        // Synchronously resolve the promise
        (0, _runloop.run)(null, resolve, value);
      }, 10);
    });
  }
});
define("ember-testing/lib/initializers", ["@ember/application"], function (_application) {
  "use strict";

  var name = 'deferReadiness in `testing` mode';
  (0, _application.onLoad)('Ember.Application', function (ApplicationClass) {
    if (!ApplicationClass.initializers[name]) {
      ApplicationClass.initializer({
        name: name,
        initialize(application) {
          if (application.testing) {
            application.deferReadiness();
          }
        }
      });
    }
  });
});
define("ember-testing/lib/setup_for_testing", ["exports", "@ember/debug", "ember-testing/lib/test/adapter", "ember-testing/lib/adapters/adapter", "ember-testing/lib/adapters/qunit"], function (_exports, _debug, _adapter, _adapter2, _qunit) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = setupForTesting;
  /* global self */

  /**
    Sets Ember up for testing. This is useful to perform
    basic setup steps in order to unit test.
  
    Use `App.setupForTesting` to perform integration tests (full
    application testing).
  
    @method setupForTesting
    @namespace Ember
    @since 1.5.0
    @private
  */
  function setupForTesting() {
    (0, _debug.setTesting)(true);
    var adapter = (0, _adapter.getAdapter)();
    // if adapter is not manually set default to QUnit
    if (!adapter) {
      (0, _adapter.setAdapter)(typeof self.QUnit === 'undefined' ? _adapter2.default.create() : _qunit.default.create());
    }
  }
});
define("ember-testing/lib/test", ["exports", "ember-testing/lib/test/helpers", "ember-testing/lib/test/on_inject_helpers", "ember-testing/lib/test/promise", "ember-testing/lib/test/waiters", "ember-testing/lib/test/adapter"], function (_exports, _helpers, _on_inject_helpers, _promise, _waiters, _adapter) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
    @module ember
  */

  /**
    This is a container for an assortment of testing related functionality:
  
    * Choose your default test adapter (for your framework of choice).
    * Register/Unregister additional test helpers.
    * Setup callbacks to be fired when the test helpers are injected into
      your application.
  
    @class Test
    @namespace Ember
    @public
  */
  var Test = {
    /**
      Hash containing all known test helpers.
         @property _helpers
      @private
      @since 1.7.0
    */
    _helpers: _helpers.helpers,
    registerHelper: _helpers.registerHelper,
    registerAsyncHelper: _helpers.registerAsyncHelper,
    unregisterHelper: _helpers.unregisterHelper,
    onInjectHelpers: _on_inject_helpers.onInjectHelpers,
    Promise: _promise.default,
    promise: _promise.promise,
    resolve: _promise.resolve,
    registerWaiter: _waiters.registerWaiter,
    unregisterWaiter: _waiters.unregisterWaiter,
    checkWaiters: _waiters.checkWaiters
  };
  /**
   Used to allow ember-testing to communicate with a specific testing
   framework.
  
   You can manually set it before calling `App.setupForTesting()`.
  
   Example:
  
   ```javascript
   Ember.Test.adapter = MyCustomAdapter.create()
   ```
  
   If you do not set it, ember-testing will default to `Ember.Test.QUnitAdapter`.
  
   @public
   @for Ember.Test
   @property adapter
   @type {Class} The adapter to be used.
   @default Ember.Test.QUnitAdapter
  */
  Object.defineProperty(Test, 'adapter', {
    get: _adapter.getAdapter,
    set: _adapter.setAdapter
  });
  var _default = Test;
  _exports.default = _default;
});
define("ember-testing/lib/test/adapter", ["exports", "@ember/-internals/error-handling"], function (_exports, _errorHandling) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.asyncEnd = asyncEnd;
  _exports.asyncStart = asyncStart;
  _exports.getAdapter = getAdapter;
  _exports.setAdapter = setAdapter;
  var adapter;
  function getAdapter() {
    return adapter;
  }
  function setAdapter(value) {
    adapter = value;
    if (value && typeof value.exception === 'function') {
      (0, _errorHandling.setDispatchOverride)(adapterDispatch);
    } else {
      (0, _errorHandling.setDispatchOverride)(null);
    }
  }
  function asyncStart() {
    if (adapter) {
      adapter.asyncStart();
    }
  }
  function asyncEnd() {
    if (adapter) {
      adapter.asyncEnd();
    }
  }
  function adapterDispatch(error) {
    adapter.exception(error);
    // @ts-expect-error Normally unreachable
    console.error(error.stack); // eslint-disable-line no-console
  }
});
define("ember-testing/lib/test/helpers", ["exports", "ember-testing/lib/test/promise"], function (_exports, _promise) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.helpers = void 0;
  _exports.registerAsyncHelper = registerAsyncHelper;
  _exports.registerHelper = registerHelper;
  _exports.unregisterHelper = unregisterHelper;
  var helpers = {};
  /**
   @module @ember/test
  */
  /**
    `registerHelper` is used to register a test helper that will be injected
    when `App.injectTestHelpers` is called.
  
    The helper method will always be called with the current Application as
    the first parameter.
  
    For example:
  
    ```javascript
    import { registerHelper } from '@ember/test';
    import { run } from '@ember/runloop';
  
    registerHelper('boot', function(app) {
      run(app, app.advanceReadiness);
    });
    ```
  
    This helper can later be called without arguments because it will be
    called with `app` as the first parameter.
  
    ```javascript
    import Application from '@ember/application';
  
    App = Application.create();
    App.injectTestHelpers();
    boot();
    ```
  
    @public
    @for @ember/test
    @static
    @method registerHelper
    @param {String} name The name of the helper method to add.
    @param {Function} helperMethod
    @param options {Object}
  */
  _exports.helpers = helpers;
  function registerHelper(name, helperMethod) {
    helpers[name] = {
      method: helperMethod,
      meta: {
        wait: false
      }
    };
  }
  /**
    `registerAsyncHelper` is used to register an async test helper that will be injected
    when `App.injectTestHelpers` is called.
  
    The helper method will always be called with the current Application as
    the first parameter.
  
    For example:
  
    ```javascript
    import { registerAsyncHelper } from '@ember/test';
    import { run } from '@ember/runloop';
  
    registerAsyncHelper('boot', function(app) {
      run(app, app.advanceReadiness);
    });
    ```
  
    The advantage of an async helper is that it will not run
    until the last async helper has completed.  All async helpers
    after it will wait for it complete before running.
  
  
    For example:
  
    ```javascript
    import { registerAsyncHelper } from '@ember/test';
  
    registerAsyncHelper('deletePost', function(app, postId) {
      click('.delete-' + postId);
    });
  
    // ... in your test
    visit('/post/2');
    deletePost(2);
    visit('/post/3');
    deletePost(3);
    ```
  
    @public
    @for @ember/test
    @method registerAsyncHelper
    @param {String} name The name of the helper method to add.
    @param {Function} helperMethod
    @since 1.2.0
  */
  function registerAsyncHelper(name, helperMethod) {
    helpers[name] = {
      method: helperMethod,
      meta: {
        wait: true
      }
    };
  }
  /**
    Remove a previously added helper method.
  
    Example:
  
    ```javascript
    import { unregisterHelper } from '@ember/test';
  
    unregisterHelper('wait');
    ```
  
    @public
    @method unregisterHelper
    @static
    @for @ember/test
    @param {String} name The helper to remove.
  */
  function unregisterHelper(name) {
    delete helpers[name];
    // SAFETY: This isn't necessarily a safe thing to do, but in terms of the immediate types here
    // it won't error.
    delete _promise.default.prototype[name];
  }
});
define("ember-testing/lib/test/on_inject_helpers", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.callbacks = void 0;
  _exports.invokeInjectHelpersCallbacks = invokeInjectHelpersCallbacks;
  _exports.onInjectHelpers = onInjectHelpers;
  var callbacks = [];
  /**
    Used to register callbacks to be fired whenever `App.injectTestHelpers`
    is called.
  
    The callback will receive the current application as an argument.
  
    Example:
  
    ```javascript
    import $ from 'jquery';
  
    Ember.Test.onInjectHelpers(function() {
      $(document).ajaxSend(function() {
        Test.pendingRequests++;
      });
  
      $(document).ajaxComplete(function() {
        Test.pendingRequests--;
      });
    });
    ```
  
    @public
    @for Ember.Test
    @method onInjectHelpers
    @param {Function} callback The function to be called.
  */
  _exports.callbacks = callbacks;
  function onInjectHelpers(callback) {
    callbacks.push(callback);
  }
  function invokeInjectHelpersCallbacks(app) {
    for (var callback of callbacks) {
      callback(app);
    }
  }
});
define("ember-testing/lib/test/pending_requests", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.clearPendingRequests = clearPendingRequests;
  _exports.decrementPendingRequests = decrementPendingRequests;
  _exports.incrementPendingRequests = incrementPendingRequests;
  _exports.pendingRequests = pendingRequests;
  var requests = [];
  function pendingRequests() {
    return requests.length;
  }
  function clearPendingRequests() {
    requests.length = 0;
  }
  function incrementPendingRequests(_, xhr) {
    requests.push(xhr);
  }
  function decrementPendingRequests(_, xhr) {
    setTimeout(function () {
      for (var i = 0; i < requests.length; i++) {
        if (xhr === requests[i]) {
          requests.splice(i, 1);
          break;
        }
      }
    }, 0);
  }
});
define("ember-testing/lib/test/promise", ["exports", "@ember/-internals/runtime", "ember-testing/lib/test/run"], function (_exports, _runtime, _run) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.getLastPromise = getLastPromise;
  _exports.promise = promise;
  _exports.resolve = resolve;
  var lastPromise = null;
  class TestPromise extends _runtime.RSVP.Promise {
    constructor(executor, label) {
      super(executor, label);
      lastPromise = this;
    }
    then(onFulfilled, onRejected, label) {
      var normalizedOnFulfilled = typeof onFulfilled === 'function' ? result => isolate(onFulfilled, result) : undefined;
      return super.then(normalizedOnFulfilled, onRejected, label);
    }
  }
  /**
    This returns a thenable tailored for testing.  It catches failed
    `onSuccess` callbacks and invokes the `Ember.Test.adapter.exception`
    callback in the last chained then.
  
    This method should be returned by async helpers such as `wait`.
  
    @public
    @for Ember.Test
    @method promise
    @param {Function} resolver The function used to resolve the promise.
    @param {String} label An optional string for identifying the promise.
  */
  _exports.default = TestPromise;
  function promise(resolver, label) {
    var fullLabel = `Ember.Test.promise: ${label || '<Unknown Promise>'}`;
    return new TestPromise(resolver, fullLabel);
  }
  /**
    Replacement for `Ember.RSVP.resolve`
    The only difference is this uses
    an instance of `Ember.Test.Promise`
  
    @public
    @for Ember.Test
    @method resolve
    @param {Mixed} The value to resolve
    @since 1.2.0
  */
  function resolve(result, label) {
    return TestPromise.resolve(result, label);
  }
  function getLastPromise() {
    return lastPromise;
  }
  // This method isolates nested async methods
  // so that they don't conflict with other last promises.
  //
  // 1. Set `Ember.Test.lastPromise` to null
  // 2. Invoke method
  // 3. Return the last promise created during method
  function isolate(onFulfilled, result) {
    // Reset lastPromise for nested helpers
    lastPromise = null;
    var value = onFulfilled(result);
    var promise = lastPromise;
    lastPromise = null;
    // If the method returned a promise
    // return that promise. If not,
    // return the last async helper's promise
    if (value && value instanceof TestPromise || !promise) {
      return value;
    } else {
      return (0, _run.default)(() => resolve(promise).then(() => value));
    }
  }
});
define("ember-testing/lib/test/run", ["exports", "@ember/runloop"], function (_exports, _runloop) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = run;
  function run(fn) {
    if (!(0, _runloop._getCurrentRunLoop)()) {
      return (0, _runloop.run)(fn);
    } else {
      return fn();
    }
  }
});
define("ember-testing/lib/test/waiters", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.checkWaiters = checkWaiters;
  _exports.registerWaiter = registerWaiter;
  _exports.unregisterWaiter = unregisterWaiter;
  /**
   @module @ember/test
  */
  var contexts = [];
  var callbacks = [];
  function registerWaiter() {
    var checkedCallback;
    var checkedContext;
    if (arguments.length === 1) {
      checkedContext = null;
      checkedCallback = arguments.length <= 0 ? undefined : arguments[0];
    } else {
      checkedContext = arguments.length <= 0 ? undefined : arguments[0];
      checkedCallback = arguments.length <= 1 ? undefined : arguments[1];
    }
    if (indexOf(checkedContext, checkedCallback) > -1) {
      return;
    }
    contexts.push(checkedContext);
    callbacks.push(checkedCallback);
  }
  /**
     `unregisterWaiter` is used to unregister a callback that was
     registered with `registerWaiter`.
  
     @public
     @for @ember/test
     @static
     @method unregisterWaiter
     @param {Object} context (optional)
     @param {Function} callback
     @since 1.2.0
  */
  function unregisterWaiter(context, callback) {
    if (!callbacks.length) {
      return;
    }
    if (arguments.length === 1) {
      callback = context;
      context = null;
    }
    var i = indexOf(context, callback);
    if (i === -1) {
      return;
    }
    contexts.splice(i, 1);
    callbacks.splice(i, 1);
  }
  /**
    Iterates through each registered test waiter, and invokes
    its callback. If any waiter returns false, this method will return
    true indicating that the waiters have not settled yet.
  
    This is generally used internally from the acceptance/integration test
    infrastructure.
  
    @public
    @for @ember/test
    @static
    @method checkWaiters
  */
  function checkWaiters() {
    if (!callbacks.length) {
      return false;
    }
    for (var i = 0; i < callbacks.length; i++) {
      var context = contexts[i];
      var callback = callbacks[i];
      // SAFETY: The loop ensures that this exists
      if (!callback.call(context)) {
        return true;
      }
    }
    return false;
  }
  function indexOf(context, callback) {
    for (var i = 0; i < callbacks.length; i++) {
      if (callbacks[i] === callback && contexts[i] === context) {
        return i;
      }
    }
    return -1;
  }
});
define("ember/index", ["exports", "require", "@ember/-internals/environment", "@ember/-internals/utils", "@ember/-internals/container", "@ember/instrumentation", "@ember/-internals/meta", "@ember/-internals/metal", "@ember/canary-features", "@ember/debug", "backburner", "@ember/controller", "@ember/string", "@ember/service", "@ember/object", "@ember/object/-internals", "@ember/object/compat", "@ember/object/computed", "@ember/object/events", "@ember/-internals/runtime", "@ember/-internals/glimmer", "ember/version", "@ember/-internals/views", "@ember/debug/container-debug-adapter", "@ember/debug/data-adapter", "@ember/error", "@ember/runloop", "@ember/-internals/error-handling", "@ember/array", "@ember/array/mutable", "@ember/array/proxy", "@ember/application", "@ember/application/instance", "@ember/application/namespace", "@ember/component", "@ember/component/helper", "@ember/engine", "@ember/engine/instance", "@ember/enumerable", "@ember/enumerable/mutable", "@ember/object/core", "@ember/object/evented", "@ember/object/mixin", "@ember/object/observable", "@ember/object/observers", "@ember/object/proxy", "@ember/object/promise-proxy-mixin", "@ember/polyfills", "@ember/routing/auto-location", "@ember/routing/hash-location", "@ember/routing/history-location", "@ember/routing/none-location", "@ember/routing/location", "@ember/routing/route", "@ember/routing/router", "@ember/routing/-internals", "@ember/utils", "@glimmer/runtime", "@glimmer/manager", "@ember/destroyable"], function (_exports, _require, _environment, utils, _container, instrumentation, _meta, metal, _canaryFeatures, EmberDebug, _backburner, _controller, _string, _service, _object, _internals, _compat, _computed, _events, _runtime, _glimmer, _version, views, _containerDebugAdapter, _dataAdapter, _error, _runloop, _errorHandling, _array, _mutable, _proxy, _application, _instance, _namespace, _component, _helper, _engine, _instance2, _enumerable, _mutable2, _core, _evented, _mixin, _observable, _observers, _proxy2, _promiseProxyMixin, _polyfills, _autoLocation, _hashLocation, _historyLocation, _noneLocation, _location, _route, _router, _internals2, _utils2, glimmerRuntime, _manager, _destroyable) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module ember
  */

  /**
    Namespace for injection helper methods.
  
    @class inject
    @namespace Ember
    @static
    @public
  */
  function inject() {
    (true && !(false) && (0, EmberDebug.assert)(`Injected properties must be created through helpers, see '${Object.keys(inject).map(k => `'inject.${k}'`).join(' or ')}'`));
  }
  // ****@ember/controller****
  inject.controller = _controller.inject;
  // ****@ember/service****
  inject.service = _service.service;
  var PartialEmber = {
    isNamespace: true,
    toString() {
      return 'Ember';
    },
    // ****@ember/-internals/container****
    Container: _container.Container,
    Registry: _container.Registry,
    // ****@ember/-internals/glimmer****
    // Partially re-exported from @glimmer/manager
    _setComponentManager: _glimmer.setComponentManager,
    _componentManagerCapabilities: _glimmer.componentCapabilities,
    _modifierManagerCapabilities: _glimmer.modifierCapabilities,
    // ****@ember/-internals/meta****
    meta: _meta.meta,
    // ****@ember/-internals/metal****
    _createCache: metal.createCache,
    _cacheGetValue: metal.getValue,
    _cacheIsConst: metal.isConst,
    _descriptor: metal.nativeDescDecorator,
    _getPath: metal._getPath,
    _setClassicDecorator: metal.setClassicDecorator,
    _tracked: metal.tracked,
    beginPropertyChanges: metal.beginPropertyChanges,
    changeProperties: metal.changeProperties,
    endPropertyChanges: metal.endPropertyChanges,
    hasListeners: metal.hasListeners,
    libraries: metal.libraries,
    // ****@ember/-internals/runtime****
    _ContainerProxyMixin: _runtime.ContainerProxyMixin,
    _ProxyMixin: _runtime._ProxyMixin,
    _RegistryProxyMixin: _runtime.RegistryProxyMixin,
    ActionHandler: _runtime.ActionHandler,
    Comparable: _runtime.Comparable,
    RSVP: _runtime.RSVP,
    // ****@ember/-internals/view****
    ComponentLookup: views.ComponentLookup,
    EventDispatcher: views.EventDispatcher,
    // ****@ember/-internals/utils****
    _Cache: utils.Cache,
    GUID_KEY: utils.GUID_KEY,
    canInvoke: utils.canInvoke,
    generateGuid: utils.generateGuid,
    guidFor: utils.guidFor,
    uuid: utils.uuid,
    wrap: utils.wrap,
    // ****@ember/application****
    getOwner: _application.getOwner,
    onLoad: _application.onLoad,
    runLoadHooks: _application.runLoadHooks,
    setOwner: _application.setOwner,
    Application: _application.default,
    // ****@ember/application/instance****
    ApplicationInstance: _instance.default,
    // ****@ember/application/namespace****
    Namespace: _namespace.default,
    // ****@ember/array****
    A: _array.A,
    Array: _array.default,
    NativeArray: _array.NativeArray,
    isArray: _array.isArray,
    makeArray: _array.makeArray,
    // ****@ember/array/mutable****
    MutableArray: _mutable.default,
    // ****@ember/array/proxy****
    ArrayProxy: _proxy.default,
    // ****@ember/canary-features****
    FEATURES: Object.assign({
      isEnabled: _canaryFeatures.isEnabled
    }, _canaryFeatures.FEATURES),
    // ****@ember/component****
    _Input: _component.Input,
    Component: _component.default,
    // ****@ember/component/helper****
    Helper: _helper.default,
    // ****@ember/controller****
    Controller: _controller.default,
    ControllerMixin: _controller.ControllerMixin,
    // ****@ember/debug****
    _captureRenderTree: EmberDebug.captureRenderTree,
    assert: EmberDebug.assert,
    warn: EmberDebug.warn,
    debug: EmberDebug.debug,
    deprecate: EmberDebug.deprecate,
    deprecateFunc: EmberDebug.deprecateFunc,
    runInDebug: EmberDebug.runInDebug,
    inspect: EmberDebug.inspect,
    Debug: {
      registerDeprecationHandler: EmberDebug.registerDeprecationHandler,
      registerWarnHandler: EmberDebug.registerWarnHandler,
      // ****@ember/-internals/metal****
      isComputed: metal.isComputed
    },
    // ****@ember/debug/container-debug-adapter****
    ContainerDebugAdapter: _containerDebugAdapter.default,
    // ****@ember/debug/data-adapter****
    DataAdapter: _dataAdapter.default,
    // ****@ember/destroyable****
    _assertDestroyablesDestroyed: _destroyable.assertDestroyablesDestroyed,
    _associateDestroyableChild: _destroyable.associateDestroyableChild,
    _enableDestroyableTracking: _destroyable.enableDestroyableTracking,
    _isDestroying: _destroyable.isDestroying,
    _isDestroyed: _destroyable.isDestroyed,
    _registerDestructor: _destroyable.registerDestructor,
    _unregisterDestructor: _destroyable.unregisterDestructor,
    destroy: _destroyable.destroy,
    // ****@ember/engine****
    Engine: _engine.default,
    // ****@ember/engine/instance****
    EngineInstance: _instance2.default,
    // ****@ember/enumerable****
    Enumerable: _enumerable.default,
    // ****@ember/enumerable/mutable****
    MutableEnumerable: _mutable2.default,
    // ****@ember/error****
    Error: _error.default,
    // ****@ember/instrumentation****
    instrument: instrumentation.instrument,
    subscribe: instrumentation.subscribe,
    Instrumentation: {
      instrument: instrumentation.instrument,
      subscribe: instrumentation.subscribe,
      unsubscribe: instrumentation.unsubscribe,
      reset: instrumentation.reset
    },
    // ****@ember/object****
    Object: _object.default,
    _action: _object.action,
    computed: _object.computed,
    defineProperty: _object.defineProperty,
    get: _object.get,
    getProperties: _object.getProperties,
    notifyPropertyChange: _object.notifyPropertyChange,
    observer: _object.observer,
    set: _object.set,
    trySet: _object.trySet,
    setProperties: _object.setProperties,
    // ****@ember/object/-internals****
    cacheFor: _internals.cacheFor,
    // ****@ember/object/compat****
    _dependentKeyCompat: _compat.dependentKeyCompat,
    // ****@ember/object/computed****
    ComputedProperty: _computed.default,
    expandProperties: _computed.expandProperties,
    // ****@ember/object/core****
    CoreObject: _core.default,
    // ****@ember/object/evented****
    Evented: _evented.default,
    on: _evented.on,
    // ****@ember/object/events****
    addListener: _events.addListener,
    removeListener: _events.removeListener,
    sendEvent: _events.sendEvent,
    // ****@ember/object/mixin****
    Mixin: _mixin.default,
    mixin: _mixin.mixin,
    // ****@ember/object/observable****
    Observable: _observable.default,
    // ****@ember/object/observers****
    addObserver: _observers.addObserver,
    removeObserver: _observers.removeObserver,
    // ****@ember/object/promise-proxy-mixin****
    PromiseProxyMixin: _promiseProxyMixin.default,
    // ****@ember/object/proxy****
    ObjectProxy: _proxy2.default,
    // ****@ember/polyfills****
    assign: _polyfills.assign,
    // ****@ember/routing/-internals****
    RouterDSL: _internals2.DSL,
    controllerFor: _internals2.controllerFor,
    generateController: _internals2.generateController,
    generateControllerFactory: _internals2.generateControllerFactory,
    // ****@ember/routing/auto-location****
    AutoLocation: _autoLocation.default,
    // ****@ember/routing/hash-location****
    HashLocation: _hashLocation.default,
    // ****@ember/routing/history-location****
    HistoryLocation: _historyLocation.default,
    // ****@ember/routing/location****
    Location: _location.default,
    // ****@ember/routing/none-location****
    NoneLocation: _noneLocation.default,
    // ****@ember/routing/route****
    Route: _route.default,
    // ****@ember/routing/router****
    Router: _router.default,
    // ****@ember/runloop****
    run: _runloop.run,
    // ****@ember/service****
    Service: _service.default,
    // ****@ember/string****
    String: {
      camelize: _string.camelize,
      capitalize: _string.capitalize,
      classify: _string.classify,
      decamelize: _string.decamelize,
      dasherize: _string.dasherize,
      underscore: _string.underscore,
      w: _string.w
    },
    // ****@ember/utils****
    compare: _utils2.compare,
    isBlank: _utils2.isBlank,
    isEmpty: _utils2.isEmpty,
    isEqual: _utils2.isEqual,
    isNone: _utils2.isNone,
    isPresent: _utils2.isPresent,
    typeOf: _utils2.typeOf,
    // ****@ember/version****
    /**
      The semantic version
         @property VERSION
      @type String
      @public
    */
    VERSION: _version.default,
    ViewUtils: {
      // ****@ember/-internals/views****
      getChildViews: views.getChildViews,
      getElementView: views.getElementView,
      getRootViews: views.getRootViews,
      getViewBounds: views.getViewBounds,
      getViewBoundingClientRect: views.getViewBoundingClientRect,
      getViewClientRects: views.getViewClientRects,
      getViewElement: views.getViewElement,
      isSimpleClick: views.isSimpleClick,
      // ****@ember/-internals/glimmer****
      isSerializationFirstNode: _glimmer.isSerializationFirstNode
    },
    // ****@glimmer/manager****
    _getComponentTemplate: _manager.getComponentTemplate,
    _helperManagerCapabilities: _manager.helperCapabilities,
    _setComponentTemplate: _manager.setComponentTemplate,
    _setHelperManager: _manager.setHelperManager,
    _setModifierManager: _manager.setModifierManager,
    // ****@glimmer/runtime****
    _templateOnlyComponent: glimmerRuntime.templateOnlyComponent,
    _invokeHelper: glimmerRuntime.invokeHelper,
    _hash: glimmerRuntime.hash,
    _array: glimmerRuntime.array,
    _concat: glimmerRuntime.concat,
    _get: glimmerRuntime.get,
    _on: glimmerRuntime.on,
    _fn: glimmerRuntime.fn,
    // Backburner
    _Backburner: _backburner.default,
    // ****@ember/controller, @ember/service****
    inject,
    // Non-imported
    platform: {
      defineProperty: true,
      hasPropertyAccessors: true
    },
    __loader: {
      require: _require.default,
      define,
      // @ts-expect-error These properties don't appear as being defined
      registry: typeof requirejs !== 'undefined' ? requirejs.entries : _require.default.entries
    }
  };
  var Ember = PartialEmber;
  Object.defineProperty(Ember, 'ENV', {
    get: _environment.getENV,
    enumerable: false
  });
  Object.defineProperty(Ember, 'lookup', {
    get: _environment.getLookup,
    set: _environment.setLookup,
    enumerable: false
  });
  Object.defineProperty(Ember, 'onerror', {
    get: _errorHandling.getOnerror,
    set: _errorHandling.setOnerror,
    enumerable: false
  });
  Object.defineProperty(Ember, 'testing', {
    get: EmberDebug.isTesting,
    set: EmberDebug.setTesting,
    enumerable: false
  });
  Object.defineProperty(Ember, 'STRINGS', {
    configurable: false,
    get: _string._getStrings,
    set: _string._setStrings
  });
  Object.defineProperty(Ember, 'BOOTED', {
    configurable: false,
    enumerable: false,
    get: metal.isNamespaceSearchDisabled,
    set: metal.setNamespaceSearchDisabled
  });
  Object.defineProperty(Ember, 'TEMPLATES', {
    get: _glimmer.getTemplates,
    set: _glimmer.setTemplates,
    configurable: false,
    enumerable: false
  });
  function deprecateStringUseOnEmberModule() {
    (true && !(false) && (0, EmberDebug.deprecate)('Using `Ember.String` is deprecated. Please import methods directly from `@ember/string`.', false, {
      id: 'ember-string.from-ember-module',
      for: 'ember-source',
      since: {
        available: '4.10',
        enabled: '4.10.'
      },
      until: '5.0.0',
      url: 'https://deprecations.emberjs.com/v4.x/#toc_ember-string-from-ember-module'
    }));
  }
  Object.defineProperty(Ember, 'String', {
    enumerable: true,
    configurable: true,
    get() {
      deprecateStringUseOnEmberModule();
      return {
        camelize: _string.camelize,
        capitalize: _string.capitalize,
        classify: _string.classify,
        dasherize: _string.dasherize,
        decamelize: _string.decamelize,
        underscore: _string.underscore,
        w: _string.w,
        htmlSafe: _glimmer.htmlSafe,
        isHTMLSafe: _glimmer.isHTMLSafe
      };
    }
  });
  Object.defineProperty(Ember, 'TEMPLATES', {
    get: _glimmer.getTemplates,
    set: _glimmer.setTemplates,
    configurable: false,
    enumerable: false
  });
  // ****@ember/debug****
  Object.defineProperty(Ember, 'testing', {
    get: EmberDebug.isTesting,
    set: EmberDebug.setTesting,
    enumerable: false
  });
  (0, _application.runLoadHooks)('Ember.Application', _application.default);
  var EmberHandlebars = {
    template: _glimmer.template,
    Utils: {
      escapeExpression: _glimmer.escapeExpression
    }
  };
  var EmberHTMLBars = {
    template: _glimmer.template
  };
  function defineEmberTemplateCompilerLazyLoad(key) {
    Object.defineProperty(Ember, key, {
      configurable: true,
      enumerable: true,
      get() {
        if ((0, _require.has)('ember-template-compiler')) {
          var templateCompiler = (0, _require.default)("ember-template-compiler");
          EmberHTMLBars.precompile = EmberHandlebars.precompile = templateCompiler.precompile;
          EmberHTMLBars.compile = EmberHandlebars.compile = templateCompiler.compile;
          Object.defineProperty(Ember, 'HTMLBars', {
            configurable: true,
            writable: true,
            enumerable: true,
            value: EmberHTMLBars
          });
          Object.defineProperty(Ember, 'Handlebars', {
            configurable: true,
            writable: true,
            enumerable: true,
            value: EmberHandlebars
          });
        }
        return key === 'Handlebars' ? EmberHandlebars : EmberHTMLBars;
      }
    });
  }
  defineEmberTemplateCompilerLazyLoad('HTMLBars');
  defineEmberTemplateCompilerLazyLoad('Handlebars');
  // do this to ensure that Ember.Test is defined properly on the global
  // if it is present.
  function defineEmberTestingLazyLoad(key) {
    Object.defineProperty(Ember, key, {
      configurable: true,
      enumerable: true,
      get() {
        if ((0, _require.has)('ember-testing')) {
          var testing = (0, _require.default)("ember-testing");
          var {
            Test,
            Adapter,
            QUnitAdapter,
            setupForTesting
          } = testing;
          // @ts-expect-error We should not do this
          Test.Adapter = Adapter;
          // @ts-expect-error We should not do this
          Test.QUnitAdapter = QUnitAdapter;
          Object.defineProperty(Ember, 'Test', {
            configurable: true,
            writable: true,
            enumerable: true,
            value: Test
          });
          Object.defineProperty(Ember, 'setupForTesting', {
            configurable: true,
            writable: true,
            enumerable: true,
            value: setupForTesting
          });
          return key === 'Test' ? Test : setupForTesting;
        }
        return undefined;
      }
    });
  }
  defineEmberTestingLazyLoad('Test');
  defineEmberTestingLazyLoad('setupForTesting');
  // @ts-expect-error Per types, runLoadHooks requires a second parameter. Should we loosen types?
  (0, _application.runLoadHooks)('Ember');
  var _default = Ember;
  _exports.default = _default;
});
define("ember/version", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = "4.12.3";
  _exports.default = _default;
});
define("route-recognizer", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var createObject = Object.create;
  function createMap() {
    var map = createObject(null);
    map["__"] = undefined;
    delete map["__"];
    return map;
  }
  var Target = function Target(path, matcher, delegate) {
    this.path = path;
    this.matcher = matcher;
    this.delegate = delegate;
  };
  Target.prototype.to = function to(target, callback) {
    var delegate = this.delegate;
    if (delegate && delegate.willAddRoute) {
      target = delegate.willAddRoute(this.matcher.target, target);
    }
    this.matcher.add(this.path, target);
    if (callback) {
      if (callback.length === 0) {
        throw new Error("You must have an argument in the function passed to `to`");
      }
      this.matcher.addChild(this.path, target, callback, this.delegate);
    }
  };
  var Matcher = function Matcher(target) {
    this.routes = createMap();
    this.children = createMap();
    this.target = target;
  };
  Matcher.prototype.add = function add(path, target) {
    this.routes[path] = target;
  };
  Matcher.prototype.addChild = function addChild(path, target, callback, delegate) {
    var matcher = new Matcher(target);
    this.children[path] = matcher;
    var match = generateMatch(path, matcher, delegate);
    if (delegate && delegate.contextEntered) {
      delegate.contextEntered(target, match);
    }
    callback(match);
  };
  function generateMatch(startingPath, matcher, delegate) {
    function match(path, callback) {
      var fullPath = startingPath + path;
      if (callback) {
        callback(generateMatch(fullPath, matcher, delegate));
      } else {
        return new Target(fullPath, matcher, delegate);
      }
    }
    return match;
  }
  function addRoute(routeArray, path, handler) {
    var len = 0;
    for (var i = 0; i < routeArray.length; i++) {
      len += routeArray[i].path.length;
    }
    path = path.substr(len);
    var route = {
      path: path,
      handler: handler
    };
    routeArray.push(route);
  }
  function eachRoute(baseRoute, matcher, callback, binding) {
    var routes = matcher.routes;
    var paths = Object.keys(routes);
    for (var i = 0; i < paths.length; i++) {
      var path = paths[i];
      var routeArray = baseRoute.slice();
      addRoute(routeArray, path, routes[path]);
      var nested = matcher.children[path];
      if (nested) {
        eachRoute(routeArray, nested, callback, binding);
      } else {
        callback.call(binding, routeArray);
      }
    }
  }
  var map = function (callback, addRouteCallback) {
    var matcher = new Matcher();
    callback(generateMatch("", matcher, this.delegate));
    eachRoute([], matcher, function (routes) {
      if (addRouteCallback) {
        addRouteCallback(this, routes);
      } else {
        this.add(routes);
      }
    }, this);
  };

  // Normalizes percent-encoded values in `path` to upper-case and decodes percent-encoded
  // values that are not reserved (i.e., unicode characters, emoji, etc). The reserved
  // chars are "/" and "%".
  // Safe to call multiple times on the same path.
  // Normalizes percent-encoded values in `path` to upper-case and decodes percent-encoded
  function normalizePath(path) {
    return path.split("/").map(normalizeSegment).join("/");
  }
  // We want to ensure the characters "%" and "/" remain in percent-encoded
  // form when normalizing paths, so replace them with their encoded form after
  // decoding the rest of the path
  var SEGMENT_RESERVED_CHARS = /%|\//g;
  function normalizeSegment(segment) {
    if (segment.length < 3 || segment.indexOf("%") === -1) {
      return segment;
    }
    return decodeURIComponent(segment).replace(SEGMENT_RESERVED_CHARS, encodeURIComponent);
  }
  // We do not want to encode these characters when generating dynamic path segments
  // See https://tools.ietf.org/html/rfc3986#section-3.3
  // sub-delims: "!", "$", "&", "'", "(", ")", "*", "+", ",", ";", "="
  // others allowed by RFC 3986: ":", "@"
  //
  // First encode the entire path segment, then decode any of the encoded special chars.
  //
  // The chars "!", "'", "(", ")", "*" do not get changed by `encodeURIComponent`,
  // so the possible encoded chars are:
  // ['%24', '%26', '%2B', '%2C', '%3B', '%3D', '%3A', '%40'].
  var PATH_SEGMENT_ENCODINGS = /%(?:2(?:4|6|B|C)|3(?:B|D|A)|40)/g;
  function encodePathSegment(str) {
    return encodeURIComponent(str).replace(PATH_SEGMENT_ENCODINGS, decodeURIComponent);
  }
  var escapeRegex = /(\/|\.|\*|\+|\?|\||\(|\)|\[|\]|\{|\}|\\)/g;
  var isArray = Array.isArray;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  function getParam(params, key) {
    if (typeof params !== "object" || params === null) {
      throw new Error("You must pass an object as the second argument to `generate`.");
    }
    if (!hasOwnProperty.call(params, key)) {
      throw new Error("You must provide param `" + key + "` to `generate`.");
    }
    var value = params[key];
    var str = typeof value === "string" ? value : "" + value;
    if (str.length === 0) {
      throw new Error("You must provide a param `" + key + "`.");
    }
    return str;
  }
  var eachChar = [];
  eachChar[0 /* Static */] = function (segment, currentState) {
    var state = currentState;
    var value = segment.value;
    for (var i = 0; i < value.length; i++) {
      var ch = value.charCodeAt(i);
      state = state.put(ch, false, false);
    }
    return state;
  };
  eachChar[1 /* Dynamic */] = function (_, currentState) {
    return currentState.put(47 /* SLASH */, true, true);
  };
  eachChar[2 /* Star */] = function (_, currentState) {
    return currentState.put(-1 /* ANY */, false, true);
  };
  eachChar[4 /* Epsilon */] = function (_, currentState) {
    return currentState;
  };
  var regex = [];
  regex[0 /* Static */] = function (segment) {
    return segment.value.replace(escapeRegex, "\\$1");
  };
  regex[1 /* Dynamic */] = function () {
    return "([^/]+)";
  };
  regex[2 /* Star */] = function () {
    return "(.+)";
  };
  regex[4 /* Epsilon */] = function () {
    return "";
  };
  var generate = [];
  generate[0 /* Static */] = function (segment) {
    return segment.value;
  };
  generate[1 /* Dynamic */] = function (segment, params) {
    var value = getParam(params, segment.value);
    if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS) {
      return encodePathSegment(value);
    } else {
      return value;
    }
  };
  generate[2 /* Star */] = function (segment, params) {
    return getParam(params, segment.value);
  };
  generate[4 /* Epsilon */] = function () {
    return "";
  };
  var EmptyObject = Object.freeze({});
  var EmptyArray = Object.freeze([]);
  // The `names` will be populated with the paramter name for each dynamic/star
  // segment. `shouldDecodes` will be populated with a boolean for each dyanamic/star
  // segment, indicating whether it should be decoded during recognition.
  function parse(segments, route, types) {
    // normalize route as not starting with a "/". Recognition will
    // also normalize.
    if (route.length > 0 && route.charCodeAt(0) === 47 /* SLASH */) {
      route = route.substr(1);
    }
    var parts = route.split("/");
    var names = undefined;
    var shouldDecodes = undefined;
    for (var i = 0; i < parts.length; i++) {
      var part = parts[i];
      var flags = 0;
      var type = 0;
      if (part === "") {
        type = 4 /* Epsilon */;
      } else if (part.charCodeAt(0) === 58 /* COLON */) {
        type = 1 /* Dynamic */;
      } else if (part.charCodeAt(0) === 42 /* STAR */) {
        type = 2 /* Star */;
      } else {
        type = 0 /* Static */;
      }

      flags = 2 << type;
      if (flags & 12 /* Named */) {
        part = part.slice(1);
        names = names || [];
        names.push(part);
        shouldDecodes = shouldDecodes || [];
        shouldDecodes.push((flags & 4 /* Decoded */) !== 0);
      }
      if (flags & 14 /* Counted */) {
        types[type]++;
      }
      segments.push({
        type: type,
        value: normalizeSegment(part)
      });
    }
    return {
      names: names || EmptyArray,
      shouldDecodes: shouldDecodes || EmptyArray
    };
  }
  function isEqualCharSpec(spec, char, negate) {
    return spec.char === char && spec.negate === negate;
  }
  // A State has a character specification and (`charSpec`) and a list of possible
  // subsequent states (`nextStates`).
  //
  // If a State is an accepting state, it will also have several additional
  // properties:
  //
  // * `regex`: A regular expression that is used to extract parameters from paths
  //   that reached this accepting state.
  // * `handlers`: Information on how to convert the list of captures into calls
  //   to registered handlers with the specified parameters
  // * `types`: How many static, dynamic or star segments in this route. Used to
  //   decide which route to use if multiple registered routes match a path.
  //
  // Currently, State is implemented naively by looping over `nextStates` and
  // comparing a character specification against a character. A more efficient
  // implementation would use a hash of keys pointing at one or more next states.
  var State = function State(states, id, char, negate, repeat) {
    this.states = states;
    this.id = id;
    this.char = char;
    this.negate = negate;
    this.nextStates = repeat ? id : null;
    this.pattern = "";
    this._regex = undefined;
    this.handlers = undefined;
    this.types = undefined;
  };
  State.prototype.regex = function regex$1() {
    if (!this._regex) {
      this._regex = new RegExp(this.pattern);
    }
    return this._regex;
  };
  State.prototype.get = function get(char, negate) {
    var this$1 = this;
    var nextStates = this.nextStates;
    if (nextStates === null) {
      return;
    }
    if (isArray(nextStates)) {
      for (var i = 0; i < nextStates.length; i++) {
        var child = this$1.states[nextStates[i]];
        if (isEqualCharSpec(child, char, negate)) {
          return child;
        }
      }
    } else {
      var child$1 = this.states[nextStates];
      if (isEqualCharSpec(child$1, char, negate)) {
        return child$1;
      }
    }
  };
  State.prototype.put = function put(char, negate, repeat) {
    var state;
    // If the character specification already exists in a child of the current
    // state, just return that state.
    if (state = this.get(char, negate)) {
      return state;
    }
    // Make a new state for the character spec
    var states = this.states;
    state = new State(states, states.length, char, negate, repeat);
    states[states.length] = state;
    // Insert the new state as a child of the current state
    if (this.nextStates == null) {
      this.nextStates = state.id;
    } else if (isArray(this.nextStates)) {
      this.nextStates.push(state.id);
    } else {
      this.nextStates = [this.nextStates, state.id];
    }
    // Return the new state
    return state;
  };
  // Find a list of child states matching the next character
  State.prototype.match = function match(ch) {
    var this$1 = this;
    var nextStates = this.nextStates;
    if (!nextStates) {
      return [];
    }
    var returned = [];
    if (isArray(nextStates)) {
      for (var i = 0; i < nextStates.length; i++) {
        var child = this$1.states[nextStates[i]];
        if (isMatch(child, ch)) {
          returned.push(child);
        }
      }
    } else {
      var child$1 = this.states[nextStates];
      if (isMatch(child$1, ch)) {
        returned.push(child$1);
      }
    }
    return returned;
  };
  function isMatch(spec, char) {
    return spec.negate ? spec.char !== char && spec.char !== -1 /* ANY */ : spec.char === char || spec.char === -1 /* ANY */;
  }
  // This is a somewhat naive strategy, but should work in a lot of cases
  // A better strategy would properly resolve /posts/:id/new and /posts/edit/:id.
  //
  // This strategy generally prefers more static and less dynamic matching.
  // Specifically, it
  //
  //  * prefers fewer stars to more, then
  //  * prefers using stars for less of the match to more, then
  //  * prefers fewer dynamic segments to more, then
  //  * prefers more static segments to more
  function sortSolutions(states) {
    return states.sort(function (a, b) {
      var ref = a.types || [0, 0, 0];
      var astatics = ref[0];
      var adynamics = ref[1];
      var astars = ref[2];
      var ref$1 = b.types || [0, 0, 0];
      var bstatics = ref$1[0];
      var bdynamics = ref$1[1];
      var bstars = ref$1[2];
      if (astars !== bstars) {
        return astars - bstars;
      }
      if (astars) {
        if (astatics !== bstatics) {
          return bstatics - astatics;
        }
        if (adynamics !== bdynamics) {
          return bdynamics - adynamics;
        }
      }
      if (adynamics !== bdynamics) {
        return adynamics - bdynamics;
      }
      if (astatics !== bstatics) {
        return bstatics - astatics;
      }
      return 0;
    });
  }
  function recognizeChar(states, ch) {
    var nextStates = [];
    for (var i = 0, l = states.length; i < l; i++) {
      var state = states[i];
      nextStates = nextStates.concat(state.match(ch));
    }
    return nextStates;
  }
  var RecognizeResults = function RecognizeResults(queryParams) {
    this.length = 0;
    this.queryParams = queryParams || {};
  };
  RecognizeResults.prototype.splice = Array.prototype.splice;
  RecognizeResults.prototype.slice = Array.prototype.slice;
  RecognizeResults.prototype.push = Array.prototype.push;
  function findHandler(state, originalPath, queryParams) {
    var handlers = state.handlers;
    var regex = state.regex();
    if (!regex || !handlers) {
      throw new Error("state not initialized");
    }
    var captures = originalPath.match(regex);
    var currentCapture = 1;
    var result = new RecognizeResults(queryParams);
    result.length = handlers.length;
    for (var i = 0; i < handlers.length; i++) {
      var handler = handlers[i];
      var names = handler.names;
      var shouldDecodes = handler.shouldDecodes;
      var params = EmptyObject;
      var isDynamic = false;
      if (names !== EmptyArray && shouldDecodes !== EmptyArray) {
        for (var j = 0; j < names.length; j++) {
          isDynamic = true;
          var name = names[j];
          var capture = captures && captures[currentCapture++];
          if (params === EmptyObject) {
            params = {};
          }
          if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS && shouldDecodes[j]) {
            params[name] = capture && decodeURIComponent(capture);
          } else {
            params[name] = capture;
          }
        }
      }
      result[i] = {
        handler: handler.handler,
        params: params,
        isDynamic: isDynamic
      };
    }
    return result;
  }
  function decodeQueryParamPart(part) {
    // http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1
    part = part.replace(/\+/gm, "%20");
    var result;
    try {
      result = decodeURIComponent(part);
    } catch (error) {
      result = "";
    }
    return result;
  }
  var RouteRecognizer = function RouteRecognizer() {
    this.names = createMap();
    var states = [];
    var state = new State(states, 0, -1 /* ANY */, true, false);
    states[0] = state;
    this.states = states;
    this.rootState = state;
  };
  RouteRecognizer.prototype.add = function add(routes, options) {
    var currentState = this.rootState;
    var pattern = "^";
    var types = [0, 0, 0];
    var handlers = new Array(routes.length);
    var allSegments = [];
    var isEmpty = true;
    var j = 0;
    for (var i = 0; i < routes.length; i++) {
      var route = routes[i];
      var ref = parse(allSegments, route.path, types);
      var names = ref.names;
      var shouldDecodes = ref.shouldDecodes;
      // preserve j so it points to the start of newly added segments
      for (; j < allSegments.length; j++) {
        var segment = allSegments[j];
        if (segment.type === 4 /* Epsilon */) {
          continue;
        }
        isEmpty = false;
        // Add a "/" for the new segment
        currentState = currentState.put(47 /* SLASH */, false, false);
        pattern += "/";
        // Add a representation of the segment to the NFA and regex
        currentState = eachChar[segment.type](segment, currentState);
        pattern += regex[segment.type](segment);
      }
      handlers[i] = {
        handler: route.handler,
        names: names,
        shouldDecodes: shouldDecodes
      };
    }
    if (isEmpty) {
      currentState = currentState.put(47 /* SLASH */, false, false);
      pattern += "/";
    }
    currentState.handlers = handlers;
    currentState.pattern = pattern + "$";
    currentState.types = types;
    var name;
    if (typeof options === "object" && options !== null && options.as) {
      name = options.as;
    }
    if (name) {
      // if (this.names[name]) {
      //   throw new Error("You may not add a duplicate route named `" + name + "`.");
      // }
      this.names[name] = {
        segments: allSegments,
        handlers: handlers
      };
    }
  };
  RouteRecognizer.prototype.handlersFor = function handlersFor(name) {
    var route = this.names[name];
    if (!route) {
      throw new Error("There is no route named " + name);
    }
    var result = new Array(route.handlers.length);
    for (var i = 0; i < route.handlers.length; i++) {
      var handler = route.handlers[i];
      result[i] = handler;
    }
    return result;
  };
  RouteRecognizer.prototype.hasRoute = function hasRoute(name) {
    return !!this.names[name];
  };
  RouteRecognizer.prototype.generate = function generate$1(name, params) {
    var route = this.names[name];
    var output = "";
    if (!route) {
      throw new Error("There is no route named " + name);
    }
    var segments = route.segments;
    for (var i = 0; i < segments.length; i++) {
      var segment = segments[i];
      if (segment.type === 4 /* Epsilon */) {
        continue;
      }
      output += "/";
      output += generate[segment.type](segment, params);
    }
    if (output.charAt(0) !== "/") {
      output = "/" + output;
    }
    if (params && params.queryParams) {
      output += this.generateQueryString(params.queryParams);
    }
    return output;
  };
  RouteRecognizer.prototype.generateQueryString = function generateQueryString(params) {
    var pairs = [];
    var keys = Object.keys(params);
    keys.sort();
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var value = params[key];
      if (value == null) {
        continue;
      }
      var pair = encodeURIComponent(key);
      if (isArray(value)) {
        for (var j = 0; j < value.length; j++) {
          var arrayPair = key + "[]" + "=" + encodeURIComponent(value[j]);
          pairs.push(arrayPair);
        }
      } else {
        pair += "=" + encodeURIComponent(value);
        pairs.push(pair);
      }
    }
    if (pairs.length === 0) {
      return "";
    }
    return "?" + pairs.join("&");
  };
  RouteRecognizer.prototype.parseQueryString = function parseQueryString(queryString) {
    var pairs = queryString.split("&");
    var queryParams = {};
    for (var i = 0; i < pairs.length; i++) {
      var pair = pairs[i].split("="),
        key = decodeQueryParamPart(pair[0]),
        keyLength = key.length,
        isArray = false,
        value = void 0;
      if (pair.length === 1) {
        value = "true";
      } else {
        // Handle arrays
        if (keyLength > 2 && key.slice(keyLength - 2) === "[]") {
          isArray = true;
          key = key.slice(0, keyLength - 2);
          if (!queryParams[key]) {
            queryParams[key] = [];
          }
        }
        value = pair[1] ? decodeQueryParamPart(pair[1]) : "";
      }
      if (isArray) {
        queryParams[key].push(value);
      } else {
        queryParams[key] = value;
      }
    }
    return queryParams;
  };
  RouteRecognizer.prototype.recognize = function recognize(path) {
    var results;
    var states = [this.rootState];
    var queryParams = {};
    var isSlashDropped = false;
    var hashStart = path.indexOf("#");
    if (hashStart !== -1) {
      path = path.substr(0, hashStart);
    }
    var queryStart = path.indexOf("?");
    if (queryStart !== -1) {
      var queryString = path.substr(queryStart + 1, path.length);
      path = path.substr(0, queryStart);
      queryParams = this.parseQueryString(queryString);
    }
    if (path.charAt(0) !== "/") {
      path = "/" + path;
    }
    var originalPath = path;
    if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS) {
      path = normalizePath(path);
    } else {
      path = decodeURI(path);
      originalPath = decodeURI(originalPath);
    }
    var pathLen = path.length;
    if (pathLen > 1 && path.charAt(pathLen - 1) === "/") {
      path = path.substr(0, pathLen - 1);
      originalPath = originalPath.substr(0, originalPath.length - 1);
      isSlashDropped = true;
    }
    for (var i = 0; i < path.length; i++) {
      states = recognizeChar(states, path.charCodeAt(i));
      if (!states.length) {
        break;
      }
    }
    var solutions = [];
    for (var i$1 = 0; i$1 < states.length; i$1++) {
      if (states[i$1].handlers) {
        solutions.push(states[i$1]);
      }
    }
    states = sortSolutions(solutions);
    var state = solutions[0];
    if (state && state.handlers) {
      // if a trailing slash was dropped and a star segment is the last segment
      // specified, put the trailing slash back
      if (isSlashDropped && state.pattern && state.pattern.slice(-5) === "(.+)$") {
        originalPath = originalPath + "/";
      }
      results = findHandler(state, originalPath, queryParams);
    }
    return results;
  };
  RouteRecognizer.VERSION = "0.3.4";
  // Set to false to opt-out of encoding and decoding path segments.
  // See https://github.com/tildeio/route-recognizer/pull/55
  RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS = true;
  RouteRecognizer.Normalizer = {
    normalizeSegment: normalizeSegment,
    normalizePath: normalizePath,
    encodePathSegment: encodePathSegment
  };
  RouteRecognizer.prototype.map = map;
  var _default = RouteRecognizer;
  _exports.default = _default;
});
define("router_js", ["exports", "rsvp", "route-recognizer"], function (_exports, _rsvp, _routeRecognizer) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports.TransitionState = _exports.TransitionError = _exports.STATE_SYMBOL = _exports.QUERY_PARAMS_SYMBOL = _exports.PARAMS_SYMBOL = _exports.InternalTransition = _exports.InternalRouteInfo = void 0;
  _exports.logAbort = logAbort;
  function buildTransitionAborted() {
    var error = new Error('TransitionAborted');
    error.name = 'TransitionAborted';
    error.code = 'TRANSITION_ABORTED';
    return error;
  }
  function isTransitionAborted(maybeError) {
    return typeof maybeError === 'object' && maybeError !== null && maybeError.code === 'TRANSITION_ABORTED';
  }
  function isAbortable(maybeAbortable) {
    return typeof maybeAbortable === 'object' && maybeAbortable !== null && typeof maybeAbortable.isAborted === 'boolean';
  }
  function throwIfAborted(maybe) {
    if (isAbortable(maybe) && maybe.isAborted) {
      throw buildTransitionAborted();
    }
  }
  var slice = Array.prototype.slice;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  /**
    Determines if an object is Promise by checking if it is "thenable".
  **/
  function isPromise(p) {
    return p !== null && typeof p === 'object' && typeof p.then === 'function';
  }
  function merge(hash, other) {
    for (var prop in other) {
      if (hasOwnProperty.call(other, prop)) {
        hash[prop] = other[prop];
      }
    }
  }
  /**
    @private
  
    Extracts query params from the end of an array
  **/
  function extractQueryParams(array) {
    var len = array && array.length,
      head,
      queryParams;
    if (len && len > 0) {
      var obj = array[len - 1];
      if (isQueryParamsContainer(obj)) {
        queryParams = obj.queryParams;
        head = slice.call(array, 0, len - 1);
        return [head, queryParams];
      }
    }
    // SAFETY: We confirmed that the last item isn't a QP container
    return [array, null];
  }
  // TODO: Actually check that Dict is QueryParams
  function isQueryParamsContainer(obj) {
    if (obj && typeof obj === 'object') {
      var cast = obj;
      return 'queryParams' in cast && Object.keys(cast.queryParams).every(k => typeof k === 'string');
    }
    return false;
  }
  /**
    @private
  
    Coerces query param properties and array elements into strings.
  **/
  function coerceQueryParamsToString(queryParams) {
    for (var key in queryParams) {
      var val = queryParams[key];
      if (typeof val === 'number') {
        queryParams[key] = '' + val;
      } else if (Array.isArray(val)) {
        for (var i = 0, l = val.length; i < l; i++) {
          val[i] = '' + val[i];
        }
      }
    }
  }
  /**
    @private
   */
  function log(router) {
    if (!router.log) {
      return;
    }
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    if (args.length === 2) {
      var [sequence, msg] = args;
      router.log('Transition #' + sequence + ': ' + msg);
    } else {
      var [_msg] = args;
      router.log(_msg);
    }
  }
  function isParam(object) {
    return typeof object === 'string' || object instanceof String || typeof object === 'number' || object instanceof Number;
  }
  function forEach(array, callback) {
    for (var i = 0, l = array.length; i < l && callback(array[i]) !== false; i++) {
      // empty intentionally
    }
  }
  function getChangelist(oldObject, newObject) {
    var key;
    var results = {
      all: {},
      changed: {},
      removed: {}
    };
    merge(results.all, newObject);
    var didChange = false;
    coerceQueryParamsToString(oldObject);
    coerceQueryParamsToString(newObject);
    // Calculate removals
    for (key in oldObject) {
      if (hasOwnProperty.call(oldObject, key)) {
        if (!hasOwnProperty.call(newObject, key)) {
          didChange = true;
          results.removed[key] = oldObject[key];
        }
      }
    }
    // Calculate changes
    for (key in newObject) {
      if (hasOwnProperty.call(newObject, key)) {
        var oldElement = oldObject[key];
        var newElement = newObject[key];
        if (isArray(oldElement) && isArray(newElement)) {
          if (oldElement.length !== newElement.length) {
            results.changed[key] = newObject[key];
            didChange = true;
          } else {
            for (var i = 0, l = oldElement.length; i < l; i++) {
              if (oldElement[i] !== newElement[i]) {
                results.changed[key] = newObject[key];
                didChange = true;
              }
            }
          }
        } else if (oldObject[key] !== newObject[key]) {
          results.changed[key] = newObject[key];
          didChange = true;
        }
      }
    }
    return didChange ? results : undefined;
  }
  function isArray(obj) {
    return Array.isArray(obj);
  }
  function promiseLabel(label) {
    return 'Router: ' + label;
  }
  var STATE_SYMBOL = `__STATE__-2619860001345920-3322w3`;
  _exports.STATE_SYMBOL = STATE_SYMBOL;
  var PARAMS_SYMBOL = `__PARAMS__-261986232992830203-23323`;
  _exports.PARAMS_SYMBOL = PARAMS_SYMBOL;
  var QUERY_PARAMS_SYMBOL = `__QPS__-2619863929824844-32323`;
  /**
    A Transition is a thenable (a promise-like object) that represents
    an attempt to transition to another route. It can be aborted, either
    explicitly via `abort` or by attempting another transition while a
    previous one is still underway. An aborted transition can also
    be `retry()`d later.
  
    @class Transition
    @constructor
    @param {Object} router
    @param {Object} intent
    @param {Object} state
    @param {Object} error
    @private
   */
  _exports.QUERY_PARAMS_SYMBOL = QUERY_PARAMS_SYMBOL;
  class Transition {
    constructor(router, intent, state, error, previousTransition) {
      if (error === void 0) {
        error = undefined;
      }
      if (previousTransition === void 0) {
        previousTransition = undefined;
      }
      this.from = null;
      this.to = undefined;
      this.isAborted = false;
      this.isActive = true;
      this.urlMethod = 'update';
      this.resolveIndex = 0;
      this.queryParamsOnly = false;
      this.isTransition = true;
      this.isCausedByAbortingTransition = false;
      this.isCausedByInitialTransition = false;
      this.isCausedByAbortingReplaceTransition = false;
      this._visibleQueryParams = {};
      this.isIntermediate = false;
      this[STATE_SYMBOL] = state || router.state;
      this.intent = intent;
      this.router = router;
      this.data = intent && intent.data || {};
      this.resolvedModels = {};
      this[QUERY_PARAMS_SYMBOL] = {};
      this.promise = undefined;
      this.error = undefined;
      this[PARAMS_SYMBOL] = {};
      this.routeInfos = [];
      this.targetName = undefined;
      this.pivotHandler = undefined;
      this.sequence = -1;
      if (true /* DEBUG */) {
        var _error = new Error(`Transition creation stack`);
        this.debugCreationStack = () => _error.stack;
        // not aborted yet, will be replaced when `this.isAborted` is set
        this.debugAbortStack = () => undefined;
        this.debugPreviousTransition = previousTransition;
      }
      if (error) {
        this.promise = _rsvp.Promise.reject(error);
        this.error = error;
        return;
      }
      // if you're doing multiple redirects, need the new transition to know if it
      // is actually part of the first transition or not. Any further redirects
      // in the initial transition also need to know if they are part of the
      // initial transition
      this.isCausedByAbortingTransition = !!previousTransition;
      this.isCausedByInitialTransition = !!previousTransition && (previousTransition.isCausedByInitialTransition || previousTransition.sequence === 0);
      // Every transition in the chain is a replace
      this.isCausedByAbortingReplaceTransition = !!previousTransition && previousTransition.urlMethod === 'replace' && (!previousTransition.isCausedByAbortingTransition || previousTransition.isCausedByAbortingReplaceTransition);
      if (state) {
        this[PARAMS_SYMBOL] = state.params;
        this[QUERY_PARAMS_SYMBOL] = state.queryParams;
        this.routeInfos = state.routeInfos;
        var len = state.routeInfos.length;
        if (len) {
          this.targetName = state.routeInfos[len - 1].name;
        }
        for (var i = 0; i < len; ++i) {
          var handlerInfo = state.routeInfos[i];
          // TODO: this all seems hacky
          if (!handlerInfo.isResolved) {
            break;
          }
          this.pivotHandler = handlerInfo.route;
        }
        this.sequence = router.currentSequence++;
        this.promise = state.resolve(this).catch(result => {
          var error = this.router.transitionDidError(result, this);
          throw error;
        }, promiseLabel('Handle Abort'));
      } else {
        this.promise = _rsvp.Promise.resolve(this[STATE_SYMBOL]);
        this[PARAMS_SYMBOL] = {};
      }
    }
    /**
      The Transition's internal promise. Calling `.then` on this property
      is that same as calling `.then` on the Transition object itself, but
      this property is exposed for when you want to pass around a
      Transition's promise, but not the Transition object itself, since
      Transition object can be externally `abort`ed, while the promise
      cannot.
         @property promise
      @type {Object}
      @public
     */
    /**
      Custom state can be stored on a Transition's `data` object.
      This can be useful for decorating a Transition within an earlier
      hook and shared with a later hook. Properties set on `data` will
      be copied to new transitions generated by calling `retry` on this
      transition.
         @property data
      @type {Object}
      @public
     */
    /**
      A standard promise hook that resolves if the transition
      succeeds and rejects if it fails/redirects/aborts.
         Forwards to the internal `promise` property which you can
      use in situations where you want to pass around a thenable,
      but not the Transition itself.
         @method then
      @param {Function} onFulfilled
      @param {Function} onRejected
      @param {String} label optional string for labeling the promise.
      Useful for tooling.
      @return {Promise}
      @public
     */
    then(onFulfilled, onRejected, label) {
      return this.promise.then(onFulfilled, onRejected, label);
    }
    /**
         Forwards to the internal `promise` property which you can
      use in situations where you want to pass around a thennable,
      but not the Transition itself.
         @method catch
      @param {Function} onRejection
      @param {String} label optional string for labeling the promise.
      Useful for tooling.
      @return {Promise}
      @public
     */
    catch(onRejection, label) {
      return this.promise.catch(onRejection, label);
    }
    /**
         Forwards to the internal `promise` property which you can
      use in situations where you want to pass around a thenable,
      but not the Transition itself.
         @method finally
      @param {Function} callback
      @param {String} label optional string for labeling the promise.
      Useful for tooling.
      @return {Promise}
      @public
     */
    finally(callback, label) {
      return this.promise.finally(callback, label);
    }
    /**
      Aborts the Transition. Note you can also implicitly abort a transition
      by initiating another transition while a previous one is underway.
         @method abort
      @return {Transition} this transition
      @public
     */
    abort() {
      this.rollback();
      var transition = new Transition(this.router, undefined, undefined, undefined);
      transition.to = this.from;
      transition.from = this.from;
      transition.isAborted = true;
      this.router.routeWillChange(transition);
      this.router.routeDidChange(transition);
      return this;
    }
    rollback() {
      if (!this.isAborted) {
        log(this.router, this.sequence, this.targetName + ': transition was aborted');
        if (true /* DEBUG */) {
          var error = new Error(`Transition aborted stack`);
          this.debugAbortStack = () => error.stack;
        }
        if (this.intent !== undefined && this.intent !== null) {
          this.intent.preTransitionState = this.router.state;
        }
        this.isAborted = true;
        this.isActive = false;
        this.router.activeTransition = undefined;
      }
    }
    redirect(newTransition) {
      this.rollback();
      this.router.routeWillChange(newTransition);
    }
    /**
         Retries a previously-aborted transition (making sure to abort the
      transition if it's still active). Returns a new transition that
      represents the new attempt to transition.
         @method retry
      @return {Transition} new transition
      @public
     */
    retry() {
      // TODO: add tests for merged state retry()s
      this.abort();
      var newTransition = this.router.transitionByIntent(this.intent, false);
      // inheriting a `null` urlMethod is not valid
      // the urlMethod is only set to `null` when
      // the transition is initiated *after* the url
      // has been updated (i.e. `router.handleURL`)
      //
      // in that scenario, the url method cannot be
      // inherited for a new transition because then
      // the url would not update even though it should
      if (this.urlMethod !== null) {
        newTransition.method(this.urlMethod);
      }
      return newTransition;
    }
    /**
         Sets the URL-changing method to be employed at the end of a
      successful transition. By default, a new Transition will just
      use `updateURL`, but passing 'replace' to this method will
      cause the URL to update using 'replaceWith' instead. Omitting
      a parameter will disable the URL change, allowing for transitions
      that don't update the URL at completion (this is also used for
      handleURL, since the URL has already changed before the
      transition took place).
         @method method
      @param {String} method the type of URL-changing method to use
        at the end of a transition. Accepted values are 'replace',
        falsy values, or any other non-falsy value (which is
        interpreted as an updateURL transition).
         @return {Transition} this transition
      @public
     */
    method(method) {
      this.urlMethod = method;
      return this;
    }
    // Alias 'trigger' as 'send'
    send(ignoreFailure, _name, err, transition, handler) {
      if (ignoreFailure === void 0) {
        ignoreFailure = false;
      }
      this.trigger(ignoreFailure, _name, err, transition, handler);
    }
    /**
         Fires an event on the current list of resolved/resolving
      handlers within this transition. Useful for firing events
      on route hierarchies that haven't fully been entered yet.
         Note: This method is also aliased as `send`
         @method trigger
      @param {Boolean} [ignoreFailure=false] a boolean specifying whether unhandled events throw an error
      @param {String} name the name of the event to fire
      @public
     */
    trigger(ignoreFailure, name) {
      if (ignoreFailure === void 0) {
        ignoreFailure = false;
      }
      // TODO: Deprecate the current signature
      if (typeof ignoreFailure === 'string') {
        name = ignoreFailure;
        ignoreFailure = false;
      }
      for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }
      this.router.triggerEvent(this[STATE_SYMBOL].routeInfos.slice(0, this.resolveIndex + 1), ignoreFailure, name, args);
    }
    /**
      Transitions are aborted and their promises rejected
      when redirects occur; this method returns a promise
      that will follow any redirects that occur and fulfill
      with the value fulfilled by any redirecting transitions
      that occur.
         @method followRedirects
      @return {Promise} a promise that fulfills with the same
        value that the final redirecting transition fulfills with
      @public
     */
    followRedirects() {
      var router = this.router;
      return this.promise.catch(function (reason) {
        if (router.activeTransition) {
          return router.activeTransition.followRedirects();
        }
        return _rsvp.Promise.reject(reason);
      });
    }
    toString() {
      return 'Transition (sequence ' + this.sequence + ')';
    }
    /**
      @private
     */
    log(message) {
      log(this.router, this.sequence, message);
    }
  }
  /**
    @private
  
    Logs and returns an instance of TransitionAborted.
   */
  _exports.InternalTransition = Transition;
  function logAbort(transition) {
    log(transition.router, transition.sequence, 'detected abort.');
    return buildTransitionAborted();
  }
  function isTransition(obj) {
    return typeof obj === 'object' && obj instanceof Transition && obj.isTransition;
  }
  function prepareResult(obj) {
    if (isTransition(obj)) {
      return null;
    }
    return obj;
  }
  var ROUTE_INFOS = new WeakMap();
  function toReadOnlyRouteInfo(routeInfos, queryParams, includeAttributes) {
    if (queryParams === void 0) {
      queryParams = {};
    }
    if (includeAttributes === void 0) {
      includeAttributes = false;
    }
    return routeInfos.map((info, i) => {
      var {
        name,
        params,
        paramNames,
        context,
        route
      } = info;
      // SAFETY: This should be safe since it is just for use as a key
      var key = info;
      if (ROUTE_INFOS.has(key) && includeAttributes) {
        var _routeInfo = ROUTE_INFOS.get(key);
        _routeInfo = attachMetadata(route, _routeInfo);
        var routeInfoWithAttribute = createRouteInfoWithAttributes(_routeInfo, context);
        ROUTE_INFOS.set(key, routeInfoWithAttribute);
        return routeInfoWithAttribute;
      }
      var routeInfo = {
        find(predicate, thisArg) {
          var publicInfo;
          var arr = [];
          if (predicate.length === 3) {
            arr = routeInfos.map(
            // SAFETY: This should be safe since it is just for use as a key
            info => ROUTE_INFOS.get(info));
          }
          for (var _i = 0; routeInfos.length > _i; _i++) {
            // SAFETY: This should be safe since it is just for use as a key
            publicInfo = ROUTE_INFOS.get(routeInfos[_i]);
            if (predicate.call(thisArg, publicInfo, _i, arr)) {
              return publicInfo;
            }
          }
          return undefined;
        },
        get name() {
          return name;
        },
        get paramNames() {
          return paramNames;
        },
        get metadata() {
          return buildRouteInfoMetadata(info.route);
        },
        get parent() {
          var parent = routeInfos[i - 1];
          if (parent === undefined) {
            return null;
          }
          // SAFETY: This should be safe since it is just for use as a key
          return ROUTE_INFOS.get(parent);
        },
        get child() {
          var child = routeInfos[i + 1];
          if (child === undefined) {
            return null;
          }
          // SAFETY: This should be safe since it is just for use as a key
          return ROUTE_INFOS.get(child);
        },
        get localName() {
          var parts = this.name.split('.');
          return parts[parts.length - 1];
        },
        get params() {
          return params;
        },
        get queryParams() {
          return queryParams;
        }
      };
      if (includeAttributes) {
        routeInfo = createRouteInfoWithAttributes(routeInfo, context);
      }
      // SAFETY: This should be safe since it is just for use as a key
      ROUTE_INFOS.set(info, routeInfo);
      return routeInfo;
    });
  }
  function createRouteInfoWithAttributes(routeInfo, context) {
    var attributes = {
      get attributes() {
        return context;
      }
    };
    if (!Object.isExtensible(routeInfo) || routeInfo.hasOwnProperty('attributes')) {
      return Object.freeze(Object.assign({}, routeInfo, attributes));
    }
    return Object.assign(routeInfo, attributes);
  }
  function buildRouteInfoMetadata(route) {
    if (route !== undefined && route !== null && route.buildRouteInfoMetadata !== undefined) {
      return route.buildRouteInfoMetadata();
    }
    return null;
  }
  function attachMetadata(route, routeInfo) {
    var metadata = {
      get metadata() {
        return buildRouteInfoMetadata(route);
      }
    };
    if (!Object.isExtensible(routeInfo) || routeInfo.hasOwnProperty('metadata')) {
      return Object.freeze(Object.assign({}, routeInfo, metadata));
    }
    return Object.assign(routeInfo, metadata);
  }
  class InternalRouteInfo {
    constructor(router, name, paramNames, route) {
      this._routePromise = undefined;
      this._route = null;
      this.params = {};
      this.isResolved = false;
      this.name = name;
      this.paramNames = paramNames;
      this.router = router;
      if (route) {
        this._processRoute(route);
      }
    }
    getModel(_transition) {
      return _rsvp.Promise.resolve(this.context);
    }
    serialize(_context) {
      return this.params || {};
    }
    resolve(transition) {
      return _rsvp.Promise.resolve(this.routePromise).then(route => {
        throwIfAborted(transition);
        return route;
      }).then(() => this.runBeforeModelHook(transition)).then(() => throwIfAborted(transition)).then(() => this.getModel(transition)).then(resolvedModel => {
        throwIfAborted(transition);
        return resolvedModel;
      }).then(resolvedModel => this.runAfterModelHook(transition, resolvedModel)).then(resolvedModel => this.becomeResolved(transition, resolvedModel));
    }
    becomeResolved(transition, resolvedContext) {
      var params = this.serialize(resolvedContext);
      if (transition) {
        this.stashResolvedModel(transition, resolvedContext);
        transition[PARAMS_SYMBOL] = transition[PARAMS_SYMBOL] || {};
        transition[PARAMS_SYMBOL][this.name] = params;
      }
      var context;
      var contextsMatch = resolvedContext === this.context;
      if ('context' in this || !contextsMatch) {
        context = resolvedContext;
      }
      // SAFETY: Since this is just for lookup, it should be safe
      var cached = ROUTE_INFOS.get(this);
      var resolved = new ResolvedRouteInfo(this.router, this.name, this.paramNames, params, this.route, context);
      if (cached !== undefined) {
        // SAFETY: This is potentially a bit risker, but for what we're doing, it should be ok.
        ROUTE_INFOS.set(resolved, cached);
      }
      return resolved;
    }
    shouldSupersede(routeInfo) {
      // Prefer this newer routeInfo over `other` if:
      // 1) The other one doesn't exist
      // 2) The names don't match
      // 3) This route has a context that doesn't match
      //    the other one (or the other one doesn't have one).
      // 4) This route has parameters that don't match the other.
      if (!routeInfo) {
        return true;
      }
      var contextsMatch = routeInfo.context === this.context;
      return routeInfo.name !== this.name || 'context' in this && !contextsMatch || this.hasOwnProperty('params') && !paramsMatch(this.params, routeInfo.params);
    }
    get route() {
      // _route could be set to either a route object or undefined, so we
      // compare against null to know when it's been set
      if (this._route !== null) {
        return this._route;
      }
      return this.fetchRoute();
    }
    set route(route) {
      this._route = route;
    }
    get routePromise() {
      if (this._routePromise) {
        return this._routePromise;
      }
      this.fetchRoute();
      return this._routePromise;
    }
    set routePromise(routePromise) {
      this._routePromise = routePromise;
    }
    log(transition, message) {
      if (transition.log) {
        transition.log(this.name + ': ' + message);
      }
    }
    updateRoute(route) {
      route._internalName = this.name;
      return this.route = route;
    }
    runBeforeModelHook(transition) {
      if (transition.trigger) {
        transition.trigger(true, 'willResolveModel', transition, this.route);
      }
      var result;
      if (this.route) {
        if (this.route.beforeModel !== undefined) {
          result = this.route.beforeModel(transition);
        }
      }
      if (isTransition(result)) {
        result = null;
      }
      return _rsvp.Promise.resolve(result);
    }
    runAfterModelHook(transition, resolvedModel) {
      // Stash the resolved model on the payload.
      // This makes it possible for users to swap out
      // the resolved model in afterModel.
      var name = this.name;
      this.stashResolvedModel(transition, resolvedModel);
      var result;
      if (this.route !== undefined) {
        if (this.route.afterModel !== undefined) {
          result = this.route.afterModel(resolvedModel, transition);
        }
      }
      result = prepareResult(result);
      return _rsvp.Promise.resolve(result).then(() => {
        // Ignore the fulfilled value returned from afterModel.
        // Return the value stashed in resolvedModels, which
        // might have been swapped out in afterModel.
        // SAFTEY: We expect this to be of type T, though typing it as such is challenging.
        return transition.resolvedModels[name];
      });
    }
    stashResolvedModel(transition, resolvedModel) {
      transition.resolvedModels = transition.resolvedModels || {};
      // SAFETY: It's unfortunate that we have to do this cast. It should be safe though.
      transition.resolvedModels[this.name] = resolvedModel;
    }
    fetchRoute() {
      var route = this.router.getRoute(this.name);
      return this._processRoute(route);
    }
    _processRoute(route) {
      // Setup a routePromise so that we can wait for asynchronously loaded routes
      this.routePromise = _rsvp.Promise.resolve(route);
      // Wait until the 'route' property has been updated when chaining to a route
      // that is a promise
      if (isPromise(route)) {
        this.routePromise = this.routePromise.then(r => {
          return this.updateRoute(r);
        });
        // set to undefined to avoid recursive loop in the route getter
        return this.route = undefined;
      } else if (route) {
        return this.updateRoute(route);
      }
      return undefined;
    }
  }
  _exports.InternalRouteInfo = InternalRouteInfo;
  class ResolvedRouteInfo extends InternalRouteInfo {
    constructor(router, name, paramNames, params, route, context) {
      super(router, name, paramNames, route);
      this.params = params;
      this.isResolved = true;
      this.context = context;
    }
    resolve(transition) {
      // A ResolvedRouteInfo just resolved with itself.
      if (transition && transition.resolvedModels) {
        transition.resolvedModels[this.name] = this.context;
      }
      return _rsvp.Promise.resolve(this);
    }
  }
  class UnresolvedRouteInfoByParam extends InternalRouteInfo {
    constructor(router, name, paramNames, params, route) {
      super(router, name, paramNames, route);
      this.params = {};
      if (params) {
        this.params = params;
      }
    }
    getModel(transition) {
      var fullParams = this.params;
      if (transition && transition[QUERY_PARAMS_SYMBOL]) {
        fullParams = {};
        merge(fullParams, this.params);
        fullParams.queryParams = transition[QUERY_PARAMS_SYMBOL];
      }
      var route = this.route;
      var result;
      // FIXME: Review these casts
      if (route.deserialize) {
        result = route.deserialize(fullParams, transition);
      } else if (route.model) {
        result = route.model(fullParams, transition);
      }
      if (result && isTransition(result)) {
        result = undefined;
      }
      return _rsvp.Promise.resolve(result);
    }
  }
  class UnresolvedRouteInfoByObject extends InternalRouteInfo {
    constructor(router, name, paramNames, context) {
      super(router, name, paramNames);
      this.context = context;
      this.serializer = this.router.getSerializer(name);
    }
    getModel(transition) {
      if (this.router.log !== undefined) {
        this.router.log(this.name + ': resolving provided model');
      }
      return super.getModel(transition);
    }
    /**
      @private
         Serializes a route using its custom `serialize` method or
      by a default that looks up the expected property name from
      the dynamic segment.
         @param {Object} model the model to be serialized for this route
    */
    serialize(model) {
      var {
        paramNames,
        context
      } = this;
      if (!model) {
        // SAFETY: By the time we serialize, we expect to be resolved.
        // This may not be an entirely safe assumption though no tests fail.
        model = context;
      }
      var object = {};
      if (isParam(model)) {
        object[paramNames[0]] = model;
        return object;
      }
      // Use custom serialize if it exists.
      if (this.serializer) {
        // invoke this.serializer unbound (getSerializer returns a stateless function)
        return this.serializer.call(null, model, paramNames);
      } else if (this.route !== undefined) {
        if (this.route.serialize) {
          return this.route.serialize(model, paramNames);
        }
      }
      if (paramNames.length !== 1) {
        return;
      }
      var name = paramNames[0];
      if (/_id$/.test(name)) {
        // SAFETY: Model is supposed to extend IModel already
        object[name] = model.id;
      } else {
        object[name] = model;
      }
      return object;
    }
  }
  function paramsMatch(a, b) {
    if (a === b) {
      // Both are identical, may both be undefined
      return true;
    }
    if (!a || !b) {
      // Only one is undefined, already checked they aren't identical
      return false;
    }
    // Note: this assumes that both params have the same
    // number of keys, but since we're comparing the
    // same routes, they should.
    for (var k in a) {
      if (a.hasOwnProperty(k) && a[k] !== b[k]) {
        return false;
      }
    }
    return true;
  }
  class TransitionIntent {
    constructor(router, data) {
      if (data === void 0) {
        data = {};
      }
      this.router = router;
      this.data = data;
    }
  }
  function handleError(currentState, transition, error) {
    // This is the only possible
    // reject value of TransitionState#resolve
    var routeInfos = currentState.routeInfos;
    var errorHandlerIndex = transition.resolveIndex >= routeInfos.length ? routeInfos.length - 1 : transition.resolveIndex;
    var wasAborted = transition.isAborted;
    throw new TransitionError(error, currentState.routeInfos[errorHandlerIndex].route, wasAborted, currentState);
  }
  function resolveOneRouteInfo(currentState, transition) {
    if (transition.resolveIndex === currentState.routeInfos.length) {
      // This is is the only possible
      // fulfill value of TransitionState#resolve
      return;
    }
    var routeInfo = currentState.routeInfos[transition.resolveIndex];
    var callback = proceed.bind(null, currentState, transition);
    return routeInfo.resolve(transition).then(callback, null, currentState.promiseLabel('Proceed'));
  }
  function proceed(currentState, transition, resolvedRouteInfo) {
    var wasAlreadyResolved = currentState.routeInfos[transition.resolveIndex].isResolved;
    // Swap the previously unresolved routeInfo with
    // the resolved routeInfo
    currentState.routeInfos[transition.resolveIndex++] = resolvedRouteInfo;
    if (!wasAlreadyResolved) {
      // Call the redirect hook. The reason we call it here
      // vs. afterModel is so that redirects into child
      // routes don't re-run the model hooks for this
      // already-resolved route.
      var {
        route
      } = resolvedRouteInfo;
      if (route !== undefined) {
        if (route.redirect) {
          route.redirect(resolvedRouteInfo.context, transition);
        }
      }
    }
    // Proceed after ensuring that the redirect hook
    // didn't abort this transition by transitioning elsewhere.
    throwIfAborted(transition);
    return resolveOneRouteInfo(currentState, transition);
  }
  class TransitionState {
    constructor() {
      this.routeInfos = [];
      this.queryParams = {};
      this.params = {};
    }
    promiseLabel(label) {
      var targetName = '';
      forEach(this.routeInfos, function (routeInfo) {
        if (targetName !== '') {
          targetName += '.';
        }
        targetName += routeInfo.name;
        return true;
      });
      return promiseLabel("'" + targetName + "': " + label);
    }
    resolve(transition) {
      // First, calculate params for this state. This is useful
      // information to provide to the various route hooks.
      var params = this.params;
      forEach(this.routeInfos, routeInfo => {
        params[routeInfo.name] = routeInfo.params || {};
        return true;
      });
      transition.resolveIndex = 0;
      var callback = resolveOneRouteInfo.bind(null, this, transition);
      var errorHandler = handleError.bind(null, this, transition);
      // The prelude RSVP.resolve() async moves us into the promise land.
      return _rsvp.Promise.resolve(null, this.promiseLabel('Start transition')).then(callback, null, this.promiseLabel('Resolve route')).catch(errorHandler, this.promiseLabel('Handle error')).then(() => this);
    }
  }
  _exports.TransitionState = TransitionState;
  class TransitionError {
    constructor(error, route, wasAborted, state) {
      this.error = error;
      this.route = route;
      this.wasAborted = wasAborted;
      this.state = state;
    }
  }
  _exports.TransitionError = TransitionError;
  class NamedTransitionIntent extends TransitionIntent {
    constructor(router, name, pivotHandler, contexts, queryParams, data) {
      if (contexts === void 0) {
        contexts = [];
      }
      if (queryParams === void 0) {
        queryParams = {};
      }
      super(router, data);
      this.preTransitionState = undefined;
      this.name = name;
      this.pivotHandler = pivotHandler;
      this.contexts = contexts;
      this.queryParams = queryParams;
    }
    applyToState(oldState, isIntermediate) {
      var handlers = this.router.recognizer.handlersFor(this.name);
      var targetRouteName = handlers[handlers.length - 1].handler;
      return this.applyToHandlers(oldState, handlers, targetRouteName, isIntermediate, false);
    }
    applyToHandlers(oldState, parsedHandlers, targetRouteName, isIntermediate, checkingIfActive) {
      var i, len;
      var newState = new TransitionState();
      var objects = this.contexts.slice(0);
      var invalidateIndex = parsedHandlers.length;
      // Pivot handlers are provided for refresh transitions
      if (this.pivotHandler) {
        for (i = 0, len = parsedHandlers.length; i < len; ++i) {
          if (parsedHandlers[i].handler === this.pivotHandler._internalName) {
            invalidateIndex = i;
            break;
          }
        }
      }
      for (i = parsedHandlers.length - 1; i >= 0; --i) {
        var result = parsedHandlers[i];
        var name = result.handler;
        var oldHandlerInfo = oldState.routeInfos[i];
        var newHandlerInfo = null;
        if (result.names.length > 0) {
          if (i >= invalidateIndex) {
            newHandlerInfo = this.createParamHandlerInfo(name, result.names, objects, oldHandlerInfo);
          } else {
            newHandlerInfo = this.getHandlerInfoForDynamicSegment(name, result.names, objects, oldHandlerInfo, targetRouteName, i);
          }
        } else {
          // This route has no dynamic segment.
          // Therefore treat as a param-based handlerInfo
          // with empty params. This will cause the `model`
          // hook to be called with empty params, which is desirable.
          newHandlerInfo = this.createParamHandlerInfo(name, result.names, objects, oldHandlerInfo);
        }
        if (checkingIfActive) {
          // If we're performing an isActive check, we want to
          // serialize URL params with the provided context, but
          // ignore mismatches between old and new context.
          newHandlerInfo = newHandlerInfo.becomeResolved(null,
          // SAFETY: This seems to imply that it would be resolved, but it's unclear if that's actually the case.
          newHandlerInfo.context);
          var oldContext = oldHandlerInfo && oldHandlerInfo.context;
          if (result.names.length > 0 && oldHandlerInfo.context !== undefined && newHandlerInfo.context === oldContext) {
            // If contexts match in isActive test, assume params also match.
            // This allows for flexibility in not requiring that every last
            // handler provide a `serialize` method
            newHandlerInfo.params = oldHandlerInfo && oldHandlerInfo.params;
          }
          newHandlerInfo.context = oldContext;
        }
        var handlerToUse = oldHandlerInfo;
        if (i >= invalidateIndex || newHandlerInfo.shouldSupersede(oldHandlerInfo)) {
          invalidateIndex = Math.min(i, invalidateIndex);
          handlerToUse = newHandlerInfo;
        }
        if (isIntermediate && !checkingIfActive) {
          handlerToUse = handlerToUse.becomeResolved(null,
          // SAFETY: This seems to imply that it would be resolved, but it's unclear if that's actually the case.
          handlerToUse.context);
        }
        newState.routeInfos.unshift(handlerToUse);
      }
      if (objects.length > 0) {
        throw new Error('More context objects were passed than there are dynamic segments for the route: ' + targetRouteName);
      }
      if (!isIntermediate) {
        this.invalidateChildren(newState.routeInfos, invalidateIndex);
      }
      merge(newState.queryParams, this.queryParams || {});
      if (isIntermediate && oldState.queryParams) {
        merge(newState.queryParams, oldState.queryParams);
      }
      return newState;
    }
    invalidateChildren(handlerInfos, invalidateIndex) {
      for (var i = invalidateIndex, l = handlerInfos.length; i < l; ++i) {
        var handlerInfo = handlerInfos[i];
        if (handlerInfo.isResolved) {
          var {
            name,
            params,
            route,
            paramNames
          } = handlerInfos[i];
          handlerInfos[i] = new UnresolvedRouteInfoByParam(this.router, name, paramNames, params, route);
        }
      }
    }
    getHandlerInfoForDynamicSegment(name, names, objects, oldHandlerInfo, _targetRouteName, i) {
      var objectToUse;
      if (objects.length > 0) {
        // Use the objects provided for this transition.
        objectToUse = objects[objects.length - 1];
        if (isParam(objectToUse)) {
          return this.createParamHandlerInfo(name, names, objects, oldHandlerInfo);
        } else {
          objects.pop();
        }
      } else if (oldHandlerInfo && oldHandlerInfo.name === name) {
        // Reuse the matching oldHandlerInfo
        return oldHandlerInfo;
      } else {
        if (this.preTransitionState) {
          var preTransitionHandlerInfo = this.preTransitionState.routeInfos[i];
          objectToUse = preTransitionHandlerInfo === null || preTransitionHandlerInfo === void 0 ? void 0 : preTransitionHandlerInfo.context;
        } else {
          // Ideally we should throw this error to provide maximal
          // information to the user that not enough context objects
          // were provided, but this proves too cumbersome in Ember
          // in cases where inner template helpers are evaluated
          // before parent helpers un-render, in which cases this
          // error somewhat prematurely fires.
          //throw new Error("Not enough context objects were provided to complete a transition to " + targetRouteName + ". Specifically, the " + name + " route needs an object that can be serialized into its dynamic URL segments [" + names.join(', ') + "]");
          return oldHandlerInfo;
        }
      }
      return new UnresolvedRouteInfoByObject(this.router, name, names, objectToUse);
    }
    createParamHandlerInfo(name, names, objects, oldHandlerInfo) {
      var params = {};
      // Soak up all the provided string/numbers
      var numNames = names.length;
      var missingParams = [];
      while (numNames--) {
        // Only use old params if the names match with the new handler
        var oldParams = oldHandlerInfo && name === oldHandlerInfo.name && oldHandlerInfo.params || {};
        var peek = objects[objects.length - 1];
        var paramName = names[numNames];
        if (isParam(peek)) {
          params[paramName] = '' + objects.pop();
        } else {
          // If we're here, this means only some of the params
          // were string/number params, so try and use a param
          // value from a previous handler.
          if (oldParams.hasOwnProperty(paramName)) {
            params[paramName] = oldParams[paramName];
          } else {
            missingParams.push(paramName);
          }
        }
      }
      if (missingParams.length > 0) {
        throw new Error(`You didn't provide enough string/numeric parameters to satisfy all of the dynamic segments for route ${name}.` + ` Missing params: ${missingParams}`);
      }
      return new UnresolvedRouteInfoByParam(this.router, name, names, params);
    }
  }
  var UnrecognizedURLError = function () {
    UnrecognizedURLError.prototype = Object.create(Error.prototype);
    UnrecognizedURLError.prototype.constructor = UnrecognizedURLError;
    function UnrecognizedURLError(message) {
      var error = Error.call(this, message);
      this.name = 'UnrecognizedURLError';
      this.message = message || 'UnrecognizedURL';
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, UnrecognizedURLError);
      } else {
        this.stack = error.stack;
      }
    }
    return UnrecognizedURLError;
  }();
  class URLTransitionIntent extends TransitionIntent {
    constructor(router, url, data) {
      super(router, data);
      this.url = url;
      this.preTransitionState = undefined;
    }
    applyToState(oldState) {
      var newState = new TransitionState();
      var results = this.router.recognizer.recognize(this.url),
        i,
        len;
      if (!results) {
        throw new UnrecognizedURLError(this.url);
      }
      var statesDiffer = false;
      var _url = this.url;
      // Checks if a handler is accessible by URL. If it is not, an error is thrown.
      // For the case where the handler is loaded asynchronously, the error will be
      // thrown once it is loaded.
      function checkHandlerAccessibility(handler) {
        if (handler && handler.inaccessibleByURL) {
          throw new UnrecognizedURLError(_url);
        }
        return handler;
      }
      for (i = 0, len = results.length; i < len; ++i) {
        var result = results[i];
        var name = result.handler;
        var paramNames = [];
        if (this.router.recognizer.hasRoute(name)) {
          paramNames = this.router.recognizer.handlersFor(name)[i].names;
        }
        var newRouteInfo = new UnresolvedRouteInfoByParam(this.router, name, paramNames, result.params);
        var route = newRouteInfo.route;
        if (route) {
          checkHandlerAccessibility(route);
        } else {
          // If the handler is being loaded asynchronously, check if we can
          // access it after it has resolved
          newRouteInfo.routePromise = newRouteInfo.routePromise.then(checkHandlerAccessibility);
        }
        var oldRouteInfo = oldState.routeInfos[i];
        if (statesDiffer || newRouteInfo.shouldSupersede(oldRouteInfo)) {
          statesDiffer = true;
          newState.routeInfos[i] = newRouteInfo;
        } else {
          newState.routeInfos[i] = oldRouteInfo;
        }
      }
      merge(newState.queryParams, results.queryParams);
      return newState;
    }
  }
  class Router {
    constructor(logger) {
      this._lastQueryParams = {};
      this.state = undefined;
      this.oldState = undefined;
      this.activeTransition = undefined;
      this.currentRouteInfos = undefined;
      this._changedQueryParams = undefined;
      this.currentSequence = 0;
      this.log = logger;
      this.recognizer = new _routeRecognizer.default();
      this.reset();
    }
    /**
      The main entry point into the router. The API is essentially
      the same as the `map` method in `route-recognizer`.
         This method extracts the String handler at the last `.to()`
      call and uses it as the name of the whole route.
         @param {Function} callback
    */
    map(callback) {
      this.recognizer.map(callback, function (recognizer, routes) {
        for (var i = routes.length - 1, _proceed = true; i >= 0 && _proceed; --i) {
          var route = routes[i];
          var handler = route.handler;
          recognizer.add(routes, {
            as: handler
          });
          _proceed = route.path === '/' || route.path === '' || handler.slice(-6) === '.index';
        }
      });
    }
    hasRoute(route) {
      return this.recognizer.hasRoute(route);
    }
    queryParamsTransition(changelist, wasTransitioning, oldState, newState) {
      this.fireQueryParamDidChange(newState, changelist);
      if (!wasTransitioning && this.activeTransition) {
        // One of the routes in queryParamsDidChange
        // caused a transition. Just return that transition.
        return this.activeTransition;
      } else {
        // Running queryParamsDidChange didn't change anything.
        // Just update query params and be on our way.
        // We have to return a noop transition that will
        // perform a URL update at the end. This gives
        // the user the ability to set the url update
        // method (default is replaceState).
        var newTransition = new Transition(this, undefined, undefined);
        newTransition.queryParamsOnly = true;
        oldState.queryParams = this.finalizeQueryParamChange(newState.routeInfos, newState.queryParams, newTransition);
        newTransition[QUERY_PARAMS_SYMBOL] = newState.queryParams;
        this.toReadOnlyInfos(newTransition, newState);
        this.routeWillChange(newTransition);
        newTransition.promise = newTransition.promise.then(result => {
          if (!newTransition.isAborted) {
            this._updateURL(newTransition, oldState);
            this.didTransition(this.currentRouteInfos);
            this.toInfos(newTransition, newState.routeInfos, true);
            this.routeDidChange(newTransition);
          }
          return result;
        }, null, promiseLabel('Transition complete'));
        return newTransition;
      }
    }
    transitionByIntent(intent, isIntermediate) {
      try {
        return this.getTransitionByIntent(intent, isIntermediate);
      } catch (e) {
        return new Transition(this, intent, undefined, e, undefined);
      }
    }
    recognize(url) {
      var intent = new URLTransitionIntent(this, url);
      var newState = this.generateNewState(intent);
      if (newState === null) {
        return newState;
      }
      var readonlyInfos = toReadOnlyRouteInfo(newState.routeInfos, newState.queryParams);
      return readonlyInfos[readonlyInfos.length - 1];
    }
    recognizeAndLoad(url) {
      var intent = new URLTransitionIntent(this, url);
      var newState = this.generateNewState(intent);
      if (newState === null) {
        return _rsvp.Promise.reject(`URL ${url} was not recognized`);
      }
      var newTransition = new Transition(this, intent, newState, undefined);
      return newTransition.then(() => {
        var routeInfosWithAttributes = toReadOnlyRouteInfo(newState.routeInfos, newTransition[QUERY_PARAMS_SYMBOL], true);
        return routeInfosWithAttributes[routeInfosWithAttributes.length - 1];
      });
    }
    generateNewState(intent) {
      try {
        return intent.applyToState(this.state, false);
      } catch (e) {
        return null;
      }
    }
    getTransitionByIntent(intent, isIntermediate) {
      var wasTransitioning = !!this.activeTransition;
      var oldState = wasTransitioning ? this.activeTransition[STATE_SYMBOL] : this.state;
      var newTransition;
      var newState = intent.applyToState(oldState, isIntermediate);
      var queryParamChangelist = getChangelist(oldState.queryParams, newState.queryParams);
      if (routeInfosEqual(newState.routeInfos, oldState.routeInfos)) {
        // This is a no-op transition. See if query params changed.
        if (queryParamChangelist) {
          var _newTransition = this.queryParamsTransition(queryParamChangelist, wasTransitioning, oldState, newState);
          _newTransition.queryParamsOnly = true;
          // SAFETY: The returned OpaqueTransition should actually be this.
          return _newTransition;
        }
        // No-op. No need to create a new transition.
        return this.activeTransition || new Transition(this, undefined, undefined);
      }
      if (isIntermediate) {
        var transition = new Transition(this, undefined, newState);
        transition.isIntermediate = true;
        this.toReadOnlyInfos(transition, newState);
        this.setupContexts(newState, transition);
        this.routeWillChange(transition);
        return this.activeTransition;
      }
      // Create a new transition to the destination route.
      newTransition = new Transition(this, intent, newState, undefined, this.activeTransition);
      // transition is to same route with same params, only query params differ.
      // not caught above probably because refresh() has been used
      if (routeInfosSameExceptQueryParams(newState.routeInfos, oldState.routeInfos)) {
        newTransition.queryParamsOnly = true;
      }
      this.toReadOnlyInfos(newTransition, newState);
      // Abort and usurp any previously active transition.
      if (this.activeTransition) {
        this.activeTransition.redirect(newTransition);
      }
      this.activeTransition = newTransition;
      // Transition promises by default resolve with resolved state.
      // For our purposes, swap out the promise to resolve
      // after the transition has been finalized.
      newTransition.promise = newTransition.promise.then(result => {
        return this.finalizeTransition(newTransition, result);
      }, null, promiseLabel('Settle transition promise when transition is finalized'));
      if (!wasTransitioning) {
        this.notifyExistingHandlers(newState, newTransition);
      }
      this.fireQueryParamDidChange(newState, queryParamChangelist);
      return newTransition;
    }
    /**
    @private
       Begins and returns a Transition based on the provided
    arguments. Accepts arguments in the form of both URL
    transitions and named transitions.
       @param {Router} router
    @param {Array[Object]} args arguments passed to transitionTo,
      replaceWith, or handleURL
    */
    doTransition(name, modelsArray, isIntermediate) {
      if (modelsArray === void 0) {
        modelsArray = [];
      }
      if (isIntermediate === void 0) {
        isIntermediate = false;
      }
      var lastArg = modelsArray[modelsArray.length - 1];
      var queryParams = {};
      if (lastArg && Object.prototype.hasOwnProperty.call(lastArg, 'queryParams')) {
        // We just checked this.
        // TODO: Use an assertion?
        queryParams = modelsArray.pop().queryParams;
      }
      var intent;
      if (name === undefined) {
        log(this, 'Updating query params');
        // A query param update is really just a transition
        // into the route you're already on.
        var {
          routeInfos
        } = this.state;
        intent = new NamedTransitionIntent(this, routeInfos[routeInfos.length - 1].name, undefined, [], queryParams);
      } else if (name.charAt(0) === '/') {
        log(this, 'Attempting URL transition to ' + name);
        intent = new URLTransitionIntent(this, name);
      } else {
        log(this, 'Attempting transition to ' + name);
        intent = new NamedTransitionIntent(this, name, undefined,
        // SAFETY: We know this to be the case since we removed the last item if it was QPs
        modelsArray, queryParams);
      }
      return this.transitionByIntent(intent, isIntermediate);
    }
    /**
    @private
       Updates the URL (if necessary) and calls `setupContexts`
    to update the router's array of `currentRouteInfos`.
    */
    finalizeTransition(transition, newState) {
      try {
        log(transition.router, transition.sequence, 'Resolved all models on destination route; finalizing transition.');
        var routeInfos = newState.routeInfos;
        // Run all the necessary enter/setup/exit hooks
        this.setupContexts(newState, transition);
        // Check if a redirect occurred in enter/setup
        if (transition.isAborted) {
          // TODO: cleaner way? distinguish b/w targetRouteInfos?
          this.state.routeInfos = this.currentRouteInfos;
          return _rsvp.Promise.reject(logAbort(transition));
        }
        this._updateURL(transition, newState);
        transition.isActive = false;
        this.activeTransition = undefined;
        this.triggerEvent(this.currentRouteInfos, true, 'didTransition', []);
        this.didTransition(this.currentRouteInfos);
        this.toInfos(transition, newState.routeInfos, true);
        this.routeDidChange(transition);
        log(this, transition.sequence, 'TRANSITION COMPLETE.');
        // Resolve with the final route.
        return routeInfos[routeInfos.length - 1].route;
      } catch (e) {
        if (!isTransitionAborted(e)) {
          var infos = transition[STATE_SYMBOL].routeInfos;
          transition.trigger(true, 'error', e, transition, infos[infos.length - 1].route);
          transition.abort();
        }
        throw e;
      }
    }
    /**
    @private
       Takes an Array of `RouteInfo`s, figures out which ones are
    exiting, entering, or changing contexts, and calls the
    proper route hooks.
       For example, consider the following tree of routes. Each route is
    followed by the URL segment it handles.
       ```
    |~index ("/")
    | |~posts ("/posts")
    | | |-showPost ("/:id")
    | | |-newPost ("/new")
    | | |-editPost ("/edit")
    | |~about ("/about/:id")
    ```
       Consider the following transitions:
       1. A URL transition to `/posts/1`.
       1. Triggers the `*model` callbacks on the
          `index`, `posts`, and `showPost` routes
       2. Triggers the `enter` callback on the same
       3. Triggers the `setup` callback on the same
    2. A direct transition to `newPost`
       1. Triggers the `exit` callback on `showPost`
       2. Triggers the `enter` callback on `newPost`
       3. Triggers the `setup` callback on `newPost`
    3. A direct transition to `about` with a specified
       context object
       1. Triggers the `exit` callback on `newPost`
          and `posts`
       2. Triggers the `serialize` callback on `about`
       3. Triggers the `enter` callback on `about`
       4. Triggers the `setup` callback on `about`
       @param {Router} transition
    @param {TransitionState} newState
    */
    setupContexts(newState, transition) {
      var partition = this.partitionRoutes(this.state, newState);
      var i, l, route;
      for (i = 0, l = partition.exited.length; i < l; i++) {
        route = partition.exited[i].route;
        delete route.context;
        if (route !== undefined) {
          if (route._internalReset !== undefined) {
            route._internalReset(true, transition);
          }
          if (route.exit !== undefined) {
            route.exit(transition);
          }
        }
      }
      var oldState = this.oldState = this.state;
      this.state = newState;
      var currentRouteInfos = this.currentRouteInfos = partition.unchanged.slice();
      try {
        for (i = 0, l = partition.reset.length; i < l; i++) {
          route = partition.reset[i].route;
          if (route !== undefined) {
            if (route._internalReset !== undefined) {
              route._internalReset(false, transition);
            }
          }
        }
        for (i = 0, l = partition.updatedContext.length; i < l; i++) {
          this.routeEnteredOrUpdated(currentRouteInfos, partition.updatedContext[i], false, transition);
        }
        for (i = 0, l = partition.entered.length; i < l; i++) {
          this.routeEnteredOrUpdated(currentRouteInfos, partition.entered[i], true, transition);
        }
      } catch (e) {
        this.state = oldState;
        this.currentRouteInfos = oldState.routeInfos;
        throw e;
      }
      this.state.queryParams = this.finalizeQueryParamChange(currentRouteInfos, newState.queryParams, transition);
    }
    /**
    @private
       Fires queryParamsDidChange event
    */
    fireQueryParamDidChange(newState, queryParamChangelist) {
      // If queryParams changed trigger event
      if (queryParamChangelist) {
        // This is a little hacky but we need some way of storing
        // changed query params given that no activeTransition
        // is guaranteed to have occurred.
        this._changedQueryParams = queryParamChangelist.all;
        this.triggerEvent(newState.routeInfos, true, 'queryParamsDidChange', [queryParamChangelist.changed, queryParamChangelist.all, queryParamChangelist.removed]);
        this._changedQueryParams = undefined;
      }
    }
    /**
    @private
       Helper method used by setupContexts. Handles errors or redirects
    that may happen in enter/setup.
    */
    routeEnteredOrUpdated(currentRouteInfos, routeInfo, enter, transition) {
      var route = routeInfo.route,
        context = routeInfo.context;
      function _routeEnteredOrUpdated(route) {
        if (enter) {
          if (route.enter !== undefined) {
            route.enter(transition);
          }
        }
        throwIfAborted(transition);
        route.context = context;
        if (route.contextDidChange !== undefined) {
          route.contextDidChange();
        }
        if (route.setup !== undefined) {
          route.setup(context, transition);
        }
        throwIfAborted(transition);
        currentRouteInfos.push(routeInfo);
        return route;
      }
      // If the route doesn't exist, it means we haven't resolved the route promise yet
      if (route === undefined) {
        routeInfo.routePromise = routeInfo.routePromise.then(_routeEnteredOrUpdated);
      } else {
        _routeEnteredOrUpdated(route);
      }
      return true;
    }
    /**
    @private
       This function is called when transitioning from one URL to
    another to determine which routes are no longer active,
    which routes are newly active, and which routes remain
    active but have their context changed.
       Take a list of old routes and new routes and partition
    them into four buckets:
       * unchanged: the route was active in both the old and
      new URL, and its context remains the same
    * updated context: the route was active in both the
      old and new URL, but its context changed. The route's
      `setup` method, if any, will be called with the new
      context.
    * exited: the route was active in the old URL, but is
      no longer active.
    * entered: the route was not active in the old URL, but
      is now active.
       The PartitionedRoutes structure has four fields:
       * `updatedContext`: a list of `RouteInfo` objects that
      represent routes that remain active but have a changed
      context
    * `entered`: a list of `RouteInfo` objects that represent
      routes that are newly active
    * `exited`: a list of `RouteInfo` objects that are no
      longer active.
    * `unchanged`: a list of `RouteInfo` objects that remain active.
       @param {Array[InternalRouteInfo]} oldRoutes a list of the route
      information for the previous URL (or `[]` if this is the
      first handled transition)
    @param {Array[InternalRouteInfo]} newRoutes a list of the route
      information for the new URL
       @return {Partition}
    */
    partitionRoutes(oldState, newState) {
      var oldRouteInfos = oldState.routeInfos;
      var newRouteInfos = newState.routeInfos;
      var routes = {
        updatedContext: [],
        exited: [],
        entered: [],
        unchanged: [],
        reset: []
      };
      var routeChanged,
        contextChanged = false,
        i,
        l;
      for (i = 0, l = newRouteInfos.length; i < l; i++) {
        var oldRouteInfo = oldRouteInfos[i],
          newRouteInfo = newRouteInfos[i];
        if (!oldRouteInfo || oldRouteInfo.route !== newRouteInfo.route) {
          routeChanged = true;
        }
        if (routeChanged) {
          routes.entered.push(newRouteInfo);
          if (oldRouteInfo) {
            routes.exited.unshift(oldRouteInfo);
          }
        } else if (contextChanged || oldRouteInfo.context !== newRouteInfo.context) {
          contextChanged = true;
          routes.updatedContext.push(newRouteInfo);
        } else {
          routes.unchanged.push(oldRouteInfo);
        }
      }
      for (i = newRouteInfos.length, l = oldRouteInfos.length; i < l; i++) {
        routes.exited.unshift(oldRouteInfos[i]);
      }
      routes.reset = routes.updatedContext.slice();
      routes.reset.reverse();
      return routes;
    }
    _updateURL(transition, state) {
      var urlMethod = transition.urlMethod;
      if (!urlMethod) {
        return;
      }
      var {
        routeInfos
      } = state;
      var {
        name: routeName
      } = routeInfos[routeInfos.length - 1];
      var params = {};
      for (var i = routeInfos.length - 1; i >= 0; --i) {
        var routeInfo = routeInfos[i];
        merge(params, routeInfo.params);
        if (routeInfo.route.inaccessibleByURL) {
          urlMethod = null;
        }
      }
      if (urlMethod) {
        params.queryParams = transition._visibleQueryParams || state.queryParams;
        var url = this.recognizer.generate(routeName, params);
        // transitions during the initial transition must always use replaceURL.
        // When the app boots, you are at a url, e.g. /foo. If some route
        // redirects to bar as part of the initial transition, you don't want to
        // add a history entry for /foo. If you do, pressing back will immediately
        // hit the redirect again and take you back to /bar, thus killing the back
        // button
        var initial = transition.isCausedByInitialTransition;
        // say you are at / and you click a link to route /foo. In /foo's
        // route, the transition is aborted using replaceWith('/bar').
        // Because the current url is still /, the history entry for / is
        // removed from the history. Clicking back will take you to the page
        // you were on before /, which is often not even the app, thus killing
        // the back button. That's why updateURL is always correct for an
        // aborting transition that's not the initial transition
        var replaceAndNotAborting = urlMethod === 'replace' && !transition.isCausedByAbortingTransition;
        // because calling refresh causes an aborted transition, this needs to be
        // special cased - if the initial transition is a replace transition, the
        // urlMethod should be honored here.
        var isQueryParamsRefreshTransition = transition.queryParamsOnly && urlMethod === 'replace';
        // say you are at / and you a `replaceWith(/foo)` is called. Then, that
        // transition is aborted with `replaceWith(/bar)`. At the end, we should
        // end up with /bar replacing /. We are replacing the replace. We only
        // will replace the initial route if all subsequent aborts are also
        // replaces. However, there is some ambiguity around the correct behavior
        // here.
        var replacingReplace = urlMethod === 'replace' && transition.isCausedByAbortingReplaceTransition;
        if (initial || replaceAndNotAborting || isQueryParamsRefreshTransition || replacingReplace) {
          this.replaceURL(url);
        } else {
          this.updateURL(url);
        }
      }
    }
    finalizeQueryParamChange(resolvedHandlers, newQueryParams, transition) {
      // We fire a finalizeQueryParamChange event which
      // gives the new route hierarchy a chance to tell
      // us which query params it's consuming and what
      // their final values are. If a query param is
      // no longer consumed in the final route hierarchy,
      // its serialized segment will be removed
      // from the URL.
      for (var k in newQueryParams) {
        if (newQueryParams.hasOwnProperty(k) && newQueryParams[k] === null) {
          delete newQueryParams[k];
        }
      }
      var finalQueryParamsArray = [];
      this.triggerEvent(resolvedHandlers, true, 'finalizeQueryParamChange', [newQueryParams, finalQueryParamsArray, transition]);
      if (transition) {
        transition._visibleQueryParams = {};
      }
      var finalQueryParams = {};
      for (var i = 0, len = finalQueryParamsArray.length; i < len; ++i) {
        var qp = finalQueryParamsArray[i];
        finalQueryParams[qp.key] = qp.value;
        if (transition && qp.visible !== false) {
          transition._visibleQueryParams[qp.key] = qp.value;
        }
      }
      return finalQueryParams;
    }
    toReadOnlyInfos(newTransition, newState) {
      var oldRouteInfos = this.state.routeInfos;
      this.fromInfos(newTransition, oldRouteInfos);
      this.toInfos(newTransition, newState.routeInfos);
      this._lastQueryParams = newState.queryParams;
    }
    fromInfos(newTransition, oldRouteInfos) {
      if (newTransition !== undefined && oldRouteInfos.length > 0) {
        var fromInfos = toReadOnlyRouteInfo(oldRouteInfos, Object.assign({}, this._lastQueryParams), true);
        newTransition.from = fromInfos[fromInfos.length - 1] || null;
      }
    }
    toInfos(newTransition, newRouteInfos, includeAttributes) {
      if (includeAttributes === void 0) {
        includeAttributes = false;
      }
      if (newTransition !== undefined && newRouteInfos.length > 0) {
        var toInfos = toReadOnlyRouteInfo(newRouteInfos, Object.assign({}, newTransition[QUERY_PARAMS_SYMBOL]), includeAttributes);
        newTransition.to = toInfos[toInfos.length - 1] || null;
      }
    }
    notifyExistingHandlers(newState, newTransition) {
      var oldRouteInfos = this.state.routeInfos,
        i,
        oldRouteInfoLen,
        oldHandler,
        newRouteInfo;
      oldRouteInfoLen = oldRouteInfos.length;
      for (i = 0; i < oldRouteInfoLen; i++) {
        oldHandler = oldRouteInfos[i];
        newRouteInfo = newState.routeInfos[i];
        if (!newRouteInfo || oldHandler.name !== newRouteInfo.name) {
          break;
        }
        if (!newRouteInfo.isResolved) {}
      }
      this.triggerEvent(oldRouteInfos, true, 'willTransition', [newTransition]);
      this.routeWillChange(newTransition);
      this.willTransition(oldRouteInfos, newState.routeInfos, newTransition);
    }
    /**
      Clears the current and target route routes and triggers exit
      on each of them starting at the leaf and traversing up through
      its ancestors.
    */
    reset() {
      if (this.state) {
        forEach(this.state.routeInfos.slice().reverse(), function (routeInfo) {
          var route = routeInfo.route;
          if (route !== undefined) {
            if (route.exit !== undefined) {
              route.exit();
            }
          }
          return true;
        });
      }
      this.oldState = undefined;
      this.state = new TransitionState();
      this.currentRouteInfos = undefined;
    }
    /**
      let handler = routeInfo.handler;
      The entry point for handling a change to the URL (usually
      via the back and forward button).
         Returns an Array of handlers and the parameters associated
      with those parameters.
         @param {String} url a URL to process
         @return {Array} an Array of `[handler, parameter]` tuples
    */
    handleURL(url) {
      // Perform a URL-based transition, but don't change
      // the URL afterward, since it already happened.
      if (url.charAt(0) !== '/') {
        url = '/' + url;
      }
      return this.doTransition(url).method(null);
    }
    /**
      Transition into the specified named route.
         If necessary, trigger the exit callback on any routes
      that are no longer represented by the target route.
         @param {String} name the name of the route
    */
    transitionTo(name) {
      for (var _len3 = arguments.length, contexts = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        contexts[_key3 - 1] = arguments[_key3];
      }
      if (typeof name === 'object') {
        contexts.push(name);
        return this.doTransition(undefined, contexts, false);
      }
      return this.doTransition(name, contexts);
    }
    intermediateTransitionTo(name) {
      for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        args[_key4 - 1] = arguments[_key4];
      }
      return this.doTransition(name, args, true);
    }
    refresh(pivotRoute) {
      var previousTransition = this.activeTransition;
      var state = previousTransition ? previousTransition[STATE_SYMBOL] : this.state;
      var routeInfos = state.routeInfos;
      if (pivotRoute === undefined) {
        pivotRoute = routeInfos[0].route;
      }
      log(this, 'Starting a refresh transition');
      var name = routeInfos[routeInfos.length - 1].name;
      var intent = new NamedTransitionIntent(this, name, pivotRoute, [], this._changedQueryParams || state.queryParams);
      var newTransition = this.transitionByIntent(intent, false);
      // if the previous transition is a replace transition, that needs to be preserved
      if (previousTransition && previousTransition.urlMethod === 'replace') {
        newTransition.method(previousTransition.urlMethod);
      }
      return newTransition;
    }
    /**
      Identical to `transitionTo` except that the current URL will be replaced
      if possible.
         This method is intended primarily for use with `replaceState`.
         @param {String} name the name of the route
    */
    replaceWith(name) {
      return this.doTransition(name).method('replace');
    }
    /**
      Take a named route and context objects and generate a
      URL.
         @param {String} name the name of the route to generate
        a URL for
      @param {...Object} objects a list of objects to serialize
         @return {String} a URL
    */
    generate(routeName) {
      for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
        args[_key5 - 1] = arguments[_key5];
      }
      var partitionedArgs = extractQueryParams(args),
        suppliedParams = partitionedArgs[0],
        queryParams = partitionedArgs[1];
      // Construct a TransitionIntent with the provided params
      // and apply it to the present state of the router.
      var intent = new NamedTransitionIntent(this, routeName, undefined, suppliedParams);
      var state = intent.applyToState(this.state, false);
      var params = {};
      for (var i = 0, len = state.routeInfos.length; i < len; ++i) {
        var routeInfo = state.routeInfos[i];
        var routeParams = routeInfo.serialize();
        merge(params, routeParams);
      }
      params.queryParams = queryParams;
      return this.recognizer.generate(routeName, params);
    }
    applyIntent(routeName, contexts) {
      var intent = new NamedTransitionIntent(this, routeName, undefined, contexts);
      var state = this.activeTransition && this.activeTransition[STATE_SYMBOL] || this.state;
      return intent.applyToState(state, false);
    }
    isActiveIntent(routeName, contexts, queryParams, _state) {
      var state = _state || this.state,
        targetRouteInfos = state.routeInfos,
        routeInfo,
        len;
      if (!targetRouteInfos.length) {
        return false;
      }
      var targetHandler = targetRouteInfos[targetRouteInfos.length - 1].name;
      var recognizerHandlers = this.recognizer.handlersFor(targetHandler);
      var index = 0;
      for (len = recognizerHandlers.length; index < len; ++index) {
        routeInfo = targetRouteInfos[index];
        if (routeInfo.name === routeName) {
          break;
        }
      }
      if (index === recognizerHandlers.length) {
        // The provided route name isn't even in the route hierarchy.
        return false;
      }
      var testState = new TransitionState();
      testState.routeInfos = targetRouteInfos.slice(0, index + 1);
      recognizerHandlers = recognizerHandlers.slice(0, index + 1);
      var intent = new NamedTransitionIntent(this, targetHandler, undefined, contexts);
      var newState = intent.applyToHandlers(testState, recognizerHandlers, targetHandler, true, true);
      var routesEqual = routeInfosEqual(newState.routeInfos, testState.routeInfos);
      if (!queryParams || !routesEqual) {
        return routesEqual;
      }
      // Get a hash of QPs that will still be active on new route
      var activeQPsOnNewHandler = {};
      merge(activeQPsOnNewHandler, queryParams);
      var activeQueryParams = state.queryParams;
      for (var key in activeQueryParams) {
        if (activeQueryParams.hasOwnProperty(key) && activeQPsOnNewHandler.hasOwnProperty(key)) {
          activeQPsOnNewHandler[key] = activeQueryParams[key];
        }
      }
      return routesEqual && !getChangelist(activeQPsOnNewHandler, queryParams);
    }
    isActive(routeName) {
      for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
        args[_key6 - 1] = arguments[_key6];
      }
      var [contexts, queryParams] = extractQueryParams(args);
      return this.isActiveIntent(routeName, contexts, queryParams);
    }
    trigger(name) {
      for (var _len7 = arguments.length, args = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
        args[_key7 - 1] = arguments[_key7];
      }
      this.triggerEvent(this.currentRouteInfos, false, name, args);
    }
  }
  function routeInfosEqual(routeInfos, otherRouteInfos) {
    if (routeInfos.length !== otherRouteInfos.length) {
      return false;
    }
    for (var i = 0, len = routeInfos.length; i < len; ++i) {
      // SAFETY: Just casting for comparison
      if (routeInfos[i] !== otherRouteInfos[i]) {
        return false;
      }
    }
    return true;
  }
  function routeInfosSameExceptQueryParams(routeInfos, otherRouteInfos) {
    if (routeInfos.length !== otherRouteInfos.length) {
      return false;
    }
    for (var i = 0, len = routeInfos.length; i < len; ++i) {
      if (routeInfos[i].name !== otherRouteInfos[i].name) {
        return false;
      }
      if (!paramsEqual(routeInfos[i].params, otherRouteInfos[i].params)) {
        return false;
      }
    }
    return true;
  }
  function paramsEqual(params, otherParams) {
    if (params === otherParams) {
      // Both identical or both undefined
      return true;
    }
    if (!params || !otherParams) {
      // One is falsy but other is not
      return false;
    }
    var keys = Object.keys(params);
    var otherKeys = Object.keys(otherParams);
    if (keys.length !== otherKeys.length) {
      return false;
    }
    for (var i = 0, len = keys.length; i < len; ++i) {
      var key = keys[i];
      if (params[key] !== otherParams[key]) {
        return false;
      }
    }
    return true;
  }
  var _default = Router;
  _exports.default = _default;
});
define("rsvp", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Promise = _exports.EventTarget = void 0;
  _exports.all = all$1;
  _exports.allSettled = allSettled;
  _exports.asap = asap;
  _exports.cast = _exports.async = void 0;
  _exports.configure = configure;
  _exports.default = void 0;
  _exports.defer = defer;
  _exports.denodeify = denodeify;
  _exports.filter = filter;
  _exports.hash = hash;
  _exports.hashSettled = hashSettled;
  _exports.map = map;
  _exports.off = off;
  _exports.on = on;
  _exports.race = race$1;
  _exports.reject = reject$2;
  _exports.resolve = resolve$2;
  _exports.rethrow = rethrow;
  function callbacksFor(object) {
    var callbacks = object._promiseCallbacks;
    if (!callbacks) {
      callbacks = object._promiseCallbacks = {};
    }
    return callbacks;
  }

  /**
    @class EventTarget
    @for rsvp
    @public
  */
  var EventTarget = {
    /**
      `EventTarget.mixin` extends an object with EventTarget methods. For
      Example:
       ```javascript
      import EventTarget from 'rsvp';
       let object = {};
       EventTarget.mixin(object);
       object.on('finished', function(event) {
        // handle event
      });
       object.trigger('finished', { detail: value });
      ```
       `EventTarget.mixin` also works with prototypes:
       ```javascript
      import EventTarget from 'rsvp';
       let Person = function() {};
      EventTarget.mixin(Person.prototype);
       let yehuda = new Person();
      let tom = new Person();
       yehuda.on('poke', function(event) {
        console.log('Yehuda says OW');
      });
       tom.on('poke', function(event) {
        console.log('Tom says OW');
      });
       yehuda.trigger('poke');
      tom.trigger('poke');
      ```
       @method mixin
      @for rsvp
      @private
      @param {Object} object object to extend with EventTarget methods
    */
    mixin(object) {
      object.on = this.on;
      object.off = this.off;
      object.trigger = this.trigger;
      object._promiseCallbacks = undefined;
      return object;
    },
    /**
      Registers a callback to be executed when `eventName` is triggered
       ```javascript
      object.on('event', function(eventInfo){
        // handle the event
      });
       object.trigger('event');
      ```
       @method on
      @for EventTarget
      @private
      @param {String} eventName name of the event to listen for
      @param {Function} callback function to be called when the event is triggered.
    */
    on(eventName, callback) {
      if (typeof callback !== 'function') {
        throw new TypeError('Callback must be a function');
      }
      var allCallbacks = callbacksFor(this);
      var callbacks = allCallbacks[eventName];
      if (!callbacks) {
        callbacks = allCallbacks[eventName] = [];
      }
      if (callbacks.indexOf(callback) === -1) {
        callbacks.push(callback);
      }
    },
    /**
      You can use `off` to stop firing a particular callback for an event:
       ```javascript
      function doStuff() { // do stuff! }
      object.on('stuff', doStuff);
       object.trigger('stuff'); // doStuff will be called
       // Unregister ONLY the doStuff callback
      object.off('stuff', doStuff);
      object.trigger('stuff'); // doStuff will NOT be called
      ```
       If you don't pass a `callback` argument to `off`, ALL callbacks for the
      event will not be executed when the event fires. For example:
       ```javascript
      let callback1 = function(){};
      let callback2 = function(){};
       object.on('stuff', callback1);
      object.on('stuff', callback2);
       object.trigger('stuff'); // callback1 and callback2 will be executed.
       object.off('stuff');
      object.trigger('stuff'); // callback1 and callback2 will not be executed!
      ```
       @method off
      @for rsvp
      @private
      @param {String} eventName event to stop listening to
      @param {Function} [callback] optional argument. If given, only the function
      given will be removed from the event's callback queue. If no `callback`
      argument is given, all callbacks will be removed from the event's callback
      queue.
    */
    off(eventName, callback) {
      var allCallbacks = callbacksFor(this);
      if (!callback) {
        allCallbacks[eventName] = [];
        return;
      }
      var callbacks = allCallbacks[eventName];
      var index = callbacks.indexOf(callback);
      if (index !== -1) {
        callbacks.splice(index, 1);
      }
    },
    /**
      Use `trigger` to fire custom events. For example:
       ```javascript
      object.on('foo', function(){
        console.log('foo event happened!');
      });
      object.trigger('foo');
      // 'foo event happened!' logged to the console
      ```
       You can also pass a value as a second argument to `trigger` that will be
      passed as an argument to all event listeners for the event:
       ```javascript
      object.on('foo', function(value){
        console.log(value.name);
      });
       object.trigger('foo', { name: 'bar' });
      // 'bar' logged to the console
      ```
       @method trigger
      @for rsvp
      @private
      @param {String} eventName name of the event to be triggered
      @param {*} [options] optional value to be passed to any event handlers for
      the given `eventName`
    */
    trigger(eventName, options, label) {
      var allCallbacks = callbacksFor(this);
      var callbacks = allCallbacks[eventName];
      if (callbacks) {
        // Don't cache the callbacks.length since it may grow
        var callback;
        for (var i = 0; i < callbacks.length; i++) {
          callback = callbacks[i];
          callback(options, label);
        }
      }
    }
  };
  _exports.EventTarget = EventTarget;
  var config = {
    instrument: false
  };
  EventTarget['mixin'](config);
  function configure(name, value) {
    if (arguments.length === 2) {
      config[name] = value;
    } else {
      return config[name];
    }
  }
  var queue = [];
  function scheduleFlush() {
    setTimeout(() => {
      for (var i = 0; i < queue.length; i++) {
        var entry = queue[i];
        var payload = entry.payload;
        payload.guid = payload.key + payload.id;
        payload.childGuid = payload.key + payload.childId;
        if (payload.error) {
          payload.stack = payload.error.stack;
        }
        config['trigger'](entry.name, entry.payload);
      }
      queue.length = 0;
    }, 50);
  }
  function instrument(eventName, promise, child) {
    if (1 === queue.push({
      name: eventName,
      payload: {
        key: promise._guidKey,
        id: promise._id,
        eventName: eventName,
        detail: promise._result,
        childId: child && child._id,
        label: promise._label,
        timeStamp: Date.now(),
        error: config["instrument-with-stack"] ? new Error(promise._label) : null
      }
    })) {
      scheduleFlush();
    }
  }

  /**
    `Promise.resolve` returns a promise that will become resolved with the
    passed `value`. It is shorthand for the following:
  
    ```javascript
    import Promise from 'rsvp';
  
    let promise = new Promise(function(resolve, reject){
      resolve(1);
    });
  
    promise.then(function(value){
      // value === 1
    });
    ```
  
    Instead of writing the above, your code now simply becomes the following:
  
    ```javascript
    import Promise from 'rsvp';
  
    let promise = RSVP.Promise.resolve(1);
  
    promise.then(function(value){
      // value === 1
    });
    ```
  
    @method resolve
    @for Promise
    @static
    @param {*} object value that the returned promise will be resolved with
    @param {String} [label] optional string for identifying the returned promise.
    Useful for tooling.
    @return {Promise} a promise that will become fulfilled with the given
    `value`
  */
  function resolve$$1(object, label) {
    /*jshint validthis:true */
    var Constructor = this;
    if (object && typeof object === 'object' && object.constructor === Constructor) {
      return object;
    }
    var promise = new Constructor(noop, label);
    resolve$1(promise, object);
    return promise;
  }
  function withOwnPromise() {
    return new TypeError('A promises callback cannot return that same promise.');
  }
  function objectOrFunction(x) {
    var type = typeof x;
    return x !== null && (type === 'object' || type === 'function');
  }
  function noop() {}
  var PENDING = void 0;
  var FULFILLED = 1;
  var REJECTED = 2;
  function tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {
    try {
      then$$1.call(value, fulfillmentHandler, rejectionHandler);
    } catch (e) {
      return e;
    }
  }
  function handleForeignThenable(promise, thenable, then$$1) {
    config.async(promise => {
      var sealed = false;
      var error = tryThen(then$$1, thenable, value => {
        if (sealed) {
          return;
        }
        sealed = true;
        if (thenable === value) {
          fulfill(promise, value);
        } else {
          resolve$1(promise, value);
        }
      }, reason => {
        if (sealed) {
          return;
        }
        sealed = true;
        reject(promise, reason);
      }, 'Settle: ' + (promise._label || ' unknown promise'));
      if (!sealed && error) {
        sealed = true;
        reject(promise, error);
      }
    }, promise);
  }
  function handleOwnThenable(promise, thenable) {
    if (thenable._state === FULFILLED) {
      fulfill(promise, thenable._result);
    } else if (thenable._state === REJECTED) {
      thenable._onError = null;
      reject(promise, thenable._result);
    } else {
      subscribe(thenable, undefined, value => {
        if (thenable === value) {
          fulfill(promise, value);
        } else {
          resolve$1(promise, value);
        }
      }, reason => reject(promise, reason));
    }
  }
  function handleMaybeThenable(promise, maybeThenable, then$$1) {
    var isOwnThenable = maybeThenable.constructor === promise.constructor && then$$1 === then && promise.constructor.resolve === resolve$$1;
    if (isOwnThenable) {
      handleOwnThenable(promise, maybeThenable);
    } else if (typeof then$$1 === 'function') {
      handleForeignThenable(promise, maybeThenable, then$$1);
    } else {
      fulfill(promise, maybeThenable);
    }
  }
  function resolve$1(promise, value) {
    if (promise === value) {
      fulfill(promise, value);
    } else if (objectOrFunction(value)) {
      var then$$1;
      try {
        then$$1 = value.then;
      } catch (error) {
        reject(promise, error);
        return;
      }
      handleMaybeThenable(promise, value, then$$1);
    } else {
      fulfill(promise, value);
    }
  }
  function publishRejection(promise) {
    if (promise._onError) {
      promise._onError(promise._result);
    }
    publish(promise);
  }
  function fulfill(promise, value) {
    if (promise._state !== PENDING) {
      return;
    }
    promise._result = value;
    promise._state = FULFILLED;
    if (promise._subscribers.length === 0) {
      if (config.instrument) {
        instrument('fulfilled', promise);
      }
    } else {
      config.async(publish, promise);
    }
  }
  function reject(promise, reason) {
    if (promise._state !== PENDING) {
      return;
    }
    promise._state = REJECTED;
    promise._result = reason;
    config.async(publishRejection, promise);
  }
  function subscribe(parent, child, onFulfillment, onRejection) {
    var subscribers = parent._subscribers;
    var length = subscribers.length;
    parent._onError = null;
    subscribers[length] = child;
    subscribers[length + FULFILLED] = onFulfillment;
    subscribers[length + REJECTED] = onRejection;
    if (length === 0 && parent._state) {
      config.async(publish, parent);
    }
  }
  function publish(promise) {
    var subscribers = promise._subscribers;
    var settled = promise._state;
    if (config.instrument) {
      instrument(settled === FULFILLED ? 'fulfilled' : 'rejected', promise);
    }
    if (subscribers.length === 0) {
      return;
    }
    var child,
      callback,
      result = promise._result;
    for (var i = 0; i < subscribers.length; i += 3) {
      child = subscribers[i];
      callback = subscribers[i + settled];
      if (child) {
        invokeCallback(settled, child, callback, result);
      } else {
        callback(result);
      }
    }
    promise._subscribers.length = 0;
  }
  function invokeCallback(state, promise, callback, result) {
    var hasCallback = typeof callback === 'function';
    var value,
      succeeded = true,
      error;
    if (hasCallback) {
      try {
        value = callback(result);
      } catch (e) {
        succeeded = false;
        error = e;
      }
    } else {
      value = result;
    }
    if (promise._state !== PENDING) {
      // noop
    } else if (value === promise) {
      reject(promise, withOwnPromise());
    } else if (succeeded === false) {
      reject(promise, error);
    } else if (hasCallback) {
      resolve$1(promise, value);
    } else if (state === FULFILLED) {
      fulfill(promise, value);
    } else if (state === REJECTED) {
      reject(promise, value);
    }
  }
  function initializePromise(promise, resolver) {
    var resolved = false;
    try {
      resolver(value => {
        if (resolved) {
          return;
        }
        resolved = true;
        resolve$1(promise, value);
      }, reason => {
        if (resolved) {
          return;
        }
        resolved = true;
        reject(promise, reason);
      });
    } catch (e) {
      reject(promise, e);
    }
  }
  function then(onFulfillment, onRejection, label) {
    var parent = this;
    var state = parent._state;
    if (state === FULFILLED && !onFulfillment || state === REJECTED && !onRejection) {
      config.instrument && instrument('chained', parent, parent);
      return parent;
    }
    parent._onError = null;
    var child = new parent.constructor(noop, label);
    var result = parent._result;
    config.instrument && instrument('chained', parent, child);
    if (state === PENDING) {
      subscribe(parent, child, onFulfillment, onRejection);
    } else {
      var callback = state === FULFILLED ? onFulfillment : onRejection;
      config.async(() => invokeCallback(state, child, callback, result));
    }
    return child;
  }
  class Enumerator {
    constructor(Constructor, input, abortOnReject, label) {
      this._instanceConstructor = Constructor;
      this.promise = new Constructor(noop, label);
      this._abortOnReject = abortOnReject;
      this._isUsingOwnPromise = Constructor === Promise;
      this._isUsingOwnResolve = Constructor.resolve === resolve$$1;
      this._init(...arguments);
    }
    _init(Constructor, input) {
      var len = input.length || 0;
      this.length = len;
      this._remaining = len;
      this._result = new Array(len);
      this._enumerate(input);
    }
    _enumerate(input) {
      var length = this.length;
      var promise = this.promise;
      for (var i = 0; promise._state === PENDING && i < length; i++) {
        this._eachEntry(input[i], i, true);
      }
      this._checkFullfillment();
    }
    _checkFullfillment() {
      if (this._remaining === 0) {
        var result = this._result;
        fulfill(this.promise, result);
        this._result = null;
      }
    }
    _settleMaybeThenable(entry, i, firstPass) {
      var c = this._instanceConstructor;
      if (this._isUsingOwnResolve) {
        var then$$1,
          error,
          succeeded = true;
        try {
          then$$1 = entry.then;
        } catch (e) {
          succeeded = false;
          error = e;
        }
        if (then$$1 === then && entry._state !== PENDING) {
          entry._onError = null;
          this._settledAt(entry._state, i, entry._result, firstPass);
        } else if (typeof then$$1 !== 'function') {
          this._settledAt(FULFILLED, i, entry, firstPass);
        } else if (this._isUsingOwnPromise) {
          var promise = new c(noop);
          if (succeeded === false) {
            reject(promise, error);
          } else {
            handleMaybeThenable(promise, entry, then$$1);
            this._willSettleAt(promise, i, firstPass);
          }
        } else {
          this._willSettleAt(new c(resolve => resolve(entry)), i, firstPass);
        }
      } else {
        this._willSettleAt(c.resolve(entry), i, firstPass);
      }
    }
    _eachEntry(entry, i, firstPass) {
      if (entry !== null && typeof entry === 'object') {
        this._settleMaybeThenable(entry, i, firstPass);
      } else {
        this._setResultAt(FULFILLED, i, entry, firstPass);
      }
    }
    _settledAt(state, i, value, firstPass) {
      var promise = this.promise;
      if (promise._state === PENDING) {
        if (this._abortOnReject && state === REJECTED) {
          reject(promise, value);
        } else {
          this._setResultAt(state, i, value, firstPass);
          this._checkFullfillment();
        }
      }
    }
    _setResultAt(state, i, value, firstPass) {
      this._remaining--;
      this._result[i] = value;
    }
    _willSettleAt(promise, i, firstPass) {
      subscribe(promise, undefined, value => this._settledAt(FULFILLED, i, value, firstPass), reason => this._settledAt(REJECTED, i, reason, firstPass));
    }
  }
  function setSettledResult(state, i, value) {
    this._remaining--;
    if (state === FULFILLED) {
      this._result[i] = {
        state: 'fulfilled',
        value: value
      };
    } else {
      this._result[i] = {
        state: 'rejected',
        reason: value
      };
    }
  }

  /**
    `Promise.all` accepts an array of promises, and returns a new promise which
    is fulfilled with an array of fulfillment values for the passed promises, or
    rejected with the reason of the first passed promise to be rejected. It casts all
    elements of the passed iterable to promises as it runs this algorithm.
  
    Example:
  
    ```javascript
    import Promise, { resolve } from 'rsvp';
  
    let promise1 = resolve(1);
    let promise2 = resolve(2);
    let promise3 = resolve(3);
    let promises = [ promise1, promise2, promise3 ];
  
    Promise.all(promises).then(function(array){
      // The array here would be [ 1, 2, 3 ];
    });
    ```
  
    If any of the `promises` given to `RSVP.all` are rejected, the first promise
    that is rejected will be given as an argument to the returned promises's
    rejection handler. For example:
  
    Example:
  
    ```javascript
    import Promise, { resolve, reject } from 'rsvp';
  
    let promise1 = resolve(1);
    let promise2 = reject(new Error("2"));
    let promise3 = reject(new Error("3"));
    let promises = [ promise1, promise2, promise3 ];
  
    Promise.all(promises).then(function(array){
      // Code here never runs because there are rejected promises!
    }, function(error) {
      // error.message === "2"
    });
    ```
  
    @method all
    @for Promise
    @param {Array} entries array of promises
    @param {String} [label] optional string for labeling the promise.
    Useful for tooling.
    @return {Promise} promise that is fulfilled when all `promises` have been
    fulfilled, or rejected if any of them become rejected.
    @static
  */
  function all(entries, label) {
    if (!Array.isArray(entries)) {
      return this.reject(new TypeError("Promise.all must be called with an array"), label);
    }
    return new Enumerator(this, entries, true /* abort on reject */, label).promise;
  }

  /**
    `Promise.race` returns a new promise which is settled in the same way as the
    first passed promise to settle.
  
    Example:
  
    ```javascript
    import Promise from 'rsvp';
  
    let promise1 = new Promise(function(resolve, reject){
      setTimeout(function(){
        resolve('promise 1');
      }, 200);
    });
  
    let promise2 = new Promise(function(resolve, reject){
      setTimeout(function(){
        resolve('promise 2');
      }, 100);
    });
  
    Promise.race([promise1, promise2]).then(function(result){
      // result === 'promise 2' because it was resolved before promise1
      // was resolved.
    });
    ```
  
    `Promise.race` is deterministic in that only the state of the first
    settled promise matters. For example, even if other promises given to the
    `promises` array argument are resolved, but the first settled promise has
    become rejected before the other promises became fulfilled, the returned
    promise will become rejected:
  
    ```javascript
    import Promise from 'rsvp';
  
    let promise1 = new Promise(function(resolve, reject){
      setTimeout(function(){
        resolve('promise 1');
      }, 200);
    });
  
    let promise2 = new Promise(function(resolve, reject){
      setTimeout(function(){
        reject(new Error('promise 2'));
      }, 100);
    });
  
    Promise.race([promise1, promise2]).then(function(result){
      // Code here never runs
    }, function(reason){
      // reason.message === 'promise 2' because promise 2 became rejected before
      // promise 1 became fulfilled
    });
    ```
  
    An example real-world use case is implementing timeouts:
  
    ```javascript
    import Promise from 'rsvp';
  
    Promise.race([ajax('foo.json'), timeout(5000)])
    ```
  
    @method race
    @for Promise
    @static
    @param {Array} entries array of promises to observe
    @param {String} [label] optional string for describing the promise returned.
    Useful for tooling.
    @return {Promise} a promise which settles in the same way as the first passed
    promise to settle.
  */
  function race(entries, label) {
    /*jshint validthis:true */
    var Constructor = this;
    var promise = new Constructor(noop, label);
    if (!Array.isArray(entries)) {
      reject(promise, new TypeError('Promise.race must be called with an array'));
      return promise;
    }
    for (var i = 0; promise._state === PENDING && i < entries.length; i++) {
      subscribe(Constructor.resolve(entries[i]), undefined, value => resolve$1(promise, value), reason => reject(promise, reason));
    }
    return promise;
  }

  /**
    `Promise.reject` returns a promise rejected with the passed `reason`.
    It is shorthand for the following:
  
    ```javascript
    import Promise from 'rsvp';
  
    let promise = new Promise(function(resolve, reject){
      reject(new Error('WHOOPS'));
    });
  
    promise.then(function(value){
      // Code here doesn't run because the promise is rejected!
    }, function(reason){
      // reason.message === 'WHOOPS'
    });
    ```
  
    Instead of writing the above, your code now simply becomes the following:
  
    ```javascript
    import Promise from 'rsvp';
  
    let promise = Promise.reject(new Error('WHOOPS'));
  
    promise.then(function(value){
      // Code here doesn't run because the promise is rejected!
    }, function(reason){
      // reason.message === 'WHOOPS'
    });
    ```
  
    @method reject
    @for Promise
    @static
    @param {*} reason value that the returned promise will be rejected with.
    @param {String} [label] optional string for identifying the returned promise.
    Useful for tooling.
    @return {Promise} a promise rejected with the given `reason`.
  */
  function reject$1(reason, label) {
    /*jshint validthis:true */
    var Constructor = this;
    var promise = new Constructor(noop, label);
    reject(promise, reason);
    return promise;
  }
  var guidKey = 'rsvp_' + Date.now() + '-';
  var counter = 0;
  function needsResolver() {
    throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
  }
  function needsNew() {
    throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
  }

  /**
    Promise objects represent the eventual result of an asynchronous operation. The
    primary way of interacting with a promise is through its `then` method, which
    registers callbacks to receive either a promise’s eventual value or the reason
    why the promise cannot be fulfilled.
  
    Terminology
    -----------
  
    - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
    - `thenable` is an object or function that defines a `then` method.
    - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
    - `exception` is a value that is thrown using the throw statement.
    - `reason` is a value that indicates why a promise was rejected.
    - `settled` the final resting state of a promise, fulfilled or rejected.
  
    A promise can be in one of three states: pending, fulfilled, or rejected.
  
    Promises that are fulfilled have a fulfillment value and are in the fulfilled
    state.  Promises that are rejected have a rejection reason and are in the
    rejected state.  A fulfillment value is never a thenable.
  
    Promises can also be said to *resolve* a value.  If this value is also a
    promise, then the original promise's settled state will match the value's
    settled state.  So a promise that *resolves* a promise that rejects will
    itself reject, and a promise that *resolves* a promise that fulfills will
    itself fulfill.
  
  
    Basic Usage:
    ------------
  
    ```js
    let promise = new Promise(function(resolve, reject) {
      // on success
      resolve(value);
  
      // on failure
      reject(reason);
    });
  
    promise.then(function(value) {
      // on fulfillment
    }, function(reason) {
      // on rejection
    });
    ```
  
    Advanced Usage:
    ---------------
  
    Promises shine when abstracting away asynchronous interactions such as
    `XMLHttpRequest`s.
  
    ```js
    function getJSON(url) {
      return new Promise(function(resolve, reject){
        let xhr = new XMLHttpRequest();
  
        xhr.open('GET', url);
        xhr.onreadystatechange = handler;
        xhr.responseType = 'json';
        xhr.setRequestHeader('Accept', 'application/json');
        xhr.send();
  
        function handler() {
          if (this.readyState === this.DONE) {
            if (this.status === 200) {
              resolve(this.response);
            } else {
              reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
            }
          }
        };
      });
    }
  
    getJSON('/posts.json').then(function(json) {
      // on fulfillment
    }, function(reason) {
      // on rejection
    });
    ```
  
    Unlike callbacks, promises are great composable primitives.
  
    ```js
    Promise.all([
      getJSON('/posts'),
      getJSON('/comments')
    ]).then(function(values){
      values[0] // => postsJSON
      values[1] // => commentsJSON
  
      return values;
    });
    ```
  
    @class Promise
    @public
    @param {function} resolver
    @param {String} [label] optional string for labeling the promise.
    Useful for tooling.
    @constructor
  */
  class Promise {
    constructor(resolver, label) {
      this._id = counter++;
      this._label = label;
      this._state = undefined;
      this._result = undefined;
      this._subscribers = [];
      config.instrument && instrument('created', this);
      if (noop !== resolver) {
        typeof resolver !== 'function' && needsResolver();
        this instanceof Promise ? initializePromise(this, resolver) : needsNew();
      }
    }
    _onError(reason) {
      config.after(() => {
        if (this._onError) {
          config.trigger('error', reason, this._label);
        }
      });
    }

    /**
      `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
      as the catch block of a try/catch statement.
    
      ```js
      function findAuthor(){
        throw new Error('couldn\'t find that author');
      }
    
      // synchronous
      try {
        findAuthor();
      } catch(reason) {
        // something went wrong
      }
    
      // async with promises
      findAuthor().catch(function(reason){
        // something went wrong
      });
      ```
    
      @method catch
      @param {Function} onRejection
      @param {String} [label] optional string for labeling the promise.
      Useful for tooling.
      @return {Promise}
    */
    catch(onRejection, label) {
      return this.then(undefined, onRejection, label);
    }

    /**
      `finally` will be invoked regardless of the promise's fate just as native
      try/catch/finally behaves
    
      Synchronous example:
    
      ```js
      findAuthor() {
        if (Math.random() > 0.5) {
          throw new Error();
        }
        return new Author();
      }
    
      try {
        return findAuthor(); // succeed or fail
      } catch(error) {
        return findOtherAuthor();
      } finally {
        // always runs
        // doesn't affect the return value
      }
      ```
    
      Asynchronous example:
    
      ```js
      findAuthor().catch(function(reason){
        return findOtherAuthor();
      }).finally(function(){
        // author was either found, or not
      });
      ```
    
      @method finally
      @param {Function} callback
      @param {String} [label] optional string for labeling the promise.
      Useful for tooling.
      @return {Promise}
    */
    finally(callback, label) {
      var promise = this;
      var constructor = promise.constructor;
      if (typeof callback === 'function') {
        return promise.then(value => constructor.resolve(callback()).then(() => value), reason => constructor.resolve(callback()).then(() => {
          throw reason;
        }));
      }
      return promise.then(callback, callback);
    }
  }
  _exports.Promise = Promise;
  Promise.cast = resolve$$1; // deprecated
  Promise.all = all;
  Promise.race = race;
  Promise.resolve = resolve$$1;
  Promise.reject = reject$1;
  Promise.prototype._guidKey = guidKey;

  /**
    The primary way of interacting with a promise is through its `then` method,
    which registers callbacks to receive either a promise's eventual value or the
    reason why the promise cannot be fulfilled.
  
    ```js
    findUser().then(function(user){
      // user is available
    }, function(reason){
      // user is unavailable, and you are given the reason why
    });
    ```
  
    Chaining
    --------
  
    The return value of `then` is itself a promise.  This second, 'downstream'
    promise is resolved with the return value of the first promise's fulfillment
    or rejection handler, or rejected if the handler throws an exception.
  
    ```js
    findUser().then(function (user) {
      return user.name;
    }, function (reason) {
      return 'default name';
    }).then(function (userName) {
      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
      // will be `'default name'`
    });
  
    findUser().then(function (user) {
      throw new Error('Found user, but still unhappy');
    }, function (reason) {
      throw new Error('`findUser` rejected and we\'re unhappy');
    }).then(function (value) {
      // never reached
    }, function (reason) {
      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
      // If `findUser` rejected, `reason` will be '`findUser` rejected and we\'re unhappy'.
    });
    ```
    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
  
    ```js
    findUser().then(function (user) {
      throw new PedagogicalException('Upstream error');
    }).then(function (value) {
      // never reached
    }).then(function (value) {
      // never reached
    }, function (reason) {
      // The `PedgagocialException` is propagated all the way down to here
    });
    ```
  
    Assimilation
    ------------
  
    Sometimes the value you want to propagate to a downstream promise can only be
    retrieved asynchronously. This can be achieved by returning a promise in the
    fulfillment or rejection handler. The downstream promise will then be pending
    until the returned promise is settled. This is called *assimilation*.
  
    ```js
    findUser().then(function (user) {
      return findCommentsByAuthor(user);
    }).then(function (comments) {
      // The user's comments are now available
    });
    ```
  
    If the assimliated promise rejects, then the downstream promise will also reject.
  
    ```js
    findUser().then(function (user) {
      return findCommentsByAuthor(user);
    }).then(function (comments) {
      // If `findCommentsByAuthor` fulfills, we'll have the value here
    }, function (reason) {
      // If `findCommentsByAuthor` rejects, we'll have the reason here
    });
    ```
  
    Simple Example
    --------------
  
    Synchronous Example
  
    ```javascript
    let result;
  
    try {
      result = findResult();
      // success
    } catch(reason) {
      // failure
    }
    ```
  
    Errback Example
  
    ```js
    findResult(function(result, err){
      if (err) {
        // failure
      } else {
        // success
      }
    });
    ```
  
    Promise Example;
  
    ```javascript
    findResult().then(function(result){
      // success
    }, function(reason){
      // failure
    });
    ```
  
    Advanced Example
    --------------
  
    Synchronous Example
  
    ```javascript
    let author, books;
  
    try {
      author = findAuthor();
      books  = findBooksByAuthor(author);
      // success
    } catch(reason) {
      // failure
    }
    ```
  
    Errback Example
  
    ```js
  
    function foundBooks(books) {
  
    }
  
    function failure(reason) {
  
    }
  
    findAuthor(function(author, err){
      if (err) {
        failure(err);
        // failure
      } else {
        try {
          findBoooksByAuthor(author, function(books, err) {
            if (err) {
              failure(err);
            } else {
              try {
                foundBooks(books);
              } catch(reason) {
                failure(reason);
              }
            }
          });
        } catch(error) {
          failure(err);
        }
        // success
      }
    });
    ```
  
    Promise Example;
  
    ```javascript
    findAuthor().
      then(findBooksByAuthor).
      then(function(books){
        // found books
    }).catch(function(reason){
      // something went wrong
    });
    ```
  
    @method then
    @param {Function} onFulfillment
    @param {Function} onRejection
    @param {String} [label] optional string for labeling the promise.
    Useful for tooling.
    @return {Promise}
  */
  Promise.prototype.then = then;
  function makeObject(_, argumentNames) {
    var obj = {};
    var length = _.length;
    var args = new Array(length);
    for (var x = 0; x < length; x++) {
      args[x] = _[x];
    }
    for (var i = 0; i < argumentNames.length; i++) {
      var name = argumentNames[i];
      obj[name] = args[i + 1];
    }
    return obj;
  }
  function arrayResult(_) {
    var length = _.length;
    var args = new Array(length - 1);
    for (var i = 1; i < length; i++) {
      args[i - 1] = _[i];
    }
    return args;
  }
  function wrapThenable(then, promise) {
    return {
      then(onFulFillment, onRejection) {
        return then.call(promise, onFulFillment, onRejection);
      }
    };
  }

  /**
    `denodeify` takes a 'node-style' function and returns a function that
    will return an `Promise`. You can use `denodeify` in Node.js or the
    browser when you'd prefer to use promises over using callbacks. For example,
    `denodeify` transforms the following:
  
    ```javascript
    let fs = require('fs');
  
    fs.readFile('myfile.txt', function(err, data){
      if (err) return handleError(err);
      handleData(data);
    });
    ```
  
    into:
  
    ```javascript
    let fs = require('fs');
    let readFile = denodeify(fs.readFile);
  
    readFile('myfile.txt').then(handleData, handleError);
    ```
  
    If the node function has multiple success parameters, then `denodeify`
    just returns the first one:
  
    ```javascript
    let request = denodeify(require('request'));
  
    request('http://example.com').then(function(res) {
      // ...
    });
    ```
  
    However, if you need all success parameters, setting `denodeify`'s
    second parameter to `true` causes it to return all success parameters
    as an array:
  
    ```javascript
    let request = denodeify(require('request'), true);
  
    request('http://example.com').then(function(result) {
      // result[0] -> res
      // result[1] -> body
    });
    ```
  
    Or if you pass it an array with names it returns the parameters as a hash:
  
    ```javascript
    let request = denodeify(require('request'), ['res', 'body']);
  
    request('http://example.com').then(function(result) {
      // result.res
      // result.body
    });
    ```
  
    Sometimes you need to retain the `this`:
  
    ```javascript
    let app = require('express')();
    let render = denodeify(app.render.bind(app));
    ```
  
    The denodified function inherits from the original function. It works in all
    environments, except IE 10 and below. Consequently all properties of the original
    function are available to you. However, any properties you change on the
    denodeified function won't be changed on the original function. Example:
  
    ```javascript
    let request = denodeify(require('request')),
        cookieJar = request.jar(); // <- Inheritance is used here
  
    request('http://example.com', {jar: cookieJar}).then(function(res) {
      // cookieJar.cookies holds now the cookies returned by example.com
    });
    ```
  
    Using `denodeify` makes it easier to compose asynchronous operations instead
    of using callbacks. For example, instead of:
  
    ```javascript
    let fs = require('fs');
  
    fs.readFile('myfile.txt', function(err, data){
      if (err) { ... } // Handle error
      fs.writeFile('myfile2.txt', data, function(err){
        if (err) { ... } // Handle error
        console.log('done')
      });
    });
    ```
  
    you can chain the operations together using `then` from the returned promise:
  
    ```javascript
    let fs = require('fs');
    let readFile = denodeify(fs.readFile);
    let writeFile = denodeify(fs.writeFile);
  
    readFile('myfile.txt').then(function(data){
      return writeFile('myfile2.txt', data);
    }).then(function(){
      console.log('done')
    }).catch(function(error){
      // Handle error
    });
    ```
  
    @method denodeify
    @public
    @static
    @for rsvp
    @param {Function} nodeFunc a 'node-style' function that takes a callback as
    its last argument. The callback expects an error to be passed as its first
    argument (if an error occurred, otherwise null), and the value from the
    operation as its second argument ('function(err, value){ }').
    @param {Boolean|Array} [options] An optional paramter that if set
    to `true` causes the promise to fulfill with the callback's success arguments
    as an array. This is useful if the node function has multiple success
    paramters. If you set this paramter to an array with names, the promise will
    fulfill with a hash with these names as keys and the success parameters as
    values.
    @return {Function} a function that wraps `nodeFunc` to return a `Promise`
  */
  function denodeify(nodeFunc, options) {
    var fn = function () {
      var l = arguments.length;
      var args = new Array(l + 1);
      var promiseInput = false;
      for (var i = 0; i < l; ++i) {
        var arg = arguments[i];

        // TODO: this code really needs to be cleaned up
        if (!promiseInput) {
          if (arg !== null && typeof arg === 'object') {
            if (arg.constructor === Promise) {
              promiseInput = true;
            } else {
              try {
                promiseInput = arg.then;
              } catch (error) {
                var p = new Promise(noop);
                reject(p, error);
                return p;
              }
            }
          } else {
            promiseInput = false;
          }
          if (promiseInput && promiseInput !== true) {
            arg = wrapThenable(promiseInput, arg);
          }
        }
        args[i] = arg;
      }
      var promise = new Promise(noop);
      args[l] = function (err, val) {
        if (err) {
          reject(promise, err);
        } else if (options === undefined) {
          resolve$1(promise, val);
        } else if (options === true) {
          resolve$1(promise, arrayResult(arguments));
        } else if (Array.isArray(options)) {
          resolve$1(promise, makeObject(arguments, options));
        } else {
          resolve$1(promise, val);
        }
      };
      if (promiseInput) {
        return handlePromiseInput(promise, args, nodeFunc, this);
      } else {
        return handleValueInput(promise, args, nodeFunc, this);
      }
    };
    fn.__proto__ = nodeFunc;
    return fn;
  }
  function handleValueInput(promise, args, nodeFunc, self) {
    try {
      nodeFunc.apply(self, args);
    } catch (error) {
      reject(promise, error);
    }
    return promise;
  }
  function handlePromiseInput(promise, args, nodeFunc, self) {
    return Promise.all(args).then(args => handleValueInput(promise, args, nodeFunc, self));
  }

  /**
    This is a convenient alias for `Promise.all`.
  
    @method all
    @public
    @static
    @for rsvp
    @param {Array} array Array of promises.
    @param {String} [label] An optional label. This is useful
    for tooling.
  */
  function all$1(array, label) {
    return Promise.all(array, label);
  }

  /**
  @module rsvp
  @public
  **/

  class AllSettled extends Enumerator {
    constructor(Constructor, entries, label) {
      super(Constructor, entries, false /* don't abort on reject */, label);
    }
  }
  AllSettled.prototype._setResultAt = setSettledResult;

  /**
  `RSVP.allSettled` is similar to `RSVP.all`, but instead of implementing
  a fail-fast method, it waits until all the promises have returned and
  shows you all the results. This is useful if you want to handle multiple
  promises' failure states together as a set.
   Returns a promise that is fulfilled when all the given promises have been
  settled. The return promise is fulfilled with an array of the states of
  the promises passed into the `promises` array argument.
   Each state object will either indicate fulfillment or rejection, and
  provide the corresponding value or reason. The states will take one of
  the following formats:
   ```javascript
  { state: 'fulfilled', value: value }
    or
  { state: 'rejected', reason: reason }
  ```
   Example:
   ```javascript
  let promise1 = RSVP.Promise.resolve(1);
  let promise2 = RSVP.Promise.reject(new Error('2'));
  let promise3 = RSVP.Promise.reject(new Error('3'));
  let promises = [ promise1, promise2, promise3 ];
   RSVP.allSettled(promises).then(function(array){
    // array == [
    //   { state: 'fulfilled', value: 1 },
    //   { state: 'rejected', reason: Error },
    //   { state: 'rejected', reason: Error }
    // ]
    // Note that for the second item, reason.message will be '2', and for the
    // third item, reason.message will be '3'.
  }, function(error) {
    // Not run. (This block would only be called if allSettled had failed,
    // for instance if passed an incorrect argument type.)
  });
  ```
   @method allSettled
  @public
  @static
  @for rsvp
  @param {Array} entries
  @param {String} [label] - optional string that describes the promise.
  Useful for tooling.
  @return {Promise} promise that is fulfilled with an array of the settled
  states of the constituent promises.
  */

  function allSettled(entries, label) {
    if (!Array.isArray(entries)) {
      return Promise.reject(new TypeError("Promise.allSettled must be called with an array"), label);
    }
    return new AllSettled(Promise, entries, label).promise;
  }

  /**
    This is a convenient alias for `Promise.race`.
  
    @method race
    @public
    @static
    @for rsvp
    @param {Array} array Array of promises.
    @param {String} [label] An optional label. This is useful
    for tooling.
   */
  function race$1(array, label) {
    return Promise.race(array, label);
  }
  class PromiseHash extends Enumerator {
    constructor(Constructor, object, abortOnReject, label) {
      if (abortOnReject === void 0) {
        abortOnReject = true;
      }
      super(Constructor, object, abortOnReject, label);
    }
    _init(Constructor, object) {
      this._result = {};
      this._enumerate(object);
    }
    _enumerate(input) {
      var keys = Object.keys(input);
      var length = keys.length;
      var promise = this.promise;
      this._remaining = length;
      var key, val;
      for (var i = 0; promise._state === PENDING && i < length; i++) {
        key = keys[i];
        val = input[key];
        this._eachEntry(val, key, true);
      }
      this._checkFullfillment();
    }
  }

  /**
    `hash` is similar to `all`, but takes an object instead of an array
    for its `promises` argument.
  
    Returns a promise that is fulfilled when all the given promises have been
    fulfilled, or rejected if any of them become rejected. The returned promise
    is fulfilled with a hash that has the same key names as the `promises` object
    argument. If any of the values in the object are not promises, they will
    simply be copied over to the fulfilled object.
  
    Example:
  
    ```javascript
    let promises = {
      myPromise: resolve(1),
      yourPromise: resolve(2),
      theirPromise: resolve(3),
      notAPromise: 4
    };
  
    hash(promises).then(function(hash){
      // hash here is an object that looks like:
      // {
      //   myPromise: 1,
      //   yourPromise: 2,
      //   theirPromise: 3,
      //   notAPromise: 4
      // }
    });
    ```
  
    If any of the `promises` given to `hash` are rejected, the first promise
    that is rejected will be given as the reason to the rejection handler.
  
    Example:
  
    ```javascript
    let promises = {
      myPromise: resolve(1),
      rejectedPromise: reject(new Error('rejectedPromise')),
      anotherRejectedPromise: reject(new Error('anotherRejectedPromise')),
    };
  
    hash(promises).then(function(hash){
      // Code here never runs because there are rejected promises!
    }, function(reason) {
      // reason.message === 'rejectedPromise'
    });
    ```
  
    An important note: `hash` is intended for plain JavaScript objects that
    are just a set of keys and values. `hash` will NOT preserve prototype
    chains.
  
    Example:
  
    ```javascript
    import { hash, resolve } from 'rsvp';
    function MyConstructor(){
      this.example = resolve('Example');
    }
  
    MyConstructor.prototype = {
      protoProperty: resolve('Proto Property')
    };
  
    let myObject = new MyConstructor();
  
    hash(myObject).then(function(hash){
      // protoProperty will not be present, instead you will just have an
      // object that looks like:
      // {
      //   example: 'Example'
      // }
      //
      // hash.hasOwnProperty('protoProperty'); // false
      // 'undefined' === typeof hash.protoProperty
    });
    ```
  
    @method hash
    @public
    @static
    @for rsvp
    @param {Object} object
    @param {String} [label] optional string that describes the promise.
    Useful for tooling.
    @return {Promise} promise that is fulfilled when all properties of `promises`
    have been fulfilled, or rejected if any of them become rejected.
  */
  function hash(object, label) {
    return Promise.resolve(object, label).then(function (object) {
      if (object === null || typeof object !== 'object') {
        throw new TypeError("Promise.hash must be called with an object");
      }
      return new PromiseHash(Promise, object, label).promise;
    });
  }
  class HashSettled extends PromiseHash {
    constructor(Constructor, object, label) {
      super(Constructor, object, false, label);
    }
  }
  HashSettled.prototype._setResultAt = setSettledResult;

  /**
    `hashSettled` is similar to `allSettled`, but takes an object
    instead of an array for its `promises` argument.
  
    Unlike `all` or `hash`, which implement a fail-fast method,
    but like `allSettled`, `hashSettled` waits until all the
    constituent promises have returned and then shows you all the results
    with their states and values/reasons. This is useful if you want to
    handle multiple promises' failure states together as a set.
  
    Returns a promise that is fulfilled when all the given promises have been
    settled, or rejected if the passed parameters are invalid.
  
    The returned promise is fulfilled with a hash that has the same key names as
    the `promises` object argument. If any of the values in the object are not
    promises, they will be copied over to the fulfilled object and marked with state
    'fulfilled'.
  
    Example:
  
    ```javascript
    import { hashSettled, resolve } from 'rsvp';
  
    let promises = {
      myPromise: resolve(1),
      yourPromise: resolve(2),
      theirPromise: resolve(3),
      notAPromise: 4
    };
  
    hashSettled(promises).then(function(hash){
      // hash here is an object that looks like:
      // {
      //   myPromise: { state: 'fulfilled', value: 1 },
      //   yourPromise: { state: 'fulfilled', value: 2 },
      //   theirPromise: { state: 'fulfilled', value: 3 },
      //   notAPromise: { state: 'fulfilled', value: 4 }
      // }
    });
    ```
  
    If any of the `promises` given to `hash` are rejected, the state will
    be set to 'rejected' and the reason for rejection provided.
  
    Example:
  
    ```javascript
    import { hashSettled, reject, resolve } from 'rsvp';
  
    let promises = {
      myPromise: resolve(1),
      rejectedPromise: reject(new Error('rejection')),
      anotherRejectedPromise: reject(new Error('more rejection')),
    };
  
    hashSettled(promises).then(function(hash){
      // hash here is an object that looks like:
      // {
      //   myPromise:              { state: 'fulfilled', value: 1 },
      //   rejectedPromise:        { state: 'rejected', reason: Error },
      //   anotherRejectedPromise: { state: 'rejected', reason: Error },
      // }
      // Note that for rejectedPromise, reason.message == 'rejection',
      // and for anotherRejectedPromise, reason.message == 'more rejection'.
    });
    ```
  
    An important note: `hashSettled` is intended for plain JavaScript objects that
    are just a set of keys and values. `hashSettled` will NOT preserve prototype
    chains.
  
    Example:
  
    ```javascript
    import Promise, { hashSettled, resolve } from 'rsvp';
  
    function MyConstructor(){
      this.example = resolve('Example');
    }
  
    MyConstructor.prototype = {
      protoProperty: Promise.resolve('Proto Property')
    };
  
    let myObject = new MyConstructor();
  
    hashSettled(myObject).then(function(hash){
      // protoProperty will not be present, instead you will just have an
      // object that looks like:
      // {
      //   example: { state: 'fulfilled', value: 'Example' }
      // }
      //
      // hash.hasOwnProperty('protoProperty'); // false
      // 'undefined' === typeof hash.protoProperty
    });
    ```
  
    @method hashSettled
    @public
    @for rsvp
    @param {Object} object
    @param {String} [label] optional string that describes the promise.
    Useful for tooling.
    @return {Promise} promise that is fulfilled when when all properties of `promises`
    have been settled.
    @static
  */

  function hashSettled(object, label) {
    return Promise.resolve(object, label).then(function (object) {
      if (object === null || typeof object !== 'object') {
        throw new TypeError("hashSettled must be called with an object");
      }
      return new HashSettled(Promise, object, false, label).promise;
    });
  }

  /**
    `rethrow` will rethrow an error on the next turn of the JavaScript event
    loop in order to aid debugging.
  
    Promises A+ specifies that any exceptions that occur with a promise must be
    caught by the promises implementation and bubbled to the last handler. For
    this reason, it is recommended that you always specify a second rejection
    handler function to `then`. However, `rethrow` will throw the exception
    outside of the promise, so it bubbles up to your console if in the browser,
    or domain/cause uncaught exception in Node. `rethrow` will also throw the
    error again so the error can be handled by the promise per the spec.
  
    ```javascript
    import { rethrow } from 'rsvp';
  
    function throws(){
      throw new Error('Whoops!');
    }
  
    let promise = new Promise(function(resolve, reject){
      throws();
    });
  
    promise.catch(rethrow).then(function(){
      // Code here doesn't run because the promise became rejected due to an
      // error!
    }, function (err){
      // handle the error here
    });
    ```
  
    The 'Whoops' error will be thrown on the next turn of the event loop
    and you can watch for it in your console. You can also handle it using a
    rejection handler given to `.then` or `.catch` on the returned promise.
  
    @method rethrow
    @public
    @static
    @for rsvp
    @param {Error} reason reason the promise became rejected.
    @throws Error
    @static
  */
  function rethrow(reason) {
    setTimeout(() => {
      throw reason;
    });
    throw reason;
  }

  /**
    `defer` returns an object similar to jQuery's `$.Deferred`.
    `defer` should be used when porting over code reliant on `$.Deferred`'s
    interface. New code should use the `Promise` constructor instead.
  
    The object returned from `defer` is a plain object with three properties:
  
    * promise - an `Promise`.
    * reject - a function that causes the `promise` property on this object to
      become rejected
    * resolve - a function that causes the `promise` property on this object to
      become fulfilled.
  
    Example:
  
     ```javascript
     let deferred = defer();
  
     deferred.resolve("Success!");
  
     deferred.promise.then(function(value){
       // value here is "Success!"
     });
     ```
  
    @method defer
    @public
    @static
    @for rsvp
    @param {String} [label] optional string for labeling the promise.
    Useful for tooling.
    @return {Object}
   */

  function defer(label) {
    var deferred = {
      resolve: undefined,
      reject: undefined
    };
    deferred.promise = new Promise((resolve, reject) => {
      deferred.resolve = resolve;
      deferred.reject = reject;
    }, label);
    return deferred;
  }
  class MapEnumerator extends Enumerator {
    constructor(Constructor, entries, mapFn, label) {
      super(Constructor, entries, true, label, mapFn);
    }
    _init(Constructor, input, bool, label, mapFn) {
      var len = input.length || 0;
      this.length = len;
      this._remaining = len;
      this._result = new Array(len);
      this._mapFn = mapFn;
      this._enumerate(input);
    }
    _setResultAt(state, i, value, firstPass) {
      if (firstPass) {
        try {
          this._eachEntry(this._mapFn(value, i), i, false);
        } catch (error) {
          this._settledAt(REJECTED, i, error, false);
        }
      } else {
        this._remaining--;
        this._result[i] = value;
      }
    }
  }

  /**
   `map` is similar to JavaScript's native `map` method. `mapFn` is eagerly called
    meaning that as soon as any promise resolves its value will be passed to `mapFn`.
    `map` returns a promise that will become fulfilled with the result of running
    `mapFn` on the values the promises become fulfilled with.
  
    For example:
  
    ```javascript
    import { map, resolve } from 'rsvp';
  
    let promise1 = resolve(1);
    let promise2 = resolve(2);
    let promise3 = resolve(3);
    let promises = [ promise1, promise2, promise3 ];
  
    let mapFn = function(item){
      return item + 1;
    };
  
    map(promises, mapFn).then(function(result){
      // result is [ 2, 3, 4 ]
    });
    ```
  
    If any of the `promises` given to `map` are rejected, the first promise
    that is rejected will be given as an argument to the returned promise's
    rejection handler. For example:
  
    ```javascript
    import { map, reject, resolve } from 'rsvp';
  
    let promise1 = resolve(1);
    let promise2 = reject(new Error('2'));
    let promise3 = reject(new Error('3'));
    let promises = [ promise1, promise2, promise3 ];
  
    let mapFn = function(item){
      return item + 1;
    };
  
    map(promises, mapFn).then(function(array){
      // Code here never runs because there are rejected promises!
    }, function(reason) {
      // reason.message === '2'
    });
    ```
  
    `map` will also wait if a promise is returned from `mapFn`. For example,
    say you want to get all comments from a set of blog posts, but you need
    the blog posts first because they contain a url to those comments.
  
    ```javscript
    import { map } from 'rsvp';
  
    let mapFn = function(blogPost){
      // getComments does some ajax and returns an Promise that is fulfilled
      // with some comments data
      return getComments(blogPost.comments_url);
    };
  
    // getBlogPosts does some ajax and returns an Promise that is fulfilled
    // with some blog post data
    map(getBlogPosts(), mapFn).then(function(comments){
      // comments is the result of asking the server for the comments
      // of all blog posts returned from getBlogPosts()
    });
    ```
  
    @method map
    @public
    @static
    @for rsvp
    @param {Array} promises
    @param {Function} mapFn function to be called on each fulfilled promise.
    @param {String} [label] optional string for labeling the promise.
    Useful for tooling.
    @return {Promise} promise that is fulfilled with the result of calling
    `mapFn` on each fulfilled promise or value when they become fulfilled.
     The promise will be rejected if any of the given `promises` become rejected.
  */
  function map(promises, mapFn, label) {
    if (typeof mapFn !== 'function') {
      return Promise.reject(new TypeError("map expects a function as a second argument"), label);
    }
    return Promise.resolve(promises, label).then(function (promises) {
      if (!Array.isArray(promises)) {
        throw new TypeError("map must be called with an array");
      }
      return new MapEnumerator(Promise, promises, mapFn, label).promise;
    });
  }

  /**
    This is a convenient alias for `Promise.resolve`.
  
    @method resolve
    @public
    @static
    @for rsvp
    @param {*} value value that the returned promise will be resolved with
    @param {String} [label] optional string for identifying the returned promise.
    Useful for tooling.
    @return {Promise} a promise that will become fulfilled with the given
    `value`
  */
  function resolve$2(value, label) {
    return Promise.resolve(value, label);
  }

  /**
    This is a convenient alias for `Promise.reject`.
  
    @method reject
    @public
    @static
    @for rsvp
    @param {*} reason value that the returned promise will be rejected with.
    @param {String} [label] optional string for identifying the returned promise.
    Useful for tooling.
    @return {Promise} a promise rejected with the given `reason`.
  */
  function reject$2(reason, label) {
    return Promise.reject(reason, label);
  }
  var EMPTY_OBJECT = {};
  class FilterEnumerator extends MapEnumerator {
    _checkFullfillment() {
      if (this._remaining === 0 && this._result !== null) {
        var result = this._result.filter(val => val !== EMPTY_OBJECT);
        fulfill(this.promise, result);
        this._result = null;
      }
    }
    _setResultAt(state, i, value, firstPass) {
      if (firstPass) {
        this._result[i] = value;
        var val,
          succeeded = true;
        try {
          val = this._mapFn(value, i);
        } catch (error) {
          succeeded = false;
          this._settledAt(REJECTED, i, error, false);
        }
        if (succeeded) {
          this._eachEntry(val, i, false);
        }
      } else {
        this._remaining--;
        if (!value) {
          this._result[i] = EMPTY_OBJECT;
        }
      }
    }
  }

  /**
   `filter` is similar to JavaScript's native `filter` method.
   `filterFn` is eagerly called meaning that as soon as any promise
    resolves its value will be passed to `filterFn`. `filter` returns
    a promise that will become fulfilled with the result of running
    `filterFn` on the values the promises become fulfilled with.
  
    For example:
  
    ```javascript
    import { filter, resolve } from 'rsvp';
  
    let promise1 = resolve(1);
    let promise2 = resolve(2);
    let promise3 = resolve(3);
  
    let promises = [promise1, promise2, promise3];
  
    let filterFn = function(item){
      return item > 1;
    };
  
    filter(promises, filterFn).then(function(result){
      // result is [ 2, 3 ]
    });
    ```
  
    If any of the `promises` given to `filter` are rejected, the first promise
    that is rejected will be given as an argument to the returned promise's
    rejection handler. For example:
  
    ```javascript
    import { filter, reject, resolve } from 'rsvp';
  
    let promise1 = resolve(1);
    let promise2 = reject(new Error('2'));
    let promise3 = reject(new Error('3'));
    let promises = [ promise1, promise2, promise3 ];
  
    let filterFn = function(item){
      return item > 1;
    };
  
    filter(promises, filterFn).then(function(array){
      // Code here never runs because there are rejected promises!
    }, function(reason) {
      // reason.message === '2'
    });
    ```
  
    `filter` will also wait for any promises returned from `filterFn`.
    For instance, you may want to fetch a list of users then return a subset
    of those users based on some asynchronous operation:
  
    ```javascript
    import { filter, resolve } from 'rsvp';
  
    let alice = { name: 'alice' };
    let bob   = { name: 'bob' };
    let users = [ alice, bob ];
  
    let promises = users.map(function(user){
      return resolve(user);
    });
  
    let filterFn = function(user){
      // Here, Alice has permissions to create a blog post, but Bob does not.
      return getPrivilegesForUser(user).then(function(privs){
        return privs.can_create_blog_post === true;
      });
    };
    filter(promises, filterFn).then(function(users){
      // true, because the server told us only Alice can create a blog post.
      users.length === 1;
      // false, because Alice is the only user present in `users`
      users[0] === bob;
    });
    ```
  
    @method filter
    @public
    @static
    @for rsvp
    @param {Array} promises
    @param {Function} filterFn - function to be called on each resolved value to
    filter the final results.
    @param {String} [label] optional string describing the promise. Useful for
    tooling.
    @return {Promise}
  */

  function filter(promises, filterFn, label) {
    if (typeof filterFn !== 'function') {
      return Promise.reject(new TypeError("filter expects function as a second argument"), label);
    }
    return Promise.resolve(promises, label).then(function (promises) {
      if (!Array.isArray(promises)) {
        throw new TypeError("filter must be called with an array");
      }
      return new FilterEnumerator(Promise, promises, filterFn, label).promise;
    });
  }
  var len = 0;
  var vertxNext;
  function asap(callback, arg) {
    queue$1[len] = callback;
    queue$1[len + 1] = arg;
    len += 2;
    if (len === 2) {
      // If len is 1, that means that we need to schedule an async flush.
      // If additional callbacks are queued before the queue is flushed, they
      // will be processed by this flush that we are scheduling.
      scheduleFlush$1();
    }
  }
  var browserWindow = typeof window !== 'undefined' ? window : undefined;
  var browserGlobal = browserWindow || {};
  var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
  var isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';

  // test for web worker but not in IE10
  var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';

  // node
  function useNextTick() {
    var nextTick = process.nextTick;
    // node version 0.10.x displays a deprecation warning when nextTick is used recursively
    // setImmediate should be used instead instead
    var version = process.versions.node.match(/^(?:(\d+)\.)?(?:(\d+)\.)?(\*|\d+)$/);
    if (Array.isArray(version) && version[1] === '0' && version[2] === '10') {
      nextTick = setImmediate;
    }
    return () => nextTick(flush);
  }

  // vertx
  function useVertxTimer() {
    if (typeof vertxNext !== 'undefined') {
      return function () {
        vertxNext(flush);
      };
    }
    return useSetTimeout();
  }
  function useMutationObserver() {
    var iterations = 0;
    var observer = new BrowserMutationObserver(flush);
    var node = document.createTextNode('');
    observer.observe(node, {
      characterData: true
    });
    return () => node.data = iterations = ++iterations % 2;
  }

  // web worker
  function useMessageChannel() {
    var channel = new MessageChannel();
    channel.port1.onmessage = flush;
    return () => channel.port2.postMessage(0);
  }
  function useSetTimeout() {
    return () => setTimeout(flush, 1);
  }
  var queue$1 = new Array(1000);
  function flush() {
    for (var i = 0; i < len; i += 2) {
      var callback = queue$1[i];
      var arg = queue$1[i + 1];
      callback(arg);
      queue$1[i] = undefined;
      queue$1[i + 1] = undefined;
    }
    len = 0;
  }
  function attemptVertex() {
    try {
      var vertx = Function('return this')().require('vertx');
      vertxNext = vertx.runOnLoop || vertx.runOnContext;
      return useVertxTimer();
    } catch (e) {
      return useSetTimeout();
    }
  }
  var scheduleFlush$1;
  // Decide what async method to use to triggering processing of queued callbacks:
  if (isNode) {
    scheduleFlush$1 = useNextTick();
  } else if (BrowserMutationObserver) {
    scheduleFlush$1 = useMutationObserver();
  } else if (isWorker) {
    scheduleFlush$1 = useMessageChannel();
  } else if (browserWindow === undefined && typeof require === 'function') {
    scheduleFlush$1 = attemptVertex();
  } else {
    scheduleFlush$1 = useSetTimeout();
  }

  // defaults
  config.async = asap;
  config.after = cb => setTimeout(cb, 0);
  var cast = resolve$2;
  _exports.cast = cast;
  var async = (callback, arg) => config.async(callback, arg);
  _exports.async = async;
  function on() {
    config.on(...arguments);
  }
  function off() {
    config.off(...arguments);
  }

  // Set up instrumentation through `window.__PROMISE_INTRUMENTATION__`
  if (typeof window !== 'undefined' && typeof window['__PROMISE_INSTRUMENTATION__'] === 'object') {
    var callbacks = window['__PROMISE_INSTRUMENTATION__'];
    configure('instrument', true);
    for (var eventName in callbacks) {
      if (callbacks.hasOwnProperty(eventName)) {
        on(eventName, callbacks[eventName]);
      }
    }
  }

  // the default export here is for backwards compat:
  //   https://github.com/tildeio/rsvp.js/issues/434
  var rsvp = {
    asap,
    cast,
    Promise,
    EventTarget,
    all: all$1,
    allSettled,
    race: race$1,
    hash,
    hashSettled,
    rethrow,
    defer,
    denodeify,
    configure,
    on,
    off,
    resolve: resolve$2,
    reject: reject$2,
    map,
    async,
    filter
  };
  var _default = rsvp;
  _exports.default = _default;
});
require('@ember/-internals/bootstrap')
}());

;if (typeof FastBoot === 'undefined') {
      var preferNative = false;
      (function (originalGlobal) {
  define('fetch', ['exports', 'ember', 'rsvp'], function (exports, Ember__module, RSVP__module) {
    'use strict';

    var Ember = 'default' in Ember__module ? Ember__module['default'] : Ember__module;
    var RSVP = 'default' in RSVP__module ? RSVP__module['default'] : RSVP__module;
    var Promise = RSVP.Promise;
    var supportProps = ['FormData', 'FileReader', 'Blob', 'URLSearchParams', 'Symbol', 'ArrayBuffer'];
    var polyfillProps = ['fetch', 'Headers', 'Request', 'Response', 'AbortController'];
    var combinedProps = supportProps;
    if (preferNative) {
      combinedProps = supportProps.concat(polyfillProps);
    }
    combinedProps.forEach(function (prop) {
      if (originalGlobal[prop]) {
        Object.defineProperty(exports, prop, {
          configurable: true,
          get: function () {
            return originalGlobal[prop];
          },
          set: function (v) {
            originalGlobal[prop] = v;
          }
        });
      }
    });

    // shadow github/fetch global object
    // https://github.com/github/fetch/blob/v3.4.0/fetch.js
    var globalThis = exports;
    // shadow mo/abortcontroller-polyfill global object
    // https://github.com/mo/abortcontroller-polyfill/blob/v1.4.0/src/abortcontroller-polyfill.js
    var self = exports;
    (function () {
      'use strict';

      class Emitter {
        constructor() {
          Object.defineProperty(this, 'listeners', {
            value: {},
            writable: true,
            configurable: true
          });
        }
        addEventListener(type, callback, options) {
          if (!(type in this.listeners)) {
            this.listeners[type] = [];
          }
          this.listeners[type].push({
            callback,
            options
          });
        }
        removeEventListener(type, callback) {
          if (!(type in this.listeners)) {
            return;
          }
          const stack = this.listeners[type];
          for (let i = 0, l = stack.length; i < l; i++) {
            if (stack[i].callback === callback) {
              stack.splice(i, 1);
              return;
            }
          }
        }
        dispatchEvent(event) {
          if (!(event.type in this.listeners)) {
            return;
          }
          const stack = this.listeners[event.type];
          const stackToCall = stack.slice();
          for (let i = 0, l = stackToCall.length; i < l; i++) {
            const listener = stackToCall[i];
            try {
              listener.callback.call(this, event);
            } catch (e) {
              Promise.resolve().then(() => {
                throw e;
              });
            }
            if (listener.options && listener.options.once) {
              this.removeEventListener(event.type, listener.callback);
            }
          }
          return !event.defaultPrevented;
        }
      }
      class AbortSignal extends Emitter {
        constructor() {
          super();
          // Some versions of babel does not transpile super() correctly for IE <= 10, if the parent
          // constructor has failed to run, then "this.listeners" will still be undefined and then we call
          // the parent constructor directly instead as a workaround. For general details, see babel bug:
          // https://github.com/babel/babel/issues/3041
          // This hack was added as a fix for the issue described here:
          // https://github.com/Financial-Times/polyfill-library/pull/59#issuecomment-477558042
          if (!this.listeners) {
            Emitter.call(this);
          }

          // Compared to assignment, Object.defineProperty makes properties non-enumerable by default and
          // we want Object.keys(new AbortController().signal) to be [] for compat with the native impl
          Object.defineProperty(this, 'aborted', {
            value: false,
            writable: true,
            configurable: true
          });
          Object.defineProperty(this, 'onabort', {
            value: null,
            writable: true,
            configurable: true
          });
          Object.defineProperty(this, 'reason', {
            value: undefined,
            writable: true,
            configurable: true
          });
        }
        toString() {
          return '[object AbortSignal]';
        }
        dispatchEvent(event) {
          if (event.type === 'abort') {
            this.aborted = true;
            if (typeof this.onabort === 'function') {
              this.onabort.call(this, event);
            }
          }
          super.dispatchEvent(event);
        }
      }
      class AbortController {
        constructor() {
          // Compared to assignment, Object.defineProperty makes properties non-enumerable by default and
          // we want Object.keys(new AbortController()) to be [] for compat with the native impl
          Object.defineProperty(this, 'signal', {
            value: new AbortSignal(),
            writable: true,
            configurable: true
          });
        }
        abort(reason) {
          let event;
          try {
            event = new Event('abort');
          } catch (e) {
            if (typeof document !== 'undefined') {
              if (!document.createEvent) {
                // For Internet Explorer 8:
                event = document.createEventObject();
                event.type = 'abort';
              } else {
                // For Internet Explorer 11:
                event = document.createEvent('Event');
                event.initEvent('abort', false, false);
              }
            } else {
              // Fallback where document isn't available:
              event = {
                type: 'abort',
                bubbles: false,
                cancelable: false
              };
            }
          }
          let signalReason = reason;
          if (signalReason === undefined) {
            if (typeof document === 'undefined') {
              signalReason = new Error('This operation was aborted');
              signalReason.name = 'AbortError';
            } else {
              try {
                signalReason = new DOMException('signal is aborted without reason');
              } catch (err) {
                // IE 11 does not support calling the DOMException constructor, use a
                // regular error object on it instead.
                signalReason = new Error('This operation was aborted');
                signalReason.name = 'AbortError';
              }
            }
          }
          this.signal.reason = signalReason;
          this.signal.dispatchEvent(event);
        }
        toString() {
          return '[object AbortController]';
        }
      }
      if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
        // These are necessary to make sure that we get correct output for:
        // Object.prototype.toString.call(new AbortController())
        AbortController.prototype[Symbol.toStringTag] = 'AbortController';
        AbortSignal.prototype[Symbol.toStringTag] = 'AbortSignal';
      }
      function polyfillNeeded(self) {
        if (self.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL) {
          console.log('__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL=true is set, will force install polyfill');
          return true;
        }

        // Note that the "unfetch" minimal fetch polyfill defines fetch() without
        // defining window.Request, and this polyfill need to work on top of unfetch
        // so the below feature detection needs the !self.AbortController part.
        // The Request.prototype check is also needed because Safari versions 11.1.2
        // up to and including 12.1.x has a window.AbortController present but still
        // does NOT correctly implement abortable fetch:
        // https://bugs.webkit.org/show_bug.cgi?id=174980#c2
        return typeof self.Request === 'function' && !self.Request.prototype.hasOwnProperty('signal') || !self.AbortController;
      }
      (function (self) {
        if (!polyfillNeeded(self)) {
          return;
        }
        self.AbortController = AbortController;
        self.AbortSignal = AbortSignal;
      })(typeof self !== 'undefined' ? self : global);
    })();
    var WHATWGFetch = function (exports) {
      'use strict';

      /* eslint-disable no-prototype-builtins */
      var g = typeof globalThis !== 'undefined' && globalThis || typeof self !== 'undefined' && self ||
      // eslint-disable-next-line no-undef
      typeof global !== 'undefined' && global || {};
      var support = {
        searchParams: 'URLSearchParams' in g,
        iterable: 'Symbol' in g && 'iterator' in Symbol,
        blob: 'FileReader' in g && 'Blob' in g && function () {
          try {
            new Blob();
            return true;
          } catch (e) {
            return false;
          }
        }(),
        formData: 'FormData' in g,
        arrayBuffer: 'ArrayBuffer' in g
      };
      function isDataView(obj) {
        return obj && DataView.prototype.isPrototypeOf(obj);
      }
      if (support.arrayBuffer) {
        var viewClasses = ['[object Int8Array]', '[object Uint8Array]', '[object Uint8ClampedArray]', '[object Int16Array]', '[object Uint16Array]', '[object Int32Array]', '[object Uint32Array]', '[object Float32Array]', '[object Float64Array]'];
        var isArrayBufferView = ArrayBuffer.isView || function (obj) {
          return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
        };
      }
      function normalizeName(name) {
        if (typeof name !== 'string') {
          name = String(name);
        }
        if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {
          throw new TypeError('Invalid character in header field name: "' + name + '"');
        }
        return name.toLowerCase();
      }
      function normalizeValue(value) {
        if (typeof value !== 'string') {
          value = String(value);
        }
        return value;
      }

      // Build a destructive iterator for the value list
      function iteratorFor(items) {
        var iterator = {
          next: function () {
            var value = items.shift();
            return {
              done: value === undefined,
              value: value
            };
          }
        };
        if (support.iterable) {
          iterator[Symbol.iterator] = function () {
            return iterator;
          };
        }
        return iterator;
      }
      function Headers(headers) {
        this.map = {};
        if (headers instanceof Headers) {
          headers.forEach(function (value, name) {
            this.append(name, value);
          }, this);
        } else if (Array.isArray(headers)) {
          headers.forEach(function (header) {
            if (header.length != 2) {
              throw new TypeError('Headers constructor: expected name/value pair to be length 2, found' + header.length);
            }
            this.append(header[0], header[1]);
          }, this);
        } else if (headers) {
          Object.getOwnPropertyNames(headers).forEach(function (name) {
            this.append(name, headers[name]);
          }, this);
        }
      }
      Headers.prototype.append = function (name, value) {
        name = normalizeName(name);
        value = normalizeValue(value);
        var oldValue = this.map[name];
        this.map[name] = oldValue ? oldValue + ', ' + value : value;
      };
      Headers.prototype['delete'] = function (name) {
        delete this.map[normalizeName(name)];
      };
      Headers.prototype.get = function (name) {
        name = normalizeName(name);
        return this.has(name) ? this.map[name] : null;
      };
      Headers.prototype.has = function (name) {
        return this.map.hasOwnProperty(normalizeName(name));
      };
      Headers.prototype.set = function (name, value) {
        this.map[normalizeName(name)] = normalizeValue(value);
      };
      Headers.prototype.forEach = function (callback, thisArg) {
        for (var name in this.map) {
          if (this.map.hasOwnProperty(name)) {
            callback.call(thisArg, this.map[name], name, this);
          }
        }
      };
      Headers.prototype.keys = function () {
        var items = [];
        this.forEach(function (value, name) {
          items.push(name);
        });
        return iteratorFor(items);
      };
      Headers.prototype.values = function () {
        var items = [];
        this.forEach(function (value) {
          items.push(value);
        });
        return iteratorFor(items);
      };
      Headers.prototype.entries = function () {
        var items = [];
        this.forEach(function (value, name) {
          items.push([name, value]);
        });
        return iteratorFor(items);
      };
      if (support.iterable) {
        Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
      }
      function consumed(body) {
        if (body._noBody) return;
        if (body.bodyUsed) {
          return Promise.reject(new TypeError('Already read'));
        }
        body.bodyUsed = true;
      }
      function fileReaderReady(reader) {
        return new Promise(function (resolve, reject) {
          reader.onload = function () {
            resolve(reader.result);
          };
          reader.onerror = function () {
            reject(reader.error);
          };
        });
      }
      function readBlobAsArrayBuffer(blob) {
        var reader = new FileReader();
        var promise = fileReaderReady(reader);
        reader.readAsArrayBuffer(blob);
        return promise;
      }
      function readBlobAsText(blob) {
        var reader = new FileReader();
        var promise = fileReaderReady(reader);
        var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type);
        var encoding = match ? match[1] : 'utf-8';
        reader.readAsText(blob, encoding);
        return promise;
      }
      function readArrayBufferAsText(buf) {
        var view = new Uint8Array(buf);
        var chars = new Array(view.length);
        for (var i = 0; i < view.length; i++) {
          chars[i] = String.fromCharCode(view[i]);
        }
        return chars.join('');
      }
      function bufferClone(buf) {
        if (buf.slice) {
          return buf.slice(0);
        } else {
          var view = new Uint8Array(buf.byteLength);
          view.set(new Uint8Array(buf));
          return view.buffer;
        }
      }
      function Body() {
        this.bodyUsed = false;
        this._initBody = function (body) {
          /*
            fetch-mock wraps the Response object in an ES6 Proxy to
            provide useful test harness features such as flush. However, on
            ES5 browsers without fetch or Proxy support pollyfills must be used;
            the proxy-pollyfill is unable to proxy an attribute unless it exists
            on the object before the Proxy is created. This change ensures
            Response.bodyUsed exists on the instance, while maintaining the
            semantic of setting Request.bodyUsed in the constructor before
            _initBody is called.
          */
          // eslint-disable-next-line no-self-assign
          this.bodyUsed = this.bodyUsed;
          this._bodyInit = body;
          if (!body) {
            this._noBody = true;
            this._bodyText = '';
          } else if (typeof body === 'string') {
            this._bodyText = body;
          } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
            this._bodyBlob = body;
          } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
            this._bodyFormData = body;
          } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
            this._bodyText = body.toString();
          } else if (support.arrayBuffer && support.blob && isDataView(body)) {
            this._bodyArrayBuffer = bufferClone(body.buffer);
            // IE 10-11 can't handle a DataView body.
            this._bodyInit = new Blob([this._bodyArrayBuffer]);
          } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
            this._bodyArrayBuffer = bufferClone(body);
          } else {
            this._bodyText = body = Object.prototype.toString.call(body);
          }
          if (!this.headers.get('content-type')) {
            if (typeof body === 'string') {
              this.headers.set('content-type', 'text/plain;charset=UTF-8');
            } else if (this._bodyBlob && this._bodyBlob.type) {
              this.headers.set('content-type', this._bodyBlob.type);
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
              this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
            }
          }
        };
        if (support.blob) {
          this.blob = function () {
            var rejected = consumed(this);
            if (rejected) {
              return rejected;
            }
            if (this._bodyBlob) {
              return Promise.resolve(this._bodyBlob);
            } else if (this._bodyArrayBuffer) {
              return Promise.resolve(new Blob([this._bodyArrayBuffer]));
            } else if (this._bodyFormData) {
              throw new Error('could not read FormData body as blob');
            } else {
              return Promise.resolve(new Blob([this._bodyText]));
            }
          };
        }
        this.arrayBuffer = function () {
          if (this._bodyArrayBuffer) {
            var isConsumed = consumed(this);
            if (isConsumed) {
              return isConsumed;
            } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
              return Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset, this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength));
            } else {
              return Promise.resolve(this._bodyArrayBuffer);
            }
          } else if (support.blob) {
            return this.blob().then(readBlobAsArrayBuffer);
          } else {
            throw new Error('could not read as ArrayBuffer');
          }
        };
        this.text = function () {
          var rejected = consumed(this);
          if (rejected) {
            return rejected;
          }
          if (this._bodyBlob) {
            return readBlobAsText(this._bodyBlob);
          } else if (this._bodyArrayBuffer) {
            return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
          } else if (this._bodyFormData) {
            throw new Error('could not read FormData body as text');
          } else {
            return Promise.resolve(this._bodyText);
          }
        };
        if (support.formData) {
          this.formData = function () {
            return this.text().then(decode);
          };
        }
        this.json = function () {
          return this.text().then(JSON.parse);
        };
        return this;
      }

      // HTTP methods whose capitalization should be normalized
      var methods = ['CONNECT', 'DELETE', 'GET', 'HEAD', 'OPTIONS', 'PATCH', 'POST', 'PUT', 'TRACE'];
      function normalizeMethod(method) {
        var upcased = method.toUpperCase();
        return methods.indexOf(upcased) > -1 ? upcased : method;
      }
      function Request(input, options) {
        if (!(this instanceof Request)) {
          throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
        }
        options = options || {};
        var body = options.body;
        if (input instanceof Request) {
          if (input.bodyUsed) {
            throw new TypeError('Already read');
          }
          this.url = input.url;
          this.credentials = input.credentials;
          if (!options.headers) {
            this.headers = new Headers(input.headers);
          }
          this.method = input.method;
          this.mode = input.mode;
          this.signal = input.signal;
          if (!body && input._bodyInit != null) {
            body = input._bodyInit;
            input.bodyUsed = true;
          }
        } else {
          this.url = String(input);
        }
        this.credentials = options.credentials || this.credentials || 'same-origin';
        if (options.headers || !this.headers) {
          this.headers = new Headers(options.headers);
        }
        this.method = normalizeMethod(options.method || this.method || 'GET');
        this.mode = options.mode || this.mode || null;
        this.signal = options.signal || this.signal || function () {
          if ('AbortController' in g) {
            var ctrl = new AbortController();
            return ctrl.signal;
          }
        }();
        this.referrer = null;
        if ((this.method === 'GET' || this.method === 'HEAD') && body) {
          throw new TypeError('Body not allowed for GET or HEAD requests');
        }
        this._initBody(body);
        if (this.method === 'GET' || this.method === 'HEAD') {
          if (options.cache === 'no-store' || options.cache === 'no-cache') {
            // Search for a '_' parameter in the query string
            var reParamSearch = /([?&])_=[^&]*/;
            if (reParamSearch.test(this.url)) {
              // If it already exists then set the value with the current time
              this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime());
            } else {
              // Otherwise add a new '_' parameter to the end with the current time
              var reQueryString = /\?/;
              this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime();
            }
          }
        }
      }
      Request.prototype.clone = function () {
        return new Request(this, {
          body: this._bodyInit
        });
      };
      function decode(body) {
        var form = new FormData();
        body.trim().split('&').forEach(function (bytes) {
          if (bytes) {
            var split = bytes.split('=');
            var name = split.shift().replace(/\+/g, ' ');
            var value = split.join('=').replace(/\+/g, ' ');
            form.append(decodeURIComponent(name), decodeURIComponent(value));
          }
        });
        return form;
      }
      function parseHeaders(rawHeaders) {
        var headers = new Headers();
        // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
        // https://tools.ietf.org/html/rfc7230#section-3.2
        var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
        // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill
        // https://github.com/github/fetch/issues/748
        // https://github.com/zloirock/core-js/issues/751
        preProcessedHeaders.split('\r').map(function (header) {
          return header.indexOf('\n') === 0 ? header.substr(1, header.length) : header;
        }).forEach(function (line) {
          var parts = line.split(':');
          var key = parts.shift().trim();
          if (key) {
            var value = parts.join(':').trim();
            try {
              headers.append(key, value);
            } catch (error) {
              console.warn('Response ' + error.message);
            }
          }
        });
        return headers;
      }
      Body.call(Request.prototype);
      function Response(bodyInit, options) {
        if (!(this instanceof Response)) {
          throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
        }
        if (!options) {
          options = {};
        }
        this.type = 'default';
        this.status = options.status === undefined ? 200 : options.status;
        if (this.status < 200 || this.status > 599) {
          throw new RangeError("Failed to construct 'Response': The status provided (0) is outside the range [200, 599].");
        }
        this.ok = this.status >= 200 && this.status < 300;
        this.statusText = options.statusText === undefined ? '' : '' + options.statusText;
        this.headers = new Headers(options.headers);
        this.url = options.url || '';
        this._initBody(bodyInit);
      }
      Body.call(Response.prototype);
      Response.prototype.clone = function () {
        return new Response(this._bodyInit, {
          status: this.status,
          statusText: this.statusText,
          headers: new Headers(this.headers),
          url: this.url
        });
      };
      Response.error = function () {
        var response = new Response(null, {
          status: 200,
          statusText: ''
        });
        response.status = 0;
        response.type = 'error';
        return response;
      };
      var redirectStatuses = [301, 302, 303, 307, 308];
      Response.redirect = function (url, status) {
        if (redirectStatuses.indexOf(status) === -1) {
          throw new RangeError('Invalid status code');
        }
        return new Response(null, {
          status: status,
          headers: {
            location: url
          }
        });
      };
      exports.DOMException = g.DOMException;
      try {
        new exports.DOMException();
      } catch (err) {
        exports.DOMException = function (message, name) {
          this.message = message;
          this.name = name;
          var error = Error(message);
          this.stack = error.stack;
        };
        exports.DOMException.prototype = Object.create(Error.prototype);
        exports.DOMException.prototype.constructor = exports.DOMException;
      }
      function fetch(input, init) {
        return new Promise(function (resolve, reject) {
          var request = new Request(input, init);
          if (request.signal && request.signal.aborted) {
            return reject(new exports.DOMException('Aborted', 'AbortError'));
          }
          var xhr = new XMLHttpRequest();
          function abortXhr() {
            xhr.abort();
          }
          xhr.onload = function () {
            var options = {
              statusText: xhr.statusText,
              headers: parseHeaders(xhr.getAllResponseHeaders() || '')
            };
            // This check if specifically for when a user fetches a file locally from the file system
            // Only if the status is out of a normal range
            if (request.url.startsWith('file://') && (xhr.status < 200 || xhr.status > 599)) {
              options.status = 200;
            } else {
              options.status = xhr.status;
            }
            options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
            var body = 'response' in xhr ? xhr.response : xhr.responseText;
            setTimeout(function () {
              resolve(new Response(body, options));
            }, 0);
          };
          xhr.onerror = function () {
            setTimeout(function () {
              reject(new TypeError('Network request failed'));
            }, 0);
          };
          xhr.ontimeout = function () {
            setTimeout(function () {
              reject(new TypeError('Network request failed'));
            }, 0);
          };
          xhr.onabort = function () {
            setTimeout(function () {
              reject(new exports.DOMException('Aborted', 'AbortError'));
            }, 0);
          };
          function fixUrl(url) {
            try {
              return url === '' && g.location.href ? g.location.href : url;
            } catch (e) {
              return url;
            }
          }
          xhr.open(request.method, fixUrl(request.url), true);
          if (request.credentials === 'include') {
            xhr.withCredentials = true;
          } else if (request.credentials === 'omit') {
            xhr.withCredentials = false;
          }
          if ('responseType' in xhr) {
            if (support.blob) {
              xhr.responseType = 'blob';
            } else if (support.arrayBuffer) {
              xhr.responseType = 'arraybuffer';
            }
          }
          if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers || g.Headers && init.headers instanceof g.Headers)) {
            var names = [];
            Object.getOwnPropertyNames(init.headers).forEach(function (name) {
              names.push(normalizeName(name));
              xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
            });
            request.headers.forEach(function (value, name) {
              if (names.indexOf(name) === -1) {
                xhr.setRequestHeader(name, value);
              }
            });
          } else {
            request.headers.forEach(function (value, name) {
              xhr.setRequestHeader(name, value);
            });
          }
          if (request.signal) {
            request.signal.addEventListener('abort', abortXhr);
            xhr.onreadystatechange = function () {
              // DONE (success or failure)
              if (xhr.readyState === 4) {
                request.signal.removeEventListener('abort', abortXhr);
              }
            };
          }
          xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
        });
      }
      fetch.polyfill = true;
      if (!g.fetch) {
        g.fetch = fetch;
        g.Headers = Headers;
        g.Request = Request;
        g.Response = Response;
      }
      exports.Headers = Headers;
      exports.Request = Request;
      exports.Response = Response;
      exports.fetch = fetch;
      return exports;
    }({});
    if (!globalThis.fetch) {
      throw new Error('fetch is not defined - maybe your browser targets are not covering everything you need?');
    }
    var pending = 0;
    function decrement(result) {
      pending--;
      return result;
    }
    if (Ember.Test) {
      Ember.Test.registerWaiter(function () {
        return pending === 0;
      });
      exports['default'] = function () {
        pending++;
        return exports.fetch.apply(originalGlobal, arguments).then(function (response) {
          response.clone().blob().then(decrement, decrement);
          return response;
        }, function (reason) {
          decrement(reason);
          throw reason;
        });
      };
    } else {
      exports['default'] = exports.fetch;
    }
    supportProps.forEach(function (prop) {
      delete exports[prop];
    });
  });
})(typeof window !== 'undefined' && window || typeof globalThis !== 'undefined' && globalThis || typeof self !== 'undefined' && self || typeof global !== 'undefined' && global);
    }
;/*!
 * Socket.IO v3.1.3
 * (c) 2014-2021 Guillermo Rauch
 * Released under the MIT License.
 */
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.io=e():t.io=e()}(self,(function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=17)}([function(t,e,n){function r(t){if(t)return function(t){for(var e in r.prototype)t[e]=r.prototype[e];return t}(t)}t.exports=r,r.prototype.on=r.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},r.prototype.once=function(t,e){function n(){this.off(t,n),e.apply(this,arguments)}return n.fn=e,this.on(t,n),this},r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,r=this._callbacks["$"+t];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var o=0;o<r.length;o++)if((n=r[o])===e||n.fn===e){r.splice(o,1);break}return 0===r.length&&delete this._callbacks["$"+t],this},r.prototype.emit=function(t){this._callbacks=this._callbacks||{};for(var e=new Array(arguments.length-1),n=this._callbacks["$"+t],r=1;r<arguments.length;r++)e[r-1]=arguments[r];if(n){r=0;for(var o=(n=n.slice(0)).length;r<o;++r)n[r].apply(this,e)}return this},r.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},r.prototype.hasListeners=function(t){return!!this.listeners(t).length}},function(t,e,n){var r=n(23),o=n(24),i=String.fromCharCode(30);t.exports={protocol:4,encodePacket:r,encodePayload:function(t,e){var n=t.length,o=new Array(n),s=0;t.forEach((function(t,c){r(t,!1,(function(t){o[c]=t,++s===n&&e(o.join(i))}))}))},decodePacket:o,decodePayload:function(t,e){for(var n=t.split(i),r=[],s=0;s<n.length;s++){var c=o(n[s],e);if(r.push(c),"error"===c.type)break}return r}}},function(t,e){t.exports="undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")()},function(t,e,n){function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function o(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function i(t,e){return(i=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function s(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=a(t);if(e){var o=a(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return c(this,n)}}function c(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function a(t){return(a=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var u=n(1),f=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&i(t,e)}(a,t);var e,n,r,c=s(a);function a(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),(e=c.call(this)).opts=t,e.query=t.query,e.readyState="",e.socket=t.socket,e}return e=a,(n=[{key:"onError",value:function(t,e){var n=new Error(t);return n.type="TransportError",n.description=e,this.emit("error",n),this}},{key:"open",value:function(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this}},{key:"close",value:function(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this}},{key:"send",value:function(t){if("open"!==this.readyState)throw new Error("Transport not open");this.write(t)}},{key:"onOpen",value:function(){this.readyState="open",this.writable=!0,this.emit("open")}},{key:"onData",value:function(t){var e=u.decodePacket(t,this.socket.binaryType);this.onPacket(e)}},{key:"onPacket",value:function(t){this.emit("packet",t)}},{key:"onClose",value:function(){this.readyState="closed",this.emit("close")}}])&&o(e.prototype,n),r&&o(e,r),a}(n(0));t.exports=f},function(t,e){e.encode=function(t){var e="";for(var n in t)t.hasOwnProperty(n)&&(e.length&&(e+="&"),e+=encodeURIComponent(n)+"="+encodeURIComponent(t[n]));return e},e.decode=function(t){for(var e={},n=t.split("&"),r=0,o=n.length;r<o;r++){var i=n[r].split("=");e[decodeURIComponent(i[0])]=decodeURIComponent(i[1])}return e}},function(t,e,n){"use strict";function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function o(t,e,n){return(o="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=a(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}})(t,e,n||t)}function i(t,e){return(i=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function s(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=a(t);if(e){var o=a(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return c(this,n)}}function c(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function a(t){return(a=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function u(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function f(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function p(t,e,n){return e&&f(t.prototype,e),n&&f(t,n),t}Object.defineProperty(e,"__esModule",{value:!0}),e.Decoder=e.Encoder=e.PacketType=e.protocol=void 0;var l,h=n(0),y=n(29),d=n(15);e.protocol=5,function(t){t[t.CONNECT=0]="CONNECT",t[t.DISCONNECT=1]="DISCONNECT",t[t.EVENT=2]="EVENT",t[t.ACK=3]="ACK",t[t.CONNECT_ERROR=4]="CONNECT_ERROR",t[t.BINARY_EVENT=5]="BINARY_EVENT",t[t.BINARY_ACK=6]="BINARY_ACK"}(l=e.PacketType||(e.PacketType={}));var v=function(){function t(){u(this,t)}return p(t,[{key:"encode",value:function(t){return t.type!==l.EVENT&&t.type!==l.ACK||!d.hasBinary(t)?[this.encodeAsString(t)]:(t.type=t.type===l.EVENT?l.BINARY_EVENT:l.BINARY_ACK,this.encodeAsBinary(t))}},{key:"encodeAsString",value:function(t){var e=""+t.type;return t.type!==l.BINARY_EVENT&&t.type!==l.BINARY_ACK||(e+=t.attachments+"-"),t.nsp&&"/"!==t.nsp&&(e+=t.nsp+","),null!=t.id&&(e+=t.id),null!=t.data&&(e+=JSON.stringify(t.data)),e}},{key:"encodeAsBinary",value:function(t){var e=y.deconstructPacket(t),n=this.encodeAsString(e.packet),r=e.buffers;return r.unshift(n),r}}]),t}();e.Encoder=v;var b=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&i(t,e)}(n,t);var e=s(n);function n(){return u(this,n),e.call(this)}return p(n,[{key:"add",value:function(t){var e;if("string"==typeof t)(e=this.decodeString(t)).type===l.BINARY_EVENT||e.type===l.BINARY_ACK?(this.reconstructor=new m(e),0===e.attachments&&o(a(n.prototype),"emit",this).call(this,"decoded",e)):o(a(n.prototype),"emit",this).call(this,"decoded",e);else{if(!d.isBinary(t)&&!t.base64)throw new Error("Unknown type: "+t);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");(e=this.reconstructor.takeBinaryData(t))&&(this.reconstructor=null,o(a(n.prototype),"emit",this).call(this,"decoded",e))}}},{key:"decodeString",value:function(t){var e=0,r={type:Number(t.charAt(0))};if(void 0===l[r.type])throw new Error("unknown packet type "+r.type);if(r.type===l.BINARY_EVENT||r.type===l.BINARY_ACK){for(var o=e+1;"-"!==t.charAt(++e)&&e!=t.length;);var i=t.substring(o,e);if(i!=Number(i)||"-"!==t.charAt(e))throw new Error("Illegal attachments");r.attachments=Number(i)}if("/"===t.charAt(e+1)){for(var s=e+1;++e;){if(","===t.charAt(e))break;if(e===t.length)break}r.nsp=t.substring(s,e)}else r.nsp="/";var c=t.charAt(e+1);if(""!==c&&Number(c)==c){for(var a=e+1;++e;){var u=t.charAt(e);if(null==u||Number(u)!=u){--e;break}if(e===t.length)break}r.id=Number(t.substring(a,e+1))}if(t.charAt(++e)){var f=function(t){try{return JSON.parse(t)}catch(t){return!1}}(t.substr(e));if(!n.isPayloadValid(r.type,f))throw new Error("invalid payload");r.data=f}return r}},{key:"destroy",value:function(){this.reconstructor&&this.reconstructor.finishedReconstruction()}}],[{key:"isPayloadValid",value:function(t,e){switch(t){case l.CONNECT:return"object"===r(e);case l.DISCONNECT:return void 0===e;case l.CONNECT_ERROR:return"string"==typeof e||"object"===r(e);case l.EVENT:case l.BINARY_EVENT:return Array.isArray(e)&&e.length>0;case l.ACK:case l.BINARY_ACK:return Array.isArray(e)}}}]),n}(h);e.Decoder=b;var m=function(){function t(e){u(this,t),this.packet=e,this.buffers=[],this.reconPack=e}return p(t,[{key:"takeBinaryData",value:function(t){if(this.buffers.push(t),this.buffers.length===this.reconPack.attachments){var e=y.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),e}return null}},{key:"finishedReconstruction",value:function(){this.reconPack=null,this.buffers=[]}}]),t}()},function(t,e){var n=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,r=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];t.exports=function(t){var e=t,o=t.indexOf("["),i=t.indexOf("]");-1!=o&&-1!=i&&(t=t.substring(0,o)+t.substring(o,i).replace(/:/g,";")+t.substring(i,t.length));for(var s,c,a=n.exec(t||""),u={},f=14;f--;)u[r[f]]=a[f]||"";return-1!=o&&-1!=i&&(u.source=e,u.host=u.host.substring(1,u.host.length-1).replace(/;/g,":"),u.authority=u.authority.replace("[","").replace("]","").replace(/;/g,":"),u.ipv6uri=!0),u.pathNames=function(t,e){var n=e.replace(/\/{2,9}/g,"/").split("/");"/"!=e.substr(0,1)&&0!==e.length||n.splice(0,1);"/"==e.substr(e.length-1,1)&&n.splice(n.length-1,1);return n}(0,u.path),u.queryKey=(s=u.query,c={},s.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,(function(t,e,n){e&&(c[e]=n)})),c),u}},function(t,e,n){"use strict";function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function o(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function i(t,e,n){return(i="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=u(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}})(t,e,n||t)}function s(t,e){return(s=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function c(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=u(t);if(e){var o=u(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return a(this,n)}}function a(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function u(t){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}Object.defineProperty(e,"__esModule",{value:!0}),e.Manager=void 0;var f=n(19),p=n(14),l=n(0),h=n(5),y=n(16),d=n(30),v=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&s(t,e)}(v,t);var e,n,a,l=c(v);function v(t,e){var n;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,v),(n=l.call(this)).nsps={},n.subs=[],t&&"object"===r(t)&&(e=t,t=void 0),(e=e||{}).path=e.path||"/socket.io",n.opts=e,n.reconnection(!1!==e.reconnection),n.reconnectionAttempts(e.reconnectionAttempts||1/0),n.reconnectionDelay(e.reconnectionDelay||1e3),n.reconnectionDelayMax(e.reconnectionDelayMax||5e3),n.randomizationFactor(e.randomizationFactor||.5),n.backoff=new d({min:n.reconnectionDelay(),max:n.reconnectionDelayMax(),jitter:n.randomizationFactor()}),n.timeout(null==e.timeout?2e4:e.timeout),n._readyState="closed",n.uri=t;var o=e.parser||h;return n.encoder=new o.Encoder,n.decoder=new o.Decoder,n._autoConnect=!1!==e.autoConnect,n._autoConnect&&n.open(),n}return e=v,(n=[{key:"reconnection",value:function(t){return arguments.length?(this._reconnection=!!t,this):this._reconnection}},{key:"reconnectionAttempts",value:function(t){return void 0===t?this._reconnectionAttempts:(this._reconnectionAttempts=t,this)}},{key:"reconnectionDelay",value:function(t){var e;return void 0===t?this._reconnectionDelay:(this._reconnectionDelay=t,null===(e=this.backoff)||void 0===e||e.setMin(t),this)}},{key:"randomizationFactor",value:function(t){var e;return void 0===t?this._randomizationFactor:(this._randomizationFactor=t,null===(e=this.backoff)||void 0===e||e.setJitter(t),this)}},{key:"reconnectionDelayMax",value:function(t){var e;return void 0===t?this._reconnectionDelayMax:(this._reconnectionDelayMax=t,null===(e=this.backoff)||void 0===e||e.setMax(t),this)}},{key:"timeout",value:function(t){return arguments.length?(this._timeout=t,this):this._timeout}},{key:"maybeReconnectOnOpen",value:function(){!this._reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()}},{key:"open",value:function(t){var e=this;if(~this._readyState.indexOf("open"))return this;this.engine=f(this.uri,this.opts);var n=this.engine,r=this;this._readyState="opening",this.skipReconnect=!1;var o=y.on(n,"open",(function(){r.onopen(),t&&t()})),s=y.on(n,"error",(function(n){r.cleanup(),r._readyState="closed",i(u(v.prototype),"emit",e).call(e,"error",n),t?t(n):r.maybeReconnectOnOpen()}));if(!1!==this._timeout){var c=this._timeout;0===c&&o();var a=setTimeout((function(){o(),n.close(),n.emit("error",new Error("timeout"))}),c);this.subs.push((function(){clearTimeout(a)}))}return this.subs.push(o),this.subs.push(s),this}},{key:"connect",value:function(t){return this.open(t)}},{key:"onopen",value:function(){this.cleanup(),this._readyState="open",i(u(v.prototype),"emit",this).call(this,"open");var t=this.engine;this.subs.push(y.on(t,"ping",this.onping.bind(this)),y.on(t,"data",this.ondata.bind(this)),y.on(t,"error",this.onerror.bind(this)),y.on(t,"close",this.onclose.bind(this)),y.on(this.decoder,"decoded",this.ondecoded.bind(this)))}},{key:"onping",value:function(){i(u(v.prototype),"emit",this).call(this,"ping")}},{key:"ondata",value:function(t){this.decoder.add(t)}},{key:"ondecoded",value:function(t){i(u(v.prototype),"emit",this).call(this,"packet",t)}},{key:"onerror",value:function(t){i(u(v.prototype),"emit",this).call(this,"error",t)}},{key:"socket",value:function(t,e){var n=this.nsps[t];return n||(n=new p.Socket(this,t,e),this.nsps[t]=n),n}},{key:"_destroy",value:function(t){for(var e=0,n=Object.keys(this.nsps);e<n.length;e++){var r=n[e];if(this.nsps[r].active)return}this._close()}},{key:"_packet",value:function(t){for(var e=this.encoder.encode(t),n=0;n<e.length;n++)this.engine.write(e[n],t.options)}},{key:"cleanup",value:function(){this.subs.forEach((function(t){return t()})),this.subs.length=0,this.decoder.destroy()}},{key:"_close",value:function(){this.skipReconnect=!0,this._reconnecting=!1,"opening"===this._readyState&&this.cleanup(),this.backoff.reset(),this._readyState="closed",this.engine&&this.engine.close()}},{key:"disconnect",value:function(){return this._close()}},{key:"onclose",value:function(t){this.cleanup(),this.backoff.reset(),this._readyState="closed",i(u(v.prototype),"emit",this).call(this,"close",t),this._reconnection&&!this.skipReconnect&&this.reconnect()}},{key:"reconnect",value:function(){var t=this;if(this._reconnecting||this.skipReconnect)return this;var e=this;if(this.backoff.attempts>=this._reconnectionAttempts)this.backoff.reset(),i(u(v.prototype),"emit",this).call(this,"reconnect_failed"),this._reconnecting=!1;else{var n=this.backoff.duration();this._reconnecting=!0;var r=setTimeout((function(){e.skipReconnect||(i(u(v.prototype),"emit",t).call(t,"reconnect_attempt",e.backoff.attempts),e.skipReconnect||e.open((function(n){n?(e._reconnecting=!1,e.reconnect(),i(u(v.prototype),"emit",t).call(t,"reconnect_error",n)):e.onreconnect()})))}),n);this.subs.push((function(){clearTimeout(r)}))}}},{key:"onreconnect",value:function(){var t=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),i(u(v.prototype),"emit",this).call(this,"reconnect",t)}}])&&o(e.prototype,n),a&&o(e,a),v}(l);e.Manager=v},function(t,e,n){var r=n(9),o=n(22),i=n(26),s=n(27);e.polling=function(t){var e=!1,n=!1,s=!1!==t.jsonp;if("undefined"!=typeof location){var c="https:"===location.protocol,a=location.port;a||(a=c?443:80),e=t.hostname!==location.hostname||a!==t.port,n=t.secure!==c}if(t.xdomain=e,t.xscheme=n,"open"in new r(t)&&!t.forceJSONP)return new o(t);if(!s)throw new Error("JSONP disabled");return new i(t)},e.websocket=s},function(t,e,n){var r=n(21),o=n(2);t.exports=function(t){var e=t.xdomain,n=t.xscheme,i=t.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!e||r))return new XMLHttpRequest}catch(t){}try{if("undefined"!=typeof XDomainRequest&&!n&&i)return new XDomainRequest}catch(t){}if(!e)try{return new(o[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(t){}}},function(t,e,n){function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function s(t,e){return(s=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function c(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=u(t);if(e){var o=u(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return a(this,n)}}function a(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function u(t){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var f=n(3),p=n(4),l=n(1),h=n(12),y=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&s(t,e)}(u,t);var e,n,r,a=c(u);function u(){return o(this,u),a.apply(this,arguments)}return e=u,(n=[{key:"doOpen",value:function(){this.poll()}},{key:"pause",value:function(t){var e=this;function n(){e.readyState="paused",t()}if(this.readyState="pausing",this.polling||!this.writable){var r=0;this.polling&&(r++,this.once("pollComplete",(function(){--r||n()}))),this.writable||(r++,this.once("drain",(function(){--r||n()})))}else n()}},{key:"poll",value:function(){this.polling=!0,this.doPoll(),this.emit("poll")}},{key:"onData",value:function(t){var e=this;l.decodePayload(t,this.socket.binaryType).forEach((function(t,n,r){if("opening"===e.readyState&&"open"===t.type&&e.onOpen(),"close"===t.type)return e.onClose(),!1;e.onPacket(t)})),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState&&this.poll())}},{key:"doClose",value:function(){var t=this;function e(){t.write([{type:"close"}])}"open"===this.readyState?e():this.once("open",e)}},{key:"write",value:function(t){var e=this;this.writable=!1,l.encodePayload(t,(function(t){e.doWrite(t,(function(){e.writable=!0,e.emit("drain")}))}))}},{key:"uri",value:function(){var t=this.query||{},e=this.opts.secure?"https":"http",n="";return!1!==this.opts.timestampRequests&&(t[this.opts.timestampParam]=h()),this.supportsBinary||t.sid||(t.b64=1),t=p.encode(t),this.opts.port&&("https"===e&&443!==Number(this.opts.port)||"http"===e&&80!==Number(this.opts.port))&&(n=":"+this.opts.port),t.length&&(t="?"+t),e+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+n+this.opts.path+t}},{key:"name",get:function(){return"polling"}}])&&i(e.prototype,n),r&&i(e,r),u}(f);t.exports=y},function(t,e){var n=Object.create(null);n.open="0",n.close="1",n.ping="2",n.pong="3",n.message="4",n.upgrade="5",n.noop="6";var r=Object.create(null);Object.keys(n).forEach((function(t){r[n[t]]=t}));t.exports={PACKET_TYPES:n,PACKET_TYPES_REVERSE:r,ERROR_PACKET:{type:"error",data:"parser error"}}},function(t,e,n){"use strict";var r,o="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),i={},s=0,c=0;function a(t){var e="";do{e=o[t%64]+e,t=Math.floor(t/64)}while(t>0);return e}function u(){var t=a(+new Date);return t!==r?(s=0,r=t):t+"."+a(s++)}for(;c<64;c++)i[o[c]]=c;u.encode=a,u.decode=function(t){var e=0;for(c=0;c<t.length;c++)e=64*e+i[t.charAt(c)];return e},t.exports=u},function(t,e){t.exports.pick=function(t){for(var e=arguments.length,n=new Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return n.reduce((function(e,n){return t.hasOwnProperty(n)&&(e[n]=t[n]),e}),{})}},function(t,e,n){"use strict";function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function o(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(!t)return;if("string"==typeof t)return i(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return i(t,e)}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,o=function(){};return{s:o,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,c=!0,a=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return c=t.done,t},e:function(t){a=!0,s=t},f:function(){try{c||null==n.return||n.return()}finally{if(a)throw s}}}}function i(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function s(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function c(t,e,n){return(c="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=p(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}})(t,e,n||t)}function a(t,e){return(a=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function u(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=p(t);if(e){var o=p(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return f(this,n)}}function f(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function p(t){return(p=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}Object.defineProperty(e,"__esModule",{value:!0}),e.Socket=void 0;var l=n(5),h=n(0),y=n(16),d=Object.freeze({connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1}),v=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&a(t,e)}(f,t);var e,n,r,i=u(f);function f(t,e,n){var r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,f),(r=i.call(this)).receiveBuffer=[],r.sendBuffer=[],r.ids=0,r.acks={},r.flags={},r.io=t,r.nsp=e,r.ids=0,r.acks={},r.receiveBuffer=[],r.sendBuffer=[],r.connected=!1,r.disconnected=!0,r.flags={},n&&n.auth&&(r.auth=n.auth),r.io._autoConnect&&r.open(),r}return e=f,(n=[{key:"subEvents",value:function(){if(!this.subs){var t=this.io;this.subs=[y.on(t,"open",this.onopen.bind(this)),y.on(t,"packet",this.onpacket.bind(this)),y.on(t,"error",this.onerror.bind(this)),y.on(t,"close",this.onclose.bind(this))]}}},{key:"connect",value:function(){return this.connected||(this.subEvents(),this.io._reconnecting||this.io.open(),"open"===this.io._readyState&&this.onopen()),this}},{key:"open",value:function(){return this.connect()}},{key:"send",value:function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return e.unshift("message"),this.emit.apply(this,e),this}},{key:"emit",value:function(t){if(d.hasOwnProperty(t))throw new Error('"'+t+'" is a reserved event name');for(var e=arguments.length,n=new Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];n.unshift(t);var o={type:l.PacketType.EVENT,data:n,options:{}};o.options.compress=!1!==this.flags.compress,"function"==typeof n[n.length-1]&&(this.acks[this.ids]=n.pop(),o.id=this.ids++);var i=this.io.engine&&this.io.engine.transport&&this.io.engine.transport.writable,s=this.flags.volatile&&(!i||!this.connected);return s||(this.connected?this.packet(o):this.sendBuffer.push(o)),this.flags={},this}},{key:"packet",value:function(t){t.nsp=this.nsp,this.io._packet(t)}},{key:"onopen",value:function(){var t=this;"function"==typeof this.auth?this.auth((function(e){t.packet({type:l.PacketType.CONNECT,data:e})})):this.packet({type:l.PacketType.CONNECT,data:this.auth})}},{key:"onerror",value:function(t){this.connected||c(p(f.prototype),"emit",this).call(this,"connect_error",t)}},{key:"onclose",value:function(t){this.connected=!1,this.disconnected=!0,delete this.id,c(p(f.prototype),"emit",this).call(this,"disconnect",t)}},{key:"onpacket",value:function(t){if(t.nsp===this.nsp)switch(t.type){case l.PacketType.CONNECT:if(t.data&&t.data.sid){var e=t.data.sid;this.onconnect(e)}else c(p(f.prototype),"emit",this).call(this,"connect_error",new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));break;case l.PacketType.EVENT:case l.PacketType.BINARY_EVENT:this.onevent(t);break;case l.PacketType.ACK:case l.PacketType.BINARY_ACK:this.onack(t);break;case l.PacketType.DISCONNECT:this.ondisconnect();break;case l.PacketType.CONNECT_ERROR:var n=new Error(t.data.message);n.data=t.data.data,c(p(f.prototype),"emit",this).call(this,"connect_error",n)}}},{key:"onevent",value:function(t){var e=t.data||[];null!=t.id&&e.push(this.ack(t.id)),this.connected?this.emitEvent(e):this.receiveBuffer.push(Object.freeze(e))}},{key:"emitEvent",value:function(t){if(this._anyListeners&&this._anyListeners.length){var e,n=o(this._anyListeners.slice());try{for(n.s();!(e=n.n()).done;)e.value.apply(this,t)}catch(t){n.e(t)}finally{n.f()}}c(p(f.prototype),"emit",this).apply(this,t)}},{key:"ack",value:function(t){var e=this,n=!1;return function(){if(!n){n=!0;for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];e.packet({type:l.PacketType.ACK,id:t,data:o})}}}},{key:"onack",value:function(t){var e=this.acks[t.id];"function"==typeof e&&(e.apply(this,t.data),delete this.acks[t.id])}},{key:"onconnect",value:function(t){this.id=t,this.connected=!0,this.disconnected=!1,c(p(f.prototype),"emit",this).call(this,"connect"),this.emitBuffered()}},{key:"emitBuffered",value:function(){var t=this;this.receiveBuffer.forEach((function(e){return t.emitEvent(e)})),this.receiveBuffer=[],this.sendBuffer.forEach((function(e){return t.packet(e)})),this.sendBuffer=[]}},{key:"ondisconnect",value:function(){this.destroy(),this.onclose("io server disconnect")}},{key:"destroy",value:function(){this.subs&&(this.subs.forEach((function(t){return t()})),this.subs=void 0),this.io._destroy(this)}},{key:"disconnect",value:function(){return this.connected&&this.packet({type:l.PacketType.DISCONNECT}),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}},{key:"close",value:function(){return this.disconnect()}},{key:"compress",value:function(t){return this.flags.compress=t,this}},{key:"onAny",value:function(t){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(t),this}},{key:"prependAny",value:function(t){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(t),this}},{key:"offAny",value:function(t){if(!this._anyListeners)return this;if(t){for(var e=this._anyListeners,n=0;n<e.length;n++)if(t===e[n])return e.splice(n,1),this}else this._anyListeners=[];return this}},{key:"listenersAny",value:function(){return this._anyListeners||[]}},{key:"active",get:function(){return!!this.subs}},{key:"volatile",get:function(){return this.flags.volatile=!0,this}}])&&s(e.prototype,n),r&&s(e,r),f}(h);e.Socket=v},function(t,e,n){"use strict";function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}Object.defineProperty(e,"__esModule",{value:!0}),e.hasBinary=e.isBinary=void 0;var o="function"==typeof ArrayBuffer,i=Object.prototype.toString,s="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===i.call(Blob),c="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===i.call(File);function a(t){return o&&(t instanceof ArrayBuffer||function(t){return"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):t.buffer instanceof ArrayBuffer}(t))||s&&t instanceof Blob||c&&t instanceof File}e.isBinary=a,e.hasBinary=function t(e,n){if(!e||"object"!==r(e))return!1;if(Array.isArray(e)){for(var o=0,i=e.length;o<i;o++)if(t(e[o]))return!0;return!1}if(a(e))return!0;if(e.toJSON&&"function"==typeof e.toJSON&&1===arguments.length)return t(e.toJSON(),!0);for(var s in e)if(Object.prototype.hasOwnProperty.call(e,s)&&t(e[s]))return!0;return!1}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.on=void 0,e.on=function(t,e,n){return t.on(e,n),function(){t.off(e,n)}}},function(t,e,n){"use strict";function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}Object.defineProperty(e,"__esModule",{value:!0}),e.Socket=e.io=e.Manager=e.protocol=void 0;var o=n(18),i=n(7),s=n(14);Object.defineProperty(e,"Socket",{enumerable:!0,get:function(){return s.Socket}}),t.exports=e=a;var c=e.managers={};function a(t,e){"object"===r(t)&&(e=t,t=void 0),e=e||{};var n,s=o.url(t,e.path),a=s.source,u=s.id,f=s.path,p=c[u]&&f in c[u].nsps;return e.forceNew||e["force new connection"]||!1===e.multiplex||p?n=new i.Manager(a,e):(c[u]||(c[u]=new i.Manager(a,e)),n=c[u]),s.query&&!e.query&&(e.query=s.queryKey),n.socket(s.path,e)}e.io=a;var u=n(5);Object.defineProperty(e,"protocol",{enumerable:!0,get:function(){return u.protocol}}),e.connect=a;var f=n(7);Object.defineProperty(e,"Manager",{enumerable:!0,get:function(){return f.Manager}})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.url=void 0;var r=n(6);e.url=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2?arguments[2]:void 0,o=t;n=n||"undefined"!=typeof location&&location,null==t&&(t=n.protocol+"//"+n.host),"string"==typeof t&&("/"===t.charAt(0)&&(t="/"===t.charAt(1)?n.protocol+t:n.host+t),/^(https?|wss?):\/\//.test(t)||(t=void 0!==n?n.protocol+"//"+t:"https://"+t),o=r(t)),o.port||(/^(http|ws)$/.test(o.protocol)?o.port="80":/^(http|ws)s$/.test(o.protocol)&&(o.port="443")),o.path=o.path||"/";var i=-1!==o.host.indexOf(":"),s=i?"["+o.host+"]":o.host;return o.id=o.protocol+"://"+s+":"+o.port+e,o.href=o.protocol+"://"+s+(n&&n.port===o.port?"":":"+o.port),o}},function(t,e,n){var r=n(20);t.exports=function(t,e){return new r(t,e)},t.exports.Socket=r,t.exports.protocol=r.protocol,t.exports.Transport=n(3),t.exports.transports=n(8),t.exports.parser=n(1)},function(t,e,n){function r(){return(r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function c(t,e){return(c=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function a(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=f(t);if(e){var o=f(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return u(this,n)}}function u(t,e){return!e||"object"!==o(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function f(t){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var p=n(8),l=n(0),h=n(1),y=n(6),d=n(4),v=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&c(t,e)}(l,t);var e,n,u,f=a(l);function l(t){var e,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return i(this,l),e=f.call(this),t&&"object"===o(t)&&(n=t,t=null),t?(t=y(t),n.hostname=t.host,n.secure="https"===t.protocol||"wss"===t.protocol,n.port=t.port,t.query&&(n.query=t.query)):n.host&&(n.hostname=y(n.host).host),e.secure=null!=n.secure?n.secure:"undefined"!=typeof location&&"https:"===location.protocol,n.hostname&&!n.port&&(n.port=e.secure?"443":"80"),e.hostname=n.hostname||("undefined"!=typeof location?location.hostname:"localhost"),e.port=n.port||("undefined"!=typeof location&&location.port?location.port:e.secure?443:80),e.transports=n.transports||["polling","websocket"],e.readyState="",e.writeBuffer=[],e.prevBufferLen=0,e.opts=r({path:"/engine.io",agent:!1,withCredentials:!1,upgrade:!0,jsonp:!0,timestampParam:"t",rememberUpgrade:!1,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{}},n),e.opts.path=e.opts.path.replace(/\/$/,"")+"/","string"==typeof e.opts.query&&(e.opts.query=d.decode(e.opts.query)),e.id=null,e.upgrades=null,e.pingInterval=null,e.pingTimeout=null,e.pingTimeoutTimer=null,"function"==typeof addEventListener&&addEventListener("beforeunload",(function(){e.transport&&(e.transport.removeAllListeners(),e.transport.close())}),!1),e.open(),e}return e=l,(n=[{key:"createTransport",value:function(t){var e=function(t){var e={};for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}(this.opts.query);e.EIO=h.protocol,e.transport=t,this.id&&(e.sid=this.id);var n=r({},this.opts.transportOptions[t],this.opts,{query:e,socket:this,hostname:this.hostname,secure:this.secure,port:this.port});return new p[t](n)}},{key:"open",value:function(){var t;if(this.opts.rememberUpgrade&&l.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))t="websocket";else{if(0===this.transports.length){var e=this;return void setTimeout((function(){e.emit("error","No transports available")}),0)}t=this.transports[0]}this.readyState="opening";try{t=this.createTransport(t)}catch(t){return this.transports.shift(),void this.open()}t.open(),this.setTransport(t)}},{key:"setTransport",value:function(t){var e=this;this.transport&&this.transport.removeAllListeners(),this.transport=t,t.on("drain",(function(){e.onDrain()})).on("packet",(function(t){e.onPacket(t)})).on("error",(function(t){e.onError(t)})).on("close",(function(){e.onClose("transport close")}))}},{key:"probe",value:function(t){var e=this.createTransport(t,{probe:1}),n=!1,r=this;function o(){if(r.onlyBinaryUpgrades){var t=!this.supportsBinary&&r.transport.supportsBinary;n=n||t}n||(e.send([{type:"ping",data:"probe"}]),e.once("packet",(function(t){if(!n)if("pong"===t.type&&"probe"===t.data){if(r.upgrading=!0,r.emit("upgrading",e),!e)return;l.priorWebsocketSuccess="websocket"===e.name,r.transport.pause((function(){n||"closed"!==r.readyState&&(f(),r.setTransport(e),e.send([{type:"upgrade"}]),r.emit("upgrade",e),e=null,r.upgrading=!1,r.flush())}))}else{var o=new Error("probe error");o.transport=e.name,r.emit("upgradeError",o)}})))}function i(){n||(n=!0,f(),e.close(),e=null)}function s(t){var n=new Error("probe error: "+t);n.transport=e.name,i(),r.emit("upgradeError",n)}function c(){s("transport closed")}function a(){s("socket closed")}function u(t){e&&t.name!==e.name&&i()}function f(){e.removeListener("open",o),e.removeListener("error",s),e.removeListener("close",c),r.removeListener("close",a),r.removeListener("upgrading",u)}l.priorWebsocketSuccess=!1,e.once("open",o),e.once("error",s),e.once("close",c),this.once("close",a),this.once("upgrading",u),e.open()}},{key:"onOpen",value:function(){if(this.readyState="open",l.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.opts.upgrade&&this.transport.pause)for(var t=0,e=this.upgrades.length;t<e;t++)this.probe(this.upgrades[t])}},{key:"onPacket",value:function(t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(this.emit("packet",t),this.emit("heartbeat"),t.type){case"open":this.onHandshake(JSON.parse(t.data));break;case"ping":this.resetPingTimeout(),this.sendPacket("pong"),this.emit("pong");break;case"error":var e=new Error("server error");e.code=t.data,this.onError(e);break;case"message":this.emit("data",t.data),this.emit("message",t.data)}}},{key:"onHandshake",value:function(t){this.emit("handshake",t),this.id=t.sid,this.transport.query.sid=t.sid,this.upgrades=this.filterUpgrades(t.upgrades),this.pingInterval=t.pingInterval,this.pingTimeout=t.pingTimeout,this.onOpen(),"closed"!==this.readyState&&this.resetPingTimeout()}},{key:"resetPingTimeout",value:function(){var t=this;clearTimeout(this.pingTimeoutTimer),this.pingTimeoutTimer=setTimeout((function(){t.onClose("ping timeout")}),this.pingInterval+this.pingTimeout)}},{key:"onDrain",value:function(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()}},{key:"flush",value:function(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))}},{key:"write",value:function(t,e,n){return this.sendPacket("message",t,e,n),this}},{key:"send",value:function(t,e,n){return this.sendPacket("message",t,e,n),this}},{key:"sendPacket",value:function(t,e,n,r){if("function"==typeof e&&(r=e,e=void 0),"function"==typeof n&&(r=n,n=null),"closing"!==this.readyState&&"closed"!==this.readyState){(n=n||{}).compress=!1!==n.compress;var o={type:t,data:e,options:n};this.emit("packetCreate",o),this.writeBuffer.push(o),r&&this.once("flush",r),this.flush()}}},{key:"close",value:function(){var t=this;function e(){t.onClose("forced close"),t.transport.close()}function n(){t.removeListener("upgrade",n),t.removeListener("upgradeError",n),e()}function r(){t.once("upgrade",n),t.once("upgradeError",n)}return"opening"!==this.readyState&&"open"!==this.readyState||(this.readyState="closing",this.writeBuffer.length?this.once("drain",(function(){this.upgrading?r():e()})):this.upgrading?r():e()),this}},{key:"onError",value:function(t){l.priorWebsocketSuccess=!1,this.emit("error",t),this.onClose("transport error",t)}},{key:"onClose",value:function(t,e){"opening"!==this.readyState&&"open"!==this.readyState&&"closing"!==this.readyState||(clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",t,e),this.writeBuffer=[],this.prevBufferLen=0)}},{key:"filterUpgrades",value:function(t){for(var e=[],n=0,r=t.length;n<r;n++)~this.transports.indexOf(t[n])&&e.push(t[n]);return e}}])&&s(e.prototype,n),u&&s(e,u),l}(l);v.priorWebsocketSuccess=!1,v.protocol=h.protocol,t.exports=v},function(t,e){try{t.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(e){t.exports=!1}},function(t,e,n){function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function o(){return(o=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function c(t,e,n){return e&&s(t.prototype,e),n&&s(t,n),t}function a(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&u(t,e)}function u(t,e){return(u=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function f(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=l(t);if(e){var o=l(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return p(this,n)}}function p(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function l(t){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var h=n(9),y=n(10),d=n(0),v=n(13).pick,b=n(2);function m(){}var g=null!=new h({xdomain:!1}).responseType,k=function(t){a(n,t);var e=f(n);function n(t){var r;if(i(this,n),r=e.call(this,t),"undefined"!=typeof location){var o="https:"===location.protocol,s=location.port;s||(s=o?443:80),r.xd="undefined"!=typeof location&&t.hostname!==location.hostname||s!==t.port,r.xs=t.secure!==o}var c=t&&t.forceBase64;return r.supportsBinary=g&&!c,r}return c(n,[{key:"request",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return o(t,{xd:this.xd,xs:this.xs},this.opts),new w(this.uri(),t)}},{key:"doWrite",value:function(t,e){var n=this.request({method:"POST",data:t}),r=this;n.on("success",e),n.on("error",(function(t){r.onError("xhr post error",t)}))}},{key:"doPoll",value:function(){var t=this.request(),e=this;t.on("data",(function(t){e.onData(t)})),t.on("error",(function(t){e.onError("xhr poll error",t)})),this.pollXhr=t}}]),n}(y),w=function(t){a(n,t);var e=f(n);function n(t,r){var o;return i(this,n),(o=e.call(this)).opts=r,o.method=r.method||"GET",o.uri=t,o.async=!1!==r.async,o.data=void 0!==r.data?r.data:null,o.create(),o}return c(n,[{key:"create",value:function(){var t=v(this.opts,"agent","enablesXDR","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized");t.xdomain=!!this.opts.xd,t.xscheme=!!this.opts.xs;var e=this.xhr=new h(t),r=this;try{e.open(this.method,this.uri,this.async);try{if(this.opts.extraHeaders)for(var o in e.setDisableHeaderCheck&&e.setDisableHeaderCheck(!0),this.opts.extraHeaders)this.opts.extraHeaders.hasOwnProperty(o)&&e.setRequestHeader(o,this.opts.extraHeaders[o])}catch(t){}if("POST"===this.method)try{e.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(t){}try{e.setRequestHeader("Accept","*/*")}catch(t){}"withCredentials"in e&&(e.withCredentials=this.opts.withCredentials),this.opts.requestTimeout&&(e.timeout=this.opts.requestTimeout),this.hasXDR()?(e.onload=function(){r.onLoad()},e.onerror=function(){r.onError(e.responseText)}):e.onreadystatechange=function(){4===e.readyState&&(200===e.status||1223===e.status?r.onLoad():setTimeout((function(){r.onError("number"==typeof e.status?e.status:0)}),0))},e.send(this.data)}catch(t){return void setTimeout((function(){r.onError(t)}),0)}"undefined"!=typeof document&&(this.index=n.requestsCount++,n.requests[this.index]=this)}},{key:"onSuccess",value:function(){this.emit("success"),this.cleanup()}},{key:"onData",value:function(t){this.emit("data",t),this.onSuccess()}},{key:"onError",value:function(t){this.emit("error",t),this.cleanup(!0)}},{key:"cleanup",value:function(t){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=m:this.xhr.onreadystatechange=m,t)try{this.xhr.abort()}catch(t){}"undefined"!=typeof document&&delete n.requests[this.index],this.xhr=null}}},{key:"onLoad",value:function(){var t=this.xhr.responseText;null!==t&&this.onData(t)}},{key:"hasXDR",value:function(){return"undefined"!=typeof XDomainRequest&&!this.xs&&this.enablesXDR}},{key:"abort",value:function(){this.cleanup()}}]),n}(d);if(w.requestsCount=0,w.requests={},"undefined"!=typeof document)if("function"==typeof attachEvent)attachEvent("onunload",_);else if("function"==typeof addEventListener){addEventListener("onpagehide"in b?"pagehide":"unload",_,!1)}function _(){for(var t in w.requests)w.requests.hasOwnProperty(t)&&w.requests[t].abort()}t.exports=k,t.exports.Request=w},function(t,e,n){var r=n(11).PACKET_TYPES,o="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Object.prototype.toString.call(Blob),i="function"==typeof ArrayBuffer,s=function(t,e){var n=new FileReader;return n.onload=function(){var t=n.result.split(",")[1];e("b"+t)},n.readAsDataURL(t)};t.exports=function(t,e,n){var c,a=t.type,u=t.data;return o&&u instanceof Blob?e?n(u):s(u,n):i&&(u instanceof ArrayBuffer||(c=u,"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(c):c&&c.buffer instanceof ArrayBuffer))?e?n(u instanceof ArrayBuffer?u:u.buffer):s(new Blob([u]),n):n(r[a]+(u||""))}},function(t,e,n){var r,o=n(11),i=o.PACKET_TYPES_REVERSE,s=o.ERROR_PACKET;"function"==typeof ArrayBuffer&&(r=n(25));var c=function(t,e){if(r){var n=r.decode(t);return a(n,e)}return{base64:!0,data:t}},a=function(t,e){switch(e){case"blob":return t instanceof ArrayBuffer?new Blob([t]):t;case"arraybuffer":default:return t}};t.exports=function(t,e){if("string"!=typeof t)return{type:"message",data:a(t,e)};var n=t.charAt(0);return"b"===n?{type:"message",data:c(t.substring(1),e)}:i[n]?t.length>1?{type:i[n],data:t.substring(1)}:{type:i[n]}:s}},function(t,e){!function(t){"use strict";e.encode=function(e){var n,r=new Uint8Array(e),o=r.length,i="";for(n=0;n<o;n+=3)i+=t[r[n]>>2],i+=t[(3&r[n])<<4|r[n+1]>>4],i+=t[(15&r[n+1])<<2|r[n+2]>>6],i+=t[63&r[n+2]];return o%3==2?i=i.substring(0,i.length-1)+"=":o%3==1&&(i=i.substring(0,i.length-2)+"=="),i},e.decode=function(e){var n,r,o,i,s,c=.75*e.length,a=e.length,u=0;"="===e[e.length-1]&&(c--,"="===e[e.length-2]&&c--);var f=new ArrayBuffer(c),p=new Uint8Array(f);for(n=0;n<a;n+=4)r=t.indexOf(e[n]),o=t.indexOf(e[n+1]),i=t.indexOf(e[n+2]),s=t.indexOf(e[n+3]),p[u++]=r<<2|o>>4,p[u++]=(15&o)<<4|i>>2,p[u++]=(3&i)<<6|63&s;return f}}("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")},function(t,e,n){function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function o(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function i(t,e,n){return(i="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=f(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}})(t,e,n||t)}function s(t,e){return(s=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function c(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=f(t);if(e){var o=f(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return a(this,n)}}function a(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?u(t):e}function u(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function f(t){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var p,l=n(10),h=n(2),y=/\n/g,d=/\\n/g,v=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&s(t,e)}(l,t);var e,n,r,a=c(l);function l(t){var e;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,l),(e=a.call(this,t)).query=e.query||{},p||(p=h.___eio=h.___eio||[]),e.index=p.length;var n=u(e);return p.push((function(t){n.onData(t)})),e.query.j=e.index,e}return e=l,(n=[{key:"doClose",value:function(){this.script&&(this.script.onerror=function(){},this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),i(f(l.prototype),"doClose",this).call(this)}},{key:"doPoll",value:function(){var t=this,e=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),e.async=!0,e.src=this.uri(),e.onerror=function(e){t.onError("jsonp poll error",e)};var n=document.getElementsByTagName("script")[0];n?n.parentNode.insertBefore(e,n):(document.head||document.body).appendChild(e),this.script=e,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout((function(){var t=document.createElement("iframe");document.body.appendChild(t),document.body.removeChild(t)}),100)}},{key:"doWrite",value:function(t,e){var n,r=this;if(!this.form){var o=document.createElement("form"),i=document.createElement("textarea"),s=this.iframeId="eio_iframe_"+this.index;o.className="socketio",o.style.position="absolute",o.style.top="-1000px",o.style.left="-1000px",o.target=s,o.method="POST",o.setAttribute("accept-charset","utf-8"),i.name="d",o.appendChild(i),document.body.appendChild(o),this.form=o,this.area=i}function c(){a(),e()}function a(){if(r.iframe)try{r.form.removeChild(r.iframe)}catch(t){r.onError("jsonp polling iframe removal error",t)}try{var t='<iframe src="javascript:0" name="'+r.iframeId+'">';n=document.createElement(t)}catch(t){(n=document.createElement("iframe")).name=r.iframeId,n.src="javascript:0"}n.id=r.iframeId,r.form.appendChild(n),r.iframe=n}this.form.action=this.uri(),a(),t=t.replace(d,"\\\n"),this.area.value=t.replace(y,"\\n");try{this.form.submit()}catch(t){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"===r.iframe.readyState&&c()}:this.iframe.onload=c}},{key:"supportsBinary",get:function(){return!1}}])&&o(e.prototype,n),r&&o(e,r),l}(l);t.exports=v},function(t,e,n){function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function o(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function i(t,e){return(i=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function s(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=a(t);if(e){var o=a(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return c(this,n)}}function c(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function a(t){return(a=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var u=n(3),f=n(1),p=n(4),l=n(12),h=n(13).pick,y=n(28),d=y.WebSocket,v=y.usingBrowserWebSocket,b=y.defaultBinaryType,m="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase(),g=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&i(t,e)}(a,t);var e,n,r,c=s(a);function a(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),(e=c.call(this,t)).supportsBinary=!t.forceBase64,e}return e=a,(n=[{key:"doOpen",value:function(){if(this.check()){var t=this.uri(),e=this.opts.protocols,n=m?{}:h(this.opts,"agent","perMessageDeflate","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","localAddress","protocolVersion","origin","maxPayload","family","checkServerIdentity");this.opts.extraHeaders&&(n.headers=this.opts.extraHeaders);try{this.ws=v&&!m?e?new d(t,e):new d(t):new d(t,e,n)}catch(t){return this.emit("error",t)}this.ws.binaryType=this.socket.binaryType||b,this.addEventListeners()}}},{key:"addEventListeners",value:function(){var t=this;this.ws.onopen=function(){t.onOpen()},this.ws.onclose=function(){t.onClose()},this.ws.onmessage=function(e){t.onData(e.data)},this.ws.onerror=function(e){t.onError("websocket error",e)}}},{key:"write",value:function(t){var e=this;this.writable=!1;for(var n=t.length,r=0,o=n;r<o;r++)!function(t){f.encodePacket(t,e.supportsBinary,(function(r){var o={};v||(t.options&&(o.compress=t.options.compress),e.opts.perMessageDeflate&&("string"==typeof r?Buffer.byteLength(r):r.length)<e.opts.perMessageDeflate.threshold&&(o.compress=!1));try{v?e.ws.send(r):e.ws.send(r,o)}catch(t){}--n||(e.emit("flush"),setTimeout((function(){e.writable=!0,e.emit("drain")}),0))}))}(t[r])}},{key:"onClose",value:function(){u.prototype.onClose.call(this)}},{key:"doClose",value:function(){void 0!==this.ws&&(this.ws.close(),this.ws=null)}},{key:"uri",value:function(){var t=this.query||{},e=this.opts.secure?"wss":"ws",n="";return this.opts.port&&("wss"===e&&443!==Number(this.opts.port)||"ws"===e&&80!==Number(this.opts.port))&&(n=":"+this.opts.port),this.opts.timestampRequests&&(t[this.opts.timestampParam]=l()),this.supportsBinary||(t.b64=1),(t=p.encode(t)).length&&(t="?"+t),e+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+n+this.opts.path+t}},{key:"check",value:function(){return!(!d||"__initialize"in d&&this.name===a.prototype.name)}},{key:"name",get:function(){return"websocket"}}])&&o(e.prototype,n),r&&o(e,r),a}(u);t.exports=g},function(t,e,n){var r=n(2);t.exports={WebSocket:r.WebSocket||r.MozWebSocket,usingBrowserWebSocket:!0,defaultBinaryType:"arraybuffer"}},function(t,e,n){"use strict";function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}Object.defineProperty(e,"__esModule",{value:!0}),e.reconstructPacket=e.deconstructPacket=void 0;var o=n(15);e.deconstructPacket=function(t){var e=[],n=t.data,i=t;return i.data=function t(e,n){if(!e)return e;if(o.isBinary(e)){var i={_placeholder:!0,num:n.length};return n.push(e),i}if(Array.isArray(e)){for(var s=new Array(e.length),c=0;c<e.length;c++)s[c]=t(e[c],n);return s}if("object"===r(e)&&!(e instanceof Date)){var a={};for(var u in e)e.hasOwnProperty(u)&&(a[u]=t(e[u],n));return a}return e}(n,e),i.attachments=e.length,{packet:i,buffers:e}},e.reconstructPacket=function(t,e){return t.data=function t(e,n){if(!e)return e;if(e&&e._placeholder)return n[e.num];if(Array.isArray(e))for(var o=0;o<e.length;o++)e[o]=t(e[o],n);else if("object"===r(e))for(var i in e)e.hasOwnProperty(i)&&(e[i]=t(e[i],n));return e}(t.data,e),t.attachments=void 0,t}},function(t,e){function n(t){t=t||{},this.ms=t.min||100,this.max=t.max||1e4,this.factor=t.factor||2,this.jitter=t.jitter>0&&t.jitter<=1?t.jitter:0,this.attempts=0}t.exports=n,n.prototype.duration=function(){var t=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var e=Math.random(),n=Math.floor(e*this.jitter*t);t=0==(1&Math.floor(10*e))?t-n:t+n}return 0|Math.min(t,this.max)},n.prototype.reset=function(){this.attempts=0},n.prototype.setMin=function(t){this.ms=t},n.prototype.setMax=function(t){this.max=t},n.prototype.setJitter=function(t){this.jitter=t}}])}));

;define('@ember-data/adapter/-private', ['exports', '@ember/debug', 'rsvp', 'require', '@ember/object/mixin', '@ember/string', 'ember-inflector'], (function (exports, debug, rsvp, require, Mixin, string, emberInflector) { 'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var require__default = /*#__PURE__*/_interopDefaultLegacy(require);
  var Mixin__default = /*#__PURE__*/_interopDefaultLegacy(Mixin);

  const newline = /\r?\n/;
  function parseResponseHeaders(headersString) {
    let headers = Object.create(null);
    if (!headersString) {
      return headers;
    }
    let headerPairs = headersString.split(newline);
    for (let i = 0; i < headerPairs.length; i++) {
      let header = headerPairs[i];
      let j = 0;
      let foundSep = false;
      for (; j < header.length; j++) {
        if (header.charCodeAt(j) === 58 /* ':' */) {
          foundSep = true;
          break;
        }
      }
      if (foundSep === false) {
        continue;
      }
      let field = header.substring(0, j).trim();
      let value = header.substring(j + 1, header.length).trim();
      if (value) {
        let lowerCasedField = field.toLowerCase();
        headers[lowerCasedField] = value;
        headers[field] = value;
      }
    }
    return headers;
  }

  function continueOnReject(promise) {
    return rsvp.resolve(promise).catch(e => e);
  }

  /*
   * Function that always attempts to parse the response as json, and if an error is thrown,
   * returns `undefined` if the response is successful and has a status code of 204 (No Content),
   * or 205 (Reset Content) or if the request method was 'HEAD', and the plain payload otherwise.
   */
  function _determineContent(response, requestData, payload) {
    let ret = payload;
    let error = null;
    if (!response.ok) {
      return payload;
    }
    let status = response.status;
    let payloadIsEmpty = payload === '' || payload === null;
    let statusIndicatesEmptyResponse = status === 204 || status === 205 || requestData.method === 'HEAD';
    {
      if (payloadIsEmpty && !statusIndicatesEmptyResponse) {
        let message = `The server returned an empty string for ${requestData.method} ${requestData.url}, which cannot be parsed into a valid JSON. Return either null or {}.`;
        if (payload === '') {
          (debug.warn(message, {
            id: 'ds.adapter.returned-empty-string-as-JSON'
          }));
        }
      }
    }
    if (response.ok && (statusIndicatesEmptyResponse || payloadIsEmpty)) {
      return;
    }
    try {
      ret = JSON.parse(payload);
    } catch (e) {
      if (!(e instanceof SyntaxError)) {
        return e;
      }
      e.payload = payload;
      error = e;
    }
    if (error) {
      {
        // eslint-disable-next-line no-console
        console.warn('This response was unable to be parsed as json.', payload);
      }
      return error;
    }
    return ret;
  }
  function determineBodyPromise(response, requestData) {
    // response.text() may resolve or reject
    // it is a native promise, may not have finally
    return continueOnReject(response.text()).then(payload => _determineContent(response, requestData, payload));
  }

  const RBRACKET = /\[\]$/;
  function isPlainObject(obj) {
    return Object.prototype.toString.call(obj) === '[object Object]';
  }

  /*
   * Helper function that turns the data/body of a request into a query param string.
   * This is directly copied from jQuery.param.
   */
  function serializeQueryParams(queryParamsObject) {
    let s = [];
    function buildParams(prefix, obj) {
      let i, len, key;
      if (prefix) {
        if (Array.isArray(obj)) {
          for (i = 0, len = obj.length; i < len; i++) {
            if (RBRACKET.test(prefix)) {
              add(s, prefix, obj[i]);
            } else {
              buildParams(prefix + '[' + (typeof obj[i] === 'object' ? i : '') + ']', obj[i]);
            }
          }
        } else if (isPlainObject(obj)) {
          for (key in obj) {
            buildParams(prefix + '[' + key + ']', obj[key]);
          }
        } else {
          add(s, prefix, obj);
        }
      } else if (Array.isArray(obj)) {
        for (i = 0, len = obj.length; i < len; i++) {
          add(s, obj[i].name, obj[i].value);
        }
      } else {
        for (key in obj) {
          buildParams(key, obj[key]);
        }
      }
      return s;
    }
    return buildParams('', queryParamsObject).join('&');
  }

  /*
   * Part of the `serializeQueryParams` helper function.
   */
  function add(s, k, v) {
    // Strip out keys with undefined value and replace null values with
    // empty strings (mimics jQuery.ajax)
    if (v === undefined) {
      return;
    } else if (v === null) {
      v = '';
    }
    v = typeof v === 'function' ? v() : v;
    s[s.length] = `${encodeURIComponent(k)}=${encodeURIComponent(v)}`;
  }

  let _fetch = null;
  function getFetchFunction() {
    if (_fetch !== null) {
      return _fetch();
    }
    if (require.has('fetch')) {
      // use `fetch` module by default, this is commonly provided by ember-fetch
      let fetchFn = require__default["default"]('fetch').default;
      _fetch = () => fetchFn;
    } else if (typeof fetch === 'function') {
      // fallback to using global fetch
      _fetch = () => fetch;
    } else {
      throw new Error('cannot find the `fetch` module or the `fetch` global. Did you mean to install the `ember-fetch` addon?');
    }
    return _fetch();
  }

  /**
    @module @ember-data/adapter
  */

  /*
   The structure of this file is such because typing Mixins is hard. Here we've structured it in
   such a way as to maximize the type information that a consumer can utilize. There are simpler
   ways to type a mixin but we would not be able to provide the nice overload signature for buildURL
  */
  // the interface must fully declare the function signatures that the individual functions
  // will also declare. If instead we try to keep them in sync by doing something like
  // `interface BuildURLMixin { buildURL: typeof buildURL }`
  // then an extending class overwriting one of the methods will break because typescript
  // thinks it is a switch from an instance prop (that is a method) to an instance method.
  // prevents the final constructed object from needing to add
  // host and namespace which are provided by the final consuming
  // class to the prototype which can result in overwrite errors
  /**
    ## Using BuildURLMixin

    To use URL building, include the mixin when extending an adapter, and call `buildURL` where needed.
    The default behaviour is designed for RESTAdapter.

    ### Example

    ```javascript
    import Adapter, { BuildURLMixin } from '@ember-data/adapter';

    export default class ApplicationAdapter extends Adapter.extend(BuildURLMixin) {
      findRecord(store, type, id, snapshot) {
        var url = this.buildURL(type.modelName, id, snapshot, 'findRecord');
        return this.ajax(url, 'GET');
      }
    }
    ```

    ### Attributes

    The `host` and `namespace` attributes will be used if defined, and are optional.

    @class BuildURLMixin
    @public
  */
  /**
      Builds a URL for a given type and optional ID.

      By default, it pluralizes the type's name (for example, 'post'
      becomes 'posts' and 'person' becomes 'people'). To override the
      pluralization see [pathForType](./pathForType?anchor=pathForType).

      If an ID is specified, it adds the ID to the path generated
      for the type, separated by a `/`.

      When called by `RESTAdapter.findMany()` the `id` and `snapshot` parameters
      will be arrays of ids and snapshots.

      @method buildURL
      @public
      @param {String} modelName
      @param {(String|Array|Object)} id single id or array of ids or query
      @param {(Snapshot|SnapshotRecordArray)} snapshot single snapshot or array of snapshots
      @param {String} requestType
      @param {Object} query object of query parameters to send for query requests.
      @return {String} url
    */
  function buildURL(modelName, id, snapshot, requestType, query) {
    /*
        Switch statements in typescript don't currently narrow even when the function is implemented
        with overloads.
         We still extract this to stand alone so that we can provide nice overloads for calling signatures,
        but we will still require all of this casting (or a ridiculous number of assertsthat narrow it down
        for us).
    */
    switch (requestType) {
      case 'findRecord':
        return this.urlForFindRecord(id, modelName, snapshot);
      case 'findAll':
        return this.urlForFindAll(modelName, snapshot);
      case 'query':
        return this.urlForQuery(query || {}, modelName);
      case 'queryRecord':
        return this.urlForQueryRecord(query || {}, modelName);
      case 'findMany':
        return this.urlForFindMany(id, modelName, snapshot);
      case 'findHasMany':
        return this.urlForFindHasMany(id, modelName, snapshot);
      case 'findBelongsTo':
        return this.urlForFindBelongsTo(id, modelName, snapshot);
      case 'createRecord':
        return this.urlForCreateRecord(modelName, snapshot);
      case 'updateRecord':
        return this.urlForUpdateRecord(id, modelName, snapshot);
      case 'deleteRecord':
        return this.urlForDeleteRecord(id, modelName, snapshot);
      default:
        // this is the 'never' case but someone may call `buildURL` manually so
        // we try to do something for them.
        return this._buildURL(modelName, id);
    }
  }

  /**
      @method _buildURL
      @private
      @param {String} modelName
      @param {String} id
      @return {String} url
    */
  function _buildURL(modelName, id) {
    let path;
    let url = [];
    let {
      host
    } = this;
    let prefix = this.urlPrefix();
    if (modelName) {
      path = this.pathForType(modelName);
      if (path) {
        url.push(path);
      }
    }
    if (id) {
      url.push(encodeURIComponent(id));
    }
    if (prefix) {
      url.unshift(prefix);
    }
    let urlString = url.join('/');
    if (!host && urlString && urlString.charAt(0) !== '/') {
      urlString = '/' + urlString;
    }
    return urlString;
  }

  /**
     Builds a URL for a `store.findRecord(type, id)` call.

     Example:

     ```app/adapters/user.js
     import JSONAPIAdapter from '@ember-data/adapter/json-api';

     export default class ApplicationAdapter extends JSONAPIAdapter {
       urlForFindRecord(id, modelName, snapshot) {
         let baseUrl = this.buildURL(modelName, id, snapshot);
         return `${baseUrl}/users/${snapshot.adapterOptions.user_id}/playlists/${id}`;
       }
     }
     ```

     @method urlForFindRecord
     @public
     @param {String} id
     @param {String} modelName
     @param {Snapshot} snapshot
     @return {String} url

     */
  function urlForFindRecord(id, modelName, snapshot) {
    return this._buildURL(modelName, id);
  }

  /**
     Builds a URL for a `store.findAll(type)` call.

     Example:

     ```app/adapters/comment.js
     import JSONAPIAdapter from '@ember-data/adapter/json-api';

     export default class ApplicationAdapter extends JSONAPIAdapter {
       urlForFindAll(modelName, snapshot) {
         let baseUrl = this.buildURL(modelName);
         return `${baseUrl}/data/comments.json`;
       }
     }
     ```

     @method urlForFindAll
      @public
     @param {String} modelName
     @param {SnapshotRecordArray} snapshot
     @return {String} url
     */
  function urlForFindAll(modelName, snapshots) {
    return this._buildURL(modelName);
  }

  /**
     Builds a URL for a `store.query(type, query)` call.

     Example:

     ```app/adapters/application.js
     import RESTAdapter from '@ember-data/adapter/rest';

     export default class ApplicationAdapter extends RESTAdapter {
       host = 'https://api.github.com';
       urlForQuery (query, modelName) {
         switch(modelName) {
           case 'repo':
             return `https://api.github.com/orgs/${query.orgId}/repos`;
           default:
             return super.urlForQuery(...arguments);
         }
       }
     }
     ```

     @method urlForQuery
      @public
     @param {Object} query
     @param {String} modelName
     @return {String} url
     */
  function urlForQuery(query, modelName) {
    return this._buildURL(modelName);
  }

  /**
     Builds a URL for a `store.queryRecord(type, query)` call.

     Example:

     ```app/adapters/application.js
     import RESTAdapter from '@ember-data/adapter/rest';

     export default class ApplicationAdapter extends RESTAdapter {
       urlForQueryRecord({ slug }, modelName) {
         let baseUrl = this.buildURL();
         return `${baseUrl}/${encodeURIComponent(slug)}`;
       }
     }
     ```

     @method urlForQueryRecord
      @public
     @param {Object} query
     @param {String} modelName
     @return {String} url
     */
  function urlForQueryRecord(query, modelName) {
    return this._buildURL(modelName);
  }

  /**
     Builds a URL for coalescing multiple `store.findRecord(type, id)`
     records into 1 request when the adapter's `coalesceFindRequests`
     property is `true`.

     Example:

     ```app/adapters/application.js
     import RESTAdapter from '@ember-data/adapter/rest';

     export default class ApplicationAdapter extends RESTAdapter {
       urlForFindMany(ids, modelName) {
         let baseUrl = this.buildURL();
         return `${baseUrl}/coalesce`;
       }
     }
     ```

     @method urlForFindMany
      @public
     @param {Array} ids
     @param {String} modelName
     @param {Array} snapshots
     @return {String} url
     */
  function urlForFindMany(ids, modelName, snapshots) {
    return this._buildURL(modelName);
  }

  /**
     Builds a URL for fetching an async `hasMany` relationship when a URL
     is not provided by the server.

     Example:

     ```app/adapters/application.js
     import JSONAPIAdapter from '@ember-data/adapter/json-api';

     export default class ApplicationAdapter extends JSONAPIAdapter {
       urlForFindHasMany(id, modelName, snapshot) {
         let baseUrl = this.buildURL(modelName, id);
         return `${baseUrl}/relationships`;
       }
     }
     ```

     @method urlForFindHasMany
      @public
     @param {String} id
     @param {String} modelName
     @param {Snapshot} snapshot
     @return {String} url
     */
  function urlForFindHasMany(id, modelName, snapshot) {
    return this._buildURL(modelName, id);
  }

  /**
     Builds a URL for fetching an async `belongsTo` relationship when a url
     is not provided by the server.

     Example:

     ```app/adapters/application.js
     import JSONAPIAdapter from '@ember-data/adapter/json-api';

     export default class ApplicationAdapter extends JSONAPIAdapter {
       urlForFindBelongsTo(id, modelName, snapshot) {
         let baseUrl = this.buildURL(modelName, id);
         return `${baseUrl}/relationships`;
       }
     }
     ```

     @method urlForFindBelongsTo
      @public
     @param {String} id
     @param {String} modelName
     @param {Snapshot} snapshot
     @return {String} url
     */
  function urlForFindBelongsTo(id, modelName, snapshot) {
    return this._buildURL(modelName, id);
  }

  /**
     Builds a URL for a `record.save()` call when the record was created
     locally using `store.createRecord()`.

     Example:

     ```app/adapters/application.js
     import RESTAdapter from '@ember-data/adapter/rest';

     export default class ApplicationAdapter extends RESTAdapter {
       urlForCreateRecord(modelName, snapshot) {
         return super.urlForCreateRecord(...arguments) + '/new';
       }
     }
     ```

     @method urlForCreateRecord
      @public
     @param {String} modelName
     @param {Snapshot} snapshot
     @return {String} url
     */
  function urlForCreateRecord(modelName, snapshot) {
    return this._buildURL(modelName);
  }

  /**
     Builds a URL for a `record.save()` call when the record has been updated locally.

     Example:

     ```app/adapters/application.js
     import RESTAdapter from '@ember-data/adapter/rest';

     export default class ApplicationAdapter extends RESTAdapter {
       urlForUpdateRecord(id, modelName, snapshot) {
         return `/${id}/feed?access_token=${snapshot.adapterOptions.token}`;
       }
     }
     ```

     @method urlForUpdateRecord
      @public
     @param {String} id
     @param {String} modelName
     @param {Snapshot} snapshot
     @return {String} url
     */
  function urlForUpdateRecord(id, modelName, snapshot) {
    return this._buildURL(modelName, id);
  }

  /**
     Builds a URL for a `record.save()` call when the record has been deleted locally.

     Example:

     ```app/adapters/application.js
     import RESTAdapter from '@ember-data/adapter/rest';

     export default class ApplicationAdapter extends RESTAdapter {
       urlForDeleteRecord(id, modelName, snapshot) {
         return super.urlForDeleteRecord(...arguments) + '/destroy';
       }
     }
     ```

     @method urlForDeleteRecord
      @public
     @param {String} id
     @param {String} modelName
     @param {Snapshot} snapshot
     @return {String} url
     */
  function urlForDeleteRecord(id, modelName, snapshot) {
    return this._buildURL(modelName, id);
  }

  /**
      @method urlPrefix
      @private
      @param {String} path
      @param {String} parentURL
      @return {String} urlPrefix
    */
  function urlPrefix(path, parentURL) {
    let {
      host,
      namespace
    } = this;
    if (!host || host === '/') {
      host = '';
    }
    if (path) {
      // Protocol relative url
      if (/^\/\//.test(path) || /http(s)?:\/\//.test(path)) {
        // Do nothing, the full host is already included.
        return path;

        // Absolute path
      } else if (path.charAt(0) === '/') {
        return `${host}${path}`;
        // Relative path
      } else {
        return `${parentURL}/${path}`;
      }
    }

    // No path provided
    let url = [];
    if (host) {
      url.push(host);
    }
    if (namespace) {
      url.push(namespace);
    }
    return url.join('/');
  }

  /**
      Determines the pathname for a given type.

      By default, it pluralizes the type's name (for example,
      'post' becomes 'posts' and 'person' becomes 'people').

      ### Pathname customization

      For example, if you have an object `LineItem` with an
      endpoint of `/line_items/`.

      ```app/adapters/application.js
      import RESTAdapter from '@ember-data/adapter/rest';
      import { decamelize } from '@ember/string';
      import { pluralize } from 'ember-inflector';

      export default class ApplicationAdapter extends RESTAdapter {
        pathForType(modelName) {
          var decamelized = decamelize(modelName);
          return pluralize(decamelized);
        }
      }
      ```

      @method pathForType
      @public
      @param {String} modelName
      @return {String} path
    **/
  function pathForType(modelName) {
    let camelized = string.camelize(modelName);
    return emberInflector.pluralize(camelized);
  }

  // we build it this way vs casting to BuildURLMixin so that any
  // changes to the interface surface as errors here.
  const mixinProps = {
    buildURL,
    _buildURL,
    urlForFindRecord,
    urlForFindAll,
    urlForQueryRecord,
    urlForQuery,
    urlForFindMany,
    urlForFindHasMany,
    urlForFindBelongsTo,
    urlForCreateRecord,
    urlForDeleteRecord,
    urlForUpdateRecord,
    urlPrefix,
    pathForType
  };
  var buildUrlMixin = Mixin__default["default"].create(mixinProps);

  function serializeIntoHash(store, modelClass, snapshot, options = {
    includeId: true
  }) {
    const serializer = store.serializerFor(modelClass.modelName);
    if (typeof serializer.serializeIntoHash === 'function') {
      const data = {};
      serializer.serializeIntoHash(data, modelClass, snapshot, options);
      return data;
    }
    return serializer.serialize(snapshot, options);
  }

  exports.BuildURLMixin = buildUrlMixin;
  exports.determineBodyPromise = determineBodyPromise;
  exports.fetch = getFetchFunction;
  exports.parseResponseHeaders = parseResponseHeaders;
  exports.serializeIntoHash = serializeIntoHash;
  exports.serializeQueryParams = serializeQueryParams;

  Object.defineProperty(exports, '__esModule', { value: true });

}));

;define("@ember-data/adapter/error", ["exports", "@ember/debug", "@ember/error", "@ember-data/store/-private"], function (_exports, _debug, _error, _private) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports.UnauthorizedError = _exports.TimeoutError = _exports.ServerError = _exports.NotFoundError = _exports.InvalidError = _exports.ForbiddenError = _exports.ConflictError = _exports.AbortError = void 0;
  Object.defineProperty(_exports, "errorsArrayToHash", {
    enumerable: true,
    get: function () {
      return _private.errorsArrayToHash;
    }
  });
  Object.defineProperty(_exports, "errorsHashToArray", {
    enumerable: true,
    get: function () {
      return _private.errorsHashToArray;
    }
  });
  0; //eaimeta@70e063a35619d71f0,"@ember/debug",0,"@ember/error",0,"@ember-data/store/-private"eaimeta@70e063a35619d71f
  /**
    @module @ember-data/adapter/error
   */
  /**
    A `AdapterError` is used by an adapter to signal that an error occurred
    during a request to an external API. It indicates a generic error, and
    subclasses are used to indicate specific error states. The following
    subclasses are provided:
  
    - `InvalidError`
    - `TimeoutError`
    - `AbortError`
    - `UnauthorizedError`
    - `ForbiddenError`
    - `NotFoundError`
    - `ConflictError`
    - `ServerError`
  
    To create a custom error to signal a specific error state in communicating
    with an external API, extend the `AdapterError`. For example, if the
    external API exclusively used HTTP `503 Service Unavailable` to indicate
    it was closed for maintenance:
  
    ```app/adapters/maintenance-error.js
    import AdapterError from '@ember-data/adapter/error';
  
    export default AdapterError.extend({ message: "Down for maintenance." });
    ```
  
    This error would then be returned by an adapter's `handleResponse` method:
  
    ```app/adapters/application.js
    import JSONAPIAdapter from '@ember-data/adapter/json-api';
    import MaintenanceError from './maintenance-error';
  
    export default class ApplicationAdapter extends JSONAPIAdapter {
      handleResponse(status) {
        if (503 === status) {
          return new MaintenanceError();
        }
  
        return super.handleResponse(...arguments);
      }
    }
    ```
  
    And can then be detected in an application and used to send the user to an
    `under-maintenance` route:
  
    ```app/routes/application.js
    import Route from '@ember/routing/route';
    import MaintenanceError from '../adapters/maintenance-error';
  
    export default class ApplicationRoute extends Route {
      actions: {
        error(error, transition) {
          if (error instanceof MaintenanceError) {
            this.transitionTo('under-maintenance');
            return;
          }
  
          // ...other error handling logic
        }
      }
    }
    ```
  
    @main @ember-data/adapter/error
    @class AdapterError
    @public
  */
  function AdapterError(errors, message = 'Adapter operation failed') {
    this.isAdapterError = true;
    let error = _error.default.call(this, message);

    // in ember 3.8+ Error is a Native Error and we don't
    // gain these automatically from the EmberError.call
    if (error) {
      this.stack = error.stack;
      this.description = error.description;
      this.fileName = error.fileName;
      this.lineNumber = error.lineNumber;
      this.message = error.message;
      this.name = error.name;
      this.number = error.number;
    }
    this.errors = errors || [{
      title: 'Adapter Error',
      detail: message
    }];
  }
  var _default = _exports.default = AdapterError;
  function extendFn(ErrorClass) {
    return function ({
      message: defaultMessage
    } = {}) {
      return extend(ErrorClass, defaultMessage);
    };
  }
  function extend(ParentErrorClass, defaultMessage) {
    let ErrorClass = function (errors, message) {
      (true && !(Array.isArray(errors || [])) && (0, _debug.assert)('`AdapterError` expects json-api formatted errors array.', Array.isArray(errors || [])));
      ParentErrorClass.call(this, errors, message || defaultMessage);
    };
    ErrorClass.prototype = Object.create(ParentErrorClass.prototype);
    ErrorClass.extend = extendFn(ErrorClass);
    return ErrorClass;
  }
  AdapterError.prototype = Object.create(_error.default.prototype);
  AdapterError.prototype.code = 'AdapterError';
  AdapterError.extend = extendFn(AdapterError);

  /**
    A `InvalidError` is used by an adapter to signal the external API
    was unable to process a request because the content was not
    semantically correct or meaningful per the API. Usually, this means a
    record failed some form of server-side validation. When a promise
    from an adapter is rejected with a `InvalidError` the record will
    transition to the `invalid` state and the errors will be set to the
    `errors` property on the record.
  
    For Ember Data to correctly map errors to their corresponding
    properties on the model, Ember Data expects each error to be
    a valid JSON-API error object with a `source/pointer` that matches
    the property name. For example, if you had a Post model that
    looked like this.
  
    ```app/models/post.js
    import Model, { attr } from '@ember-data/model';
  
    export default class PostModel extends Model {
      @attr('string') title;
      @attr('string') content;
    }
    ```
  
    To show an error from the server related to the `title` and
    `content` properties your adapter could return a promise that
    rejects with a `InvalidError` object that looks like this:
  
    ```app/adapters/post.js
    import RSVP from 'RSVP';
    import RESTAdapter from '@ember-data/adapter/rest';
    import { InvalidError } from '@ember-data/adapter/error';
  
    export default class ApplicationAdapter extends RESTAdapter {
      updateRecord() {
        // Fictional adapter that always rejects
        return RSVP.reject(new InvalidError([
          {
            detail: 'Must be unique',
            source: { pointer: '/data/attributes/title' }
          },
          {
            detail: 'Must not be blank',
            source: { pointer: '/data/attributes/content'}
          }
        ]));
      }
    }
    ```
  
    Your backend may use different property names for your records the
    store will attempt to extract and normalize the errors using the
    serializer's `extractErrors` method before the errors get added to
    the model. As a result, it is safe for the `InvalidError` to
    wrap the error payload unaltered.
  
    @class InvalidError
    @public
    @extends AdapterError
  */
  const InvalidError = _exports.InvalidError = extend(AdapterError, 'The adapter rejected the commit because it was invalid');
  InvalidError.prototype.code = 'InvalidError';

  /**
    A `TimeoutError` is used by an adapter to signal that a request
    to the external API has timed out. I.e. no response was received from
    the external API within an allowed time period.
  
    An example use case would be to warn the user to check their internet
    connection if an adapter operation has timed out:
  
    ```app/routes/application.js
    import Route from '@ember/routing/route';
    import { TimeoutError } from '@ember-data/adapter/error';
    import { action } from '@ember/object';
  
    export default class ApplicationRoute extends Route {
      @action
      error(error, transition) {
        if (error instanceof TimeoutError) {
          // alert the user
          alert('Are you still connected to the Internet?');
          return;
        }
  
        // ...other error handling logic
      }
    }
    ```
  
    @class TimeoutError
    @public
    @extends AdapterError
  */
  const TimeoutError = _exports.TimeoutError = extend(AdapterError, 'The adapter operation timed out');
  TimeoutError.prototype.code = 'TimeoutError';

  /**
    A `AbortError` is used by an adapter to signal that a request to
    the external API was aborted. For example, this can occur if the user
    navigates away from the current page after a request to the external API
    has been initiated but before a response has been received.
  
    @class AbortError
    @public
    @extends AdapterError
  */
  const AbortError = _exports.AbortError = extend(AdapterError, 'The adapter operation was aborted');
  AbortError.prototype.code = 'AbortError';

  /**
    A `UnauthorizedError` equates to a HTTP `401 Unauthorized` response
    status. It is used by an adapter to signal that a request to the external
    API was rejected because authorization is required and has failed or has not
    yet been provided.
  
    An example use case would be to redirect the user to a login route if a
    request is unauthorized:
  
    ```app/routes/application.js
    import Route from '@ember/routing/route';
    import { UnauthorizedError } from '@ember-data/adapter/error';
    import { action } from '@ember/object';
  
    export default class ApplicationRoute extends Route {
      @action
      error(error, transition) {
        if (error instanceof UnauthorizedError) {
          // go to the login route
          this.transitionTo('login');
          return;
        }
  
        // ...other error handling logic
      }
    }
    ```
  
    @class UnauthorizedError
    @public
    @extends AdapterError
  */
  const UnauthorizedError = _exports.UnauthorizedError = extend(AdapterError, 'The adapter operation is unauthorized');
  UnauthorizedError.prototype.code = 'UnauthorizedError';

  /**
    A `ForbiddenError` equates to a HTTP `403 Forbidden` response status.
    It is used by an adapter to signal that a request to the external API was
    valid but the server is refusing to respond to it. If authorization was
    provided and is valid, then the authenticated user does not have the
    necessary permissions for the request.
  
    @class ForbiddenError
    @public
    @extends AdapterError
  */
  const ForbiddenError = _exports.ForbiddenError = extend(AdapterError, 'The adapter operation is forbidden');
  ForbiddenError.prototype.code = 'ForbiddenError';

  /**
    A `NotFoundError` equates to a HTTP `404 Not Found` response status.
    It is used by an adapter to signal that a request to the external API
    was rejected because the resource could not be found on the API.
  
    An example use case would be to detect if the user has entered a route
    for a specific model that does not exist. For example:
  
    ```app/routes/post.js
    import Route from '@ember/routing/route';
    import { NotFoundError } from '@ember-data/adapter/error';
    import { inject as service } from '@ember/service';
    import { action } from '@ember/object';
  
    export default class PostRoute extends Route {
      @service store;
      model(params) {
        return this.get('store').findRecord('post', params.post_id);
      }
      @action
      error(error, transition) {
        if (error instanceof NotFoundError) {
          // redirect to a list of all posts instead
          this.transitionTo('posts');
        } else {
          // otherwise let the error bubble
          return true;
        }
      }
    }
    ```
  
    @class NotFoundError
    @public
    @extends AdapterError
  */
  const NotFoundError = _exports.NotFoundError = extend(AdapterError, 'The adapter could not find the resource');
  NotFoundError.prototype.code = 'NotFoundError';

  /**
    A `ConflictError` equates to a HTTP `409 Conflict` response status.
    It is used by an adapter to indicate that the request could not be processed
    because of a conflict in the request. An example scenario would be when
    creating a record with a client-generated ID but that ID is already known
    to the external API.
  
    @class ConflictError
    @public
    @extends AdapterError
  */
  const ConflictError = _exports.ConflictError = extend(AdapterError, 'The adapter operation failed due to a conflict');
  ConflictError.prototype.code = 'ConflictError';

  /**
    A `ServerError` equates to a HTTP `500 Internal Server Error` response
    status. It is used by the adapter to indicate that a request has failed
    because of an error in the external API.
  
    @class ServerError
    @public
    @extends AdapterError
  */
  const ServerError = _exports.ServerError = extend(AdapterError, 'The adapter operation failed due to a server error');
  ServerError.prototype.code = 'ServerError';
});
;define("@ember-data/adapter/index", ["exports", "@ember/object", "rsvp", "@ember-data/adapter/-private"], function (_exports, _object, _rsvp, _private) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "BuildURLMixin", {
    enumerable: true,
    get: function () {
      return _private.BuildURLMixin;
    }
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"@ember/object",0,"@glimmer/env",0,"rsvp",0,"@ember-data/adapter/-private"eaimeta@70e063a35619d71f
  /**
    ## Overview
  
    In order to properly fetch and update data, EmberData
    needs to understand how to connect to your API.
  
    `Adapters` accept various kinds of requests from the store
    and manage fulfillment of the request from your API.
  
    ### Request Flow
  
    When the store decides it needs to issue a request it uses the
    following flow to manage the request and process the data.
  
    - find the appropriate adapter
    - issue the request to the adapter
    - await the adapter's response
      - if an error occurs reject with the error
      - if no error
        - if there is response data
          - pass the response data to the appropriate serializer
          - update the cache using the JSON:API formatted data from the serializer's response
        - return the primary record(s) associated with the request
  
    ### Request Errors
  
    When a request errors and your adapter does not have the ability to recover from the error,
    you may either reject the promise returned by your adapter method with the error or simply
    throw the error.
  
    If the request was for a `createRecord` `updateRecord` or `deleteRecord` special rules
    apply to how this error will affect the state of the store and additional properties on
    the `Error` class may be used. See the documentation for these methods in the
    `MinimumAdapterInterface` for more information.
  
    ### Implementing an Adapter
  
    There are seven required adapter methods, one for each of
    the primary request types that EmberData issues.
  
    They are:
  
    - findRecord
    - findAll
    - queryRecord
    - query
    - createRecord
    - updateRecord
    - deleteRecord
  
    Each of these request types has a matching store method that triggers it
    and matching `requestType` that is passed to the serializer's
    `normalizeResponse` method.
  
    If your app only reads data but never writes data, it is not necessary
    to implement the methods for create, update, and delete. This extends to
    all of the store's find methods with the exception of `findRecord` (`findAll`,
    `query`, `queryRecord`): if you do not use the store method in your app then
    your Adapter does not need the method.
  
    ```ts
    import EmberObject from '@ember/object';
  
    async function fetchData(url, options = {}) {
      let response = await fetch(url, options);
      return response.toJSON();
    }
  
    export default class ApplicationAdapter extends EmberObject {
      findRecord(_, { modelName }, id) {
        return fetchData(`./${modelName}s/${id}`);
      }
    }
    ```
  
    ### Adapter Resolution
  
    `store.adapterFor(name)` will lookup adapters defined in `app/adapters/` and
    return an instance.
  
    `adapterFor` first attempts to find an adapter with an exact match on `name`,
    then falls back to checking for the presence of an adapter named `application`.
  
    If no adapter is found, an error will be thrown.
  
    ```ts
    store.adapterFor('author');
  
    // lookup paths (in order) =>
    //   app/adapters/author.js
    //   app/adapters/application.js
    ```
  
    Most requests in EmberData are made with respect to a particular `type` (or `modelName`)
    (e.g., "get me the full collection of **books**" or "get me the **employee** whose id is 37"). We
    refer to this as the **primary** resource `type`.
  
    `adapterFor` is used by the store to find an adapter with a name matching that of the primary
    resource `type` for the request, which then falls back to the `application` adapter.
  
    It is recommended that applications define only a single `application` adapter and serializer
    where possible, only implementing an adapter specific to the `type` when absolutely necessary.
  
    If you need to support multiple API versions for the same type, the per-type strategy for
    defining adapters might not be adequate.
  
    If you have multiple APIs or multiple API versions and the single application adapter and per-type
    strategy does not suite your needs, one strategy is to write an `application` adapter and serializer
    that make use of `options` to specify the desired format when making a request, then forwards to the
    request to the desired adapter or serializer as needed.
  
    ```app/adapters/application.js
    export default class Adapter extends EmberObject {
      findRecord(store, schema, id, snapshot) {
        let { apiVersion } = snapshot.adapterOptions;
        return this.adapterFor(`-api-${apiVersion}`).findRecord(store, schema, id, snapshot);
      }
    }
    ```
  
    ### Using an Adapter
  
    Any adapter in `app/adapters/` can be looked up by `name` using `store.adapterFor(name)`.
  
    ### Default Adapters
  
    Applications whose API's structure endpoint URLs *very close to* or *exactly* the **REST**
    or **JSON:API** convention, the `@ember-data/adapter` package contains implementations
    these applications can extend.
  
    Many applications will find writing their own adapter to be allow greater flexibility,
    customization, and maintenance than attempting to override methods in these adapters.
  
    @module @ember-data/adapter
    @main @ember-data/adapter
  */
  /**
    An adapter is an object that receives requests from a store and
    translates them into the appropriate action to take against your
    persistence layer. The persistence layer is usually an HTTP API but
    may be anything, such as the browser's local storage. Typically the
    adapter is not invoked directly instead its functionality is accessed
    through the `store`.
  
    ### Creating an Adapter
  
    Create a new subclass of `Adapter` in the `app/adapters` folder:
  
    ```app/adapters/application.js
    import Adapter from '@ember-data/adapter';
  
    export default Adapter.extend({
      // ...your code here
    });
    ```
  
    Model-specific adapters can be created by putting your adapter
    class in an `app/adapters/` + `model-name` + `.js` file of the application.
  
    ```app/adapters/post.js
    import Adapter from '@ember-data/adapter';
  
    export default Adapter.extend({
      // ...Post-specific adapter code goes here
    });
    ```
  
    `Adapter` is an abstract base class that you should override in your
    application to customize it for your backend. The minimum set of methods
    that you should implement is:
  
      * `findRecord()`
      * `createRecord()`
      * `updateRecord()`
      * `deleteRecord()`
      * `findAll()`
      * `query()`
  
    To improve the network performance of your application, you can optimize
    your adapter by overriding these lower-level methods:
  
      * `findMany()`
  
  
    For an example of the implementation, see `RESTAdapter`, the
    included REST adapter.
  
    @class Adapter
    @public
    @extends Ember.EmberObject
  */
  class Adapter extends _object.default {
    /**
      The `findRecord()` method is invoked when the store is asked for a record that
      has not previously been loaded. In response to `findRecord()` being called, you
      should query your persistence layer for a record with the given ID. The `findRecord`
      method should return a promise that will resolve to a JavaScript object that will be
      normalized by the serializer.
       Here is an example of the `findRecord` implementation:
       ```app/adapters/application.js
      import Adapter from '@ember-data/adapter';
      import RSVP from 'RSVP';
      import $ from 'jquery';
       export default class ApplicationAdapter extends Adapter {
        findRecord(store, type, id, snapshot) {
          return new RSVP.Promise(function(resolve, reject) {
            $.getJSON(`/${type.modelName}/${id}`).then(function(data) {
              resolve(data);
            }, function(jqXHR) {
              reject(jqXHR);
            });
          });
        }
      }
      ```
       @method findRecord
      @param {Store} store
      @param {Model} type
      @param {String} id
      @param {Snapshot} snapshot
      @return {Promise} promise
      @public
    */
    findRecord(store, type, id, snapshot) {
      if (true /* DEBUG */) {
        throw new Error('You subclassed the Adapter class but missing a findRecord override');
      }
      return _rsvp.Promise.resolve();
    }

    /**
      The `findAll()` method is used to retrieve all records for a given type.
       Example
       ```app/adapters/application.js
      import Adapter from '@ember-data/adapter';
      import RSVP from 'RSVP';
      import $ from 'jquery';
       export default class ApplicationAdapter extends Adapter {
        findAll(store, type) {
          return new RSVP.Promise(function(resolve, reject) {
            $.getJSON(`/${type.modelName}`).then(function(data) {
              resolve(data);
            }, function(jqXHR) {
              reject(jqXHR);
            });
          });
        }
      }
      ```
       @method findAll
      @param {Store} store
      @param {Model} type
      @param {undefined} neverSet a value is never provided to this argument
      @param {SnapshotRecordArray} snapshotRecordArray
      @return {Promise} promise
      @public
    */
    findAll(store, type, neverSet, snapshotRecordArray) {
      if (true /* DEBUG */) {
        throw new Error('You subclassed the Adapter class but missing a findAll override');
      }
      return _rsvp.Promise.resolve();
    }

    /**
      This method is called when you call `query` on the store.
       Example
       ```app/adapters/application.js
      import Adapter from '@ember-data/adapter';
      import RSVP from 'RSVP';
      import $ from 'jquery';
       export default class ApplicationAdapter extends Adapter {
        query(store, type, query) {
          return new RSVP.Promise(function(resolve, reject) {
            $.getJSON(`/${type.modelName}`, query).then(function(data) {
              resolve(data);
            }, function(jqXHR) {
              reject(jqXHR);
            });
          });
        }
      }
      ```
       @method query
      @param {Store} store
      @param {Model} type
      @param {Object} query
      @param {AdapterPopulatedRecordArray} recordArray
      @param {Object} adapterOptions
      @return {Promise} promise
      @public
    */
    query(store, type, query) {
      if (true /* DEBUG */) {
        throw new Error('You subclassed the Adapter class but missing a query override');
      }
      return _rsvp.Promise.resolve();
    }

    /**
      The `queryRecord()` method is invoked when the store is asked for a single
      record through a query object.
       In response to `queryRecord()` being called, you should always fetch fresh
      data. Once found, you can asynchronously call the store's `push()` method
      to push the record into the store.
       Here is an example `queryRecord` implementation:
       Example
       ```app/adapters/application.js
      import Adapter, { BuildURLMixin } from '@ember-data/adapter';
      import RSVP from 'RSVP';
      import $ from 'jquery';
       export default class ApplicationAdapter extends Adapter.extend(BuildURLMixin) {
        queryRecord(store, type, query) {
          return new RSVP.Promise(function(resolve, reject) {
            $.getJSON(`/${type.modelName}`, query).then(function(data) {
              resolve(data);
            }, function(jqXHR) {
              reject(jqXHR);
            });
          });
        }
      }
      ```
       @method queryRecord
      @param {Store} store
      @param {subclass of Model} type
      @param {Object} query
      @param {Object} adapterOptions
      @return {Promise} promise
      @public
    */
    queryRecord(store, type, query, adapterOptions) {
      if (true /* DEBUG */) {
        throw new Error('You subclassed the Adapter class but missing a queryRecord override');
      }
      return _rsvp.Promise.resolve();
    }

    /**
      If the globally unique IDs for your records should be generated on the client,
      implement the `generateIdForRecord()` method. This method will be invoked
      each time you create a new record, and the value returned from it will be
      assigned to the record's `primaryKey`.
       Most traditional REST-like HTTP APIs will not use this method. Instead, the ID
      of the record will be set by the server, and your adapter will update the store
      with the new ID when it calls `didCreateRecord()`. Only implement this method if
      you intend to generate record IDs on the client-side.
       The `generateIdForRecord()` method will be invoked with the requesting store as
      the first parameter and the newly created record as the second parameter:
       ```javascript
      import Adapter from '@ember-data/adapter';
      import { v4 } from 'uuid';
       export default class ApplicationAdapter extends Adapter {
        generateIdForRecord(store, type, inputProperties) {
          return v4();
        }
      }
      ```
       @method generateIdForRecord
      @param {Store} store
      @param {Model} type   the Model class of the record
      @param {Object} inputProperties a hash of properties to set on the
        newly created record.
      @return {(String|Number)} id
      @public
    */

    /**
      Proxies to the serializer's `serialize` method.
       Example
       ```app/adapters/application.js
      import Adapter from '@ember-data/adapter';
       export default class ApplicationAdapter extends Adapter {
        createRecord(store, type, snapshot) {
          let data = this.serialize(snapshot, { includeId: true });
          let url = `/${type.modelName}`;
           // ...
        }
      }
      ```
       @method serialize
      @param {Snapshot} snapshot
      @param {Object}   options
      @return {Object} serialized snapshot
      @public
    */
    serialize(snapshot, options) {
      return snapshot.serialize(options);
    }

    /**
      Implement this method in a subclass to handle the creation of
      new records.
       Serializes the record and sends it to the server.
       Example
       ```app/adapters/application.js
      import Adapter from '@ember-data/adapter';
      import { run } from '@ember/runloop';
      import RSVP from 'RSVP';
      import $ from 'jquery';
       export default class ApplicationAdapter extends Adapter {
        createRecord(store, type, snapshot) {
          let data = this.serialize(snapshot, { includeId: true });
           return new RSVP.Promise(function (resolve, reject) {
            $.ajax({
              type: 'POST',
              url: `/${type.modelName}`,
              dataType: 'json',
              data: data
            }).then(function (data) {
              run(null, resolve, data);
            }, function (jqXHR) {
              jqXHR.then = null; // tame jQuery's ill mannered promises
              run(null, reject, jqXHR);
            });
          });
        }
      }
      ```
       @method createRecord
      @param {Store} store
      @param {Model} type   the Model class of the record
      @param {Snapshot} snapshot
      @return {Promise} promise
      @public
    */
    createRecord(store, type, snapshot) {
      if (true /* DEBUG */) {
        throw new Error('You subclassed the Adapter class but missing a createRecord override');
      }
      return _rsvp.Promise.resolve();
    }

    /**
      Implement this method in a subclass to handle the updating of
      a record.
       Serializes the record update and sends it to the server.
       The updateRecord method is expected to return a promise that will
      resolve with the serialized record. This allows the backend to
      inform the Ember Data store the current state of this record after
      the update. If it is not possible to return a serialized record
      the updateRecord promise can also resolve with `undefined` and the
      Ember Data store will assume all of the updates were successfully
      applied on the backend.
       Example
       ```app/adapters/application.js
      import Adapter from '@ember-data/adapter';
      import { run } from '@ember/runloop';
      import RSVP from 'RSVP';
      import $ from 'jquery';
       export default class ApplicationAdapter extends Adapter {
        updateRecord(store, type, snapshot) {
          let data = this.serialize(snapshot, { includeId: true });
          let id = snapshot.id;
           return new RSVP.Promise(function(resolve, reject) {
            $.ajax({
              type: 'PUT',
              url: `/${type.modelName}/${id}`,
              dataType: 'json',
              data: data
            }).then(function(data) {
              run(null, resolve, data);
            }, function(jqXHR) {
              jqXHR.then = null; // tame jQuery's ill mannered promises
              run(null, reject, jqXHR);
            });
          });
        }
      }
      ```
       @method updateRecord
      @param {Store} store
      @param {Model} type   the Model class of the record
      @param {Snapshot} snapshot
      @return {Promise} promise
      @public
    */
    updateRecord(store, type, snapshot) {
      if (true /* DEBUG */) {
        throw new Error('You subclassed the Adapter class but missing a updateRecord override');
      }
      return _rsvp.Promise.resolve();
    }

    /**
      Implement this method in a subclass to handle the deletion of
      a record.
       Sends a delete request for the record to the server.
       Example
       ```app/adapters/application.js
      import Adapter from '@ember-data/adapter';
      import { run } from '@ember/runloop';
      import RSVP from 'RSVP';
      import $ from 'jquery';
       export default class ApplicationAdapter extends Adapter {
        deleteRecord(store, type, snapshot) {
          let data = this.serialize(snapshot, { includeId: true });
          let id = snapshot.id;
           return new RSVP.Promise(function(resolve, reject) {
            $.ajax({
              type: 'DELETE',
              url: `/${type.modelName}/${id}`,
              dataType: 'json',
              data: data
            }).then(function(data) {
              run(null, resolve, data);
            }, function(jqXHR) {
              jqXHR.then = null; // tame jQuery's ill mannered promises
              run(null, reject, jqXHR);
            });
          });
        }
      }
      ```
       @method deleteRecord
      @param {Store} store
      @param {Model} type   the Model class of the record
      @param {Snapshot} snapshot
      @return {Promise} promise
      @public
    */
    deleteRecord(store, type, snapshot) {
      if (true /* DEBUG */) {
        throw new Error('You subclassed the Adapter class but missing a deleteRecord override');
      }
      return _rsvp.Promise.resolve();
    }

    /**
      By default the store will try to coalesce all `findRecord` calls within the same runloop
      into as few requests as possible by calling groupRecordsForFindMany and passing it into a findMany call.
      You can opt out of this behaviour by either not implementing the findMany hook or by setting
      coalesceFindRequests to false.
       @property coalesceFindRequests
      @public
      @type {boolean}
    */
    get coalesceFindRequests() {
      let coalesceFindRequests = this._coalesceFindRequests;
      if (typeof coalesceFindRequests === 'boolean') {
        return coalesceFindRequests;
      }
      return this._coalesceFindRequests = true;
    }
    set coalesceFindRequests(value) {
      this._coalesceFindRequests = value;
    }

    /**
      The store will call `findMany` instead of multiple `findRecord`
      requests to find multiple records at once if coalesceFindRequests
      is true.
       ```app/adapters/application.js
      import Adapter from '@ember-data/adapter';
      import { run } from '@ember/runloop';
      import RSVP from 'RSVP';
      import $ from 'jquery';
       export default class ApplicationAdapter extends Adapter {
        findMany(store, type, ids, snapshots) {
          return new RSVP.Promise(function(resolve, reject) {
            $.ajax({
              type: 'GET',
              url: `/${type.modelName}/`,
              dataType: 'json',
              data: { filter: { id: ids.join(',') } }
            }).then(function(data) {
              run(null, resolve, data);
            }, function(jqXHR) {
              jqXHR.then = null; // tame jQuery's ill mannered promises
              run(null, reject, jqXHR);
            });
          });
        }
      }
      ```
       @method findMany
      @param {Store} store
      @param {Model} type   the Model class of the records
      @param {Array}    ids
      @param {Array} snapshots
      @return {Promise} promise
      @public
    */

    /**
      Organize records into groups, each of which is to be passed to separate
      calls to `findMany`.
       For example, if your API has nested URLs that depend on the parent, you will
      want to group records by their parent.
       The default implementation returns the records as a single group.
       @method groupRecordsForFindMany
      @public
      @param {Store} store
      @param {Array} snapshots
      @return {Array}  an array of arrays of records, each of which is to be
                        loaded separately by `findMany`.
    */
    groupRecordsForFindMany(store, snapshots) {
      return [snapshots];
    }

    /**
      This method is used by the store to determine if the store should
      reload a record from the adapter when a record is requested by
      `store.findRecord`.
       If this method returns `true`, the store will re-fetch a record from
      the adapter. If this method returns `false`, the store will resolve
      immediately using the cached record.
       For example, if you are building an events ticketing system, in which users
      can only reserve tickets for 20 minutes at a time, and want to ensure that
      in each route you have data that is no more than 20 minutes old you could
      write:
       ```javascript
      shouldReloadRecord(store, ticketSnapshot) {
        let lastAccessedAt = ticketSnapshot.attr('lastAccessedAt');
        let timeDiff = moment().diff(lastAccessedAt, 'minutes');
         if (timeDiff > 20) {
          return true;
        } else {
          return false;
        }
      }
      ```
       This method would ensure that whenever you do `store.findRecord('ticket',
      id)` you will always get a ticket that is no more than 20 minutes old. In
      case the cached version is more than 20 minutes old, `findRecord` will not
      resolve until you fetched the latest version.
       By default this hook returns `false`, as most UIs should not block user
      interactions while waiting on data update.
       Note that, with default settings, `shouldBackgroundReloadRecord` will always
      re-fetch the records in the background even if `shouldReloadRecord` returns
      `false`. You can override `shouldBackgroundReloadRecord` if this does not
      suit your use case.
       @since 1.13.0
      @method shouldReloadRecord
      @param {Store} store
      @param {Snapshot} snapshot
      @return {Boolean}
      @public
    */
    shouldReloadRecord(store, snapshot) {
      return false;
    }

    /**
      This method is used by the store to determine if the store should
      reload all records from the adapter when records are requested by
      `store.findAll`.
       If this method returns `true`, the store will re-fetch all records from
      the adapter. If this method returns `false`, the store will resolve
      immediately using the cached records.
       For example, if you are building an events ticketing system, in which users
      can only reserve tickets for 20 minutes at a time, and want to ensure that
      in each route you have data that is no more than 20 minutes old you could
      write:
       ```javascript
      shouldReloadAll(store, snapshotArray) {
        let snapshots = snapshotArray.snapshots();
         return snapshots.any((ticketSnapshot) => {
          let lastAccessedAt = ticketSnapshot.attr('lastAccessedAt');
          let timeDiff = moment().diff(lastAccessedAt, 'minutes');
           if (timeDiff > 20) {
            return true;
          } else {
            return false;
          }
        });
      }
      ```
       This method would ensure that whenever you do `store.findAll('ticket')` you
      will always get a list of tickets that are no more than 20 minutes old. In
      case a cached version is more than 20 minutes old, `findAll` will not
      resolve until you fetched the latest versions.
       By default, this method returns `true` if the passed `snapshotRecordArray`
      is empty (meaning that there are no records locally available yet),
      otherwise, it returns `false`.
       Note that, with default settings, `shouldBackgroundReloadAll` will always
      re-fetch all the records in the background even if `shouldReloadAll` returns
      `false`. You can override `shouldBackgroundReloadAll` if this does not suit
      your use case.
       @since 1.13.0
      @method shouldReloadAll
      @param {Store} store
      @param {SnapshotRecordArray} snapshotRecordArray
      @return {Boolean}
      @public
    */
    shouldReloadAll(store, snapshotRecordArray) {
      return !snapshotRecordArray.length;
    }

    /**
      This method is used by the store to determine if the store should
      reload a record after the `store.findRecord` method resolves a
      cached record.
       This method is *only* checked by the store when the store is
      returning a cached record.
       If this method returns `true` the store will re-fetch a record from
      the adapter.
       For example, if you do not want to fetch complex data over a mobile
      connection, or if the network is down, you can implement
      `shouldBackgroundReloadRecord` as follows:
       ```javascript
      shouldBackgroundReloadRecord(store, snapshot) {
        let { downlink, effectiveType } = navigator.connection;
         return downlink > 0 && effectiveType === '4g';
      }
      ```
       By default, this hook returns `true` so the data for the record is updated
      in the background.
       @since 1.13.0
      @method shouldBackgroundReloadRecord
      @param {Store} store
      @param {Snapshot} snapshot
      @return {Boolean}
      @public
    */
    shouldBackgroundReloadRecord(store, Snapshot) {
      return true;
    }

    /**
      This method is used by the store to determine if the store should
      reload a record array after the `store.findAll` method resolves
      with a cached record array.
       This method is *only* checked by the store when the store is
      returning a cached record array.
       If this method returns `true` the store will re-fetch all records
      from the adapter.
       For example, if you do not want to fetch complex data over a mobile
      connection, or if the network is down, you can implement
      `shouldBackgroundReloadAll` as follows:
       ```javascript
      shouldBackgroundReloadAll(store, snapshotArray) {
        let { downlink, effectiveType } = navigator.connection;
         return downlink > 0 && effectiveType === '4g';
      }
      ```
       By default this method returns `true`, indicating that a background reload
      should always be triggered.
       @since 1.13.0
      @method shouldBackgroundReloadAll
      @param {Store} store
      @param {SnapshotRecordArray} snapshotRecordArray
      @return {Boolean}
      @public
    */
    shouldBackgroundReloadAll(store, snapshotRecordArray) {
      return true;
    }
  }
  _exports.default = Adapter;
});
;define("@ember-data/adapter/json-api", ["exports", "@ember/debug", "@ember/string", "ember-inflector", "@ember-data/adapter/-private", "@ember-data/adapter/rest"], function (_exports, _debug, _string, _emberInflector, _private, _rest) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"@ember/debug",0,"@ember/string",0,"ember-inflector",0,"@ember-data/adapter/-private",0,"@ember-data/adapter/rest"eaimeta@70e063a35619d71f
  /**
    @module @ember-data/adapter/json-api
   */
  /**
    The `JSONAPIAdapter` is the default adapter used by Ember Data. It
    is responsible for transforming the store's requests into HTTP
    requests that follow the [JSON API](http://jsonapi.org/format/)
    format.
  
    ## JSON API Conventions
  
    The JSONAPIAdapter uses JSON API conventions for building the URL
    for a record and selecting the HTTP verb to use with a request. The
    actions you can take on a record map onto the following URLs in the
    JSON API adapter:
  
  <table>
    <tr>
      <th>
        Action
      </th>
      <th>
        HTTP Verb
      </th>
      <th>
        URL
      </th>
    </tr>
    <tr>
      <th>
        `store.findRecord('post', 123)`
      </th>
      <td>
        GET
      </td>
      <td>
        /posts/123
      </td>
    </tr>
    <tr>
      <th>
        `store.findAll('post')`
      </th>
      <td>
        GET
      </td>
      <td>
        /posts
      </td>
    </tr>
    <tr>
      <th>
        Update `postRecord.save()`
      </th>
      <td>
        PATCH
      </td>
      <td>
        /posts/123
      </td>
    </tr>
    <tr>
      <th>
        Create `store.createRecord('post').save()`
      </th>
      <td>
        POST
      </td>
      <td>
        /posts
      </td>
    </tr>
    <tr>
      <th>
        Delete `postRecord.destroyRecord()`
      </th>
      <td>
        DELETE
      </td>
      <td>
        /posts/123
      </td>
    </tr>
  </table>
  
    ## Success and failure
  
    The JSONAPIAdapter will consider a success any response with a
    status code of the 2xx family ("Success"), as well as 304 ("Not
    Modified"). Any other status code will be considered a failure.
  
    On success, the request promise will be resolved with the full
    response payload.
  
    Failed responses with status code 422 ("Unprocessable Entity") will
    be considered "invalid". The response will be discarded, except for
    the `errors` key. The request promise will be rejected with a
    `InvalidError`. This error object will encapsulate the saved
    `errors` value.
  
    Any other status codes will be treated as an adapter error. The
    request promise will be rejected, similarly to the invalid case,
    but with an instance of `AdapterError` instead.
  
    ### Endpoint path customization
  
    Endpoint paths can be prefixed with a `namespace` by setting the
    namespace property on the adapter:
  
    ```app/adapters/application.js
    import JSONAPIAdapter from '@ember-data/adapter/json-api';
  
    export default class ApplicationAdapter extends JSONAPIAdapter {
      namespace = 'api/1';
    }
    ```
    Requests for the `person` model would now target `/api/1/people/1`.
  
    ### Host customization
  
    An adapter can target other hosts by setting the `host` property.
  
    ```app/adapters/application.js
    import JSONAPIAdapter from '@ember-data/adapter/json-api';
  
    export default class ApplicationAdapter extends JSONAPIAdapter {
      host = 'https://api.example.com';
    }
    ```
  
    Requests for the `person` model would now target
    `https://api.example.com/people/1`.
  
    @since 1.13.0
    @class JSONAPIAdapter
    @main @ember-data/adapter/json-api
    @public
    @constructor
    @extends RESTAdapter
  */
  class JSONAPIAdapter extends _rest.default {
    constructor(...args) {
      super(...args);
      this._defaultContentType = 'application/vnd.api+json';
    }
    /**
      @method ajaxOptions
      @private
      @param {String} url
      @param {String} type The request type GET, POST, PUT, DELETE etc.
      @param {Object} options
      @return {Object}
    */
    ajaxOptions(url, type, options = {}) {
      let hash = super.ajaxOptions(url, type, options);
      hash.headers['Accept'] = hash.headers['Accept'] || 'application/vnd.api+json';
      return hash;
    }

    /**
      By default the JSONAPIAdapter will send each find request coming from a `store.find`
      or from accessing a relationship separately to the server. If your server supports passing
      ids as a query string, you can set coalesceFindRequests to true to coalesce all find requests
      within a single runloop.
       For example, if you have an initial payload of:
       ```javascript
      {
        data: {
          id: 1,
          type: 'post',
          relationship: {
            comments: {
              data: [
                { id: 1, type: 'comment' },
                { id: 2, type: 'comment' }
              ]
            }
          }
        }
      }
      ```
       By default calling `post.get('comments')` will trigger the following requests(assuming the
      comments haven't been loaded before):
       ```
      GET /comments/1
      GET /comments/2
      ```
       If you set coalesceFindRequests to `true` it will instead trigger the following request:
       ```
      GET /comments?filter[id]=1,2
      ```
       Setting coalesceFindRequests to `true` also works for `store.find` requests and `belongsTo`
      relationships accessed within the same runloop. If you set `coalesceFindRequests: true`
       ```javascript
      store.findRecord('comment', 1);
      store.findRecord('comment', 2);
      ```
       will also send a request to: `GET /comments?filter[id]=1,2`
       Note: Requests coalescing rely on URL building strategy. So if you override `buildURL` in your app
      `groupRecordsForFindMany` more likely should be overridden as well in order for coalescing to work.
       @property coalesceFindRequests
      @public
      @type {boolean}
    */
    get coalesceFindRequests() {
      let coalesceFindRequests = this._coalesceFindRequests;
      if (typeof coalesceFindRequests === 'boolean') {
        return coalesceFindRequests;
      }
      return this._coalesceFindRequests = false;
    }
    set coalesceFindRequests(value) {
      this._coalesceFindRequests = value;
    }
    findMany(store, type, ids, snapshots) {
      let url = this.buildURL(type.modelName, ids, snapshots, 'findMany');
      return this.ajax(url, 'GET', {
        data: {
          filter: {
            id: ids.join(',')
          }
        }
      });
    }
    pathForType(modelName) {
      let dasherized = (0, _string.dasherize)(modelName);
      return (0, _emberInflector.pluralize)(dasherized);
    }
    updateRecord(store, schema, snapshot) {
      const data = (0, _private.serializeIntoHash)(store, schema, snapshot);
      const type = snapshot.modelName;
      const id = snapshot.id;
      (true && !(typeof id === 'string' && id.length > 0) && (0, _debug.assert)(`Attempted to update the ${type} record, but the record has no id`, typeof id === 'string' && id.length > 0));
      let url = this.buildURL(type, id, snapshot, 'updateRecord');
      return this.ajax(url, 'PATCH', {
        data: data
      });
    }
  }
  var _default = _exports.default = JSONAPIAdapter;
});
;define("@ember-data/adapter/rest", ["exports", "@ember/application", "@ember/debug", "@ember/object", "@ember/runloop", "rsvp", "@ember-data/adapter/-private", "@ember-data/adapter/error", "@ember-data/adapter/index"], function (_exports, _application, _debug, _object, _runloop, _rsvp, _private, _error, _index) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.fetchOptions = fetchOptions;
  var _dec, _class;
  /**
    @module @ember-data/adapter/rest
  */
  0; //eaimeta@70e063a35619d71f0,"@ember/application",0,"@ember/debug",0,"@ember/object",0,"@ember/runloop",0,"@glimmer/env",0,"rsvp",0,"@ember-data/adapter/-private",0,"@ember-data/adapter/error",0,"@ember-data/adapter/index"eaimeta@70e063a35619d71f
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  /**
    The REST adapter allows your store to communicate with an HTTP server by
    transmitting JSON via XHR. Most Ember.js apps that consume a JSON API
    should use the REST adapter.
  
    This adapter is designed around the idea that the JSON exchanged with
    the server should be conventional.
  
    ## Success and failure
  
    The REST adapter will consider a success any response with a status code
    of the 2xx family ("Success"), as well as 304 ("Not Modified"). Any other
    status code will be considered a failure.
  
    On success, the request promise will be resolved with the full response
    payload.
  
    Failed responses with status code 422 ("Unprocessable Entity") will be
    considered "invalid". The response will be discarded, except for the
    `errors` key. The request promise will be rejected with a `InvalidError`.
    This error object will encapsulate the saved `errors` value.
  
    Any other status codes will be treated as an "adapter error". The request
    promise will be rejected, similarly to the "invalid" case, but with
    an instance of `AdapterError` instead.
  
    ## JSON Structure
  
    The REST adapter expects the JSON returned from your server to follow
    these conventions.
  
    ### Object Root
  
    The JSON payload should be an object that contains the record inside a
    root property. For example, in response to a `GET` request for
    `/posts/1`, the JSON should look like this:
  
    ```js
    {
      "posts": {
        "id": 1,
        "title": "I'm Running to Reform the W3C's Tag",
        "author": "Yehuda Katz"
      }
    }
    ```
  
    Similarly, in response to a `GET` request for `/posts`, the JSON should
    look like this:
  
    ```js
    {
      "posts": [
        {
          "id": 1,
          "title": "I'm Running to Reform the W3C's Tag",
          "author": "Yehuda Katz"
        },
        {
          "id": 2,
          "title": "Rails is omakase",
          "author": "D2H"
        }
      ]
    }
    ```
  
    Note that the object root can be pluralized for both a single-object response
    and an array response: the REST adapter is not strict on this. Further, if the
    HTTP server responds to a `GET` request to `/posts/1` (e.g. the response to a
    `findRecord` query) with more than one object in the array, Ember Data will
    only display the object with the matching ID.
  
    ### Conventional Names
  
    Attribute names in your JSON payload should be the camelCased versions of
    the attributes in your Ember.js models.
  
    For example, if you have a `Person` model:
  
    ```app/models/person.js
    import Model, { attr } from '@ember-data/model';
  
    export default Model.extend({
      firstName: attr('string'),
      lastName: attr('string'),
      occupation: attr('string')
    });
    ```
  
    The JSON returned should look like this:
  
    ```js
    {
      "people": {
        "id": 5,
        "firstName": "Zaphod",
        "lastName": "Beeblebrox",
        "occupation": "President"
      }
    }
    ```
  
    #### Relationships
  
    Relationships are usually represented by ids to the record in the
    relationship. The related records can then be sideloaded in the
    response under a key for the type.
  
    ```js
    {
      "posts": {
        "id": 5,
        "title": "I'm Running to Reform the W3C's Tag",
        "author": "Yehuda Katz",
        "comments": [1, 2]
      },
      "comments": [{
        "id": 1,
        "author": "User 1",
        "message": "First!",
      }, {
        "id": 2,
        "author": "User 2",
        "message": "Good Luck!",
      }]
    }
    ```
  
    If the records in the relationship are not known when the response
    is serialized it's also possible to represent the relationship as a
    URL using the `links` key in the response. Ember Data will fetch
    this URL to resolve the relationship when it is accessed for the
    first time.
  
    ```js
    {
      "posts": {
        "id": 5,
        "title": "I'm Running to Reform the W3C's Tag",
        "author": "Yehuda Katz",
        "links": {
          "comments": "/posts/5/comments"
        }
      }
    }
    ```
  
    ### Errors
  
    If a response is considered a failure, the JSON payload is expected to include
    a top-level key `errors`, detailing any specific issues. For example:
  
    ```js
    {
      "errors": {
        "msg": "Something went wrong"
      }
    }
    ```
  
    This adapter does not make any assumptions as to the format of the `errors`
    object. It will simply be passed along as is, wrapped in an instance
    of `InvalidError` or `AdapterError`. The serializer can interpret it
    afterwards.
  
    ## Customization
  
    ### Endpoint path customization
  
    Endpoint paths can be prefixed with a `namespace` by setting the namespace
    property on the adapter:
  
    ```app/adapters/application.js
    import RESTAdapter from '@ember-data/adapter/rest';
  
    export default class ApplicationAdapter extends RESTAdapter {
      namespace = 'api/1';
    }
    ```
    Requests for the `Person` model would now target `/api/1/people/1`.
  
    ### Host customization
  
    An adapter can target other hosts by setting the `host` property.
  
    ```app/adapters/application.js
    import RESTAdapter from '@ember-data/adapter/rest';
  
    export default class ApplicationAdapter extends RESTAdapter {
      host = 'https://api.example.com';
    }
    ```
  
    ### Headers customization
  
    Some APIs require HTTP headers, e.g. to provide an API key. Arbitrary
    headers can be set as key/value pairs on the `RESTAdapter`'s `headers`
    object and Ember Data will send them along with each ajax request.
  
  
    ```app/adapters/application.js
    import RESTAdapter from '@ember-data/adapter/rest';
    import { computed } from '@ember/object';
  
    export default class ApplicationAdapter extends RESTAdapter {
      headers: computed(function() {
        return {
          'API_KEY': 'secret key',
          'ANOTHER_HEADER': 'Some header value'
        };
      }
    }
    ```
  
    `headers` can also be used as a computed property to support dynamic
    headers. In the example below, the `session` object has been
    injected into an adapter by Ember's container.
  
    ```app/adapters/application.js
    import RESTAdapter from '@ember-data/adapter/rest';
    import { computed } from '@ember/object';
  
    export default class ApplicationAdapter extends RESTAdapter {
      headers: computed('session.authToken', function() {
        return {
          'API_KEY': this.get('session.authToken'),
          'ANOTHER_HEADER': 'Some header value'
        };
      })
    }
    ```
  
    In some cases, your dynamic headers may require data from some
    object outside of Ember's observer system (for example
    `document.cookie`). You can use the
    [volatile](/api/classes/Ember.ComputedProperty.html?anchor=volatile)
    function to set the property into a non-cached mode causing the headers to
    be recomputed with every request.
  
    ```app/adapters/application.js
    import RESTAdapter from '@ember-data/adapter/rest';
    import { get } from '@ember/object';
    import { computed } from '@ember/object';
  
    export default class ApplicationAdapter extends RESTAdapter {
      headers: computed(function() {
        return {
          'API_KEY': get(document.cookie.match(/apiKey\=([^;]*)/), '1'),
          'ANOTHER_HEADER': 'Some header value'
        };
      }).volatile()
    }
    ```
  
    @class RESTAdapter
    @main @ember-data/adapter/rest
    @public
    @constructor
    @extends Adapter
    @uses BuildURLMixin
  */
  let RESTAdapter = (_dec = (0, _object.computed)(), (_class = class RESTAdapter extends _index.default.extend(_index.BuildURLMixin) {
    constructor(...args) {
      super(...args);
      /**
        This property allows ajax to still be used instead when `false`.
         @property useFetch
        @type {Boolean}
        @default true
        @public
      */
      this.useFetch = true;
      this._defaultContentType = 'application/json; charset=utf-8';
      // http://stackoverflow.com/questions/417142/what-is-the-maximum-length-of-a-url-in-different-browsers
      this.maxURLLength = 2048;
    }
    get fastboot() {
      // Avoid computed property override deprecation in fastboot as suggested by:
      // https://deprecations.emberjs.com/v3.x/#toc_computed-property-override
      let fastboot = this._fastboot;
      if (fastboot) {
        return fastboot;
      }
      return this._fastboot = (0, _application.getOwner)(this).lookup('service:fastboot');
    }
    set fastboot(value) {
      this._fastboot = value;
    }

    /**
      By default, the RESTAdapter will send the query params sorted alphabetically to the
      server.
       For example:
       ```js
      store.query('posts', { sort: 'price', category: 'pets' });
      ```
       will generate a requests like this `/posts?category=pets&sort=price`, even if the
      parameters were specified in a different order.
       That way the generated URL will be deterministic and that simplifies caching mechanisms
      in the backend.
       Setting `sortQueryParams` to a falsey value will respect the original order.
       In case you want to sort the query parameters with a different criteria, set
      `sortQueryParams` to your custom sort function.
       ```app/adapters/application.js
      import RESTAdapter from '@ember-data/adapter/rest';
       export default class ApplicationAdapter extends RESTAdapter {
        sortQueryParams(params) {
          let sortedKeys = Object.keys(params).sort().reverse();
          let len = sortedKeys.length, newParams = {};
           for (let i = 0; i < len; i++) {
            newParams[sortedKeys[i]] = params[sortedKeys[i]];
          }
           return newParams;
        }
      }
      ```
       @method sortQueryParams
      @param {Object} obj
      @return {Object}
      @public
    */
    sortQueryParams(obj) {
      let keys = Object.keys(obj);
      let len = keys.length;
      if (len < 2) {
        return obj;
      }
      let newQueryParams = {};
      let sortedKeys = keys.sort();
      for (let i = 0; i < len; i++) {
        newQueryParams[sortedKeys[i]] = obj[sortedKeys[i]];
      }
      return newQueryParams;
    }

    /**
      By default the RESTAdapter will send each find request coming from a `store.find`
      or from accessing a relationship separately to the server. If your server supports passing
      ids as a query string, you can set coalesceFindRequests to true to coalesce all find requests
      within a single runloop.
       For example, if you have an initial payload of:
       ```javascript
      {
        post: {
          id: 1,
          comments: [1, 2]
        }
      }
      ```
       By default calling `post.get('comments')` will trigger the following requests(assuming the
      comments haven't been loaded before):
       ```
      GET /comments/1
      GET /comments/2
      ```
       If you set coalesceFindRequests to `true` it will instead trigger the following request:
       ```
      GET /comments?ids[]=1&ids[]=2
      ```
       Setting coalesceFindRequests to `true` also works for `store.find` requests and `belongsTo`
      relationships accessed within the same runloop. If you set `coalesceFindRequests: true`
       ```javascript
      store.findRecord('comment', 1);
      store.findRecord('comment', 2);
      ```
       will also send a request to: `GET /comments?ids[]=1&ids[]=2`
       Note: Requests coalescing rely on URL building strategy. So if you override `buildURL` in your app
      `groupRecordsForFindMany` more likely should be overridden as well in order for coalescing to work.
       @property coalesceFindRequests
      @public
      @type {boolean}
    */
    get coalesceFindRequests() {
      let coalesceFindRequests = this._coalesceFindRequests;
      if (typeof coalesceFindRequests === 'boolean') {
        return coalesceFindRequests;
      }
      return this._coalesceFindRequests = false;
    }
    set coalesceFindRequests(value) {
      this._coalesceFindRequests = value;
    }

    /**
      Endpoint paths can be prefixed with a `namespace` by setting the namespace
      property on the adapter:
       ```app/adapters/application.js
      import RESTAdapter from '@ember-data/adapter/rest';
       export default class ApplicationAdapter extends RESTAdapter {
        namespace = 'api/1';
      }
      ```
       Requests for the `Post` model would now target `/api/1/post/`.
       @property namespace
      @public
      @type {String}
    */

    /**
      An adapter can target other hosts by setting the `host` property.
       ```app/adapters/application.js
      import RESTAdapter from '@ember-data/adapter/rest';
       export default class ApplicationAdapter extends RESTAdapter {
        host = 'https://api.example.com';
      }
      ```
       Requests for the `Post` model would now target `https://api.example.com/post/`.
       @property host
      @public
      @type {String}
    */

    /**
      Some APIs require HTTP headers, e.g. to provide an API
      key. Arbitrary headers can be set as key/value pairs on the
      `RESTAdapter`'s `headers` object and Ember Data will send them
      along with each ajax request. For dynamic headers see [headers
      customization](/ember-data/release/classes/RESTAdapter).
       ```app/adapters/application.js
      import RESTAdapter from '@ember-data/adapter/rest';
      import { computed } from '@ember/object';
       export default class ApplicationAdapter extends RESTAdapter {
        headers: computed(function() {
          return {
            'API_KEY': 'secret key',
            'ANOTHER_HEADER': 'Some header value'
          };
        })
      }
      ```
       @property headers
      @public
      @type {Object}
     */
    /**
      Called by the store in order to fetch the JSON for a given
      type and ID.
       The `findRecord` method makes an Ajax request to a URL computed by
      `buildURL`, and returns a promise for the resulting payload.
       This method performs an HTTP `GET` request with the id provided as part of the query string.
       @since 1.13.0
      @method findRecord
      @public
      @param {Store} store
      @param {Model} type
      @param {String} id
      @param {Snapshot} snapshot
      @return {Promise} promise
    */
    findRecord(store, type, id, snapshot) {
      let url = this.buildURL(type.modelName, id, snapshot, 'findRecord');
      let query = this.buildQuery(snapshot);
      return this.ajax(url, 'GET', {
        data: query
      });
    }

    /**
      Called by the store in order to fetch a JSON array for all
      of the records for a given type.
       The `findAll` method makes an Ajax (HTTP GET) request to a URL computed by `buildURL`, and returns a
      promise for the resulting payload.
       @method findAll
      @public
      @param {Store} store
      @param {Model} type
      @param {undefined} neverSet a value is never provided to this argument
      @param {SnapshotRecordArray} snapshotRecordArray
      @return {Promise} promise
    */
    findAll(store, type, sinceToken, snapshotRecordArray) {
      let query = this.buildQuery(snapshotRecordArray);
      let url = this.buildURL(type.modelName, null, snapshotRecordArray, 'findAll');
      if (sinceToken) {
        query.since = sinceToken;
      }
      return this.ajax(url, 'GET', {
        data: query
      });
    }

    /**
      Called by the store in order to fetch a JSON array for
      the records that match a particular query.
       The `query` method makes an Ajax (HTTP GET) request to a URL
      computed by `buildURL`, and returns a promise for the resulting
      payload.
       The `query` argument is a simple JavaScript object that will be passed directly
      to the server as parameters.
       @method query
      @public
      @param {Store} store
      @param {Model} type
      @param {Object} query
      @param {AdapterPopulatedRecordArray} recordArray
      @param {Object} adapterOptions
      @return {Promise} promise
    */
    query(store, type, query) {
      let url = this.buildURL(type.modelName, null, null, 'query', query);
      if (this.sortQueryParams) {
        query = this.sortQueryParams(query);
      }
      return this.ajax(url, 'GET', {
        data: query
      });
    }

    /**
      Called by the store in order to fetch a JSON object for
      the record that matches a particular query.
       The `queryRecord` method makes an Ajax (HTTP GET) request to a URL
      computed by `buildURL`, and returns a promise for the resulting
      payload.
       The `query` argument is a simple JavaScript object that will be passed directly
      to the server as parameters.
       @since 1.13.0
      @method queryRecord
      @public
      @param {Store} store
      @param {Model} type
      @param {Object} query
      @param {Object} adapterOptions
      @return {Promise} promise
    */
    queryRecord(store, type, query, adapterOptions) {
      let url = this.buildURL(type.modelName, null, null, 'queryRecord', query);
      if (this.sortQueryParams) {
        query = this.sortQueryParams(query);
      }
      return this.ajax(url, 'GET', {
        data: query
      });
    }

    /**
      Called by the store in order to fetch several records together if `coalesceFindRequests` is true
       For example, if the original payload looks like:
       ```js
      {
        "id": 1,
        "title": "Rails is omakase",
        "comments": [ 1, 2, 3 ]
      }
      ```
       The IDs will be passed as a URL-encoded Array of IDs, in this form:
       ```
      ids[]=1&ids[]=2&ids[]=3
      ```
       Many servers, such as Rails and PHP, will automatically convert this URL-encoded array
      into an Array for you on the server-side. If you want to encode the
      IDs, differently, just override this (one-line) method.
       The `findMany` method makes an Ajax (HTTP GET) request to a URL computed by `buildURL`, and returns a
      promise for the resulting payload.
       @method findMany
      @public
      @param {Store} store
      @param {Model} type
      @param {Array} ids
      @param {Array} snapshots
      @return {Promise} promise
    */
    findMany(store, type, ids, snapshots) {
      let url = this.buildURL(type.modelName, ids, snapshots, 'findMany');
      return this.ajax(url, 'GET', {
        data: {
          ids: ids
        }
      });
    }

    /**
      Called by the store in order to fetch a JSON array for
      the unloaded records in a has-many relationship that were originally
      specified as a URL (inside of `links`).
       For example, if your original payload looks like this:
       ```js
      {
        "post": {
          "id": 1,
          "title": "Rails is omakase",
          "links": { "comments": "/posts/1/comments" }
        }
      }
      ```
       This method will be called with the parent record and `/posts/1/comments`.
       The `findHasMany` method will make an Ajax (HTTP GET) request to the originally specified URL.
       The format of your `links` value will influence the final request URL via the `urlPrefix` method:
       * Links beginning with `//`, `http://`, `https://`, will be used as is, with no further manipulation.
       * Links beginning with a single `/` will have the current adapter's `host` value prepended to it.
       * Links with no beginning `/` will have a parentURL prepended to it, via the current adapter's `buildURL`.
       @method findHasMany
      @public
      @param {Store} store
      @param {Snapshot} snapshot
      @param {String} url
      @param {Object} relationship meta object describing the relationship
      @return {Promise} promise
    */
    findHasMany(store, snapshot, url, relationship) {
      let id = snapshot.id;
      let type = snapshot.modelName;
      (true && !(typeof id === 'string' && id.length > 0) && (0, _debug.assert)(`Attempted to fetch the hasMany relationship for ${type}, but the record has no id`, typeof id === 'string' && id.length > 0));
      url = this.urlPrefix(url, this.buildURL(type, id, snapshot, 'findHasMany'));
      return this.ajax(url, 'GET');
    }

    /**
      Called by the store in order to fetch the JSON for the unloaded record in a
      belongs-to relationship that was originally specified as a URL (inside of
      `links`).
       For example, if your original payload looks like this:
       ```js
      {
        "person": {
          "id": 1,
          "name": "Tom Dale",
          "links": { "group": "/people/1/group" }
        }
      }
      ```
       This method will be called with the parent record and `/people/1/group`.
       The `findBelongsTo` method will make an Ajax (HTTP GET) request to the originally specified URL.
       The format of your `links` value will influence the final request URL via the `urlPrefix` method:
       * Links beginning with `//`, `http://`, `https://`, will be used as is, with no further manipulation.
       * Links beginning with a single `/` will have the current adapter's `host` value prepended to it.
       * Links with no beginning `/` will have a parentURL prepended to it, via the current adapter's `buildURL`.
       @method findBelongsTo
      @public
      @param {Store} store
      @param {Snapshot} snapshot
      @param {String} url
      @param {Object} relationship meta object describing the relationship
      @return {Promise} promise
    */
    findBelongsTo(store, snapshot, url, relationship) {
      let id = snapshot.id;
      let type = snapshot.modelName;
      (true && !(typeof id === 'string' && id.length > 0) && (0, _debug.assert)(`Attempted to fetch the belongsTo relationship for ${type}, but the record has no id`, typeof id === 'string' && id.length > 0));
      url = this.urlPrefix(url, this.buildURL(type, id, snapshot, 'findBelongsTo'));
      return this.ajax(url, 'GET');
    }

    /**
      Called by the store when a newly created record is
      saved via the `save` method on a model record instance.
       The `createRecord` method serializes the record and makes an Ajax (HTTP POST) request
      to a URL computed by `buildURL`.
       See `serialize` for information on how to customize the serialized form
      of a record.
       @method createRecord
      @public
      @param {Store} store
      @param {Model} type
      @param {Snapshot} snapshot
      @return {Promise} promise
    */
    createRecord(store, type, snapshot) {
      let url = this.buildURL(type.modelName, null, snapshot, 'createRecord');
      const data = (0, _private.serializeIntoHash)(store, type, snapshot);
      return this.ajax(url, 'POST', {
        data
      });
    }

    /**
      Called by the store when an existing record is saved
      via the `save` method on a model record instance.
       The `updateRecord` method serializes the record and makes an Ajax (HTTP PUT) request
      to a URL computed by `buildURL`.
       See `serialize` for information on how to customize the serialized form
      of a record.
       @method updateRecord
      @public
      @param {Store} store
      @param {Model} schema
      @param {Snapshot} snapshot
      @return {Promise} promise
    */
    updateRecord(store, schema, snapshot) {
      const data = (0, _private.serializeIntoHash)(store, schema, snapshot, {});
      const type = snapshot.modelName;
      const id = snapshot.id;
      (true && !(typeof id === 'string' && id.length > 0) && (0, _debug.assert)(`Attempted to update the ${type} record, but the record has no id`, typeof id === 'string' && id.length > 0));
      let url = this.buildURL(type, id, snapshot, 'updateRecord');
      return this.ajax(url, 'PUT', {
        data
      });
    }

    /**
      Called by the store when a record is deleted.
       The `deleteRecord` method  makes an Ajax (HTTP DELETE) request to a URL computed by `buildURL`.
       @method deleteRecord
      @public
      @param {Store} store
      @param {Model} type
      @param {Snapshot} snapshot
      @return {Promise} promise
    */
    deleteRecord(store, schema, snapshot) {
      const type = snapshot.modelName;
      const id = snapshot.id;
      (true && !(typeof id === 'string' && id.length > 0) && (0, _debug.assert)(`Attempted to delete the ${type} record, but the record has no id`, typeof id === 'string' && id.length > 0));
      return this.ajax(this.buildURL(type, id, snapshot, 'deleteRecord'), 'DELETE');
    }
    _stripIDFromURL(store, snapshot) {
      const type = snapshot.modelName;
      const id = snapshot.id;
      (true && !(typeof id === 'string' && id.length > 0) && (0, _debug.assert)(`Attempted to strip the url from the ${type} record for coalescing, but the record has no id`, typeof id === 'string' && id.length > 0));
      let url = this.buildURL(type, id, snapshot);
      let expandedURL = url.split('/');
      // Case when the url is of the format ...something/:id
      // We are decodeURIComponent-ing the lastSegment because if it represents
      // the id, it has been encodeURIComponent-ified within `buildURL`. If we
      // don't do this, then records with id having special characters are not
      // coalesced correctly (see GH #4190 for the reported bug)
      let lastSegment = expandedURL[expandedURL.length - 1];
      if (decodeURIComponent(lastSegment) === id) {
        expandedURL[expandedURL.length - 1] = '';
      } else if (id && endsWith(lastSegment, '?id=' + id)) {
        //Case when the url is of the format ...something?id=:id
        expandedURL[expandedURL.length - 1] = lastSegment.substring(0, lastSegment.length - id.length - 1);
      }
      return expandedURL.join('/');
    }
    /**
      Organize records into groups, each of which is to be passed to separate
      calls to `findMany`.
       This implementation groups together records that have the same base URL but
      differing ids. For example `/comments/1` and `/comments/2` will be grouped together
      because we know findMany can coalesce them together as `/comments?ids[]=1&ids[]=2`
       It also supports urls where ids are passed as a query param, such as `/comments?id=1`
      but not those where there is more than 1 query param such as `/comments?id=2&name=David`
      Currently only the query param of `id` is supported. If you need to support others, please
      override this or the `_stripIDFromURL` method.
       It does not group records that have differing base urls, such as for example: `/posts/1/comments/2`
      and `/posts/2/comments/3`
       @method groupRecordsForFindMany
      @public
      @param {Store} store
      @param {Array} snapshots
      @return {Array}  an array of arrays of records, each of which is to be
                        loaded separately by `findMany`.
    */
    groupRecordsForFindMany(store, snapshots) {
      let groups = new Map();
      let adapter = this;
      let maxURLLength = this.maxURLLength;
      snapshots.forEach(snapshot => {
        let baseUrl = adapter._stripIDFromURL(store, snapshot);
        if (!groups.has(baseUrl)) {
          groups.set(baseUrl, []);
        }
        groups.get(baseUrl).push(snapshot);
      });
      function splitGroupToFitInUrl(group, maxURLLength, paramNameLength) {
        let idsSize = 0;
        let baseUrl = adapter._stripIDFromURL(store, group[0]);
        let splitGroups = [[]];
        group.forEach(snapshot => {
          let additionalLength = encodeURIComponent(snapshot.id).length + paramNameLength;
          if (baseUrl.length + idsSize + additionalLength >= maxURLLength) {
            idsSize = 0;
            splitGroups.push([]);
          }
          idsSize += additionalLength;
          let lastGroupIndex = splitGroups.length - 1;
          splitGroups[lastGroupIndex].push(snapshot);
        });
        return splitGroups;
      }
      let groupsArray = [];
      groups.forEach((group, key) => {
        let paramNameLength = '&ids%5B%5D='.length;
        let splitGroups = splitGroupToFitInUrl(group, maxURLLength, paramNameLength);
        splitGroups.forEach(splitGroup => groupsArray.push(splitGroup));
      });
      return groupsArray;
    }

    /**
      Takes an ajax response, and returns the json payload or an error.
       By default this hook just returns the json payload passed to it.
      You might want to override it in two cases:
       1. Your API might return useful results in the response headers.
      Response headers are passed in as the second argument.
       2. Your API might return errors as successful responses with status code
      200 and an Errors text or object. You can return a `InvalidError` or a
      `AdapterError` (or a sub class) from this hook and it will automatically
      reject the promise and put your record into the invalid or error state.
       Returning a `InvalidError` from this method will cause the
      record to transition into the `invalid` state and make the
      `errors` object available on the record. When returning an
      `InvalidError` the store will attempt to normalize the error data
      returned from the server using the serializer's `extractErrors`
      method.
       @since 1.13.0
      @method handleResponse
      @public
      @param  {Number} status
      @param  {Object} headers
      @param  {Object} payload
      @param  {Object} requestData - the original request information
      @return {Object | AdapterError} response
    */
    handleResponse(status, headers, payload, requestData) {
      if (this.isSuccess(status, headers, payload)) {
        return payload;
      } else if (this.isInvalid(status, headers, payload)) {
        return new _error.InvalidError(typeof payload === 'object' && 'errors' in payload ? payload.errors : undefined);
      }
      let errors = this.normalizeErrorResponse(status, headers, payload);
      let detailedMessage = this.generatedDetailedMessage(status, headers, payload, requestData);
      switch (status) {
        case 401:
          return new _error.UnauthorizedError(errors, detailedMessage);
        case 403:
          return new _error.ForbiddenError(errors, detailedMessage);
        case 404:
          return new _error.NotFoundError(errors, detailedMessage);
        case 409:
          return new _error.ConflictError(errors, detailedMessage);
        default:
          if (status >= 500) {
            return new _error.ServerError(errors, detailedMessage);
          }
      }
      return new _error.default(errors, detailedMessage);
    }

    /**
      Default `handleResponse` implementation uses this hook to decide if the
      response is a success.
       @since 1.13.0
      @method isSuccess
      @public
      @param  {Number} status
      @param  {Object} headers
      @param  {Object} payload
      @return {Boolean}
    */
    isSuccess(status, _headers, _payload) {
      return status >= 200 && status < 300 || status === 304;
    }

    /**
      Default `handleResponse` implementation uses this hook to decide if the
      response is an invalid error.
       @since 1.13.0
      @method isInvalid
      @public
      @param  {Number} status
      @param  {Object} headers
      @param  {Object} payload
      @return {Boolean}
    */
    isInvalid(status, _headers, _payload) {
      return status === 422;
    }

    /**
      Takes a URL, an HTTP method and a hash of data, and makes an
      HTTP request.
       When the server responds with a payload, Ember Data will call into `extractSingle`
      or `extractArray` (depending on whether the original query was for one record or
      many records).
       By default, `ajax` method has the following behavior:
       * It sets the response `dataType` to `"json"`
      * If the HTTP method is not `"GET"`, it sets the `Content-Type` to be
        `application/json; charset=utf-8`
      * If the HTTP method is not `"GET"`, it stringifies the data passed in. The
        data is the serialized record in the case of a save.
      * Registers success and failure handlers.
       @method ajax
      @private
      @param {String} url
      @param {String} type The request type GET, POST, PUT, DELETE etc.
      @param {Object} options
      @return {Promise} promise
    */
    async ajax(url, type, options = {}) {
      let adapter = this;
      let requestData = {
        url: url,
        method: type
      };
      if (this.useFetch) {
        let hash = adapter.ajaxOptions(url, type, options);
        let response = await this._fetchRequest(hash);
        let payload = await (0, _private.determineBodyPromise)(response, requestData);
        if (response.ok && !(payload instanceof Error)) {
          return fetchSuccessHandler(adapter, payload, response, requestData);
        } else {
          throw fetchErrorHandler(adapter, payload, response, null, requestData);
        }
      } else {
        let hash = adapter.ajaxOptions(url, type, options);
        return new _rsvp.Promise(function (resolve, reject) {
          hash.success = function (payload, textStatus, jqXHR) {
            let response = ajaxSuccessHandler(adapter, payload, jqXHR, requestData);
            (0, _runloop.join)(null, resolve, response);
          };
          hash.error = function (jqXHR, textStatus, errorThrown) {
            let error = ajaxErrorHandler(adapter, jqXHR, errorThrown, requestData);
            (0, _runloop.join)(null, reject, error);
          };
          adapter._ajax(hash);
        }, 'DS: RESTAdapter#ajax ' + type + ' to ' + url);
      }
    }

    /**
      @method _ajaxRequest
      @private
      @param {Object} options jQuery ajax options to be used for the ajax request
    */
    _ajaxRequest(options) {
      // TODO add assertion that jquery is there rather then equality check
      typeof jQuery !== 'undefined' && jQuery.ajax(options);
    }
    _fetchRequest(options) {
      let fetchFunction = (0, _private.fetch)();
      if (fetchFunction) {
        return fetchFunction(options.url, options);
      } else {
        throw new Error('cannot find the `fetch` module or the `fetch` global. Did you mean to install the `ember-fetch` addon?');
      }
    }
    _ajax(options) {
      if (this.useFetch) {
        this._fetchRequest(options);
      } else {
        this._ajaxRequest(options);
      }
    }

    /**
      @method ajaxOptions
      @private
      @param {String} url
      @param {String} type The request type GET, POST, PUT, DELETE etc.
      @param {Object} options
      @return {Object}
    */
    ajaxOptions(url, method, options) {
      let reqOptions = Object.assign({
        url,
        method,
        type: method
      }, options);
      if (this.headers !== undefined) {
        reqOptions.headers = {
          ...this.headers,
          ...reqOptions.headers
        };
      } else if (!options.headers) {
        reqOptions.headers = {};
      }
      let contentType = reqOptions.contentType || this._defaultContentType;
      if (this.useFetch) {
        if (reqOptions.data && reqOptions.type !== 'GET' && reqOptions.headers) {
          if (!reqOptions.headers['Content-Type'] && !reqOptions.headers['content-type']) {
            reqOptions.headers['content-type'] = contentType;
          }
        }
        reqOptions = fetchOptions(reqOptions, this);
      } else {
        // GET requests without a body should not have a content-type header
        // and may be unexpected by a server
        if (reqOptions.data && reqOptions.type !== 'GET') {
          reqOptions = {
            ...reqOptions,
            contentType
          };
        }
        reqOptions = ajaxOptions(reqOptions, this);
      }
      reqOptions.url = this._ajaxURL(reqOptions.url);
      return reqOptions;
    }
    _ajaxURL(url) {
      if (this.fastboot?.isFastBoot) {
        let httpRegex = /^https?:\/\//;
        let protocolRelativeRegex = /^\/\//;
        let protocol = this.fastboot.request.protocol;
        let host = this.fastboot.request.host;
        if (protocolRelativeRegex.test(url)) {
          return `${protocol}${url}`;
        } else if (!httpRegex.test(url)) {
          try {
            return `${protocol}//${host}${url}`;
          } catch (fbError) {
            throw new Error('You are using Ember Data with no host defined in your adapter. This will attempt to use the host of the FastBoot request, which is not configured for the current host of this request. Please set the hostWhitelist property for in your environment.js. FastBoot Error: ' + fbError.message);
          }
        }
      }
      return url;
    }

    /**
      @method parseErrorResponse
      @private
      @param {String} responseText
      @return {Object}
    */
    parseErrorResponse(responseText) {
      let json = responseText;
      try {
        json = JSON.parse(responseText);
      } catch (e) {
        // ignored
      }
      return json;
    }

    /**
      @method normalizeErrorResponse
      @private
      @param  {Number} status
      @param  {Object} headers
      @param  {Object} payload
      @return {Array} errors payload
    */
    normalizeErrorResponse(status, _headers, payload) {
      if (payload && typeof payload === 'object' && 'errors' in payload && Array.isArray(payload.errors)) {
        return payload.errors;
      } else {
        return [{
          status: `${status}`,
          // Set to a string per the JSON API spec: https://jsonapi.org/format/#errors
          title: 'The backend responded with an error',
          detail: `${payload}`
        }];
      }
    }

    /**
      Generates a detailed ("friendly") error message, with plenty
      of information for debugging (good luck!)
       @method generatedDetailedMessage
      @private
      @param  {Number} status
      @param  {Object} headers
      @param  {Object} payload
      @param  {Object} requestData
      @return {String} detailed error message
    */
    generatedDetailedMessage(status, headers, payload, requestData) {
      let shortenedPayload;
      let payloadContentType = headers['content-type'] || 'Empty Content-Type';
      if (payloadContentType === 'text/html' && typeof payload === 'string' && payload.length > 250) {
        shortenedPayload = '[Omitted Lengthy HTML]';
      } else {
        shortenedPayload = payload;
      }
      let requestDescription = requestData.method + ' ' + requestData.url;
      let payloadDescription = 'Payload (' + payloadContentType + ')';
      return ['Ember Data Request ' + requestDescription + ' returned a ' + status, payloadDescription, shortenedPayload].join('\n');
    }

    /**
      Used by `findAll` and `findRecord` to build the query's `data` hash
      supplied to the ajax method.
       @method buildQuery
      @since 2.5.0
      @public
      @param  {Snapshot} snapshot
      @return {Object}
    */
    buildQuery(snapshot) {
      let query = {};
      if (snapshot) {
        let {
          include
        } = snapshot;
        if (include) {
          query.include = include;
        }
      }
      return query;
    }
  }, (_applyDecoratedDescriptor(_class.prototype, "fastboot", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "fastboot"), _class.prototype)), _class));
  function ajaxSuccess(adapter, payload, requestData, responseData) {
    let response;
    try {
      response = adapter.handleResponse(responseData.status, responseData.headers, payload, requestData);
    } catch (error) {
      return _rsvp.Promise.reject(error);
    }
    if (response && response.isAdapterError) {
      return _rsvp.Promise.reject(response);
    } else {
      return response;
    }
  }
  function ajaxError(adapter, payload, requestData, responseData) {
    let error;
    if (responseData.errorThrown instanceof Error && payload !== '') {
      error = responseData.errorThrown;
    } else if (responseData.textStatus === 'timeout') {
      error = new _error.TimeoutError();
    } else if (responseData.textStatus === 'abort' || responseData.status === 0) {
      error = handleAbort(requestData, responseData);
    } else {
      try {
        error = adapter.handleResponse(responseData.status, responseData.headers, payload || responseData.errorThrown, requestData);
      } catch (e) {
        error = e;
      }
    }
    return error;
  }

  // Adapter abort error to include any relevent info, e.g. request/response:
  function handleAbort(requestData, responseData) {
    let {
      method,
      url,
      errorThrown
    } = requestData;
    let {
      status
    } = responseData;
    let msg = `Request failed: ${method} ${url} ${errorThrown || ''}`;
    let errors = [{
      title: 'Adapter Error',
      detail: msg.trim(),
      status
    }];
    return new _error.AbortError(errors);
  }

  //From http://stackoverflow.com/questions/280634/endswith-in-javascript
  function endsWith(string, suffix) {
    if (typeof String.prototype.endsWith !== 'function') {
      return string.indexOf(suffix, string.length - suffix.length) !== -1;
    } else {
      return string.endsWith(suffix);
    }
  }
  function fetchSuccessHandler(adapter, payload, response, requestData) {
    let responseData = fetchResponseData(response);
    return ajaxSuccess(adapter, payload, requestData, responseData);
  }
  function fetchErrorHandler(adapter, payload, response, errorThrown, requestData) {
    let responseData = fetchResponseData(response);
    if (responseData.status === 200 && payload instanceof Error) {
      responseData.errorThrown = payload;
      payload = responseData.errorThrown.payload;
    } else {
      responseData.errorThrown = errorThrown;
      if (typeof payload === 'string') {
        payload = adapter.parseErrorResponse(payload);
      }
    }
    return ajaxError(adapter, payload, requestData, responseData);
  }
  function ajaxSuccessHandler(adapter, payload, jqXHR, requestData) {
    let responseData = ajaxResponseData(jqXHR);
    return ajaxSuccess(adapter, payload, requestData, responseData);
  }
  function ajaxErrorHandler(adapter, jqXHR, errorThrown, requestData) {
    let responseData = ajaxResponseData(jqXHR);
    responseData.errorThrown = errorThrown;
    let payload = adapter.parseErrorResponse(jqXHR.responseText);
    if (true /* DEBUG */) {
      let message = `The server returned an empty string for ${requestData.method} ${requestData.url}, which cannot be parsed into a valid JSON. Return either null or {}.`;
      let validJSONString = !(responseData.textStatus === 'parsererror' && payload === '');
      (true && (0, _debug.warn)(message, validJSONString, {
        id: 'ds.adapter.returned-empty-string-as-JSON'
      }));
    }
    return ajaxError(adapter, payload, requestData, responseData);
  }
  function fetchResponseData(response) {
    return {
      status: response.status,
      textStatus: response.statusText,
      headers: headersToObject(response.headers)
    };
  }
  function ajaxResponseData(jqXHR) {
    return {
      status: jqXHR.status,
      textStatus: jqXHR.statusText,
      headers: (0, _private.parseResponseHeaders)(jqXHR.getAllResponseHeaders())
    };
  }
  function headersToObject(headers) {
    let headersObject = {};
    if (headers) {
      headers.forEach((value, key) => headersObject[key] = value);
    }
    return headersObject;
  }

  /**
   * Helper function that translates the options passed to `jQuery.ajax` into a format that `fetch` expects.
   *
   * @method fetchOptions
   * @for @ember-data/adapter/rest
   * @param {Object} _options
   * @param {Adapter} adapter
   * @private
   * @returns {Object}
   */
  function fetchOptions(options, adapter) {
    options.credentials = options.credentials || 'same-origin';
    if (options.data) {
      // GET and HEAD requests can't have a `body`
      if (options.method === 'GET' || options.method === 'HEAD') {
        // If no options are passed, Ember Data sets `data` to an empty object, which we test for.
        if (Object.keys(options.data).length && options.url) {
          // Test if there are already query params in the url (mimics jQuey.ajax).
          const queryParamDelimiter = options.url.indexOf('?') > -1 ? '&' : '?';
          options.url += `${queryParamDelimiter}${(0, _private.serializeQueryParams)(options.data)}`;
        }
      } else {
        // NOTE: a request's body cannot be an object, so we stringify it if it is.
        // JSON.stringify removes keys with values of `undefined` (mimics jQuery.ajax).
        // If the data is not a POJO (it's a String, FormData, etc), we just set it.
        // If the data is a string, we assume it's a stringified object.

        /* We check for Objects this way because we want the logic inside the consequent to run
         * if `options.data` is a POJO, not if it is a data structure whose `typeof` returns "object"
         * when it's not (Array, FormData, etc). The reason we don't use `options.data.constructor`
         * to check is in case `data` is an object with no prototype (e.g. created with null).
         */
        if (Object.prototype.toString.call(options.data) === '[object Object]') {
          options.body = JSON.stringify(options.data);
        } else {
          options.body = options.data;
        }
      }
    }
    return options;
  }
  function ajaxOptions(options, adapter) {
    options.dataType = 'json';
    options.context = adapter;
    if (options.data && options.type !== 'GET') {
      options.data = JSON.stringify(options.data);
    }
    options.beforeSend = function (xhr) {
      if (options.headers) {
        Object.keys(options.headers).forEach(key => {
          let headerValue = options.headers && options.headers[key];
          const isString = value => typeof value === 'string';
          if (isString(headerValue)) {
            xhr.setRequestHeader(key, headerValue);
          }
        });
      }
    };
    return options;
  }
  var _default = _exports.default = RESTAdapter;
});
;define("@ember-data/canary-features/default-features", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
   * ## Canary Features
   *
   * EmberData allows users to test features that are implemented but not yet
   * available even in canary.
   *
   * Typically these features represent work that might introduce a new concept,
   * new API, change an API, or risk an unintended change in behavior to consuming
   * applications.
   *
   * Such features have their implementations guarded by a "feature flag", and the
   * flag is only activated once the core-data team is prepared to ship the work
   * in a canary release.
   *
   * ### Installing Canary
   *
   * To test a feature you MUST be using a canary build. Canary builds are published
   * to `npm` and can be installed using a precise tag (such as `ember-data@3.16.0-alpha.1`)
   * or by installing the latest dist-tag published to the `canary` channel.
   *
   * *Using `npm` to install the latest canary*
   *
   * ```cli
   * npm install --save-dev ember-data@canary
   * ```
   *
   * *Using `yarn` to install the latest canary*
   *
   * ```cli
   * yarn add ember-data@canary
   * ```
   *
   * ### Activating a Canary Feature
   *
   * Once you have installed canary, feature-flags can be activated at build-time by an environment
   * variable or at runtime using `window.EmberDataENV`.
   *
   * The "off" branch of feature-flagged code is always stripped from production builds, so you
   * MUST use the build-time environment variable to activate a flag if testing production.
   *
   * The list of available feature-flags is located [here](https://github.com/emberjs/data/tree/master/packages/canary-features/addon/default-features.ts "List of EmberData FeatureFlags")
   *
   * #### Runtime Configuration
   *
   * To configure feature-flags at runtime you will want to configure `window.EmberDataENV = {}` appropriately.
   * You should add this global property in your app prior to your application booting. At the top of
   * your `app.js` file is a convenient location, as is within ` index.html` as a script running prior
   * to loading any other scripts.
   *
   * *Example activating a single feature flags*
   *
   * ```js
   * window.EmberDataENV = {
   *   FEATURES: {
   *     RECORD_DATA_ERRORS: true,
   *   }
   * }
   * ```
   *
   * *Example activating multiple feature flags*
   *
   * ```js
   * window.EmberDataENV = {
   *   FEATURES: {
   *     RECORD_DATA_ERRORS: true,
   *     RECORD_DATA_STATE: true,
   *   }
   * }
   * ```
   *
   * *Example activating all feature flags*
   *
   * ```js
   * window.EmberDataENV = {
   *   ENABLE_OPTIONAL_FEATURES: true
   * }
   * ```
   *
   * #### Build Time Configuration
   *
   * *Example activating a single feature flags*
   *
   * ```js
   * EMBER_DATA_FEATURE_OVERRIDE=SAMPLE_FEATURE_FLAG ember build
   * ```
   *
   * *Example activating multiple feature flags*
   *
   * ```js
   * EMBER_DATA_FEATURE_OVERRIDE=SAMPLE_FEATURE_FLAG,CUSTOM_MODEL_CLASS ember build
   * ```
   *
   * *Example activating all feature flags*
   *
   * ```js
   * EMBER_DATA_FEATURE_OVERRIDE=ENABLE_ALL_OPTIONAL ember build
   * ```
   *
   * ### Preparing an Addon to use a Canary Feature
   *
   * For most addons and most features simple version detection should be
   * enough. Using the provided version compatibility helpers from
   * [ember-compatibility-helpers](https://github.com/pzuraq/ember-compatibility-helpers)
   * the following can be done:
   *
   * ```js
   * if (gte('@ember-data/store', '3.12.0')) {
   *
   * } else {
   *
   * }
   * ```
   *
   * For addons needing more advanced detection [babel-plugin-debug-macros](https://github.com/ember-cli/babel-plugin-debug-macros)
   * can be leveraged to provide code-stripping based on feature presence. For example in your addon's `index.js`:
   *
   * ```js
   * function debugMacros(features) {
   *   let plugins = [
   *     [
   *       require.resolve('babel-plugin-debug-macros'),
   *       {
   *         flags: [
   *           {
   *             source: '<addon-name>/feature-flags',
   *             flags: features,
   *           },
   *         ],
   *       },
   *       '<addon-name>/canary-features-stripping',
   *     ],
   *   ];
   *
   *   return plugins;
   * }
   *
   * module.exports = {
   *   name: '<addon-name>',
   *
   *   init() {
   *     this._super.init.apply(this, arguments);
   *
   *     let features;
   *     try {
   *       features = this.project.require('@ember-data/private-build-infra/src/features')();
   *     } catch (e) {
   *       features = { CUSTOM_MODEL_CLASS: false };
   *     }
   *
   *     this.options = this.options || {};
   *     this.options.babel = this.options.babel || {};
   *     // this ensures that the same `@ember-data/canary-features` processing that the various
   *     // ember-data addons do is done for this addon
   *     this.options.babel.plugins = [...debugMacros(features)];
   *   }
   * }
   * ```
   *
     @module @ember-data/canary-features
     @main @ember-data/canary-features
   */
  /*
    This list of features is used both at build time (by `@ember-data/private-build-infra`)
    and at runtime (by `@ember-data/canary-features`).
  
    The valid values are:
  
    - true - The feature is enabled at all times, and cannot be disabled.
    - false - The feature is disabled at all times, and cannot be enabled.
    - null - The feature is disabled by default, but can be enabled at runtime via `EmberDataENV`.
  */
  var _default = _exports.default = {
    SAMPLE_FEATURE_FLAG: null,
    RECORD_DATA_ERRORS: true,
    RECORD_DATA_STATE: true,
    REQUEST_SERVICE: true,
    CUSTOM_MODEL_CLASS: true,
    REMOVE_RECORD_ARRAY_MANAGER_LEGACY_COMPAT: true
  };
});
;define("@ember-data/canary-features/index", ["exports", "@ember-data/canary-features/default-features"], function (_exports, _defaultFeatures) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SAMPLE_FEATURE_FLAG = _exports.REQUEST_SERVICE = _exports.REMOVE_RECORD_ARRAY_MANAGER_LEGACY_COMPAT = _exports.RECORD_DATA_STATE = _exports.RECORD_DATA_ERRORS = _exports.FEATURES = _exports.CUSTOM_MODEL_CLASS = void 0;
  /* globals EmberDataENV */

  const ENV = typeof EmberDataENV !== 'undefined' && EmberDataENV !== null ? EmberDataENV : {};
  function featureValue(value) {
    if (ENV.ENABLE_OPTIONAL_FEATURES && value === null) {
      return true;
    }
    return value;
  }
  const FEATURES = _exports.FEATURES = Object.assign({}, _defaultFeatures.default, ENV.FEATURES);
  const SAMPLE_FEATURE_FLAG = _exports.SAMPLE_FEATURE_FLAG = featureValue(FEATURES.SAMPLE_FEATURE_FLAG);
  const RECORD_DATA_ERRORS = _exports.RECORD_DATA_ERRORS = featureValue(FEATURES.RECORD_DATA_ERRORS);
  const RECORD_DATA_STATE = _exports.RECORD_DATA_STATE = featureValue(FEATURES.RECORD_DATA_STATE);
  const REQUEST_SERVICE = _exports.REQUEST_SERVICE = featureValue(FEATURES.REQUEST_SERVICE);
  const CUSTOM_MODEL_CLASS = _exports.CUSTOM_MODEL_CLASS = featureValue(FEATURES.CUSTOM_MODEL_CLASS);
  const REMOVE_RECORD_ARRAY_MANAGER_LEGACY_COMPAT = _exports.REMOVE_RECORD_ARRAY_MANAGER_LEGACY_COMPAT = featureValue(FEATURES.REMOVE_RECORD_ARRAY_MANAGER_LEGACY_COMPAT);
});
;define("@ember-data/debug/index", ["exports", "@ember/array", "@ember/debug", "@ember/debug/data-adapter", "@ember/object", "@ember/object/observers", "@ember/service", "@ember/string", "@ember-data/debug/setup"], function (_exports, _array, _debug, _dataAdapter, _object, _observers, _service, _string, _setup) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"@ember/array",0,"@ember/debug",0,"@ember/debug/data-adapter",0,"@ember/object",0,"@ember/object/observers",0,"@ember/service",0,"@ember/string",0,"@ember-data/debug/setup"eaimeta@70e063a35619d71f
  /**
    # Overview
  
    This package provides the `DataAdapter` which the [Ember Inspector](https://github.com/emberjs/ember-inspector)
    uses to subscribe and retrieve information for the `data` tab in the inspector.
  
    This package adds roughly .6 KB when minified and compressed to your application in production; however,
    you can opt out of shipping this addon in production via options in `ember-cli-build.js`
  
    ```js
    let app = new EmberApp(defaults, {
      emberData: {
        includeDataAdapterInProduction: false
      }
    });
    ```
  
    When using `ember-data` as a dependency of your app, the default is to ship the inspector support to production.
  
    When not using `ember-data` as a dependency but instead using EmberData via declaring specific `@ember-data/<package>`
    dependencies the default is to not ship to production.
  
    @module @ember-data/debug
    @main @ember-data/debug
  */
  /**
    Implements `@ember/debug/data-adapter` with for EmberData
    integration with the ember-inspector.
  
    @class InspectorDataAdapter
    @extends DataAdapter
    @private
  */
  var _default = _exports.default = _dataAdapter.default.extend({
    store: (0, _service.inject)('store'),
    /**
      Specifies how records can be filtered based on the state of the record
      Records returned will need to have a `filterValues`
      property with a key for every name in the returned array
       @method getFilters
      @private
      @return {Array} List of objects defining filters
       The object should have a `name` and `desc` property
    */
    getFilters() {
      return [{
        name: 'isNew',
        desc: 'New'
      }, {
        name: 'isModified',
        desc: 'Modified'
      }, {
        name: 'isClean',
        desc: 'Clean'
      }];
    },
    _nameToClass(type) {
      return (0, _object.get)(this, 'store').modelFor(type);
    },
    /**
      Fetch the model types and observe them for changes.
      Maintains the list of model types without needing the Model package for detection.
       @method watchModelTypes
      @private
      @param {Function} typesAdded Callback to call to add types.
      Takes an array of objects containing wrapped types (returned from `wrapModelType`).
      @param {Function} typesUpdated Callback to call when a type has changed.
      Takes an array of objects containing wrapped types.
      @return {Function} Method to call to remove all observers
    */
    watchModelTypes(typesAdded, typesUpdated) {
      const store = (0, _object.get)(this, 'store');
      const __createRecordData = store._createRecordData;
      const _releaseMethods = [];
      const discoveredTypes = (0, _setup.typesMapFor)(store);

      // Add any models that were added during initialization of the app, before the inspector was opened
      discoveredTypes.forEach((_, type) => {
        this.watchTypeIfUnseen(store, discoveredTypes, type, typesAdded, typesUpdated, _releaseMethods);
      });

      // Overwrite _createRecordData so newly added models will get added to the list
      store._createRecordData = identifier => {
        this.watchTypeIfUnseen(store, discoveredTypes, identifier.type, typesAdded, typesUpdated, _releaseMethods);
        return __createRecordData.call(store, identifier);
      };
      let release = () => {
        _releaseMethods.forEach(fn => fn());
        store._createRecordData = __createRecordData;
        // reset the list so the models can be added if the inspector is re-opened
        // the entries are set to false instead of removed, since the models still exist in the app
        // we just need the inspector to become aware of them
        discoveredTypes.forEach((value, key) => {
          discoveredTypes.set(key, false);
        });
        this.releaseMethods.removeObject(release);
      };
      this.releaseMethods.pushObject(release);
      return release;
    },
    /**
     * Loop over the discovered types and use the callbacks from watchModelTypes to notify
     * the consumer of this adapter about the mdoels.
     *
     * @method watchTypeIfUnseen
     * @param {store} store
     * @param {Map} discoveredTypes
     * @param {String} type
     * @param {Function} typesAdded
     * @param {Function} typesUpdated
     * @param {Array} releaseMethods
     * @private
     */
    watchTypeIfUnseen(store, discoveredTypes, type, typesAdded, typesUpdated, releaseMethods) {
      if (discoveredTypes.get(type) !== true) {
        let klass = store.modelFor(type);
        let wrapped = this.wrapModelType(klass, type);
        releaseMethods.push(this.observeModelType(type, typesUpdated));
        typesAdded([wrapped]);
        discoveredTypes.set(type, true);
      }
    },
    /**
      Creates a human readable string used for column headers
       @method columnNameToDesc
      @private
      @param {String} name The attribute name
      @return {String} Human readable string based on the attribute name
    */
    columnNameToDesc(name) {
      return (0, _string.capitalize)((0, _string.underscore)(name).replace(/_/g, ' ').trim());
    },
    /**
      Get the columns for a given model type
       @method columnsForType
      @private
      @param {Model} typeClass
      @return {Array} An array of columns of the following format:
       name: {String} The name of the column
       desc: {String} Humanized description (what would show in a table column name)
    */
    columnsForType(typeClass) {
      let columns = [{
        name: 'id',
        desc: 'Id'
      }];
      let count = 0;
      let self = this;
      (0, _object.get)(typeClass, 'attributes').forEach((meta, name) => {
        if (count++ > self.attributeLimit) {
          return false;
        }
        let desc = this.columnNameToDesc(name);
        columns.push({
          name: name,
          desc: desc
        });
      });
      return columns;
    },
    /**
      Fetches all loaded records for a given type
       @method getRecords
      @private
      @param {Model} modelClass of the record
      @param {String} modelName of the record
      @return {Array} An array of Model records
       This array will be observed for changes,
       so it should update when new records are added/removed
    */
    getRecords(modelClass, modelName) {
      if (arguments.length < 2) {
        // Legacy Ember.js < 1.13 support
        let containerKey = modelClass._debugContainerKey;
        if (containerKey) {
          let match = containerKey.match(/model:(.*)/);
          if (match !== null) {
            modelName = match[1];
          }
        }
      }
      (true && !(!!modelName) && (0, _debug.assert)('Cannot find model name. Please upgrade to Ember.js >= 1.13 for Ember Inspector support', !!modelName));
      return this.get('store').peekAll(modelName);
    },
    /**
      Gets the values for each column
      This is the attribute values for a given record
       @method getRecordColumnValues
      @private
      @param {Model} record to get values from
      @return {Object} Keys should match column names defined by the model type
    */
    getRecordColumnValues(record) {
      let count = 0;
      let columnValues = {
        id: (0, _object.get)(record, 'id')
      };
      record.eachAttribute(key => {
        if (count++ > this.attributeLimit) {
          return false;
        }
        columnValues[key] = (0, _object.get)(record, key);
      });
      return columnValues;
    },
    /**
      Returns keywords to match when searching records
       @method getRecordKeywords
      @private
      @param {Model} record
      @return {Array} Relevant keywords for search based on the record's attribute values
    */
    getRecordKeywords(record) {
      let keywords = [];
      let keys = (0, _array.A)(['id']);
      record.eachAttribute(key => keys.push(key));
      keys.forEach(key => keywords.push((0, _object.get)(record, key)));
      return keywords;
    },
    /**
      Returns the values of filters defined by `getFilters`
      These reflect the state of the record
       @method getRecordFilterValues
      @private
      @param {Model} record
      @return {Object} The record state filter values
    */
    getRecordFilterValues(record) {
      return {
        isNew: record.get('isNew'),
        isModified: record.get('hasDirtyAttributes') && !record.get('isNew'),
        isClean: !record.get('hasDirtyAttributes')
      };
    },
    /**
      Returns a color that represents the record's state
      Possible colors: black, blue, green
       @method getRecordColor
      @private
      @param {Model} record
      @return {String} The record color
    */
    getRecordColor(record) {
      let color = 'black';
      if (record.get('isNew')) {
        color = 'green';
      } else if (record.get('hasDirtyAttributes')) {
        color = 'blue';
      }
      return color;
    },
    /**
      Observes all relevant properties and re-sends the wrapped record
      when a change occurs
       @method observeRecord
      @private
      @param {Model} record
      @param {Function} recordUpdated Callback used to notify changes
      @return {Function} The function to call to remove all observers
    */
    observeRecord(record, recordUpdated) {
      let releaseMethods = (0, _array.A)();
      let keysToObserve = (0, _array.A)(['id', 'isNew', 'hasDirtyAttributes']);
      record.eachAttribute(key => keysToObserve.push(key));
      let adapter = this;
      keysToObserve.forEach(function (key) {
        let handler = function () {
          recordUpdated(adapter.wrapRecord(record));
        };
        (0, _observers.addObserver)(record, key, handler);
        releaseMethods.push(function () {
          (0, _observers.removeObserver)(record, key, handler);
        });
      });
      let release = function () {
        releaseMethods.forEach(fn => fn());
      };
      return release;
    }
  });
});
;define("@ember-data/debug/setup", ["exports", "@ember-data/store"], function (_exports, _store) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.typesMapFor = typesMapFor;
  0; //eaimeta@70e063a35619d71f0,"@ember-data/store"eaimeta@70e063a35619d71f
  const StoreTypesMap = new WeakMap();
  function typesMapFor(store) {
    let typesMap = StoreTypesMap.get(store);
    if (typesMap === undefined) {
      typesMap = new Map();
      StoreTypesMap.set(store, typesMap);
    }
    return typesMap;
  }

  // override _createRecordData to add the known models to the typesMap
  const __createRecordData = _store.default.prototype._createRecordData;
  _store.default.prototype._createRecordData = function (identifier) {
    const typesMap = typesMapFor(this);
    if (!typesMap.has(identifier.type)) {
      typesMap.set(identifier.type, false);
    }
    return __createRecordData.call(this, identifier);
  };
  var _default = _exports.default = {
    name: '@ember-data/data-adapter',
    initialize() {}
  };
});
;define('@ember-data/model/-private', ['exports', '@ember/debug', '@ember/object', '@ember-data/store/-private', '@ember/error', '@ember/object/compat', '@ember/runloop', '@ember/utils', '@glimmer/tracking', 'ember', '@ember/array', '@ember/array/proxy', '@ember/object/computed', 'ember-cached-decorator-polyfill', '@ember/object/internals', 'ember-inflector', '@ember/array/mutable', 'rsvp', '@ember/application'], (function (exports, debug, EmberObject, Private, EmberError, compat, runloop, utils, tracking, Ember, EmberArray, ArrayProxy, computed, emberCachedDecoratorPolyfill, internals, emberInflector, MutableArray, rsvp, application) { 'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var EmberObject__default = /*#__PURE__*/_interopDefaultLegacy(EmberObject);
  var EmberError__default = /*#__PURE__*/_interopDefaultLegacy(EmberError);
  var Ember__default = /*#__PURE__*/_interopDefaultLegacy(Ember);
  var EmberArray__default = /*#__PURE__*/_interopDefaultLegacy(EmberArray);
  var ArrayProxy__default = /*#__PURE__*/_interopDefaultLegacy(ArrayProxy);
  var MutableArray__default = /*#__PURE__*/_interopDefaultLegacy(MutableArray);

  function isElementDescriptor(args) {
    let [maybeTarget, maybeKey, maybeDesc] = args;
    return (
      // Ensure we have the right number of args
      args.length === 3 && (
      // Make sure the target is a class or object (prototype)
      typeof maybeTarget === 'function' || typeof maybeTarget === 'object' && maybeTarget !== null) &&
      // Make sure the key is a string
      typeof maybeKey === 'string' && (
      // Make sure the descriptor is the right shape
      typeof maybeDesc === 'object' && maybeDesc !== null && 'enumerable' in maybeDesc && 'configurable' in maybeDesc ||
      // TS compatibility
      maybeDesc === undefined)
    );
  }
  function computedMacroWithOptionalParams(fn) {
    {
      return (...maybeDesc) => isElementDescriptor(maybeDesc) ? fn()(...maybeDesc) : fn(...maybeDesc);
    }
  }

  /**
    @module @ember-data/model
  */

  function getDefaultValue(record, options, key) {
    if (typeof options.defaultValue === 'function') {
      return options.defaultValue.apply(null, arguments);
    } else {
      let defaultValue = options.defaultValue;
      (!(typeof defaultValue !== 'object' || defaultValue === null) && debug.assert(`Non primitive defaultValues are not supported because they are shared between all instances. If you would like to use a complex object as a default value please provide a function that returns the complex object.`, typeof defaultValue !== 'object' || defaultValue === null));
      return defaultValue;
    }
  }

  /**
    `attr` defines an attribute on a [Model](/ember-data/release/classes/Model).
    By default, attributes are passed through as-is, however you can specify an
    optional type to have the value automatically transformed.
    Ember Data ships with four basic transform types: `string`, `number`,
    `boolean` and `date`. You can define your own transforms by subclassing
    [Transform](/ember-data/release/classes/Transform).

    Note that you cannot use `attr` to define an attribute of `id`.

    `attr` takes an optional hash as a second parameter, currently
    supported options are:

    - `defaultValue`: Pass a string or a function to be called to set the attribute
    to a default value if and only if the key is absent from the payload response.

    Example

    ```app/models/user.js
    import Model, { attr } from '@ember-data/model';

    export default class UserModel extends Model {
      @attr('string') username;
      @attr('string') email;
      @attr('boolean', { defaultValue: false }) verified;
    }
    ```

    Default value can also be a function. This is useful it you want to return
    a new object for each attribute.

    ```app/models/user.js
    import Model, { attr } from '@ember-data/model';

    export default class UserModel extends Model {
      @attr('string') username;
      @attr('string') email;

      @attr({
        defaultValue() {
          return {};
        }
      })
      settings;
    }
    ```

    The `options` hash is passed as second argument to a transforms'
    `serialize` and `deserialize` method. This allows to configure a
    transformation and adapt the corresponding value, based on the config:

    ```app/models/post.js
    import Model, { attr } from '@ember-data/model';

    export default class PostModel extends Model {
      @attr('text', {
        uppercase: true
      })
      text;
    }
    ```

    ```app/transforms/text.js
    import Transform from '@ember-data/serializer/transform';

    export default class TextTransform extends Transform {
      serialize(value, options) {
        if (options.uppercase) {
          return value.toUpperCase();
        }

        return value;
      }

      deserialize(value) {
        return value;
      }
    }
    ```

    @method attr
    @public
    @static
    @for @ember-data/model
    @param {String|Object} type the attribute type
    @param {Object} options a hash of options
    @return {Attribute}
  */
  function attr(type, options) {
    if (typeof type === 'object') {
      options = type;
      type = undefined;
    } else {
      options = options || {};
    }
    let meta = {
      type: type,
      isAttribute: true,
      kind: 'attribute',
      options: options
    };
    return EmberObject.computed({
      get(key) {
        {
          if (['_internalModel', 'currentState'].indexOf(key) !== -1) {
            throw new Error(`'${key}' is a reserved property name on instances of classes extending Model. Please choose a different property name for your attr on ${this.constructor.toString()}`);
          }
        }
        let recordData = Private.recordDataFor(this);
        if (recordData.hasAttr(key)) {
          return recordData.getAttr(key);
        } else {
          return getDefaultValue(this, options, key);
        }
      },
      set(key, value) {
        {
          if (['_internalModel', 'currentState'].indexOf(key) !== -1) {
            throw new Error(`'${key}' is a reserved property name on instances of classes extending Model. Please choose a different property name for your attr on ${this.constructor.toString()}`);
          }
        }
        if (!this.isValid) {
          let oldValue = this._internalModel._recordData.getAttr(key);
          if (oldValue !== value) {
            const {
              errors
            } = this;
            if (errors.get(key)) {
              errors.remove(key);
              this.___recordState.cleanErrorRequests();
            }
          }
        }
        return this._internalModel.setDirtyAttribute(key, value);
      }
    }).meta(meta);
  }
  var attr$1 = computedMacroWithOptionalParams(attr);

  /**
    @module @ember-data/model
  */

  /**
    `belongsTo` is used to define One-To-One and One-To-Many
    relationships on a [Model](/ember-data/release/classes/Model).


    `belongsTo` takes an optional hash as a second parameter, currently
    supported options are:

    - `async`: A boolean value used to explicitly declare this to be an async relationship. The default is true.
    - `inverse`: A string used to identify the inverse property on a
      related model in a One-To-Many relationship. See [Explicit Inverses](#explicit-inverses)
    - `polymorphic` A boolean value to mark the relationship as polymorphic

    #### One-To-One
    To declare a one-to-one relationship between two models, use
    `belongsTo`:

    ```app/models/user.js
    import Model, { belongsTo } from '@ember-data/model';

    export default class UserModel extends Model {
      @belongsTo('profile') profile;
    }
    ```

    ```app/models/profile.js
    import Model, { belongsTo } from '@ember-data/model';

    export default class ProfileModel extends Model {
      @belongsTo('user') user;
    }
    ```

    #### One-To-Many
    To declare a one-to-many relationship between two models, use
    `belongsTo` in combination with `hasMany`, like this:

    ```app/models/post.js
    import Model, { hasMany } from '@ember-data/model';

    export default class PostModel extends Model {
      @hasMany('comment') comments;
    }
    ```

    ```app/models/comment.js
    import Model, { belongsTo } from '@ember-data/model';

    export default class CommentModel extends Model {
      @belongsTo('post') post;
    }
    ```

    You can avoid passing a string as the first parameter. In that case Ember Data
    will infer the type from the key name.

    ```app/models/comment.js
    import Model, { belongsTo } from '@ember-data/model';

    export default class CommentModel extends Model {
      @belongsTo post;
    }
    ```

    will lookup for a Post type.

    #### Sync relationships

    Ember Data resolves sync relationships with the related resources
    available in its local store, hence it is expected these resources
    to be loaded before or along-side the primary resource.

    ```app/models/comment.js
    import Model, { belongsTo } from '@ember-data/model';

    export default class CommentModel extends Model {
      @belongsTo('post', {
        async: false
      })
      post;
    }
    ```

    In contrast to async relationship, accessing a sync relationship
    will always return the record (Model instance) for the existing
    local resource, or null. But it will error on access when
    a related resource is known to exist and it has not been loaded.

    ```
    let post = comment.get('post');

    ```

    @method belongsTo
    @public
    @static
    @for @ember-data/model
    @param {String} modelName (optional) type of the relationship
    @param {Object} options (optional) a hash of options
    @return {Ember.computed} relationship
  */
  function belongsTo(modelName, options) {
    let opts, userEnteredModelName;
    if (typeof modelName === 'object') {
      opts = modelName;
      userEnteredModelName = undefined;
    } else {
      opts = options;
      userEnteredModelName = modelName;
    }
    (!(typeof userEnteredModelName === 'string' || typeof userEnteredModelName === 'undefined') && debug.assert('The first argument to belongsTo must be a string representing a model type key, not an instance of ' + debug.inspect(userEnteredModelName) + ". E.g., to define a relation to the Person model, use belongsTo('person')", typeof userEnteredModelName === 'string' || typeof userEnteredModelName === 'undefined'));
    opts = opts || {};
    if (!('async' in opts)) {
      opts.async = true;
    }
    let meta = {
      type: userEnteredModelName,
      isRelationship: true,
      options: opts,
      kind: 'belongsTo',
      name: 'Belongs To',
      key: null
    };
    return EmberObject.computed({
      get(key) {
        {
          if (['_internalModel', 'recordData', 'currentState'].indexOf(key) !== -1) {
            throw new Error(`'${key}' is a reserved property name on instances of classes extending Model. Please choose a different property name for your belongsTo on ${this.constructor.toString()}`);
          }
          if (Object.prototype.hasOwnProperty.call(opts, 'serialize')) {
            (debug.warn(`You provided a serialize option on the "${key}" property in the "${this._internalModel.modelName}" class, this belongs in the serializer. See Serializer and it's implementations https://api.emberjs.com/ember-data/release/classes/Serializer`, false, {
              id: 'ds.model.serialize-option-in-belongs-to'
            }));
          }
          if (Object.prototype.hasOwnProperty.call(opts, 'embedded')) {
            (debug.warn(`You provided an embedded option on the "${key}" property in the "${this._internalModel.modelName}" class, this belongs in the serializer. See EmbeddedRecordsMixin https://api.emberjs.com/ember-data/release/classes/EmbeddedRecordsMixin`, false, {
              id: 'ds.model.embedded-option-in-belongs-to'
            }));
          }
        }
        return this._internalModel.getBelongsTo(key);
      },
      set(key, value) {
        {
          if (['_internalModel', 'recordData', 'currentState'].indexOf(key) !== -1) {
            throw new Error(`'${key}' is a reserved property name on instances of classes extending Model. Please choose a different property name for your belongsTo on ${this.constructor.toString()}`);
          }
        }
        this.store._backburner.join(() => {
          this._internalModel.setDirtyBelongsTo(key, value);
        });
        return this._internalModel.getBelongsTo(key);
      }
    }).meta(meta);
  }
  var belongsTo$1 = computedMacroWithOptionalParams(belongsTo);

  /**
    `hasMany` is used to define One-To-Many and Many-To-Many
    relationships on a [Model](/ember-data/release/classes/Model).

    `hasMany` takes an optional hash as a second parameter, currently
    supported options are:

    - `async`: A boolean value used to explicitly declare this to be an async relationship. The default is true.
    - `inverse`: A string used to identify the inverse property on a related model.
    - `polymorphic` A boolean value to mark the relationship as polymorphic

    #### One-To-Many
    To declare a one-to-many relationship between two models, use
    `belongsTo` in combination with `hasMany`, like this:

    ```app/models/post.js
    import Model, { hasMany } from '@ember-data/model';

    export default class PostModel extends Model {
      @hasMany('comment') comments;
    }
    ```

    ```app/models/comment.js
    import Model, { belongsTo } from '@ember-data/model';

    export default class CommentModel extends Model {
      @belongsTo('post') post;
    }
    ```

    #### Many-To-Many
    To declare a many-to-many relationship between two models, use
    `hasMany`:

    ```app/models/post.js
    import Model, { hasMany } from '@ember-data/model';

    export default class PostModel extends Model {
      @hasMany('tag') tags;
    }
    ```

    ```app/models/tag.js
    import Model, { hasMany } from '@ember-data/model';

    export default class TagModel extends Model {
      @hasMany('post') posts;
    }
    ```

    You can avoid passing a string as the first parameter. In that case Ember Data
    will infer the type from the singularized key name.

    ```app/models/post.js
    import Model, { hasMany } from '@ember-data/model';

    export default class PostModel extends Model {
      @hasMany tags;
    }
    ```

    will lookup for a Tag type.

    #### Explicit Inverses

    Ember Data will do its best to discover which relationships map to
    one another. In the one-to-many code above, for example, Ember Data
    can figure out that changing the `comments` relationship should update
    the `post` relationship on the inverse because post is the only
    relationship to that model.

    However, sometimes you may have multiple `belongsTo`/`hasMany` for the
    same type. You can specify which property on the related model is
    the inverse using `hasMany`'s `inverse` option:

    ```app/models/comment.js
    import Model, { belongsTo } from '@ember-data/model';

    export default class CommentModel extends Model {
      @belongsTo('post') onePost;
      @belongsTo('post') twoPost
      @belongsTo('post') redPost;
      @belongsTo('post') bluePost;
    }
    ```

    ```app/models/post.js
    import Model from '@ember-data/model';
    import { hasMany } from '@ember-decorators/data';

    export default class PostModel extends Model {
      @hasMany('comment', {
        inverse: 'redPost'
      })
      comments;
    }
    ```

    You can also specify an inverse on a `belongsTo`, which works how
    you'd expect.

    #### Sync relationships

    Ember Data resolves sync relationships with the related resources
    available in its local store, hence it is expected these resources
    to be loaded before or along-side the primary resource.

    ```app/models/post.js
    import Model, { hasMany } from '@ember-data/model';

    export default class PostModel extends Model {
      @hasMany('comment', {
        async: false
      })
      comments;
    }
    ```

    In contrast to async relationship, accessing a sync relationship
    will always return a [ManyArray](/ember-data/release/classes/ManyArray) instance
    containing the existing local resources. But it will error on access
    when any of the known related resources have not been loaded.

    ```
    post.get('comments').forEach((comment) => {

    });

    ```

    If you are using `links` with sync relationships, you have to use
    `ref.reload` to fetch the resources.

    @method hasMany
    @public
    @static
    @for @ember-data/model
    @param {String} type (optional) type of the relationship
    @param {Object} options (optional) a hash of options
    @return {Ember.computed} relationship
  */
  function hasMany(type, options) {
    if (typeof type === 'object') {
      options = type;
      type = undefined;
    }
    (!(typeof type === 'string' || typeof type === 'undefined') && debug.assert(`The first argument to hasMany must be a string representing a model type key, not an instance of ${debug.inspect(type)}. E.g., to define a relation to the Comment model, use hasMany('comment')`, typeof type === 'string' || typeof type === 'undefined'));
    options = options || {};
    if (!('async' in options)) {
      options.async = true;
    }

    // Metadata about relationships is stored on the meta of
    // the relationship. This is used for introspection and
    // serialization. Note that `key` is populated lazily
    // the first time the CP is called.
    let meta = {
      type,
      options,
      isRelationship: true,
      kind: 'hasMany',
      name: 'Has Many',
      key: null
    };
    return EmberObject.computed({
      get(key) {
        {
          if (['_internalModel', 'recordData', 'currentState'].indexOf(key) !== -1) {
            throw new Error(`'${key}' is a reserved property name on instances of classes extending Model. Please choose a different property name for your hasMany on ${this.constructor.toString()}`);
          }
        }
        return this._internalModel.getHasMany(key);
      },
      set(key, records) {
        {
          if (['_internalModel', 'recordData', 'currentState'].indexOf(key) !== -1) {
            throw new Error(`'${key}' is a reserved property name on instances of classes extending Model. Please choose a different property name for your hasMany on ${this.constructor.toString()}`);
          }
        }
        let internalModel = this._internalModel;
        this.store._backburner.join(() => {
          internalModel.setDirtyHasMany(key, records);
        });
        return internalModel.getHasMany(key);
      }
    }).meta(meta);
  }
  var hasMany$1 = computedMacroWithOptionalParams(hasMany);

  /**
    @module @ember-data/store
  */

  /**
    Holds validation errors for a given record, organized by attribute names.

    This class is not directly instantiable.

    Every `Model` has an `errors` property that is an instance of
    `Errors`. This can be used to display validation error
    messages returned from the server when a `record.save()` rejects.

    For Example, if you had a `User` model that looked like this:

    ```app/models/user.js
    import Model, { attr } from '@ember-data/model';

    export default class UserModel extends Model {
      @attr('string') username;
      @attr('string') email;
    }
    ```
    And you attempted to save a record that did not validate on the backend:

    ```javascript
    let user = store.createRecord('user', {
      username: 'tomster',
      email: 'invalidEmail'
    });
    user.save();
    ```

    Your backend would be expected to return an error response that described
    the problem, so that error messages can be generated on the app.

    API responses will be translated into instances of `Errors` differently,
    depending on the specific combination of adapter and serializer used. You
    may want to check the documentation or the source code of the libraries
    that you are using, to know how they expect errors to be communicated.

    Errors can be displayed to the user by accessing their property name
    to get an array of all the error objects for that property. Each
    error object is a JavaScript object with two keys:

    - `message` A string containing the error message from the backend
    - `attribute` The name of the property associated with this error message

    ```handlebars
    <label>Username: <Input @value={{@model.username}} /> </label>
    {{#each @model.errors.username as |error|}}
      <div class="error">
        {{error.message}}
      </div>
    {{/each}}

    <label>Email: <Input @value={{@model.email}} /> </label>
    {{#each @model.errors.email as |error|}}
      <div class="error">
        {{error.message}}
      </div>
    {{/each}}
    ```

    You can also access the special `messages` property on the error
    object to get an array of all the error strings.

    ```handlebars
    {{#each @model.errors.messages as |message|}}
      <div class="error">
        {{message}}
      </div>
    {{/each}}
    ```

    @class Errors
    @public
    @extends Ember.ArrayProxy
   */
  var Errors = ArrayProxy__default["default"].extend({
    /**
      Register with target handler
       @method _registerHandlers
      @private
    */
    _registerHandlers(becameInvalid, becameValid) {
      this._registeredHandlers = {
        becameInvalid,
        becameValid
      };
    },
    /**
      @property errorsByAttributeName
      @type {MapWithDefault}
      @private
    */
    errorsByAttributeName: EmberObject.computed(function () {
      return new Map();
    }),
    /**
      Returns errors for a given attribute
       ```javascript
      let user = store.createRecord('user', {
        username: 'tomster',
        email: 'invalidEmail'
      });
      user.save().catch(function(){
        user.get('errors').errorsFor('email'); // returns:
        // [{attribute: "email", message: "Doesn't look like a valid email."}]
      });
      ```
       @method errorsFor
      @public
      @param {String} attribute
      @return {Array}
    */
    errorsFor(attribute) {
      let map = EmberObject.get(this, 'errorsByAttributeName');
      let errors = map.get(attribute);
      if (errors === undefined) {
        errors = EmberArray.A();
        map.set(attribute, errors);
      }

      // Errors may be a native array with extensions turned on. Since we access
      // the array via a method, and not a computed or using `Ember.get`, it does
      // not entangle properly with autotracking, so we entangle manually by
      // getting the `[]` property.
      EmberObject.get(errors, '[]');
      return errors;
    },
    /**
      An array containing all of the error messages for this
      record. This is useful for displaying all errors to the user.
       ```handlebars
      {{#each @model.errors.messages as |message|}}
        <div class="error">
          {{message}}
        </div>
      {{/each}}
      ```
       @property messages
      @public
      @type {Array}
    */
    messages: computed.mapBy('content', 'message'),
    /**
      @property content
      @type {Array}
      @private
    */
    content: EmberObject.computed(function () {
      return EmberArray.A();
    }),
    /**
      @method unknownProperty
      @private
    */
    unknownProperty(attribute) {
      let errors = this.errorsFor(attribute);
      if (errors.length === 0) {
        return undefined;
      }
      return errors;
    },
    /**
      Total number of errors.
       @property length
      @type {Number}
      @public
      @readOnly
    */

    /**
      `true` if we have no errors.
       @property isEmpty
      @type {Boolean}
      @public
      @readOnly
    */
    isEmpty: computed.not('length').readOnly(),
    /**
     Manually adds errors to the record. This will trigger the `becameInvalid` event/ lifecycle method on
      the record and transition the record into an `invalid` state.
      Example
     ```javascript
      let errors = get(user, 'errors');
       // add multiple errors
      errors.add('password', [
        'Must be at least 12 characters',
        'Must contain at least one symbol',
        'Cannot contain your name'
      ]);
       errors.errorsFor('password');
      // =>
      // [
      //   { attribute: 'password', message: 'Must be at least 12 characters' },
      //   { attribute: 'password', message: 'Must contain at least one symbol' },
      //   { attribute: 'password', message: 'Cannot contain your name' },
      // ]
       // add a single error
      errors.add('username', 'This field is required');
       errors.errorsFor('username');
      // =>
      // [
      //   { attribute: 'username', message: 'This field is required' },
      // ]
     ```
    @method add
      @public
    @param {string} attribute - the property name of an attribute or relationship
    @param {string[]|string} messages - an error message or array of error messages for the attribute
     */
    add(attribute, messages) {
      let wasEmpty = EmberObject.get(this, 'isEmpty');
      this._add(attribute, messages);
      if (wasEmpty && !EmberObject.get(this, 'isEmpty')) {
        this._registeredHandlers && this._registeredHandlers.becameInvalid();
      }
    },
    /**
      Adds error messages to a given attribute without sending event.
       @method _add
      @private
    */
    _add(attribute, messages) {
      messages = this._findOrCreateMessages(attribute, messages);
      this.addObjects(messages);
      this.errorsFor(attribute).addObjects(messages);
      this.notifyPropertyChange(attribute);
    },
    /**
      @method _findOrCreateMessages
      @private
    */
    _findOrCreateMessages(attribute, messages) {
      let errors = this.errorsFor(attribute);
      let messagesArray = EmberArray.makeArray(messages);
      let _messages = new Array(messagesArray.length);
      for (let i = 0; i < messagesArray.length; i++) {
        let message = messagesArray[i];
        let err = errors.findBy('message', message);
        if (err) {
          _messages[i] = err;
        } else {
          _messages[i] = {
            attribute: attribute,
            message: message
          };
        }
      }
      return _messages;
    },
    /**
     Manually removes all errors for a given member from the record.
       This will transition the record into a `valid` state, and
      triggers the `becameValid` event and lifecycle method.
      Example:
      ```javascript
      let errors = get('user', errors);
      errors.add('phone', ['error-1', 'error-2']);
       errors.errorsFor('phone');
      // =>
      // [
      //   { attribute: 'phone', message: 'error-1' },
      //   { attribute: 'phone', message: 'error-2' },
      // ]
       errors.remove('phone');
       errors.errorsFor('phone');
      // => undefined
     ```
     @method remove
      @public
     @param {string} member - the property name of an attribute or relationship
     */
    remove(attribute) {
      if (EmberObject.get(this, 'isEmpty')) {
        return;
      }
      this._remove(attribute);
      if (EmberObject.get(this, 'isEmpty')) {
        this._registeredHandlers && this._registeredHandlers.becameValid();
      }
    },
    /**
      Removes all error messages from the given attribute without sending event.
       @method _remove
      @private
    */
    _remove(attribute) {
      if (EmberObject.get(this, 'isEmpty')) {
        return;
      }
      let content = this.rejectBy('attribute', attribute);
      EmberObject.get(this, 'content').setObjects(content);

      // Although errorsByAttributeName.delete is technically enough to sync errors state, we also
      // must mutate the array as well for autotracking
      let errors = this.errorsFor(attribute);
      for (let i = 0; i < errors.length; i++) {
        if (errors[i].attribute === attribute) {
          // .replace from Ember.NativeArray is necessary. JS splice will not work.
          errors.replace(i, 1);
        }
      }
      EmberObject.get(this, 'errorsByAttributeName').delete(attribute);
      this.notifyPropertyChange(attribute);
      this.notifyPropertyChange('length');
    },
    /**
     Manually clears all errors for the record.
       This will transition the record into a `valid` state, and
       will trigger the `becameValid` event and lifecycle method.
     Example:
      ```javascript
     let errors = get('user', errors);
     errors.add('username', ['error-a']);
     errors.add('phone', ['error-1', 'error-2']);
      errors.errorsFor('username');
     // =>
     // [
     //   { attribute: 'username', message: 'error-a' },
     // ]
      errors.errorsFor('phone');
     // =>
     // [
     //   { attribute: 'phone', message: 'error-1' },
     //   { attribute: 'phone', message: 'error-2' },
     // ]
      errors.clear();
      errors.errorsFor('username');
     // => undefined
      errors.errorsFor('phone');
     // => undefined
      errors.get('messages')
     // => []
     ```
     @method clear
      @public
     */
    clear() {
      if (EmberObject.get(this, 'isEmpty')) {
        return;
      }
      this._clear();
      this._registeredHandlers && this._registeredHandlers.becameValid();
    },
    /**
      Removes all error messages.
      to the record.
       @method _clear
      @private
    */
    _clear() {
      if (EmberObject.get(this, 'isEmpty')) {
        return;
      }
      let errorsByAttributeName = EmberObject.get(this, 'errorsByAttributeName');
      let attributes = [];
      errorsByAttributeName.forEach(function (_, attribute) {
        attributes.push(attribute);
      });
      errorsByAttributeName.clear();
      attributes.forEach(attribute => {
        this.notifyPropertyChange(attribute);
      });
      ArrayProxy__default["default"].prototype.clear.call(this);
    },
    /**
      Checks if there are error messages for the given attribute.
       ```app/controllers/user/edit.js
      import Controller from '@ember/controller';
      import { action } from '@ember/object';
       export default class UserEditController extends Controller {
        @action
        save(user) {
          if (user.get('errors').has('email')) {
            return alert('Please update your email before attempting to save.');
          }
          user.save();
        }
      }
      ```
       @method has
      @public
      @param {String} attribute
      @return {Boolean} true if there some errors on given attribute
    */
    has(attribute) {
      return this.errorsFor(attribute).length > 0;
    }
  });

  function notifyChanges(identifier, value, key, record, store) {
    if (value === 'attributes') {
      if (key) {
        notifyAttribute(store, identifier, key, record);
      } else {
        record.eachAttribute(key => {
          notifyAttribute(store, identifier, key, record);
        });
      }
    } else if (value === 'relationships') {
      if (key) {
        let meta = record.constructor.relationshipsByName.get(key);
        notifyRelationship(store, identifier, key, record, meta);
      } else {
        record.eachRelationship((key, meta) => {
          notifyRelationship(store, identifier, key, record, meta);
        });
      }
    } else if (value === 'identity') {
      record.notifyPropertyChange('id');
    }
  }
  function notifyRelationship(store, identifier, key, record, meta) {
    let internalModel = store._internalModelForResource(identifier);
    if (meta.kind === 'belongsTo') {
      record.notifyPropertyChange(key);
    } else if (meta.kind === 'hasMany') {
      let manyArray = internalModel._manyArrayCache[key];
      if (manyArray) {
        manyArray.notify();

        //We need to notifyPropertyChange in the adding case because we need to make sure
        //we fetch the newly added record in case it is unloaded
        //TODO(Igor): Consider whether we could do this only if the record state is unloaded
        if (!meta.options || meta.options.async || meta.options.async === undefined) {
          record.notifyPropertyChange(key);
        }
      }
    }
  }
  function notifyAttribute(store, identifier, key, record) {
    let currentValue = internals.cacheFor(record, key);
    let internalModel = store._internalModelForResource(identifier);
    if (currentValue !== internalModel._recordData.getAttr(key)) {
      record.notifyPropertyChange(key);
    }
  }

  var _class$2, _descriptor$2, _class3, _descriptor2$1;
  function _initializerDefineProperty$2(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _applyDecoratedDescriptor$2(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function isInvalidError(error) {
    return error && error.isAdapterError === true && error.code === 'InvalidError';
  }

  /**
   * Tag provides a cache for a getter
   * that recomputes only when a specific
   * tracked property that it manages is dirtied.
   *
   * This allows us to bust the cache for a value
   * that otherwise doesn't access anything tracked
   * as well as control the timing of that notification.
   *
   * @internal
   */
  let Tag = (_class$2 = class Tag {
    constructor() {
      _initializerDefineProperty$2(this, "_tracking", _descriptor$2, this);
      this.rev = 1;
      this.isDirty = true;
      this.value = undefined;
    }
    subscribe() {
      this._tracking;
    }
    notify() {
      this.isDirty = true;
      this._tracking = this.rev;
      this.rev++;
    }
    consume(v) {
      this.isDirty = false;
      this.value = v; // set cached value
    }
  }, (_descriptor$2 = _applyDecoratedDescriptor$2(_class$2.prototype, "_tracking", [tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 0;
    }
  })), _class$2);
  const Tags = new WeakMap();
  function getTag(record, key) {
    let tags = Tags.get(record);
    if (!tags) {
      tags = Object.create(null);
      Tags.set(record, tags);
    }
    return tags[key] = tags[key] || new Tag();
  }
  function peekTag(record, key) {
    let tags = Tags.get(record);
    return tags && tags[key];
  }

  /**
   * A decorattor that caches a getter while
   * providing the ability to bust that cache
   * when we so choose in a way that notifies
   * glimmer's tracking system.
   *
   * @internal
   */
  function tagged(_target, key, desc) {
    const getter = desc.get;
    const setter = desc.set;
    desc.get = function () {
      let tag = getTag(this, key);
      tag.subscribe();
      if (tag.isDirty) {
        tag.consume(getter.call(this));
      }
      return tag.value;
    };
    desc.set = function (v) {
      getTag(this, key); // ensure tag is setup in case we want to use it.
      // probably notify here but not yet.
      setter.call(this, v);
    };
    compat.dependentKeyCompat(desc);
    return desc;
  }

  /**
  Historically InternalModel managed a state machine
  the currentState for which was reflected onto Model.

  This implements the flags and stateName for backwards compat
  with the state tree that used to be possible (listed below).

  stateName and dirtyType are candidates for deprecation.

  root
    empty
      deleted    // hidden from stateName
      preloaded  // hidden from stateName

    loading
       empty     // hidden from stateName
       preloaded // hidden from stateName

    loaded
      saved
      updated
        uncommitted
        invalid
        inFlight
      created
        uncommitted
        invalid
        inFlight

    deleted
      saved
        new      // hidden from stateName
      uncommitted
      invalid
      inFlight

    @internal
  */
  let RecordState = (_class3 = class RecordState {
    constructor(record) {
      _initializerDefineProperty$2(this, "isSaving", _descriptor2$1, this);
      const {
        store
      } = record;
      let id = record._internalModel.identifier;
      this.record = record;
      this.recordData = record._internalModel._recordData;
      this.pendingCount = 0;
      this.fulfilledCount = 0;
      this.rejectedCount = 0;
      this._errorRequests = [];
      this._lastError = null;
      let requests = store.getRequestStateService();
      let notifications = store._notificationManager;
      requests.subscribeForRecord(id, req => {
        if (req.type === 'mutation') {
          switch (req.state) {
            case 'pending':
              this.isSaving = true;
              break;
            case 'rejected':
              this.isSaving = false;
              this._lastError = req;
              if (!(req.response && isInvalidError(req.response.data))) {
                this._errorRequests.push(req);
              }
              notifyErrorsStateChanged(this);
              break;
            case 'fulfilled':
              this._errorRequests = [];
              this._lastError = null;
              this.isSaving = false;
              notifyErrorsStateChanged(this);
              break;
          }
        } else {
          switch (req.state) {
            case 'pending':
              this.pendingCount++;
              this.notify('isLoading');
              break;
            case 'rejected':
              this.pendingCount--;
              this._lastError = req;
              if (!(req.response && isInvalidError(req.response.data))) {
                this._errorRequests.push(req);
              }
              this.notify('isLoading');
              notifyErrorsStateChanged(this);
              break;
            case 'fulfilled':
              this.pendingCount--;
              this.fulfilledCount++;
              this.notify('isLoading');
              this.notify('isDirty');
              notifyErrorsStateChanged(this);
              this._errorRequests = [];
              this._lastError = null;
              break;
          }
        }
      });
      notifications.subscribe(id, (identifier, type, key) => {
        notifyChanges(identifier, type, key, record, store);
        switch (type) {
          case 'state':
            this.notify('isNew');
            this.notify('isDeleted');
            this.notify('isDirty');
            break;
          case 'attributes':
            this.notify('isEmpty');
            this.notify('isDirty');
            break;
          case 'unload':
            this.notify('isNew');
            this.notify('isDeleted');
            break;
          case 'errors':
            // we only hit this if a foreign RecordData notifies
            // errors changed. Our own implementation does not
            // take this path currently, but we should probably
            // fix that.
            this.updateInvalidErrors();
            this.notify('isValid');
            break;
        }
      });
    }
    notify(key) {
      getTag(this, key).notify();
    }
    updateInvalidErrors() {
      let jsonApiErrors = this.recordData.getErrors();
      const {
        errors
      } = this.record;
      errors._clear();
      let newErrors = Private.errorsArrayToHash(jsonApiErrors);
      let errorKeys = Object.keys(newErrors);
      for (let i = 0; i < errorKeys.length; i++) {
        errors._add(errorKeys[i], newErrors[errorKeys[i]]);
      }
    }
    cleanErrorRequests() {
      this.notify('isValid');
      this.notify('isError');
      this.notify('adapterError');
      this._errorRequests = [];
      this._lastError = null;
    }
    get isLoading() {
      return !this.isLoaded && this.pendingCount > 0 && this.fulfilledCount === 0;
    }
    get isLoaded() {
      if (this.isNew) {
        return true;
      }
      return this.fulfilledCount > 0 || !this.isEmpty;
    }
    get isSaved() {
      let rd = this.recordData;
      if (this.isDeleted) {
        (!(rd.isDeletionCommitted) && debug.assert(`Expected RecordData to implement isDeletionCommitted()`, rd.isDeletionCommitted));
        return rd.isDeletionCommitted();
      }
      if (this.isNew || this.isEmpty || !this.isValid || this.isDirty || this.isLoading) {
        return false;
      }
      return true;
    }
    get isEmpty() {
      let rd = this.recordData;
      // TODO this is not actually an RFC'd concept. Determine the
      // correct heuristic to replace this with.
      (!(rd.isEmpty) && debug.assert(`Expected RecordData to implement isEmpty()`, rd.isEmpty));
      return !this.isNew && rd.isEmpty();
    }
    get isNew() {
      let rd = this.recordData;
      (!(rd.isNew) && debug.assert(`Expected RecordData to implement isNew()`, rd.isNew));
      return rd.isNew();
    }
    get isDeleted() {
      let rd = this.recordData;
      (!(rd.isDeleted) && debug.assert(`Expected RecordData to implement isDeleted()`, rd.isDeleted));
      return rd.isDeleted();
    }
    get isValid() {
      return this.record.errors.length === 0;
    }
    get isDirty() {
      let rd = this.recordData;
      (!(rd.hasChangedAttributes) && debug.assert(`Expected RecordData to implement hasChangedAttributes()`, rd.hasChangedAttributes));
      (!(rd.isDeletionCommitted) && debug.assert(`Expected RecordData to implement isDeletionCommitted()`, rd.isDeletionCommitted));
      if (rd.isDeletionCommitted() || this.isDeleted && this.isNew) {
        return false;
      }
      return this.isNew || rd.hasChangedAttributes();
    }
    get isError() {
      let errorReq = this._errorRequests[this._errorRequests.length - 1];
      if (!errorReq) {
        return false;
      } else {
        return true;
      }
    }
    get adapterError() {
      let request = this._lastError;
      if (!request) {
        return null;
      }
      return request.state === 'rejected' && request.response.data;
    }
    get isPreloaded() {
      return !this.isEmpty && this.isLoading;
    }
    get stateName() {
      // we might be empty while loading so check this first
      if (this.isLoading) {
        return 'root.loading';

        // got nothing yet or were unloaded
      } else if (this.isEmpty) {
        return 'root.empty';

        // deleted substates
      } else if (this.isDeleted) {
        if (this.isSaving) {
          return 'root.deleted.inFlight';
        } else if (this.isSaved) {
          // TODO ensure isSaved isn't true from previous requests
          return 'root.deleted.saved';
        } else if (!this.isValid) {
          return 'root.deleted.invalid';
        } else {
          return 'root.deleted.uncommitted';
        }

        // loaded.created substates
      } else if (this.isNew) {
        if (this.isSaving) {
          return 'root.loaded.created.inFlight';
        } else if (!this.isValid) {
          return 'root.loaded.created.invalid';
        }
        return 'root.loaded.created.uncommitted';

        // loaded.updated substates
      } else if (this.isSaving) {
        return 'root.loaded.updated.inFlight';
      } else if (!this.isValid) {
        return 'root.loaded.updated.invalid';
      } else if (this.isDirty) {
        return 'root.loaded.updated.uncommitted';

        // if nothing remains, we are loaded saved!
      } else {
        return 'root.loaded.saved';
      }
    }
    get dirtyType() {
      // we might be empty while loading so check this first
      if (this.isLoading || this.isEmpty) {
        return '';

        // deleted substates
      } else if (this.isDeleted) {
        return 'deleted';

        // loaded.created substates
      } else if (this.isNew) {
        return 'created';

        // loaded.updated substates
      } else if (this.isSaving || !this.isValid || this.isDirty) {
        return 'updated';

        // if nothing remains, we are loaded saved!
      } else {
        return '';
      }
    }
  }, (_descriptor2$1 = _applyDecoratedDescriptor$2(_class3.prototype, "isSaving", [tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _applyDecoratedDescriptor$2(_class3.prototype, "isLoading", [tagged], Object.getOwnPropertyDescriptor(_class3.prototype, "isLoading"), _class3.prototype), _applyDecoratedDescriptor$2(_class3.prototype, "isLoaded", [tagged], Object.getOwnPropertyDescriptor(_class3.prototype, "isLoaded"), _class3.prototype), _applyDecoratedDescriptor$2(_class3.prototype, "isSaved", [tagged], Object.getOwnPropertyDescriptor(_class3.prototype, "isSaved"), _class3.prototype), _applyDecoratedDescriptor$2(_class3.prototype, "isEmpty", [tagged], Object.getOwnPropertyDescriptor(_class3.prototype, "isEmpty"), _class3.prototype), _applyDecoratedDescriptor$2(_class3.prototype, "isNew", [tagged], Object.getOwnPropertyDescriptor(_class3.prototype, "isNew"), _class3.prototype), _applyDecoratedDescriptor$2(_class3.prototype, "isDeleted", [tagged], Object.getOwnPropertyDescriptor(_class3.prototype, "isDeleted"), _class3.prototype), _applyDecoratedDescriptor$2(_class3.prototype, "isValid", [tagged], Object.getOwnPropertyDescriptor(_class3.prototype, "isValid"), _class3.prototype), _applyDecoratedDescriptor$2(_class3.prototype, "isDirty", [tagged], Object.getOwnPropertyDescriptor(_class3.prototype, "isDirty"), _class3.prototype), _applyDecoratedDescriptor$2(_class3.prototype, "isError", [tagged], Object.getOwnPropertyDescriptor(_class3.prototype, "isError"), _class3.prototype), _applyDecoratedDescriptor$2(_class3.prototype, "adapterError", [tagged], Object.getOwnPropertyDescriptor(_class3.prototype, "adapterError"), _class3.prototype), _applyDecoratedDescriptor$2(_class3.prototype, "isPreloaded", [emberCachedDecoratorPolyfill.cached], Object.getOwnPropertyDescriptor(_class3.prototype, "isPreloaded"), _class3.prototype), _applyDecoratedDescriptor$2(_class3.prototype, "stateName", [emberCachedDecoratorPolyfill.cached], Object.getOwnPropertyDescriptor(_class3.prototype, "stateName"), _class3.prototype), _applyDecoratedDescriptor$2(_class3.prototype, "dirtyType", [emberCachedDecoratorPolyfill.cached], Object.getOwnPropertyDescriptor(_class3.prototype, "dirtyType"), _class3.prototype)), _class3);
  function notifyErrorsStateChanged(state) {
    state.notify('isValid');
    state.notify('isError');
    state.notify('adapterError');
  }

  /**
    @module @ember-data/store
  */

  function typeForRelationshipMeta(meta) {
    let modelName = Private.normalizeModelName(meta.type || meta.key);
    if (meta.kind === 'hasMany') {
      modelName = emberInflector.singularize(modelName);
    }
    return modelName;
  }
  function shouldFindInverse(relationshipMeta) {
    let options = relationshipMeta.options;
    return !(options && options.inverse === null);
  }
  class RelationshipDefinition {
    constructor(meta) {
      this._type = '';
      this.__inverseKey = '';
      this.__inverseIsAsync = true;
      this.__hasCalculatedInverse = false;
      this.parentModelName = meta.parentModelName;
      this.meta = meta;
    }

    /**
     * @internal
     * @deprecated
     */
    get key() {
      return this.meta.key;
    }
    get kind() {
      return this.meta.kind;
    }
    get type() {
      if (this._type) {
        return this._type;
      }
      this._type = typeForRelationshipMeta(this.meta);
      return this._type;
    }
    get options() {
      return this.meta.options;
    }
    get name() {
      return this.meta.name;
    }
    _inverseKey(store, modelClass) {
      if (this.__hasCalculatedInverse === false) {
        this._calculateInverse(store, modelClass);
      }
      return this.__inverseKey;
    }
    _inverseIsAsync(store, modelClass) {
      if (this.__hasCalculatedInverse === false) {
        this._calculateInverse(store, modelClass);
      }
      return this.__inverseIsAsync;
    }
    _calculateInverse(store, modelClass) {
      this.__hasCalculatedInverse = true;
      let inverseKey, inverseIsAsync;
      let inverse = null;
      if (shouldFindInverse(this.meta)) {
        inverse = modelClass.inverseFor(this.key, store);
      } else {
        modelClass.typeForRelationship(this.key, store);
      }
      if (inverse) {
        inverseKey = inverse.name;
        inverseIsAsync = isRelationshipAsync(inverse);
      } else {
        inverseKey = null;
        inverseIsAsync = false;
      }
      this.__inverseKey = inverseKey;
      this.__inverseIsAsync = inverseIsAsync;
    }
  }
  function isRelationshipAsync(meta) {
    let inverseAsync = meta.options && meta.options.async;
    return typeof inverseAsync === 'undefined' ? true : inverseAsync;
  }
  function relationshipFromMeta(meta) {
    return new RelationshipDefinition(meta);
  }

  var _class$1, _descriptor$1, _class2;
  function _initializerDefineProperty$1(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _applyDecoratedDescriptor$1(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  const {
    changeProperties
  } = Ember__default["default"];
  function findPossibleInverses(type, inverseType, name, relationshipsSoFar) {
    let possibleRelationships = relationshipsSoFar || [];
    let relationshipMap = inverseType.relationships;
    if (!relationshipMap) {
      return possibleRelationships;
    }
    let relationshipsForType = relationshipMap.get(type.modelName);
    let relationships = Array.isArray(relationshipsForType) ? relationshipsForType.filter(relationship => {
      let optionsForRelationship = inverseType.metaForProperty(relationship.name).options;
      if (!optionsForRelationship.inverse && optionsForRelationship.inverse !== null) {
        return true;
      }
      return name === optionsForRelationship.inverse;
    }) : null;
    if (relationships) {
      possibleRelationships.push.apply(possibleRelationships, relationships);
    }

    //Recurse to support polymorphism
    if (type.superclass) {
      findPossibleInverses(type.superclass, inverseType, name, possibleRelationships);
    }
    return possibleRelationships;
  }

  /*
   * This decorator allows us to lazily compute
   * an expensive getter on first-access and thereafter
   * never recompute it.
   */
  function computeOnce(target, key, desc) {
    const cache = new WeakMap();
    let getter = desc.get;
    desc.get = function () {
      let meta = cache.get(this);
      if (!meta) {
        meta = {
          hasComputed: false,
          value: undefined
        };
        cache.set(this, meta);
      }
      if (!meta.hasComputed) {
        meta.value = getter.call(this);
        meta.hasComputed = true;
      }
      return meta.value;
    };
    return desc;
  }

  /**
    Base class from which Models can be define.

    ```js
    import Model, { attr } from '@ember-data/model';

    export default class User extends Model {
      @attr name;
    }
    ```

    @class Model
    @public
    @extends Ember.EmberObject
  */
  let Model = (_class$1 = (_class2 = class Model extends EmberObject__default["default"] {
    constructor(...args) {
      super(...args);
      /**
        If `true` the store is attempting to reload the record from the adapter.
         Example
         ```javascript
        record.get('isReloading'); // false
        record.reload();
        record.get('isReloading'); // true
        ```
         @property isReloading
        @public
        @type {Boolean}
        @readOnly
      */
      _initializerDefineProperty$1(this, "isReloading", _descriptor$1, this);
    }
    init(options = {}) {
      const createProps = options._createProps;
      delete options._createProps;
      super.init(options);
      {
        if (!this._internalModel) {
          throw new EmberError__default["default"]('You should not call `create` on a model. Instead, call `store.createRecord` with the attributes you would like to set.');
        }
      }
      this.___recordState = new RecordState(this);
      this.setProperties(createProps);
    }

    /**
      If this property is `true` the record is in the `empty`
      state. Empty is the first state all records enter after they have
      been created. Most records created by the store will quickly
      transition to the `loading` state if data needs to be fetched from
      the server or the `created` state if the record is created on the
      client. A record can also enter the empty state if the adapter is
      unable to locate the record.
       @property isEmpty
      @public
      @type {Boolean}
      @readOnly
    */
    get isEmpty() {
      return this.currentState.isEmpty;
    }

    /**
      If this property is `true` the record is in the `loading` state. A
      record enters this state when the store asks the adapter for its
      data. It remains in this state until the adapter provides the
      requested data.
       @property isLoading
      @public
      @type {Boolean}
      @readOnly
    */
    get isLoading() {
      return this.currentState.isLoading;
    }

    /**
      If this property is `true` the record is in the `loaded` state. A
      record enters this state when its data is populated. Most of a
      record's lifecycle is spent inside substates of the `loaded`
      state.
       Example
       ```javascript
      let record = store.createRecord('model');
      record.get('isLoaded'); // true
       store.findRecord('model', 1).then(function(model) {
        model.get('isLoaded'); // true
      });
      ```
       @property isLoaded
      @public
      @type {Boolean}
      @readOnly
    */
    get isLoaded() {
      return this.currentState.isLoaded;
    }

    /**
      If this property is `true` the record is in the `dirty` state. The
      record has local changes that have not yet been saved by the
      adapter. This includes records that have been created (but not yet
      saved) or deleted.
       Example
       ```javascript
      let record = store.createRecord('model');
      record.get('hasDirtyAttributes'); // true
       store.findRecord('model', 1).then(function(model) {
        model.get('hasDirtyAttributes'); // false
        model.set('foo', 'some value');
        model.get('hasDirtyAttributes'); // true
      });
      ```
       @since 1.13.0
      @property hasDirtyAttributes
      @public
      @type {Boolean}
      @readOnly
    */
    get hasDirtyAttributes() {
      return this.currentState.isDirty;
    }

    /**
      If this property is `true` the record is in the `saving` state. A
      record enters the saving state when `save` is called, but the
      adapter has not yet acknowledged that the changes have been
      persisted to the backend.
       Example
       ```javascript
      let record = store.createRecord('model');
      record.get('isSaving'); // false
      let promise = record.save();
      record.get('isSaving'); // true
      promise.then(function() {
        record.get('isSaving'); // false
      });
      ```
       @property isSaving
      @public
      @type {Boolean}
      @readOnly
    */
    get isSaving() {
      return this.currentState.isSaving;
    }

    /**
      If this property is `true` the record is in the `deleted` state
      and has been marked for deletion. When `isDeleted` is true and
      `hasDirtyAttributes` is true, the record is deleted locally but the deletion
      was not yet persisted. When `isSaving` is true, the change is
      in-flight. When both `hasDirtyAttributes` and `isSaving` are false, the
      change has persisted.
       Example
       ```javascript
      let record = store.createRecord('model');
      record.get('isDeleted');    // false
      record.deleteRecord();
       // Locally deleted
      record.get('isDeleted');           // true
      record.get('hasDirtyAttributes');  // true
      record.get('isSaving');            // false
       // Persisting the deletion
      let promise = record.save();
      record.get('isDeleted');    // true
      record.get('isSaving');     // true
       // Deletion Persisted
      promise.then(function() {
        record.get('isDeleted');          // true
        record.get('isSaving');           // false
        record.get('hasDirtyAttributes'); // false
      });
      ```
       @property isDeleted
      @public
      @type {Boolean}
      @readOnly
    */
    get isDeleted() {
      return this.currentState.isDeleted;
    }

    /**
      If this property is `true` the record is in the `new` state. A
      record will be in the `new` state when it has been created on the
      client and the adapter has not yet report that it was successfully
      saved.
       Example
       ```javascript
      let record = store.createRecord('model');
      record.get('isNew'); // true
       record.save().then(function(model) {
        model.get('isNew'); // false
      });
      ```
       @property isNew
      @public
      @type {Boolean}
      @readOnly
    */
    get isNew() {
      return this.currentState.isNew;
    }

    /**
      If this property is `true` the record is in the `valid` state.
       A record will be in the `valid` state when the adapter did not report any
      server-side validation failures.
       @property isValid
      @public
      @type {Boolean}
      @readOnly
    */
    get isValid() {
      return this.currentState.isValid;
    }

    /**
      If the record is in the dirty state this property will report what
      kind of change has caused it to move into the dirty
      state. Possible values are:
       - `created` The record has been created by the client and not yet saved to the adapter.
      - `updated` The record has been updated by the client and not yet saved to the adapter.
      - `deleted` The record has been deleted by the client and not yet saved to the adapter.
       Example
       ```javascript
      let record = store.createRecord('model');
      record.get('dirtyType'); // 'created'
      ```
       @property dirtyType
      @public
      @type {String}
      @readOnly
    */
    get dirtyType() {
      return this.currentState.dirtyType;
    }

    /**
      If `true` the adapter reported that it was unable to save local
      changes to the backend for any reason other than a server-side
      validation error.
       Example
       ```javascript
      record.get('isError'); // false
      record.set('foo', 'valid value');
      record.save().then(null, function() {
        record.get('isError'); // true
      });
      ```
       @property isError
      @public
      @type {Boolean}
      @readOnly
    */
    get isError() {
      return this.currentState.isError;
    }
    set isError(v) {
      {
        throw new Error(`isError is not directly settable`);
      }
    }
    /**
      All ember models have an id property. This is an identifier
      managed by an external source. These are always coerced to be
      strings before being used internally. Note when declaring the
      attributes for a model it is an error to declare an id
      attribute.
       ```javascript
      let record = store.createRecord('model');
      record.get('id'); // null
       store.findRecord('model', 1).then(function(model) {
        model.get('id'); // '1'
      });
      ```
       @property id
      @public
      @type {String}
    */
    get id() {
      // the _internalModel guard exists, because some dev-only deprecation code
      // (addListener via validatePropertyInjections) invokes toString before the
      // object is real.
      {
        if (!this._internalModel) {
          return void 0;
        }
      }
      return this._internalModel.id;
    }
    set id(id) {
      const normalizedId = Private.coerceId(id);
      if (normalizedId !== null) {
        this._internalModel.setId(normalizedId);
      }
    }

    /**
      @property currentState
      @private
      @type {Object}
    */
    get currentState() {
      return this.___recordState;
    }
    set currentState(_v) {
      throw new Error('cannot set currentState');
    }

    /**
     @property _internalModel
     @private
     @type {Object}
     */

    /**
      The store service instance which created this record instance
      @property store
      @public
     */

    /**
      When the record is in the `invalid` state this object will contain
      any errors returned by the adapter. When present the errors hash
      contains keys corresponding to the invalid property names
      and values which are arrays of Javascript objects with two keys:
       - `message` A string containing the error message from the backend
      - `attribute` The name of the property associated with this error message
       ```javascript
      record.get('errors.length'); // 0
      record.set('foo', 'invalid value');
      record.save().catch(function() {
        record.get('errors').get('foo');
        // [{message: 'foo should be a number.', attribute: 'foo'}]
      });
      ```
       The `errors` property is useful for displaying error messages to
      the user.
       ```handlebars
      <label>Username: <Input @value={{@model.username}} /> </label>
      {{#each @model.errors.username as |error|}}
        <div class="error">
          {{error.message}}
        </div>
      {{/each}}
      <label>Email: <Input @value={{@model.email}} /> </label>
      {{#each @model.errors.email as |error|}}
        <div class="error">
          {{error.message}}
        </div>
      {{/each}}
      ```
        You can also access the special `messages` property on the error
      object to get an array of all the error strings.
       ```handlebars
      {{#each @model.errors.messages as |message|}}
        <div class="error">
          {{message}}
        </div>
      {{/each}}
      ```
       @property errors
      @public
      @type {Errors}
    */
    get errors() {
      let errors = Errors.create();
      errors._registerHandlers(() => {
        this._internalModel.send('becameInvalid');
      }, () => {
        this._internalModel.send('becameValid');
      });
      // TODO we should unify how errors gets populated
      // with the code managing the update. Probably a
      // lazy flush similar to retrieveLatest in ManyArray
      let recordData = Private.recordDataFor(this);
      let jsonApiErrors;
      if (recordData.getErrors) {
        jsonApiErrors = recordData.getErrors();
        if (jsonApiErrors) {
          let errorsHash = Private.errorsArrayToHash(jsonApiErrors);
          let errorKeys = Object.keys(errorsHash);
          for (let i = 0; i < errorKeys.length; i++) {
            errors._add(errorKeys[i], errorsHash[errorKeys[i]]);
          }
        }
      }
      return errors;
    }

    /**
      This property holds the `AdapterError` object with which
      last adapter operation was rejected.
       @property adapterError
      @public
      @type {AdapterError}
    */
    get adapterError() {
      return this.currentState.adapterError;
    }
    set adapterError(v) {
      throw new Error(`adapterError is not directly settable`);
    }

    /**
      Create a JSON representation of the record, using the serialization
      strategy of the store's adapter.
      `serialize` takes an optional hash as a parameter, currently
      supported options are:
      - `includeId`: `true` if the record's ID should be included in the
        JSON representation.
       @method serialize
      @public
      @param {Object} options
      @return {Object} an object whose values are primitive JSON values only
    */
    serialize(options) {
      return this._internalModel.createSnapshot().serialize(options);
    }

    /*
      We hook the default implementation to ensure
      our tagged properties are properly notified
      as well. We still super for everything because
      sync observers require a direct call occuring
      to trigger their flush. We wouldn't need to
      super in 4.0+ where sync observers are removed.
     */
    notifyPropertyChange(key) {
      let tag = peekTag(this, key);
      if (tag) {
        tag.notify();
      }
      super.notifyPropertyChange(key);
    }

    /**
      Marks the record as deleted but does not save it. You must call
      `save` afterwards if you want to persist it. You might use this
      method if you want to allow the user to still `rollbackAttributes()`
      after a delete was made.
       Example
       ```app/controllers/model/delete.js
      import Controller from '@ember/controller';
      import { action } from '@ember/object';
       export default class ModelDeleteController extends Controller {
        @action
        softDelete() {
          this.model.deleteRecord();
        }
         @action
        confirm() {
          this.model.save();
        }
         @action
        undo() {
          this.model.rollbackAttributes();
        }
      }
      ```
       @method deleteRecord
      @public
    */
    deleteRecord() {
      this.store.deleteRecord(this);
    }

    /**
      Same as `deleteRecord`, but saves the record immediately.
       Example
       ```app/controllers/model/delete.js
      import Controller from '@ember/controller';
      import { action } from '@ember/object';
       export default class ModelDeleteController extends Controller {
        @action
        delete() {
          this.model.destroyRecord().then(function() {
            this.transitionToRoute('model.index');
          });
        }
      }
      ```
       If you pass an object on the `adapterOptions` property of the options
      argument it will be passed to your adapter via the snapshot
       ```js
      record.destroyRecord({ adapterOptions: { subscribe: false } });
      ```
       ```app/adapters/post.js
      import MyCustomAdapter from './custom-adapter';
       export default class PostAdapter extends MyCustomAdapter {
        deleteRecord(store, type, snapshot) {
          if (snapshot.adapterOptions.subscribe) {
            // ...
          }
          // ...
        }
      }
      ```
       @method destroyRecord
      @public
      @param {Object} options
      @return {Promise} a promise that will be resolved when the adapter returns
      successfully or rejected if the adapter returns with an error.
    */
    destroyRecord(options) {
      this.deleteRecord();
      return this.save(options).then(_ => {
        runloop.run(() => {
          this.unloadRecord();
        });
        return this;
      });
    }

    /**
      Unloads the record from the store. This will not send a delete request
      to your server, it just unloads the record from memory.
       @method unloadRecord
      @public
    */
    unloadRecord() {
      if (this.isDestroyed) {
        return;
      }
      this.store.unloadRecord(this);
    }

    /**
      @method _notifyProperties
      @private
    */
    _notifyProperties(keys) {
      // changeProperties defers notifications until after the delegate
      // and protects with a try...finally block
      // previously used begin...endPropertyChanges but this is private API
      changeProperties(() => {
        let key;
        for (let i = 0, length = keys.length; i < length; i++) {
          key = keys[i];
          this.notifyPropertyChange(key);
        }
      });
    }

    /**
      Returns an object, whose keys are changed properties, and value is
      an [oldProp, newProp] array.
       The array represents the diff of the canonical state with the local state
      of the model. Note: if the model is created locally, the canonical state is
      empty since the adapter hasn't acknowledged the attributes yet:
       Example
       ```app/models/mascot.js
      import Model, { attr } from '@ember-data/model';
       export default class MascotModel extends Model {
        @attr('string') name;
        @attr('boolean', {
          defaultValue: false
        })
        isAdmin;
      }
      ```
       ```javascript
      let mascot = store.createRecord('mascot');
       mascot.changedAttributes(); // {}
       mascot.set('name', 'Tomster');
      mascot.changedAttributes(); // { name: [undefined, 'Tomster'] }
       mascot.set('isAdmin', true);
      mascot.changedAttributes(); // { isAdmin: [undefined, true], name: [undefined, 'Tomster'] }
       mascot.save().then(function() {
        mascot.changedAttributes(); // {}
         mascot.set('isAdmin', false);
        mascot.changedAttributes(); // { isAdmin: [true, false] }
      });
      ```
       @method changedAttributes
      @public
      @return {Object} an object, whose keys are changed properties,
        and value is an [oldProp, newProp] array.
    */
    changedAttributes() {
      return this._internalModel.changedAttributes();
    }

    /**
      If the model `hasDirtyAttributes` this function will discard any unsaved
      changes. If the model `isNew` it will be removed from the store.
       Example
       ```javascript
      record.get('name'); // 'Untitled Document'
      record.set('name', 'Doc 1');
      record.get('name'); // 'Doc 1'
      record.rollbackAttributes();
      record.get('name'); // 'Untitled Document'
      ```
       @since 1.13.0
      @method rollbackAttributes
      @public
    */
    rollbackAttributes() {
      this._internalModel.rollbackAttributes();
      this.currentState.cleanErrorRequests();
    }

    /**
      @method _createSnapshot
      @private
    */
    _createSnapshot() {
      return this._internalModel.createSnapshot();
    }
    toStringExtension() {
      // the _internalModel guard exists, because some dev-only deprecation code
      // (addListener via validatePropertyInjections) invokes toString before the
      // object is real.
      return this._internalModel && this._internalModel.id;
    }

    /**
      Save the record and persist any changes to the record to an
      external source via the adapter.
       Example
       ```javascript
      record.set('name', 'Tomster');
      record.save().then(function() {
        // Success callback
      }, function() {
        // Error callback
      });
      ```
      If you pass an object using the `adapterOptions` property of the options
     argument it will be passed to your adapter via the snapshot.
       ```js
      record.save({ adapterOptions: { subscribe: false } });
      ```
       ```app/adapters/post.js
      import MyCustomAdapter from './custom-adapter';
       export default class PostAdapter extends MyCustomAdapter {
        updateRecord(store, type, snapshot) {
          if (snapshot.adapterOptions.subscribe) {
            // ...
          }
          // ...
        }
      }
      ```
       @method save
      @public
      @param {Object} options
      @return {Promise} a promise that will be resolved when the adapter returns
      successfully or rejected if the adapter returns with an error.
    */
    save(options) {
      const promise = this._internalModel.save(options).then(() => this);
      {
        return Private.deprecatedPromiseObject(Private.PromiseObject.create({
          promise
        }));
      }
    }

    /**
      Reload the record from the adapter.
       This will only work if the record has already finished loading.
       Example
       ```app/controllers/model/view.js
      import Controller from '@ember/controller';
      import { action } from '@ember/object';
       export default class ViewController extends Controller {
        @action
        reload() {
          this.model.reload().then(function(model) {
          // do something with the reloaded model
          });
        }
      }
      ```
       @method reload
      @public
      @param {Object} options optional, may include `adapterOptions` hash which will be passed to adapter request
      @return {Promise} a promise that will be resolved with the record when the
      adapter returns successfully or rejected if the adapter returns
      with an error.
    */
    reload(options) {
      let wrappedAdapterOptions;
      if (typeof options === 'object' && options !== null && options.adapterOptions) {
        wrappedAdapterOptions = {
          adapterOptions: options.adapterOptions
        };
      }
      this.isReloading = true;
      return Private.PromiseObject.create({
        promise: this._internalModel.reload(wrappedAdapterOptions).then(() => this).finally(() => {
          this.isReloading = false;
        })
      });
    }
    attr() {
      (debug.assert('The `attr` method is not available on Model, a Snapshot was probably expected. Are you passing a Model instead of a Snapshot to your serializer?', false));
    }

    /**
      Get the reference for the specified belongsTo relationship.
       Example
       ```app/models/blog.js
      import Model, { belongsTo } from '@ember-data/model';
       export default class BlogModel extends Model {
        @belongsTo({ async: true }) user;
      }
      ```
       ```javascript
      let blog = store.push({
        data: {
          type: 'blog',
          id: 1,
          relationships: {
            user: {
              data: { type: 'user', id: 1 }
            }
          }
        }
      });
      let userRef = blog.belongsTo('user');
       // check if the user relationship is loaded
      let isLoaded = userRef.value() !== null;
       // get the record of the reference (null if not yet available)
      let user = userRef.value();
       // get the identifier of the reference
      if (userRef.remoteType() === "id") {
        let id = userRef.id();
      } else if (userRef.remoteType() === "link") {
        let link = userRef.link();
      }
       // load user (via store.findRecord or store.findBelongsTo)
      userRef.load().then(...)
       // or trigger a reload
      userRef.reload().then(...)
       // provide data for reference
      userRef.push({
        type: 'user',
        id: 1,
        attributes: {
          username: "@user"
        }
      }).then(function(user) {
        userRef.value() === user;
      });
      ```
       @method belongsTo
      @public
      @param {String} name of the relationship
      @since 2.5.0
      @return {BelongsToReference} reference for this relationship
    */
    belongsTo(name) {
      return this._internalModel.referenceFor('belongsTo', name);
    }

    /**
      Get the reference for the specified hasMany relationship.
       Example
       ```app/models/blog.js
      import Model, { hasMany } from '@ember-data/model';
       export default class BlogModel extends Model {
        @hasMany({ async: true }) comments;
      }
       let blog = store.push({
        data: {
          type: 'blog',
          id: 1,
          relationships: {
            comments: {
              data: [
                { type: 'comment', id: 1 },
                { type: 'comment', id: 2 }
              ]
            }
          }
        }
      });
      let commentsRef = blog.hasMany('comments');
       // check if the comments are loaded already
      let isLoaded = commentsRef.value() !== null;
       // get the records of the reference (null if not yet available)
      let comments = commentsRef.value();
       // get the identifier of the reference
      if (commentsRef.remoteType() === "ids") {
        let ids = commentsRef.ids();
      } else if (commentsRef.remoteType() === "link") {
        let link = commentsRef.link();
      }
       // load comments (via store.findMany or store.findHasMany)
      commentsRef.load().then(...)
       // or trigger a reload
      commentsRef.reload().then(...)
       // provide data for reference
      commentsRef.push([{ type: 'comment', id: 1 }, { type: 'comment', id: 2 }]).then(function(comments) {
        commentsRef.value() === comments;
      });
      ```
       @method hasMany
      @public
      @param {String} name of the relationship
      @since 2.5.0
      @return {HasManyReference} reference for this relationship
    */
    hasMany(name) {
      return this._internalModel.referenceFor('hasMany', name);
    }

    /**
     Given a callback, iterates over each of the relationships in the model,
     invoking the callback with the name of each relationship and its relationship
     descriptor.
       The callback method you provide should have the following signature (all
     parameters are optional):
      ```javascript
     function(name, descriptor);
     ```
      - `name` the name of the current property in the iteration
     - `descriptor` the meta object that describes this relationship
      The relationship descriptor argument is an object with the following properties.
      - **key** <span class="type">String</span> the name of this relationship on the Model
     - **kind** <span class="type">String</span> "hasMany" or "belongsTo"
     - **options** <span class="type">Object</span> the original options hash passed when the relationship was declared
     - **parentType** <span class="type">Model</span> the type of the Model that owns this relationship
     - **type** <span class="type">String</span> the type name of the related Model
      Note that in addition to a callback, you can also pass an optional target
     object that will be set as `this` on the context.
      Example
      ```app/serializers/application.js
     import JSONSerializer from '@ember-data/serializer/json';
      export default class ApplicationSerializer extends JSONSerializer {
        serialize(record, options) {
        let json = {};
         record.eachRelationship(function(name, descriptor) {
          if (descriptor.kind === 'hasMany') {
            let serializedHasManyName = name.toUpperCase() + '_IDS';
            json[serializedHasManyName] = record.get(name).mapBy('id');
          }
        });
         return json;
      }
    }
     ```
      @method eachRelationship
      @public
     @param {Function} callback the callback to invoke
     @param {any} binding the value to which the callback's `this` should be bound
     */
    eachRelationship(callback, binding) {
      this.constructor.eachRelationship(callback, binding);
    }
    relationshipFor(name) {
      return this.constructor.relationshipsByName.get(name);
    }
    inverseFor(key) {
      return this.constructor.inverseFor(key, this._internalModel.store);
    }
    eachAttribute(callback, binding) {
      this.constructor.eachAttribute(callback, binding);
    }
    /*
     These class methods below provide relationship
     introspection abilities about relationships.
      A note about the computed properties contained here:
      **These properties are effectively sealed once called for the first time.**
     To avoid repeatedly doing expensive iteration over a model's fields, these
     values are computed once and then cached for the remainder of the runtime of
     your application.
      If your application needs to modify a class after its initial definition
     (for example, using `reopen()` to add additional attributes), make sure you
     do it before using your model with the store, which uses these properties
     extensively.
     */
    /**
     For a given relationship name, returns the model type of the relationship.
      For example, if you define a model like this:
      ```app/models/post.js
     import Model, { hasMany } from '@ember-data/model';
      export default class PostModel extends Model {
       @hasMany('comment') comments;
     }
     ```
      Calling `store.modelFor('post').typeForRelationship('comments', store)` will return `Comment`.
      @method typeForRelationship
      @public
     @static
     @param {String} name the name of the relationship
     @param {store} store an instance of Store
     @return {Model} the type of the relationship, or undefined
     */
    static typeForRelationship(name, store) {
      let relationship = this.relationshipsByName.get(name);
      return relationship && store.modelFor(relationship.type);
    }
    static get inverseMap() {
      return Object.create(null);
    }

    /**
     Find the relationship which is the inverse of the one asked for.
      For example, if you define models like this:
      ```app/models/post.js
     import Model, { hasMany } from '@ember-data/model';
      export default class PostModel extends Model {
        @hasMany('message') comments;
      }
     ```
      ```app/models/message.js
     import Model from '@ember-data/model';
     import { belongsTo } from '@ember-decorators/data';
      export default class MessageModel extends Model {
        @belongsTo('post') owner;
      }
     ```
      ``` js
     store.modelFor('post').inverseFor('comments', store) // { type: App.Message, name: 'owner', kind: 'belongsTo' }
     store.modelFor('message').inverseFor('owner', store) // { type: App.Post, name: 'comments', kind: 'hasMany' }
     ```
      @method inverseFor
      @public
     @static
     @param {String} name the name of the relationship
     @param {Store} store
     @return {Object} the inverse relationship, or null
     */
    static inverseFor(name, store) {
      let inverseMap = this.inverseMap;
      if (inverseMap[name]) {
        return inverseMap[name];
      } else {
        let inverse = this._findInverseFor(name, store);
        inverseMap[name] = inverse;
        return inverse;
      }
    }

    //Calculate the inverse, ignoring the cache
    static _findInverseFor(name, store) {
      let inverseType = this.typeForRelationship(name, store);
      if (!inverseType) {
        return null;
      }
      let propertyMeta = this.metaForProperty(name);
      //If inverse is manually specified to be null, like  `comments: hasMany('message', { inverse: null })`
      let options = propertyMeta.options;
      if (options.inverse === null) {
        return null;
      }
      let inverseName, inverseKind, inverse, inverseOptions;

      //If inverse is specified manually, return the inverse
      if (options.inverse) {
        inverseName = options.inverse;
        inverse = inverseType.relationshipsByName.get(inverseName);
        (!(!utils.isNone(inverse)) && debug.assert("We found no inverse relationships by the name of '" + inverseName + "' on the '" + inverseType.modelName + "' model. This is most likely due to a missing attribute on your model definition.", !utils.isNone(inverse))); // TODO probably just return the whole inverse here
        inverseKind = inverse.kind;
        inverseOptions = inverse.options;
      } else {
        //No inverse was specified manually, we need to use a heuristic to guess one
        if (propertyMeta.type === propertyMeta.parentModelName) {
          (debug.warn(`Detected a reflexive relationship by the name of '${name}' without an inverse option. Look at https://guides.emberjs.com/current/models/relationships/#toc_reflexive-relations for how to explicitly specify inverses.`, false, {
            id: 'ds.model.reflexive-relationship-without-inverse'
          }));
        }
        let possibleRelationships = findPossibleInverses(this, inverseType, name);
        if (possibleRelationships.length === 0) {
          return null;
        }
        let filteredRelationships = possibleRelationships.filter(possibleRelationship => {
          let optionsForRelationship = inverseType.metaForProperty(possibleRelationship.name).options;
          return name === optionsForRelationship.inverse;
        });
        (!(filteredRelationships.length < 2) && debug.assert("You defined the '" + name + "' relationship on " + this + ', but you defined the inverse relationships of type ' + inverseType.toString() + ' multiple times. Look at https://guides.emberjs.com/current/models/relationships/#toc_explicit-inverses for how to explicitly specify inverses', filteredRelationships.length < 2));
        if (filteredRelationships.length === 1) {
          possibleRelationships = filteredRelationships;
        }
        (!(possibleRelationships.length === 1) && debug.assert("You defined the '" + name + "' relationship on " + this + ', but multiple possible inverse relationships of type ' + this + ' were found on ' + inverseType + '. Look at https://guides.emberjs.com/current/models/relationships/#toc_explicit-inverses for how to explicitly specify inverses', possibleRelationships.length === 1));
        inverseName = possibleRelationships[0].name;
        inverseKind = possibleRelationships[0].kind;
        inverseOptions = possibleRelationships[0].options;
      }
      (!(!inverseOptions || inverseOptions.inverse !== null) && debug.assert(`The ${inverseType.modelName}:${inverseName} relationship declares 'inverse: null', but it was resolved as the inverse for ${this.modelName}:${name}.`, !inverseOptions || inverseOptions.inverse !== null));
      return {
        type: inverseType,
        name: inverseName,
        kind: inverseKind,
        options: inverseOptions
      };
    }

    /**
     The model's relationships as a map, keyed on the type of the
     relationship. The value of each entry is an array containing a descriptor
     for each relationship with that type, describing the name of the relationship
     as well as the type.
      For example, given the following model definition:
      ```app/models/blog.js
     import Model, { belongsTo, hasMany } from '@ember-data/model';
      export default class BlogModel extends Model {
        @hasMany('user') users;
        @belongsTo('user') owner;
        @hasMany('post') posts;
      }
     ```
      This computed property would return a map describing these
     relationships, like this:
      ```javascript
     import { get } from '@ember/object';
     import Blog from 'app/models/blog';
     import User from 'app/models/user';
     import Post from 'app/models/post';
      let relationships = Blog.relationships;
     relationships.get('user');
     //=> [ { name: 'users', kind: 'hasMany' },
     //     { name: 'owner', kind: 'belongsTo' } ]
     relationships.get('post');
     //=> [ { name: 'posts', kind: 'hasMany' } ]
     ```
      @property relationships
      @public
     @static
     @type Map
     @readOnly
     */

    static get relationships() {
      let map = new Map();
      let relationshipsByName = this.relationshipsByName;

      // Loop through each computed property on the class
      relationshipsByName.forEach(desc => {
        let {
          type
        } = desc;
        if (!map.has(type)) {
          map.set(type, []);
        }
        map.get(type).push(desc);
      });
      return map;
    }

    /**
     A hash containing lists of the model's relationships, grouped
     by the relationship kind. For example, given a model with this
     definition:
      ```app/models/blog.js
     import Model, { belongsTo, hasMany } from '@ember-data/model';
      export default class BlogModel extends Model {
        @hasMany('user') users;
        @belongsTo('user') owner;
         @hasMany('post') posts;
      }
     ```
      This property would contain the following:
      ```javascript
     import { get } from '@ember/object';
     import Blog from 'app/models/blog';
      let relationshipNames = Blog.relationshipNames;
     relationshipNames.hasMany;
     //=> ['users', 'posts']
     relationshipNames.belongsTo;
     //=> ['owner']
     ```
      @property relationshipNames
      @public
     @static
     @type Object
     @readOnly
     */
    static get relationshipNames() {
      let names = {
        hasMany: [],
        belongsTo: []
      };
      this.eachComputedProperty((name, meta) => {
        if (meta.isRelationship) {
          names[meta.kind].push(name);
        }
      });
      return names;
    }

    /**
     An array of types directly related to a model. Each type will be
     included once, regardless of the number of relationships it has with
     the model.
      For example, given a model with this definition:
      ```app/models/blog.js
     import Model, { belongsTo, hasMany } from '@ember-data/model';
      export default class BlogModel extends Model {
        @hasMany('user') users;
        @belongsTo('user') owner;
         @hasMany('post') posts;
      }
     ```
      This property would contain the following:
      ```javascript
     import { get } from '@ember/object';
     import Blog from 'app/models/blog';
      let relatedTypes = Blog.relatedTypes');
     //=> [ User, Post ]
     ```
      @property relatedTypes
      @public
     @static
     @type Ember.Array
     @readOnly
     */
    static get relatedTypes() {
      let types = [];
      let rels = this.relationshipsObject;
      let relationships = Object.keys(rels);

      // create an array of the unique types involved
      // in relationships
      for (let i = 0; i < relationships.length; i++) {
        let name = relationships[i];
        let meta = rels[name];
        let modelName = meta.type;
        if (types.indexOf(modelName) === -1) {
          types.push(modelName);
        }
      }
      return types;
    }

    /**
     A map whose keys are the relationships of a model and whose values are
     relationship descriptors.
      For example, given a model with this
     definition:
      ```app/models/blog.js
     import Model, { belongsTo, hasMany } from '@ember-data/model';
      export default class BlogModel extends Model {
        @hasMany('user') users;
        @belongsTo('user') owner;
         @hasMany('post') posts;
      }
     ```
      This property would contain the following:
      ```javascript
     import { get } from '@ember/object';
     import Blog from 'app/models/blog';
      let relationshipsByName = Blog.relationshipsByName;
     relationshipsByName.get('users');
     //=> { key: 'users', kind: 'hasMany', type: 'user', options: Object, isRelationship: true }
     relationshipsByName.get('owner');
     //=> { key: 'owner', kind: 'belongsTo', type: 'user', options: Object, isRelationship: true }
     ```
      @property relationshipsByName
      @public
     @static
     @type Map
     @readOnly
     */
    static get relationshipsByName() {
      let map = new Map();
      let rels = this.relationshipsObject;
      let relationships = Object.keys(rels);
      for (let i = 0; i < relationships.length; i++) {
        let key = relationships[i];
        let value = rels[key];
        map.set(value.key, value);
      }
      return map;
    }
    static get relationshipsObject() {
      let relationships = Object.create(null);
      let modelName = this.modelName;
      this.eachComputedProperty((name, meta) => {
        if (meta.isRelationship) {
          meta.key = name;
          meta.name = name;
          meta.parentModelName = modelName;
          relationships[name] = relationshipFromMeta(meta);
        }
      });
      return relationships;
    }

    /**
     A map whose keys are the fields of the model and whose values are strings
     describing the kind of the field. A model's fields are the union of all of its
     attributes and relationships.
      For example:
      ```app/models/blog.js
     import Model, { attr, belongsTo, hasMany } from '@ember-data/model';
      export default class BlogModel extends Model {
        @hasMany('user') users;
        @belongsTo('user') owner;
         @hasMany('post') posts;
         @attr('string') title;
      }
     ```
      ```js
     import { get } from '@ember/object';
     import Blog from 'app/models/blog'
      let fields = Blog.fields;
     fields.forEach(function(kind, field) {
        console.log(field, kind);
      });
      // prints:
     // users, hasMany
     // owner, belongsTo
     // posts, hasMany
     // title, attribute
     ```
      @property fields
      @public
     @static
     @type Map
     @readOnly
     */
    static get fields() {
      let map = new Map();
      this.eachComputedProperty((name, meta) => {
        if (meta.isRelationship) {
          map.set(name, meta.kind);
        } else if (meta.isAttribute) {
          map.set(name, 'attribute');
        }
      });
      return map;
    }

    /**
     Given a callback, iterates over each of the relationships in the model,
     invoking the callback with the name of each relationship and its relationship
     descriptor.
      @method eachRelationship
      @public
     @static
     @param {Function} callback the callback to invoke
     @param {any} binding the value to which the callback's `this` should be bound
     */
    static eachRelationship(callback, binding) {
      this.relationshipsByName.forEach((relationship, name) => {
        callback.call(binding, name, relationship);
      });
    }

    /**
     Given a callback, iterates over each of the types related to a model,
     invoking the callback with the related type's class. Each type will be
     returned just once, regardless of how many different relationships it has
     with a model.
      @method eachRelatedType
      @public
     @static
     @param {Function} callback the callback to invoke
     @param {any} binding the value to which the callback's `this` should be bound
     */
    static eachRelatedType(callback, binding) {
      let relationshipTypes = this.relatedTypes;
      for (let i = 0; i < relationshipTypes.length; i++) {
        let type = relationshipTypes[i];
        callback.call(binding, type);
      }
    }
    static determineRelationshipType(knownSide, store) {
      let knownKey = knownSide.key;
      let knownKind = knownSide.kind;
      let inverse = this.inverseFor(knownKey, store);
      // let key;
      let otherKind;
      if (!inverse) {
        return knownKind === 'belongsTo' ? 'oneToNone' : 'manyToNone';
      }

      // key = inverse.name;
      otherKind = inverse.kind;
      if (otherKind === 'belongsTo') {
        return knownKind === 'belongsTo' ? 'oneToOne' : 'manyToOne';
      } else {
        return knownKind === 'belongsTo' ? 'oneToMany' : 'manyToMany';
      }
    }

    /**
     A map whose keys are the attributes of the model (properties
     described by attr) and whose values are the meta object for the
     property.
      Example
      ```app/models/person.js
     import Model, { attr } from '@ember-data/model';
      export default class PersonModel extends Model {
        @attr('string') firstName;
        @attr('string') lastName;
        @attr('date') birthday;
      }
     ```
      ```javascript
     import { get } from '@ember/object';
     import Person from 'app/models/person'
      let attributes = Person.attributes
      attributes.forEach(function(meta, name) {
        console.log(name, meta);
      });
      // prints:
     // firstName {type: "string", isAttribute: true, options: Object, parentType: function, name: "firstName"}
     // lastName {type: "string", isAttribute: true, options: Object, parentType: function, name: "lastName"}
     // birthday {type: "date", isAttribute: true, options: Object, parentType: function, name: "birthday"}
     ```
      @property attributes
      @public
     @static
     @type {Map}
     @readOnly
     */
    static get attributes() {
      let map = new Map();
      this.eachComputedProperty((name, meta) => {
        if (meta.isAttribute) {
          (!(name !== 'id') && debug.assert("You may not set `id` as an attribute on your model. Please remove any lines that look like: `id: attr('<type>')` from " + this.toString(), name !== 'id'));
          meta.name = name;
          map.set(name, meta);
        }
      });
      return map;
    }

    /**
     A map whose keys are the attributes of the model (properties
     described by attr) and whose values are type of transformation
     applied to each attribute. This map does not include any
     attributes that do not have an transformation type.
      Example
      ```app/models/person.js
     import Model, { attr } from '@ember-data/model';
      export default class PersonModel extends Model {
        @attr firstName;
        @attr('string') lastName;
        @attr('date') birthday;
      }
     ```
      ```javascript
     import { get } from '@ember/object';
     import Person from 'app/models/person';
      let transformedAttributes = Person.transformedAttributes
      transformedAttributes.forEach(function(field, type) {
        console.log(field, type);
      });
      // prints:
     // lastName string
     // birthday date
     ```
      @property transformedAttributes
      @public
     @static
     @type {Map}
     @readOnly
     */
    static get transformedAttributes() {
      let map = new Map();
      this.eachAttribute((key, meta) => {
        if (meta.type) {
          map.set(key, meta.type);
        }
      });
      return map;
    }

    /**
     Iterates through the attributes of the model, calling the passed function on each
     attribute.
      The callback method you provide should have the following signature (all
     parameters are optional):
      ```javascript
     function(name, meta);
     ```
      - `name` the name of the current property in the iteration
     - `meta` the meta object for the attribute property in the iteration
      Note that in addition to a callback, you can also pass an optional target
     object that will be set as `this` on the context.
      Example
      ```javascript
     import Model, { attr } from '@ember-data/model';
      class PersonModel extends Model {
        @attr('string') firstName;
        @attr('string') lastName;
        @attr('date') birthday;
      }
      PersonModel.eachAttribute(function(name, meta) {
        console.log(name, meta);
      });
      // prints:
     // firstName {type: "string", isAttribute: true, options: Object, parentType: function, name: "firstName"}
     // lastName {type: "string", isAttribute: true, options: Object, parentType: function, name: "lastName"}
     // birthday {type: "date", isAttribute: true, options: Object, parentType: function, name: "birthday"}
     ```
      @method eachAttribute
      @public
     @param {Function} callback The callback to execute
     @param {Object} [binding] the value to which the callback's `this` should be bound
     @static
     */
    static eachAttribute(callback, binding) {
      this.attributes.forEach((meta, name) => {
        callback.call(binding, name, meta);
      });
    }

    /**
     Iterates through the transformedAttributes of the model, calling
     the passed function on each attribute. Note the callback will not be
     called for any attributes that do not have an transformation type.
      The callback method you provide should have the following signature (all
     parameters are optional):
      ```javascript
     function(name, type);
     ```
      - `name` the name of the current property in the iteration
     - `type` a string containing the name of the type of transformed
     applied to the attribute
      Note that in addition to a callback, you can also pass an optional target
     object that will be set as `this` on the context.
      Example
      ```javascript
     import Model, { attr } from '@ember-data/model';
      let Person = Model.extend({
        firstName: attr(),
        lastName: attr('string'),
        birthday: attr('date')
      });
      Person.eachTransformedAttribute(function(name, type) {
        console.log(name, type);
      });
      // prints:
     // lastName string
     // birthday date
     ```
      @method eachTransformedAttribute
      @public
     @param {Function} callback The callback to execute
     @param {Object} [binding] the value to which the callback's `this` should be bound
     @static
     */
    static eachTransformedAttribute(callback, binding) {
      this.transformedAttributes.forEach((type, name) => {
        callback.call(binding, name, type);
      });
    }

    /**
     Returns the name of the model class.
      @method toString
      @public
     @static
     */
    static toString() {
      return `model:${EmberObject.get(this, 'modelName')}`;
    }
  }, _class2.isModel = true, _class2.modelName = null, _class2), (_applyDecoratedDescriptor$1(_class$1.prototype, "isEmpty", [compat.dependentKeyCompat], Object.getOwnPropertyDescriptor(_class$1.prototype, "isEmpty"), _class$1.prototype), _applyDecoratedDescriptor$1(_class$1.prototype, "isLoading", [compat.dependentKeyCompat], Object.getOwnPropertyDescriptor(_class$1.prototype, "isLoading"), _class$1.prototype), _applyDecoratedDescriptor$1(_class$1.prototype, "isLoaded", [compat.dependentKeyCompat], Object.getOwnPropertyDescriptor(_class$1.prototype, "isLoaded"), _class$1.prototype), _applyDecoratedDescriptor$1(_class$1.prototype, "hasDirtyAttributes", [compat.dependentKeyCompat], Object.getOwnPropertyDescriptor(_class$1.prototype, "hasDirtyAttributes"), _class$1.prototype), _applyDecoratedDescriptor$1(_class$1.prototype, "isSaving", [compat.dependentKeyCompat], Object.getOwnPropertyDescriptor(_class$1.prototype, "isSaving"), _class$1.prototype), _applyDecoratedDescriptor$1(_class$1.prototype, "isDeleted", [compat.dependentKeyCompat], Object.getOwnPropertyDescriptor(_class$1.prototype, "isDeleted"), _class$1.prototype), _applyDecoratedDescriptor$1(_class$1.prototype, "isNew", [compat.dependentKeyCompat], Object.getOwnPropertyDescriptor(_class$1.prototype, "isNew"), _class$1.prototype), _applyDecoratedDescriptor$1(_class$1.prototype, "isValid", [compat.dependentKeyCompat], Object.getOwnPropertyDescriptor(_class$1.prototype, "isValid"), _class$1.prototype), _applyDecoratedDescriptor$1(_class$1.prototype, "dirtyType", [compat.dependentKeyCompat], Object.getOwnPropertyDescriptor(_class$1.prototype, "dirtyType"), _class$1.prototype), _applyDecoratedDescriptor$1(_class$1.prototype, "isError", [compat.dependentKeyCompat], Object.getOwnPropertyDescriptor(_class$1.prototype, "isError"), _class$1.prototype), _descriptor$1 = _applyDecoratedDescriptor$1(_class$1.prototype, "isReloading", [tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _applyDecoratedDescriptor$1(_class$1.prototype, "id", [tagged], Object.getOwnPropertyDescriptor(_class$1.prototype, "id"), _class$1.prototype), _applyDecoratedDescriptor$1(_class$1.prototype, "currentState", [tagged], Object.getOwnPropertyDescriptor(_class$1.prototype, "currentState"), _class$1.prototype), _applyDecoratedDescriptor$1(_class$1.prototype, "errors", [computeOnce], Object.getOwnPropertyDescriptor(_class$1.prototype, "errors"), _class$1.prototype), _applyDecoratedDescriptor$1(_class$1.prototype, "adapterError", [compat.dependentKeyCompat], Object.getOwnPropertyDescriptor(_class$1.prototype, "adapterError"), _class$1.prototype), _applyDecoratedDescriptor$1(_class$1, "inverseMap", [computeOnce], Object.getOwnPropertyDescriptor(_class$1, "inverseMap"), _class$1), _applyDecoratedDescriptor$1(_class$1, "relationships", [computeOnce], Object.getOwnPropertyDescriptor(_class$1, "relationships"), _class$1), _applyDecoratedDescriptor$1(_class$1, "relationshipNames", [computeOnce], Object.getOwnPropertyDescriptor(_class$1, "relationshipNames"), _class$1), _applyDecoratedDescriptor$1(_class$1, "relatedTypes", [computeOnce], Object.getOwnPropertyDescriptor(_class$1, "relatedTypes"), _class$1), _applyDecoratedDescriptor$1(_class$1, "relationshipsByName", [computeOnce], Object.getOwnPropertyDescriptor(_class$1, "relationshipsByName"), _class$1), _applyDecoratedDescriptor$1(_class$1, "relationshipsObject", [computeOnce], Object.getOwnPropertyDescriptor(_class$1, "relationshipsObject"), _class$1), _applyDecoratedDescriptor$1(_class$1, "fields", [computeOnce], Object.getOwnPropertyDescriptor(_class$1, "fields"), _class$1), _applyDecoratedDescriptor$1(_class$1, "attributes", [computeOnce], Object.getOwnPropertyDescriptor(_class$1, "attributes"), _class$1), _applyDecoratedDescriptor$1(_class$1, "transformedAttributes", [computeOnce], Object.getOwnPropertyDescriptor(_class$1, "transformedAttributes"), _class$1)), _class$1); // this is required to prevent `init` from passing
  // the values initialized during create to `setUnknownProperty`
  Model.prototype._internalModel = null;
  Model.prototype.store = null;
  Model.prototype._createProps = null;
  {
    /**
     Provides info about the model for debugging purposes
     by grouping the properties into more semantic groups.
      Meant to be used by debugging tools such as the Chrome Ember Extension.
      - Groups all attributes in "Attributes" group.
     - Groups all belongsTo relationships in "Belongs To" group.
     - Groups all hasMany relationships in "Has Many" group.
     - Groups all flags in "Flags" group.
     - Flags relationship CPs as expensive properties.
      @method _debugInfo
     @for Model
     @private
     */
    Model.prototype._debugInfo = function () {
      let attributes = ['id'];
      let relationships = {};
      let expensiveProperties = [];
      this.eachAttribute((name, meta) => attributes.push(name));
      let groups = [{
        name: 'Attributes',
        properties: attributes,
        expand: true
      }];
      this.eachRelationship((name, relationship) => {
        let properties = relationships[relationship.kind];
        if (properties === undefined) {
          properties = relationships[relationship.kind] = [];
          groups.push({
            name: relationship.kind,
            properties,
            expand: true
          });
        }
        properties.push(name);
        expensiveProperties.push(name);
      });
      groups.push({
        name: 'Flags',
        properties: ['isLoaded', 'hasDirtyAttributes', 'isSaving', 'isDeleted', 'isError', 'isNew', 'isValid']
      });
      return {
        propertyInfo: {
          // include all other mixins / properties (not just the grouped ones)
          includeOtherProperties: true,
          groups: groups,
          // don't pre-calculate unless cached
          expensiveProperties: expensiveProperties
        }
      };
    };
  }
  {
    let lookupDescriptor = function lookupDescriptor(obj, keyName) {
      let current = obj;
      do {
        let descriptor = Object.getOwnPropertyDescriptor(current, keyName);
        if (descriptor !== undefined) {
          return descriptor;
        }
        current = Object.getPrototypeOf(current);
      } while (current !== null);
      return null;
    };
    let isBasicDesc = function isBasicDesc(desc) {
      return !desc || !desc.get && !desc.set && desc.enumerable === true && desc.writable === true && desc.configurable === true;
    };
    let isDefaultEmptyDescriptor = function isDefaultEmptyDescriptor(obj, keyName) {
      let instanceDesc = lookupDescriptor(obj, keyName);
      return isBasicDesc(instanceDesc) && lookupDescriptor(obj.constructor, keyName) === null;
    };
    Model.reopen({
      init() {
        this._super(...arguments);
        if (!isDefaultEmptyDescriptor(this, '_internalModel') || !(this._internalModel instanceof Private.InternalModel)) {
          throw new Error(`'_internalModel' is a reserved property name on instances of classes extending Model. Please choose a different property name for ${this.constructor.toString()}`);
        }
        let ourDescriptor = lookupDescriptor(Model.prototype, 'currentState');
        let theirDescriptor = lookupDescriptor(this, 'currentState');
        let realState = this.___recordState || this._internalModel.currentState;
        if (ourDescriptor.get !== theirDescriptor.get || realState !== this.currentState) {
          throw new Error(`'currentState' is a reserved property name on instances of classes extending Model. Please choose a different property name for ${this.constructor.toString()}`);
        }
        const ID_DESCRIPTOR = lookupDescriptor(Model.prototype, 'id');
        let idDesc = lookupDescriptor(this, 'id');
        if (idDesc.get !== ID_DESCRIPTOR.get) {
          throw new EmberError__default["default"](`You may not set 'id' as an attribute on your model. Please remove any lines that look like: \`id: attr('<type>')\` from ${this.constructor.toString()}`);
        }
      }
    });
  }

  /**
    @module @ember-data/model
  */

  /**
    @method diffArray
    @internal
    @param {Array} oldArray the old array
    @param {Array} newArray the new array
    @return {hash} {
        firstChangeIndex: <integer>,  // null if no change
        addedCount: <integer>,        // 0 if no change
        removedCount: <integer>       // 0 if no change
      }
  */
  function diffArray(oldArray, newArray) {
    const oldLength = oldArray.length;
    const newLength = newArray.length;
    const shortestLength = Math.min(oldLength, newLength);
    let firstChangeIndex = null; // null signifies no changes

    // find the first change
    for (let i = 0; i < shortestLength; i++) {
      // compare each item in the array
      if (oldArray[i] !== newArray[i]) {
        firstChangeIndex = i;
        break;
      }
    }
    if (firstChangeIndex === null && newLength !== oldLength) {
      // no change found in the overlapping block
      // and array lengths differ,
      // so change starts at end of overlap
      firstChangeIndex = shortestLength;
    }
    let addedCount = 0;
    let removedCount = 0;
    if (firstChangeIndex !== null) {
      // we found a change, find the end of the change
      let unchangedEndBlockLength = shortestLength - firstChangeIndex;
      // walk back from the end of both arrays until we find a change
      for (let i = 1; i <= shortestLength; i++) {
        // compare each item in the array
        if (oldArray[oldLength - i] !== newArray[newLength - i]) {
          unchangedEndBlockLength = i - 1;
          break;
        }
      }
      addedCount = newLength - unchangedEndBlockLength - firstChangeIndex;
      removedCount = oldLength - unchangedEndBlockLength - firstChangeIndex;
    }
    return {
      firstChangeIndex,
      addedCount,
      removedCount
    };
  }

  /**
    A `ManyArray` is a `MutableArray` that represents the contents of a has-many
    relationship.

    The `ManyArray` is instantiated lazily the first time the relationship is
    requested.

    This class is not intended to be directly instantiated by consuming applications.

    ### Inverses

    Often, the relationships in Ember Data applications will have
    an inverse. For example, imagine the following models are
    defined:

    ```app/models/post.js
    import Model, { hasMany } from '@ember-data/model';

    export default class PostModel extends Model {
      @hasMany('comment') comments;
    }
    ```

    ```app/models/comment.js
    import Model, { belongsTo } from '@ember-data/model';

    export default class CommentModel extends Model {
      @belongsTo('post') post;
    }
    ```

    If you created a new instance of `Post` and added
    a `Comment` record to its `comments` has-many
    relationship, you would expect the comment's `post`
    property to be set to the post that contained
    the has-many.

    We call the record to which a relationship belongs-to the
    relationship's _owner_.

    @class ManyArray
    @public
    @extends Ember.EmberObject
    @uses Ember.MutableArray
  */
  var manyArray = EmberObject__default["default"].extend(MutableArray__default["default"], {
    isAsync: false,
    isLoaded: false,
    init() {
      this._super(...arguments);

      /**
      The loading state of this array
       @property {Boolean} isLoaded
      @public
      */
      this.isLoaded = this.isLoaded || false;
      this._length = 0;

      /**
      Metadata associated with the request for async hasMany relationships.
       Example
       Given that the server returns the following JSON payload when fetching a
      hasMany relationship:
       ```js
      {
        "comments": [{
          "id": 1,
          "comment": "This is the first comment",
        }, {
      // ...
        }],
         "meta": {
          "page": 1,
          "total": 5
        }
      }
      ```
       You can then access the meta data via the `meta` property:
       ```js
      let comments = await post.comments;
      let meta = comments.meta;
       // meta.page => 1
      // meta.total => 5
      ```
       @property {Object | null} meta
      @public
      */
      this._meta = this._meta || null;

      /**
       * Retrieve the links for this relationship
       *
       @property {Object | null} links
       @public
       */
      this._links = this._links || null;

      /**
      `true` if the relationship is polymorphic, `false` otherwise.
       @property {Boolean} isPolymorphic
      @private
      */
      this.isPolymorphic = this.isPolymorphic || false;

      /**
      The relationship which manages this array.
       @property {ManyRelationship} relationship
      @private
      */
      this.currentState = [];
      this._isUpdating = false;
      this._isDirty = false;
      /*
       * Unfortunately ArrayProxy adds it's observers lazily,
       * so in a first-render situation we may sometimes notify
       * prior to the ArrayProxy having installed it's observers
       * (which occurs during _revalidate()).
       *
       * This leads to the flush occuring on access, the flush takes
       * the hasObservers codepath which in code out of our control
       * notifies again leading to a glimmer rendering invalidation error.
       *
       * We use this flag to detect the case where we notified without
       * array observers but observers were installed prior to flush.
       *
       * We do not need to fire array observers at all in this case
       * since it will be the first-access for those observers.
       */
      this._hasNotified = false;
      // make sure we initialize to the correct state
      // since the user has already accessed
      this.retrieveLatest();
    },
    // TODO refactor away _hasArrayObservers for tests
    get _hasArrayObservers() {
      return this.hasArrayObservers || this.__hasArrayObservers;
    },
    notify() {
      this._isDirty = true;
      if (this._hasArrayObservers && !this._hasNotified) {
        this.retrieveLatest();
      } else {
        this._hasNotified = true;
        this.notifyPropertyChange('[]');
        this.notifyPropertyChange('length');
        this.notifyPropertyChange('firstObject');
        this.notifyPropertyChange('lastObject');
      }
    },
    get length() {
      if (this._isDirty) {
        this.retrieveLatest();
      }
      // By using `get()`, the tracking system knows to pay attention to changes that occur.
      EmberObject.get(this, '[]');
      return this._length;
    },
    set length(value) {
      this._length = value;
    },
    get links() {
      EmberObject.get(this, '[]');
      if (this._isDirty) {
        this.retrieveLatest();
      }
      return this._links;
    },
    set links(v) {
      this._links = v;
    },
    get meta() {
      EmberObject.get(this, '[]');
      if (this._isDirty) {
        this.retrieveLatest();
      }
      return this._meta;
    },
    set meta(v) {
      this._meta = v;
    },
    objectAt(index) {
      if (this._isDirty) {
        this.retrieveLatest();
      }
      let internalModel = this.currentState[index];
      if (internalModel === undefined) {
        return;
      }
      return internalModel.getRecord();
    },
    replace(idx, amt, objects) {
      (!(!this._isUpdating) && debug.assert(`Cannot push mutations to the cache while updating the relationship from cache`, !this._isUpdating));
      this.store._backburner.join(() => {
        let internalModels;
        if (amt > 0) {
          internalModels = this.currentState.slice(idx, idx + amt);
          this.recordData.removeFromHasMany(this.key, internalModels.map(im => Private.recordDataFor(im)));
        }
        if (objects) {
          (!(Array.isArray(objects) || EmberArray__default["default"].detect(objects)) && debug.assert('The third argument to replace needs to be an array.', Array.isArray(objects) || EmberArray__default["default"].detect(objects)));
          this.recordData.addToHasMany(this.key, objects.map(obj => Private.recordDataFor(obj)), idx);
        }
        this.notify();
      });
    },
    retrieveLatest() {
      // It’s possible the parent side of the relationship may have been destroyed by this point
      if (this.isDestroyed || this.isDestroying || this._isUpdating) {
        return;
      }
      this._isDirty = false;
      this._isUpdating = true;
      let jsonApi = this.recordData.getHasMany(this.key);
      let internalModels = [];
      if (jsonApi.data) {
        for (let i = 0; i < jsonApi.data.length; i++) {
          let im = this.store._internalModelForResource(jsonApi.data[i]);
          let shouldRemove = im._isDematerializing || im.currentState.isEmpty || !im.currentState.isLoaded;
          if (!shouldRemove) {
            internalModels.push(im);
          }
        }
      }
      if (jsonApi.meta) {
        this._meta = jsonApi.meta;
      }
      if (jsonApi.links) {
        this._links = jsonApi.links;
      }
      if (this._hasArrayObservers && !this._hasNotified) {
        // diff to find changes
        let diff = diffArray(this.currentState, internalModels);
        // it's null if no change found
        if (diff.firstChangeIndex !== null) {
          // we found a change
          this.arrayContentWillChange(diff.firstChangeIndex, diff.removedCount, diff.addedCount);
          this._length = internalModels.length;
          this.currentState = internalModels;
          this.arrayContentDidChange(diff.firstChangeIndex, diff.removedCount, diff.addedCount);
        }
      } else {
        this._hasNotified = false;
        this._length = internalModels.length;
        this.currentState = internalModels;
      }
      this._isUpdating = false;
    },
    /**
      Reloads all of the records in the manyArray. If the manyArray
      holds a relationship that was originally fetched using a links url
      Ember Data will revisit the original links url to repopulate the
      relationship.
       If the manyArray holds the result of a `store.query()` reload will
      re-run the original query.
       Example
       ```javascript
      let user = store.peekRecord('user', '1')
      await login(user);
       let permissions = await user.permissions;
      await permissions.reload();
      ```
       @method reload
      @public
    */
    reload(options) {
      // TODO this is odd, we don't ask the store for anything else like this?
      return this.store.reloadManyArray(this, this.internalModel, this.key, options);
    },
    /**
      Saves all of the records in the `ManyArray`.
       Example
       ```javascript
      let inbox = await store.findRecord('inbox', '1');
      let messages = await inbox.messages;
      messages.forEach((message) => {
        message.isRead = true;
      });
      messages.save();
      ```
       @method save
      @public
      @return {PromiseArray} promise
    */
    save() {
      let manyArray = this;
      let promiseLabel = 'DS: ManyArray#save ' + this.type;
      let promise = rsvp.all(this.invoke('save'), promiseLabel).then(() => manyArray, null, 'DS: ManyArray#save return ManyArray');

      // TODO deprecate returning a promiseArray here
      return Private.PromiseArray.create({
        promise
      });
    },
    /**
      Create a child record within the owner
       @method createRecord
      @public
      @param {Object} hash
      @return {Model} record
    */
    createRecord(hash) {
      const {
        store,
        type
      } = this;
      let record = store.createRecord(type.modelName, hash);
      this.pushObject(record);
      return record;
    }
  });

  /**
   @module @ember-data/model
   */

  /**
    A PromiseBelongsTo is a PromiseObject that also proxies certain method calls
    to the underlying belongsTo model.
    Right now we proxy:

      * `reload()`

    @class PromiseBelongsTo
    @extends PromiseObject
    @private
  */
  const PromiseBelongsTo = Private.PromiseObject.extend({
    // we don't proxy meta because we would need to proxy it to the relationship state container
    //  however, meta on relationships does not trigger change notifications.
    //  if you need relationship meta, you should do `record.belongsTo(relationshipName).meta()`
    meta: EmberObject.computed(function () {
      (debug.assert('You attempted to access meta on the promise for the async belongsTo relationship ' + `${this.get('_belongsToState').modelName}:${this.get('_belongsToState').key}'.` + '\nUse `record.belongsTo(relationshipName).meta()` instead.', false));
    }),
    reload(options) {
      (!(this.get('content') !== undefined) && debug.assert('You are trying to reload an async belongsTo before it has been created', this.get('content') !== undefined));
      let {
        key,
        store,
        originatingInternalModel
      } = this._belongsToState;
      return store.reloadBelongsTo(this, originatingInternalModel, key, options).then(() => this);
    }
  });

  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  /**
   @module @ember-data/model
   */
  /**
    This class is returned as the result of accessing an async hasMany relationship
    on an instance of a Model extending from `@ember-data/model`.

    A PromiseManyArray is an array-like proxy that also proxies certain method calls
    to the underlying ManyArray in addition to being "promisified".

    Right now we proxy:

      * `reload()`
      * `createRecord()`

    This promise-proxy behavior is primarily to ensure that async relationship interact
    nicely with templates. In your JS code you should resolve the promise first.

    ```js
    const comments = await post.comments;
    ```

    @class PromiseManyArray
    @public
  */
  let PromiseManyArray = (_class = class PromiseManyArray {
    constructor(promise, content) {
      //---- Methods/Properties on ArrayProxy that we will keep as our API
      _initializerDefineProperty(this, "content", _descriptor, this);
      //----  Properties/Methods from the PromiseProxyMixin that we will keep as our API
      /**
       * Whether the loading promise is still pending
       *
       * @property {boolean} isPending
       * @public
       */
      _initializerDefineProperty(this, "isPending", _descriptor2, this);
      /**
       * Whether the loading promise rejected
       *
       * @property {boolean} isRejected
       * @public
       */
      _initializerDefineProperty(this, "isRejected", _descriptor3, this);
      /**
       * Whether the loading promise succeeded
       *
       * @property {boolean} isFulfilled
       * @public
       */
      _initializerDefineProperty(this, "isFulfilled", _descriptor4, this);
      /**
       * Whether the loading promise completed (resolved or rejected)
       *
       * @property {boolean} isSettled
       * @public
       */
      _initializerDefineProperty(this, "isSettled", _descriptor5, this);
      this._update(promise, content);
      this.isDestroyed = false;
      this.isDestroying = false;
      const meta = Ember__default["default"].meta(this);
      meta.hasMixin = mixin => {
        if (mixin === EmberArray__default["default"]) {
          return true;
        }
        return false;
      };
    }
    /**
     * Retrieve the length of the content
     * @property length
     * @public
     */
    get length() {
      // shouldn't be needed, but ends up being needed
      // for computed chains even in 4.x
      this['[]'];
      return this.content ? this.content.length : 0;
    }

    // ember-source < 3.23 (e.g. 3.20 lts)
    // requires that the tag `'[]'` be notified
    // on the ArrayProxy in order for `{{#each}}`
    // to recompute. We entangle the '[]' tag from
    get '[]'() {
      return this.content ? this.content['[]'] : this.content;
    }

    /**
     * Iterate the proxied content. Called by the glimmer iterator in #each
     *
     * @method forEach
     * @param cb
     * @returns
     * @private
     */
    forEach(cb) {
      this['[]']; // needed for < 3.23 support e.g. 3.20 lts
      if (this.content && this.length) {
        this.content.forEach(cb);
      }
    }
    /**
     * chain this promise
     *
     * @method then
     * @public
     * @param success
     * @param fail
     * @returns Promise
     */
    then(s, f) {
      return this.promise.then(s, f);
    }

    /**
     * catch errors thrown by this promise
     * @method catch
     * @public
     * @param callback
     * @returns Promise
     */
    catch(cb) {
      return this.promise.catch(cb);
    }

    /**
     * run cleanup after this promise completes
     *
     * @method finally
     * @public
     * @param callback
     * @returns Promise
     */
    finally(cb) {
      return this.promise.finally(cb);
    }

    //---- Methods on EmberObject that we should keep

    destroy() {
      this.isDestroying = true;
      this.isDestroyed = true;
      this.content = null;
      this.promise = null;
    }

    //---- Methods/Properties on ManyArray that we own and proxy to

    /**
     * Retrieve the links for this relationship
     * @property links
     * @public
     */
    get links() {
      return this.content ? this.content.links : undefined;
    }

    /**
     * Retrieve the meta for this relationship
     * @property meta
     * @public
     */
    get meta() {
      return this.content ? this.content.meta : undefined;
    }

    /**
     * Reload the relationship
     * @method reload
     * @public
     * @param options
     * @returns
     */
    reload(options) {
      (!(this.content) && debug.assert('You are trying to reload an async manyArray before it has been created', this.content));
      this.content.reload(options);
      return this;
    }

    //---- Our own stuff

    _update(promise, content) {
      if (content !== undefined) {
        this.content = content;
      }
      this.promise = tapPromise(this, promise);
    }
    static create({
      promise,
      content
    }) {
      return new this(promise, content);
    }

    // Methods on ManyArray which people should resolve the relationship first before calling
    createRecord(...args) {
      (!(this.content) && debug.assert('You are trying to createRecord on an async manyArray before it has been created', this.content));
      return this.content.createRecord(...args);
    }

    // Properties/Methods on ArrayProxy we should deprecate

    get firstObject() {
      return this.content ? this.content.firstObject : undefined;
    }
    get lastObject() {
      return this.content ? this.content.lastObject : undefined;
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "content", [tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "length", [compat.dependentKeyCompat], Object.getOwnPropertyDescriptor(_class.prototype, "length"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '[]', [compat.dependentKeyCompat], Object.getOwnPropertyDescriptor(_class.prototype, '[]'), _class.prototype), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "isPending", [tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "isRejected", [tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "isFulfilled", [tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "isSettled", [tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "links", [compat.dependentKeyCompat], Object.getOwnPropertyDescriptor(_class.prototype, "links"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "meta", [compat.dependentKeyCompat], Object.getOwnPropertyDescriptor(_class.prototype, "meta"), _class.prototype)), _class);
  function tapPromise(proxy, promise) {
    proxy.isPending = true;
    proxy.isSettled = false;
    proxy.isFulfilled = false;
    proxy.isRejected = false;
    return rsvp.resolve(promise).then(content => {
      proxy.isPending = false;
      proxy.isFulfilled = true;
      proxy.isSettled = true;
      proxy.content = content;
      return content;
    }, error => {
      proxy.isPending = false;
      proxy.isFulfilled = false;
      proxy.isRejected = true;
      proxy.isSettled = true;
      throw error;
    });
  }
  const EmberObjectMethods = ['addObserver', 'cacheFor', 'decrementProperty', 'get', 'getProperties', 'incrementProperty', 'notifyPropertyChange', 'removeObserver', 'set', 'setProperties', 'toggleProperty'];
  EmberObjectMethods.forEach(method => {
    PromiseManyArray.prototype[method] = function delegatedMethod(...args) {
      return Ember__default["default"][method](this, ...args);
    };
  });
  const InheritedProxyMethods = ['addArrayObserver', 'addObject', 'addObjects', 'any', 'arrayContentDidChange', 'arrayContentWillChange', 'clear', 'compact', 'every', 'filter', 'filterBy', 'find', 'findBy', 'getEach', 'includes', 'indexOf', 'insertAt', 'invoke', 'isAny', 'isEvery', 'lastIndexOf', 'map', 'mapBy', 'objectAt', 'objectsAt', 'popObject', 'pushObject', 'pushObjects', 'reduce', 'reject', 'rejectBy', 'removeArrayObserver', 'removeAt', 'removeObject', 'removeObjects', 'replace', 'reverseObjects', 'setEach', 'setObjects', 'shiftObject', 'slice', 'sortBy', 'toArray', 'uniq', 'uniqBy', 'unshiftObject', 'unshiftObjects', 'without'];
  InheritedProxyMethods.forEach(method => {
    PromiseManyArray.prototype[method] = function proxiedMethod(...args) {
      (!(this.content) && debug.assert(`Cannot call ${method} before content is assigned.`, this.content));
      return this.content[method](...args);
    };
  });

  /* 
      In case someone defined a relationship to a mixin, for example:
      ```
        import Model, { belongsTo, hasMany } from '@ember-data/model';
        import Mixin from '@ember/object/mixin';

        class CommentModel extends Model {
          @belongsTo('commentable', { polymorphic: true }) owner;
        }

        let Commentable = Mixin.create({
          @hasMany('comment') comments;
        });
      ```
      we want to look up a Commentable class which has all the necessary
      relationship meta data. Thus, we look up the mixin and create a mock
      Model, so we can access the relationship CPs of the mixin (`comments`)
      in this case
    */
  function modelForMixin(store, normalizedModelName) {
    let owner = application.getOwner(store);
    let MaybeMixin = owner.factoryFor(`mixin:${normalizedModelName}`);
    let mixin = MaybeMixin && MaybeMixin.class;
    if (mixin) {
      let ModelForMixin = Model.extend(mixin);
      ModelForMixin.reopenClass({
        __isMixin: true,
        __mixin: mixin
      });
      //Cache the class as a model
      owner.register('model:' + normalizedModelName, ModelForMixin);
    }
    return owner.factoryFor(`model:${normalizedModelName}`);
  }

  exports.Errors = Errors;
  exports.ManyArray = manyArray;
  exports.Model = Model;
  exports.PromiseBelongsTo = PromiseBelongsTo;
  exports.PromiseManyArray = PromiseManyArray;
  exports._modelForMixin = modelForMixin;
  exports.attr = attr$1;
  exports.belongsTo = belongsTo$1;
  exports.diffArray = diffArray;
  exports.hasMany = hasMany$1;

  Object.defineProperty(exports, '__esModule', { value: true });

}));

;define("@ember-data/model/index", ["exports", "@ember-data/model/-private"], function (_exports, _private) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "attr", {
    enumerable: true,
    get: function () {
      return _private.attr;
    }
  });
  Object.defineProperty(_exports, "belongsTo", {
    enumerable: true,
    get: function () {
      return _private.belongsTo;
    }
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _private.Model;
    }
  });
  Object.defineProperty(_exports, "hasMany", {
    enumerable: true,
    get: function () {
      return _private.hasMany;
    }
  });
  0; //eaimeta@70e063a35619d71f0,"@ember-data/model/-private"eaimeta@70e063a35619d71f
  /**
   In EmberData a `Model` is a class defining the attributes and relationships
    of a specific resource `type` (model name). In this sense it represents a static "schema".
  
    Data for individual resources fetched from your API is presented
    to the UI via instances of the `Model`s you define.
  
    An instantiated `Model` is referred to as a `record`.
  
    When we refer to the `ModelClass` we are referring to the class definition
    and the static schema methods present on it.
  
    When we refer to a `record` we refer to a specific class instance presenting
    the resource data for a given `type` and `id`.
  
    ### Defining a Model
  
    ```app/models/person.js
    import Model, { attr, belongsTo, hasMany } from '@ember-data/model';
  
    export default class PersonModel extends Model {
      @attr name;
  
      @belongsTo('pet', { inverse: 'owners', async: false }) dog;
  
      @hasMany('person', { inverse: 'friends', async: true }) friends;
    }
    ```
  
    ### modelName convention
  
    By convention, the name of a given model (its `type`) matches the name
    of the file in the `app/models` folder and should be lowercase, singular
    and dasherized.
  
    @module @ember-data/model
    @main @ember-data/model
   */
});
;define("@ember-data/private-build-infra/available-packages", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = {
    HAS_EMBER_DATA_PACKAGE: 'ember-data',
    HAS_STORE_PACKAGE: '@ember-data/store',
    HAS_MODEL_PACKAGE: '@ember-data/model',
    HAS_RECORD_DATA_PACKAGE: '@ember-data/record-data',
    HAS_ADAPTER_PACKAGE: '@ember-data/adapter',
    HAS_SERIALIZER_PACKAGE: '@ember-data/serializer',
    HAS_DEBUG_PACKAGE: '@ember-data/debug'
  };
});
;define("@ember-data/private-build-infra/current-deprecations", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
   * ## Deprecations
   *
   * EmberData allows users to opt-in and remove code that exists to support deprecated
   * behaviors.
   *
   * If your app has resolved all deprecations present in a given version,
   * you may specify that version as your "compatibility" version to remove
   * the code that supported the deprecated behavior from your app.
   *
   * For instance, if a deprecation was introduced in 3.13, and the app specifies
   * 3.13 as its minimum version compatibility, any deprecations introduced before
   * or during 3.13 would be stripped away.
   *
   * An app can use a different version than what it specifies as it's compatibility
   * version. For instance, an App could be using `3.16` while specifying compatibility
   * with `3.12`. This would remove any deprecations that were present in or before `3.12`
   * but keep support for anything deprecated in or above `3.13`.
   *
   * ### Configuring Compatibility
   *
   * To configure your compatibility version, set the `compatWith` to the version you
   * are compatible with on the `emberData` config in your `ember-cli-build.js` file.
   *
   * ```js
   * let app = new EmberApp(defaults, {
   *   emberData: {
   *     compatWith: '3.12',
   *   },
   * });
   * ```
   *
   * The complete list of which versions specific deprecations will be removed in
   * can be found [here](https://github.com/emberjs/data/tree/master/packages/private-build-infra/addon/current-deprecations.ts "List of EmberData Deprecations")
   *
   * @module @ember-data/deprecations
   * @main @ember-data/deprecations
   */
  var _default = _exports.default = {
    DEPRECATE_CATCH_ALL: '99.0',
    DEPRECATE_3_12: '3.12',
    DEPRECATE_SAVE_PROMISE_ACCESS: '4.4'
  };
});
;define("@ember-data/private-build-infra/deprecations", ["exports", "@ember-data/private-build-infra/current-deprecations"], function (_exports, _currentDeprecations) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.DEPRECATE_SAVE_PROMISE_ACCESS = _exports.DEPRECATE_CATCH_ALL = _exports.DEPRECATE_3_12 = void 0;
  function deprecationState(deprecationName) {
    // if we hit this at runtime and the deprecation exists it is always activated
    return deprecationName in _currentDeprecations.default;
  }

  // deprecations
  const DEPRECATE_CATCH_ALL = _exports.DEPRECATE_CATCH_ALL = deprecationState('DEPRECATE_CATCH_ALL');
  const DEPRECATE_3_12 = _exports.DEPRECATE_3_12 = deprecationState('DEPRECATE_3_12');
  const DEPRECATE_SAVE_PROMISE_ACCESS = _exports.DEPRECATE_SAVE_PROMISE_ACCESS = deprecationState('DEPRECATE_SAVE_PROMISE_ACCESS');
});
;define("@ember-data/private-build-infra/index", ["exports", "require", "@ember-data/private-build-infra/available-packages"], function (_exports, _require, _availablePackages) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HAS_STORE_PACKAGE = _exports.HAS_SERIALIZER_PACKAGE = _exports.HAS_RECORD_DATA_PACKAGE = _exports.HAS_MODEL_PACKAGE = _exports.HAS_EMBER_DATA_PACKAGE = _exports.HAS_DEBUG_PACKAGE = _exports.HAS_ADAPTER_PACKAGE = void 0;
  function flagState(flag) {
    const packageName = _availablePackages.default[flag];
    return (0, _require.has)(packageName) || false;
  }
  const HAS_EMBER_DATA_PACKAGE = _exports.HAS_EMBER_DATA_PACKAGE = flagState('HAS_EMBER_DATA_PACKAGE');
  const HAS_STORE_PACKAGE = _exports.HAS_STORE_PACKAGE = flagState('HAS_STORE_PACKAGE');
  const HAS_MODEL_PACKAGE = _exports.HAS_MODEL_PACKAGE = flagState('HAS_MODEL_PACKAGE');
  const HAS_ADAPTER_PACKAGE = _exports.HAS_ADAPTER_PACKAGE = flagState('HAS_ADAPTER_PACKAGE');
  const HAS_SERIALIZER_PACKAGE = _exports.HAS_SERIALIZER_PACKAGE = flagState('HAS_SERIALIZER_PACKAGE');
  const HAS_DEBUG_PACKAGE = _exports.HAS_DEBUG_PACKAGE = flagState('HAS_DEBUG_PACKAGE');
  const HAS_RECORD_DATA_PACKAGE = _exports.HAS_RECORD_DATA_PACKAGE = flagState('HAS_RECORD_DATA_PACKAGE');
});
;define('@ember-data/record-data/-private', ['exports', '@ember/debug', '@ember/runloop', '@ember/utils', '@ember-data/store/-private', '@ember-data/store/-debug'], (function (exports, debug, runloop, utils, Private, Debug) { 'use strict';

  // Used by the store to normalize IDs entering the store.  Despite the fact
  // that developers may provide IDs as numbers (e.g., `store.findRecord('person', 1)`),
  // it is important that internally we use strings, since IDs may be serialized
  // and lose type information.  For example, Ember's router may put a record's
  // ID into the URL, and if we later try to deserialize that URL and find the
  // corresponding record, we will not know if it is a string or a number.
  function coerceId(id) {
    if (id === null || id === undefined || id === '') {
      return null;
    }
    if (typeof id === 'string') {
      return id;
    }
    if (typeof id === 'symbol') {
      return id.toString();
    }
    return '' + id;
  }

  function expandingGet(cache, key1, key2) {
    let mainCache = cache[key1] = cache[key1] || Object.create(null);
    return mainCache[key2];
  }
  function expandingSet(cache, key1, key2, value) {
    let mainCache = cache[key1] = cache[key1] || Object.create(null);
    mainCache[key2] = value;
  }
  function assertValidRelationshipPayload(graph, op) {
    const relationship = graph.get(op.record, op.field);
    (!(isHasMany(relationship) || isBelongsTo(relationship)) && debug.assert(`Cannot update an implicit relationship`, isHasMany(relationship) || isBelongsTo(relationship)));
    const payload = op.value;
    const {
      definition,
      identifier,
      state
    } = relationship;
    const {
      type
    } = identifier;
    const {
      field
    } = op;
    const {
      isAsync,
      kind
    } = definition;
    if (payload.links) {
      (debug.warn(`You pushed a record of type '${type}' with a relationship '${field}' configured as 'async: false'. You've included a link but no primary data, this may be an error in your payload. EmberData will treat this relationship as known-to-be-empty.`, isAsync || !!payload.data || state.hasReceivedData, {
        id: 'ds.store.push-link-for-sync-relationship'
      }));
    } else if (payload.data) {
      if (kind === 'belongsTo') {
        (!(!Array.isArray(payload.data)) && debug.assert(`A ${type} record was pushed into the store with the value of ${field} being ${debug.inspect(payload.data)}, but ${field} is a belongsTo relationship so the value must not be an array. You should probably check your data payload or serializer.`, !Array.isArray(payload.data)));
        assertRelationshipData(graph.store._store, identifier, payload.data, definition);
      } else if (kind === 'hasMany') {
        (!(Array.isArray(payload.data)) && debug.assert(`A ${type} record was pushed into the store with the value of ${field} being '${debug.inspect(payload.data)}', but ${field} is a hasMany relationship so the value must be an array. You should probably check your data payload or serializer.`, Array.isArray(payload.data)));
        if (Array.isArray(payload.data)) {
          for (let i = 0; i < payload.data.length; i++) {
            assertRelationshipData(graph.store._store, identifier, payload.data[i], definition);
          }
        }
      }
    }
  }
  function isNew(identifier) {
    if (!identifier.id) {
      return true;
    }
    const recordData = Private.recordDataFor(identifier);
    return recordData ? isRelationshipRecordData(recordData) && recordData.isNew() : false;
  }
  function isRelationshipRecordData(recordData) {
    return typeof recordData.isNew === 'function';
  }
  function isBelongsTo(relationship) {
    return relationship.definition.kind === 'belongsTo';
  }
  function isImplicit(relationship) {
    return relationship.definition.isImplicit;
  }
  function isHasMany(relationship) {
    return relationship.definition.kind === 'hasMany';
  }
  function assertRelationshipData(store, identifier, data, meta) {
    (!(!Array.isArray(data)) && debug.assert(`A ${identifier.type} record was pushed into the store with the value of ${meta.key} being '${JSON.stringify(data)}', but ${meta.key} is a belongsTo relationship so the value must not be an array. You should probably check your data payload or serializer.`, !Array.isArray(data)));
    (!(data === null || typeof data.type === 'string' && data.type.length) && debug.assert(`Encountered a relationship identifier without a type for the ${meta.kind} relationship '${meta.key}' on <${identifier.type}:${identifier.id}>, expected a json-api identifier with type '${meta.type}' but found '${JSON.stringify(data)}'. Please check your serializer and make sure it is serializing the relationship payload into a JSON API format.`, data === null || typeof data.type === 'string' && data.type.length));
    (!(data === null || !!Private.coerceId(data.id)) && debug.assert(`Encountered a relationship identifier without an id for the ${meta.kind} relationship '${meta.key}' on <${identifier.type}:${identifier.id}>, expected a json-api identifier but found '${JSON.stringify(data)}'. Please check your serializer and make sure it is serializing the relationship payload into a JSON API format.`, data === null || !!Private.coerceId(data.id)));
    (!(data === null || !data.type || store._hasModelFor(data.type)) && debug.assert(`Encountered a relationship identifier with type '${data.type}' for the ${meta.kind} relationship '${meta.key}' on <${identifier.type}:${identifier.id}>, Expected a json-api identifier with type '${meta.type}'. No model was found for '${data.type}'.`, data === null || !data.type || store._hasModelFor(data.type)));
  }

  function createState() {
    return {
      hasReceivedData: false,
      isEmpty: true,
      isStale: false,
      hasFailedLoadAttempt: false,
      shouldForceReload: false,
      hasDematerializedInverse: false
    };
  }

  class BelongsToRelationship {
    constructor(graph, definition, identifier) {
      this.graph = graph;
      this.store = graph.store;
      this.definition = definition;
      this.identifier = identifier;
      this._state = null;
      this.transactionRef = 0;
      this.meta = null;
      this.links = null;
      this.localState = null;
      this.remoteState = null;
    }
    get state() {
      let {
        _state
      } = this;
      if (!_state) {
        _state = this._state = createState();
      }
      return _state;
    }
    recordDataDidDematerialize() {
      if (this.definition.inverseIsImplicit) {
        return;
      }
      const inverseKey = this.definition.inverseKey;
      const callback = inverseIdentifier => {
        if (!inverseIdentifier || !this.graph.has(inverseIdentifier, inverseKey)) {
          return;
        }
        let relationship = this.graph.get(inverseIdentifier, inverseKey);

        // For canonical members, it is possible that inverseRecordData has already been associated to
        // to another record. For such cases, do not dematerialize the inverseRecordData
        if (relationship.definition.kind !== 'belongsTo' || !relationship.localState || this.identifier === relationship.localState) {
          relationship.inverseDidDematerialize(this.identifier);
        }
      };
      if (this.remoteState) {
        callback(this.remoteState);
      }
      if (this.localState && this.localState !== this.remoteState) {
        callback(this.localState);
      }
    }
    inverseDidDematerialize() {
      const inverseRecordData = this.localState;
      if (!this.definition.isAsync || inverseRecordData && isNew(inverseRecordData)) {
        // unloading inverse of a sync relationship is treated as a client-side
        // delete, so actually remove the models don't merely invalidate the cp
        // cache.
        // if the record being unloaded only exists on the client, we similarly
        // treat it as a client side delete
        if (this.localState === inverseRecordData && inverseRecordData !== null) {
          this.localState = null;
        }
        if (this.remoteState === inverseRecordData && inverseRecordData !== null) {
          this.remoteState = null;
          this.state.hasReceivedData = true;
          this.state.isEmpty = true;
          if (this.localState && !isNew(this.localState)) {
            this.localState = null;
          }
        }
      } else {
        this.state.hasDematerializedInverse = true;
      }
      this.notifyBelongsToChange();
    }
    getData() {
      let data;
      let payload = {};
      if (this.localState) {
        data = this.localState;
      }
      if (this.localState === null && this.state.hasReceivedData) {
        data = null;
      }
      if (this.links) {
        payload.links = this.links;
      }
      if (data !== undefined) {
        payload.data = data;
      }
      if (this.meta) {
        payload.meta = this.meta;
      }
      payload._relationship = this;
      return payload;
    }

    /*
        Removes the given RecordData from BOTH canonical AND current state.
    
        This method is useful when either a deletion or a rollback on a new record
        needs to entirely purge itself from an inverse relationship.
       */
    removeCompletelyFromOwn(recordData) {
      if (this.remoteState === recordData) {
        this.remoteState = null;
      }
      if (this.localState === recordData) {
        this.localState = null;
        // This allows dematerialized inverses to be rematerialized
        // we shouldn't be notifying here though, figure out where
        // a notification was missed elsewhere.
        this.notifyBelongsToChange();
      }
    }
    notifyBelongsToChange() {
      let recordData = this.identifier;
      this.store.notifyBelongsToChange(recordData.type, recordData.id, recordData.lid, this.definition.key);
    }
    clear() {
      this.localState = null;
      this.remoteState = null;
      this.state.hasReceivedData = false;
      this.state.isEmpty = true;
    }
  }

  class ManyRelationship {
    constructor(graph, definition, identifier) {
      this.graph = graph;
      this.store = graph.store;
      this.definition = definition;
      this.identifier = identifier;
      this._state = null;
      this.transactionRef = 0;
      this.members = new Set();
      this.canonicalMembers = new Set();
      this.meta = null;
      this.links = null;

      // persisted state
      this.canonicalState = [];
      // local client state
      this.currentState = [];
      this._willUpdateManyArray = false;
      this._pendingManyArrayUpdates = null;
    }
    get state() {
      let {
        _state
      } = this;
      if (!_state) {
        _state = this._state = createState();
      }
      return _state;
    }
    recordDataDidDematerialize() {
      if (this.definition.inverseIsImplicit) {
        return;
      }
      const inverseKey = this.definition.inverseKey;
      this.forAllMembers(inverseIdentifier => {
        if (!inverseIdentifier || !this.graph.has(inverseIdentifier, inverseKey)) {
          return;
        }
        let relationship = this.graph.get(inverseIdentifier, inverseKey);
        (!(!isImplicit(relationship)) && debug.assert(`expected no implicit`, !isImplicit(relationship))); // For canonical members, it is possible that inverseRecordData has already been associated to
        // to another record. For such cases, do not dematerialize the inverseRecordData
        if (relationship.definition.kind !== 'belongsTo' || !relationship.localState || this.identifier === relationship.localState) {
          relationship.inverseDidDematerialize(this.identifier);
        }
      });
    }
    forAllMembers(callback) {
      // ensure we don't walk anything twice if an entry is
      // in both members and canonicalMembers
      let seen = Object.create(null);
      for (let i = 0; i < this.currentState.length; i++) {
        const inverseInternalModel = this.currentState[i];
        const id = inverseInternalModel.lid;
        if (!seen[id]) {
          seen[id] = true;
          callback(inverseInternalModel);
        }
      }
      for (let i = 0; i < this.canonicalState.length; i++) {
        const inverseInternalModel = this.canonicalState[i];
        const id = inverseInternalModel.lid;
        if (!seen[id]) {
          seen[id] = true;
          callback(inverseInternalModel);
        }
      }
    }
    clear() {
      this.members.clear();
      this.canonicalMembers.clear();
      this.currentState = [];
      this.canonicalState = [];
    }
    inverseDidDematerialize(inverseRecordData) {
      if (!this.definition.isAsync || inverseRecordData && isNew(inverseRecordData)) {
        // unloading inverse of a sync relationship is treated as a client-side
        // delete, so actually remove the models don't merely invalidate the cp
        // cache.
        // if the record being unloaded only exists on the client, we similarly
        // treat it as a client side delete
        this.removeCompletelyFromOwn(inverseRecordData);
      } else {
        this.state.hasDematerializedInverse = true;
      }
      this.notifyHasManyChange();
    }

    /*
      Removes the given RecordData from BOTH canonical AND current state.
       This method is useful when either a deletion or a rollback on a new record
      needs to entirely purge itself from an inverse relationship.
    */
    removeCompletelyFromOwn(recordData) {
      this.canonicalMembers.delete(recordData);
      this.members.delete(recordData);
      const canonicalIndex = this.canonicalState.indexOf(recordData);
      if (canonicalIndex !== -1) {
        this.canonicalState.splice(canonicalIndex, 1);
      }
      const currentIndex = this.currentState.indexOf(recordData);
      if (currentIndex !== -1) {
        this.currentState.splice(currentIndex, 1);
        // This allows dematerialized inverses to be rematerialized
        // we shouldn't be notifying here though, figure out where
        // a notification was missed elsewhere.
        this.notifyHasManyChange();
      }
    }
    notifyHasManyChange() {
      const {
        store,
        identifier: recordData
      } = this;
      store.notifyHasManyChange(recordData.type, recordData.id, recordData.lid, this.definition.key);
    }
    getData() {
      let payload = {};
      if (this.state.hasReceivedData) {
        payload.data = this.currentState.slice();
      }
      if (this.links) {
        payload.links = this.links;
      }
      if (this.meta) {
        payload.meta = this.meta;
      }
      return payload;
    }
  }

  /**
    @module @ember-data/store
  */
  class ImplicitRelationship {
    constructor(graph, definition, identifier) {
      this.graph = graph;
      this.definition = definition;
      this.identifier = identifier;
      this.members = new Set();
      this.canonicalMembers = new Set();
    }
    addCanonicalRecordData(recordData, idx) {
      if (!this.canonicalMembers.has(recordData)) {
        this.canonicalMembers.add(recordData);
        this.members.add(recordData);
      }
    }
    addRecordData(recordData, idx) {
      if (!this.members.has(recordData)) {
        this.members.add(recordData);
      }
    }
    removeRecordData(recordData) {
      if (recordData && this.members.has(recordData)) {
        this.members.delete(recordData);
      }
    }
    removeCompletelyFromOwn(recordData) {
      this.canonicalMembers.delete(recordData);
      this.members.delete(recordData);
    }
    clear() {
      this.canonicalMembers.clear();
      this.members.clear();
    }
  }

  const BOOL_LATER = null;
  const STR_LATER = '';
  const IMPLICIT_KEY_RAND = Date.now();
  function implicitKeyFor(type, key) {
    return `implicit-${type}:${key}${IMPLICIT_KEY_RAND}`;
  }
  function syncMeta(definition, inverseDefinition) {
    definition.inverseKind = inverseDefinition.kind;
    definition.inverseKey = inverseDefinition.key;
    definition.inverseType = inverseDefinition.type;
    definition.inverseIsAsync = inverseDefinition.isAsync;
    definition.inverseIsCollection = inverseDefinition.isCollection;
    definition.inverseIsPolymorphic = inverseDefinition.isPolymorphic;
    definition.inverseIsImplicit = inverseDefinition.isImplicit;
  }
  function upgradeMeta(meta) {
    let niceMeta = {};
    let options = meta.options;
    niceMeta.kind = meta.kind;
    niceMeta.key = meta.name;
    niceMeta.type = meta.type;
    niceMeta.isAsync = options && options.async !== undefined ? !!options.async : true;
    niceMeta.isImplicit = false;
    niceMeta.isCollection = meta.kind === 'hasMany';
    niceMeta.isPolymorphic = options && !!options.polymorphic;
    niceMeta.inverseKey = options && options.inverse || STR_LATER;
    niceMeta.inverseType = STR_LATER;
    niceMeta.inverseIsAsync = BOOL_LATER;
    niceMeta.inverseIsImplicit = options && options.inverse === null || BOOL_LATER;
    niceMeta.inverseIsCollection = BOOL_LATER;
    return niceMeta;
  }
  function isLHS(info, type, key) {
    let isSelfReferential = info.isSelfReferential;
    let isRelationship = key === info.lhs_relationshipName;
    if (isRelationship === true) {
      return isSelfReferential === true ||
      // itself
      type === info.lhs_baseModelName ||
      // base or non-polymorphic
      // if the other side is polymorphic then we need to scan our modelNames
      info.rhs_isPolymorphic && info.lhs_modelNames.indexOf(type) !== -1 // polymorphic
      ;
    }

    return false;
  }
  function upgradeDefinition(graph, identifier, propertyName, isImplicit = false) {
    const cache = graph._definitionCache;
    const storeWrapper = graph.store;
    const polymorphicLookup = graph._potentialPolymorphicTypes;
    const {
      type
    } = identifier;
    let cached = expandingGet(cache, type, propertyName);

    // CASE: We have a cached resolution (null if no relationship exists)
    if (cached !== undefined) {
      return cached;
    }
    (!(!isImplicit) && debug.assert(`Expected to find relationship definition in the cache for the implicit relationship ${propertyName}`, !isImplicit));
    let relationships = storeWrapper.relationshipsDefinitionFor(type);
    (!(relationships) && debug.assert(`Expected to have a relationship definition for ${type} but none was found.`, relationships));
    let meta = relationships[propertyName];
    if (!meta) {
      if (polymorphicLookup[type]) {
        const altTypes = Object.keys(polymorphicLookup[type]);
        for (let i = 0; i < altTypes.length; i++) {
          let cached = expandingGet(cache, altTypes[i], propertyName);
          if (cached) {
            expandingSet(cache, type, propertyName, cached);
            return cached;
          }
        }
      }

      // CASE: We don't have a relationship at all
      // we should only hit this in prod
      (!(meta) && debug.assert(`Expected to find a relationship definition for ${type}.${propertyName} but none was found.`, meta));
      cache[type][propertyName] = null;
      return null;
    }
    const definition = upgradeMeta(meta);
    let inverseDefinition;
    let inverseKey;
    const inverseType = definition.type;

    // CASE: Inverse is explicitly null
    if (definition.inverseKey === null) {
      (!(storeWrapper._store.modelFor(inverseType)) && debug.assert(`Expected the inverse model to exist`, storeWrapper._store.modelFor(inverseType)));
      inverseDefinition = null;
    } else {
      inverseKey = storeWrapper.inverseForRelationship(type, propertyName);

      // CASE: Inverse resolves to null
      if (!inverseKey) {
        inverseDefinition = null;
      } else {
        // CASE: We have an explicit inverse or were able to resolve one
        let inverseDefinitions = storeWrapper.relationshipsDefinitionFor(inverseType);
        (!(inverseDefinitions) && debug.assert(`Expected to have a relationship definition for ${inverseType} but none was found.`, inverseDefinitions));
        let meta = inverseDefinitions[inverseKey];
        (!(meta) && debug.assert(`Expected to find a relationship definition for ${inverseType}.${inverseKey} but none was found.`, meta));
        inverseDefinition = upgradeMeta(meta);
      }
    }

    // CASE: We have no inverse
    if (!inverseDefinition) {
      // polish off meta
      inverseKey = implicitKeyFor(type, propertyName);
      inverseDefinition = {
        kind: 'implicit',
        key: inverseKey,
        type: type,
        isAsync: false,
        isImplicit: true,
        isCollection: true,
        // with implicits any number of records could point at us
        isPolymorphic: false
      };
      syncMeta(definition, inverseDefinition);
      syncMeta(inverseDefinition, definition);
      const info = {
        lhs_key: `${type}:${propertyName}`,
        lhs_modelNames: [type],
        lhs_baseModelName: type,
        lhs_relationshipName: propertyName,
        lhs_definition: definition,
        lhs_isPolymorphic: definition.isPolymorphic,
        rhs_key: '',
        rhs_modelNames: [],
        rhs_baseModelName: inverseType,
        rhs_relationshipName: '',
        rhs_definition: inverseDefinition,
        rhs_isPolymorphic: false,
        hasInverse: false,
        isSelfReferential: type === inverseType,
        // this could be wrong if we are self-referential but also polymorphic
        isReflexive: false // we can't be reflexive if we don't define an inverse
      };

      expandingSet(cache, inverseType, inverseKey, info);
      expandingSet(cache, type, propertyName, info);
      return info;
    }

    // CASE: We do have an inverse
    const baseType = inverseDefinition.type;

    // TODO we want to assert this but this breaks all of our shoddily written tests
    /*
      if (DEBUG) {
        let inverseDoubleCheck = inverseMeta.type.inverseFor(inverseRelationshipName, store);
         assert(`The ${inverseBaseModelName}:${inverseRelationshipName} relationship declares 'inverse: null', but it was resolved as the inverse for ${baseModelName}:${relationshipName}.`, inverseDoubleCheck);
      }
    */
    // CASE: We may have already discovered the inverse for the baseModelName
    // CASE: We have already discovered the inverse
    cached = expandingGet(cache, baseType, propertyName) || expandingGet(cache, inverseType, inverseKey);
    if (cached) {
      // TODO this assert can be removed if the above assert is enabled
      (!(cached.hasInverse !== false) && debug.assert(`The ${inverseType}:${inverseKey} relationship declares 'inverse: null', but it was resolved as the inverse for ${type}:${propertyName}.`, cached.hasInverse !== false));
      let isLHS = cached.lhs_baseModelName === baseType;
      let modelNames = isLHS ? cached.lhs_modelNames : cached.rhs_modelNames;
      // make this lookup easier in the future by caching the key
      modelNames.push(type);
      expandingSet(cache, type, propertyName, cached);
      return cached;
    }

    // this is our first time so polish off the metas
    syncMeta(definition, inverseDefinition);
    syncMeta(inverseDefinition, definition);
    const lhs_modelNames = [type];
    if (type !== baseType) {
      lhs_modelNames.push(baseType);
    }
    const isSelfReferential = type === inverseType;
    const info = {
      lhs_key: `${baseType}:${propertyName}`,
      lhs_modelNames,
      lhs_baseModelName: baseType,
      lhs_relationshipName: propertyName,
      lhs_definition: definition,
      lhs_isPolymorphic: definition.isPolymorphic,
      rhs_key: `${inverseType}:${inverseKey}`,
      rhs_modelNames: [inverseType],
      rhs_baseModelName: inverseType,
      rhs_relationshipName: inverseKey,
      rhs_definition: inverseDefinition,
      rhs_isPolymorphic: inverseDefinition.isPolymorphic,
      hasInverse: true,
      isSelfReferential,
      isReflexive: isSelfReferential && propertyName === inverseKey
    };

    // Create entries for the baseModelName as well as modelName to speed up
    //  inverse lookups
    expandingSet(cache, baseType, propertyName, info);
    expandingSet(cache, type, propertyName, info);

    // Greedily populate the inverse
    expandingSet(cache, inverseType, inverseKey, info);
    return info;
  }

  /*
      case many:1
      ========
      In a bi-directional graph with Many:1 edges, adding a value
      results in up-to 3 discrete value transitions, while removing
      a value is only 2 transitions.

      For adding C to A
      If: A <<-> B, C <->> D is the initial state,
      and: B <->> A <<-> C, D is the final state

      then we would undergo the following transitions.

      add C to A
      remove C from D
      add A to C

      For removing B from A
      If: A <<-> B, C <->> D is the initial state,
      and: A, B, C <->> D is the final state

      then we would undergo the following transitions.

      remove B from A
      remove A from B

      case many:many
      ===========
      In a bi-directional graph with Many:Many edges, adding or
      removing a value requires only 2 value transitions.

      For Adding
      If: A<<->>B, C<<->>D is the initial state (double arrows representing the many side)
      And: D<<->>C<<->>A<<->>B is the final state

      Then we would undergo two transitions.

      add C to A.
      add A to C

      For Removing
      If: A<<->>B, C<<->>D is the initial state (double arrows representing the many side)
      And: A, B, C<<->>D is the final state

      Then we would undergo two transitions.

      remove B from A
      remove A from B

      case many:?
      ========
      In a uni-directional graph with Many:? edges (modeled in EmberData with `inverse:null`) with
      artificial (implicit) inverses, replacing a value results in 2 discrete value transitions.
      This is because a Many:? relationship is effectively Many:Many.
    */
  function replaceRelatedRecords(graph, op, isRemote) {
    if (isRemote) {
      replaceRelatedRecordsRemote(graph, op, isRemote);
    } else {
      replaceRelatedRecordsLocal(graph, op, isRemote);
    }
  }
  function replaceRelatedRecordsLocal(graph, op, isRemote) {
    const identifiers = op.value;
    const relationship = graph.get(op.record, op.field);
    (!(isHasMany(relationship)) && debug.assert(`expected hasMany relationship`, isHasMany(relationship)));
    relationship.state.hasReceivedData = true;

    // cache existing state
    const {
      currentState,
      members,
      definition
    } = relationship;
    const newValues = new Set(identifiers);
    const identifiersLength = identifiers.length;
    const newState = new Array(newValues.size);
    const newMembership = new Set();

    // wipe existing state
    relationship.members = newMembership;
    relationship.currentState = newState;
    const {
      type
    } = relationship.definition;
    let changed = false;
    const currentLength = currentState.length;
    const iterationLength = currentLength > identifiersLength ? currentLength : identifiersLength;
    const equalLength = currentLength === identifiersLength;
    for (let i = 0, j = 0; i < iterationLength; i++) {
      let adv = false;
      if (i < identifiersLength) {
        const identifier = identifiers[i];
        // skip processing if we encounter a duplicate identifier in the array
        if (!newMembership.has(identifier)) {
          if (type !== identifier.type) {
            Debug.assertPolymorphicType(relationship.identifier, relationship.definition, identifier, graph.store);
            graph.registerPolymorphicType(type, identifier.type);
          }
          newState[j] = identifier;
          adv = true;
          newMembership.add(identifier);
          if (!members.has(identifier)) {
            changed = true;
            addToInverse(graph, identifier, definition.inverseKey, op.record, isRemote);
          }
        }
      }
      if (i < currentLength) {
        const identifier = currentState[i];

        // detect reordering
        if (!newMembership.has(identifier)) {
          if (equalLength && newState[i] !== identifier) {
            changed = true;
          }
          if (!newValues.has(identifier)) {
            changed = true;
            removeFromInverse(graph, identifier, definition.inverseKey, op.record, isRemote);
          }
        }
      }
      if (adv) {
        j++;
      }
    }
    if (changed) {
      relationship.notifyHasManyChange();
    }
  }
  function replaceRelatedRecordsRemote(graph, op, isRemote) {
    const identifiers = op.value;
    const relationship = graph.get(op.record, op.field);
    (!(isHasMany(relationship)) && debug.assert(`You can only '${op.op}' on a hasMany relationship. ${op.record.type}.${op.field} is a ${relationship.definition.kind}`, isHasMany(relationship)));
    if (isRemote) {
      graph._addToTransaction(relationship);
    }
    relationship.state.hasReceivedData = true;

    // cache existing state
    const {
      canonicalState,
      canonicalMembers,
      definition
    } = relationship;
    const newValues = new Set(identifiers);
    const identifiersLength = identifiers.length;
    const newState = new Array(newValues.size);
    const newMembership = new Set();

    // wipe existing state
    relationship.canonicalMembers = newMembership;
    relationship.canonicalState = newState;
    const {
      type
    } = relationship.definition;
    let changed = false;
    const canonicalLength = canonicalState.length;
    const iterationLength = canonicalLength > identifiersLength ? canonicalLength : identifiersLength;
    const equalLength = canonicalLength === identifiersLength;
    for (let i = 0, j = 0; i < iterationLength; i++) {
      let adv = false;
      if (i < identifiersLength) {
        const identifier = identifiers[i];
        if (!newMembership.has(identifier)) {
          if (type !== identifier.type) {
            Debug.assertPolymorphicType(relationship.identifier, relationship.definition, identifier, graph.store);
            graph.registerPolymorphicType(type, identifier.type);
          }
          newState[j] = identifier;
          newMembership.add(identifier);
          adv = true;
          if (!canonicalMembers.has(identifier)) {
            changed = true;
            addToInverse(graph, identifier, definition.inverseKey, op.record, isRemote);
          }
        }
      }
      if (i < canonicalLength) {
        const identifier = canonicalState[i];
        if (!newMembership.has(identifier)) {
          // detect reordering
          if (equalLength && newState[j] !== identifier) {
            changed = true;
          }
          if (!newValues.has(identifier)) {
            changed = true;
            removeFromInverse(graph, identifier, definition.inverseKey, op.record, isRemote);
          }
        }
      }
      if (adv) {
        j++;
      }
    }
    if (changed) {
      flushCanonical(graph, relationship);
      /*
      replaceRelatedRecordsLocal(
        graph,
        {
          op: op.op,
          record: op.record,
          field: op.field,
          value: canonicalState,
        },
        false
      );*/
    } else {
      // preserve legacy behavior we want to change but requires some sort
      // of deprecation.
      flushCanonical(graph, relationship);
    }
  }
  function addToInverse(graph, identifier, key, value, isRemote) {
    const relationship = graph.get(identifier, key);
    const {
      type
    } = relationship.definition;
    if (type !== value.type) {
      Debug.assertPolymorphicType(relationship.identifier, relationship.definition, value, graph.store);
      graph.registerPolymorphicType(type, value.type);
    }
    if (isBelongsTo(relationship)) {
      relationship.state.hasReceivedData = true;
      relationship.state.isEmpty = false;
      if (isRemote) {
        graph._addToTransaction(relationship);
        if (relationship.remoteState !== null) {
          removeFromInverse(graph, relationship.remoteState, relationship.definition.inverseKey, identifier, isRemote);
        }
        relationship.remoteState = value;
      }
      if (relationship.localState !== value) {
        if (!isRemote && relationship.localState) {
          removeFromInverse(graph, relationship.localState, relationship.definition.inverseKey, identifier, isRemote);
        }
        relationship.localState = value;
        relationship.notifyBelongsToChange();
      }
    } else if (isHasMany(relationship)) {
      if (isRemote) {
        if (!relationship.canonicalMembers.has(value)) {
          graph._addToTransaction(relationship);
          relationship.canonicalState.push(value);
          relationship.canonicalMembers.add(value);
          relationship.state.hasReceivedData = true;
          flushCanonical(graph, relationship);
        }
      } else {
        if (!relationship.members.has(value)) {
          relationship.currentState.push(value);
          relationship.members.add(value);
          relationship.state.hasReceivedData = true;
          relationship.notifyHasManyChange();
        }
      }
    } else {
      if (isRemote) {
        relationship.addCanonicalRecordData(value);
      } else {
        relationship.addRecordData(value);
      }
    }
  }
  function removeFromInverse(graph, identifier, key, value, isRemote) {
    const relationship = graph.get(identifier, key);
    if (isBelongsTo(relationship)) {
      relationship.state.isEmpty = true;
      if (isRemote) {
        graph._addToTransaction(relationship);
        relationship.remoteState = null;
      }
      if (relationship.localState === value) {
        relationship.localState = null;
        relationship.notifyBelongsToChange();
      }
    } else if (isHasMany(relationship)) {
      if (isRemote) {
        graph._addToTransaction(relationship);
        let index = relationship.canonicalState.indexOf(value);
        if (index !== -1) {
          relationship.canonicalMembers.delete(value);
          relationship.canonicalState.splice(index, 1);
        }
      }
      let index = relationship.currentState.indexOf(value);
      if (index !== -1) {
        relationship.members.delete(value);
        relationship.currentState.splice(index, 1);
      }
      relationship.notifyHasManyChange();
    } else {
      if (isRemote) {
        relationship.removeCompletelyFromOwn(value);
      } else {
        relationship.removeRecordData(value);
      }
    }
  }
  function syncRemoteToLocal(rel) {
    let toSet = rel.canonicalState;
    let newRecordDatas = rel.currentState.filter(recordData => isNew(recordData) && toSet.indexOf(recordData) === -1);
    let existingState = rel.currentState;
    rel.currentState = toSet.concat(newRecordDatas);
    let members = rel.members = new Set();
    rel.canonicalMembers.forEach(v => members.add(v));
    for (let i = 0; i < newRecordDatas.length; i++) {
      members.add(newRecordDatas[i]);
    }

    // TODO always notifying fails only one test and we should probably do away with it
    if (existingState.length !== rel.currentState.length) {
      rel.notifyHasManyChange();
    } else {
      for (let i = 0; i < existingState.length; i++) {
        if (existingState[i] !== rel.currentState[i]) {
          rel.notifyHasManyChange();
          break;
        }
      }
    }
  }
  function flushCanonical(graph, rel) {
    graph._scheduleLocalSync(rel);
  }

  function addToRelatedRecords(graph, op, isRemote) {
    const {
      record,
      value,
      index
    } = op;
    const relationship = graph.get(record, op.field);
    (!(isHasMany(relationship)) && debug.assert(`You can only '${op.op}' on a hasMany relationship. ${record.type}.${op.field} is a ${relationship.definition.kind}`, isHasMany(relationship)));
    if (Array.isArray(value)) {
      for (let i = 0; i < value.length; i++) {
        addRelatedRecord(graph, relationship, record, value[i], index !== undefined ? index + i : index, isRemote);
      }
    } else {
      addRelatedRecord(graph, relationship, record, value, index, isRemote);
    }
    relationship.notifyHasManyChange();
  }
  function addRelatedRecord(graph, relationship, record, value, index, isRemote) {
    (!(value) && debug.assert(`expected an identifier to add to the relationship`, value));
    const {
      members,
      currentState
    } = relationship;
    if (members.has(value)) {
      return;
    }
    const {
      type
    } = relationship.definition;
    if (type !== value.type) {
      Debug.assertPolymorphicType(record, relationship.definition, value, graph.store);
      graph.registerPolymorphicType(value.type, type);
    }
    relationship.state.hasReceivedData = true;
    members.add(value);
    if (index === undefined) {
      currentState.push(value);
    } else {
      currentState.splice(index, 0, value);
    }
    addToInverse(graph, value, relationship.definition.inverseKey, record, isRemote);
  }

  function removeFromRelatedRecords(graph, op, isRemote) {
    const {
      record,
      value
    } = op;
    const relationship = graph.get(record, op.field);
    (!(isHasMany(relationship)) && debug.assert(`You can only '${op.op}' on a hasMany relationship. ${record.type}.${op.field} is a ${relationship.definition.kind}`, isHasMany(relationship)));
    if (Array.isArray(value)) {
      for (let i = 0; i < value.length; i++) {
        removeRelatedRecord(graph, relationship, record, value[i], isRemote);
      }
    } else {
      removeRelatedRecord(graph, relationship, record, value, isRemote);
    }
    relationship.notifyHasManyChange();
  }
  function removeRelatedRecord(graph, relationship, record, value, isRemote) {
    (!(value) && debug.assert(`expected an identifier to add to the relationship`, value));
    const {
      members,
      currentState
    } = relationship;
    if (!members.has(value)) {
      return;
    }
    members.delete(value);
    let index = currentState.indexOf(value);
    (!(index !== -1) && debug.assert(`expected members and currentState to be in sync`, index !== -1));
    currentState.splice(index, 1);
    removeFromInverse(graph, value, relationship.definition.inverseKey, record, isRemote);
  }

  function replaceRelatedRecord(graph, op, isRemote = false) {
    const relationship = graph.get(op.record, op.field);
    (!(isBelongsTo(relationship)) && debug.assert(`You can only '${op.op}' on a belongsTo relationship. ${op.record.type}.${op.field} is a ${relationship.definition.kind}`, isBelongsTo(relationship)));
    if (isRemote) {
      graph._addToTransaction(relationship);
    }
    const {
      definition,
      state
    } = relationship;
    const prop = isRemote ? 'remoteState' : 'localState';
    const existingState = relationship[prop];

    /*
      case 1:1
      ========
      In a bi-directional graph with 1:1 edges, replacing a value
      results in up-to 4 discrete value transitions.
       If: A <-> B, C <-> D is the initial state,
      and: A <-> C, B, D is the final state
       then we would undergo the following 4 transitions.
       remove A from B
      add C to A
      remove C from D
      add A to C
       case 1:many
      ===========
      In a bi-directional graph with 1:Many edges, replacing a value
      results in up-to 3 discrete value transitions.
       If: A<->>B<<->D, C<<->D is the initial state (double arrows representing the many side)
      And: A<->>C<<->D, B<<->D is the final state
       Then we would undergo three transitions.
       remove A from B
      add C to A.
      add A to C
       case 1:?
      ========
      In a uni-directional graph with 1:? edges (modeled in EmberData with `inverse:null`) with
      artificial (implicit) inverses, replacing a value results in up-to 3 discrete value transitions.
      This is because a 1:? relationship is effectively 1:many.
       If: A->B, C->B is the initial state
      And: A->C, C->B is the final state
       Then we would undergo three transitions.
       Remove A from B
      Add C to A
      Add A to C
    */

    // nothing for us to do
    if (op.value === existingState) {
      // if we were empty before but now know we are empty this needs to be true
      state.hasReceivedData = true;
      // if this is a remote update we still sync
      if (isRemote) {
        const {
          localState
        } = relationship;
        // don't sync if localState is a new record and our canonicalState is null
        if (localState && isNew(localState) && !existingState || localState === existingState) {
          return;
        }
        relationship.localState = existingState;
        relationship.notifyBelongsToChange();
      }
      return;
    }

    // remove this value from the inverse if required
    if (existingState) {
      removeFromInverse(graph, existingState, definition.inverseKey, op.record, isRemote);
    }

    // update value to the new value
    relationship[prop] = op.value;
    state.hasReceivedData = true;
    state.isEmpty = op.value === null;
    state.isStale = false;
    state.hasFailedLoadAttempt = false;
    if (op.value) {
      if (definition.type !== op.value.type) {
        Debug.assertPolymorphicType(relationship.identifier, definition, op.value, graph.store);
        graph.registerPolymorphicType(definition.type, op.value.type);
      }
      addToInverse(graph, op.value, definition.inverseKey, op.record, isRemote);
    }
    if (isRemote) {
      const {
        localState,
        remoteState
      } = relationship;
      if (localState && isNew(localState) && !remoteState) {
        return;
      }
      if (localState !== remoteState) {
        relationship.localState = remoteState;
        relationship.notifyBelongsToChange();
      }
    } else {
      relationship.notifyBelongsToChange();
    }
  }

  /*
    This method normalizes a link to an "links object". If the passed link is
    already an object it's returned without any modifications.

    See http://jsonapi.org/format/#document-links for more information.
  */
  function _normalizeLink(link) {
    switch (typeof link) {
      case 'object':
        return link;
      case 'string':
        return {
          href: link
        };
    }
  }

  /*
      Updates the "canonical" or "remote" state of a relationship, replacing any existing
      state and blowing away any local changes (excepting new records).
  */
  function updateRelationshipOperation(graph, op) {
    const relationship = graph.get(op.record, op.field);
    (!(isHasMany(relationship) || isBelongsTo(relationship)) && debug.assert(`Cannot update an implicit relationship`, isHasMany(relationship) || isBelongsTo(relationship)));
    const {
      definition,
      state,
      identifier
    } = relationship;
    const {
      isCollection
    } = definition;
    const payload = op.value;
    let hasRelationshipDataProperty = false;
    let hasUpdatedLink = false;
    if (payload.meta) {
      relationship.meta = payload.meta;
    }
    if (payload.data !== undefined) {
      hasRelationshipDataProperty = true;
      if (isCollection) {
        // TODO deprecate this case. We
        // have tests saying we support it.
        if (payload.data === null) {
          payload.data = [];
        }
        (!(Array.isArray(payload.data)) && debug.assert(`Expected an array`, Array.isArray(payload.data)));
        graph.update({
          op: 'replaceRelatedRecords',
          record: identifier,
          field: op.field,
          value: payload.data.map(i => graph.store.identifierCache.getOrCreateRecordIdentifier(i))
        }, true);
      } else {
        graph.update({
          op: 'replaceRelatedRecord',
          record: identifier,
          field: op.field,
          value: payload.data ? graph.store.identifierCache.getOrCreateRecordIdentifier(payload.data) : null
        }, true);
      }
    } else if (definition.isAsync === false && !state.hasReceivedData) {
      hasRelationshipDataProperty = true;
      if (isCollection) {
        graph.update({
          op: 'replaceRelatedRecords',
          record: identifier,
          field: op.field,
          value: []
        }, true);
      } else {
        graph.update({
          op: 'replaceRelatedRecord',
          record: identifier,
          field: op.field,
          value: null
        }, true);
      }
    }
    if (payload.links) {
      let originalLinks = relationship.links;
      relationship.links = payload.links;
      if (payload.links.related) {
        let relatedLink = _normalizeLink(payload.links.related);
        let currentLink = originalLinks && originalLinks.related ? _normalizeLink(originalLinks.related) : null;
        let currentLinkHref = currentLink ? currentLink.href : null;
        if (relatedLink && relatedLink.href && relatedLink.href !== currentLinkHref) {
          (debug.warn(`You pushed a record of type '${identifier.type}' with a relationship '${definition.key}' configured as 'async: false'. You've included a link but no primary data, this may be an error in your payload. EmberData will treat this relationship as known-to-be-empty.`, definition.isAsync || state.hasReceivedData, {
            id: 'ds.store.push-link-for-sync-relationship'
          }));
          (!(typeof relatedLink.href === 'string' || relatedLink.href === null) && debug.assert(`You have pushed a record of type '${identifier.type}' with '${definition.key}' as a link, but the value of that link is not a string.`, typeof relatedLink.href === 'string' || relatedLink.href === null));
          hasUpdatedLink = true;
        }
      }
    }

    /*
         Data being pushed into the relationship might contain only data or links,
         or a combination of both.
    
         IF contains only data
         IF contains both links and data
          state.isEmpty -> true if is empty array (has-many) or is null (belongs-to)
          state.hasReceivedData -> true
          hasDematerializedInverse -> false
          state.isStale -> false
          allInverseRecordsAreLoaded -> run-check-to-determine
    
         IF contains only links
          state.isStale -> true
         */
    relationship.state.hasFailedLoadAttempt = false;
    if (hasRelationshipDataProperty) {
      let relationshipIsEmpty = payload.data === null || Array.isArray(payload.data) && payload.data.length === 0;

      // we don't need to notify here as the update op we pushed in above will notify once
      // membership is in the correct state.
      relationship.state.hasReceivedData = true;
      relationship.state.isStale = false;
      relationship.state.hasDematerializedInverse = false;
      relationship.state.isEmpty = relationshipIsEmpty;
    } else if (hasUpdatedLink) {
      // only notify stale if we have not previously received membership data.
      // within this same transaction
      // this prevents refetching when only one side of the relationship in the
      // payload contains the info while the other side contains just a link
      // this only works when the side with just a link is a belongsTo, as we
      // don't know if a hasMany has full information or not.
      // see #7049 for context.
      if (isCollection || !relationship.state.hasReceivedData || relationship.transactionRef === 0) {
        relationship.state.isStale = true;
        if (isHasMany(relationship)) {
          relationship.notifyHasManyChange();
        } else {
          relationship.notifyBelongsToChange();
        }
      } else {
        relationship.state.isStale = false;
      }
    }
  }

  const Graphs = new Private.WeakCache('graph' );
  Graphs._generator = wrapper => {
    const graph = new Graph(wrapper);

    // in DEBUG we attach the graph to the main store for improved debuggability
    {
      Graphs.set(wrapper._store, graph);
    }
    return graph;
  };
  function isStore(maybeStore) {
    return maybeStore._storeWrapper !== undefined;
  }
  function getWrapper(store) {
    return isStore(store) ? store._storeWrapper : store;
  }
  function peekGraph(store) {
    return Graphs.get(getWrapper(store));
  }
  function graphFor(store) {
    return Graphs.lookup(getWrapper(store));
  }

  /*
   * Graph acts as the cache for relationship data. It allows for
   * us to ask about and update relationships for a given Identifier
   * without requiring other objects for that Identifier to be
   * instantiated (such as `InternalModel`, `RecordData` or a `Record`)
   *
   * This also allows for us to make more substantive changes to relationships
   * with increasingly minor alterations to other portions of the internals
   * over time.
   *
   * The graph is made up of nodes and edges. Each unique identifier gets
   * its own node, which is a dictionary with a list of that node's edges
   * (or connections) to other nodes. In `Model` terms, a node represents a
   * record instance, with each key (an edge) in the dictionary correlating
   * to either a `hasMany` or `belongsTo` field on that record instance.
   *
   * The value for each key, or `edge` is the identifier(s) the node relates
   * to in the graph from that key.
   */
  class Graph {
    constructor(store) {
      this._definitionCache = Object.create(null);
      this._potentialPolymorphicTypes = Object.create(null);
      this.identifiers = new Map();
      this.store = store;
      this._willSyncRemote = false;
      this._willSyncLocal = false;
      this._pushedUpdates = {
        belongsTo: [],
        hasMany: [],
        deletions: []
      };
      this._updatedRelationships = new Set();
      this._transaction = null;
    }
    has(identifier, propertyName) {
      let relationships = this.identifiers.get(identifier);
      if (!relationships) {
        return false;
      }
      return relationships[propertyName] !== undefined;
    }
    get(identifier, propertyName) {
      (!(propertyName) && debug.assert(`expected propertyName`, propertyName));
      let relationships = this.identifiers.get(identifier);
      if (!relationships) {
        relationships = Object.create(null);
        this.identifiers.set(identifier, relationships);
      }
      let relationship = relationships[propertyName];
      if (!relationship) {
        const info = upgradeDefinition(this, identifier, propertyName);
        (!(info !== null) && debug.assert(`Could not determine relationship information for ${identifier.type}.${propertyName}`, info !== null));
        const meta = isLHS(info, identifier.type, propertyName) ? info.lhs_definition : info.rhs_definition;
        const Klass = meta.kind === 'hasMany' ? ManyRelationship : meta.kind === 'belongsTo' ? BelongsToRelationship : ImplicitRelationship;
        relationship = relationships[propertyName] = new Klass(this, meta, identifier);
      }
      return relationship;
    }

    /*
     * Allows for the graph to dynamically discover polymorphic connections
     * without needing to walk prototype chains.
     *
     * Used by edges when an added `type` does not match the expected `type`
     * for that edge.
     *
     * Currently we assert before calling this. For a public API we will want
     * to call out to the schema manager to ask if we should consider these
     * types as equivalent for a given relationship.
     */
    registerPolymorphicType(type1, type2) {
      const typeCache = this._potentialPolymorphicTypes;
      let t1 = typeCache[type1];
      if (!t1) {
        t1 = typeCache[type1] = Object.create(null);
      }
      t1[type2] = true;
      let t2 = typeCache[type2];
      if (!t2) {
        t2 = typeCache[type2] = Object.create(null);
      }
      t2[type1] = true;
    }

    /*
     TODO move this comment somewhere else
     implicit relationships are relationships which have not been declared but the inverse side exists on
     another record somewhere
      For example if there was:
      ```app/models/comment.js
     import Model, { attr } from '@ember-data/model';
      export default class Comment extends Model {
       @attr text;
     }
     ```
      and there is also:
      ```app/models/post.js
     import Model, { attr, hasMany } from '@ember-data/model';
      export default class Post extends Model {
       @attr title;
       @hasMany('comment') comments;
     }
     ```
      Then we would have a implicit 'post' relationship for the comment record in order
     to be do things like remove the comment from the post if the comment were to be deleted.
    */

    isReleasable(identifier) {
      const relationships = this.identifiers.get(identifier);
      if (!relationships) {
        return true;
      }
      const keys = Object.keys(relationships);
      for (let i = 0; i < keys.length; i++) {
        const relationship = relationships[keys[i]];
        (!(relationship) && debug.assert(`Expected a relationship`, relationship));
        if (relationship.definition.inverseIsAsync) {
          return false;
        }
      }
      return true;
    }
    unload(identifier) {
      const relationships = this.identifiers.get(identifier);
      if (relationships) {
        // cleans up the graph but retains some nodes
        // to allow for rematerialization
        Object.keys(relationships).forEach(key => {
          let rel = relationships[key];
          destroyRelationship(rel);
          if (isImplicit(rel)) {
            delete relationships[key];
          }
        });
      }
    }
    remove(identifier) {
      this.unload(identifier);
      this.identifiers.delete(identifier);
    }

    /*
     * Remote state changes
     */
    push(op) {
      if (op.op === 'deleteRecord') {
        this._pushedUpdates.deletions.push(op);
      } else if (op.op === 'replaceRelatedRecord') {
        this._pushedUpdates.belongsTo.push(op);
      } else {
        const relationship = this.get(op.record, op.field);
        (!(!relationship.definition.isImplicit) && debug.assert(`Cannot push a remote update for an implicit relationship`, !relationship.definition.isImplicit));
        this._pushedUpdates[relationship.definition.kind].push(op);
      }
      if (!this._willSyncRemote) {
        this._willSyncRemote = true;
        const backburner = this.store._store._backburner;
        backburner.schedule('coalesce', this, this._flushRemoteQueue);
      }
    }

    /*
     * Local state changes
     */

    update(op, isRemote = false) {
      (!(op.op === 'deleteRecord' || !isImplicit(this.get(op.record, op.field))) && debug.assert(`Cannot update an implicit relationship`, op.op === 'deleteRecord' || !isImplicit(this.get(op.record, op.field))));
      switch (op.op) {
        case 'updateRelationship':
          (!(isRemote) && debug.assert(`Can only perform the operation updateRelationship on remote state`, isRemote));
          {
            // in debug, assert payload validity eagerly
            // TODO add deprecations/assertion here for duplicates
            assertValidRelationshipPayload(this, op);
          }
          updateRelationshipOperation(this, op);
          break;
        case 'deleteRecord':
          {
            (!(isRemote) && debug.assert(`Can only perform the operation deleteRelationship on remote state`, isRemote));
            const identifier = op.record;
            const relationships = this.identifiers.get(identifier);
            if (relationships) {
              Object.keys(relationships).forEach(key => {
                const rel = relationships[key];
                // works together with the has check
                delete relationships[key];
                removeCompletelyFromInverse(rel);
              });
              this.identifiers.delete(identifier);
            }
            break;
          }
        case 'replaceRelatedRecord':
          replaceRelatedRecord(this, op, isRemote);
          break;
        case 'addToRelatedRecords':
          addToRelatedRecords(this, op, isRemote);
          break;
        case 'removeFromRelatedRecords':
          removeFromRelatedRecords(this, op, isRemote);
          break;
        case 'replaceRelatedRecords':
          replaceRelatedRecords(this, op, isRemote);
          break;
        default:
          (debug.assert(`No local relationship update operation exists for '${op.op}'`));
      }
    }
    _scheduleLocalSync(relationship) {
      this._updatedRelationships.add(relationship);
      if (!this._willSyncLocal) {
        this._willSyncLocal = true;
        const backburner = this.store._store._backburner;
        backburner.schedule('sync', this, this._flushLocalQueue);
      }
    }
    _flushRemoteQueue() {
      if (!this._willSyncRemote) {
        return;
      }
      this._transaction = new Set();
      this._willSyncRemote = false;
      const {
        deletions,
        hasMany,
        belongsTo
      } = this._pushedUpdates;
      this._pushedUpdates.deletions = [];
      this._pushedUpdates.hasMany = [];
      this._pushedUpdates.belongsTo = [];
      for (let i = 0; i < deletions.length; i++) {
        this.update(deletions[i], true);
      }
      for (let i = 0; i < hasMany.length; i++) {
        this.update(hasMany[i], true);
      }
      for (let i = 0; i < belongsTo.length; i++) {
        this.update(belongsTo[i], true);
      }
      this._finalize();
    }
    _addToTransaction(relationship) {
      (!(this._transaction !== null) && debug.assert(`expected a transaction`, this._transaction !== null));
      relationship.transactionRef++;
      this._transaction.add(relationship);
    }
    _finalize() {
      if (this._transaction) {
        this._transaction.forEach(v => v.transactionRef = 0);
        this._transaction = null;
      }
    }
    _flushLocalQueue() {
      if (!this._willSyncLocal) {
        return;
      }
      this._willSyncLocal = false;
      let updated = this._updatedRelationships;
      this._updatedRelationships = new Set();
      updated.forEach(syncRemoteToLocal);
    }
    willDestroy() {
      this.identifiers.clear();
      this.store = null;
    }
    destroy() {
      Graphs.delete(this.store);
      {
        Graphs.delete(this.store._store);
      }
    }
  }

  // Handle dematerialization for relationship `rel`.  In all cases, notify the
  // relationship of the dematerialization: this is done so the relationship can
  // notify its inverse which needs to update state
  //
  // If the inverse is sync, unloading this record is treated as a client-side
  // delete, so we remove the inverse records from this relationship to
  // disconnect the graph.  Because it's not async, we don't need to keep around
  // the internalModel as an id-wrapper for references and because the graph is
  // disconnected we can actually destroy the internalModel when checking for
  // orphaned models.
  function destroyRelationship(rel) {
    if (isImplicit(rel)) {
      if (rel.graph.isReleasable(rel.identifier)) {
        removeCompletelyFromInverse(rel);
      }
      return;
    }
    rel.recordDataDidDematerialize();
    if (!rel.definition.inverseIsImplicit && !rel.definition.inverseIsAsync) {
      rel.state.isStale = true;
      rel.clear();

      // necessary to clear relationships in the ui from dematerialized records
      // hasMany is managed by InternalModel which calls `retreiveLatest` after
      // dematerializing the recordData instance.
      // but sync belongsTo require this since they don't have a proxy to update.
      // so we have to notify so it will "update" to null.
      // we should discuss whether we still care about this, probably fine to just
      // leave the ui relationship populated since the record is destroyed and
      // internally we've fully cleaned up.
      if (!rel.definition.isAsync) {
        if (isBelongsTo(rel)) {
          rel.notifyBelongsToChange();
        } else {
          rel.notifyHasManyChange();
        }
      }
    }
  }
  function removeCompletelyFromInverse(relationship) {
    // we actually want a union of members and canonicalMembers
    // they should be disjoint but currently are not due to a bug
    const seen = Object.create(null);
    const {
      identifier
    } = relationship;
    const {
      inverseKey
    } = relationship.definition;
    const unload = inverseIdentifier => {
      const id = inverseIdentifier.lid;
      if (seen[id] === undefined) {
        if (relationship.graph.has(inverseIdentifier, inverseKey)) {
          relationship.graph.get(inverseIdentifier, inverseKey).removeCompletelyFromOwn(identifier);
        }
        seen[id] = true;
      }
    };
    if (isBelongsTo(relationship)) {
      if (relationship.localState) {
        unload(relationship.localState);
      }
      if (relationship.remoteState) {
        unload(relationship.remoteState);
      }
      if (!relationship.definition.isAsync) {
        relationship.clear();
      }
      relationship.localState = null;
    } else if (isHasMany(relationship)) {
      relationship.members.forEach(unload);
      relationship.canonicalMembers.forEach(unload);
      if (!relationship.definition.isAsync) {
        relationship.clear();
        relationship.notifyHasManyChange();
      }
    } else {
      relationship.members.forEach(unload);
      relationship.canonicalMembers.forEach(unload);
      relationship.clear();
    }
  }

  let nextBfsId = 1;
  const EMPTY_ITERATOR = {
    iterator() {
      return {
        next() {
          return {
            done: true,
            value: undefined
          };
        }
      };
    }
  };

  /**
    The default cache implementation used by ember-data. The cache
    is configurable and using a different implementation can be
    achieved by implementing the store's createRecordDataFor hook.

    @class RecordDataDefault
    @public
   */
  class RecordDataDefault {
    constructor(identifier, storeWrapper) {
      /*
        Iterates over the set of internal models reachable from `this` across exactly one
        relationship.
      */
      this._directlyRelatedRecordDatasIterable = () => {
        const graph = graphFor(this.storeWrapper);
        const initializedRelationships = graph.identifiers.get(this.identifier);
        if (!initializedRelationships) {
          return EMPTY_ITERATOR;
        }
        const initializedRelationshipsArr = Object.keys(initializedRelationships).map(key => initializedRelationships[key]).filter(rel => {
          return !isImplicit(rel);
        });
        let i = 0;
        let j = 0;
        let k = 0;
        const findNext = () => {
          while (i < initializedRelationshipsArr.length) {
            while (j < 2) {
              let members = j === 0 ? getLocalState(initializedRelationshipsArr[i]) : getRemoteState(initializedRelationshipsArr[i]);
              while (k < members.length) {
                let member = members[k++];
                if (member !== null) {
                  // TODO this can cause materialization
                  // do something to avoid that
                  return Private.recordDataFor(member);
                }
              }
              k = 0;
              j++;
            }
            j = 0;
            i++;
          }
          return undefined;
        };
        return {
          iterator() {
            return {
              next: () => {
                const value = findNext();
                return {
                  value,
                  done: value === undefined
                };
              }
            };
          }
        };
      };
      this.modelName = identifier.type;
      this.clientId = identifier.lid;
      this.id = identifier.id;
      this.identifier = identifier;
      this.storeWrapper = storeWrapper;
      this.isDestroyed = false;
      this._isNew = false;
      this._isDeleted = false;
      // Used during the mark phase of unloading to avoid checking the same internal
      // model twice in the same scan
      this._bfsId = 0;
      this.reset();
    }

    // PUBLIC API
    getResourceIdentifier() {
      return this.identifier;
    }
    pushData(data, calculateChange) {
      let changedKeys;
      if (this._isNew) {
        this._isNew = false;
        this.notifyStateChange();
      }
      if (calculateChange) {
        changedKeys = this._changedKeys(data.attributes);
      }
      Object.assign(this._data, data.attributes);
      if (this.__attributes) {
        // only do if we have attribute changes
        this._updateChangedAttributes();
      }
      if (data.relationships) {
        this._setupRelationships(data);
      }
      if (data.id) {
        if (!this.id) {
          this.id = coerceId(data.id);
        }
      }
      return changedKeys;
    }
    willCommit() {
      this._inFlightAttributes = this._attributes;
      this._attributes = null;
    }
    hasChangedAttributes() {
      return this.__attributes !== null && Object.keys(this.__attributes).length > 0;
    }
    _clearErrors() {
      if (this._errors) {
        this._errors = undefined;
        this.storeWrapper.notifyErrorsChange(this.modelName, this.id, this.clientId);
      }
    }
    getErrors() {
      let errors = this._errors || [];
      return errors;
    }

    // this is a hack bc we don't have access to the state machine
    //   and relationships need this info and @runspired didn't see
    //   how to get it just yet from storeWrapper.
    isEmpty() {
      return this.__attributes === null && this.__inFlightAttributes === null && this.__data === null;
    }
    deleteRecord() {
      this._isDeleted = true;
      this.notifyStateChange();
    }
    isDeleted() {
      return this._isDeleted;
    }
    setIsDeleted(isDeleted) {
      this._isDeleted = isDeleted;
      if (this._isNew) {
        this._deletionConfirmed();
      }
      this.notifyStateChange();
    }
    isDeletionCommitted() {
      return this._isDeletionCommited;
    }
    reset() {
      this.__attributes = null;
      this.__inFlightAttributes = null;
      this.__data = null;
      this._errors = undefined;
    }
    _setupRelationships(data) {
      // TODO @runspired iterating by definitions instead of by payload keys
      // allows relationship payloads to be ignored silently if no relationship
      // definition exists. Ensure there's a test for this and then consider
      // moving this to an assertion. This check should possibly live in the graph.
      let relationships = this.storeWrapper.relationshipsDefinitionFor(this.modelName);
      let keys = Object.keys(relationships);
      for (let i = 0; i < keys.length; i++) {
        let relationshipName = keys[i];
        if (!data.relationships[relationshipName]) {
          continue;
        }
        let relationshipData = data.relationships[relationshipName];
        graphFor(this.storeWrapper).push({
          op: 'updateRelationship',
          record: this.identifier,
          field: relationshipName,
          value: relationshipData
        });
      }
    }

    /**
      Checks if the attributes which are considered as changed are still
      different to the state which is acknowledged by the server.
       This method is needed when data for the internal model is pushed and the
      pushed data might acknowledge dirty attributes as confirmed.
       @method updateChangedAttributes
      @private
     */
    _updateChangedAttributes() {
      let changedAttributes = this.changedAttributes();
      let changedAttributeNames = Object.keys(changedAttributes);
      let attrs = this._attributes;
      for (let i = 0, length = changedAttributeNames.length; i < length; i++) {
        let attribute = changedAttributeNames[i];
        let data = changedAttributes[attribute];
        let oldData = data[0];
        let newData = data[1];
        if (oldData === newData) {
          delete attrs[attribute];
        }
      }
    }

    /**
      Returns an object, whose keys are changed properties, and value is an
      [oldProp, newProp] array.
       @method changedAttributes
      @private
    */
    changedAttributes() {
      let oldData = this._data;
      let currentData = this._attributes;
      let inFlightData = this._inFlightAttributes;
      let newData = {
        ...inFlightData,
        ...currentData
      };
      let diffData = Object.create(null);
      let newDataKeys = Object.keys(newData);
      for (let i = 0, length = newDataKeys.length; i < length; i++) {
        let key = newDataKeys[i];
        diffData[key] = [oldData[key], newData[key]];
      }
      return diffData;
    }
    isNew() {
      return this._isNew;
    }
    rollbackAttributes() {
      let dirtyKeys;
      this._isDeleted = false;
      if (this.hasChangedAttributes()) {
        dirtyKeys = Object.keys(this._attributes);
        this._attributes = null;
      }
      if (this.isNew()) {
        this.removeFromInverseRelationships();
        this._isDeleted = true;
        this._isNew = false;
      }
      this._inFlightAttributes = null;
      this._clearErrors();
      this.notifyStateChange();
      return dirtyKeys;
    }
    _deletionConfirmed() {
      this.removeFromInverseRelationships();
    }
    didCommit(data) {
      if (this._isDeleted) {
        this._deletionConfirmed();
        this._isDeletionCommited = true;
      }
      this._isNew = false;
      let newCanonicalAttributes;
      if (data) {
        if (data.id) {
          // didCommit provided an ID, notify the store of it
          this.storeWrapper.setRecordId(this.modelName, data.id, this.clientId);
          this.id = coerceId(data.id);
        }
        if (data.relationships) {
          this._setupRelationships(data);
        }
        newCanonicalAttributes = data.attributes;
      }
      let changedKeys = this._changedKeys(newCanonicalAttributes);
      Object.assign(this._data, this.__inFlightAttributes, newCanonicalAttributes);
      this._inFlightAttributes = null;
      this._updateChangedAttributes();
      this._clearErrors();
      this.notifyStateChange();
      return changedKeys;
    }
    notifyStateChange() {
      this.storeWrapper.notifyStateChange(this.modelName, this.id, this.clientId);
    }

    // get ResourceIdentifiers for "current state"
    getHasMany(key) {
      return graphFor(this.storeWrapper).get(this.identifier, key).getData();
    }

    // set a new "current state" via ResourceIdentifiers
    setDirtyHasMany(key, recordDatas) {
      graphFor(this.storeWrapper).update({
        op: 'replaceRelatedRecords',
        record: this.identifier,
        field: key,
        value: recordDatas.map(Private.recordIdentifierFor)
      });
    }

    // append to "current state" via RecordDatas
    addToHasMany(key, recordDatas, idx) {
      graphFor(this.storeWrapper).update({
        op: 'addToRelatedRecords',
        record: this.identifier,
        field: key,
        value: recordDatas.map(Private.recordIdentifierFor),
        index: idx
      });
    }

    // remove from "current state" via RecordDatas
    removeFromHasMany(key, recordDatas) {
      graphFor(this.storeWrapper).update({
        op: 'removeFromRelatedRecords',
        record: this.identifier,
        field: key,
        value: recordDatas.map(Private.recordIdentifierFor)
      });
    }
    commitWasRejected(identifier, errors) {
      let keys = Object.keys(this._inFlightAttributes);
      if (keys.length > 0) {
        let attrs = this._attributes;
        for (let i = 0; i < keys.length; i++) {
          if (attrs[keys[i]] === undefined) {
            attrs[keys[i]] = this._inFlightAttributes[keys[i]];
          }
        }
      }
      this._inFlightAttributes = null;
      if (errors) {
        this._errors = errors;
      }
      this.storeWrapper.notifyErrorsChange(this.modelName, this.id, this.clientId);
    }
    getBelongsTo(key) {
      return graphFor(this.storeWrapper).get(this.identifier, key).getData();
    }
    setDirtyBelongsTo(key, recordData) {
      graphFor(this.storeWrapper).update({
        op: 'replaceRelatedRecord',
        record: this.identifier,
        field: key,
        value: recordData ? Private.recordIdentifierFor(recordData) : null
      });
    }
    setDirtyAttribute(key, value) {
      let originalValue;
      // Add the new value to the changed attributes hash
      this._attributes[key] = value;
      if (key in this._inFlightAttributes) {
        originalValue = this._inFlightAttributes[key];
      } else {
        originalValue = this._data[key];
      }
      // If we went back to our original value, we shouldn't keep the attribute around anymore
      if (value === originalValue) {
        delete this._attributes[key];
      }
    }

    // internal set coming from the model
    __setId(id) {
      if (this.id !== id) {
        this.id = id;
      }
    }
    getAttr(key) {
      if (key in this._attributes) {
        return this._attributes[key];
      } else if (key in this._inFlightAttributes) {
        return this._inFlightAttributes[key];
      } else {
        return this._data[key];
      }
    }
    hasAttr(key) {
      return key in this._attributes || key in this._inFlightAttributes || key in this._data;
    }
    unloadRecord() {
      if (this.isDestroyed) {
        return;
      }
      graphFor(this.storeWrapper).unload(this.identifier);
      this.reset();
      if (!this._scheduledDestroy) {
        this._scheduledDestroy = runloop._backburner.schedule('destroy', this, '_cleanupOrphanedRecordDatas');
      }
    }
    _cleanupOrphanedRecordDatas() {
      let relatedRecordDatas = this._allRelatedRecordDatas();
      if (areAllModelsUnloaded(relatedRecordDatas)) {
        // we don't have a backburner queue yet since
        // we scheduled this into ember's destroy
        // disconnectRecord called from destroy will teardown
        // relationships. We do this to queue that.
        this.storeWrapper._store._backburner.join(() => {
          for (let i = 0; i < relatedRecordDatas.length; ++i) {
            let recordData = relatedRecordDatas[i];
            if (!recordData.isDestroyed) {
              // TODO @runspired we do not currently destroy RecordData instances *except* via this relationship
              // traversal. This seems like an oversight since the store should be able to notify destroy.
              Private.removeRecordDataFor(recordData.identifier);
              recordData.destroy();
            }
          }
        });
      }
      this._scheduledDestroy = null;
    }
    destroy() {
      this.isDestroyed = true;
      this.storeWrapper.disconnectRecord(this.modelName, this.id, this.clientId);
    }
    isRecordInUse() {
      return this.storeWrapper.isRecordInUse(this.modelName, this.id, this.clientId);
    }
    /*
      Computes the set of internal models reachable from this internal model.
       Reachability is determined over the relationship graph (ie a graph where
      nodes are internal models and edges are belongs to or has many
      relationships).
       Returns an array including `this` and all internal models reachable
      from `this`.
    */
    _allRelatedRecordDatas() {
      let array = [];
      let queue = [];
      let bfsId = nextBfsId++;
      queue.push(this);
      this._bfsId = bfsId;
      while (queue.length > 0) {
        let node = queue.shift();
        array.push(node);
        const iterator = this._directlyRelatedRecordDatasIterable().iterator();
        for (let obj = iterator.next(); !obj.done; obj = iterator.next()) {
          const recordData = obj.value;
          if (recordData && recordData instanceof RecordDataDefault) {
            (!(recordData._bfsId <= bfsId) && debug.assert('Internal Error: seen a future bfs iteration', recordData._bfsId <= bfsId));
            if (recordData._bfsId < bfsId) {
              queue.push(recordData);
              recordData._bfsId = bfsId;
            }
          }
        }
      }
      return array;
    }
    isAttrDirty(key) {
      if (this._attributes[key] === undefined) {
        return false;
      }
      let originalValue;
      if (this._inFlightAttributes[key] !== undefined) {
        originalValue = this._inFlightAttributes[key];
      } else {
        originalValue = this._data[key];
      }
      return originalValue !== this._attributes[key];
    }
    get _attributes() {
      if (this.__attributes === null) {
        this.__attributes = Object.create(null);
      }
      return this.__attributes;
    }
    set _attributes(v) {
      this.__attributes = v;
    }
    get _data() {
      if (this.__data === null) {
        this.__data = Object.create(null);
      }
      return this.__data;
    }
    set _data(v) {
      this.__data = v;
    }
    get _inFlightAttributes() {
      if (this.__inFlightAttributes === null) {
        this.__inFlightAttributes = Object.create(null);
      }
      return this.__inFlightAttributes;
    }
    set _inFlightAttributes(v) {
      this.__inFlightAttributes = v;
    }

    /**
     * Receives options passed to `store.createRecord` and is given the opportunity
     * to handle them.
     *
     * The return value is an object of options to pass to `Record.create()`
     *
     * @name _initRecordCreateOptions
     * @param options
     * @private
     */
    _initRecordCreateOptions(options) {
      let createOptions = {};
      if (options !== undefined) {
        const {
          modelName,
          storeWrapper,
          identifier
        } = this;
        let attributeDefs = storeWrapper.attributesDefinitionFor(modelName);
        let relationshipDefs = storeWrapper.relationshipsDefinitionFor(modelName);
        const graph = graphFor(storeWrapper);
        let propertyNames = Object.keys(options);
        for (let i = 0; i < propertyNames.length; i++) {
          let name = propertyNames[i];
          let propertyValue = options[name];
          if (name === 'id') {
            this.id = propertyValue;
            continue;
          }
          let fieldType = relationshipDefs[name] || attributeDefs[name];
          let kind = fieldType !== undefined ? fieldType.kind : null;
          let relationship;
          switch (kind) {
            case 'attribute':
              this.setDirtyAttribute(name, propertyValue);
              break;
            case 'belongsTo':
              this.setDirtyBelongsTo(name, propertyValue);
              relationship = graph.get(identifier, name);
              relationship.state.hasReceivedData = true;
              relationship.state.isEmpty = false;
              break;
            case 'hasMany':
              this.setDirtyHasMany(name, propertyValue);
              relationship = graph.get(identifier, name);
              relationship.state.hasReceivedData = true;
              relationship.state.isEmpty = false;
              break;
            default:
              // reflect back (pass-thru) unknown properties
              createOptions[name] = propertyValue;
          }
        }
      }
      return createOptions;
    }

    /*
      TODO IGOR AND DAVID this shouldn't be public
     This method should only be called by records in the `isNew()` state OR once the record
     has been deleted and that deletion has been persisted.
      It will remove this record from any associated relationships.
      If `isNew` is true (default false), it will also completely reset all
      relationships to an empty state as well.
       @method removeFromInverseRelationships
      @param {Boolean} isNew whether to unload from the `isNew` perspective
      @private
     */
    removeFromInverseRelationships() {
      graphFor(this.storeWrapper).push({
        op: 'deleteRecord',
        record: this.identifier,
        isNew: this.isNew()
      });
    }
    clientDidCreate() {
      this._isNew = true;
    }

    /*
      Ember Data has 3 buckets for storing the value of an attribute on an internalModel.
       `_data` holds all of the attributes that have been acknowledged by
      a backend via the adapter. When rollbackAttributes is called on a model all
      attributes will revert to the record's state in `_data`.
       `_attributes` holds any change the user has made to an attribute
      that has not been acknowledged by the adapter. Any values in
      `_attributes` are have priority over values in `_data`.
       `_inFlightAttributes`. When a record is being synced with the
      backend the values in `_attributes` are copied to
      `_inFlightAttributes`. This way if the backend acknowledges the
      save but does not return the new state Ember Data can copy the
      values from `_inFlightAttributes` to `_data`. Without having to
      worry about changes made to `_attributes` while the save was
      happenign.
        Changed keys builds a list of all of the values that may have been
      changed by the backend after a successful save.
       It does this by iterating over each key, value pair in the payload
      returned from the server after a save. If the `key` is found in
      `_attributes` then the user has a local changed to the attribute
      that has not been synced with the server and the key is not
      included in the list of changed keys.
    
      If the value, for a key differs from the value in what Ember Data
      believes to be the truth about the backend state (A merger of the
      `_data` and `_inFlightAttributes` objects where
      `_inFlightAttributes` has priority) then that means the backend
      has updated the value and the key is added to the list of changed
      keys.
       @method _changedKeys
      @private
    */
    /*
        TODO IGOR DAVID
        There seems to be a potential bug here, where we will return keys that are not
        in the schema
    */
    _changedKeys(updates) {
      let changedKeys = [];
      if (updates) {
        let original, i, value, key;
        let keys = Object.keys(updates);
        let length = keys.length;
        let hasAttrs = this.hasChangedAttributes();
        let attrs;
        if (hasAttrs) {
          attrs = this._attributes;
        }
        original = Object.assign(Object.create(null), this._data, this.__inFlightAttributes);
        for (i = 0; i < length; i++) {
          key = keys[i];
          value = updates[key];

          // A value in _attributes means the user has a local change to
          // this attributes. We never override this value when merging
          // updates from the backend so we should not sent a change
          // notification if the server value differs from the original.
          if (hasAttrs === true && attrs[key] !== undefined) {
            continue;
          }
          if (!utils.isEqual(original[key], value)) {
            changedKeys.push(key);
          }
        }
      }
      return changedKeys;
    }
    toString() {
      return `<${this.modelName}:${this.id}>`;
    }
  }
  function areAllModelsUnloaded(recordDatas) {
    for (let i = 0; i < recordDatas.length; ++i) {
      if (recordDatas[i].isRecordInUse()) {
        return false;
      }
    }
    return true;
  }
  function getLocalState(rel) {
    if (rel.definition.kind === 'belongsTo') {
      return rel.localState ? [rel.localState] : [];
    }
    return rel.currentState;
  }
  function getRemoteState(rel) {
    if (rel.definition.kind === 'belongsTo') {
      return rel.remoteState ? [rel.remoteState] : [];
    }
    return rel.canonicalState;
  }

  exports.BelongsToRelationship = BelongsToRelationship;
  exports.ManyRelationship = ManyRelationship;
  exports.RecordData = RecordDataDefault;
  exports.Relationship = ImplicitRelationship;
  exports.graphFor = graphFor;
  exports.peekGraph = peekGraph;

  Object.defineProperty(exports, '__esModule', { value: true });

}));

;define('@ember-data/serializer/-private', ['exports', '@ember/array', '@ember/debug', '@ember/object', '@ember/object/mixin', '@ember/string', '@ember/utils'], (function (exports, array, debug, EmberObject, Mixin, string, utils) { 'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var EmberObject__default = /*#__PURE__*/_interopDefaultLegacy(EmberObject);
  var Mixin__default = /*#__PURE__*/_interopDefaultLegacy(Mixin);

  /**
    @module @ember-data/serializer/rest
  */

  /**
    ## Using Embedded Records

    `EmbeddedRecordsMixin` supports serializing embedded records.

    To set up embedded records, include the mixin when extending a serializer,
    then define and configure embedded (model) relationships.

    Note that embedded records will serialize with the serializer for their model instead of the serializer in which they are defined.

    Note also that this mixin does not work with JSONAPISerializer because the JSON:API specification does not describe how to format embedded resources.

    Below is an example of a per-type serializer (`post` type).

    ```app/serializers/post.js
    import RESTSerializer, { EmbeddedRecordsMixin } from '@ember-data/serializer/rest';

    export default class PostSerializer extends RESTSerializer.extend(EmbeddedRecordsMixin) {
      attrs = {
        author: { embedded: 'always' },
        comments: { serialize: 'ids' }
      }
    }
    ```
    Note that this use of `{ embedded: 'always' }` is unrelated to
    the `{ embedded: 'always' }` that is defined as an option on `attr` as part of
    defining a model while working with the `ActiveModelSerializer`.  Nevertheless,
    using `{ embedded: 'always' }` as an option to `attr` is not a valid way to set up
    embedded records.

    The `attrs` option for a resource `{ embedded: 'always' }` is shorthand for:

    ```js
    {
      serialize: 'records',
      deserialize: 'records'
    }
    ```

    ### Configuring Attrs

    A resource's `attrs` option may be set to use `ids`, `records` or false for the
    `serialize`  and `deserialize` settings.

    The `attrs` property can be set on the `ApplicationSerializer` or a per-type
    serializer.

    In the case where embedded JSON is expected while extracting a payload (reading)
    the setting is `deserialize: 'records'`, there is no need to use `ids` when
    extracting as that is the default behaviour without this mixin if you are using
    the vanilla `EmbeddedRecordsMixin`. Likewise, to embed JSON in the payload while
    serializing `serialize: 'records'` is the setting to use. There is an option of
    not embedding JSON in the serialized payload by using `serialize: 'ids'`. If you
    do not want the relationship sent at all, you can use `serialize: false`.


    ### EmbeddedRecordsMixin defaults
    If you do not overwrite `attrs` for a specific relationship, the `EmbeddedRecordsMixin`
    will behave in the following way:

    BelongsTo: `{ serialize: 'id', deserialize: 'id' }`
    HasMany:   `{ serialize: false, deserialize: 'ids' }`

    ### Model Relationships

    Embedded records must have a model defined to be extracted and serialized. Note that
    when defining any relationships on your model such as `belongsTo` and `hasMany`, you
    should not both specify `async: true` and also indicate through the serializer's
    `attrs` attribute that the related model should be embedded for deserialization.
    If a model is declared embedded for deserialization (`embedded: 'always'` or `deserialize: 'records'`),
    then do not use `async: true`.

    To successfully extract and serialize embedded records the model relationships
    must be set up correctly. See the
    [defining relationships](https://guides.emberjs.com/current/models/relationships)
    section of the **Defining Models** guide page.

    Records without an `id` property are not considered embedded records, model
    instances must have an `id` property to be used with Ember Data.

    ### Example JSON payloads, Models and Serializers

    **When customizing a serializer it is important to grok what the customizations
    are. Please read the docs for the methods this mixin provides, in case you need
    to modify it to fit your specific needs.**

    For example, review the docs for each method of this mixin:
    * [normalize](/ember-data/release/classes/EmbeddedRecordsMixin/methods/normalize?anchor=normalize)
    * [serializeBelongsTo](/ember-data/release/classes/EmbeddedRecordsMixin/methods/serializeBelongsTo?anchor=serializeBelongsTo)
    * [serializeHasMany](/ember-data/release/classes/EmbeddedRecordsMixin/methods/serializeHasMany?anchor=serializeHasMany)

    @class EmbeddedRecordsMixin
    @public
  */
  var embeddedRecordsMixin = Mixin__default["default"].create({
    /**
      Normalize the record and recursively normalize/extract all the embedded records
      while pushing them into the store as they are encountered
       A payload with an attr configured for embedded records needs to be extracted:
       ```js
      {
        "post": {
          "id": "1"
          "title": "Rails is omakase",
          "comments": [{
            "id": "1",
            "body": "Rails is unagi"
          }, {
            "id": "2",
            "body": "Omakase O_o"
          }]
        }
      }
      ```
     @method normalize
      @public
     @param {Model} typeClass
     @param {Object} hash to be normalized
     @param {String} prop the hash has been referenced by
     @return {Object} the normalized hash
    **/
    normalize(typeClass, hash, prop) {
      let normalizedHash = this._super(typeClass, hash, prop);
      return this._extractEmbeddedRecords(this, this.store, typeClass, normalizedHash);
    },
    keyForRelationship(key, typeClass, method) {
      if (method === 'serialize' && this.hasSerializeRecordsOption(key) || method === 'deserialize' && this.hasDeserializeRecordsOption(key)) {
        return this.keyForAttribute(key, method);
      } else {
        return this._super(key, typeClass, method) || key;
      }
    },
    /**
      Serialize `belongsTo` relationship when it is configured as an embedded object.
       This example of an author model belongs to a post model:
       ```js
      import Model, { attr, belongsTo } from '@ember-data/model';
       Post = Model.extend({
        title:    attr('string'),
        body:     attr('string'),
        author:   belongsTo('author')
      });
       Author = Model.extend({
        name:     attr('string'),
        post:     belongsTo('post')
      });
      ```
       Use a custom (type) serializer for the post model to configure embedded author
       ```app/serializers/post.js
      import RESTSerializer, { EmbeddedRecordsMixin } from '@ember-data/serializer/rest';
       export default class PostSerializer extends RESTSerializer.extend(EmbeddedRecordsMixin) {
        attrs = {
          author: { embedded: 'always' }
        }
      }
      ```
       A payload with an attribute configured for embedded records can serialize
      the records together under the root attribute's payload:
       ```js
      {
        "post": {
          "id": "1"
          "title": "Rails is omakase",
          "author": {
            "id": "2"
            "name": "dhh"
          }
        }
      }
      ```
       @method serializeBelongsTo
      @public
      @param {Snapshot} snapshot
      @param {Object} json
      @param {Object} relationship
    */
    serializeBelongsTo(snapshot, json, relationship) {
      let attr = relationship.key;
      if (this.noSerializeOptionSpecified(attr)) {
        this._super(snapshot, json, relationship);
        return;
      }
      let includeIds = this.hasSerializeIdsOption(attr);
      let includeRecords = this.hasSerializeRecordsOption(attr);
      let embeddedSnapshot = snapshot.belongsTo(attr);
      if (includeIds) {
        let serializedKey = this._getMappedKey(relationship.key, snapshot.type);
        if (serializedKey === relationship.key && this.keyForRelationship) {
          serializedKey = this.keyForRelationship(relationship.key, relationship.kind, 'serialize');
        }
        if (!embeddedSnapshot) {
          json[serializedKey] = null;
        } else {
          json[serializedKey] = embeddedSnapshot.id;
          if (relationship.options.polymorphic) {
            this.serializePolymorphicType(snapshot, json, relationship);
          }
        }
      } else if (includeRecords) {
        this._serializeEmbeddedBelongsTo(snapshot, json, relationship);
      }
    },
    _serializeEmbeddedBelongsTo(snapshot, json, relationship) {
      let embeddedSnapshot = snapshot.belongsTo(relationship.key);
      let serializedKey = this._getMappedKey(relationship.key, snapshot.type);
      if (serializedKey === relationship.key && this.keyForRelationship) {
        serializedKey = this.keyForRelationship(relationship.key, relationship.kind, 'serialize');
      }
      if (!embeddedSnapshot) {
        json[serializedKey] = null;
      } else {
        json[serializedKey] = embeddedSnapshot.serialize({
          includeId: true
        });
        this.removeEmbeddedForeignKey(snapshot, embeddedSnapshot, relationship, json[serializedKey]);
        if (relationship.options.polymorphic) {
          this.serializePolymorphicType(snapshot, json, relationship);
        }
      }
    },
    /**
      Serializes `hasMany` relationships when it is configured as embedded objects.
       This example of a post model has many comments:
       ```js
      import Model, { attr, belongsTo, hasMany } from '@ember-data/model';
       Post = Model.extend({
        title:    attr('string'),
        body:     attr('string'),
        comments: hasMany('comment')
      });
       Comment = Model.extend({
        body:     attr('string'),
        post:     belongsTo('post')
      });
      ```
       Use a custom (type) serializer for the post model to configure embedded comments
       ```app/serializers/post.js
      import RESTSerializer, { EmbeddedRecordsMixin } from '@ember-data/serializer/rest';
       export default class PostSerializer extends RESTSerializer.extend(EmbeddedRecordsMixin) {
        attrs = {
          comments: { embedded: 'always' }
        }
      }
      ```
       A payload with an attribute configured for embedded records can serialize
      the records together under the root attribute's payload:
       ```js
      {
        "post": {
          "id": "1"
          "title": "Rails is omakase",
          "body": "I want this for my ORM, I want that for my template language..."
          "comments": [{
            "id": "1",
            "body": "Rails is unagi"
          }, {
            "id": "2",
            "body": "Omakase O_o"
          }]
        }
      }
      ```
       The attrs options object can use more specific instruction for extracting and
      serializing. When serializing, an option to embed `ids`, `ids-and-types` or `records` can be set.
      When extracting the only option is `records`.
       So `{ embedded: 'always' }` is shorthand for:
      `{ serialize: 'records', deserialize: 'records' }`
       To embed the `ids` for a related object (using a hasMany relationship):
       ```app/serializers/post.js
      import RESTSerializer, { EmbeddedRecordsMixin } from '@ember-data/serializer/rest';
       export default class PostSerializer extends RESTSerializer.extend(EmbeddedRecordsMixin) {
        attrs = {
          comments: { serialize: 'ids', deserialize: 'records' }
        }
      }
      ```
       ```js
      {
        "post": {
          "id": "1"
          "title": "Rails is omakase",
          "body": "I want this for my ORM, I want that for my template language..."
          "comments": ["1", "2"]
        }
      }
      ```
       To embed the relationship as a collection of objects with `id` and `type` keys, set
      `ids-and-types` for the related object.
       This is particularly useful for polymorphic relationships where records don't share
      the same table and the `id` is not enough information.
       For example having a user that has many pets:
       ```js
      User = Model.extend({
        name: attr('string'),
        pets: hasMany('pet', { polymorphic: true })
      });
       Pet = Model.extend({
        name: attr('string'),
      });
       Cat = Pet.extend({
        // ...
      });
       Parrot = Pet.extend({
        // ...
      });
      ```
       ```app/serializers/user.js
      import RESTSerializer, { EmbeddedRecordsMixin } from '@ember-data/serializer/rest';
       export default class UserSerializer extends RESTSerializer.extend(EmbeddedRecordsMixin) {
        attrs = {
          pets: { serialize: 'ids-and-types', deserialize: 'records' }
        }
      }
      ```
       ```js
      {
        "user": {
          "id": "1"
          "name": "Bertin Osborne",
          "pets": [
            { "id": "1", "type": "Cat" },
            { "id": "1", "type": "Parrot"}
          ]
        }
      }
      ```
       @method serializeHasMany
      @public
      @param {Snapshot} snapshot
      @param {Object} json
      @param {Object} relationship
    */
    serializeHasMany(snapshot, json, relationship) {
      let attr = relationship.key;
      if (this.noSerializeOptionSpecified(attr)) {
        this._super(snapshot, json, relationship);
        return;
      }
      if (this.hasSerializeIdsOption(attr)) {
        let serializedKey = this._getMappedKey(relationship.key, snapshot.type);
        if (serializedKey === relationship.key && this.keyForRelationship) {
          serializedKey = this.keyForRelationship(relationship.key, relationship.kind, 'serialize');
        }
        json[serializedKey] = snapshot.hasMany(attr, {
          ids: true
        });
      } else if (this.hasSerializeRecordsOption(attr)) {
        this._serializeEmbeddedHasMany(snapshot, json, relationship);
      } else {
        if (this.hasSerializeIdsAndTypesOption(attr)) {
          this._serializeHasManyAsIdsAndTypes(snapshot, json, relationship);
        }
      }
    },
    /*
      Serializes a hasMany relationship as an array of objects containing only `id` and `type`
      keys.
      This has its use case on polymorphic hasMany relationships where the server is not storing
      all records in the same table using STI, and therefore the `id` is not enough information
       TODO: Make the default in Ember-data 3.0??
    */
    _serializeHasManyAsIdsAndTypes(snapshot, json, relationship) {
      let serializedKey = this.keyForAttribute(relationship.key, 'serialize');
      let hasMany = snapshot.hasMany(relationship.key);
      json[serializedKey] = array.A(hasMany).map(function (recordSnapshot) {
        //
        // I'm sure I'm being utterly naive here. Probably id is a configurable property and
        // type too, and the modelName has to be normalized somehow.
        //
        return {
          id: recordSnapshot.id,
          type: recordSnapshot.modelName
        };
      });
    },
    _serializeEmbeddedHasMany(snapshot, json, relationship) {
      let serializedKey = this._getMappedKey(relationship.key, snapshot.type);
      if (serializedKey === relationship.key && this.keyForRelationship) {
        serializedKey = this.keyForRelationship(relationship.key, relationship.kind, 'serialize');
      }
      (debug.warn(`The embedded relationship '${serializedKey}' is undefined for '${snapshot.modelName}' with id '${snapshot.id}'. Please include it in your original payload.`, utils.typeOf(snapshot.hasMany(relationship.key)) !== 'undefined', {
        id: 'ds.serializer.embedded-relationship-undefined'
      }));
      json[serializedKey] = this._generateSerializedHasMany(snapshot, relationship);
    },
    /*
      Returns an array of embedded records serialized to JSON
    */
    _generateSerializedHasMany(snapshot, relationship) {
      let hasMany = snapshot.hasMany(relationship.key);
      let manyArray = array.A(hasMany);
      let ret = new Array(manyArray.length);
      for (let i = 0; i < manyArray.length; i++) {
        let embeddedSnapshot = manyArray[i];
        let embeddedJson = embeddedSnapshot.serialize({
          includeId: true
        });
        this.removeEmbeddedForeignKey(snapshot, embeddedSnapshot, relationship, embeddedJson);
        ret[i] = embeddedJson;
      }
      return ret;
    },
    /**
      When serializing an embedded record, modify the property (in the `JSON` payload)
      that refers to the parent record (foreign key for the relationship).
       Serializing a `belongsTo` relationship removes the property that refers to the
      parent record
       Serializing a `hasMany` relationship does not remove the property that refers to
      the parent record.
       @method removeEmbeddedForeignKey
      @public
      @param {Snapshot} snapshot
      @param {Snapshot} embeddedSnapshot
      @param {Object} relationship
      @param {Object} json
    */
    removeEmbeddedForeignKey(snapshot, embeddedSnapshot, relationship, json) {
      if (relationship.kind === 'belongsTo') {
        let parentRecord = snapshot.type.inverseFor(relationship.key, this.store);
        if (parentRecord) {
          let name = parentRecord.name;
          let embeddedSerializer = this.store.serializerFor(embeddedSnapshot.modelName);
          let parentKey = embeddedSerializer.keyForRelationship(name, parentRecord.kind, 'deserialize');
          if (parentKey) {
            delete json[parentKey];
          }
        }
      } /*else if (relationship.kind === 'hasMany') {
        return;
        }*/
    },

    // checks config for attrs option to embedded (always) - serialize and deserialize
    hasEmbeddedAlwaysOption(attr) {
      let option = this.attrsOption(attr);
      return option && option.embedded === 'always';
    },
    // checks config for attrs option to serialize ids
    hasSerializeRecordsOption(attr) {
      let alwaysEmbed = this.hasEmbeddedAlwaysOption(attr);
      let option = this.attrsOption(attr);
      return alwaysEmbed || option && option.serialize === 'records';
    },
    // checks config for attrs option to serialize records
    hasSerializeIdsOption(attr) {
      let option = this.attrsOption(attr);
      return option && (option.serialize === 'ids' || option.serialize === 'id');
    },
    // checks config for attrs option to serialize records as objects containing id and types
    hasSerializeIdsAndTypesOption(attr) {
      let option = this.attrsOption(attr);
      return option && (option.serialize === 'ids-and-types' || option.serialize === 'id-and-type');
    },
    // checks config for attrs option to serialize records
    noSerializeOptionSpecified(attr) {
      let option = this.attrsOption(attr);
      return !(option && (option.serialize || option.embedded));
    },
    // checks config for attrs option to deserialize records
    // a defined option object for a resource is treated the same as
    // `deserialize: 'records'`
    hasDeserializeRecordsOption(attr) {
      let alwaysEmbed = this.hasEmbeddedAlwaysOption(attr);
      let option = this.attrsOption(attr);
      return alwaysEmbed || option && option.deserialize === 'records';
    },
    attrsOption(attr) {
      let attrs = this.get('attrs');
      return attrs && (attrs[string.camelize(attr)] || attrs[attr]);
    },
    /**
     @method _extractEmbeddedRecords
     @private
    */
    _extractEmbeddedRecords(serializer, store, typeClass, partial) {
      typeClass.eachRelationship((key, relationship) => {
        if (serializer.hasDeserializeRecordsOption(key)) {
          if (relationship.kind === 'hasMany') {
            this._extractEmbeddedHasMany(store, key, partial, relationship);
          }
          if (relationship.kind === 'belongsTo') {
            this._extractEmbeddedBelongsTo(store, key, partial, relationship);
          }
        }
      });
      return partial;
    },
    /**
     @method _extractEmbeddedHasMany
     @private
    */
    _extractEmbeddedHasMany(store, key, hash, relationshipMeta) {
      let relationshipHash = EmberObject.get(hash, `data.relationships.${key}.data`);
      if (!relationshipHash) {
        return;
      }
      let hasMany = new Array(relationshipHash.length);
      for (let i = 0; i < relationshipHash.length; i++) {
        let item = relationshipHash[i];
        let {
          data,
          included
        } = this._normalizeEmbeddedRelationship(store, relationshipMeta, item);
        hash.included = hash.included || [];
        hash.included.push(data);
        if (included) {
          hash.included = hash.included.concat(included);
        }
        hasMany[i] = {
          id: data.id,
          type: data.type
        };
      }
      let relationship = {
        data: hasMany
      };
      EmberObject.set(hash, `data.relationships.${key}`, relationship);
    },
    /**
     @method _extractEmbeddedBelongsTo
     @private
    */
    _extractEmbeddedBelongsTo(store, key, hash, relationshipMeta) {
      let relationshipHash = EmberObject.get(hash, `data.relationships.${key}.data`);
      if (!relationshipHash) {
        return;
      }
      let {
        data,
        included
      } = this._normalizeEmbeddedRelationship(store, relationshipMeta, relationshipHash);
      hash.included = hash.included || [];
      hash.included.push(data);
      if (included) {
        hash.included = hash.included.concat(included);
      }
      let belongsTo = {
        id: data.id,
        type: data.type
      };
      let relationship = {
        data: belongsTo
      };
      EmberObject.set(hash, `data.relationships.${key}`, relationship);
    },
    /**
     @method _normalizeEmbeddedRelationship
     @private
    */
    _normalizeEmbeddedRelationship(store, relationshipMeta, relationshipHash) {
      let modelName = relationshipMeta.type;
      if (relationshipMeta.options.polymorphic) {
        modelName = relationshipHash.type;
      }
      let modelClass = store.modelFor(modelName);
      let serializer = store.serializerFor(modelName);
      return serializer.normalize(modelClass, relationshipHash, null);
    },
    isEmbeddedRecordsMixin: true
  });

  /*
    Check if the passed model has a `type` attribute or a relationship named `type`.
   */
  function modelHasAttributeOrRelationshipNamedType(modelClass) {
    return EmberObject.get(modelClass, 'attributes').has('type') || EmberObject.get(modelClass, 'relationshipsByName').has('type');
  }

  /**
    @module @ember-data/serializer
  */

  /**
    The `Transform` class is used to serialize and deserialize model
    attributes when they are saved or loaded from an
    adapter. Subclassing `Transform` is useful for creating custom
    attributes. All subclasses of `Transform` must implement a
    `serialize` and a `deserialize` method.

    Example

    ```app/transforms/temperature.js
    import Transform from '@ember-data/serializer/transform';

    // Converts centigrade in the JSON to fahrenheit in the app
    export default class TemperatureTransform extends Transform {
      deserialize(serialized, options) {
        return (serialized *  1.8) + 32;
      }

      serialize(deserialized, options) {
        return (deserialized - 32) / 1.8;
      }
    }
    ```

    Usage

    ```app/models/requirement.js
    import Model, { attr } from '@ember-data/model';

    export default class RequirementModel extends Model {
      @attr('string') name;
      @attr('temperature') temperature;
    }
    ```

    The options passed into the `attr` function when the attribute is
    declared on the model is also available in the transform.

    ```app/models/post.js
    import Model, { attr } from '@ember-data/model';

    export default class PostModel extends Model {
      @attr('string') title;
      @attr('markdown', {
        markdown: {
          gfm: false,
          sanitize: true
        }
      })
      markdown;
    }
    ```

    ```app/transforms/markdown.js
    import Transform from '@ember-data/serializer/transform';

    export default class MarkdownTransform extends Transform {
      serialize(deserialized, options) {
        return deserialized.raw;
      }

      deserialize(serialized, options) {
        let markdownOptions = options.markdown || {};

        return marked(serialized, markdownOptions);
      }
    }
    ```

    @class Transform
    @public
   */
  class Transform extends EmberObject__default["default"] {
    /**
      When given a deserialized value from a record attribute this
      method must return the serialized value.
       Example
       ```javascript
      import { isEmpty } from '@ember/utils';
       serialize(deserialized, options) {
        return isEmpty(deserialized) ? null : Number(deserialized);
      }
      ```
       @method serialize
      @public
      @param deserialized The deserialized value
      @param options hash of options passed to `attr`
      @return The serialized value
    */
    /**
      When given a serialized value from a JSON object this method must
      return the deserialized value for the record attribute.
       Example
       ```javascript
      deserialize(serialized, options) {
        return empty(serialized) ? null : Number(serialized);
      }
      ```
       @method deserialize
      @public
      @param serialized The serialized value
      @param options hash of options passed to `attr`
      @return The deserialized value
    */
  }

  /**
    @module @ember-data/serializer
  */

  /**
    The `BooleanTransform` class is used to serialize and deserialize
    boolean attributes on Ember Data record objects. This transform is
    used when `boolean` is passed as the type parameter to the
    [attr](/ember-data/release/functions/@ember-data%2Fmodel/attr) function.

    Usage

    ```app/models/user.js
    import Model, { attr } from '@ember-data/model';

    export default class UserModel extends Model {
      @attr('boolean') isAdmin;
      @attr('string') name;
      @attr('string') email;
    }
    ```

    By default, the boolean transform only allows for values of `true` or
    `false`. You can opt into allowing `null` values for
    boolean attributes via `attr('boolean', { allowNull: true })`

    ```app/models/user.js
    import Model, { attr } from '@ember-data/model';

    export default class UserModel extends Model {
      @attr('string') email;
      @attr('string') username;
      @attr('boolean', { allowNull: true }) wantsWeeklyEmail;
    }
    ```

    @class BooleanTransform
    @public
    @extends Transform
   */
  class BooleanTransform extends Transform {
    deserialize(serialized, options) {
      if (utils.isNone(serialized) && options.allowNull === true) {
        return null;
      }
      let type = typeof serialized;
      if (type === 'boolean') {
        return serialized;
      } else if (type === 'string') {
        return /^(true|t|1)$/i.test(serialized);
      } else if (type === 'number') {
        return serialized === 1;
      } else {
        return false;
      }
    }
    serialize(deserialized, options) {
      if (utils.isNone(deserialized) && options.allowNull === true) {
        return null;
      }
      return Boolean(deserialized);
    }
  }

  /**
    @module @ember-data/serializer
  */

  /**
   The `DateTransform` class is used to serialize and deserialize
   date attributes on Ember Data record objects. This transform is used
   when `date` is passed as the type parameter to the
   [attr](/ember-data/release/functions/@ember-data%2Fmodel/attr) function. It uses the [`ISO 8601`](https://en.wikipedia.org/wiki/ISO_8601)
   standard.

   ```app/models/score.js
   import Model, { attr, belongsTo } from '@ember-data/model';

   export default class ScoreModel extends Model {
      @attr('number') value;
      @belongsTo('player') player;
      @attr('date') date;
    }
   ```

   @class DateTransform
    @public
   @extends Transform
   */

  class DateTransform extends Transform {
    deserialize(serialized) {
      let type = typeof serialized;
      if (type === 'string') {
        let offset = serialized.indexOf('+');
        if (offset !== -1 && serialized.length - 5 === offset) {
          offset += 3;
          return new Date(serialized.slice(0, offset) + ':' + serialized.slice(offset));
        }
        return new Date(serialized);
      } else if (type === 'number') {
        return new Date(serialized);
      } else if (serialized === null || serialized === undefined) {
        // if the value is null return null
        // if the value is not present in the data return undefined
        return serialized;
      } else {
        return null;
      }
    }
    serialize(date) {
      if (date instanceof Date && !isNaN(date)) {
        return date.toISOString();
      } else {
        return null;
      }
    }
  }

  /**
    @module @ember-data/serializer
  */

  function isNumber(value) {
    return value === value && value !== Infinity && value !== -Infinity;
  }

  /**
    The `NumberTransform` class is used to serialize and deserialize
    numeric attributes on Ember Data record objects. This transform is
    used when `number` is passed as the type parameter to the
    [attr](/ember-data/release/functions/@ember-data%2Fmodel/attr) function.

    Usage

    ```app/models/score.js
    import Model, { attr, belongsTo } from '@ember-data/model';

    export default class ScoreModel extends Model {
      @attr('number') value;
      @belongsTo('player') player;
      @attr('date') date;
    }
    ```

    @class NumberTransform
    @public
    @extends Transform
   */
  class NumberTransform extends Transform {
    deserialize(serialized) {
      let transformed;
      if (serialized === '' || serialized === null || serialized === undefined) {
        return null;
      } else {
        transformed = Number(serialized);
        return isNumber(transformed) ? transformed : null;
      }
    }
    serialize(deserialized) {
      let transformed;
      if (deserialized === '' || deserialized === null || deserialized === undefined) {
        return null;
      } else {
        transformed = Number(deserialized);
        return isNumber(transformed) ? transformed : null;
      }
    }
  }

  /**
    @module @ember-data/serializer
  */

  /**
    The `StringTransform` class is used to serialize and deserialize
    string attributes on Ember Data record objects. This transform is
    used when `string` is passed as the type parameter to the
    [attr](/ember-data/release/functions/@ember-data%2Fmodel/attr) function.

    Usage

    ```app/models/user.js
    import Model, { attr, belongsTo } from '@ember-data/model';

    export default class UserModel extends Model {
      @attr('boolean') isAdmin;
      @attr('string') name;
      @attr('string') email;
    }
    ```

    @class StringTransform
    @public
    @extends Transform
   */
  class StringTransform extends Transform {
    deserialize(serialized) {
      return utils.isNone(serialized) ? null : String(serialized);
    }
    serialize(deserialized) {
      return utils.isNone(deserialized) ? null : String(deserialized);
    }
  }

  exports.BooleanTransform = BooleanTransform;
  exports.DateTransform = DateTransform;
  exports.EmbeddedRecordsMixin = embeddedRecordsMixin;
  exports.NumberTransform = NumberTransform;
  exports.StringTransform = StringTransform;
  exports.Transform = Transform;
  exports.modelHasAttributeOrRelationshipNamedType = modelHasAttributeOrRelationshipNamedType;

  Object.defineProperty(exports, '__esModule', { value: true });

}));

;define("@ember-data/serializer/index", ["exports", "@ember/object"], function (_exports, _object) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"@ember/object"eaimeta@70e063a35619d71f
  /**
    ## Overview
  
    In order to properly manage and present your data, EmberData
    needs to understand the structure of data it receives.
  
    `Serializers` convert data between the server's API format and
    the format EmberData understands.
  
    Data received from an API response is **normalized** into
    [JSON:API](https://jsonapi.org/) (the format used internally
    by EmberData), while data sent to an API is **serialized**
    into the format the API expects.
  
    ### Implementing a Serializer
  
    There are only two required serializer methods, one for
    normalizing data from the server API format into JSON:API, and
    another for serializing records via `Snapshots` into the expected
    server API format.
  
    To implement a serializer, export a class that conforms to the structure
    described by the [MinimumSerializerInterface](/ember-data/release/classes/MinimumSerializerInterface)
    from the `app/serializers/` directory. An example is below.
  
    ```ts
    import EmberObject from '@ember/object';
  
    export default class ApplicationSerializer extends EmberObject {
      normalizeResponse(store, schema, rawPayload) {
        return rawPayload;
      }
  
      serialize(snapshot, options) {
        const serializedResource = {
          id: snapshot.id,
          type: snapshot.modelName,
          attributes: snapshot.attributes()
        };
  
        return serializedResource;
      }
    }
   ```
  
  
    ### Serializer Resolution
  
    `store.serializerFor(name)` will lookup serializers defined in
    `app/serializers/` and return an instance. If no serializer is found, an
    error will be thrown.
  
    `serializerFor` first attempts to find a serializer with an exact match on `name`,
    then falls back to checking for the presence of a serializer named `application`.
  
    ```ts
    store.serializerFor('author');
  
    // lookup paths (in order) =>
    //   app/serializers/author.js
    //   app/serializers/application.js
    ```
  
    Most requests in EmberData are made with respect to a particular `type` (or `modelName`)
    (e.g., "get me the full collection of **books**" or "get me the **employee** whose id is 37"). We
    refer to this as the **primary** resource `type`.
  
    Typically `serializerFor` will be used to find a serializer with a name matching that of the primary
    resource `type` for the request, falling back to the `application` serializer for those types that
    do not have a defined serializer. This is often described as a `per-model` or `per-type` strategy
    for defining serializers. However, because APIs rarely format payloads per-type but rather
    per-API-version, this may not be a desired strategy.
  
    It is recommended that applications define only a single `application` adapter and serializer
    where possible.
  
    If you have multiple API formats and the per-type strategy is not viable, one strategy is to
    write an `application` adapter and serializer that make use of `options` to specify the desired
    format when making a request.
  
    ### Using a Serializer
  
    Any serializer in `app/serializers/` can be looked up by `name` using `store.serializerFor(name)`.
  
    ### Default Serializers
  
    For applications whose APIs are *very close to* or *exactly* the **REST** format or **JSON:API**
    format the `@ember-data/serializer` package contains implementations these applications can
    extend. It also contains a simple `JSONSerializer` for serializing to/from very basic JSON objects.
  
    Many applications will find writing their own serializer to be more performant and less
    complex than extending these classes even when their API format is very close to that expected
    by these serializers.
  
    It is recommended that apps write their own serializer to best suit the needs of their API and
    application.
  
    @module @ember-data/serializer
    @main @ember-data/serializer
  */
  /**
    `Serializer` is an abstract base class that you should override in your
    application to customize it for your backend. The minimum set of methods
    that you should implement is:
  
      * `normalizeResponse()`
      * `serialize()`
  
    And you can optionally override the following methods:
  
      * `normalize()`
  
    For an example implementation, see
    [JSONSerializer](JSONSerializer), the included JSON serializer.
  
    @class Serializer
    @public
    @extends Ember.EmberObject
  */
  var _default = _exports.default = _object.default.extend({
    /**
      The `store` property is the application's `store` that contains
      all records. It can be used to look up serializers for other model
      types that may be nested inside the payload response.
       Example:
       ```js
      Serializer.extend({
        extractRelationship(relationshipModelName, relationshipHash) {
          let modelClass = this.store.modelFor(relationshipModelName);
          let relationshipSerializer = this.store.serializerFor(relationshipModelName);
          return relationshipSerializer.normalize(modelClass, relationshipHash);
        }
      });
      ```
       @property store
      @type {Store}
      @public
    */

    /**
      The `normalizeResponse` method is used to normalize a payload from the
      server to a JSON-API Document.
       http://jsonapi.org/format/#document-structure
       Example:
       ```js
      Serializer.extend({
        normalizeResponse(store, primaryModelClass, payload, id, requestType) {
          if (requestType === 'findRecord') {
            return this.normalize(primaryModelClass, payload);
          } else {
            return payload.reduce(function(documentHash, item) {
              let { data, included } = this.normalize(primaryModelClass, item);
              documentHash.included.push(...included);
              documentHash.data.push(data);
              return documentHash;
            }, { data: [], included: [] })
          }
        }
      });
      ```
       @since 1.13.0
      @method normalizeResponse
      @public
      @param {Store} store
      @param {Model} primaryModelClass
      @param {Object} payload
      @param {String|Number} id
      @param {String} requestType
      @return {Object} JSON-API Document
    */
    normalizeResponse: null,
    /**
      The `serialize` method is used when a record is saved in order to convert
      the record into the form that your external data source expects.
       `serialize` takes an optional `options` hash with a single option:
       - `includeId`: If this is `true`, `serialize` should include the ID
        in the serialized object it builds.
       Example:
       ```js
      Serializer.extend({
        serialize(snapshot, options) {
          let json = {
            id: snapshot.id
          };
           snapshot.eachAttribute((key, attribute) => {
            json[key] = snapshot.attr(key);
          });
           snapshot.eachRelationship((key, relationship) => {
            if (relationship.kind === 'belongsTo') {
              json[key] = snapshot.belongsTo(key, { id: true });
            } else if (relationship.kind === 'hasMany') {
              json[key] = snapshot.hasMany(key, { ids: true });
            }
          });
           return json;
        },
      });
      ```
       @method serialize
      @public
      @param {Snapshot} snapshot
      @param {Object} [options]
      @return {Object}
    */
    serialize: null,
    /**
      The `normalize` method is used to convert a payload received from your
      external data source into the normalized form `store.push()` expects. You
      should override this method, munge the hash and return the normalized
      payload.
       Example:
       ```js
      Serializer.extend({
        normalize(modelClass, resourceHash) {
          let data = {
            id:            resourceHash.id,
            type:          modelClass.modelName,
            attributes:    resourceHash
          };
          return { data: data };
        }
      })
      ```
       @method normalize
      @public
      @param {Model} typeClass
      @param {Object} hash
      @return {Object}
    */
    normalize(typeClass, hash) {
      return hash;
    }
  });
});
;define("@ember-data/serializer/json-api", ["exports", "@ember/debug", "@ember/string", "@ember/utils", "ember-inflector", "@ember-data/serializer/json", "@ember-data/store"], function (_exports, _debug, _string, _utils, _emberInflector, _json, _store) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"@ember/debug",0,"@ember/string",0,"@ember/utils",0,"@glimmer/env",0,"ember-inflector",0,"@ember-data/serializer/json",0,"@ember-data/store"eaimeta@70e063a35619d71f
  /**
   * @module @ember-data/serializer/json-api
   */
  /**
    Ember Data 2.0 Serializer:
  
    In Ember Data a Serializer is used to serialize and deserialize
    records when they are transferred in and out of an external source.
    This process involves normalizing property names, transforming
    attribute values and serializing relationships.
  
    `JSONAPISerializer` supports the http://jsonapi.org/ spec and is the
    serializer recommended by Ember Data.
  
    This serializer normalizes a JSON API payload that looks like:
  
    ```app/models/player.js
    import Model, { attr, belongsTo } from '@ember-data/model';
  
    export default class Player extends Model {
      @attr('string') name;
      @attr('string') skill;
      @attr('number') gamesPlayed;
      @belongsTo('club') club;
    }
    ```
  
    ```app/models/club.js
    import Model, { attr, hasMany } from '@ember-data/model';
  
    export default class Club extends Model {
      @attr('string') name;
      @attr('string') location;
      @hasMany('player') players;
    }
    ```
  
    ```js
      {
        "data": [
          {
            "attributes": {
              "name": "Benfica",
              "location": "Portugal"
            },
            "id": "1",
            "relationships": {
              "players": {
                "data": [
                  {
                    "id": "3",
                    "type": "players"
                  }
                ]
              }
            },
            "type": "clubs"
          }
        ],
        "included": [
          {
            "attributes": {
              "name": "Eusebio Silva Ferreira",
              "skill": "Rocket shot",
              "games-played": 431
            },
            "id": "3",
            "relationships": {
              "club": {
                "data": {
                  "id": "1",
                  "type": "clubs"
                }
              }
            },
            "type": "players"
          }
        ]
      }
    ```
  
    to the format that the Ember Data store expects.
  
    ### Customizing meta
  
    Since a JSON API Document can have meta defined in multiple locations you can
    use the specific serializer hooks if you need to customize the meta.
  
    One scenario would be to camelCase the meta keys of your payload. The example
    below shows how this could be done using `normalizeArrayResponse` and
    `extractRelationship`.
  
    ```app/serializers/application.js
    import JSONAPISerializer from '@ember-data/serializer/json-api';
  
    export default class ApplicationSerializer extends JSONAPISerializer {
      normalizeArrayResponse(store, primaryModelClass, payload, id, requestType) {
        let normalizedDocument = super.normalizeArrayResponse(...arguments);
  
        // Customize document meta
        normalizedDocument.meta = camelCaseKeys(normalizedDocument.meta);
  
        return normalizedDocument;
      }
  
      extractRelationship(relationshipHash) {
        let normalizedRelationship = super.extractRelationship(...arguments);
  
        // Customize relationship meta
        normalizedRelationship.meta = camelCaseKeys(normalizedRelationship.meta);
  
        return normalizedRelationship;
      }
    }
    ```
  
    @main @ember-data/serializer/json-api
    @since 1.13.0
    @class JSONAPISerializer
    @public
    @extends JSONSerializer
  */
  const JSONAPISerializer = _json.default.extend({
    /**
      @method _normalizeDocumentHelper
      @param {Object} documentHash
      @return {Object}
      @private
    */
    _normalizeDocumentHelper(documentHash) {
      if ((0, _utils.typeOf)(documentHash.data) === 'object') {
        documentHash.data = this._normalizeResourceHelper(documentHash.data);
      } else if (Array.isArray(documentHash.data)) {
        let ret = new Array(documentHash.data.length);
        for (let i = 0; i < documentHash.data.length; i++) {
          let data = documentHash.data[i];
          ret[i] = this._normalizeResourceHelper(data);
        }
        documentHash.data = ret;
      }
      if (Array.isArray(documentHash.included)) {
        let ret = new Array();
        for (let i = 0; i < documentHash.included.length; i++) {
          let included = documentHash.included[i];
          let normalized = this._normalizeResourceHelper(included);
          if (normalized !== null) {
            // can be null when unknown type is encountered
            ret.push(normalized);
          }
        }
        documentHash.included = ret;
      }
      return documentHash;
    },
    /**
      @method _normalizeRelationshipDataHelper
      @param {Object} relationshipDataHash
      @return {Object}
      @private
    */
    _normalizeRelationshipDataHelper(relationshipDataHash) {
      relationshipDataHash.type = this.modelNameFromPayloadKey(relationshipDataHash.type);
      return relationshipDataHash;
    },
    /**
      @method _normalizeResourceHelper
      @param {Object} resourceHash
      @return {Object}
      @private
    */
    _normalizeResourceHelper(resourceHash) {
      (true && !(!(0, _utils.isNone)(resourceHash.type)) && (0, _debug.assert)(this.warnMessageForUndefinedType(), !(0, _utils.isNone)(resourceHash.type), {
        id: 'ds.serializer.type-is-undefined'
      }));
      let modelName, usedLookup;
      modelName = this.modelNameFromPayloadKey(resourceHash.type);
      usedLookup = 'modelNameFromPayloadKey';
      if (!this.store._hasModelFor(modelName)) {
        (true && (0, _debug.warn)(this.warnMessageNoModelForType(modelName, resourceHash.type, usedLookup), false, {
          id: 'ds.serializer.model-for-type-missing'
        }));
        return null;
      }
      let modelClass = this.store.modelFor(modelName);
      let serializer = this.store.serializerFor(modelName);
      let {
        data
      } = serializer.normalize(modelClass, resourceHash);
      return data;
    },
    /**
      Normalize some data and push it into the store.
       @method pushPayload
      @public
      @param {Store} store
      @param {Object} payload
    */
    pushPayload(store, payload) {
      let normalizedPayload = this._normalizeDocumentHelper(payload);
      store.push(normalizedPayload);
    },
    /**
      @method _normalizeResponse
      @param {Store} store
      @param {Model} primaryModelClass
      @param {Object} payload
      @param {String|Number} id
      @param {String} requestType
      @param {Boolean} isSingle
      @return {Object} JSON-API Document
      @private
    */
    _normalizeResponse(store, primaryModelClass, payload, id, requestType, isSingle) {
      let normalizedPayload = this._normalizeDocumentHelper(payload);
      return normalizedPayload;
    },
    normalizeQueryRecordResponse() {
      let normalized = this._super(...arguments);
      (true && !(!Array.isArray(normalized.data)) && (0, _debug.assert)('Expected the primary data returned by the serializer for a `queryRecord` response to be a single object but instead it was an array.', !Array.isArray(normalized.data), {
        id: 'ds.serializer.json-api.queryRecord-array-response'
      }));
      return normalized;
    },
    extractAttributes(modelClass, resourceHash) {
      let attributes = {};
      if (resourceHash.attributes) {
        modelClass.eachAttribute(key => {
          let attributeKey = this.keyForAttribute(key, 'deserialize');
          if (resourceHash.attributes[attributeKey] !== undefined) {
            attributes[key] = resourceHash.attributes[attributeKey];
          }
          if (true /* DEBUG */) {
            if (resourceHash.attributes[attributeKey] === undefined && resourceHash.attributes[key] !== undefined) {
              (true && !(false) && (0, _debug.assert)(`Your payload for '${modelClass.modelName}' contains '${key}', but your serializer is setup to look for '${attributeKey}'. This is most likely because Ember Data's JSON API serializer dasherizes attribute keys by default. You should subclass JSONAPISerializer and implement 'keyForAttribute(key) { return key; }' to prevent Ember Data from customizing your attribute keys.`, false));
            }
          }
        });
      }
      return attributes;
    },
    /**
       Returns a relationship formatted as a JSON-API "relationship object".
        http://jsonapi.org/format/#document-resource-object-relationships
        @method extractRelationship
      @public
       @param {Object} relationshipHash
       @return {Object}
    */
    extractRelationship(relationshipHash) {
      if ((0, _utils.typeOf)(relationshipHash.data) === 'object') {
        relationshipHash.data = this._normalizeRelationshipDataHelper(relationshipHash.data);
      }
      if (Array.isArray(relationshipHash.data)) {
        let ret = new Array(relationshipHash.data.length);
        for (let i = 0; i < relationshipHash.data.length; i++) {
          let data = relationshipHash.data[i];
          ret[i] = this._normalizeRelationshipDataHelper(data);
        }
        relationshipHash.data = ret;
      }
      return relationshipHash;
    },
    /**
       Returns the resource's relationships formatted as a JSON-API "relationships object".
        http://jsonapi.org/format/#document-resource-object-relationships
        @method extractRelationships
      @public
       @param {Object} modelClass
       @param {Object} resourceHash
       @return {Object}
    */
    extractRelationships(modelClass, resourceHash) {
      let relationships = {};
      if (resourceHash.relationships) {
        modelClass.eachRelationship((key, relationshipMeta) => {
          let relationshipKey = this.keyForRelationship(key, relationshipMeta.kind, 'deserialize');
          if (resourceHash.relationships[relationshipKey] !== undefined) {
            let relationshipHash = resourceHash.relationships[relationshipKey];
            relationships[key] = this.extractRelationship(relationshipHash);
          }
          if (true /* DEBUG */) {
            if (resourceHash.relationships[relationshipKey] === undefined && resourceHash.relationships[key] !== undefined) {
              (true && !(false) && (0, _debug.assert)(`Your payload for '${modelClass.modelName}' contains '${key}', but your serializer is setup to look for '${relationshipKey}'. This is most likely because Ember Data's JSON API serializer dasherizes relationship keys by default. You should subclass JSONAPISerializer and implement 'keyForRelationship(key) { return key; }' to prevent Ember Data from customizing your relationship keys.`, false));
            }
          }
        });
      }
      return relationships;
    },
    /**
      @method _extractType
      @param {Model} modelClass
      @param {Object} resourceHash
      @return {String}
      @private
    */
    _extractType(modelClass, resourceHash) {
      return this.modelNameFromPayloadKey(resourceHash.type);
    },
    /**
      Dasherizes and singularizes the model name in the payload to match
      the format Ember Data uses internally for the model name.
       For example the key `posts` would be converted to `post` and the
      key `studentAssesments` would be converted to `student-assesment`.
       @method modelNameFromPayloadKey
      @public
      @param {String} key
      @return {String} the model's modelName
    */
    modelNameFromPayloadKey(key) {
      return (0, _emberInflector.singularize)((0, _store.normalizeModelName)(key));
    },
    /**
      Converts the model name to a pluralized version of the model name.
       For example `post` would be converted to `posts` and
      `student-assesment` would be converted to `student-assesments`.
       @method payloadKeyFromModelName
      @public
      @param {String} modelName
      @return {String}
    */
    // TODO @deprecated Use payloadTypeFromModelName instead
    payloadKeyFromModelName(modelName) {
      return (0, _emberInflector.pluralize)(modelName);
    },
    normalize(modelClass, resourceHash) {
      if (resourceHash.attributes) {
        this.normalizeUsingDeclaredMapping(modelClass, resourceHash.attributes);
      }
      if (resourceHash.relationships) {
        this.normalizeUsingDeclaredMapping(modelClass, resourceHash.relationships);
      }
      let data = {
        id: this.extractId(modelClass, resourceHash),
        type: this._extractType(modelClass, resourceHash),
        attributes: this.extractAttributes(modelClass, resourceHash),
        relationships: this.extractRelationships(modelClass, resourceHash)
      };
      this.applyTransforms(modelClass, data.attributes);
      return {
        data
      };
    },
    /**
      `keyForAttribute` can be used to define rules for how to convert an
      attribute name in your model to a key in your JSON.
      By default `JSONAPISerializer` follows the format used on the examples of
      http://jsonapi.org/format and uses dashes as the word separator in the JSON
      attribute keys.
       This behaviour can be easily customized by extending this method.
       Example
       ```app/serializers/application.js
      import JSONAPISerializer from '@ember-data/serializer/json-api';
      import { dasherize } from '@ember/string';
       export default class ApplicationSerializer extends JSONAPISerializer {
        keyForAttribute(attr, method) {
          return dasherize(attr).toUpperCase();
        }
      }
      ```
       @method keyForAttribute
      @public
      @param {String} key
      @param {String} method
      @return {String} normalized key
    */
    keyForAttribute(key, method) {
      return (0, _string.dasherize)(key);
    },
    /**
     `keyForRelationship` can be used to define a custom key when
     serializing and deserializing relationship properties.
     By default `JSONAPISerializer` follows the format used on the examples of
     http://jsonapi.org/format and uses dashes as word separators in
     relationship properties.
      This behaviour can be easily customized by extending this method.
      Example
       ```app/serializers/post.js
      import JSONAPISerializer from '@ember-data/serializer/json-api';
      import { underscore } from '@ember/string';
       export default class ApplicationSerializer extends JSONAPISerializer {
        keyForRelationship(key, relationship, method) {
          return underscore(key);
        }
      }
      ```
     @method keyForRelationship
      @public
     @param {String} key
     @param {String} typeClass
     @param {String} method
     @return {String} normalized key
    */
    keyForRelationship(key, typeClass, method) {
      return (0, _string.dasherize)(key);
    },
    /**
      Called when a record is saved in order to convert the
      record into JSON.
       For example, consider this model:
       ```app/models/comment.js
      import Model, { attr, belongsTo } from '@ember-data/model';
       export default class CommentModel extends Model {
        @attr title;
        @attr body;
         @belongsTo('user', { async: false, inverse: null })
        author;
      }
      ```
       The default serialization would create a JSON-API resource object like:
       ```javascript
      {
        "data": {
          "type": "comments",
          "attributes": {
            "title": "Rails is unagi",
            "body": "Rails? Omakase? O_O",
          },
          "relationships": {
            "author": {
              "data": {
                "id": "12",
                "type": "users"
              }
            }
          }
        }
      }
      ```
       By default, attributes are passed through as-is, unless
      you specified an attribute type (`attr('date')`). If
      you specify a transform, the JavaScript value will be
      serialized when inserted into the attributes hash.
       Belongs-to relationships are converted into JSON-API
      resource identifier objects.
       ## IDs
       `serialize` takes an options hash with a single option:
      `includeId`. If this option is `true`, `serialize` will,
      by default include the ID in the JSON object it builds.
       The JSONAPIAdapter passes in `includeId: true` when serializing a record
      for `createRecord` or `updateRecord`.
       ## Customization
       Your server may expect data in a different format than the
      built-in serialization format.
       In that case, you can implement `serialize` yourself and
      return data formatted to match your API's expectations, or override
      the invoked adapter method and do the serialization in the adapter directly
      by using the provided snapshot.
      
      If your API's format differs greatly from the JSON:API spec, you should
      consider authoring your own adapter and serializer instead of extending
      this class.
       ```app/serializers/post.js
      import JSONAPISerializer from '@ember-data/serializer/json-api';
       export default class PostSerializer extends JSONAPISerializer {
        serialize(snapshot, options) {
          let json = {
            POST_TTL: snapshot.attr('title'),
            POST_BDY: snapshot.attr('body'),
            POST_CMS: snapshot.hasMany('comments', { ids: true })
          };
           if (options.includeId) {
            json.POST_ID_ = snapshot.id;
          }
           return json;
        }
      }
      ```
       ## Customizing an App-Wide Serializer
       If you want to define a serializer for your entire
      application, you'll probably want to use `eachAttribute`
      and `eachRelationship` on the record.
       ```app/serializers/application.js
      import JSONAPISerializer from '@ember-data/serializer/json-api';
      import { singularize } from 'ember-inflector';
      import { underscore } from '@ember/string';
       export default class ApplicationSerializer extends JSONAPISerializer {
        serialize(snapshot, options) {
          let json = {};
           snapshot.eachAttribute((name) => {
            json[serverAttributeName(name)] = snapshot.attr(name);
          });
           snapshot.eachRelationship((name, relationship) => {
            if (relationship.kind === 'hasMany') {
              json[serverHasManyName(name)] = snapshot.hasMany(name, { ids: true });
            }
          });
           if (options.includeId) {
            json.ID_ = snapshot.id;
          }
           return json;
        }
      }
       function serverAttributeName(attribute) {
        return underscore(attribute).toUpperCase();
      }
       function serverHasManyName(name) {
        return serverAttributeName(singularize(name)) + '_IDS';
      }
      ```
       This serializer will generate JSON that looks like this:
       ```javascript
      {
        "TITLE": "Rails is omakase",
        "BODY": "Yep. Omakase.",
        "COMMENT_IDS": [ "1", "2", "3" ]
      }
      ```
       ## Tweaking the Default Formatting
       If you just want to do some small tweaks on the default JSON:API formatted response,
      you can call `super.serialize` first and make the tweaks
      on the returned object.
       ```app/serializers/post.js
      import JSONAPISerializer from '@ember-data/serializer/json-api';
       export default class PostSerializer extends JSONAPISerializer {
        serialize(snapshot, options) {
          let json = super.serialize(...arguments);
           json.data.attributes.subject = json.data.attributes.title;
          delete json.data.attributes.title;
           return json;
        }
      }
      ```
       @method serialize
      @public
      @param {Snapshot} snapshot
      @param {Object} options
      @return {Object} json
    */
    serialize(snapshot, options) {
      let data = this._super(...arguments);
      data.type = this.payloadKeyFromModelName(snapshot.modelName);
      return {
        data
      };
    },
    serializeAttribute(snapshot, json, key, attribute) {
      let type = attribute.type;
      if (this._canSerialize(key)) {
        json.attributes = json.attributes || {};
        let value = snapshot.attr(key);
        if (type) {
          let transform = this.transformFor(type);
          value = transform.serialize(value, attribute.options);
        }
        let payloadKey = this._getMappedKey(key, snapshot.type);
        if (payloadKey === key) {
          payloadKey = this.keyForAttribute(key, 'serialize');
        }
        json.attributes[payloadKey] = value;
      }
    },
    serializeBelongsTo(snapshot, json, relationship) {
      let key = relationship.key;
      if (this._canSerialize(key)) {
        let belongsTo = snapshot.belongsTo(key);
        let belongsToIsNotNew = belongsTo && !belongsTo.isNew;
        if (belongsTo === null || belongsToIsNotNew) {
          json.relationships = json.relationships || {};
          let payloadKey = this._getMappedKey(key, snapshot.type);
          if (payloadKey === key) {
            payloadKey = this.keyForRelationship(key, 'belongsTo', 'serialize');
          }
          let data = null;
          if (belongsTo) {
            let payloadType = this.payloadKeyFromModelName(belongsTo.modelName);
            data = {
              type: payloadType,
              id: belongsTo.id
            };
          }
          json.relationships[payloadKey] = {
            data
          };
        }
      }
    },
    serializeHasMany(snapshot, json, relationship) {
      let key = relationship.key;
      if (this.shouldSerializeHasMany(snapshot, key, relationship)) {
        let hasMany = snapshot.hasMany(key);
        if (hasMany !== undefined) {
          json.relationships = json.relationships || {};
          let payloadKey = this._getMappedKey(key, snapshot.type);
          if (payloadKey === key && this.keyForRelationship) {
            payloadKey = this.keyForRelationship(key, 'hasMany', 'serialize');
          }

          // only serialize has many relationships that are not new
          let nonNewHasMany = hasMany.filter(item => item.record && !item.record.get('isNew'));
          let data = new Array(nonNewHasMany.length);
          for (let i = 0; i < nonNewHasMany.length; i++) {
            let item = hasMany[i];
            let payloadType = this.payloadKeyFromModelName(item.modelName);
            data[i] = {
              type: payloadType,
              id: item.id
            };
          }
          json.relationships[payloadKey] = {
            data
          };
        }
      }
    }
  });
  if (true /* DEBUG */) {
    JSONAPISerializer.reopen({
      init(...args) {
        this._super(...args);
        (true && !(!this.isEmbeddedRecordsMixin || this.isEmbeddedRecordsMixinCompatible === true) && (0, _debug.assert)(`You've used the EmbeddedRecordsMixin in ${this.toString()} which is not fully compatible with the JSON:API specification. Please confirm that this works for your specific API and add \`this.isEmbeddedRecordsMixinCompatible = true\` to your serializer.`, !this.isEmbeddedRecordsMixin || this.isEmbeddedRecordsMixinCompatible === true, {
          id: 'ds.serializer.embedded-records-mixin-not-supported'
        }));
        let constructor = this.constructor;
        (true && (0, _debug.warn)(`You've defined 'extractMeta' in ${constructor.toString()} which is not used for serializers extending JSONAPISerializer. Read more at https://api.emberjs.com/ember-data/release/classes/JSONAPISerializer on how to customize meta when using JSON API.`, this.extractMeta === _json.default.prototype.extractMeta, {
          id: 'ds.serializer.json-api.extractMeta'
        }));
      },
      warnMessageForUndefinedType() {
        return 'Encountered a resource object with an undefined type (resolved resource using ' + this.constructor.toString() + ')';
      },
      warnMessageNoModelForType(modelName, originalType, usedLookup) {
        return `Encountered a resource object with type "${originalType}", but no model was found for model name "${modelName}" (resolved model name using '${this.constructor.toString()}.${usedLookup}("${originalType}")').`;
      }
    });
  }
  var _default = _exports.default = JSONAPISerializer;
});
;define("@ember-data/serializer/json", ["exports", "@ember/application", "@ember/debug", "@ember/object", "@ember/utils", "@ember-data/serializer", "@ember-data/store", "@ember-data/store/-private", "@ember-data/serializer/-private"], function (_exports, _application, _debug, _object, _utils, _serializer, _store, _private, _private2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"@ember/application",0,"@ember/debug",0,"@ember/object",0,"@ember/utils",0,"@ember-data/serializer",0,"@ember-data/store",0,"@ember-data/store/-private",0,"@ember-data/serializer/-private"eaimeta@70e063a35619d71f
  /**
   * @module @ember-data/serializer/json
   */
  /**
    Ember Data 2.0 Serializer:
  
    In Ember Data a Serializer is used to serialize and deserialize
    records when they are transferred in and out of an external source.
    This process involves normalizing property names, transforming
    attribute values and serializing relationships.
  
    By default, Ember Data uses and recommends the `JSONAPISerializer`.
  
    `JSONSerializer` is useful for simpler or legacy backends that may
    not support the http://jsonapi.org/ spec.
  
    For example, given the following `User` model and JSON payload:
  
    ```app/models/user.js
    import Model, { attr, belongsTo, hasMany } from '@ember-data/model';
  
    export default class UserModel extends Model {
      @hasMany('user') friends;
      @belongsTo('location') house;
  
      @attr('string') name;
    }
    ```
  
    ```js
    {
      id: 1,
      name: 'Sebastian',
      friends: [3, 4],
      links: {
        house: '/houses/lefkada'
      }
    }
    ```
  
    `JSONSerializer` will normalize the JSON payload to the JSON API format that the
    Ember Data store expects.
  
    You can customize how JSONSerializer processes its payload by passing options in
    the `attrs` hash or by subclassing the `JSONSerializer` and overriding hooks:
  
      - To customize how a single record is normalized, use the `normalize` hook.
      - To customize how `JSONSerializer` normalizes the whole server response, use the
        `normalizeResponse` hook.
      - To customize how `JSONSerializer` normalizes a specific response from the server,
        use one of the many specific `normalizeResponse` hooks.
      - To customize how `JSONSerializer` normalizes your id, attributes or relationships,
        use the `extractId`, `extractAttributes` and `extractRelationships` hooks.
  
    The `JSONSerializer` normalization process follows these steps:
  
      1. `normalizeResponse`
          - entry method to the serializer.
      2. `normalizeCreateRecordResponse`
          - a `normalizeResponse` for a specific operation is called.
      3. `normalizeSingleResponse`|`normalizeArrayResponse`
          - for methods like `createRecord` we expect a single record back, while for methods like `findAll` we expect multiple records back.
      4. `normalize`
          - `normalizeArrayResponse` iterates and calls `normalize` for each of its records while `normalizeSingle`
            calls it once. This is the method you most likely want to subclass.
      5. `extractId` | `extractAttributes` | `extractRelationships`
          - `normalize` delegates to these methods to
            turn the record payload into the JSON API format.
  
    @main @ember-data/serializer/json
    @class JSONSerializer
    @public
    @extends Serializer
  */
  const JSONSerializer = _serializer.default.extend({
    /**
      The `primaryKey` is used when serializing and deserializing
      data. Ember Data always uses the `id` property to store the id of
      the record. The external source may not always follow this
      convention. In these cases it is useful to override the
      `primaryKey` property to match the `primaryKey` of your external
      store.
       Example
       ```app/serializers/application.js
      import JSONSerializer from '@ember-data/serializer/json';
       export default class ApplicationSerializer extends JSONSerializer {
        primaryKey = '_id'
      }
      ```
       @property primaryKey
      @type {String}
      @public
      @default 'id'
    */
    primaryKey: 'id',
    /**
      The `attrs` object can be used to declare a simple mapping between
      property names on `Model` records and payload keys in the
      serialized JSON object representing the record. An object with the
      property `key` can also be used to designate the attribute's key on
      the response payload.
       Example
       ```app/models/person.js
      import Model, { attr } from '@ember-data/model';
       export default class PersonModel extends Model {
        @attr('string') firstName;
        @attr('string') lastName;
        @attr('string') occupation;
        @attr('boolean') admin;
      }
      ```
       ```app/serializers/person.js
      import JSONSerializer from '@ember-data/serializer/json';
       export default class PersonSerializer extends JSONSerializer {
        attrs = {
          admin: 'is_admin',
          occupation: { key: 'career' }
        }
      }
      ```
       You can also remove attributes and relationships by setting the `serialize`
      key to `false` in your mapping object.
       Example
       ```app/serializers/person.js
      import JSONSerializer from '@ember-data/serializer/json';
       export default class PostSerializer extends JSONSerializer {
        attrs = {
          admin: { serialize: false },
          occupation: { key: 'career' }
        }
      }
      ```
       When serialized:
       ```javascript
      {
        "firstName": "Harry",
        "lastName": "Houdini",
        "career": "magician"
      }
      ```
       Note that the `admin` is now not included in the payload.
       Setting `serialize` to `true` enforces serialization for hasMany
      relationships even if it's neither a many-to-many nor many-to-none
      relationship.
       @property attrs
      @public
      @type {Object}
    */
    mergedProperties: ['attrs'],
    /**
     Given a subclass of `Model` and a JSON object this method will
     iterate through each attribute of the `Model` and invoke the
     `Transform#deserialize` method on the matching property of the
     JSON object.  This method is typically called after the
     serializer's `normalize` method.
      @method applyTransforms
     @private
     @param {Model} typeClass
     @param {Object} data The data to transform
     @return {Object} data The transformed data object
    */
    applyTransforms(typeClass, data) {
      let attributes = (0, _object.get)(typeClass, 'attributes');
      typeClass.eachTransformedAttribute((key, typeClass) => {
        if (data[key] === undefined) {
          return;
        }
        let transform = this.transformFor(typeClass);
        let transformMeta = attributes.get(key);
        data[key] = transform.deserialize(data[key], transformMeta.options);
      });
      return data;
    },
    /**
      The `normalizeResponse` method is used to normalize a payload from the
      server to a JSON-API Document.
       http://jsonapi.org/format/#document-structure
       This method delegates to a more specific normalize method based on
      the `requestType`.
       To override this method with a custom one, make sure to call
      `return super.normalizeResponse(store, primaryModelClass, payload, id, requestType)` with your
      pre-processed data.
       Here's an example of using `normalizeResponse` manually:
       ```javascript
      socket.on('message', function(message) {
        let data = message.data;
        let modelClass = store.modelFor(data.modelName);
        let serializer = store.serializerFor(data.modelName);
        let normalized = serializer.normalizeSingleResponse(store, modelClass, data, data.id);
         store.push(normalized);
      });
      ```
       @since 1.13.0
      @method normalizeResponse
      @public
      @param {Store} store
      @param {Model} primaryModelClass
      @param {Object} payload
      @param {String|Number} id
      @param {String} requestType
      @return {Object} JSON-API Document
    */
    normalizeResponse(store, primaryModelClass, payload, id, requestType) {
      switch (requestType) {
        case 'findRecord':
          return this.normalizeFindRecordResponse(...arguments);
        case 'queryRecord':
          return this.normalizeQueryRecordResponse(...arguments);
        case 'findAll':
          return this.normalizeFindAllResponse(...arguments);
        case 'findBelongsTo':
          return this.normalizeFindBelongsToResponse(...arguments);
        case 'findHasMany':
          return this.normalizeFindHasManyResponse(...arguments);
        case 'findMany':
          return this.normalizeFindManyResponse(...arguments);
        case 'query':
          return this.normalizeQueryResponse(...arguments);
        case 'createRecord':
          return this.normalizeCreateRecordResponse(...arguments);
        case 'deleteRecord':
          return this.normalizeDeleteRecordResponse(...arguments);
        case 'updateRecord':
          return this.normalizeUpdateRecordResponse(...arguments);
      }
    },
    /**
      Called by the default normalizeResponse implementation when the
      type of request is `findRecord`
       @since 1.13.0
      @method normalizeFindRecordResponse
      @public
      @param {Store} store
      @param {Model} primaryModelClass
      @param {Object} payload
      @param {String|Number} id
      @param {String} requestType
      @return {Object} JSON-API Document
    */
    normalizeFindRecordResponse(store, primaryModelClass, payload, id, requestType) {
      return this.normalizeSingleResponse(...arguments);
    },
    /**
      Called by the default normalizeResponse implementation when the
      type of request is `queryRecord`
       @since 1.13.0
      @method normalizeQueryRecordResponse
      @public
      @param {Store} store
      @param {Model} primaryModelClass
      @param {Object} payload
      @param {String|Number} id
      @param {String} requestType
      @return {Object} JSON-API Document
    */
    normalizeQueryRecordResponse(store, primaryModelClass, payload, id, requestType) {
      return this.normalizeSingleResponse(...arguments);
    },
    /**
      Called by the default normalizeResponse implementation when the
      type of request is `findAll`
       @since 1.13.0
      @method normalizeFindAllResponse
      @public
      @param {Store} store
      @param {Model} primaryModelClass
      @param {Object} payload
      @param {String|Number} id
      @param {String} requestType
      @return {Object} JSON-API Document
    */
    normalizeFindAllResponse(store, primaryModelClass, payload, id, requestType) {
      return this.normalizeArrayResponse(...arguments);
    },
    /**
      Called by the default normalizeResponse implementation when the
      type of request is `findBelongsTo`
       @since 1.13.0
      @method normalizeFindBelongsToResponse
      @public
      @param {Store} store
      @param {Model} primaryModelClass
      @param {Object} payload
      @param {String|Number} id
      @param {String} requestType
      @return {Object} JSON-API Document
    */
    normalizeFindBelongsToResponse(store, primaryModelClass, payload, id, requestType) {
      return this.normalizeSingleResponse(...arguments);
    },
    /**
      Called by the default normalizeResponse implementation when the
      type of request is `findHasMany`
       @since 1.13.0
      @method normalizeFindHasManyResponse
      @public
      @param {Store} store
      @param {Model} primaryModelClass
      @param {Object} payload
      @param {String|Number} id
      @param {String} requestType
      @return {Object} JSON-API Document
    */
    normalizeFindHasManyResponse(store, primaryModelClass, payload, id, requestType) {
      return this.normalizeArrayResponse(...arguments);
    },
    /**
      Called by the default normalizeResponse implementation when the
      type of request is `findMany`
       @since 1.13.0
      @method normalizeFindManyResponse
      @public
      @param {Store} store
      @param {Model} primaryModelClass
      @param {Object} payload
      @param {String|Number} id
      @param {String} requestType
      @return {Object} JSON-API Document
    */
    normalizeFindManyResponse(store, primaryModelClass, payload, id, requestType) {
      return this.normalizeArrayResponse(...arguments);
    },
    /**
      Called by the default normalizeResponse implementation when the
      type of request is `query`
       @since 1.13.0
      @method normalizeQueryResponse
      @public
      @param {Store} store
      @param {Model} primaryModelClass
      @param {Object} payload
      @param {String|Number} id
      @param {String} requestType
      @return {Object} JSON-API Document
    */
    normalizeQueryResponse(store, primaryModelClass, payload, id, requestType) {
      return this.normalizeArrayResponse(...arguments);
    },
    /**
      Called by the default normalizeResponse implementation when the
      type of request is `createRecord`
       @since 1.13.0
      @method normalizeCreateRecordResponse
      @public
      @param {Store} store
      @param {Model} primaryModelClass
      @param {Object} payload
      @param {String|Number} id
      @param {String} requestType
      @return {Object} JSON-API Document
    */
    normalizeCreateRecordResponse(store, primaryModelClass, payload, id, requestType) {
      return this.normalizeSaveResponse(...arguments);
    },
    /**
      Called by the default normalizeResponse implementation when the
      type of request is `deleteRecord`
       @since 1.13.0
      @method normalizeDeleteRecordResponse
      @public
      @param {Store} store
      @param {Model} primaryModelClass
      @param {Object} payload
      @param {String|Number} id
      @param {String} requestType
      @return {Object} JSON-API Document
    */
    normalizeDeleteRecordResponse(store, primaryModelClass, payload, id, requestType) {
      return this.normalizeSaveResponse(...arguments);
    },
    /**
      Called by the default normalizeResponse implementation when the
      type of request is `updateRecord`
       @since 1.13.0
      @method normalizeUpdateRecordResponse
      @public
      @param {Store} store
      @param {Model} primaryModelClass
      @param {Object} payload
      @param {String|Number} id
      @param {String} requestType
      @return {Object} JSON-API Document
    */
    normalizeUpdateRecordResponse(store, primaryModelClass, payload, id, requestType) {
      return this.normalizeSaveResponse(...arguments);
    },
    /**
      normalizeUpdateRecordResponse, normalizeCreateRecordResponse and
      normalizeDeleteRecordResponse delegate to this method by default.
       @since 1.13.0
      @method normalizeSaveResponse
      @public
      @param {Store} store
      @param {Model} primaryModelClass
      @param {Object} payload
      @param {String|Number} id
      @param {String} requestType
      @return {Object} JSON-API Document
    */
    normalizeSaveResponse(store, primaryModelClass, payload, id, requestType) {
      return this.normalizeSingleResponse(...arguments);
    },
    /**
      normalizeQueryResponse and normalizeFindRecordResponse delegate to this
      method by default.
       @since 1.13.0
      @method normalizeSingleResponse
      @public
      @param {Store} store
      @param {Model} primaryModelClass
      @param {Object} payload
      @param {String|Number} id
      @param {String} requestType
      @return {Object} JSON-API Document
    */
    normalizeSingleResponse(store, primaryModelClass, payload, id, requestType) {
      return this._normalizeResponse(store, primaryModelClass, payload, id, requestType, true);
    },
    /**
      normalizeQueryResponse, normalizeFindManyResponse, and normalizeFindHasManyResponse delegate
      to this method by default.
       @since 1.13.0
      @method normalizeArrayResponse
      @public
      @param {Store} store
      @param {Model} primaryModelClass
      @param {Object} payload
      @param {String|Number} id
      @param {String} requestType
      @return {Object} JSON-API Document
    */
    normalizeArrayResponse(store, primaryModelClass, payload, id, requestType) {
      return this._normalizeResponse(store, primaryModelClass, payload, id, requestType, false);
    },
    /**
      @method _normalizeResponse
      @param {Store} store
      @param {Model} primaryModelClass
      @param {Object} payload
      @param {String|Number} id
      @param {String} requestType
      @param {Boolean} isSingle
      @return {Object} JSON-API Document
      @private
    */
    _normalizeResponse(store, primaryModelClass, payload, id, requestType, isSingle) {
      let documentHash = {
        data: null,
        included: []
      };
      let meta = this.extractMeta(store, primaryModelClass, payload);
      if (meta) {
        (true && !((0, _utils.typeOf)(meta) === 'object') && (0, _debug.assert)('The `meta` returned from `extractMeta` has to be an object, not "' + (0, _utils.typeOf)(meta) + '".', (0, _utils.typeOf)(meta) === 'object'));
        documentHash.meta = meta;
      }
      if (isSingle) {
        let {
          data,
          included
        } = this.normalize(primaryModelClass, payload);
        documentHash.data = data;
        if (included) {
          documentHash.included = included;
        }
      } else {
        let ret = new Array(payload.length);
        for (let i = 0, l = payload.length; i < l; i++) {
          let item = payload[i];
          let {
            data,
            included
          } = this.normalize(primaryModelClass, item);
          if (included) {
            documentHash.included = documentHash.included.concat(included);
          }
          ret[i] = data;
        }
        documentHash.data = ret;
      }
      return documentHash;
    },
    /**
      Normalizes a part of the JSON payload returned by
      the server. You should override this method, munge the hash
      and call super if you have generic normalization to do.
       It takes the type of the record that is being normalized
      (as a Model class), the property where the hash was
      originally found, and the hash to normalize.
       You can use this method, for example, to normalize underscored keys to camelized
      or other general-purpose normalizations.
       Example
       ```app/serializers/application.js
      import JSONSerializer from '@ember-data/serializer/json';
      import { underscore } from '@ember/string';
      import { get } from '@ember/object';
       export default class ApplicationSerializer extends JSONSerializer {
        normalize(typeClass, hash) {
          let fields = get(typeClass, 'fields');
           fields.forEach(function(type, field) {
            let payloadField = underscore(field);
            if (field === payloadField) { return; }
             hash[field] = hash[payloadField];
            delete hash[payloadField];
          });
           return super.normalize(...arguments);
        }
      }
      ```
       @method normalize
      @public
      @param {Model} typeClass
      @param {Object} hash
      @return {Object}
    */
    normalize(modelClass, resourceHash) {
      let data = null;
      if (resourceHash) {
        this.normalizeUsingDeclaredMapping(modelClass, resourceHash);
        if ((0, _utils.typeOf)(resourceHash.links) === 'object') {
          this.normalizeUsingDeclaredMapping(modelClass, resourceHash.links);
        }
        data = {
          id: this.extractId(modelClass, resourceHash),
          type: modelClass.modelName,
          attributes: this.extractAttributes(modelClass, resourceHash),
          relationships: this.extractRelationships(modelClass, resourceHash)
        };
        this.applyTransforms(modelClass, data.attributes);
      }
      return {
        data
      };
    },
    /**
      Returns the resource's ID.
       @method extractId
      @public
      @param {Object} modelClass
      @param {Object} resourceHash
      @return {String}
    */
    extractId(modelClass, resourceHash) {
      let primaryKey = (0, _object.get)(this, 'primaryKey');
      let id = resourceHash[primaryKey];
      return (0, _private.coerceId)(id);
    },
    /**
      Returns the resource's attributes formatted as a JSON-API "attributes object".
       http://jsonapi.org/format/#document-resource-object-attributes
       @method extractAttributes
      @public
      @param {Object} modelClass
      @param {Object} resourceHash
      @return {Object}
    */
    extractAttributes(modelClass, resourceHash) {
      let attributeKey;
      let attributes = {};
      modelClass.eachAttribute(key => {
        attributeKey = this.keyForAttribute(key, 'deserialize');
        if (resourceHash[attributeKey] !== undefined) {
          attributes[key] = resourceHash[attributeKey];
        }
      });
      return attributes;
    },
    /**
      Returns a relationship formatted as a JSON-API "relationship object".
       http://jsonapi.org/format/#document-resource-object-relationships
       @method extractRelationship
      @public
      @param {Object} relationshipModelName
      @param {Object} relationshipHash
      @return {Object}
    */
    extractRelationship(relationshipModelName, relationshipHash) {
      if ((0, _utils.isNone)(relationshipHash)) {
        return null;
      }
      /*
        When `relationshipHash` is an object it usually means that the relationship
        is polymorphic. It could however also be embedded resources that the
        EmbeddedRecordsMixin has be able to process.
      */
      if ((0, _utils.typeOf)(relationshipHash) === 'object') {
        if (relationshipHash.id) {
          relationshipHash.id = (0, _private.coerceId)(relationshipHash.id);
        }
        let modelClass = this.store.modelFor(relationshipModelName);
        if (relationshipHash.type && !(0, _private2.modelHasAttributeOrRelationshipNamedType)(modelClass)) {
          relationshipHash.type = this.modelNameFromPayloadKey(relationshipHash.type);
        }
        return relationshipHash;
      }
      return {
        id: (0, _private.coerceId)(relationshipHash),
        type: relationshipModelName
      };
    },
    /**
      Returns a polymorphic relationship formatted as a JSON-API "relationship object".
       http://jsonapi.org/format/#document-resource-object-relationships
       `relationshipOptions` is a hash which contains more information about the
      polymorphic relationship which should be extracted:
        - `resourceHash` complete hash of the resource the relationship should be
          extracted from
        - `relationshipKey` key under which the value for the relationship is
          extracted from the resourceHash
        - `relationshipMeta` meta information about the relationship
       @method extractPolymorphicRelationship
      @public
      @param {Object} relationshipModelName
      @param {Object} relationshipHash
      @param {Object} relationshipOptions
      @return {Object}
    */
    extractPolymorphicRelationship(relationshipModelName, relationshipHash, relationshipOptions) {
      return this.extractRelationship(relationshipModelName, relationshipHash);
    },
    /**
      Returns the resource's relationships formatted as a JSON-API "relationships object".
       http://jsonapi.org/format/#document-resource-object-relationships
       @method extractRelationships
      @public
      @param {Object} modelClass
      @param {Object} resourceHash
      @return {Object}
    */
    extractRelationships(modelClass, resourceHash) {
      let relationships = {};
      modelClass.eachRelationship((key, relationshipMeta) => {
        let relationship = null;
        let relationshipKey = this.keyForRelationship(key, relationshipMeta.kind, 'deserialize');
        if (resourceHash[relationshipKey] !== undefined) {
          let data = null;
          let relationshipHash = resourceHash[relationshipKey];
          if (relationshipMeta.kind === 'belongsTo') {
            if (relationshipMeta.options.polymorphic) {
              // extracting a polymorphic belongsTo may need more information
              // than the type and the hash (which might only be an id) for the
              // relationship, hence we pass the key, resource and
              // relationshipMeta too
              data = this.extractPolymorphicRelationship(relationshipMeta.type, relationshipHash, {
                key,
                resourceHash,
                relationshipMeta
              });
            } else {
              data = this.extractRelationship(relationshipMeta.type, relationshipHash);
            }
          } else if (relationshipMeta.kind === 'hasMany') {
            if (!(0, _utils.isNone)(relationshipHash)) {
              data = new Array(relationshipHash.length);
              if (relationshipMeta.options.polymorphic) {
                for (let i = 0, l = relationshipHash.length; i < l; i++) {
                  let item = relationshipHash[i];
                  data[i] = this.extractPolymorphicRelationship(relationshipMeta.type, item, {
                    key,
                    resourceHash,
                    relationshipMeta
                  });
                }
              } else {
                for (let i = 0, l = relationshipHash.length; i < l; i++) {
                  let item = relationshipHash[i];
                  data[i] = this.extractRelationship(relationshipMeta.type, item);
                }
              }
            }
          }
          relationship = {
            data
          };
        }
        let linkKey = this.keyForLink(key, relationshipMeta.kind);
        if (resourceHash.links && resourceHash.links[linkKey] !== undefined) {
          let related = resourceHash.links[linkKey];
          relationship = relationship || {};
          relationship.links = {
            related
          };
        }
        if (relationship) {
          relationships[key] = relationship;
        }
      });
      return relationships;
    },
    /**
      Dasherizes the model name in the payload
       @method modelNameFromPayloadKey
      @public
      @param {String} key
      @return {String} the model's modelName
    */
    modelNameFromPayloadKey(key) {
      return (0, _store.normalizeModelName)(key);
    },
    /**
      @method normalizeRelationships
      @private
    */
    normalizeRelationships(typeClass, hash) {
      let payloadKey;
      if (this.keyForRelationship) {
        typeClass.eachRelationship((key, relationship) => {
          payloadKey = this.keyForRelationship(key, relationship.kind, 'deserialize');
          if (key === payloadKey) {
            return;
          }
          if (hash[payloadKey] === undefined) {
            return;
          }
          hash[key] = hash[payloadKey];
          delete hash[payloadKey];
        });
      }
    },
    /**
      @method normalizeUsingDeclaredMapping
      @private
    */
    normalizeUsingDeclaredMapping(modelClass, hash) {
      let attrs = (0, _object.get)(this, 'attrs');
      let normalizedKey;
      let payloadKey;
      if (attrs) {
        for (let key in attrs) {
          normalizedKey = payloadKey = this._getMappedKey(key, modelClass);
          if (hash[payloadKey] === undefined) {
            continue;
          }
          if ((0, _object.get)(modelClass, 'attributes').has(key)) {
            normalizedKey = this.keyForAttribute(key);
          }
          if ((0, _object.get)(modelClass, 'relationshipsByName').has(key)) {
            normalizedKey = this.keyForRelationship(key);
          }
          if (payloadKey !== normalizedKey) {
            hash[normalizedKey] = hash[payloadKey];
            delete hash[payloadKey];
          }
        }
      }
    },
    /**
      Looks up the property key that was set by the custom `attr` mapping
      passed to the serializer.
       @method _getMappedKey
      @private
      @param {String} key
      @return {String} key
    */
    _getMappedKey(key, modelClass) {
      (true && (0, _debug.warn)('There is no attribute or relationship with the name `' + key + '` on `' + modelClass.modelName + '`. Check your serializers attrs hash.', (0, _object.get)(modelClass, 'attributes').has(key) || (0, _object.get)(modelClass, 'relationshipsByName').has(key), {
        id: 'ds.serializer.no-mapped-attrs-key'
      }));
      let attrs = (0, _object.get)(this, 'attrs');
      let mappedKey;
      if (attrs && attrs[key]) {
        mappedKey = attrs[key];
        //We need to account for both the { title: 'post_title' } and
        //{ title: { key: 'post_title' }} forms
        if (mappedKey.key) {
          mappedKey = mappedKey.key;
        }
        if (typeof mappedKey === 'string') {
          key = mappedKey;
        }
      }
      return key;
    },
    /**
      Check attrs.key.serialize property to inform if the `key`
      can be serialized
       @method _canSerialize
      @private
      @param {String} key
      @return {boolean} true if the key can be serialized
    */
    _canSerialize(key) {
      let attrs = (0, _object.get)(this, 'attrs');
      return !attrs || !attrs[key] || attrs[key].serialize !== false;
    },
    /**
      When attrs.key.serialize is set to true then
      it takes priority over the other checks and the related
      attribute/relationship will be serialized
       @method _mustSerialize
      @private
      @param {String} key
      @return {boolean} true if the key must be serialized
    */
    _mustSerialize(key) {
      let attrs = (0, _object.get)(this, 'attrs');
      return attrs && attrs[key] && attrs[key].serialize === true;
    },
    /**
      Check if the given hasMany relationship should be serialized
       By default only many-to-many and many-to-none relationships are serialized.
      This could be configured per relationship by Serializer's `attrs` object.
       @method shouldSerializeHasMany
      @public
      @param {Snapshot} snapshot
      @param {String} key
      @param {String} relationshipType
      @return {boolean} true if the hasMany relationship should be serialized
    */
    shouldSerializeHasMany(snapshot, key, relationship) {
      let relationshipType = snapshot.type.determineRelationshipType(relationship, this.store);
      if (this._mustSerialize(key)) {
        return true;
      }
      return this._canSerialize(key) && (relationshipType === 'manyToNone' || relationshipType === 'manyToMany');
    },
    // SERIALIZE
    /**
      Called when a record is saved in order to convert the
      record into JSON.
       By default, it creates a JSON object with a key for
      each attribute and belongsTo relationship.
       For example, consider this model:
       ```app/models/comment.js
      import Model, { attr, belongsTo } from '@ember-data/model';
       export default class CommentModel extends Model {
        @attr title;
        @attr body;
         @belongsTo('user') author;
      }
      ```
       The default serialization would create a JSON object like:
       ```javascript
      {
        "title": "Rails is unagi",
        "body": "Rails? Omakase? O_O",
        "author": 12
      }
      ```
       By default, attributes are passed through as-is, unless
      you specified an attribute type (`attr('date')`). If
      you specify a transform, the JavaScript value will be
      serialized when inserted into the JSON hash.
       By default, belongs-to relationships are converted into
      IDs when inserted into the JSON hash.
       ## IDs
       `serialize` takes an options hash with a single option:
      `includeId`. If this option is `true`, `serialize` will,
      by default include the ID in the JSON object it builds.
       The adapter passes in `includeId: true` when serializing
      a record for `createRecord`, but not for `updateRecord`.
       ## Customization
       Your server may expect a different JSON format than the
      built-in serialization format.
       In that case, you can implement `serialize` yourself and
      return a JSON hash of your choosing.
       ```app/serializers/post.js
      import JSONSerializer from '@ember-data/serializer/json';
       export default class PostSerializer extends JSONSerializer {
        serialize(snapshot, options) {
          let json = {
            POST_TTL: snapshot.attr('title'),
            POST_BDY: snapshot.attr('body'),
            POST_CMS: snapshot.hasMany('comments', { ids: true })
          };
           if (options.includeId) {
            json.POST_ID_ = snapshot.id;
          }
           return json;
        }
      }
      ```
       ## Customizing an App-Wide Serializer
       If you want to define a serializer for your entire
      application, you'll probably want to use `eachAttribute`
      and `eachRelationship` on the record.
       ```app/serializers/application.js
      import JSONSerializer from '@ember-data/serializer/json';
      import { singularize } from 'ember-inflector';
       export default class ApplicationSerializer extends JSONSerializer {
        serialize(snapshot, options) {
          let json = {};
           snapshot.eachAttribute((name) => {
            json[serverAttributeName(name)] = snapshot.attr(name);
          });
           snapshot.eachRelationship((name, relationship) => {
            if (relationship.kind === 'hasMany') {
              json[serverHasManyName(name)] = snapshot.hasMany(name, { ids: true });
            }
          });
           if (options.includeId) {
            json.ID_ = snapshot.id;
          }
           return json;
        }
      }
       function serverAttributeName(attribute) {
        return attribute.underscore().toUpperCase();
      }
       function serverHasManyName(name) {
        return serverAttributeName(singularize(name)) + "_IDS";
      }
      ```
       This serializer will generate JSON that looks like this:
       ```javascript
      {
        "TITLE": "Rails is omakase",
        "BODY": "Yep. Omakase.",
        "COMMENT_IDS": [ "1", "2", "3" ]
      }
      ```
       ## Tweaking the Default JSON
       If you just want to do some small tweaks on the default JSON,
      you can call `super.serialize` first and make the tweaks on
      the returned JSON.
       ```app/serializers/post.js
      import JSONSerializer from '@ember-data/serializer/json';
       export default class PostSerializer extends JSONSerializer {
        serialize(snapshot, options) {
          let json = super.serialize(...arguments);
           json.subject = json.title;
          delete json.title;
           return json;
        }
      }
      ```
       @method serialize
      @public
      @param {Snapshot} snapshot
      @param {Object} options
      @return {Object} json
    */
    serialize(snapshot, options) {
      let json = {};
      if (options && options.includeId) {
        const id = snapshot.id;
        if (id) {
          json[(0, _object.get)(this, 'primaryKey')] = id;
        }
      }
      snapshot.eachAttribute((key, attribute) => {
        this.serializeAttribute(snapshot, json, key, attribute);
      });
      snapshot.eachRelationship((key, relationship) => {
        if (relationship.kind === 'belongsTo') {
          this.serializeBelongsTo(snapshot, json, relationship);
        } else if (relationship.kind === 'hasMany') {
          this.serializeHasMany(snapshot, json, relationship);
        }
      });
      return json;
    },
    /**
      You can use this method to customize how a serialized record is added to the complete
      JSON hash to be sent to the server. By default the JSON Serializer does not namespace
      the payload and just sends the raw serialized JSON object.
      If your server expects namespaced keys, you should consider using the RESTSerializer.
      Otherwise you can override this method to customize how the record is added to the hash.
      The hash property should be modified by reference.
       For example, your server may expect underscored root objects.
       ```app/serializers/application.js
      import RESTSerializer from '@ember-data/serializer/rest';
      import { decamelize } from '@ember/string';
       export default class ApplicationSerializer extends RESTSerializer {
        serializeIntoHash(data, type, snapshot, options) {
          let root = decamelize(type.modelName);
          data[root] = this.serialize(snapshot, options);
        }
      }
      ```
       @method serializeIntoHash
      @public
      @param {Object} hash
      @param {Model} typeClass
      @param {Snapshot} snapshot
      @param {Object} options
    */
    serializeIntoHash(hash, typeClass, snapshot, options) {
      Object.assign(hash, this.serialize(snapshot, options));
    },
    /**
      `serializeAttribute` can be used to customize how `attr`
      properties are serialized
       For example if you wanted to ensure all your attributes were always
      serialized as properties on an `attributes` object you could
      write:
       ```app/serializers/application.js
      import JSONSerializer from '@ember-data/serializer/json';
       export default class ApplicationSerializer extends JSONSerializer {
        serializeAttribute(snapshot, json, key, attributes) {
          json.attributes = json.attributes || {};
          super.serializeAttribute(snapshot, json.attributes, key, attributes);
        }
      }
      ```
       @method serializeAttribute
      @public
      @param {Snapshot} snapshot
      @param {Object} json
      @param {String} key
      @param {Object} attribute
    */
    serializeAttribute(snapshot, json, key, attribute) {
      if (this._canSerialize(key)) {
        let type = attribute.type;
        let value = snapshot.attr(key);
        if (type) {
          let transform = this.transformFor(type);
          value = transform.serialize(value, attribute.options);
        }

        // if provided, use the mapping provided by `attrs` in
        // the serializer
        let payloadKey = this._getMappedKey(key, snapshot.type);
        if (payloadKey === key && this.keyForAttribute) {
          payloadKey = this.keyForAttribute(key, 'serialize');
        }
        json[payloadKey] = value;
      }
    },
    /**
      `serializeBelongsTo` can be used to customize how `belongsTo`
      properties are serialized.
       Example
       ```app/serializers/post.js
      import JSONSerializer from '@ember-data/serializer/json';
      import { isNone } from '@ember/utils';
       export default class PostSerializer extends JSONSerializer {
        serializeBelongsTo(snapshot, json, relationship) {
          let key = relationship.key;
          let belongsTo = snapshot.belongsTo(key);
           key = this.keyForRelationship ? this.keyForRelationship(key, "belongsTo", "serialize") : key;
           json[key] = isNone(belongsTo) ? belongsTo : belongsTo.record.toJSON();
        }
      }
      ```
       @method serializeBelongsTo
      @public
      @param {Snapshot} snapshot
      @param {Object} json
      @param {Object} relationship
    */
    serializeBelongsTo(snapshot, json, relationship) {
      let key = relationship.key;
      if (this._canSerialize(key)) {
        let belongsToId = snapshot.belongsTo(key, {
          id: true
        });

        // if provided, use the mapping provided by `attrs` in
        // the serializer
        let payloadKey = this._getMappedKey(key, snapshot.type);
        if (payloadKey === key && this.keyForRelationship) {
          payloadKey = this.keyForRelationship(key, 'belongsTo', 'serialize');
        }

        //Need to check whether the id is there for new&async records
        if ((0, _utils.isNone)(belongsToId)) {
          json[payloadKey] = null;
        } else {
          json[payloadKey] = belongsToId;
        }
        if (relationship.options.polymorphic) {
          this.serializePolymorphicType(snapshot, json, relationship);
        }
      }
    },
    /**
     `serializeHasMany` can be used to customize how `hasMany`
     properties are serialized.
      Example
      ```app/serializers/post.js
     import JSONSerializer from '@ember-data/serializer/json';
      export default class PostSerializer extends JSONSerializer {
       serializeHasMany(snapshot, json, relationship) {
         let key = relationship.key;
         if (key === 'comments') {
           return;
         } else {
           super.serializeHasMany(...arguments);
         }
       }
     }
     ```
      @method serializeHasMany
      @public
     @param {Snapshot} snapshot
     @param {Object} json
     @param {Object} relationship
    */
    serializeHasMany(snapshot, json, relationship) {
      let key = relationship.key;
      if (this.shouldSerializeHasMany(snapshot, key, relationship)) {
        let hasMany = snapshot.hasMany(key, {
          ids: true
        });
        if (hasMany !== undefined) {
          // if provided, use the mapping provided by `attrs` in
          // the serializer
          let payloadKey = this._getMappedKey(key, snapshot.type);
          if (payloadKey === key && this.keyForRelationship) {
            payloadKey = this.keyForRelationship(key, 'hasMany', 'serialize');
          }
          json[payloadKey] = hasMany;
          // TODO support for polymorphic manyToNone and manyToMany relationships
        }
      }
    },

    /**
      You can use this method to customize how polymorphic objects are
      serialized. Objects are considered to be polymorphic if
      `{ polymorphic: true }` is pass as the second argument to the
      `belongsTo` function.
       Example
       ```app/serializers/comment.js
      import JSONSerializer from '@ember-data/serializer/json';
      import { isNone } from '@ember/utils';
       export default class CommentSerializer extends JSONSerializer {
        serializePolymorphicType(snapshot, json, relationship) {
          let key = relationship.key;
          let belongsTo = snapshot.belongsTo(key);
           key = this.keyForAttribute ? this.keyForAttribute(key, 'serialize') : key;
           if (isNone(belongsTo)) {
            json[key + '_type'] = null;
          } else {
            json[key + '_type'] = belongsTo.modelName;
          }
        }
      }
      ```
       @method serializePolymorphicType
      @public
      @param {Snapshot} snapshot
      @param {Object} json
      @param {Object} relationship
    */
    serializePolymorphicType() {},
    /**
      `extractMeta` is used to deserialize any meta information in the
      adapter payload. By default Ember Data expects meta information to
      be located on the `meta` property of the payload object.
       Example
       ```app/serializers/post.js
      import JSONSerializer from '@ember-data/serializer/json';
       export default class PostSerializer extends JSONSerializer {
        extractMeta(store, typeClass, payload) {
          if (payload && payload.hasOwnProperty('_pagination')) {
            let meta = payload._pagination;
            delete payload._pagination;
            return meta;
          }
        }
      }
      ```
       @method extractMeta
      @public
      @param {Store} store
      @param {Model} modelClass
      @param {Object} payload
    */
    extractMeta(store, modelClass, payload) {
      if (payload && payload['meta'] !== undefined) {
        let meta = payload.meta;
        delete payload.meta;
        return meta;
      }
    },
    /**
      `extractErrors` is used to extract model errors when a call
      to `Model#save` fails with an `InvalidError`. By default
      Ember Data expects error information to be located on the `errors`
      property of the payload object.
       This serializer expects this `errors` object to be an Array similar
      to the following, compliant with the https://jsonapi.org/format/#errors specification:
       ```js
      {
        "errors": [
          {
            "detail": "This username is already taken!",
            "source": {
              "pointer": "data/attributes/username"
            }
          }, {
            "detail": "Doesn't look like a valid email.",
            "source": {
              "pointer": "data/attributes/email"
            }
          }
        ]
      }
      ```
       The key `detail` provides a textual description of the problem.
      Alternatively, the key `title` can be used for the same purpose.
       The nested keys `source.pointer` detail which specific element
      of the request data was invalid.
       Note that JSON-API also allows for object-level errors to be placed
      in an object with pointer `data`, signifying that the problem
      cannot be traced to a specific attribute:
       ```javascript
      {
        "errors": [
          {
            "detail": "Some generic non property error message",
            "source": {
              "pointer": "data"
            }
          }
        ]
      }
      ```
       When turn into a `Errors` object, you can read these errors
      through the property `base`:
       ```handlebars
      {{#each @model.errors.base as |error|}}
        <div class="error">
          {{error.message}}
        </div>
      {{/each}}
      ```
       Example of alternative implementation, overriding the default
      behavior to deal with a different format of errors:
       ```app/serializers/post.js
      import JSONSerializer from '@ember-data/serializer/json';
       export default class PostSerializer extends JSONSerializer {
        extractErrors(store, typeClass, payload, id) {
          if (payload && typeof payload === 'object' && payload._problems) {
            payload = payload._problems;
            this.normalizeErrors(typeClass, payload);
          }
          return payload;
        }
      }
      ```
       @method extractErrors
      @public
      @param {Store} store
      @param {Model} typeClass
      @param {Object} payload
      @param {(String|Number)} id
      @return {Object} json The deserialized errors
    */
    extractErrors(store, typeClass, payload, id) {
      if (payload && typeof payload === 'object' && payload.errors) {
        payload = (0, _private.errorsArrayToHash)(payload.errors);
        this.normalizeUsingDeclaredMapping(typeClass, payload);
        typeClass.eachAttribute(name => {
          let key = this.keyForAttribute(name, 'deserialize');
          if (key !== name && payload[key] !== undefined) {
            payload[name] = payload[key];
            delete payload[key];
          }
        });
        typeClass.eachRelationship(name => {
          let key = this.keyForRelationship(name, 'deserialize');
          if (key !== name && payload[key] !== undefined) {
            payload[name] = payload[key];
            delete payload[key];
          }
        });
      }
      return payload;
    },
    /**
      `keyForAttribute` can be used to define rules for how to convert an
      attribute name in your model to a key in your JSON.
       Example
       ```app/serializers/application.js
      import JSONSerializer from '@ember-data/serializer/json';
      import { underscore } from '@ember/string';
       export default class ApplicationSerializer extends JSONSerializer {
        keyForAttribute(attr, method) {
          return underscore(attr).toUpperCase();
        }
      }
      ```
       @method keyForAttribute
      @public
      @param {String} key
      @param {String} method
      @return {String} normalized key
    */
    keyForAttribute(key, method) {
      return key;
    },
    /**
      `keyForRelationship` can be used to define a custom key when
      serializing and deserializing relationship properties. By default
      `JSONSerializer` does not provide an implementation of this method.
       Example
         ```app/serializers/post.js
        import JSONSerializer from '@ember-data/serializer/json';
        import { underscore } from '@ember/string';
         export default class PostSerializer extends JSONSerializer {
          keyForRelationship(key, relationship, method) {
            return `rel_${underscore(key)}`;
          }
        }
        ```
       @method keyForRelationship
      @public
      @param {String} key
      @param {String} typeClass
      @param {String} method
      @return {String} normalized key
    */
    keyForRelationship(key, typeClass, method) {
      return key;
    },
    /**
     `keyForLink` can be used to define a custom key when deserializing link
     properties.
      @method keyForLink
      @public
     @param {String} key
     @param {String} kind `belongsTo` or `hasMany`
     @return {String} normalized key
    */
    keyForLink(key, kind) {
      return key;
    },
    // HELPERS

    /**
     @method transformFor
     @private
     @param {String} attributeType
     @param {Boolean} skipAssertion
     @return {Transform} transform
    */
    transformFor(attributeType, skipAssertion) {
      let transform = (0, _application.getOwner)(this).lookup('transform:' + attributeType);
      (true && !(skipAssertion || !!transform) && (0, _debug.assert)(`Unable to find the transform for \`attr('${attributeType}')\``, skipAssertion || !!transform));
      return transform;
    }
  });
  var _default = _exports.default = JSONSerializer;
});
;define("@ember-data/serializer/rest", ["exports", "@ember/array", "@ember/debug", "@ember/string", "@ember/utils", "ember-inflector", "@ember-data/serializer/json", "@ember-data/store", "@ember-data/store/-private", "@ember-data/serializer/-private"], function (_exports, _array, _debug, _string, _utils, _emberInflector, _json, _store, _private, _private2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "EmbeddedRecordsMixin", {
    enumerable: true,
    get: function () {
      return _private2.EmbeddedRecordsMixin;
    }
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"@ember/array",0,"@ember/debug",0,"@ember/string",0,"@ember/utils",0,"@glimmer/env",0,"ember-inflector",0,"@ember-data/serializer/json",0,"@ember-data/store",0,"@ember-data/store/-private",0,"@ember-data/serializer/-private",0,"@ember-data/serializer/-private"eaimeta@70e063a35619d71f
  /**
   * @module @ember-data/serializer/rest
   */
  /**
    Normally, applications will use the `RESTSerializer` by implementing
    the `normalize` method.
  
    This allows you to do whatever kind of munging you need and is
    especially useful if your server is inconsistent and you need to
    do munging differently for many different kinds of responses.
  
    See the `normalize` documentation for more information.
  
    ## Across the Board Normalization
  
    There are also a number of hooks that you might find useful to define
    across-the-board rules for your payload. These rules will be useful
    if your server is consistent, or if you're building an adapter for
    an infrastructure service, like Firebase, and want to encode service
    conventions.
  
    For example, if all of your keys are underscored and all-caps, but
    otherwise consistent with the names you use in your models, you
    can implement across-the-board rules for how to convert an attribute
    name in your model to a key in your JSON.
  
    ```app/serializers/application.js
    import RESTSerializer from '@ember-data/serializer/rest';
    import { underscore } from '@ember/string';
  
    export default class ApplicationSerializer extends RESTSerializer {
      keyForAttribute(attr, method) {
        return underscore(attr).toUpperCase();
      }
    }
    ```
  
    You can also implement `keyForRelationship`, which takes the name
    of the relationship as the first parameter, the kind of
    relationship (`hasMany` or `belongsTo`) as the second parameter, and
    the method (`serialize` or `deserialize`) as the third parameter.
  
    @class RESTSerializer
    @main @ember-data/serializer/rest
    @public
    @extends JSONSerializer
  */
  const RESTSerializer = _json.default.extend({
    /**
     `keyForPolymorphicType` can be used to define a custom key when
     serializing and deserializing a polymorphic type. By default, the
     returned key is `${key}Type`.
      Example
       ```app/serializers/post.js
      import RESTSerializer from '@ember-data/serializer/rest';
       export default class ApplicationSerializer extends RESTSerializer {
        keyForPolymorphicType(key, relationship) {
          let relationshipKey = this.keyForRelationship(key);
           return 'type-' + relationshipKey;
        }
      }
      ```
      @method keyForPolymorphicType
      @public
     @param {String} key
     @param {String} typeClass
     @param {String} method
     @return {String} normalized key
    */
    keyForPolymorphicType(key, typeClass, method) {
      let relationshipKey = this.keyForRelationship(key);
      return `${relationshipKey}Type`;
    },
    /**
      Normalizes a part of the JSON payload returned by
      the server. You should override this method, munge the hash
      and call super if you have generic normalization to do.
       It takes the type of the record that is being normalized
      (as a Model class), the property where the hash was
      originally found, and the hash to normalize.
       For example, if you have a payload that looks like this:
       ```js
      {
        "post": {
          "id": 1,
          "title": "Rails is omakase",
          "comments": [ 1, 2 ]
        },
        "comments": [{
          "id": 1,
          "body": "FIRST"
        }, {
          "id": 2,
          "body": "Rails is unagi"
        }]
      }
      ```
       The `normalize` method will be called three times:
       * With `App.Post`, `"posts"` and `{ id: 1, title: "Rails is omakase", ... }`
      * With `App.Comment`, `"comments"` and `{ id: 1, body: "FIRST" }`
      * With `App.Comment`, `"comments"` and `{ id: 2, body: "Rails is unagi" }`
       You can use this method, for example, to normalize underscored keys to camelized
      or other general-purpose normalizations. You will only need to implement
      `normalize` and manipulate the payload as desired.
       For example, if the `IDs` under `"comments"` are provided as `_id` instead of
      `id`, you can specify how to normalize just the comments:
       ```app/serializers/post.js
      import RESTSerializer from '@ember-data/serializer/rest';
       export default class ApplicationSerializer extends RESTSerializer {
        normalize(model, hash, prop) {
          if (prop === 'comments') {
            hash.id = hash._id;
            delete hash._id;
          }
           return super.normalize(...arguments);
        }
      }
      ```
       On each call to the `normalize` method, the third parameter (`prop`) is always
      one of the keys that were in the original payload or in the result of another
      normalization as `normalizeResponse`.
       @method normalize
      @public
      @param {Model} modelClass
      @param {Object} resourceHash
      @param {String} prop
      @return {Object}
    */

    /**
      Normalizes an array of resource payloads and returns a JSON-API Document
      with primary data and, if any, included data as `{ data, included }`.
       @method _normalizeArray
      @param {Store} store
      @param {String} modelName
      @param {Object} arrayHash
      @param {String} prop
      @return {Object}
      @private
    */
    _normalizeArray(store, modelName, arrayHash, prop) {
      let documentHash = {
        data: [],
        included: []
      };
      let modelClass = store.modelFor(modelName);
      let serializer = store.serializerFor(modelName);
      (0, _array.makeArray)(arrayHash).forEach(hash => {
        let {
          data,
          included
        } = this._normalizePolymorphicRecord(store, hash, prop, modelClass, serializer);
        documentHash.data.push(data);
        if (included) {
          documentHash.included = documentHash.included.concat(included);
        }
      });
      return documentHash;
    },
    _normalizePolymorphicRecord(store, hash, prop, primaryModelClass, primarySerializer) {
      let serializer = primarySerializer;
      let modelClass = primaryModelClass;
      let primaryHasTypeAttribute = (0, _private2.modelHasAttributeOrRelationshipNamedType)(primaryModelClass);
      if (!primaryHasTypeAttribute && hash.type) {
        // Support polymorphic records in async relationships
        let modelName = this.modelNameFromPayloadKey(hash.type);
        if (store._hasModelFor(modelName)) {
          serializer = store.serializerFor(modelName);
          modelClass = store.modelFor(modelName);
        }
      }
      return serializer.normalize(modelClass, hash, prop);
    },
    /**
      @method _normalizeResponse
      @param {Store} store
      @param {Model} primaryModelClass
      @param {Object} payload
      @param {String|Number} id
      @param {String} requestType
      @param {Boolean} isSingle
      @return {Object} JSON-API Document
      @private
    */
    _normalizeResponse(store, primaryModelClass, payload, id, requestType, isSingle) {
      let documentHash = {
        data: null,
        included: []
      };
      let meta = this.extractMeta(store, primaryModelClass, payload);
      if (meta) {
        (true && !((0, _utils.typeOf)(meta) === 'object') && (0, _debug.assert)('The `meta` returned from `extractMeta` has to be an object, not "' + (0, _utils.typeOf)(meta) + '".', (0, _utils.typeOf)(meta) === 'object'));
        documentHash.meta = meta;
      }
      let keys = Object.keys(payload);
      for (var i = 0, length = keys.length; i < length; i++) {
        var prop = keys[i];
        var modelName = prop;
        var forcedSecondary = false;

        /*
          If you want to provide sideloaded records of the same type that the
          primary data you can do that by prefixing the key with `_`.
           Example
           ```
          {
            users: [
              { id: 1, title: 'Tom', manager: 3 },
              { id: 2, title: 'Yehuda', manager: 3 }
            ],
            _users: [
              { id: 3, title: 'Tomster' }
            ]
          }
          ```
           This forces `_users` to be added to `included` instead of `data`.
         */
        if (prop.charAt(0) === '_') {
          forcedSecondary = true;
          modelName = prop.substr(1);
        }
        var typeName = this.modelNameFromPayloadKey(modelName);
        if (!store._hasModelFor(typeName)) {
          (true && (0, _debug.warn)(this.warnMessageNoModelForKey(modelName, typeName), false, {
            id: 'ds.serializer.model-for-key-missing'
          }));
          continue;
        }
        var isPrimary = !forcedSecondary && this.isPrimaryType(store, typeName, primaryModelClass);
        var value = payload[prop];
        if (value === null) {
          continue;
        }
        (true && !(!(requestType === 'queryRecord' && isPrimary && Array.isArray(value))) && (0, _debug.assert)('The adapter returned an array for the primary data of a `queryRecord` response. `queryRecord` should return a single record.', !(requestType === 'queryRecord' && isPrimary && Array.isArray(value))));
        /*
          Support primary data as an object instead of an array.
           Example
           ```
          {
            user: { id: 1, title: 'Tom', manager: 3 }
          }
          ```
         */
        if (isPrimary && !Array.isArray(value)) {
          let {
            data,
            included
          } = this._normalizePolymorphicRecord(store, value, prop, primaryModelClass, this);
          documentHash.data = data;
          if (included) {
            documentHash.included = documentHash.included.concat(included);
          }
          continue;
        }
        let {
          data,
          included
        } = this._normalizeArray(store, typeName, value, prop);
        if (included) {
          documentHash.included = documentHash.included.concat(included);
        }
        if (isSingle) {
          data.forEach(resource => {
            /*
              Figures out if this is the primary record or not.
               It's either:
               1. The record with the same ID as the original request
              2. If it's a newly created record without an ID, the first record
                 in the array
             */
            let isUpdatedRecord = isPrimary && (0, _private.coerceId)(resource.id) === id;
            let isFirstCreatedRecord = isPrimary && !id && !documentHash.data;
            if (isFirstCreatedRecord || isUpdatedRecord) {
              documentHash.data = resource;
            } else {
              documentHash.included.push(resource);
            }
          });
        } else {
          if (isPrimary) {
            documentHash.data = data;
          } else {
            if (data) {
              documentHash.included = documentHash.included.concat(data);
            }
          }
        }
      }
      return documentHash;
    },
    isPrimaryType(store, modelName, primaryModelClass) {
      return (0, _store.normalizeModelName)(modelName) === primaryModelClass.modelName;
    },
    /**
      This method allows you to push a payload containing top-level
      collections of records organized per type.
       ```js
      {
        "posts": [{
          "id": "1",
          "title": "Rails is omakase",
          "author", "1",
          "comments": [ "1" ]
        }],
        "comments": [{
          "id": "1",
          "body": "FIRST"
        }],
        "users": [{
          "id": "1",
          "name": "@d2h"
        }]
      }
      ```
       It will first normalize the payload, so you can use this to push
      in data streaming in from your server structured the same way
      that fetches and saves are structured.
       @method pushPayload
      @public
      @param {Store} store
      @param {Object} payload
    */
    pushPayload(store, payload) {
      let documentHash = {
        data: [],
        included: []
      };
      for (var prop in payload) {
        var modelName = this.modelNameFromPayloadKey(prop);
        if (!store._hasModelFor(modelName)) {
          (true && (0, _debug.warn)(this.warnMessageNoModelForKey(prop, modelName), false, {
            id: 'ds.serializer.model-for-key-missing'
          }));
          continue;
        }
        var type = store.modelFor(modelName);
        var typeSerializer = store.serializerFor(type.modelName);
        (0, _array.makeArray)(payload[prop]).forEach(hash => {
          let {
            data,
            included
          } = typeSerializer.normalize(type, hash, prop);
          documentHash.data.push(data);
          if (included) {
            documentHash.included = documentHash.included.concat(included);
          }
        });
      }
      store.push(documentHash);
    },
    /**
      This method is used to convert each JSON root key in the payload
      into a modelName that it can use to look up the appropriate model for
      that part of the payload.
       For example, your server may send a model name that does not correspond with
      the name of the model in your app. Let's take a look at an example model,
      and an example payload:
       ```app/models/post.js
      import Model from '@ember-data/model';
       export default class Post extends Model {}
      ```
       ```javascript
        {
          "blog/post": {
            "id": "1
          }
        }
      ```
       Ember Data is going to normalize the payload's root key for the modelName. As a result,
      it will try to look up the "blog/post" model. Since we don't have a model called "blog/post"
      (or a file called app/models/blog/post.js in ember-cli), Ember Data will throw an error
      because it cannot find the "blog/post" model.
       Since we want to remove this namespace, we can define a serializer for the application that will
      remove "blog/" from the payload key whenver it's encountered by Ember Data:
       ```app/serializers/application.js
      import RESTSerializer from '@ember-data/serializer/rest';
       export default class ApplicationSerializer extends RESTSerializer {
        modelNameFromPayloadKey(payloadKey) {
          if (payloadKey === 'blog/post') {
            return super.modelNameFromPayloadKey(payloadKey.replace('blog/', ''));
          } else {
           return super.modelNameFromPayloadKey(payloadKey);
          }
        }
      }
      ```
       After refreshing, Ember Data will appropriately look up the "post" model.
       By default the modelName for a model is its
      name in dasherized form. This means that a payload key like "blogPost" would be
      normalized to "blog-post" when Ember Data looks up the model. Usually, Ember Data
      can use the correct inflection to do this for you. Most of the time, you won't
      need to override `modelNameFromPayloadKey` for this purpose.
       @method modelNameFromPayloadKey
      @public
      @param {String} key
      @return {String} the model's modelName
    */
    modelNameFromPayloadKey(key) {
      return (0, _emberInflector.singularize)((0, _store.normalizeModelName)(key));
    },
    // SERIALIZE

    /**
      Called when a record is saved in order to convert the
      record into JSON.
       By default, it creates a JSON object with a key for
      each attribute and belongsTo relationship.
       For example, consider this model:
       ```app/models/comment.js
      import Model, { attr, belongsTo } from '@ember-data/model';
       export default class Comment extends Model {
        @attr title
        @attr body
         @belongsTo('user') author
      }
      ```
       The default serialization would create a JSON object like:
       ```js
      {
        "title": "Rails is unagi",
        "body": "Rails? Omakase? O_O",
        "author": 12
      }
      ```
       By default, attributes are passed through as-is, unless
      you specified an attribute type (`attr('date')`). If
      you specify a transform, the JavaScript value will be
      serialized when inserted into the JSON hash.
       By default, belongs-to relationships are converted into
      IDs when inserted into the JSON hash.
       ## IDs
       `serialize` takes an options hash with a single option:
      `includeId`. If this option is `true`, `serialize` will,
      by default include the ID in the JSON object it builds.
       The adapter passes in `includeId: true` when serializing
      a record for `createRecord`, but not for `updateRecord`.
       ## Customization
       Your server may expect a different JSON format than the
      built-in serialization format.
       In that case, you can implement `serialize` yourself and
      return a JSON hash of your choosing.
       ```app/serializers/post.js
      import RESTSerializer from '@ember-data/serializer/rest';
       export default class ApplicationSerializer extends RESTSerializer {
        serialize(snapshot, options) {
          let json = {
            POST_TTL: snapshot.attr('title'),
            POST_BDY: snapshot.attr('body'),
            POST_CMS: snapshot.hasMany('comments', { ids: true })
          };
           if (options.includeId) {
            json.POST_ID_ = snapshot.id;
          }
           return json;
        }
      }
      ```
       ## Customizing an App-Wide Serializer
       If you want to define a serializer for your entire
      application, you'll probably want to use `eachAttribute`
      and `eachRelationship` on the record.
       ```app/serializers/application.js
      import RESTSerializer from '@ember-data/serializer/rest';
      import { pluralize } from 'ember-inflector';
       export default class ApplicationSerializer extends RESTSerializer {
        serialize(snapshot, options) {
          let json = {};
           snapshot.eachAttribute(function(name) {
            json[serverAttributeName(name)] = snapshot.attr(name);
          });
           snapshot.eachRelationship(function(name, relationship) {
            if (relationship.kind === 'hasMany') {
              json[serverHasManyName(name)] = snapshot.hasMany(name, { ids: true });
            }
          });
           if (options.includeId) {
            json.ID_ = snapshot.id;
          }
           return json;
        }
      }
       function serverAttributeName(attribute) {
        return attribute.underscore().toUpperCase();
      }
       function serverHasManyName(name) {
        return serverAttributeName(singularize(name)) + "_IDS";
      }
      ```
       This serializer will generate JSON that looks like this:
       ```js
      {
        "TITLE": "Rails is omakase",
        "BODY": "Yep. Omakase.",
        "COMMENT_IDS": [ 1, 2, 3 ]
      }
      ```
       ## Tweaking the Default JSON
       If you just want to do some small tweaks on the default JSON,
      you can call super first and make the tweaks on the returned
      JSON.
       ```app/serializers/post.js
      import RESTSerializer from '@ember-data/serializer/rest';
       export default class ApplicationSerializer extends RESTSerializer {
        serialize(snapshot, options) {
          let json = super.serialize(snapshot, options);
           json.subject = json.title;
          delete json.title;
           return json;
        }
      }
      ```
       @method serialize
      @public
      @param {Snapshot} snapshot
      @param {Object} options
      @return {Object} json
    */
    serialize(snapshot, options) {
      return this._super(...arguments);
    },
    /**
      You can use this method to customize the root keys serialized into the JSON.
      The hash property should be modified by reference (possibly using something like _.extend)
      By default the REST Serializer sends the modelName of a model, which is a camelized
      version of the name.
       For example, your server may expect underscored root objects.
       ```app/serializers/application.js
      import RESTSerializer from '@ember-data/serializer/rest';
      import { decamelize } from '@ember/string';
       export default class ApplicationSerializer extends RESTSerializer {
        serializeIntoHash(data, type, record, options) {
          let root = decamelize(type.modelName);
          data[root] = this.serialize(record, options);
        }
      }
      ```
       @method serializeIntoHash
      @public
      @param {Object} hash
      @param {Model} typeClass
      @param {Snapshot} snapshot
      @param {Object} options
    */
    serializeIntoHash(hash, typeClass, snapshot, options) {
      let normalizedRootKey = this.payloadKeyFromModelName(typeClass.modelName);
      hash[normalizedRootKey] = this.serialize(snapshot, options);
    },
    /**
      You can use `payloadKeyFromModelName` to override the root key for an outgoing
      request. By default, the RESTSerializer returns a camelized version of the
      model's name.
       For a model called TacoParty, its `modelName` would be the string `taco-party`. The RESTSerializer
      will send it to the server with `tacoParty` as the root key in the JSON payload:
       ```js
      {
        "tacoParty": {
          "id": "1",
          "location": "Matthew Beale's House"
        }
      }
      ```
       For example, your server may expect dasherized root objects:
       ```app/serializers/application.js
      import RESTSerializer from '@ember-data/serializer/rest';
      import { dasherize } from '@ember/string';
       export default class ApplicationSerializer extends RESTSerializer {
        payloadKeyFromModelName(modelName) {
          return dasherize(modelName);
        }
      }
      ```
       Given a `TacoParty` model, calling `save` on it would produce an outgoing
      request like:
       ```js
      {
        "taco-party": {
          "id": "1",
          "location": "Matthew Beale's House"
        }
      }
      ```
       @method payloadKeyFromModelName
      @public
      @param {String} modelName
      @return {String}
    */
    payloadKeyFromModelName(modelName) {
      return (0, _string.camelize)(modelName);
    },
    /**
      You can use this method to customize how polymorphic objects are serialized.
      By default the REST Serializer creates the key by appending `Type` to
      the attribute and value from the model's camelcased model name.
       @method serializePolymorphicType
      @public
      @param {Snapshot} snapshot
      @param {Object} json
      @param {Object} relationship
    */
    serializePolymorphicType(snapshot, json, relationship) {
      let key = relationship.key;
      let typeKey = this.keyForPolymorphicType(key, relationship.type, 'serialize');
      let belongsTo = snapshot.belongsTo(key);
      if ((0, _utils.isNone)(belongsTo)) {
        json[typeKey] = null;
      } else {
        json[typeKey] = (0, _string.camelize)(belongsTo.modelName);
      }
    },
    /**
      You can use this method to customize how a polymorphic relationship should
      be extracted.
       @method extractPolymorphicRelationship
      @public
      @param {Object} relationshipType
      @param {Object} relationshipHash
      @param {Object} relationshipOptions
      @return {Object}
     */
    extractPolymorphicRelationship(relationshipType, relationshipHash, relationshipOptions) {
      let {
        key,
        resourceHash,
        relationshipMeta
      } = relationshipOptions;

      // A polymorphic belongsTo relationship can be present in the payload
      // either in the form where the `id` and the `type` are given:
      //
      //   {
      //     message: { id: 1, type: 'post' }
      //   }
      //
      // or by the `id` and a `<relationship>Type` attribute:
      //
      //   {
      //     message: 1,
      //     messageType: 'post'
      //   }
      //
      // The next code checks if the latter case is present and returns the
      // corresponding JSON-API representation. The former case is handled within
      // the base class JSONSerializer.
      let isPolymorphic = relationshipMeta.options.polymorphic;
      let typeProperty = this.keyForPolymorphicType(key, relationshipType, 'deserialize');
      if (isPolymorphic && resourceHash[typeProperty] !== undefined && typeof relationshipHash !== 'object') {
        let type = this.modelNameFromPayloadKey(resourceHash[typeProperty]);
        return {
          id: relationshipHash,
          type: type
        };
      }
      return this._super(...arguments);
    }
  });
  if (true /* DEBUG */) {
    RESTSerializer.reopen({
      warnMessageNoModelForKey(prop, typeKey) {
        return 'Encountered "' + prop + '" in payload, but no model was found for model name "' + typeKey + '" (resolved model name using ' + this.constructor.toString() + '.modelNameFromPayloadKey("' + prop + '"))';
      }
    });
  }
  var _default = _exports.default = RESTSerializer;
});
;define("@ember-data/serializer/transform", ["exports", "@ember-data/serializer/-private"], function (_exports, _private) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"@ember-data/serializer/-private"eaimeta@70e063a35619d71f
  /**
    @module @ember-data/serializer
  */
  var _default = _exports.default = _private.Transform;
});
;define("@ember-data/store/-debug/index", ["exports", "@ember/debug"], function (_exports, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.assertPolymorphicType = void 0;
  0; //eaimeta@70e063a35619d71f0,"@ember/debug",0,"@glimmer/env"eaimeta@70e063a35619d71f
  /*
    Assert that `addedRecord` has a valid type so it can be added to the
    relationship of the `record`.
  
    The assert basically checks if the `addedRecord` can be added to the
    relationship (specified via `relationshipMeta`) of the `record`.
  
    This utility should only be used internally, as both record parameters must
    be an InternalModel and the `relationshipMeta` needs to be the meta
    information about the relationship, retrieved via
    `record.relationshipFor(key)`.
  */
  let assertPolymorphicType = _exports.assertPolymorphicType = void 0;
  if (true /* DEBUG */) {
    let checkPolymorphic = function checkPolymorphic(modelClass, addedModelClass) {
      if (modelClass.__isMixin) {
        return modelClass.__mixin.detect(addedModelClass.PrototypeMixin) ||
        // handle native class extension e.g. `class Post extends Model.extend(Commentable) {}`
        modelClass.__mixin.detect(Object.getPrototypeOf(addedModelClass).PrototypeMixin);
      }
      return addedModelClass.prototype instanceof modelClass || modelClass.detect(addedModelClass);
    };
    _exports.assertPolymorphicType = assertPolymorphicType = function assertPolymorphicType(parentIdentifier, parentDefinition, addedIdentifier, store) {
      store = store._store ? store._store : store; // allow usage with storeWrapper
      let addedModelName = addedIdentifier.type;
      let parentModelName = parentIdentifier.type;
      let key = parentDefinition.key;
      let relationshipModelName = parentDefinition.type;
      let relationshipClass = store.modelFor(relationshipModelName);
      let addedClass = store.modelFor(addedModelName);
      let assertionMessage = `The '${addedModelName}' type does not implement '${relationshipModelName}' and thus cannot be assigned to the '${key}' relationship in '${parentModelName}'. Make it a descendant of '${relationshipModelName}' or use a mixin of the same name.`;
      let isPolymorphic = checkPolymorphic(relationshipClass, addedClass);
      (true && !(isPolymorphic) && (0, _debug.assert)(assertionMessage, isPolymorphic));
    };
  }
});
;define('@ember-data/store/-private', ['exports', '@ember/application', '@ember/debug', '@ember/error', '@ember/utils', '@ember/array', '@ember/object', '@ember/runloop', '@ember/service', '@ember/test', 'ember', 'require', 'rsvp', '@ember/string', '@ember/array/proxy', '@ember/object/computed', '@ember/object/promise-proxy-mixin', '@ember/object/proxy', '@ember/object/compat', '@glimmer/tracking', 'ember-cached-decorator-polyfill', '@ember-data/store/-debug'], (function (exports, application, debug, EmberError, utils, EmberArray, object, runloop, Service, test, Ember, require$1, RSVP, string, ArrayProxy, computed, PromiseProxyMixin, ObjectProxy, compat, tracking, emberCachedDecoratorPolyfill, Debug) { 'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var EmberError__default = /*#__PURE__*/_interopDefaultLegacy(EmberError);
  var EmberArray__default = /*#__PURE__*/_interopDefaultLegacy(EmberArray);
  var Service__default = /*#__PURE__*/_interopDefaultLegacy(Service);
  var Ember__default = /*#__PURE__*/_interopDefaultLegacy(Ember);
  var require__default = /*#__PURE__*/_interopDefaultLegacy(require$1);
  var RSVP__default = /*#__PURE__*/_interopDefaultLegacy(RSVP);
  var ArrayProxy__default = /*#__PURE__*/_interopDefaultLegacy(ArrayProxy);
  var PromiseProxyMixin__default = /*#__PURE__*/_interopDefaultLegacy(PromiseProxyMixin);
  var ObjectProxy__default = /*#__PURE__*/_interopDefaultLegacy(ObjectProxy);

  /**
    @module @ember-data/store
  */

  // Used by the store to normalize IDs entering the store.  Despite the fact
  // that developers may provide IDs as numbers (e.g., `store.findRecord('person', 1)`),
  // it is important that internally we use strings, since IDs may be serialized
  // and lose type information.  For example, Ember's router may put a record's
  // ID into the URL, and if we later try to deserialize that URL and find the
  // corresponding record, we will not know if it is a string or a number.

  function coerceId(id) {
    if (id === null || id === undefined || id === '') {
      return null;
    }
    if (typeof id === 'string') {
      return id;
    }
    if (typeof id === 'symbol') {
      return id.toString();
    }
    return '' + id;
  }
  function ensureStringId(id) {
    let normalized = null;
    if (typeof id === 'string') {
      normalized = id.length > 0 ? id : null;
    } else if (typeof id === 'number' && !isNaN(id)) {
      normalized = '' + id;
    }
    if (normalized === null) {
      throw new Error(`Expected id to be a string or number, received ${String(id)}`);
    }
    return normalized;
  }

  /**
    @module @ember-data/store
  */

  // All modelNames are dasherized internally. Changing this function may
  // require changes to other normalization hooks (such as typeForRoot).

  /**
   This method normalizes a modelName into the format Ember Data uses
   internally by dasherizing it.

    @method normalizeModelName
    @static
    @public
    @for @ember-data/store
    @param {String} modelName
    @return {String} normalizedModelName
  */
  function normalizeModelName(modelName) {
    return string.dasherize(modelName);
  }

  /**
    @module @ember-data/store
  */

  // provided for additional debuggability
  const DEBUG_CLIENT_ORIGINATED = Symbol('record-originated-on-client');
  const DEBUG_IDENTIFIER_BUCKET = Symbol('identifier-bucket');

  /**
   * An Identifier specific to a record which may or may not
   * be present in the cache.
   *
   * The absence of an `id` DOES NOT indicate that this
   * Identifier is for a new client-created record as it
   * may also indicate that it was generated for a secondary
   * index and the primary `id` index is not yet known.
   *
   * @internal
   */

  /**
   * Used when an Identifier is known to be the stable version
   *
   * @internal
   */

  /**
   * Used when a StableRecordIdentifier was not created locally as part
   * of a call to store.createRecord
   *
   * Distinguishing between this Identifier and one for a client created
   * record that was created with an ID is generally speaking not possible
   * at runtime, so anything with an ID typically narrows to this.
   *
   * @internal
   */

  /**
   * Used when a StableRecordIdentifier was created locally
   * (by a call to store.createRecord).
   *
   * It is possible in rare circumstances to have a StableRecordIdentifier
   * that is not for a new record but does not have an ID. This would
   * happen if a user intentionally created one for use with a secondary-index
   * prior to the record having been fully loaded.
   *
   * @internal
   */

  /**
   * A referentially stable object with a unique string (lid) that can be used
   * as a reference to data in the cache.
   *
   * Every record instance has a unique identifier, and identifiers may refer
   * to data that has never been loaded (for instance, in an async relationship).
   *
   * @class StableRecordIdentifier
   * @public
   */

  /**
   * A string representing a unique identity.
   *
   * @property {string} lid
   * @public
   */
  /**
   * the primary resource `type` or `modelName` this identity belongs to.
   *
   * @property {string} type
   * @public
   */
  /**
   * the primary id for the record this identity belongs to. `null`
   * if not yet assigned an id.
   *
   * @property {string | null} id
   * @public
   */
  /**
    Configures how unique identifier lid strings are generated by @ember-data/store.

    This configuration MUST occur prior to the store instance being created.

    Takes a method which can expect to receive various data as its first argument
    and the name of a bucket as its second argument. Currently the second
    argument will always be `record` data should conform to a `json-api`
    `Resource` interface, but will be the normalized json data for a single
    resource that has been given to the store.

    The method must return a unique (to at-least the given bucket) string identifier
    for the given data as a string to be used as the `lid` of an `Identifier` token.

    This method will only be called by either `getOrCreateRecordIdentifier` or
    `createIdentifierForNewRecord` when an identifier for the supplied data
    is not already known via `lid` or `type + id` combo and one needs to be
    generated or retrieved from a proprietary cache.

    `data` will be the same data argument provided to `getOrCreateRecordIdentifier`
    and in the `createIdentifierForNewRecord` case will be an object with
    only `type` as a key.

    ```ts
    import { setIdentifierGenerationMethod } form '@ember-data/store';

    export function initialize(applicationInstance) {
      // note how `count` here is now scoped to the application instance
      // for our generation method by being inside the closure provided
      // by the initialize function
      let count = 0;

      setIdentifierGenerationMethod((resource, bucket) => {
        return resource.lid || `my-key-${count++}`;
      });
    }

    export default {
      name: 'configure-ember-data-identifiers',
      initialize
    };
    ```

    @method setIdentifierGenerationMethod
    @for @ember-data/store
    @param method
    @public
    @static
  */
  /**
   Configure a callback for when the identifier cache encounters new resource
   data for an existing resource.

   This configuration MUST occur prior to the store instance being created.

   ```js
   import { setIdentifierUpdateMethod } from '@ember-data/store';
   ```

   Takes a method which can expect to receive an existing `Identifier` alongside
   some new data to consider as a second argument. This is an opportunity
   for secondary lookup tables and caches associated with the identifier
   to be amended.

   This method is called everytime `updateRecordIdentifier` is called and
    with the same arguments. It provides the opportunity to update secondary
    lookup tables for existing identifiers.

   It will always be called after an identifier created with `createIdentifierForNewRecord`
    has been committed, or after an update to the `record` a `RecordIdentifier`
    is assigned to has been committed. Committed here meaning that the server
    has acknowledged the update (for instance after a call to `.save()`)

   If `id` has not previously existed, it will be assigned to the `Identifier`
    prior to this `UpdateMethod` being called; however, calls to the parent method
    `updateRecordIdentifier` that attempt to change the `id` or calling update
    without providing an `id` when one is missing will throw an error.

    @method setIdentifierUpdateMethod
    @for @ember-data/store
    @param method
    @public
    @static
  */
  /**
   Configure a callback for when the identifier cache is going to release an identifier.

   This configuration MUST occur prior to the store instance being created.

   ```js
   import { setIdentifierForgetMethod } from '@ember-data/store';
   ```

   Takes method which can expect to receive an existing `Identifier` that should be eliminated
   from any secondary lookup tables or caches that the user has populated for it.

    @method setIdentifierForgetMethod
    @for @ember-data/store
    @param method
    @public
    @static
  */
  /**
   Configure a callback for when the identifier cache is being torn down.

   This configuration MUST occur prior to the store instance being created.

   ```js
   import { setIdentifierResetMethod } from '@ember-data/store';
   ```

   Takes a method which can expect to be called when the parent application is destroyed.

   If you have properly used a WeakMap to encapsulate the state of your customization
   to the application instance, you may not need to implement the `resetMethod`.

    @method setIdentifierResetMethod
    @for @ember-data/store
    @param method
    @public
    @static
  */

  /*
    DEBUG only fields. Keeping this in a separate interface
    which Typescript then merges with the class definition allow us to
    have a DEBUG only property without paying the cost of that field being
    present and initialized (usually to void 0) in production.
  */

  /**
   * @class WeakCache
   * @extends WeakMap
   * @internal
   */
  class WeakCache extends WeakMap {
    constructor(_fieldName) {
      super();
      {
        this._fieldName = _fieldName;
        this._symbol = Symbol.for(_fieldName);
      }
    }

    /**
     * Retrieve the value for a key from the WeakCache with the expectation
     * that the key exists. Throws the error generated by _expectMsg in DEBUG if
     * that key does not exist.
     *
     * @method getWithError
     * @param obj
     * @internal
     */
    getWithError(obj) {
      let v = this.get(obj);
      if (v === undefined) {
        throw new Error(this._expectMsg(obj));
      }
      return v;
    }

    /**
     * Retrieve the value for a key from the WeakCache, or generate one
     * using the configured _generator method if no value is yet present.
     *
     * @method lookup
     * @param obj
     * @internal
     */
    lookup(obj) {
      let v = super.get(obj);
      if (v === undefined) {
        v = this._generator(obj);
        super.set(obj, v);
        {
          if (obj[DEBUG_IDENTIFIER_BUCKET] && this._fieldName !== 'identifier-proxy-target') {
            const target = obj[Symbol.for('identifier-proxy-target')];
            target[this._symbol] = v;
          } else {
            obj[this._symbol] = v;
          }
        }
      }
      return v;
    }
  }
  class DebugWeakCache extends WeakCache {
    set(obj, value) {
      if (super.has(obj)) {
        throw new Error(`${Object.prototype.toString.call(obj)} was already assigned a value for ${this._fieldName}`);
      }
      {
        if (obj[DEBUG_IDENTIFIER_BUCKET] && this._fieldName !== 'identifier-proxy-target') {
          const target = obj[Symbol.for('identifier-proxy-target')];
          target[this._symbol] = value;
          // TODO the Proxy check here is entirely for ember-m3
          // as it's attribute access tests fail since the symbol
          // is an unexpected key received by it's proxies.
          // we should address this upstream.
        } else if (obj.constructor?.toString?.() !== 'MegamorphicModel') {
          try {
            obj[this._symbol] = value;
          } catch {
            // some keys are proxies that can't accept symbol values
            // for instance records from ember-m3
          }
        }
      }
      return super.set(obj, value);
    }
  }
  var WeakCache$1 = DebugWeakCache ;

  function isNonEmptyString(str) {
    return typeof str === 'string' && str.length > 0;
  }

  /**
    @module @ember-data/store
  */

  const IDENTIFIERS = new WeakSet();
  function isStableIdentifier(identifier) {
    return IDENTIFIERS.has(identifier);
  }
  function markStableIdentifier(identifier) {
    IDENTIFIERS.add(identifier);
  }
  function unmarkStableIdentifier(identifier) {
    IDENTIFIERS.delete(identifier);
  }

  /**
    @module @ember-data/store
  */

  const CRYPTO = (() => {
    const hasWindow = typeof window !== 'undefined';
    const isFastBoot = typeof FastBoot !== 'undefined';
    if (isFastBoot) {
      return {
        getRandomValues(buffer) {
          try {
            return FastBoot.require('crypto').randomFillSync(buffer);
          } catch (err) {
            throw new Error('Using createRecord in Fastboot requires you to add the "crypto" package to "fastbootDependencies" in your package.json');
          }
        }
      };
    } else if (hasWindow && typeof window.crypto !== 'undefined') {
      return window.crypto;
    } else {
      throw new Error('ember-data: Cannot find a valid way to generate local identifiers');
    }
  })();

  // we might be able to optimize this by requesting more bytes than we need at a time
  function rng() {
    // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
    let rnds8 = new Uint8Array(16);
    return CRYPTO.getRandomValues(rnds8);
  }

  /*
   * Convert array of 16 byte values to UUID string format of the form:
   * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
   */
  const byteToHex = [];
  for (let i = 0; i < 256; ++i) {
    byteToHex[i] = (i + 0x100).toString(16).substr(1);
  }
  function bytesToUuid(buf) {
    let bth = byteToHex;
    // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4
    return [bth[buf[0]], bth[buf[1]], bth[buf[2]], bth[buf[3]], '-', bth[buf[4]], bth[buf[5]], '-', bth[buf[6]], bth[buf[7]], '-', bth[buf[8]], bth[buf[9]], '-', bth[buf[10]], bth[buf[11]], bth[buf[12]], bth[buf[13]], bth[buf[14]], bth[buf[15]]].join('');
  }
  function uuidv4() {
    let rnds = rng();

    // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
    rnds[6] = rnds[6] & 0x0f | 0x40;
    rnds[8] = rnds[8] & 0x3f | 0x80;
    return bytesToUuid(rnds);
  }

  function freeze$1(obj) {
    if (typeof Object.freeze === 'function') {
      return Object.freeze(obj);
    }
    return obj;
  }
  let configuredForgetMethod;
  let configuredGenerationMethod;
  let configuredResetMethod;
  let configuredUpdateMethod;
  function setIdentifierGenerationMethod(method) {
    configuredGenerationMethod = method;
  }
  function setIdentifierUpdateMethod(method) {
    configuredUpdateMethod = method;
  }
  function setIdentifierForgetMethod(method) {
    configuredForgetMethod = method;
  }
  function setIdentifierResetMethod(method) {
    configuredResetMethod = method;
  }
  function defaultGenerationMethod(data, bucket) {
    if ('lid' in data && isNonEmptyString(data.lid)) {
      return data.lid;
    }
    if ('id' in data) {
      let {
        type,
        id
      } = data;
      // TODO: add test for id not a string
      if (isNonEmptyString(coerceId(id))) {
        return `@ember-data:lid-${normalizeModelName(type)}-${id}`;
      }
    }
    return uuidv4();
  }
  function defaultEmptyCallback(...args) {}
  let DEBUG_MAP;
  {
    DEBUG_MAP = new WeakCache$1('identifier-proxy-target');
  }

  /**
   * Each instance of {Store} receives a unique instance of a IdentifierCache.
   *
   * This cache is responsible for assigning or retrieving the unique identify
   * for arbitrary resource data encountered by the store. Data representing
   * a unique resource or record should always be represented by the same
   * identifier.
   *
   * It can be configured by consuming applications.
   *
   * @class IdentifierCache
     @public
   */
  class IdentifierCache {
    constructor() {
      // Typescript still leaks private properties in the final
      // compiled class, so we may want to move these from _underscore
      // to a WeakMap to avoid leaking
      // currently we leak this for test purposes
      this._cache = {
        lids: Object.create(null),
        types: Object.create(null)
      };
      this._generate = void 0;
      this._update = void 0;
      this._forget = void 0;
      this._reset = void 0;
      this._merge = void 0;
      // we cache the user configuredGenerationMethod at init because it must
      // be configured prior and is not allowed to be changed
      this._generate = configuredGenerationMethod || defaultGenerationMethod;
      this._update = configuredUpdateMethod || defaultEmptyCallback;
      this._forget = configuredForgetMethod || defaultEmptyCallback;
      this._reset = configuredResetMethod || defaultEmptyCallback;
      this._merge = defaultEmptyCallback;
    }

    /**
     * Internal hook to allow management of merge conflicts with identifiers.
     *
     * we allow late binding of this private internal merge so that `internalModelFactory`
     * can insert itself here to handle elimination of duplicates
     *
     * @method __configureMerge
     * @private
     */
    __configureMerge(method) {
      this._merge = method || defaultEmptyCallback;
    }

    /**
     * @method _getRecordIdentifier
     * @private
     */

    _getRecordIdentifier(resource, shouldGenerate = false) {
      // short circuit if we're already the stable version
      if (isStableIdentifier(resource)) {
        {
          // TODO should we instead just treat this case as a new generation skipping the short circuit?
          if (!(resource.lid in this._cache.lids) || this._cache.lids[resource.lid] !== resource) {
            throw new Error(`The supplied identifier ${resource} does not belong to this store instance`);
          }
        }
        return resource;
      }
      let lid = coerceId(resource.lid);
      let identifier = lid !== null ? this._cache.lids[lid] : undefined;
      if (identifier !== undefined) {
        return identifier;
      }
      if (shouldGenerate === false) {
        if (!('type' in resource) || !('id' in resource) || !resource.type || !resource.id) {
          return;
        }
      }

      // `type` must always be present
      (!('type' in resource && isNonEmptyString(resource.type)) && debug.assert('resource.type needs to be a string', 'type' in resource && isNonEmptyString(resource.type)));
      let type = resource.type && normalizeModelName(resource.type);
      let id = coerceId(resource.id);
      let keyOptions = getTypeIndex(this._cache.types, type);

      // go straight for the stable RecordIdentifier key'd to `lid`
      if (lid !== null) {
        identifier = keyOptions.lid[lid];
      }

      // we may have not seen this resource before
      // but just in case we check our own secondary lookup (`id`)
      if (identifier === undefined && id !== null) {
        identifier = keyOptions.id[id];
      }
      if (identifier === undefined) {
        // we have definitely not seen this resource before
        // so we allow the user configured `GenerationMethod` to tell us
        let newLid = this._generate(resource, 'record');

        // we do this _even_ when `lid` is present because secondary lookups
        // may need to be populated, but we enforce not giving us something
        // different than expected
        if (lid !== null && newLid !== lid) {
          throw new Error(`You should not change the <lid> of a RecordIdentifier`);
        } else if (lid === null) {
          // allow configuration to tell us that we have
          // seen this `lid` before. E.g. a secondary lookup
          // connects this resource to a previously seen
          // resource.
          identifier = keyOptions.lid[newLid];
        }
        if (shouldGenerate === true) {
          if (identifier === undefined) {
            // if we still don't have an identifier, time to generate one
            identifier = makeStableRecordIdentifier(id, type, newLid, 'record', false);

            // populate our unique table
            {
              // realistically if you hit this it means you changed `type` :/
              // TODO consider how to handle type change assertions more gracefully
              if (identifier.lid in this._cache.lids) {
                throw new Error(`You should not change the <type> of a RecordIdentifier`);
              }
            }
            this._cache.lids[identifier.lid] = identifier;

            // populate our primary lookup table
            // TODO consider having the `lid` cache be
            // one level up
            keyOptions.lid[identifier.lid] = identifier;
            // TODO exists temporarily to support `peekAll`
            // but likely to move
            keyOptions._allIdentifiers.push(identifier);
          }

          // populate our own secondary lookup table
          // even for the "successful" secondary lookup
          // by `_generate()`, since we missed the cache
          // previously
          // we use identifier.id instead of id here
          // because they may not match and we prefer
          // what we've set via resource data
          if (identifier.id !== null) {
            keyOptions.id[identifier.id] = identifier;

            // TODO allow filling out of `id` here
            // for the `username` non-client created
            // case.
          }
        }
      }

      return identifier;
    }

    /**
     * allows us to peek without generating when needed
     * useful for the "create" case when we need to see if
     * we are accidentally overwritting something
     *
     * @method peekRecordIdentifier
     * @param resource
     * @returns {StableRecordIdentifier | undefined}
     * @private
     */
    peekRecordIdentifier(resource) {
      return this._getRecordIdentifier(resource, false);
    }

    /**
      Returns the Identifier for the given Resource, creates one if it does not yet exist.
       Specifically this means that we:
       - validate the `id` `type` and `lid` combo against known identifiers
      - return an object with an `lid` that is stable (repeated calls with the same
        `id` + `type` or `lid` will return the same `lid` value)
      - this referential stability of the object itself is guaranteed
       @method getOrCreateRecordIdentifier
      @param resource
      @returns {StableRecordIdentifier}
      @public
    */
    getOrCreateRecordIdentifier(resource) {
      return this._getRecordIdentifier(resource, true);
    }

    /**
     Returns a new Identifier for the supplied data. Call this method to generate
     an identifier when a new resource is being created local to the client and
     potentially does not have an `id`.
      Delegates generation to the user supplied `GenerateMethod` if one has been provided
     with the signature `generateMethod({ type }, 'record')`.
      @method createIdentifierForNewRecord
     @param data
     @returns {StableRecordIdentifier}
     @public
    */
    createIdentifierForNewRecord(data) {
      let newLid = this._generate(data, 'record');
      let identifier = makeStableRecordIdentifier(data.id || null, data.type, newLid, 'record', true);
      let keyOptions = getTypeIndex(this._cache.types, data.type);

      // populate our unique table
      {
        if (identifier.lid in this._cache.lids) {
          throw new Error(`The lid generated for the new record is not unique as it matches an existing identifier`);
        }
      }
      this._cache.lids[identifier.lid] = identifier;

      // populate the type+lid cache
      keyOptions.lid[newLid] = identifier;
      // ensure a peekAll sees our new identifier too
      // TODO move this outta here?
      keyOptions._allIdentifiers.push(identifier);
      return identifier;
    }

    /**
     Provides the opportunity to update secondary lookup tables for existing identifiers
     Called after an identifier created with `createIdentifierForNewRecord` has been
     committed.
      Assigned `id` to an `Identifier` if `id` has not previously existed; however,
     attempting to change the `id` or calling update without providing an `id` when
     one is missing will throw an error.
       - sets `id` (if `id` was previously `null`)
      - `lid` and `type` MUST NOT be altered post creation
       If a merge occurs, it is possible the returned identifier does not match the originally
      provided identifier. In this case the abandoned identifier will go through the usual
      `forgetRecordIdentifier` codepaths.
       @method updateRecordIdentifier
      @param identifierObject
      @param data
      @returns {StableRecordIdentifier}
      @public
    */
    updateRecordIdentifier(identifierObject, data) {
      let identifier = this.getOrCreateRecordIdentifier(identifierObject);
      let newId = 'id' in data ? coerceId(data.id) : null;
      let existingIdentifier = detectMerge(this._cache.types, identifier, data, newId, this._cache.lids);
      if (!existingIdentifier) {
        // If the incoming type does not match the identifier type, we need to create an identifier for the incoming
        // data so we can merge the incoming data with the existing identifier, see #7325 and #7363
        if ('type' in data && data.type && identifier.type !== normalizeModelName(data.type)) {
          let incomingDataResource = {
            ...data
          };
          // Need to strip the lid from the incomingData in order force a new identifier creation
          delete incomingDataResource.lid;
          existingIdentifier = this.getOrCreateRecordIdentifier(incomingDataResource);
        }
      }
      if (existingIdentifier) {
        let keyOptions = getTypeIndex(this._cache.types, identifier.type);
        identifier = this._mergeRecordIdentifiers(keyOptions, identifier, existingIdentifier, data, newId);
      }
      let id = identifier.id;
      performRecordIdentifierUpdate(identifier, data, this._update);
      newId = identifier.id;

      // add to our own secondary lookup table
      if (id !== newId && newId !== null) {
        let keyOptions = getTypeIndex(this._cache.types, identifier.type);
        keyOptions.id[newId] = identifier;
        if (id !== null) {
          delete keyOptions.id[id];
        }
      }
      return identifier;
    }

    /**
     * @method _mergeRecordIdentifiers
     * @private
     */
    _mergeRecordIdentifiers(keyOptions, identifier, existingIdentifier, data, newId) {
      // delegate determining which identifier to keep to the configured MergeMethod
      let kept = this._merge(identifier, existingIdentifier, data);
      let abandoned = kept === identifier ? existingIdentifier : identifier;

      // cleanup the identifier we no longer need
      this.forgetRecordIdentifier(abandoned);

      // ensure a secondary cache entry for this id for the identifier we do keep
      keyOptions.id[newId] = kept;
      // ensure a secondary cache entry for this id for the abandoned identifier's type we do keep
      let baseKeyOptions = getTypeIndex(this._cache.types, existingIdentifier.type);
      baseKeyOptions.id[newId] = kept;

      // make sure that the `lid` on the data we are processing matches the lid we kept
      data.lid = kept.lid;
      return kept;
    }

    /**
     Provides the opportunity to eliminate an identifier from secondary lookup tables
     as well as eliminates it from ember-data's own lookup tables and book keeping.
      Useful when a record has been deleted and the deletion has been persisted and
     we do not care about the record anymore. Especially useful when an `id` of a
     deleted record might be reused later for a new record.
      @method forgetRecordIdentifier
     @param identifierObject
     @public
    */
    forgetRecordIdentifier(identifierObject) {
      let identifier = this.getOrCreateRecordIdentifier(identifierObject);
      let keyOptions = getTypeIndex(this._cache.types, identifier.type);
      if (identifier.id !== null) {
        delete keyOptions.id[identifier.id];
      }
      delete this._cache.lids[identifier.lid];
      delete keyOptions.lid[identifier.lid];
      let index = keyOptions._allIdentifiers.indexOf(identifier);
      keyOptions._allIdentifiers.splice(index, 1);
      unmarkStableIdentifier(identifierObject);
      this._forget(identifier, 'record');
    }
    destroy() {
      this._reset();
    }
  }
  function getTypeIndex(typeMap, type) {
    let typeIndex = typeMap[type];
    if (typeIndex === undefined) {
      typeIndex = {
        lid: Object.create(null),
        id: Object.create(null),
        _allIdentifiers: []
      };
      typeMap[type] = typeIndex;
    }
    return typeIndex;
  }
  function makeStableRecordIdentifier(id, type, lid, bucket, clientOriginated = false) {
    let recordIdentifier = {
      lid,
      id,
      type
    };
    markStableIdentifier(recordIdentifier);
    {
      // we enforce immutability in dev
      //  but preserve our ability to do controlled updates to the reference
      let wrapper = {
        get lid() {
          return recordIdentifier.lid;
        },
        get id() {
          return recordIdentifier.id;
        },
        get type() {
          return recordIdentifier.type;
        },
        toString() {
          let {
            type,
            id,
            lid
          } = recordIdentifier;
          return `${clientOriginated ? '[CLIENT_ORIGINATED] ' : ''}${type}:${id} (${lid})`;
        }
      };
      wrapper[DEBUG_CLIENT_ORIGINATED] = clientOriginated;
      wrapper[DEBUG_IDENTIFIER_BUCKET] = bucket;
      markStableIdentifier(wrapper);
      DEBUG_MAP.set(wrapper, recordIdentifier);
      wrapper = freeze$1(wrapper);
      return wrapper;
    }
  }
  function performRecordIdentifierUpdate(identifier, data, updateFn) {
    {
      let {
        lid
      } = data;
      let id = 'id' in data ? data.id : undefined;
      let type = 'type' in data && data.type && normalizeModelName(data.type);

      // get the mutable instance behind our proxy wrapper
      let wrapper = identifier;
      identifier = DEBUG_MAP.get(wrapper);
      if (lid !== undefined) {
        let newLid = coerceId(lid);
        if (newLid !== identifier.lid) {
          throw new Error(`The 'lid' for a RecordIdentifier cannot be updated once it has been created. Attempted to set lid for '${wrapper}' to '${lid}'.`);
        }
      }
      if (id !== undefined) {
        let newId = coerceId(id);
        if (identifier.id !== null && identifier.id !== newId) {
          // here we warn and ignore, as this may be a mistake, but we allow the user
          // to have multiple cache-keys pointing at a single lid so we cannot error
          (debug.warn(`The 'id' for a RecordIdentifier should not be updated once it has been set. Attempted to set id for '${wrapper}' to '${newId}'.`, false, {
            id: 'ember-data:multiple-ids-for-identifier'
          }));
        }
      }

      // TODO consider just ignoring here to allow flexible polymorphic support
      if (type && type !== identifier.type) {
        throw new Error(`The 'type' for a RecordIdentifier cannot be updated once it has been set. Attempted to set type for '${wrapper}' to '${type}'.`);
      }
      updateFn(wrapper, data, 'record');
    }

    // upgrade the ID, this is a "one time only" ability
    // for the multiple-cache-key scenario we "could"
    // use a heuristic to guess the best id for display
    // (usually when `data.id` is available and `data.attributes` is not)
    if ('id' in data && data.id !== undefined) {
      identifier.id = coerceId(data.id);
    }
  }
  function detectMerge(typesCache, identifier, data, newId, lids) {
    const {
      id,
      type,
      lid
    } = identifier;
    if (id !== null && id !== newId && newId !== null) {
      let keyOptions = getTypeIndex(typesCache, identifier.type);
      let existingIdentifier = keyOptions.id[newId];
      return existingIdentifier !== undefined ? existingIdentifier : false;
    } else {
      let newType = 'type' in data && data.type && normalizeModelName(data.type);

      // If the ids and type are the same but lid is not the same, we should trigger a merge of the identifiers
      if (id !== null && id === newId && newType === type && data.lid && data.lid !== lid) {
        let existingIdentifier = lids[data.lid];
        return existingIdentifier !== undefined ? existingIdentifier : false;
        // If the lids are the same, and ids are the same, but types are different we should trigger a merge of the identifiers
      } else if (id !== null && id === newId && newType && newType !== type && data.lid && data.lid === lid) {
        let keyOptions = getTypeIndex(typesCache, newType);
        let existingIdentifier = keyOptions.id[id];
        return existingIdentifier !== undefined ? existingIdentifier : false;
      }
    }
    return false;
  }

  function constructResource(type, id, lid) {
    if (typeof type === 'object' && type !== null) {
      let resource = type;
      if (isStableIdentifier(resource)) {
        return resource;
      }
      if ('id' in resource) {
        resource.id = coerceId(resource.id);
      }
      (!('id' in resource && isNonEmptyString(resource.id) || isNonEmptyString(resource.lid)) && debug.assert('Expected either id or lid to be a valid string', 'id' in resource && isNonEmptyString(resource.id) || isNonEmptyString(resource.lid)));
      (!(!('id' in resource) || typeof resource.type === 'string') && debug.assert('if id is present, the type must be a string', !('id' in resource) || typeof resource.type === 'string'));
      return resource;
    } else {
      const trueId = coerceId(id);
      if (!isNonEmptyString(trueId)) {
        if (isNonEmptyString(lid)) {
          return {
            lid
          };
        }
        throw new Error('Expected either id or lid to be a valid string');
      }
      (!(typeof type === 'string') && debug.assert('type must be a string', typeof type === 'string'));
      if (isNonEmptyString(lid)) {
        return {
          type,
          id: trueId,
          lid
        };
      }
      return {
        type,
        id: trueId
      };
    }
  }

  /**
    @module @ember-data/store
  */

  /**
    A `PromiseArray` is an object that acts like both an `Ember.Array`
    and a promise. When the promise is resolved the resulting value
    will be set to the `PromiseArray`'s `content` property. This makes
    it easy to create data bindings with the `PromiseArray` that will be
    updated when the promise resolves.

    This class should not be imported and instantiated directly.

    For more information see the [Ember.PromiseProxyMixin
    documentation](/ember/release/classes/PromiseProxyMixin).

    Example

    ```javascript
    let promiseArray = PromiseArray.create({
      promise: $.getJSON('/some/remote/data.json')
    });

    promiseArray.get('length'); // 0

    promiseArray.then(function() {
      promiseArray.get('length'); // 100
    });
    ```

    @class PromiseArray
    @public
    @extends Ember.ArrayProxy
    @uses Ember.PromiseProxyMixin
  */
  const PromiseArray = ArrayProxy__default["default"].extend(PromiseProxyMixin__default["default"], {
    meta: computed.reads('content.meta')
  });

  /**
    A `PromiseObject` is an object that acts like both an `EmberObject`
    and a promise. When the promise is resolved, then the resulting value
    will be set to the `PromiseObject`'s `content` property. This makes
    it easy to create data bindings with the `PromiseObject` that will
    be updated when the promise resolves.

    This class should not be imported and instantiated directly.

    For more information see the [Ember.PromiseProxyMixin
    documentation](/ember/release/classes/PromiseProxyMixin.html).

    Example

    ```javascript
    let promiseObject = PromiseObject.create({
      promise: $.getJSON('/some/remote/data.json')
    });

    promiseObject.get('name'); // null

    promiseObject.then(function() {
      promiseObject.get('name'); // 'Tomster'
    });
    ```

    @class PromiseObject
    @public
    @extends Ember.ObjectProxy
    @uses Ember.PromiseProxyMixin
  */
  let PromiseObject = ObjectProxy__default["default"].extend(PromiseProxyMixin__default["default"]);
  function promiseObject(promise, label) {
    return PromiseObject.create({
      promise: RSVP.Promise.resolve(promise, label)
    });
  }
  function promiseArray(promise, label) {
    return PromiseArray.create({
      promise: RSVP.Promise.resolve(promise, label)
    });
  }

  // constructor is accessed in some internals but not including it in the copyright for the deprecation
  const ALLOWABLE_METHODS = ['constructor', 'then', 'catch', 'finally'];
  function deprecatedPromiseObject(promise) {
    const handler = {
      get(target, prop) {
        if (!ALLOWABLE_METHODS.includes(prop)) {
          (debug.deprecate(`Accessing ${prop} is deprecated.  Only available methods to access on a promise returned from model.save() are .then, .catch and .finally`, false, {
            id: 'ember-data:model-save-promise',
            until: '5.0',
            for: '@ember-data/store',
            since: {
              available: '4.4',
              enabled: '4.4'
            }
          }));
        }

        /* global Reflect */
        return Reflect.get(...arguments).bind(target);
      }
    };

    /* global Proxy */
    return new Proxy(promise, handler);
  }

  /**
    @module @ember-data/store
  */
  /**
   * Get the materialized model from the internalModel/promise
   * that returns an internal model and return it in a promiseObject.
   *
   * Useful for returning from find methods
   *
   * @internal
   */
  function promiseRecord(internalModelPromise, label) {
    let toReturn = internalModelPromise.then(internalModel => internalModel.getRecord());
    return promiseObject(toReturn, label);
  }

  // TODO: expose Ember._Backburner as `import { _Backburner } from '@ember/runloop'` in ember-rfc176-data + emberjs/ember.js
  /*
    syncRelationships is used by the UI to grab updates from the graph
    and update the ManyArrays.

    We may be able to remove this once the new relationship layer is
    complete.
  */
  const backburner = new Ember__default["default"]._Backburner(['coalesce', 'sync', 'notify']);
  {
    test.registerWaiter(() => {
      return !backburner.currentInstance && !backburner.hasTimers();
    });
  }

  /**
    @module @ember-data/adapter/error
  */

  const SOURCE_POINTER_REGEXP = /^\/?data\/(attributes|relationships)\/(.*)/;
  const SOURCE_POINTER_PRIMARY_REGEXP = /^\/?data/;
  const PRIMARY_ATTRIBUTE_KEY = 'base';

  /**
    Convert an hash of errors into an array with errors in JSON-API format.
     ```javascript
    import DS from 'ember-data';

     const { errorsHashToArray } = DS;
     
     let errors = {
      base: 'Invalid attributes on saving this record',
      name: 'Must be present',
      age: ['Must be present', 'Must be a number']
    };
     let errorsArray = errorsHashToArray(errors);
    // [
    //   {
    //     title: "Invalid Document",
    //     detail: "Invalid attributes on saving this record",
    //     source: { pointer: "/data" }
    //   },
    //   {
    //     title: "Invalid Attribute",
    //     detail: "Must be present",
    //     source: { pointer: "/data/attributes/name" }
    //   },
    //   {
    //     title: "Invalid Attribute",
    //     detail: "Must be present",
    //     source: { pointer: "/data/attributes/age" }
    //   },
    //   {
    //     title: "Invalid Attribute",
    //     detail: "Must be a number",
    //     source: { pointer: "/data/attributes/age" }
    //   }
    // ]
    ```
    @method errorsHashToArray
    @for @ember-data/adapter/error
    @static
    @public
    @param {Object} errors hash with errors as properties
    @return {Array} array of errors in JSON-API format
  */
  function errorsHashToArray(errors) {
    let out = [];
    if (utils.isPresent(errors)) {
      Object.keys(errors).forEach(key => {
        let messages = EmberArray.makeArray(errors[key]);
        for (let i = 0; i < messages.length; i++) {
          let title = 'Invalid Attribute';
          let pointer = `/data/attributes/${key}`;
          if (key === PRIMARY_ATTRIBUTE_KEY) {
            title = 'Invalid Document';
            pointer = `/data`;
          }
          out.push({
            title: title,
            detail: messages[i],
            source: {
              pointer: pointer
            }
          });
        }
      });
    }
    return out;
  }

  /**
    Convert an array of errors in JSON-API format into an object.

    ```javascript
    import DS from 'ember-data';

    const { errorsArrayToHash } = DS;

    let errorsArray = [
      {
        title: 'Invalid Attribute',
        detail: 'Must be present',
        source: { pointer: '/data/attributes/name' }
      },
      {
        title: 'Invalid Attribute',
        detail: 'Must be present',
        source: { pointer: '/data/attributes/age' }
      },
      {
        title: 'Invalid Attribute',
        detail: 'Must be a number',
        source: { pointer: '/data/attributes/age' }
      }
    ];

    let errors = errorsArrayToHash(errorsArray);
    // {
    //   "name": ["Must be present"],
    //   "age":  ["Must be present", "must be a number"]
    // }
    ```

    @method errorsArrayToHash
    @static
    @for @ember-data/adapter/error
    @public
    @param {Array} errors array of errors in JSON-API format
    @return {Object}
  */
  function errorsArrayToHash(errors) {
    let out = {};
    if (utils.isPresent(errors)) {
      errors.forEach(error => {
        if (error.source && error.source.pointer) {
          let key = error.source.pointer.match(SOURCE_POINTER_REGEXP);
          if (key) {
            key = key[2];
          } else if (error.source.pointer.search(SOURCE_POINTER_PRIMARY_REGEXP) !== -1) {
            key = PRIMARY_ATTRIBUTE_KEY;
          }
          if (key) {
            out[key] = out[key] || [];
            out[key].push(error.detail || error.title);
          }
        }
      });
    }
    return out;
  }

  let RequestStateEnum = /*#__PURE__*/function (RequestStateEnum) {
    RequestStateEnum["pending"] = "pending";
    RequestStateEnum["fulfilled"] = "fulfilled";
    RequestStateEnum["rejected"] = "rejected";
    return RequestStateEnum;
  }({});

  const Touching = Symbol('touching');
  const RequestPromise = Symbol('promise');
  function hasRecordIdentifier(op) {
    return 'recordIdentifier' in op;
  }
  class RequestCache {
    constructor() {
      this._pending = Object.create(null);
      this._done = Object.create(null);
      this._subscriptions = Object.create(null);
    }
    enqueue(promise, queryRequest) {
      let query = queryRequest.data[0];
      if (hasRecordIdentifier(query)) {
        let lid = query.recordIdentifier.lid;
        let type = query.op === 'saveRecord' ? 'mutation' : 'query';
        if (!this._pending[lid]) {
          this._pending[lid] = [];
        }
        let request = {
          state: RequestStateEnum.pending,
          request: queryRequest,
          type
        };
        request[Touching] = [query.recordIdentifier];
        request[RequestPromise] = promise;
        this._pending[lid].push(request);
        this._triggerSubscriptions(request);
        promise.then(result => {
          this._dequeue(lid, request);
          let finalizedRequest = {
            state: RequestStateEnum.fulfilled,
            request: queryRequest,
            type,
            response: {
              data: result
            }
          };
          finalizedRequest[Touching] = request[Touching];
          this._addDone(finalizedRequest);
          this._triggerSubscriptions(finalizedRequest);
        }, error => {
          this._dequeue(lid, request);
          let finalizedRequest = {
            state: RequestStateEnum.rejected,
            request: queryRequest,
            type,
            response: {
              data: error && error.error
            }
          };
          finalizedRequest[Touching] = request[Touching];
          this._addDone(finalizedRequest);
          this._triggerSubscriptions(finalizedRequest);
        });
      }
    }
    _triggerSubscriptions(req) {
      req[Touching].forEach(identifier => {
        if (this._subscriptions[identifier.lid]) {
          this._subscriptions[identifier.lid].forEach(callback => callback(req));
        }
      });
    }
    _dequeue(lid, request) {
      this._pending[lid] = this._pending[lid].filter(req => req !== request);
    }
    _addDone(request) {
      request[Touching].forEach(identifier => {
        if (!this._done[identifier.lid]) {
          this._done[identifier.lid] = [];
        }
        // TODO add support for multiple
        let requestDataOp = request.request.data[0].op;
        this._done[identifier.lid] = this._done[identifier.lid].filter(req => {
          // TODO add support for multiple
          let data;
          if (req.request.data instanceof Array) {
            data = req.request.data[0];
          } else {
            data = req.request.data;
          }
          return data.op !== requestDataOp;
        });
        this._done[identifier.lid].push(request);
      });
    }
    subscribeForRecord(identifier, callback) {
      if (!this._subscriptions[identifier.lid]) {
        this._subscriptions[identifier.lid] = [];
      }
      this._subscriptions[identifier.lid].push(callback);
    }
    getPendingRequestsForRecord(identifier) {
      if (this._pending[identifier.lid]) {
        return this._pending[identifier.lid];
      }
      return [];
    }
    getLastRequestForRecord(identifier) {
      let requests = this._done[identifier.lid];
      if (requests) {
        return requests[requests.length - 1];
      }
      return null;
    }
  }

  /*
   * Returns the RecordData instance associated with a given
   * Model or InternalModel.
   *
   * Intentionally "loose" to allow anything with an _internalModel
   * property until InternalModel is eliminated.
   *
   * Intentionally not typed to `InternalModel` due to circular dependency
   *  which that creates.
   *
   * Overtime, this should shift to a "weakmap" based lookup in the
   *  "Ember.getOwner(obj)" style.
   */

  const RecordDataForIdentifierCache = new WeakCache$1('recordData' );
  function setRecordDataFor(identifier, recordData) {
    (!(!RecordDataForIdentifierCache.has(identifier)) && debug.assert(`Illegal set of identifier`, !RecordDataForIdentifierCache.has(identifier)));
    RecordDataForIdentifierCache.set(identifier, recordData);
  }
  function removeRecordDataFor(identifier) {
    RecordDataForIdentifierCache.delete(identifier);
  }
  function recordDataFor(instance) {
    if (RecordDataForIdentifierCache.has(instance)) {
      return RecordDataForIdentifierCache.get(instance);
    }
    let internalModel = instance._internalModel || instance.internalModel || instance;
    return internalModel._recordData || null;
  }

  function schemaIsDSModel(schema) {
    return schema.isModel === true;
  }
  /**
    Snapshot is not directly instantiable.
    Instances are provided to a consuming application's
    adapters and serializers for certain requests.

    @class Snapshot
    @public
  */
  class Snapshot {
    /**
     * @method constructor
     * @constructor
     * @private
     * @param options
     * @param identifier
     * @param _store
     */
    constructor(options, identifier, _store) {
      this.__attributes = null;
      this._belongsToRelationships = Object.create(null);
      this._belongsToIds = Object.create(null);
      this._hasManyRelationships = Object.create(null);
      this._hasManyIds = Object.create(null);
      this._store = _store;
      let internalModel = this._internalModel = _store._internalModelForResource(identifier);
      this.modelName = identifier.type;

      /**
        The unique RecordIdentifier associated with this Snapshot.
         @property identifier
        @public
        @type {StableRecordIdentifier}
      */
      this.identifier = identifier;

      /*
        If the internalModel does not yet have a record, then we are
        likely a snapshot being provided to a find request, so we
        populate __attributes lazily. Else, to preserve the "moment
        in time" in which a snapshot is created, we greedily grab
        the values.
       */
      if (internalModel.hasRecord) {
        this._attributes;
      }

      /**
       The id of the snapshot's underlying record
        Example
        ```javascript
       // store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });
       postSnapshot.id; // => '1'
       ```
        @property id
       @type {String}
       @public
       */
      this.id = identifier.id;

      /**
       A hash of adapter options
       @property adapterOptions
       @type {Object}
       @public
       */
      this.adapterOptions = options.adapterOptions;

      /**
       If `include` was passed to the options hash for the request, the value
       would be available here.
        @property include
       @type {String|Array}
       @public
       */
      this.include = options.include;

      /**
       The name of the type of the underlying record for this snapshot, as a string.
        @property modelName
       @type {String}
       @public
       */
      this.modelName = internalModel.modelName;
      if (internalModel.hasRecord) {
        this._changedAttributes = recordDataFor(internalModel).changedAttributes();
      }
    }

    /**
     The underlying record for this snapshot. Can be used to access methods and
     properties defined on the record.
      Example
      ```javascript
     let json = snapshot.record.toJSON();
     ```
      @property record
     @type {Model}
     @public
     */
    get record() {
      return this._internalModel.getRecord();
    }
    get _attributes() {
      if (this.__attributes !== null) {
        return this.__attributes;
      }
      let record = this.record;
      let attributes = this.__attributes = Object.create(null);
      let attrs = Object.keys(this._store._attributesDefinitionFor(this.identifier));
      attrs.forEach(keyName => {
        if (schemaIsDSModel(this.type)) {
          // if the schema is for a DSModel then the instance is too
          attributes[keyName] = object.get(record, keyName);
        } else {
          attributes[keyName] = recordDataFor(this._internalModel).getAttr(keyName);
        }
      });
      return attributes;
    }

    /**
     The type of the underlying record for this snapshot, as a Model.
      @property type
      @public
     @type {Model}
     */
    get type() {
      return this._internalModel.modelClass;
    }
    get isNew() {
      return this._internalModel.isNew();
    }

    /**
     Returns the value of an attribute.
      Example
      ```javascript
     // store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });
     postSnapshot.attr('author'); // => 'Tomster'
     postSnapshot.attr('title'); // => 'Ember.js rocks'
     ```
      Note: Values are loaded eagerly and cached when the snapshot is created.
      @method attr
     @param {String} keyName
     @return {Object} The attribute value or undefined
     @public
     */
    attr(keyName) {
      if (keyName in this._attributes) {
        return this._attributes[keyName];
      }
      (debug.assert(`Model '${this.identifier}' has no attribute named '${keyName}' defined.`, false));
    }

    /**
     Returns all attributes and their corresponding values.
      Example
      ```javascript
     // store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });
     postSnapshot.attributes(); // => { author: 'Tomster', title: 'Ember.js rocks' }
     ```
      @method attributes
     @return {Object} All attributes of the current snapshot
     @public
     */
    attributes() {
      return {
        ...this._attributes
      };
    }

    /**
     Returns all changed attributes and their old and new values.
      Example
      ```javascript
     // store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });
     postModel.set('title', 'Ember.js rocks!');
     postSnapshot.changedAttributes(); // => { title: ['Ember.js rocks', 'Ember.js rocks!'] }
     ```
      @method changedAttributes
     @return {Object} All changed attributes of the current snapshot
     @public
     */
    changedAttributes() {
      let changedAttributes = Object.create(null);
      if (!this._changedAttributes) {
        return changedAttributes;
      }
      let changedAttributeKeys = Object.keys(this._changedAttributes);
      for (let i = 0, length = changedAttributeKeys.length; i < length; i++) {
        let key = changedAttributeKeys[i];
        changedAttributes[key] = this._changedAttributes[key].slice();
      }
      return changedAttributes;
    }

    /**
     Returns the current value of a belongsTo relationship.
      `belongsTo` takes an optional hash of options as a second parameter,
     currently supported options are:
      - `id`: set to `true` if you only want the ID of the related record to be
     returned.
      Example
      ```javascript
     // store.push('post', { id: 1, title: 'Hello World' });
     // store.createRecord('comment', { body: 'Lorem ipsum', post: post });
     commentSnapshot.belongsTo('post'); // => Snapshot
     commentSnapshot.belongsTo('post', { id: true }); // => '1'
      // store.push('comment', { id: 1, body: 'Lorem ipsum' });
     commentSnapshot.belongsTo('post'); // => undefined
     ```
      Calling `belongsTo` will return a new Snapshot as long as there's any known
     data for the relationship available, such as an ID. If the relationship is
     known but unset, `belongsTo` will return `null`. If the contents of the
     relationship is unknown `belongsTo` will return `undefined`.
      Note: Relationships are loaded lazily and cached upon first access.
      @method belongsTo
     @param {String} keyName
     @param {Object} [options]
     @public
     @return {(Snapshot|String|null|undefined)} A snapshot or ID of a known
     relationship or null if the relationship is known but unset. undefined
     will be returned if the contents of the relationship is unknown.
     */
    belongsTo(keyName, options) {
      let returnModeIsId = !!(options && options.id);
      let inverseInternalModel;
      let result;
      let store = this._internalModel.store;
      if (returnModeIsId === true && keyName in this._belongsToIds) {
        return this._belongsToIds[keyName];
      }
      if (returnModeIsId === false && keyName in this._belongsToRelationships) {
        return this._belongsToRelationships[keyName];
      }
      let relationshipMeta = store._relationshipMetaFor(this.modelName, null, keyName);
      (!(relationshipMeta && relationshipMeta.kind === 'belongsTo') && debug.assert(`Model '${this.identifier}' has no belongsTo relationship named '${keyName}' defined.`, relationshipMeta && relationshipMeta.kind === 'belongsTo')); // TODO @runspired it seems this code branch would not work with CUSTOM_MODEL_CLASSes
      const graphFor = require('@ember-data/record-data/-private').graphFor;
      const {
        identifier
      } = this;
      const relationship = graphFor(this._store._storeWrapper).get(identifier, keyName);
      (!(relationship) && debug.assert(`You looked up the ${keyName} belongsTo relationship for { type: ${identifier.type}, id: ${identifier.id}, lid: ${identifier.lid} but no such relationship was found.`, relationship));
      (!(relationship.definition.kind === 'belongsTo') && debug.assert(`You looked up the ${keyName} belongsTo relationship for { type: ${identifier.type}, id: ${identifier.id}, lid: ${identifier.lid} but that relationship is a hasMany.`, relationship.definition.kind === 'belongsTo'));
      let value = relationship.getData();
      let data = value && value.data;
      inverseInternalModel = data ? store._internalModelForResource(data) : null;
      if (value && value.data !== undefined) {
        if (inverseInternalModel && !inverseInternalModel.isDeleted()) {
          if (returnModeIsId) {
            result = inverseInternalModel.id;
          } else {
            result = inverseInternalModel.createSnapshot();
          }
        } else {
          result = null;
        }
      }
      if (returnModeIsId) {
        this._belongsToIds[keyName] = result;
      } else {
        this._belongsToRelationships[keyName] = result;
      }
      return result;
    }

    /**
     Returns the current value of a hasMany relationship.
      `hasMany` takes an optional hash of options as a second parameter,
     currently supported options are:
      - `ids`: set to `true` if you only want the IDs of the related records to be
     returned.
      Example
      ```javascript
     // store.push('post', { id: 1, title: 'Hello World', comments: [2, 3] });
     postSnapshot.hasMany('comments'); // => [Snapshot, Snapshot]
     postSnapshot.hasMany('comments', { ids: true }); // => ['2', '3']
      // store.push('post', { id: 1, title: 'Hello World' });
     postSnapshot.hasMany('comments'); // => undefined
     ```
      Note: Relationships are loaded lazily and cached upon first access.
      @method hasMany
     @param {String} keyName
     @param {Object} [options]
     @public
     @return {(Array|undefined)} An array of snapshots or IDs of a known
     relationship or an empty array if the relationship is known but unset.
     undefined will be returned if the contents of the relationship is unknown.
     */
    hasMany(keyName, options) {
      let returnModeIsIds = !!(options && options.ids);
      let results;
      let cachedIds = this._hasManyIds[keyName];
      let cachedSnapshots = this._hasManyRelationships[keyName];
      if (returnModeIsIds === true && keyName in this._hasManyIds) {
        return cachedIds;
      }
      if (returnModeIsIds === false && keyName in this._hasManyRelationships) {
        return cachedSnapshots;
      }
      let store = this._internalModel.store;
      let relationshipMeta = store._relationshipMetaFor(this.modelName, null, keyName);
      (!(relationshipMeta && relationshipMeta.kind === 'hasMany') && debug.assert(`Model '${this.identifier}' has no hasMany relationship named '${keyName}' defined.`, relationshipMeta && relationshipMeta.kind === 'hasMany')); // TODO @runspired it seems this code branch would not work with CUSTOM_MODEL_CLASSes
      const graphFor = require('@ember-data/record-data/-private').graphFor;
      const {
        identifier
      } = this;
      const relationship = graphFor(this._store._storeWrapper).get(identifier, keyName);
      (!(relationship) && debug.assert(`You looked up the ${keyName} hasMany relationship for { type: ${identifier.type}, id: ${identifier.id}, lid: ${identifier.lid} but no such relationship was found.`, relationship));
      (!(relationship.definition.kind === 'hasMany') && debug.assert(`You looked up the ${keyName} hasMany relationship for { type: ${identifier.type}, id: ${identifier.id}, lid: ${identifier.lid} but that relationship is a belongsTo.`, relationship.definition.kind === 'hasMany'));
      let value = relationship.getData();
      if (value.data) {
        results = [];
        value.data.forEach(member => {
          let internalModel = store._internalModelForResource(member);
          if (!internalModel.isDeleted()) {
            if (returnModeIsIds) {
              results.push(member.id || null);
            } else {
              results.push(internalModel.createSnapshot());
            }
          }
        });
      }

      // we assign even if `undefined` so that we don't reprocess the relationship
      // on next access. This works with the `keyName in` checks above.
      if (returnModeIsIds) {
        this._hasManyIds[keyName] = results;
      } else {
        this._hasManyRelationships[keyName] = results;
      }
      return results;
    }

    /**
      Iterates through all the attributes of the model, calling the passed
      function on each attribute.
       Example
       ```javascript
      snapshot.eachAttribute(function(name, meta) {
        // ...
      });
      ```
       @method eachAttribute
      @param {Function} callback the callback to execute
      @param {Object} [binding] the value to which the callback's `this` should be bound
      @public
    */
    eachAttribute(callback, binding) {
      let attrDefs = this._store._attributesDefinitionFor(this.identifier);
      Object.keys(attrDefs).forEach(key => {
        callback.call(binding, key, attrDefs[key]);
      });
    }

    /**
      Iterates through all the relationships of the model, calling the passed
      function on each relationship.
       Example
       ```javascript
      snapshot.eachRelationship(function(name, relationship) {
        // ...
      });
      ```
       @method eachRelationship
      @param {Function} callback the callback to execute
      @param {Object} [binding] the value to which the callback's `this` should be bound
      @public
    */
    eachRelationship(callback, binding) {
      let relationshipDefs = this._store._relationshipsDefinitionFor(this.identifier);
      Object.keys(relationshipDefs).forEach(key => {
        callback.call(binding, key, relationshipDefs[key]);
      });
    }

    /**
      Serializes the snapshot using the serializer for the model.
       Example
       ```app/adapters/application.js
      import Adapter from '@ember-data/adapter';
       export default Adapter.extend({
        createRecord(store, type, snapshot) {
          let data = snapshot.serialize({ includeId: true });
          let url = `/${type.modelName}`;
           return fetch(url, {
            method: 'POST',
            body: data,
          }).then((response) => response.json())
        }
      });
      ```
       @method serialize
      @param {Object} options
      @return {Object} an object whose values are primitive JSON values only
      @public
     */
    serialize(options) {
      return this._store.serializerFor(this.modelName).serialize(this, options);
    }
  }

  /**
    @module @ember-data/store
  */

  function _bind(fn, ...args) {
    return function () {
      return fn.apply(undefined, args);
    };
  }
  function _guard(promise, test) {
    let guarded = promise.finally(() => {
      if (!test()) {
        guarded._subscribers.length = 0;
      }
    });
    return guarded;
  }
  function _objectIsAlive(object$1) {
    return !(object.get(object$1, 'isDestroyed') || object.get(object$1, 'isDestroying'));
  }
  function guardDestroyedStore(promise, store, label) {
    let token;
    {
      token = store._trackAsyncRequestStart(label);
    }
    let wrapperPromise = RSVP.resolve(promise, label).then(v => promise);
    return _guard(wrapperPromise, () => {
      {
        store._trackAsyncRequestEnd(token);
      }
      return _objectIsAlive(store);
    });
  }

  /**
    This is a helper method that validates a JSON API top-level document

    The format of a document is described here:
    http://jsonapi.org/format/#document-top-level

    @internal
  */
  function validateDocumentStructure(doc) {
    let errors = [];
    if (!doc || typeof doc !== 'object') {
      errors.push('Top level of a JSON API document must be an object');
    } else {
      if (!('data' in doc) && !('errors' in doc) && !('meta' in doc)) {
        errors.push('One or more of the following keys must be present: "data", "errors", "meta".');
      } else {
        if ('data' in doc && 'errors' in doc) {
          errors.push('Top level keys "errors" and "data" cannot both be present in a JSON API document');
        }
      }
      if ('data' in doc) {
        if (!(doc.data === null || Array.isArray(doc.data) || typeof doc.data === 'object')) {
          errors.push('data must be null, an object, or an array');
        }
      }
      if ('meta' in doc) {
        if (typeof doc.meta !== 'object') {
          errors.push('meta must be an object');
        }
      }
      if ('errors' in doc) {
        if (!Array.isArray(doc.errors)) {
          errors.push('errors must be an array');
        }
      }
      if ('links' in doc) {
        if (typeof doc.links !== 'object') {
          errors.push('links must be an object');
        }
      }
      if ('jsonapi' in doc) {
        if (typeof doc.jsonapi !== 'object') {
          errors.push('jsonapi must be an object');
        }
      }
      if ('included' in doc) {
        if (typeof doc.included !== 'object') {
          errors.push('included must be an array');
        }
      }
    }
    return errors;
  }
  function normalizeResponseHelper(serializer, store, modelClass, payload, id, requestType) {
    let normalizedResponse = serializer.normalizeResponse(store, modelClass, payload, id, requestType);
    let validationErrors = [];
    {
      validationErrors = validateDocumentStructure(normalizedResponse);
    }
    (!(validationErrors.length === 0) && debug.assert(`normalizeResponse must return a valid JSON API document:\n\t* ${validationErrors.join('\n\t* ')}`, validationErrors.length === 0));
    return normalizedResponse;
  }

  function payloadIsNotBlank$1(adapterPayload) {
    if (Array.isArray(adapterPayload)) {
      return true;
    } else {
      return Object.keys(adapterPayload || {}).length !== 0;
    }
  }
  const SaveOp = Symbol('SaveOp');
  /**
   * Manages the state of network requests initiated by the store
   *
   * @class FetchManager
   * @private
   */
  class FetchManager {
    // saves which are pending in the runloop

    // fetches pending in the runloop, waiting to be coalesced

    constructor(_store) {
      this._store = _store;
      // used to keep track of all the find requests that need to be coalesced
      this._pendingFetch = new Map();
      this._pendingSave = [];
      this.requestCache = new RequestCache();
      this.isDestroyed = false;
    }

    /**
      This method is called by `record.save`, and gets passed a
      resolver for the promise that `record.save` returns.
       It schedules saving to happen at the end of the run loop.
       @internal
    */
    scheduleSave(identifier, options = {}) {
      let promiseLabel = 'DS: Model#save ' + this;
      let resolver = RSVP__default["default"].defer(promiseLabel);
      let query = {
        op: 'saveRecord',
        recordIdentifier: identifier,
        options
      };
      let queryRequest = {
        data: [query]
      };
      let snapshot = new Snapshot(options, identifier, this._store);
      let pendingSaveItem = {
        snapshot: snapshot,
        resolver: resolver,
        identifier,
        options,
        queryRequest
      };
      this._pendingSave.push(pendingSaveItem);
      runloop._backburner.scheduleOnce('actions', this, this._flushPendingSaves);
      this.requestCache.enqueue(resolver.promise, pendingSaveItem.queryRequest);
      return resolver.promise;
    }
    _flushPendingSave(pending) {
      let {
        snapshot,
        resolver,
        identifier,
        options
      } = pending;
      let adapter = this._store.adapterFor(identifier.type);
      let operation = options[SaveOp];

      // TODO We have to cast due to our reliance on this private property
      // this will be refactored away once we change our pending API to be identifier based
      let internalModel = snapshot._internalModel;
      let modelName = snapshot.modelName;
      let store = this._store;
      let modelClass = store.modelFor(modelName);
      (!(adapter) && debug.assert(`You tried to update a record but you have no adapter (for ${modelName})`, adapter));
      (!(typeof adapter[operation] === 'function') && debug.assert(`You tried to update a record but your adapter (for ${modelName}) does not implement '${operation}'`, typeof adapter[operation] === 'function'));
      let promise = RSVP.Promise.resolve().then(() => adapter[operation](store, modelClass, snapshot));
      let serializer = store.serializerFor(modelName);
      let label = `DS: Extract and notify about ${operation} completion of ${internalModel}`;
      (!(promise !== undefined) && debug.assert(`Your adapter's '${operation}' method must return a value, but it returned 'undefined'`, promise !== undefined));
      promise = guardDestroyedStore(promise, store, label);
      promise = _guard(promise, _bind(_objectIsAlive, internalModel));
      promise = promise.then(adapterPayload => {
        if (adapterPayload) {
          return normalizeResponseHelper(serializer, store, modelClass, adapterPayload, snapshot.id, operation);
        }
      }, function (error) {
        if (error && error.isAdapterError === true && error.code === 'InvalidError') {
          let parsedErrors = error.errors;
          if (typeof serializer.extractErrors === 'function') {
            parsedErrors = serializer.extractErrors(store, modelClass, error, snapshot.id);
          } else {
            parsedErrors = errorsArrayToHash(error.errors);
          }
          throw {
            error,
            parsedErrors
          };
        } else {
          throw {
            error
          };
        }
      }, label);
      resolver.resolve(promise);
    }

    /**
      This method is called at the end of the run loop, and
      flushes any records passed into `scheduleSave`
       @method flushPendingSave
      @internal
    */
    _flushPendingSaves() {
      let pending = this._pendingSave.slice();
      this._pendingSave = [];
      for (let i = 0, j = pending.length; i < j; i++) {
        let pendingItem = pending[i];
        this._flushPendingSave(pendingItem);
      }
    }
    scheduleFetch(identifier, options, shouldTrace) {
      // TODO Probably the store should pass in the query object

      let query = {
        op: 'findRecord',
        recordIdentifier: identifier,
        options
      };
      let queryRequest = {
        data: [query]
      };
      let pendingFetches = this._pendingFetch.get(identifier.type);

      // We already have a pending fetch for this
      if (pendingFetches) {
        let matchingPendingFetch = pendingFetches.filter(fetch => fetch.identifier.id === identifier.id)[0];
        if (matchingPendingFetch) {
          return matchingPendingFetch.resolver.promise;
        }
      }
      let id = identifier.id;
      let modelName = identifier.type;
      let resolver = RSVP__default["default"].defer(`Fetching ${modelName}' with id: ${id}`);
      let pendingFetchItem = {
        identifier,
        resolver,
        options,
        queryRequest
      };
      {
        if (shouldTrace) {
          let trace;
          try {
            throw new Error(`Trace Origin for scheduled fetch for ${modelName}:${id}.`);
          } catch (e) {
            trace = e;
          }

          // enable folks to discover the origin of this findRecord call when
          // debugging. Ideally we would have a tracked queue for requests with
          // labels or local IDs that could be used to merge this trace with
          // the trace made available when we detect an async leak
          pendingFetchItem.trace = trace;
        }
      }
      let promise = resolver.promise;
      if (this._pendingFetch.size === 0) {
        runloop._backburner.schedule('actions', this, this.flushAllPendingFetches);
      }
      let fetches = this._pendingFetch;
      if (!fetches.has(modelName)) {
        fetches.set(modelName, []);
      }
      fetches.get(modelName).push(pendingFetchItem);
      this.requestCache.enqueue(promise, pendingFetchItem.queryRequest);
      return promise;
    }
    _fetchRecord(fetchItem) {
      let identifier = fetchItem.identifier;
      let modelName = identifier.type;
      let adapter = this._store.adapterFor(modelName);
      (!(adapter) && debug.assert(`You tried to find a record but you have no adapter (for ${modelName})`, adapter));
      (!(typeof adapter.findRecord === 'function') && debug.assert(`You tried to find a record but your adapter (for ${modelName}) does not implement 'findRecord'`, typeof adapter.findRecord === 'function'));
      let snapshot = new Snapshot(fetchItem.options, identifier, this._store);
      let klass = this._store.modelFor(identifier.type);
      let promise = RSVP.Promise.resolve().then(() => {
        return adapter.findRecord(this._store, klass, identifier.id, snapshot);
      });
      let id = identifier.id;
      let label = `DS: Handle Adapter#findRecord of '${modelName}' with id: '${id}'`;
      promise = guardDestroyedStore(promise, this._store, label);
      promise = promise.then(adapterPayload => {
        (!(!!payloadIsNotBlank$1(adapterPayload)) && debug.assert(`You made a 'findRecord' request for a '${modelName}' with id '${id}', but the adapter's response did not have any data`, !!payloadIsNotBlank$1(adapterPayload)));
        let serializer = this._store.serializerFor(modelName);
        let payload = normalizeResponseHelper(serializer, this._store, klass, adapterPayload, id, 'findRecord');
        (!(!Array.isArray(payload.data)) && debug.assert(`Ember Data expected the primary data returned from a 'findRecord' response to be an object but instead it found an array.`, !Array.isArray(payload.data)));
        (!('data' in payload && payload.data !== null && typeof payload.data === 'object') && debug.assert(`The 'findRecord' request for ${modelName}:${id} resolved indicating success but contained no primary data. To indicate a 404 not found you should either reject the promise returned by the adapter's findRecord method or throw a NotFoundError.`, 'data' in payload && payload.data !== null && typeof payload.data === 'object'));
        (debug.warn(`You requested a record of type '${modelName}' with id '${id}' but the adapter returned a payload with primary data having an id of '${payload.data.id}'. Use 'store.findRecord()' when the requested id is the same as the one returned by the adapter. In other cases use 'store.queryRecord()' instead.`, coerceId(payload.data.id) === coerceId(id), {
          id: 'ds.store.findRecord.id-mismatch'
        }));
        return payload;
      }, error => {
        throw error;
      }, `DS: Extract payload of '${modelName}'`);
      fetchItem.resolver.resolve(promise);
    }

    // TODO should probably refactor expectedSnapshots to be identifiers
    handleFoundRecords(seeking, coalescedPayload, expectedSnapshots) {
      // resolve found records
      let found = Object.create(null);
      let payloads = coalescedPayload.data;
      let coalescedIncluded = coalescedPayload.included || [];
      for (let i = 0, l = payloads.length; i < l; i++) {
        let payload = payloads[i];
        let pair = seeking[payload.id];
        found[payload.id] = payload;
        let included = coalescedIncluded.concat(payloads);

        // TODO remove original data from included
        if (pair) {
          let resolver = pair.resolver;
          resolver.resolve({
            data: payload,
            included
          });
        }
      }

      // reject missing records

      // TODO NOW clean this up to refer to payloads
      let missingSnapshots = [];
      for (let i = 0, l = expectedSnapshots.length; i < l; i++) {
        let snapshot = expectedSnapshots[i];
        assertIsString(snapshot.id);

        // We know id is a string because you can't fetch
        // without one.
        if (!found[snapshot.id]) {
          missingSnapshots.push(snapshot);
        }
      }
      if (missingSnapshots.length) {
        (debug.warn('Ember Data expected to find records with the following ids in the adapter response but they were missing: [ "' + missingSnapshots.map(r => r.id).join('", "') + '" ]', false, {
          id: 'ds.store.missing-records-from-adapter'
        }));
        this.rejectFetchedItems(seeking, missingSnapshots);
      }
    }
    rejectFetchedItems(seeking, snapshots, error) {
      for (let i = 0, l = snapshots.length; i < l; i++) {
        let snapshot = snapshots[i];
        assertIsString(snapshot.id);
        // TODO refactor to identifier.lid to avoid this cast to string
        //  we can do this case because you can only fetch an identifier
        //  that has an ID
        let pair = seeking[snapshot.id];
        if (pair) {
          pair.resolver.reject(error || new Error(`Expected: '<${snapshot.modelName}:${snapshot.id}>' to be present in the adapter provided payload, but it was not found.`));
        }
      }
    }
    _findMany(adapter, store, modelName, snapshots, identifiers, optionsMap) {
      let modelClass = store.modelFor(modelName); // `adapter.findMany` gets the modelClass still
      let ids = snapshots.map(s => s.id);
      let promise = adapter.findMany(store, modelClass, ids, EmberArray.A(snapshots));
      let label = `DS: Handle Adapter#findMany of '${modelName}'`;
      if (promise === undefined) {
        throw new Error('adapter.findMany returned undefined, this was very likely a mistake');
      }
      promise = guardDestroyedStore(promise, store, label);
      return promise.then(adapterPayload => {
        (!(!!payloadIsNotBlank$1(adapterPayload)) && debug.assert(`You made a 'findMany' request for '${modelName}' records with ids '[${ids}]', but the adapter's response did not have any data`, !!payloadIsNotBlank$1(adapterPayload)));
        let serializer = store.serializerFor(modelName);
        let payload = normalizeResponseHelper(serializer, store, modelClass, adapterPayload, null, 'findMany');
        return payload;
      }, null, `DS: Extract payload of ${modelName}`);
    }
    _processCoalescedGroup(seeking, group, adapter, optionsMap, modelName) {
      //TODO check what happened with identifiers here
      let totalInGroup = group.length;
      let ids = new Array(totalInGroup);
      let groupedSnapshots = new Array(totalInGroup);
      for (let j = 0; j < totalInGroup; j++) {
        groupedSnapshots[j] = group[j];
        ids[j] = groupedSnapshots[j].id;
      }
      let store = this._store;
      if (totalInGroup > 1) {
        this._findMany(adapter, store, modelName, group, groupedSnapshots, optionsMap).then(payloads => {
          this.handleFoundRecords(seeking, payloads, groupedSnapshots);
        }).catch(error => {
          this.rejectFetchedItems(seeking, groupedSnapshots, error);
        });
      } else if (ids.length === 1) {
        let pair = seeking[groupedSnapshots[0].id];
        this._fetchRecord(pair);
      } else {
        (debug.assert("You cannot return an empty array from adapter's method groupRecordsForFindMany", false));
      }
    }
    _flushPendingFetchForType(pendingFetchItems, modelName) {
      let adapter = this._store.adapterFor(modelName);
      let shouldCoalesce = !!adapter.findMany && adapter.coalesceFindRequests;
      let totalItems = pendingFetchItems.length;
      let identifiers = new Array(totalItems);
      let seeking = Object.create(null);
      let optionsMap = new WeakCache$1('fetch-options' );
      for (let i = 0; i < totalItems; i++) {
        let pendingItem = pendingFetchItems[i];
        let identifier = pendingItem.identifier;
        identifiers[i] = identifier;
        optionsMap.set(identifier, pendingItem.options);
        seeking[identifier.id] = pendingItem;
      }
      if (shouldCoalesce) {
        // TODO: Improve records => snapshots => records => snapshots
        //
        // We want to provide records to all store methods and snapshots to all
        // adapter methods. To make sure we're doing that we're providing an array
        // of snapshots to adapter.groupRecordsForFindMany(), which in turn will
        // return grouped snapshots instead of grouped records.
        //
        // But since the _findMany() finder is a store method we need to get the
        // records from the grouped snapshots even though the _findMany() finder
        // will once again convert the records to snapshots for adapter.findMany()
        let snapshots = new Array(totalItems);
        for (let i = 0; i < totalItems; i++) {
          // we know options is in the map due to having just set it above
          // but TS doesn't know so we cast it
          let options = optionsMap.get(identifiers[i]);
          snapshots[i] = new Snapshot(options, identifiers[i], this._store);
        }
        let groups;
        if (adapter.groupRecordsForFindMany) {
          groups = adapter.groupRecordsForFindMany(this, snapshots);
        } else {
          groups = [snapshots];
        }
        for (let i = 0, l = groups.length; i < l; i++) {
          this._processCoalescedGroup(seeking, groups[i], adapter, optionsMap, modelName);
        }
      } else {
        for (let i = 0; i < totalItems; i++) {
          this._fetchRecord(pendingFetchItems[i]);
        }
      }
    }
    getPendingFetch(identifier, options) {
      let pendingRequests = this.requestCache.getPendingRequestsForRecord(identifier).filter(req => {
        return req.type === 'query' && isSameRequest(options, req.request.data[0].options);
      });
      if (pendingRequests.length > 0) {
        return pendingRequests[0][RequestPromise];
      }
    }
    flushAllPendingFetches() {
      if (this.isDestroyed) {
        return;
      }
      this._pendingFetch.forEach(this._flushPendingFetchForType, this);
      this._pendingFetch.clear();
    }
    destroy() {
      this.isDestroyed = true;
    }
  }
  function assertIsString(id) {
    {
      if (typeof id !== 'string') {
        throw new Error(`Cannot fetch record without an id`);
      }
    }
  }

  // this function helps resolve whether we have a pending request that we should use instead
  function isSameRequest(options = {}, reqOptions = {}) {
    return options.include === reqOptions.include;
  }

  const Cache = new WeakCache$1('subscribers' );
  Cache._generator = () => new Map();
  const Tokens = new WeakCache$1('identifier' );

  // 'property' is an internal EmberData only transition period concept.

  function unsubscribe(token) {
    let identifier = Tokens.get(token);
    if (!identifier) {
      throw new Error('Passed unknown unsubscribe token to unsubscribe');
    }
    Tokens.delete(token);
    const map = Cache.get(identifier);
    map?.delete(token);
  }
  /*
    Currently only support a single callback per identifier
  */
  class NotificationManager {
    constructor(store) {
      this.store = store;
    }
    subscribe(identifier, callback) {
      let stableIdentifier = this.store.identifierCache.getOrCreateRecordIdentifier(identifier);
      let map = Cache.lookup(stableIdentifier);
      let unsubToken = {};
      map.set(unsubToken, callback);
      Tokens.set(unsubToken, stableIdentifier);
      return unsubToken;
    }
    notify(identifier, value, key) {
      let stableIdentifier = this.store.identifierCache.getOrCreateRecordIdentifier(identifier);
      let callbackMap = Cache.get(stableIdentifier);
      if (!callbackMap || !callbackMap.size) {
        return false;
      }
      callbackMap.forEach(cb => {
        cb(stableIdentifier, value, key);
      });
      return true;
    }
  }

  /**
    @module @ember-data/store
  */

  /**
   `InternalModelMap` is a custom storage map for internalModels of a given modelName
   used by `IdentityMap`.

   It was extracted from an implicit pojo based "internalModel map" and preserves
   that interface while we work towards a more official API.

   @class InternalModelMap
   @internal
   */
  class InternalModelMap {
    constructor(modelName) {
      this._idToModel = Object.create(null);
      this._models = [];
      this.modelName = modelName;
    }
    get(id) {
      return this._idToModel[id] || null;
    }
    has(id) {
      return !!this._idToModel[id];
    }
    get length() {
      return this._models.length;
    }
    get recordIdentifiers() {
      return this._models.map(m => m.identifier);
    }
    set(id, internalModel) {
      (!(typeof id === 'string' && id.length > 0) && debug.assert(`You cannot index an internalModel by an empty id'`, typeof id === 'string' && id.length > 0));
      (!(internalModel instanceof InternalModel) && debug.assert(`You cannot set an index for an internalModel to something other than an internalModel`, internalModel instanceof InternalModel));
      (!(this.contains(internalModel)) && debug.assert(`You cannot set an index for an internalModel that is not in the InternalModelMap`, this.contains(internalModel)));
      (!(!this.has(id) || this.get(id) === internalModel) && debug.assert(`You cannot update the id index of an InternalModel once set. Attempted to update ${id}.`, !this.has(id) || this.get(id) === internalModel));
      this._idToModel[id] = internalModel;
    }
    add(internalModel, id) {
      (!(!this.contains(internalModel)) && debug.assert(`You cannot re-add an already present InternalModel to the InternalModelMap.`, !this.contains(internalModel)));
      if (id) {
        (!(!this.has(id) || this.get(id) === internalModel) && debug.assert(`Duplicate InternalModel for ${this.modelName}:${id} detected.`, !this.has(id) || this.get(id) === internalModel));
        this._idToModel[id] = internalModel;
      }
      this._models.push(internalModel);
    }
    remove(internalModel, id) {
      delete this._idToModel[id];
      let loc = this._models.indexOf(internalModel);
      if (loc !== -1) {
        this._models.splice(loc, 1);
      }
    }
    contains(internalModel) {
      return this._models.indexOf(internalModel) !== -1;
    }

    /**
     An array of all models of this modelName
     @property models
     @internal
     @type Array
     */
    get models() {
      return this._models;
    }

    /**
     Destroy all models in the map
      @internal
     */
    clear() {
      let internalModels = this._models;
      this._models = [];
      for (let i = 0; i < internalModels.length; i++) {
        let internalModel = internalModels[i];
        internalModel.unloadRecord();
      }
    }
  }

  /**
    @module @ember-data/store
  */

  /**
   `IdentityMap` is a custom storage map for records by modelName
   used by `Store`.

   @class IdentityMap
   @internal
   */
  class IdentityMap {
    constructor() {
      this._map = Object.create(null);
    }
    /**
     Retrieves the `InternalModelMap` for a given modelName,
     creating one if one did not already exist. This is
     similar to `getWithDefault` or `get` on a `MapWithDefault`
      @method retrieve
     @internal
     @param modelName a previously normalized modelName
     @return {InternalModelMap} the InternalModelMap for the given modelName
     */
    retrieve(modelName) {
      let map = this._map[modelName];
      if (map === undefined) {
        map = this._map[modelName] = new InternalModelMap(modelName);
      }
      return map;
    }

    /**
     Clears the contents of all known `RecordMaps`, but does
     not remove the InternalModelMap instances.
      @internal
     */
    clear() {
      let map = this._map;
      let keys = Object.keys(map);
      for (let i = 0; i < keys.length; i++) {
        let key = keys[i];
        map[key].clear();
      }
    }
  }

  /**
    @module @ember-data/store
  */

  const FactoryCache = new WeakCache$1('internal-model-factory' );
  FactoryCache._generator = store => {
    return new InternalModelFactory(store);
  };
  const RecordCache = new WeakCache$1('identifier' );
  {
    RecordCache._expectMsg = key => `${key} is not a record instantiated by @ember-data/store`;
  }
  function peekRecordIdentifier(record) {
    return RecordCache.get(record);
  }

  /**
    Retrieves the unique referentially-stable [RecordIdentifier](/ember-data/release/classes/StableRecordIdentifier)
    assigned to the given record instance.

    ```js
    import { recordIdentifierFor } from "@ember-data/store";

    // ... gain access to a record, for instance with peekRecord or findRecord
    const record = store.peekRecord("user", "1");

    // get the identifier for the record (see docs for StableRecordIdentifier)
    const identifier = recordIdentifierFor(record);

    // access the identifier's properties.
    const { id, type, lid } = identifier;
    ```

    @method recordIdentifierFor
    @public
    @static
    @for @ember-data/store
    @param {Object} record a record instance previously obstained from the store.
    @returns {StableRecordIdentifier}
   */
  function recordIdentifierFor(record) {
    return RecordCache.getWithError(record);
  }
  function setRecordIdentifier(record, identifier) {
    if (RecordCache.has(record)) {
      throw new Error(`${record} was already assigned an identifier`);
    }

    /*
    It would be nice to do a reverse check here that an identifier has not
    previously been assigned a record; however, unload + rematerialization
    prevents us from having a great way of doing so when CustomRecordClasses
    don't necessarily give us access to a `isDestroyed` for dematerialized
    instance.
    */

    RecordCache.set(record, identifier);
  }
  function internalModelFactoryFor(store) {
    return FactoryCache.lookup(store);
  }

  /**
   * The InternalModelFactory handles the lifecyle of
   * instantiating, caching, and destroying InternalModel
   * instances.
   *
   * @class InternalModelFactory
   * @internal
   */
  class InternalModelFactory {
    constructor(store) {
      this.store = store;
      this.identifierCache = store.identifierCache;
      this.identifierCache.__configureMerge((identifier, matchedIdentifier, resourceData) => {
        let intendedIdentifier = identifier;
        if (identifier.id !== matchedIdentifier.id) {
          intendedIdentifier = 'id' in resourceData && identifier.id === resourceData.id ? identifier : matchedIdentifier;
        } else if (identifier.type !== matchedIdentifier.type) {
          intendedIdentifier = 'type' in resourceData && identifier.type === resourceData.type ? identifier : matchedIdentifier;
        }
        let altIdentifier = identifier === intendedIdentifier ? matchedIdentifier : identifier;

        // check for duplicate InternalModel's
        const map = this.modelMapFor(identifier.type);
        let im = map.get(intendedIdentifier.lid);
        let otherIm = map.get(altIdentifier.lid);

        // we cannot merge internalModels when both have records
        // (this may not be strictly true, we could probably swap the internalModel the record points at)
        if (im && otherIm && im.hasRecord && otherIm.hasRecord) {
          if ('id' in resourceData) {
            throw new Error(`Failed to update the 'id' for the RecordIdentifier '${identifier.type}:${identifier.id} (${identifier.lid})' to '${resourceData.id}', because that id is already in use by '${matchedIdentifier.type}:${matchedIdentifier.id} (${matchedIdentifier.lid})'`);
          }
          // TODO @runspired determine when this is even possible
          (debug.assert(`Failed to update the RecordIdentifier '${identifier.type}:${identifier.id} (${identifier.lid})' to merge with the detected duplicate identifier '${matchedIdentifier.type}:${matchedIdentifier.id} (${matchedIdentifier.lid})'`));
        }

        // remove otherIm from cache
        if (otherIm) {
          map.remove(otherIm, altIdentifier.lid);
        }
        if (im === null && otherIm === null) {
          // nothing more to do
          return intendedIdentifier;

          // only the other has an InternalModel
          // OR only the other has a Record
        } else if (im === null && otherIm !== null || im && !im.hasRecord && otherIm && otherIm.hasRecord) {
          if (im) {
            // TODO check if we are retained in any async relationships
            map.remove(im, intendedIdentifier.lid);
            // im.destroy();
          }

          im = otherIm;
          // TODO do we need to notify the id change?
          im._id = intendedIdentifier.id;
          map.add(im, intendedIdentifier.lid);

          // just use im
        } else ;

        /*
        TODO @runspired consider adding this to make polymorphism even nicer
        if (HAS_RECORD_DATA_PACKAGE) {
          if (identifier.type !== matchedIdentifier.type) {
            const graphFor = require('@ember-data/record-data/-private').graphFor;
            graphFor(this).registerPolymorphicType(identifier.type, matchedIdentifier.type);
          }
        }
        */

        return intendedIdentifier;
      });
      this._identityMap = new IdentityMap();
    }

    /**
     * Retrieve the InternalModel for a given { type, id, lid }.
     *
     * If an InternalModel does not exist, it instantiates one.
     *
     * If an InternalModel does exist bus has a scheduled destroy,
     *   the scheduled destroy will be cancelled.
     *
     * @method lookup
     * @private
     */
    lookup(resource, data) {
      if (data !== undefined) {
        // if we've been given data associated with this lookup
        // we must first give secondary-caches for LIDs the
        // opportunity to populate based on it
        this.identifierCache.getOrCreateRecordIdentifier(data);
      }
      const identifier = this.identifierCache.getOrCreateRecordIdentifier(resource);
      const internalModel = this.peek(identifier);
      if (internalModel) {
        // unloadRecord is async, if one attempts to unload + then sync push,
        //   we must ensure the unload is canceled before continuing
        //   The createRecord path will take _existingInternalModelForId()
        //   which will call `destroySync` instead for this unload + then
        //   sync createRecord scenario. Once we have true client-side
        //   delete signaling, we should never call destroySync
        if (internalModel.hasScheduledDestroy()) {
          internalModel.cancelDestroy();
        }
        return internalModel;
      }
      return this._build(identifier, false);
    }

    /**
     * Peek the InternalModel for a given { type, id, lid }.
     *
     * If an InternalModel does not exist, return `null`.
     *
     * @method peek
     * @private
     */
    peek(identifier) {
      return this.modelMapFor(identifier.type).get(identifier.lid);
    }
    getByResource(resource) {
      const normalizedResource = constructResource(resource);
      return this.lookup(normalizedResource);
    }
    setRecordId(type, id, lid) {
      const resource = {
        type,
        id: null,
        lid
      };
      const identifier = this.identifierCache.getOrCreateRecordIdentifier(resource);
      const internalModel = this.peek(identifier);
      if (internalModel === null) {
        throw new Error(`Cannot set the id ${id} on the record ${type}:${lid} as there is no such record in the cache.`);
      }
      let oldId = internalModel.id;
      let modelName = internalModel.modelName;

      // ID absolutely can't be missing if the oldID is empty (missing Id in response for a new record)
      (!(!(id === null && oldId === null)) && debug.assert(`'${modelName}' was saved to the server, but the response does not have an id and your record does not either.`, !(id === null && oldId === null))); // ID absolutely can't be different than oldID if oldID is not null
      // TODO this assertion and restriction may not strictly be needed in the identifiers world
      (!(!(oldId !== null && id !== oldId)) && debug.assert(`Cannot update the id for '${modelName}:${lid}' from '${oldId}' to '${id}'.`, !(oldId !== null && id !== oldId))); // ID can be null if oldID is not null (altered ID in response for a record)
      // however, this is more than likely a developer error.
      if (oldId !== null && id === null) {
        (debug.warn(`Your ${modelName} record was saved to the server, but the response does not have an id.`, !(oldId !== null && id === null)));
        return;
      }
      let existingInternalModel = this.peekById(modelName, id);
      (!(utils.isNone(existingInternalModel) || existingInternalModel === internalModel) && debug.assert(`'${modelName}' was saved to the server, but the response returned the new id '${id}', which has already been used with another record.'`, utils.isNone(existingInternalModel) || existingInternalModel === internalModel));
      if (identifier.id === null) {
        this.identifierCache.updateRecordIdentifier(identifier, {
          type,
          id
        });
      }
      internalModel.setId(id, true);
    }
    peekById(type, id) {
      const identifier = this.identifierCache.peekRecordIdentifier({
        type,
        id
      });
      let internalModel = identifier ? this.modelMapFor(type).get(identifier.lid) : null;
      if (internalModel && internalModel.hasScheduledDestroy()) {
        // unloadRecord is async, if one attempts to unload + then sync create,
        //   we must ensure the unload is complete before starting the create
        //   The push path will take this.lookup()
        //   which will call `cancelDestroy` instead for this unload + then
        //   sync push scenario. Once we have true client-side
        //   delete signaling, we should never call destroySync
        internalModel.destroySync();
        internalModel = null;
      }
      return internalModel;
    }
    build(newResourceInfo) {
      return this._build(newResourceInfo, true);
    }
    _build(resource, isCreate = false) {
      if (isCreate === true && resource.id) {
        let existingInternalModel = this.peekById(resource.type, resource.id);
        (!(!existingInternalModel) && debug.assert(`The id ${resource.id} has already been used with another '${resource.type}' record.`, !existingInternalModel));
      }
      const {
        identifierCache
      } = this;
      let identifier;
      if (isCreate === true) {
        identifier = identifierCache.createIdentifierForNewRecord(resource);
      } else {
        identifier = resource;
      }

      // lookupFactory should really return an object that creates
      // instances with the injections applied
      let internalModel = new InternalModel(this.store, identifier);
      this.modelMapFor(resource.type).add(internalModel, identifier.lid);
      return internalModel;
    }
    remove(internalModel) {
      let recordMap = this.modelMapFor(internalModel.modelName);
      let clientId = internalModel.identifier.lid;
      recordMap.remove(internalModel, clientId);
      const {
        identifier
      } = internalModel;
      this.identifierCache.forgetRecordIdentifier(identifier);
    }
    modelMapFor(type) {
      return this._identityMap.retrieve(type);
    }
    clear(type) {
      if (type === undefined) {
        this._identityMap.clear();
      } else {
        this.modelMapFor(type).clear();
      }
    }
  }

  function _classPrivateFieldLooseBase$3(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError("attempted to use private field on non-instance"); } return receiver; }
  var id$3 = 0;
  function _classPrivateFieldLooseKey$3(name) { return "__private_" + id$3++ + "_" + name; }
  /**
    @module @ember-data/store
  */

  function isResourceIdentiferWithRelatedLinks(value) {
    return value && value.links && value.links.related;
  }

  /**
    This is the baseClass for the different References
    like RecordReference/HasManyReference/BelongsToReference

   @class Reference
   @public
   */
  var _identifier$2 = /*#__PURE__*/_classPrivateFieldLooseKey$3("identifier");
  class Reference {
    constructor(store, identifier) {
      Object.defineProperty(this, _identifier$2, {
        writable: true,
        value: void 0
      });
      this.store = store;
      _classPrivateFieldLooseBase$3(this, _identifier$2)[_identifier$2] = identifier;
    }
    get recordData() {
      return this.store.recordDataFor(_classPrivateFieldLooseBase$3(this, _identifier$2)[_identifier$2], false);
    }
    _resource() {}

    /**
     This returns a string that represents how the reference will be
     looked up when it is loaded. If the relationship has a link it will
     use the "link" otherwise it defaults to "id".
      Example
      ```app/models/post.js
     import Model, { hasMany } from '@ember-data/model';
      export default Model.extend({
       comments: hasMany({ async: true })
     });
     ```
      ```javascript
     let post = store.push({
       data: {
         type: 'post',
         id: 1,
         relationships: {
           comments: {
             data: [{ type: 'comment', id: 1 }]
           }
         }
       }
     });
      let commentsRef = post.hasMany('comments');
      // get the identifier of the reference
     if (commentsRef.remoteType() === "ids") {
       let ids = commentsRef.ids();
     } else if (commentsRef.remoteType() === "link") {
       let link = commentsRef.link();
     }
     ```
      @method remoteType
     @public
     @return {String} The name of the remote type. This should either be "link" or "ids"
     */
    remoteType() {
      let value = this._resource();
      if (isResourceIdentiferWithRelatedLinks(value)) {
        return 'link';
      }
      return 'id';
    }

    /**
     The link Ember Data will use to fetch or reload this belongs-to
     relationship. By default it uses only the "related" resource linkage.
      Example
      ```javascript
     // models/blog.js
     import Model, { belongsTo } from '@ember-data/model';
     export default Model.extend({
        user: belongsTo({ async: true })
      });
      let blog = store.push({
        data: {
          type: 'blog',
          id: 1,
          relationships: {
            user: {
              links: {
                related: '/articles/1/author'
              }
            }
          }
        }
      });
     let userRef = blog.belongsTo('user');
      // get the identifier of the reference
     if (userRef.remoteType() === "link") {
        let link = userRef.link();
      }
     ```
      @method link
     @public
     @return {String} The link Ember Data will use to fetch or reload this belongs-to relationship.
     */
    link() {
      let link;
      let resource = this._resource();
      if (isResourceIdentiferWithRelatedLinks(resource)) {
        if (resource.links) {
          link = resource.links.related;
          link = !link || typeof link === 'string' ? link : link.href;
        }
      }
      return link || null;
    }
    links() {
      let resource = this._resource();
      return resource && resource.links ? resource.links : null;
    }

    /**
     The meta data for the belongs-to relationship.
      Example
      ```javascript
     // models/blog.js
     import Model, { belongsTo } from '@ember-data/model';
     export default Model.extend({
        user: belongsTo({ async: true })
      });
      let blog = store.push({
        data: {
          type: 'blog',
          id: 1,
          relationships: {
            user: {
              links: {
                related: {
                  href: '/articles/1/author'
                },
              },
              meta: {
                lastUpdated: 1458014400000
              }
            }
          }
        }
      });
      let userRef = blog.belongsTo('user');
      userRef.meta() // { lastUpdated: 1458014400000 }
     ```
      @method meta
      @public
     @return {Object} The meta information for the belongs-to relationship.
     */
    meta() {
      let meta = null;
      let resource = this._resource();
      if (resource && resource.meta && typeof resource.meta === 'object') {
        meta = resource.meta;
      }
      return meta;
    }
  }

  var _class$2, _descriptor$2, _token$2, _relatedToken;
  function _initializerDefineProperty$2(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _classPrivateFieldLooseBase$2(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError("attempted to use private field on non-instance"); } return receiver; }
  var id$2 = 0;
  function _classPrivateFieldLooseKey$2(name) { return "__private_" + id$2++ + "_" + name; }
  function _applyDecoratedDescriptor$2(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  /**
    @module @ember-data/store
  */

  /**
   A `BelongsToReference` is a low-level API that allows users and
   addon authors to perform meta-operations on a belongs-to
   relationship.

   @class BelongsToReference
   @public
   @extends Reference
   */
  let BelongsToReference = (_class$2 = (_token$2 = /*#__PURE__*/_classPrivateFieldLooseKey$2("token"), _relatedToken = /*#__PURE__*/_classPrivateFieldLooseKey$2("relatedToken"), class BelongsToReference extends Reference {
    constructor(store, parentIdentifier, belongsToRelationship, key) {
      super(store, parentIdentifier);
      // unsubscribe tokens given to us by the notification manager
      Object.defineProperty(this, _token$2, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _relatedToken, {
        writable: true,
        value: null
      });
      _initializerDefineProperty$2(this, "_ref", _descriptor$2, this);
      this.key = key;
      this.belongsToRelationship = belongsToRelationship;
      this.type = belongsToRelationship.definition.type;
      const parent = internalModelFactoryFor(store).peek(parentIdentifier);
      this.parent = parent.recordReference;
      this.parentIdentifier = parentIdentifier;
      _classPrivateFieldLooseBase$2(this, _token$2)[_token$2] = store._notificationManager.subscribe(parentIdentifier, (_, bucket, notifiedKey) => {
        if ((bucket === 'relationships' || bucket === 'property') && notifiedKey === key) {
          this._ref++;
        }
      });

      // TODO inverse
    }

    destroy() {
      unsubscribe(_classPrivateFieldLooseBase$2(this, _token$2)[_token$2]);
      if (_classPrivateFieldLooseBase$2(this, _relatedToken)[_relatedToken]) {
        unsubscribe(_classPrivateFieldLooseBase$2(this, _relatedToken)[_relatedToken]);
      }
    }
    get _relatedIdentifier() {
      this._ref; // consume the tracked prop
      if (_classPrivateFieldLooseBase$2(this, _relatedToken)[_relatedToken]) {
        unsubscribe(_classPrivateFieldLooseBase$2(this, _relatedToken)[_relatedToken]);
      }
      let resource = this._resource();
      if (resource && resource.data) {
        const identifier = this.store.identifierCache.getOrCreateRecordIdentifier(resource.data);
        _classPrivateFieldLooseBase$2(this, _relatedToken)[_relatedToken] = this.store._notificationManager.subscribe(identifier, (_, bucket, notifiedKey) => {
          if (bucket === 'identity' || (bucket === 'attributes' || bucket === 'property') && notifiedKey === 'id') {
            this._ref++;
          }
        });
        return identifier;
      }
      return null;
    }

    /**
     The `id` of the record that this reference refers to. Together, the
     `type()` and `id()` methods form a composite key for the identity
     map. This can be used to access the id of an async relationship
     without triggering a fetch that would normally happen if you
     attempted to use `record.get('relationship.id')`.
      Example
      ```javascript
     // models/blog.js
     import Model, { belongsTo } from '@ember-data/model';
      export default class BlogModel extends Model {
      @belongsTo({ async: true }) user;
     }
      let blog = store.push({
        data: {
          type: 'blog',
          id: 1,
          relationships: {
            user: {
              data: { type: 'user', id: 1 }
            }
          }
        }
      });
     let userRef = blog.belongsTo('user');
      // get the identifier of the reference
     if (userRef.remoteType() === "id") {
        let id = userRef.id();
      }
     ```
      @method id
      @public
     @return {String} The id of the record in this belongsTo relationship.
     */
    id() {
      return this._relatedIdentifier?.id || null;
    }
    _resource() {
      return this.recordData.getBelongsTo(this.key);
    }

    /**
     `push` can be used to update the data in the relationship and Ember
     Data will treat the new data as the canonical value of this
     relationship on the backend.
      Example
      ```app/models/blog.js
     import Model, { belongsTo } from '@ember-data/model';
      export default class BlogModel extends Model {
        @belongsTo({ async: true }) user;
      }
      let blog = store.push({
        data: {
          type: 'blog',
          id: 1,
          relationships: {
            user: {
              data: { type: 'user', id: 1 }
            }
          }
        }
      });
     let userRef = blog.belongsTo('user');
      // provide data for reference
     userRef.push({
        data: {
          type: 'user',
          id: 1,
          attributes: {
            username: "@user"
          }
        }
      }).then(function(user) {
        userRef.value() === user;
      });
     ```
      @method push
      @public
     @param {Object|Promise} objectOrPromise a promise that resolves to a JSONAPI document object describing the new value of this relationship.
     @return {Promise<record>} A promise that resolves with the new value in this belongs-to relationship.
     */
    async push(data) {
      const jsonApiDoc = await RSVP.resolve(data);
      let record = this.store.push(jsonApiDoc);
      Debug.assertPolymorphicType(this.belongsToRelationship.identifier, this.belongsToRelationship.definition, recordIdentifierFor(record), this.store);
      const {
        graph,
        identifier
      } = this.belongsToRelationship;
      this.store._backburner.join(() => {
        graph.push({
          op: 'replaceRelatedRecord',
          record: identifier,
          field: this.key,
          value: recordIdentifierFor(record)
        });
      });
      return record;
    }

    /**
     `value()` synchronously returns the current value of the belongs-to
     relationship. Unlike `record.get('relationshipName')`, calling
     `value()` on a reference does not trigger a fetch if the async
     relationship is not yet loaded. If the relationship is not loaded
     it will always return `null`.
      Example
      ```javascript
     // models/blog.js
     import Model, { belongsTo } from '@ember-data/model';
      export default class BlogModel extends Model {
       @belongsTo({ async: true }) user;
     }
      let blog = store.push({
        data: {
          type: 'blog',
          id: 1,
          relationships: {
            user: {
              data: { type: 'user', id: 1 }
            }
          }
        }
      });
     let userRef = blog.belongsTo('user');
      userRef.value(); // null
      // provide data for reference
     userRef.push({
        data: {
          type: 'user',
          id: 1,
          attributes: {
            username: "@user"
          }
        }
      }).then(function(user) {
        userRef.value(); // user
      });
     ```
      @method value
      @public
     @return {Model} the record in this relationship
     */
    value() {
      let resource = this._resource();
      if (resource && resource.data) {
        let inverseInternalModel = this.store._internalModelForResource(resource.data);
        if (inverseInternalModel && inverseInternalModel.currentState.isLoaded) {
          return inverseInternalModel.getRecord();
        }
      }
      return null;
    }

    /**
     Loads a record in a belongs-to relationship if it is not already
     loaded. If the relationship is already loaded this method does not
     trigger a new load.
      Example
      ```javascript
     // models/blog.js
     import Model, { belongsTo } from '@ember-data/model';
      export default class BlogModel extends Model {
       @belongsTo({ async: true }) user;
     }
      let blog = store.push({
        data: {
          type: 'blog',
          id: 1,
          relationships: {
            user: {
              data: { type: 'user', id: 1 }
            }
          }
        }
      });
     let userRef = blog.belongsTo('user');
      userRef.value(); // null
      userRef.load().then(function(user) {
        userRef.value() === user
      });
     ```
      You may also pass in an options object whose properties will be
     fed forward. This enables you to pass `adapterOptions` into the
     request given to the adapter via the reference.
      Example
      ```javascript
     userRef.load({ adapterOptions: { isPrivate: true } }).then(function(user) {
       userRef.value() === user;
     });
     ```
     ```app/adapters/user.js
     import Adapter from '@ember-data/adapter';
      export default class UserAdapter extends Adapter {
       findRecord(store, type, id, snapshot) {
         // In the adapter you will have access to adapterOptions.
         let adapterOptions = snapshot.adapterOptions;
       }
     });
     ```
      @method load
      @public
     @param {Object} options the options to pass in.
     @return {Promise} a promise that resolves with the record in this belongs-to relationship.
     */
    load(options) {
      let parentInternalModel = internalModelFactoryFor(this.store).peek(this.parentIdentifier);
      return parentInternalModel.getBelongsTo(this.key, options);
    }

    /**
     Triggers a reload of the value in this relationship. If the
     remoteType is `"link"` Ember Data will use the relationship link to
     reload the relationship. Otherwise it will reload the record by its
     id.
      Example
      ```javascript
     // models/blog.js
     import Model, { belongsTo } from '@ember-data/model';
      export default class BlogModel extends Model {
       @belongsTo({ async: true }) user;
     }
      let blog = store.push({
        data: {
          type: 'blog',
          id: 1,
          relationships: {
            user: {
              data: { type: 'user', id: 1 }
            }
          }
        }
      });
     let userRef = blog.belongsTo('user');
      userRef.reload().then(function(user) {
        userRef.value() === user
      });
     ```
      You may also pass in an options object whose properties will be
     fed forward. This enables you to pass `adapterOptions` into the
     request given to the adapter via the reference. A full example
     can be found in the `load` method.
      Example
      ```javascript
     userRef.reload({ adapterOptions: { isPrivate: true } })
     ```
      @method reload
      @public
     @param {Object} options the options to pass in.
     @return {Promise} a promise that resolves with the record in this belongs-to relationship after the reload has completed.
     */
    reload(options) {
      let parentInternalModel = internalModelFactoryFor(this.store).peek(this.parentIdentifier);
      return parentInternalModel.reloadBelongsTo(this.key, options).then(internalModel => {
        return this.value();
      });
    }
  }), (_descriptor$2 = _applyDecoratedDescriptor$2(_class$2.prototype, "_ref", [tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 0;
    }
  }), _applyDecoratedDescriptor$2(_class$2.prototype, "_relatedIdentifier", [emberCachedDecoratorPolyfill.cached, compat.dependentKeyCompat], Object.getOwnPropertyDescriptor(_class$2.prototype, "_relatedIdentifier"), _class$2.prototype)), _class$2);

  var _class$1, _descriptor$1, _token$1, _identifier$1, _relatedTokenMap;
  function _initializerDefineProperty$1(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _classPrivateFieldLooseBase$1(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError("attempted to use private field on non-instance"); } return receiver; }
  var id$1 = 0;
  function _classPrivateFieldLooseKey$1(name) { return "__private_" + id$1++ + "_" + name; }
  function _applyDecoratedDescriptor$1(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  /**
    @module @ember-data/store
  */

  /**
   A `HasManyReference` is a low-level API that allows users and addon
   authors to perform meta-operations on a has-many relationship.

   @class HasManyReference
   @public
   @extends Reference
   */
  let HasManyReference = (_class$1 = (_token$1 = /*#__PURE__*/_classPrivateFieldLooseKey$1("token"), _identifier$1 = /*#__PURE__*/_classPrivateFieldLooseKey$1("identifier"), _relatedTokenMap = /*#__PURE__*/_classPrivateFieldLooseKey$1("relatedTokenMap"), class HasManyReference extends Reference {
    constructor(store, parentIdentifier, hasManyRelationship, key) {
      super(store, parentIdentifier);
      // unsubscribe tokens given to us by the notification manager
      Object.defineProperty(this, _token$1, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _identifier$1, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _relatedTokenMap, {
        writable: true,
        value: void 0
      });
      _initializerDefineProperty$1(this, "_ref", _descriptor$1, this);
      this.key = key;
      this.hasManyRelationship = hasManyRelationship;
      this.type = hasManyRelationship.definition.type;
      this.parent = internalModelFactoryFor(store).peek(parentIdentifier).recordReference;
      _classPrivateFieldLooseBase$1(this, _identifier$1)[_identifier$1] = parentIdentifier;
      _classPrivateFieldLooseBase$1(this, _token$1)[_token$1] = store._notificationManager.subscribe(parentIdentifier, (_, bucket, notifiedKey) => {
        if ((bucket === 'relationships' || bucket === 'property') && notifiedKey === key) {
          this._ref++;
        }
      });
      _classPrivateFieldLooseBase$1(this, _relatedTokenMap)[_relatedTokenMap] = new Map();
      // TODO inverse
    }

    destroy() {
      unsubscribe(_classPrivateFieldLooseBase$1(this, _token$1)[_token$1]);
      _classPrivateFieldLooseBase$1(this, _relatedTokenMap)[_relatedTokenMap].forEach(token => {
        unsubscribe(token);
      });
      _classPrivateFieldLooseBase$1(this, _relatedTokenMap)[_relatedTokenMap].clear();
    }
    get _relatedIdentifiers() {
      this._ref; // consume the tracked prop

      let resource = this._resource();
      _classPrivateFieldLooseBase$1(this, _relatedTokenMap)[_relatedTokenMap].forEach(token => {
        unsubscribe(token);
      });
      _classPrivateFieldLooseBase$1(this, _relatedTokenMap)[_relatedTokenMap].clear();
      if (resource && resource.data) {
        return resource.data.map(resourceIdentifier => {
          const identifier = this.store.identifierCache.getOrCreateRecordIdentifier(resourceIdentifier);
          const token = this.store._notificationManager.subscribe(identifier, (_, bucket, notifiedKey) => {
            if (bucket === 'identity' || (bucket === 'attributes' || bucket === 'property') && notifiedKey === 'id') {
              this._ref++;
            }
          });
          _classPrivateFieldLooseBase$1(this, _relatedTokenMap)[_relatedTokenMap].set(identifier, token);
          return identifier;
        });
      }
      return [];
    }
    _resource() {
      return this.recordData.getHasMany(this.key);
    }

    /**
     This returns a string that represents how the reference will be
     looked up when it is loaded. If the relationship has a link it will
     use the "link" otherwise it defaults to "id".
      Example
      ```app/models/post.js
     import Model, { hasMany } from '@ember-data/model';
      export default class PostModel extends Model {
       @hasMany({ async: true }) comments;
     }
     ```
      ```javascript
     let post = store.push({
       data: {
         type: 'post',
         id: 1,
         relationships: {
           comments: {
             data: [{ type: 'comment', id: 1 }]
           }
         }
       }
     });
      let commentsRef = post.hasMany('comments');
      // get the identifier of the reference
     if (commentsRef.remoteType() === "ids") {
       let ids = commentsRef.ids();
     } else if (commentsRef.remoteType() === "link") {
       let link = commentsRef.link();
     }
     ```
      @method remoteType
     @public
     @return {String} The name of the remote type. This should either be `link` or `ids`
     */
    remoteType() {
      let value = this._resource();
      if (value && value.links && value.links.related) {
        return 'link';
      }
      return 'ids';
    }

    /**
     `ids()` returns an array of the record IDs in this relationship.
      Example
      ```app/models/post.js
     import Model, { hasMany } from '@ember-data/model';
      export default class PostModel extends Model {
       @hasMany({ async: true }) comments;
     }
     ```
      ```javascript
     let post = store.push({
       data: {
         type: 'post',
         id: 1,
         relationships: {
           comments: {
             data: [{ type: 'comment', id: 1 }]
           }
         }
       }
     });
      let commentsRef = post.hasMany('comments');
      commentsRef.ids(); // ['1']
     ```
      @method ids
      @public
     @return {Array} The ids in this has-many relationship
     */
    ids() {
      return this._relatedIdentifiers.map(identifier => identifier.id);
    }

    /**
     `push` can be used to update the data in the relationship and Ember
     Data will treat the new data as the canonical value of this
     relationship on the backend.
      Example
      ```app/models/post.js
     import Model, { hasMany } from '@ember-data/model';
      export default class PostModel extends Model {
       @hasMany({ async: true }) comments;
     }
     ```
      ```
     let post = store.push({
       data: {
         type: 'post',
         id: 1,
         relationships: {
           comments: {
             data: [{ type: 'comment', id: 1 }]
           }
         }
       }
     });
      let commentsRef = post.hasMany('comments');
      commentsRef.ids(); // ['1']
      commentsRef.push([
     [{ type: 'comment', id: 2 }],
     [{ type: 'comment', id: 3 }],
     ])
      commentsRef.ids(); // ['2', '3']
     ```
      @method push
      @public
     @param {Array|Promise} objectOrPromise a promise that resolves to a JSONAPI document object describing the new value of this relationship.
     @return {ManyArray}
     */
    async push(objectOrPromise) {
      const payload = await RSVP.resolve(objectOrPromise);
      let array;
      if (!Array.isArray(payload) && typeof payload === 'object' && Array.isArray(payload.data)) {
        array = payload.data;
      } else {
        array = payload;
      }
      const internalModel = internalModelFactoryFor(this.store).peek(_classPrivateFieldLooseBase$1(this, _identifier$1)[_identifier$1]);
      const {
        store
      } = this;
      let identifiers = array.map(obj => {
        let record;
        if ('data' in obj) {
          // TODO deprecate pushing non-valid JSON:API here
          record = store.push(obj);
        } else {
          record = store.push({
            data: obj
          });
        }
        {
          let relationshipMeta = this.hasManyRelationship.definition;
          let identifier = this.hasManyRelationship.identifier;
          Debug.assertPolymorphicType(identifier, relationshipMeta, recordIdentifierFor(record), store);
        }
        return recordIdentifierFor(record);
      });
      const {
        graph,
        identifier
      } = this.hasManyRelationship;
      store._backburner.join(() => {
        graph.push({
          op: 'replaceRelatedRecords',
          record: identifier,
          field: this.key,
          value: identifiers
        });
      });

      // TODO IGOR it seems wrong that we were returning the many array here
      return internalModel.getHasMany(this.key);
    }
    _isLoaded() {
      let hasRelationshipDataProperty = this.hasManyRelationship.state.hasReceivedData;
      if (!hasRelationshipDataProperty) {
        return false;
      }
      let members = this.hasManyRelationship.currentState;

      //TODO Igor cleanup
      return members.every(identifier => {
        let internalModel = this.store._internalModelForResource(identifier);
        return internalModel.currentState.isLoaded === true;
      });
    }

    /**
     `value()` synchronously returns the current value of the has-many
     relationship. Unlike `record.get('relationshipName')`, calling
     `value()` on a reference does not trigger a fetch if the async
     relationship is not yet loaded. If the relationship is not loaded
     it will always return `null`.
      Example
      ```app/models/post.js
     import Model, { hasMany } from '@ember-data/model';
      export default class PostModel extends Model {
       @hasMany({ async: true }) comments;
     }
     ```
      ```javascript
     let post = store.push({
       data: {
         type: 'post',
         id: 1,
         relationships: {
           comments: {
             data: [{ type: 'comment', id: 1 }]
           }
         }
       }
     });
      let commentsRef = post.hasMany('comments');
      post.get('comments').then(function(comments) {
       commentsRef.value() === comments
     })
     ```
      @method value
      @public
     @return {ManyArray}
     */
    value() {
      const internalModel = internalModelFactoryFor(this.store).peek(_classPrivateFieldLooseBase$1(this, _identifier$1)[_identifier$1]);
      if (this._isLoaded()) {
        return internalModel.getManyArray(this.key);
      }
      return null;
    }

    /**
     Loads the relationship if it is not already loaded.  If the
     relationship is already loaded this method does not trigger a new
     load. This causes a request to the specified
     relationship link or reloads all items currently in the relationship.
      Example
      ```app/models/post.js
     import Model, { hasMany } from '@ember-data/model';
      export default class PostModel extends Model {
       @hasMany({ async: true }) comments;
     }
     ```
      ```javascript
     let post = store.push({
       data: {
         type: 'post',
         id: 1,
         relationships: {
           comments: {
             data: [{ type: 'comment', id: 1 }]
           }
         }
       }
     });
      let commentsRef = post.hasMany('comments');
      commentsRef.load().then(function(comments) {
       //...
     });
     ```
      You may also pass in an options object whose properties will be
     fed forward. This enables you to pass `adapterOptions` into the
     request given to the adapter via the reference.
      Example
      ```javascript
     commentsRef.load({ adapterOptions: { isPrivate: true } })
       .then(function(comments) {
         //...
       });
     ```
      ```app/adapters/comment.js
     export default ApplicationAdapter.extend({
       findMany(store, type, id, snapshots) {
         // In the adapter you will have access to adapterOptions.
         let adapterOptions = snapshots[0].adapterOptions;
       }
     });
     ```
      @method load
      @public
     @param {Object} options the options to pass in.
     @return {Promise} a promise that resolves with the ManyArray in
     this has-many relationship.
     */
    load(options) {
      const internalModel = internalModelFactoryFor(this.store).peek(_classPrivateFieldLooseBase$1(this, _identifier$1)[_identifier$1]);
      return internalModel.getHasMany(this.key, options);
    }

    /**
     Reloads this has-many relationship. This causes a request to the specified
     relationship link or reloads all items currently in the relationship.
      Example
      ```app/models/post.js
     import Model, { hasMany } from '@ember-data/model';
      export default class PostModel extends Model {
       @hasMany({ async: true }) comments;
     }
     ```
      ```javascript
     let post = store.push({
       data: {
         type: 'post',
         id: 1,
         relationships: {
           comments: {
             data: [{ type: 'comment', id: 1 }]
           }
         }
       }
     });
      let commentsRef = post.hasMany('comments');
      commentsRef.reload().then(function(comments) {
       //...
     });
     ```
      You may also pass in an options object whose properties will be
     fed forward. This enables you to pass `adapterOptions` into the
     request given to the adapter via the reference. A full example
     can be found in the `load` method.
      Example
      ```javascript
     commentsRef.reload({ adapterOptions: { isPrivate: true } })
     ```
      @method reload
      @public
     @param {Object} options the options to pass in.
     @return {Promise} a promise that resolves with the ManyArray in this has-many relationship.
     */
    reload(options) {
      const internalModel = internalModelFactoryFor(this.store).peek(_classPrivateFieldLooseBase$1(this, _identifier$1)[_identifier$1]);
      return internalModel.reloadHasMany(this.key, options);
    }
  }), (_descriptor$1 = _applyDecoratedDescriptor$1(_class$1.prototype, "_ref", [tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 0;
    }
  }), _applyDecoratedDescriptor$1(_class$1.prototype, "_relatedIdentifiers", [emberCachedDecoratorPolyfill.cached, compat.dependentKeyCompat], Object.getOwnPropertyDescriptor(_class$1.prototype, "_relatedIdentifiers"), _class$1.prototype)), _class$1);

  var _class, _descriptor, _token, _identifier;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError("attempted to use private field on non-instance"); } return receiver; }
  var id = 0;
  function _classPrivateFieldLooseKey(name) { return "__private_" + id++ + "_" + name; }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  /**
    @module @ember-data/store
  */

  /**
     A `RecordReference` is a low-level API that allows users and
     addon authors to perform meta-operations on a record.

     @class RecordReference
     @public
     @extends Reference
  */
  let RecordReference = (_class = (_token = /*#__PURE__*/_classPrivateFieldLooseKey("token"), _identifier = /*#__PURE__*/_classPrivateFieldLooseKey("identifier"), class RecordReference extends Reference {
    constructor(store, identifier) {
      super(store, identifier);
      // unsubscribe token given to us by the notification manager
      Object.defineProperty(this, _token, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _identifier, {
        writable: true,
        value: void 0
      });
      _initializerDefineProperty(this, "_ref", _descriptor, this);
      this.store = store;
      _classPrivateFieldLooseBase(this, _identifier)[_identifier] = identifier;
      _classPrivateFieldLooseBase(this, _token)[_token] = store._notificationManager.subscribe(identifier, (_, bucket, notifiedKey) => {
        if (bucket === 'identity' || (bucket === 'attributes' || bucket === 'property') && notifiedKey === 'id') {
          this._ref++;
        }
      });
    }
    destroy() {
      unsubscribe(_classPrivateFieldLooseBase(this, _token)[_token]);
    }
    get type() {
      return this.identifier().type;
    }
    get _id() {
      this._ref; // consume the tracked prop
      let identifier = this.identifier();
      if (identifier) {
        return identifier.id;
      }
      return null;
    }

    /**
       The `id` of the record that this reference refers to.
        Together, the `type` and `id` properties form a composite key for
       the identity map.
        Example
        ```javascript
       let userRef = store.getReference('user', 1);
        userRef.id(); // '1'
       ```
        @method id
      @public
       @return {String} The id of the record.
    */
    id() {
      return this._id;
    }

    /**
       The `identifier` of the record that this reference refers to.
        Together, the `type` and `id` properties form a composite key for
       the identity map.
        Example
        ```javascript
       let userRef = store.getReference('user', 1);
        userRef.identifier(); // '1'
       ```
        @method identifier
      @public
       @return {String} The identifier of the record.
    */
    identifier() {
      return _classPrivateFieldLooseBase(this, _identifier)[_identifier];
    }

    /**
       How the reference will be looked up when it is loaded. Currently
       this always returns `identity` to signify that a record will be
       loaded by its `type` and `id`.
        Example
        ```javascript
       const userRef = store.getReference('user', 1);
        userRef.remoteType(); // 'identity'
       ```
        @method remoteType
       @public
       @return {String} 'identity'
    */
    remoteType() {
      return 'identity';
    }

    /**
      This API allows you to provide a reference with new data. The
      simplest usage of this API is similar to `store.push`: you provide a
      normalized hash of data and the object represented by the reference
      will update.
       If you pass a promise to `push`, Ember Data will not ask the adapter
      for the data if another attempt to fetch it is made in the
      interim. When the promise resolves, the underlying object is updated
      with the new data, and the promise returned by *this function* is resolved
      with that object.
       For example, `recordReference.push(promise)` will be resolved with a
      record.
        Example
        ```javascript
       let userRef = store.getReference('user', 1);
        // provide data for reference
       userRef.push({
         data: {
           id: "1",
           type: "user",
           attributes: {
             username: "@user"
           }
         }
       }).then(function(user) {
         userRef.value() === user;
       });
       ```
       @method push
      @public
      @param objectOrPromise a JSON:API ResourceDocument or a promise resolving to one
      @return a promise for the value (record or relationship)
    */
    push(objectOrPromise) {
      return RSVP.resolve(objectOrPromise).then(data => {
        return this.store.push(data);
      });
    }

    /**
      If the entity referred to by the reference is already loaded, it is
      present as `reference.value`. Otherwise the value returned by this function
      is `null`.
        Example
        ```javascript
       let userRef = store.getReference('user', 1);
        userRef.value(); // user
       ```
        @method value
      @public
       @return {Model} the record for this RecordReference
    */
    value() {
      if (this.id() !== null) {
        let internalModel = internalModelFactoryFor(this.store).peek(_classPrivateFieldLooseBase(this, _identifier)[_identifier]);
        if (internalModel && internalModel.currentState.isLoaded) {
          return internalModel.getRecord();
        }
      }
      return null;
    }

    /**
       Triggers a fetch for the backing entity based on its `remoteType`
       (see `remoteType` definitions per reference type).
        Example
        ```javascript
       let userRef = store.getReference('user', 1);
        // load user (via store.find)
       userRef.load().then(...)
       ```
        @method load
      @public
       @return {Promise<record>} the record for this RecordReference
    */
    load() {
      const id = this.id();
      if (id !== null) {
        return this.store.findRecord(this.type, id);
      }
      throw new Error(`Unable to fetch record of type ${this.type} without an id`);
    }

    /**
       Reloads the record if it is already loaded. If the record is not
       loaded it will load the record via `store.findRecord`
        Example
        ```javascript
       let userRef = store.getReference('user', 1);
        // or trigger a reload
       userRef.reload().then(...)
       ```
        @method reload
      @public
       @return {Promise<record>} the record for this RecordReference
    */
    reload() {
      const id = this.id();
      if (id !== null) {
        return this.store.findRecord(this.type, id, {
          reload: true
        });
      }
      throw new Error(`Unable to fetch record of type ${this.type} without an id`);
    }
  }), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "_ref", [tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 0;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "_id", [emberCachedDecoratorPolyfill.cached, compat.dependentKeyCompat], Object.getOwnPropertyDescriptor(_class.prototype, "_id"), _class.prototype)), _class);

  /*
    This file encapsulates the various states that a record can transition
    through during its lifecycle.
  */
  /**
    ### State

    Each record has a `currentState` property that explicitly tracks what
    state a record is in at any given time. For instance, if a record is
    newly created and has not yet been sent to the adapter to be saved,
    it would be in the `root.loaded.created.uncommitted` state.  If a
    record has had local modifications made to it that are in the
    process of being saved, the record would be in the
    `root.loaded.updated.inFlight` state. (This state path will be
    explained in more detail below.)

    Events are sent by the record or its store to the record's
    `currentState` property. How the state reacts to these events is
    dependent on which state it is in. In some states, certain events
    will be invalid and will cause an exception to be raised.

    States are hierarchical and every state is a sub-state of the
    `RootState`. For example, a record can be in the
    `root.deleted.uncommitted` state then transitions into the
    `root.deleted.inFlight` state. If a child state does not implement
    an event handler, the state manager will attempt to invoke the event
    on all parent states until the root state is reached. The state
    hierarchy of a record is described in terms of a path string. You
    can determine a record's current state by getting the state's
    `stateName` property:

    ```javascript
    record.get('currentState.stateName');
    //=> "root.created.uncommitted"
     ```

    The hierarchy of valid states that ship with ember data looks like
    this:

    ```text
    * root
      * deleted
        * saved
        * uncommitted
        * inFlight
      * empty
      * loaded
        * created
          * uncommitted
          * inFlight
        * saved
        * updated
          * uncommitted
          * inFlight
      * loading
    ```

    The `Model` states are themselves stateless. What that means is
    that, the hierarchical states that each of *those* points to is a
    shared data structure. For performance reasons, instead of each
    record getting its own copy of the hierarchy of states, each record
    points to this global, immutable shared instance. How does a state
    know which record it should be acting on? We pass the record
    instance into the state's event handlers as the first argument.

    The record passed as the first parameter is where you should stash
    state about the record if needed; you should never store data on the state
    object itself.

    ### Events and Flags

    A state may implement zero or more events and flags.

    #### Events

    Events are named functions that are invoked when sent to a record. The
    record will first look for a method with the given name on the
    current state. If no method is found, it will search the current
    state's parent, and then its grandparent, and so on until reaching
    the top of the hierarchy. If the root is reached without an event
    handler being found, an exception will be raised. This can be very
    helpful when debugging new features.

    Here's an example implementation of a state with a `myEvent` event handler:

    ```javascript
    aState: State.create({
      myEvent: function(manager, param) {
        console.log("Received myEvent with", param);
      }
    })
    ```

    To trigger this event:

    ```javascript
    record.send('myEvent', 'foo');
    //=> "Received myEvent with foo"
    ```

    Note that an optional parameter can be sent to a record's `send()` method,
    which will be passed as the second parameter to the event handler.

    Events should transition to a different state if appropriate. This can be
    done by calling the record's `transitionTo()` method with a path to the
    desired state. The state manager will attempt to resolve the state path
    relative to the current state. If no state is found at that path, it will
    attempt to resolve it relative to the current state's parent, and then its
    parent, and so on until the root is reached. For example, imagine a hierarchy
    like this:

        * created
          * uncommitted <-- currentState
          * inFlight
        * updated
          * inFlight

    If we are currently in the `uncommitted` state, calling
    `transitionTo('inFlight')` would transition to the `created.inFlight` state,
    while calling `transitionTo('updated.inFlight')` would transition to
    the `updated.inFlight` state.

    Remember that *only events* should ever cause a state transition. You should
    never call `transitionTo()` from outside a state's event handler. If you are
    tempted to do so, create a new event and send that to the state manager.

    #### Flags

    Flags are Boolean values that can be used to introspect a record's current
    state in a more user-friendly way than examining its state path. For example,
    instead of doing this:

    ```javascript
    var statePath = record.get('stateManager.currentPath');
    if (statePath === 'created.inFlight') {
      doSomething();
    }
    ```

    You can say:

    ```javascript
    if (record.get('isNew') && record.get('isSaving')) {
      doSomething();
    }
    ```

    If your state does not set a value for a given flag, the value will
    be inherited from its parent (or the first place in the state hierarchy
    where it is defined).

    The current set of flags are defined below. If you want to add a new flag,
    in addition to the area below, you will also need to declare it in the
    `Model` class.


     * [isEmpty](Model/properties/isEmpty?anchor=isEmpty)
     * [isLoading](Model/properties/isLoading?anchor=isLoading)
     * [isLoaded](Model/properties/isLoaded?anchor=isLoaded)
     * [hasDirtyAttributes](Model/properties/hasDirtyAttributes?anchor=hasDirtyAttributes)
     * [isSaving](Model/properties/isSaving?anchor=isSaving)
     * [isDeleted](Model/properties/isDeleted?anchor=isDeleted)
     * [isNew](Model/properties/isNew?anchor=isNew)
     * [isValid](Model/properties/isValid?anchor=isValid)

    @class RootState
    @internal
  */

  function didSetProperty(internalModel, context) {
    if (context.isDirty) {
      internalModel.send('becomeDirty');
    } else {
      internalModel.send('propertyWasReset');
    }
  }

  // Implementation notes:
  //
  // Each state has a boolean value for all of the following flags:
  //
  // * isLoaded: The record has a populated `data` property. When a
  //   record is loaded via `store.find`, `isLoaded` is false
  //   until the adapter sets it. When a record is created locally,
  //   its `isLoaded` property is always true.
  // * isDirty: The record has local changes that have not yet been
  //   saved by the adapter. This includes records that have been
  //   created (but not yet saved) or deleted.
  // * isSaving: The record has been committed, but
  //   the adapter has not yet acknowledged that the changes have
  //   been persisted to the backend.
  // * isDeleted: The record was marked for deletion. When `isDeleted`
  //   is true and `isDirty` is true, the record is deleted locally
  //   but the deletion was not yet persisted. When `isSaving` is
  //   true, the change is in-flight. When both `isDirty` and
  //   `isSaving` are false, the change has persisted.
  // * isNew: The record was created on the client and the adapter
  //   did not yet report that it was successfully saved.
  // * isValid: The adapter did not report any server-side validation
  //   failures.

  // The dirty state is a abstract state whose functionality is
  // shared between the `created` and `updated` states.
  //
  // The deleted state shares the `isDirty` flag with the
  // subclasses of `DirtyState`, but with a very different
  // implementation.
  //
  // Dirty states have three child states:
  //
  // `uncommitted`: the store has not yet handed off the record
  //   to be saved.
  // `inFlight`: the store has handed off the record to be saved,
  //   but the adapter has not yet acknowledged success.
  // `invalid`: the record has invalid information and cannot be
  //   sent to the adapter yet.
  const DirtyState = {
    initialState: 'uncommitted',
    // FLAGS
    isDirty: true,
    // SUBSTATES

    // When a record first becomes dirty, it is `uncommitted`.
    // This means that there are local pending changes, but they
    // have not yet begun to be saved, and are not invalid.
    uncommitted: {
      // EVENTS
      didSetProperty,
      //TODO(Igor) reloading now triggers a
      //loadingData event, though it seems fine?
      loadingData() {},
      propertyWasReset(internalModel, name) {
        if (!internalModel.hasChangedAttributes()) {
          internalModel.send('rolledBack');
        }
      },
      pushedData(internalModel) {
        if (!internalModel.hasChangedAttributes()) {
          internalModel.transitionTo('loaded.saved');
        }
      },
      becomeDirty() {},
      willCommit(internalModel) {
        internalModel.transitionTo('inFlight');
      },
      reloadRecord(internalModel, {
        resolve,
        options
      }) {
        resolve(internalModel.store._reloadRecord(internalModel, options));
      },
      rolledBack(internalModel) {
        internalModel.transitionTo('loaded.saved');
        internalModel.triggerLater('rolledBack');
      },
      becameInvalid(internalModel) {
        internalModel.transitionTo('invalid');
      },
      rollback(internalModel) {
        internalModel.rollbackAttributes();
        internalModel.triggerLater('ready');
      }
    },
    // Once a record has been handed off to the adapter to be
    // saved, it is in the 'in flight' state. Changes to the
    // record cannot be made during this window.
    inFlight: {
      // FLAGS
      isSaving: true,
      // EVENTS
      didSetProperty,
      becomeDirty() {},
      pushedData() {},
      unloadRecord: assertAgainstUnloadRecord,
      // TODO: More robust semantics around save-while-in-flight
      willCommit() {},
      didCommit(internalModel) {
        internalModel.transitionTo('saved');
        internalModel.send('invokeLifecycleCallbacks', this.dirtyType);
      },
      rolledBack(internalModel) {
        internalModel.triggerLater('rolledBack');
      },
      becameInvalid(internalModel) {
        internalModel.transitionTo('invalid');
        internalModel.send('invokeLifecycleCallbacks');
      },
      becameError(internalModel) {
        internalModel.transitionTo('uncommitted');
        internalModel.triggerLater('becameError', internalModel);
      }
    },
    // A record is in the `invalid` if the adapter has indicated
    // the the record failed server-side invalidations.
    invalid: {
      // FLAGS
      isValid: false,
      // EVENTS
      deleteRecord(internalModel) {
        internalModel.transitionTo('deleted.uncommitted');
      },
      didSetProperty(internalModel, context) {
        internalModel.getRecord().errors._remove(context.name);
        didSetProperty(internalModel, context);
        if (!internalModel.hasErrors()) {
          this.becameValid(internalModel);
        }
      },
      becameInvalid() {},
      becomeDirty() {},
      pushedData() {},
      willCommit(internalModel) {
        clearErrorMessages(internalModel);
        internalModel.transitionTo('inFlight');
      },
      rolledBack(internalModel) {
        clearErrorMessages(internalModel);
        internalModel.transitionTo('loaded.saved');
        internalModel.triggerLater('ready');
      },
      becameValid(internalModel) {
        internalModel.transitionTo('uncommitted');
      },
      invokeLifecycleCallbacks(internalModel) {
        internalModel.triggerLater('becameInvalid', internalModel);
      }
    }
  };

  // The created and updated states are created outside the state
  // chart so we can reopen their substates and add mixins as
  // necessary.

  function deepClone(object) {
    const clone = {};
    let value;
    for (let prop in object) {
      value = object[prop];
      if (value && typeof value === 'object') {
        clone[prop] = deepClone(value);
      } else {
        clone[prop] = value;
      }
    }
    return clone;
  }
  function mixin(original, hash) {
    for (let prop in hash) {
      original[prop] = hash[prop];
    }
    return original;
  }
  function dirtyState(options) {
    var newState = deepClone(DirtyState);
    return mixin(newState, options);
  }
  const createdState = dirtyState({
    dirtyType: 'created',
    // FLAGS
    isNew: true,
    setup(internalModel) {
      internalModel.store.recordArrayManager.recordDidChange(internalModel.identifier);
    }
  });
  createdState.invalid.rolledBack = function (internalModel) {
    internalModel.transitionTo('deleted.saved');
    internalModel.triggerLater('rolledBack');
  };
  createdState.uncommitted.rolledBack = function (internalModel) {
    internalModel.transitionTo('deleted.saved');
    internalModel.triggerLater('rolledBack');
  };
  const updatedState = dirtyState({
    dirtyType: 'updated'
  });
  function createdStateDeleteRecord(internalModel) {
    internalModel.transitionTo('deleted.saved');
    internalModel.send('invokeLifecycleCallbacks');
  }
  createdState.uncommitted.deleteRecord = createdStateDeleteRecord;
  createdState.invalid.deleteRecord = createdStateDeleteRecord;
  createdState.uncommitted.rollback = function (internalModel) {
    DirtyState.uncommitted.rollback.apply(this, arguments);
    internalModel.transitionTo('deleted.saved');
  };
  createdState.uncommitted.pushedData = function (internalModel) {
    // TODO @runspired consider where to do this once we kill off state machine
    internalModel.store._notificationManager.notify(internalModel.identifier, 'identity');
    internalModel.transitionTo('loaded.updated.uncommitted');
    internalModel.triggerLater('didLoad');
  };
  createdState.uncommitted.propertyWasReset = function () {};
  function assertAgainstUnloadRecord(internalModel) {
    (debug.assert('You can only unload a record which is not inFlight. `' + internalModel + '`', false));
  }
  updatedState.invalid.becameValid = function (internalModel) {
    // we're eagerly transition into the loaded.saved state, even though we could
    // be still dirty; but the setup hook of the loaded.saved state checks for
    // dirty attributes and transitions into the corresponding dirty state
    internalModel.transitionTo('loaded.saved');
  };
  updatedState.inFlight.unloadRecord = assertAgainstUnloadRecord;
  updatedState.uncommitted.deleteRecord = function (internalModel) {
    internalModel.transitionTo('deleted.uncommitted');
  };
  updatedState.invalid.rolledBack = function (internalModel) {
    clearErrorMessages(internalModel);
    internalModel.transitionTo('loaded.saved');
    internalModel.triggerLater('rolledBack');
  };
  const RootState = {
    // FLAGS
    isEmpty: false,
    isLoading: false,
    isLoaded: false,
    isDirty: false,
    isSaving: false,
    isDeleted: false,
    isNew: false,
    isValid: true,
    // DEFAULT EVENTS

    // Trying to roll back if you're not in the dirty state
    // doesn't change your state. For example, if you're in the
    // in-flight state, rolling back the record doesn't move
    // you out of the in-flight state.
    rolledBack() {},
    unloadRecord(internalModel) {},
    propertyWasReset() {},
    // SUBSTATES

    // A record begins its lifecycle in the `empty` state.
    // If its data will come from the adapter, it will
    // transition into the `loading` state. Otherwise, if
    // the record is being created on the client, it will
    // transition into the `created` state.
    empty: {
      isEmpty: true,
      // EVENTS
      loadingData(internalModel, promise) {
        internalModel.transitionTo('loading');
      },
      loadedData(internalModel) {
        internalModel.transitionTo('loaded.created.uncommitted');
        internalModel.triggerLater('ready');
      },
      pushedData(internalModel) {
        internalModel.transitionTo('loaded.saved');
        internalModel.triggerLater('didLoad');
        internalModel.triggerLater('ready');
      },
      // Record is already in an empty state, triggering transition to empty here
      // produce an error.
      notFound() {}
    },
    // A record enters this state when the store asks
    // the adapter for its data. It remains in this state
    // until the adapter provides the requested data.
    //
    // Usually, this process is asynchronous, using an
    // XHR to retrieve the data.
    loading: {
      // FLAGS
      isLoading: true,
      exit(internalModel) {
        internalModel._promiseProxy = null;
      },
      loadingData() {},
      // EVENTS
      pushedData(internalModel) {
        internalModel.transitionTo('loaded.saved');
        internalModel.triggerLater('didLoad');
        internalModel.triggerLater('ready');
        //TODO this seems out of place here
        internalModel.didCleanError();
      },
      becameError(internalModel) {
        internalModel.triggerLater('becameError', internalModel);
      },
      notFound(internalModel) {
        internalModel.transitionTo('empty');
      }
    },
    // A record enters this state when its data is populated.
    // Most of a record's lifecycle is spent inside substates
    // of the `loaded` state.
    loaded: {
      initialState: 'saved',
      // FLAGS
      isLoaded: true,
      //TODO(Igor) Reloading now triggers a loadingData event,
      //but it should be ok?
      loadingData() {},
      // SUBSTATES

      // If there are no local changes to a record, it remains
      // in the `saved` state.
      saved: {
        setup(internalModel) {
          if (internalModel.hasChangedAttributes()) {
            internalModel.adapterDidDirty();
          }
        },
        // EVENTS
        didSetProperty,
        pushedData() {},
        becomeDirty(internalModel) {
          internalModel.transitionTo('updated.uncommitted');
        },
        willCommit(internalModel) {
          internalModel.transitionTo('updated.inFlight');
        },
        reloadRecord() {},
        deleteRecord(internalModel) {
          internalModel.transitionTo('deleted.uncommitted');
        },
        unloadRecord(internalModel) {},
        didCommit() {},
        // loaded.saved.notFound would be triggered by a failed
        // `reload()` on an unchanged record
        notFound() {}
      },
      // A record is in this state after it has been locally
      // created but before the adapter has indicated that
      // it has been saved.
      created: createdState,
      // A record is in this state if it has already been
      // saved to the server, but there are new local changes
      // that have not yet been saved.
      updated: updatedState
    },
    // A record is in this state if it was deleted from the store.
    deleted: {
      initialState: 'uncommitted',
      dirtyType: 'deleted',
      // FLAGS
      isDeleted: true,
      isLoaded: true,
      isDirty: true,
      // TRANSITIONS
      setup(internalModel) {
        internalModel.store.recordArrayManager.recordDidChange(internalModel.identifier);
      },
      // SUBSTATES

      // When a record is deleted, it enters the `start`
      // state. It will exit this state when the record
      // starts to commit.
      uncommitted: {
        // EVENTS

        willCommit(internalModel) {
          internalModel.transitionTo('inFlight');
        },
        rollback(internalModel) {
          internalModel.rollbackAttributes();
          internalModel.triggerLater('ready');
        },
        pushedData() {},
        becomeDirty() {},
        deleteRecord() {},
        rolledBack(internalModel) {
          internalModel.transitionTo('loaded.saved');
          internalModel.triggerLater('ready');
          internalModel.triggerLater('rolledBack');
        }
      },
      // After a record starts committing, but
      // before the adapter indicates that the deletion
      // has saved to the server, a record is in the
      // `inFlight` substate of `deleted`.
      inFlight: {
        // FLAGS
        isSaving: true,
        // EVENTS

        unloadRecord: assertAgainstUnloadRecord,
        // TODO: More robust semantics around save-while-in-flight
        willCommit() {},
        didCommit(internalModel) {
          internalModel.transitionTo('saved');
          internalModel.send('invokeLifecycleCallbacks');
        },
        becameError(internalModel) {
          internalModel.transitionTo('uncommitted');
          internalModel.triggerLater('becameError', internalModel);
        },
        becameInvalid(internalModel) {
          internalModel.transitionTo('invalid');
          internalModel.triggerLater('becameInvalid', internalModel);
        }
      },
      // Once the adapter indicates that the deletion has
      // been saved, the record enters the `saved` substate
      // of `deleted`.
      saved: {
        // FLAGS
        isDirty: false,
        setup(internalModel) {
          internalModel.removeFromInverseRelationships();
        },
        invokeLifecycleCallbacks(internalModel) {
          internalModel.triggerLater('didDelete', internalModel);
          internalModel.triggerLater('didCommit', internalModel);
        },
        willCommit() {},
        didCommit() {},
        pushedData() {}
      },
      invalid: {
        isValid: false,
        didSetProperty(internalModel, context) {
          internalModel.getRecord().errors._remove(context.name);
          didSetProperty(internalModel, context);
          if (!internalModel.hasErrors()) {
            this.becameValid(internalModel);
          }
        },
        becameInvalid() {},
        becomeDirty() {},
        deleteRecord() {},
        willCommit() {},
        rolledBack(internalModel) {
          clearErrorMessages(internalModel);
          internalModel.transitionTo('loaded.saved');
          internalModel.triggerLater('ready');
        },
        becameValid(internalModel) {
          internalModel.transitionTo('uncommitted');
        }
      }
    },
    invokeLifecycleCallbacks(internalModel, dirtyType) {
      if (dirtyType === 'created') {
        internalModel.triggerLater('didCreate', internalModel);
      } else {
        internalModel.triggerLater('didUpdate', internalModel);
      }
      internalModel.triggerLater('didCommit', internalModel);
    }
  };
  function wireState(object, parent, name) {
    // TODO: Use Object.create and copy instead
    object = mixin(parent ? Object.create(parent) : {}, object);
    object.parentState = parent;
    object.stateName = name;
    for (let prop in object) {
      if (!Object.prototype.hasOwnProperty.call(object, prop) || prop === 'parentState' || prop === 'stateName') {
        continue;
      }
      if (typeof object[prop] === 'object') {
        object[prop] = wireState(object[prop], object, name + '.' + prop);
      }
    }
    return object;
  }
  function clearErrorMessages(internalModel) {
    internalModel.getRecord().errors._clear();
  }
  var RootState$1 = wireState(RootState, null, 'root');

  // move to TS hacks module that we can delete when this is no longer a necessary recast

  /**
    @module @ember-data/store
  */

  const {
    hasOwnProperty
  } = Object.prototype;
  let ManyArray;
  let PromiseBelongsTo;
  let _PromiseManyArray; // TODO find a way to get the klass type here

  let _found = false;
  let _getModelPackage;
  {
    _getModelPackage = function () {
      if (!_found) {
        let modelPackage = require('@ember-data/model/-private');
        ({
          ManyArray,
          PromiseBelongsTo,
          PromiseManyArray: _PromiseManyArray
        } = modelPackage);
        if (ManyArray && PromiseBelongsTo && _PromiseManyArray) {
          _found = true;
        }
      }
      return _found;
    };
  }
  /*
    The TransitionChainMap caches the `state.enters`, `state.setups`, and final state reached
    when transitioning from one state to another, so that future transitions can replay the
    transition without needing to walk the state tree, collect these hook calls and determine
     the state to transition into.

     A future optimization would be to build a single chained method out of the collected enters
     and setups. It may also be faster to do a two level cache (from: { to }) instead of caching based
     on a key that adds the two together.
   */
  const TransitionChainMap = Object.create(null);
  const _extractPivotNameCache = Object.create(null);
  const _splitOnDotCache = Object.create(null);
  function splitOnDot(name) {
    return _splitOnDotCache[name] || (_splitOnDotCache[name] = name.split('.'));
  }
  function extractPivotName(name) {
    return _extractPivotNameCache[name] || (_extractPivotNameCache[name] = splitOnDot(name)[0]);
  }
  class InternalModel {
    // Not typed yet

    constructor(store, identifier) {
      this.store = store;
      this.identifier = identifier;
      {
        _getModelPackage();
      }
      this._id = identifier.id;
      this._isUpdatingId = false;
      this.modelName = identifier.type;
      this.clientId = identifier.lid;
      this.__recordData = null;
      this._promiseProxy = null;
      this._isDestroyed = false;
      this._doNotDestroy = false;
      this.isError = false;
      this._pendingRecordArrayManagerFlush = false; // used by the recordArrayManager

      // During dematerialization we don't want to rematerialize the record.  The
      // reason this might happen is that dematerialization removes records from
      // record arrays,  and Ember arrays will always `objectAt(0)` and
      // `objectAt(len - 1)` to test whether or not `firstObject` or `lastObject`
      // have changed.
      this._isDematerializing = false;
      this._scheduledDestroy = null;
      this._record = null;
      this.error = null;

      // caches for lazy getters
      this._modelClass = null;
      this.__recordArrays = null;
      this._recordReference = null;
      this.__recordData = null;
      this.error = null;

      // other caches
      // class fields have [[DEFINE]] semantics which are significantly slower than [[SET]] semantics here
      this._manyArrayCache = Object.create(null);
      this._relationshipPromisesCache = Object.create(null);
      this._relationshipProxyCache = Object.create(null);
      this.references = Object.create(null);
      this._deferredTriggers = [];
      this.currentState = RootState$1.empty;
    }
    get id() {
      return this.identifier.id;
    }
    set id(value) {
      if (value !== this._id) {
        let newIdentifier = {
          type: this.identifier.type,
          lid: this.identifier.lid,
          id: value
        };
        this.store.identifierCache.updateRecordIdentifier(this.identifier, newIdentifier);
        this.notifyPropertyChange('id');
      }
    }
    get modelClass() {
      if (this.store.modelFor) {
        return this._modelClass || (this._modelClass = this.store.modelFor(this.modelName));
      }
    }
    get recordReference() {
      if (this._recordReference === null) {
        this._recordReference = new RecordReference(this.store, this.identifier);
      }
      return this._recordReference;
    }
    get _recordData() {
      if (this.__recordData === null) {
        let recordData = this.store._createRecordData(this.identifier);
        this.__recordData = recordData;
        return recordData;
      }
      return this.__recordData;
    }
    set _recordData(newValue) {
      this.__recordData = newValue;
    }
    isHiddenFromRecordArrays() {
      // During dematerialization we don't want to rematerialize the record.
      // recordWasDeleted can cause other records to rematerialize because it
      // removes the internal model from the array and Ember arrays will always
      // `objectAt(0)` and `objectAt(len -1)` to check whether `firstObject` or
      // `lastObject` have changed.  When this happens we don't want those
      // models to rematerialize their records.

      // eager checks to avoid instantiating record data if we are empty or loading
      if (this.currentState.isEmpty) {
        return true;
      }
      if (this.currentState.isLoading) {
        return false;
      }
      let isRecordFullyDeleted = this._isRecordFullyDeleted();
      return this._isDematerializing || this.hasScheduledDestroy() || this.isDestroyed || isRecordFullyDeleted;
    }
    _isRecordFullyDeleted() {
      if (this._recordData.isDeletionCommitted && this._recordData.isDeletionCommitted()) {
        return true;
      } else if (this._recordData.isNew && this._recordData.isDeleted && this._recordData.isNew() && this._recordData.isDeleted()) {
        return true;
      } else {
        return this.currentState.stateName === 'root.deleted.saved';
      }
    }
    isDeleted() {
      if (this._recordData.isDeleted) {
        return this._recordData.isDeleted();
      } else {
        return this.currentState.isDeleted;
      }
    }
    isNew() {
      if (this._recordData.isNew) {
        return this._recordData.isNew();
      } else {
        return this.currentState.isNew;
      }
    }
    getRecord(properties) {
      if (!this._record && !this._isDematerializing) {
        let {
          store
        } = this;
        this._record = store._instantiateRecord(this, this.modelName, this._recordData, this.identifier, properties);
        this._triggerDeferredTriggers();
      }
      return this._record;
    }
    dematerializeRecord() {
      this._isDematerializing = true;

      // TODO IGOR add a test that fails when this is missing, something that involves canceling a destroy
      // and the destroy not happening, and then later on trying to destroy
      this._doNotDestroy = false;
      // this has to occur before the internal model is removed
      // for legacy compat.
      if (this._record) {
        this.store.teardownRecord(this._record);
      }

      // move to an empty never-loaded state
      // ensure any record notifications happen prior to us
      // unseting the record but after we've triggered
      // destroy
      this.store._backburner.join(() => {
        this._recordData.unloadRecord();
      });
      if (this._record) {
        Object.keys(this._relationshipProxyCache).forEach(key => {
          if (this._relationshipProxyCache[key].destroy) {
            this._relationshipProxyCache[key].destroy();
          }
          delete this._relationshipProxyCache[key];
        });
      }
      this._record = null;
      this.error = null;
      this._previousState = this.currentState;
      this.currentState = RootState$1.empty;
      this.store.recordArrayManager.recordDidChange(this.identifier);
    }
    deleteRecord() {
      runloop.run(() => {
        const backburner = this.store._backburner;
        backburner.run(() => {
          if (this._recordData.setIsDeleted) {
            this._recordData.setIsDeleted(true);
          }
          if (this.isNew()) {
            // destroyRecord follows up deleteRecord with save(). This prevents an unecessary save for a new record
            this._deletedRecordWasNew = true;
            this.send('deleteRecord');
            this._triggerDeferredTriggers();
            this.unloadRecord();
          } else {
            this.send('deleteRecord');
          }
        });
      });
    }
    save(options) {
      if (this._deletedRecordWasNew) {
        return RSVP.Promise.resolve();
      }
      let promiseLabel = 'DS: Model#save ' + this;
      let resolver = RSVP__default["default"].defer(promiseLabel);

      // Casting to promise to narrow due to the feature flag paths inside scheduleSave
      return this.store.scheduleSave(this, resolver, options);
    }
    reload(options) {
      if (!options) {
        options = {};
      }
      let internalModel = this;
      return internalModel.store._reloadRecord(internalModel, options).then(function () {
        //TODO NOW seems like we shouldn't need to do this
        return internalModel;
      }, function (error) {
        throw error;
      }, 'DS: Model#reload complete, update flags');
    }

    /*
      Unload the record for this internal model. This will cause the record to be
      destroyed and freed up for garbage collection. It will also do a check
      for cleaning up internal models.
       This check is performed by first computing the set of related internal
      models. If all records in this set are unloaded, then the entire set is
      destroyed. Otherwise, nothing in the set is destroyed.
       This means that this internal model will be freed up for garbage collection
      once all models that refer to it via some relationship are also unloaded.
    */
    unloadRecord() {
      if (this.isDestroyed) {
        return;
      }
      this.send('unloadRecord');
      this.dematerializeRecord();
      if (this._scheduledDestroy === null) {
        this._scheduledDestroy = runloop._backburner.schedule('destroy', this, '_checkForOrphanedInternalModels');
      }
    }
    hasScheduledDestroy() {
      return !!this._scheduledDestroy;
    }
    cancelDestroy() {
      (!(!this.isDestroyed) && debug.assert(`You cannot cancel the destruction of an InternalModel once it has already been destroyed`, !this.isDestroyed));
      this._doNotDestroy = true;
      this._isDematerializing = false;
      runloop.cancel(this._scheduledDestroy);
      this._scheduledDestroy = null;
    }

    // typically, we prefer to async destroy this lets us batch cleanup work.
    // Unfortunately, some scenarios where that is not possible. Such as:
    //
    // ```js
    // const record = store.findRecord(‘record’, 1);
    // record.unloadRecord();
    // store.createRecord(‘record’, 1);
    // ```
    //
    // In those scenarios, we make that model's cleanup work, sync.
    //
    destroySync() {
      if (this._isDematerializing) {
        this.cancelDestroy();
      }
      this._checkForOrphanedInternalModels();
      if (this.isDestroyed || this.isDestroying) {
        return;
      }

      // just in-case we are not one of the orphaned, we should still
      // still destroy ourselves
      this.destroy();
    }
    _checkForOrphanedInternalModels() {
      this._isDematerializing = false;
      this._scheduledDestroy = null;
      if (this.isDestroyed) {
        return;
      }
    }
    _findBelongsTo(key, resource, relationshipMeta, options) {
      // TODO @runspired follow up if parent isNew then we should not be attempting load here
      return this.store._findBelongsToByJsonApiResource(resource, this, relationshipMeta, options).then(internalModel => handleCompletedRelationshipRequest(this, key, resource._relationship, internalModel, null), e => handleCompletedRelationshipRequest(this, key, resource._relationship, null, e));
    }
    getBelongsTo(key, options) {
      let resource = this._recordData.getBelongsTo(key);
      let identifier = resource && resource.data ? this.store.identifierCache.getOrCreateRecordIdentifier(resource.data) : null;
      let relationshipMeta = this.store._relationshipMetaFor(this.modelName, null, key);
      if (!relationshipMeta) return;
      let store = this.store;
      let parentInternalModel = this;
      let async = relationshipMeta.options.async;
      let isAsync = typeof async === 'undefined' ? true : async;
      let _belongsToState = {
        key,
        store,
        originatingInternalModel: this,
        modelName: relationshipMeta.type
      };
      if (isAsync) {
        let internalModel = identifier !== null ? store._internalModelForResource(identifier) : null;
        if (resource._relationship.state.hasFailedLoadAttempt) {
          return this._relationshipProxyCache[key];
        }
        let promise = this._findBelongsTo(key, resource, relationshipMeta, options);
        return this._updatePromiseProxyFor('belongsTo', key, {
          promise,
          content: internalModel ? internalModel.getRecord() : null,
          _belongsToState
        });
      } else {
        if (identifier === null) {
          return null;
        } else {
          let internalModel = store._internalModelForResource(identifier);
          let toReturn = internalModel.getRecord();
          (!(toReturn === null || !toReturn.isEmpty) && debug.assert("You looked up the '" + key + "' relationship on a '" + parentInternalModel.modelName + "' with id " + parentInternalModel.id + ' but some of the associated records were not loaded. Either make sure they are all loaded together with the parent record, or specify that the relationship is async (`belongsTo({ async: true })`)', toReturn === null || !toReturn.isEmpty));
          return toReturn;
        }
      }
    }
    getManyArray(key, definition) {
      {
        let manyArray = this._manyArrayCache[key];
        if (!definition) {
          const graphFor = require('@ember-data/record-data/-private').graphFor;
          definition = graphFor(this.store).get(this.identifier, key).definition;
        }
        if (!manyArray) {
          manyArray = ManyArray.create({
            store: this.store,
            type: this.store.modelFor(definition.type),
            recordData: this._recordData,
            key,
            isPolymorphic: definition.isPolymorphic,
            isAsync: definition.isAsync,
            _inverseIsAsync: definition.inverseIsAsync,
            internalModel: this,
            isLoaded: !definition.isAsync
          });
          this._manyArrayCache[key] = manyArray;
        }
        return manyArray;
      }
    }
    fetchAsyncHasMany(key, relationship, manyArray, options) {
      {
        let loadingPromise = this._relationshipPromisesCache[key];
        if (loadingPromise) {
          return loadingPromise;
        }
        const jsonApi = this._recordData.getHasMany(key);
        loadingPromise = this.store._findHasManyByJsonApiResource(jsonApi, this, relationship, options).then(() => handleCompletedRelationshipRequest(this, key, relationship, manyArray, null), e => handleCompletedRelationshipRequest(this, key, relationship, manyArray, e));
        this._relationshipPromisesCache[key] = loadingPromise;
        return loadingPromise;
      }
    }
    getHasMany(key, options) {
      {
        const graphFor = require('@ember-data/record-data/-private').graphFor;
        const relationship = graphFor(this.store).get(this.identifier, key);
        const {
          definition,
          state
        } = relationship;
        let manyArray = this.getManyArray(key, definition);
        if (definition.isAsync) {
          if (state.hasFailedLoadAttempt) {
            return this._relationshipProxyCache[key];
          }
          let promise = this.fetchAsyncHasMany(key, relationship, manyArray, options);
          return this._updatePromiseProxyFor('hasMany', key, {
            promise,
            content: manyArray
          });
        } else {
          (!(!anyUnloaded(this.store, relationship)) && debug.assert(`You looked up the '${key}' relationship on a '${this.modelName}' with id ${this.id} but some of the associated records were not loaded. Either make sure they are all loaded together with the parent record, or specify that the relationship is async ('hasMany({ async: true })')`, !anyUnloaded(this.store, relationship)));
          return manyArray;
        }
      }
    }
    _updatePromiseProxyFor(kind, key, args) {
      let promiseProxy = this._relationshipProxyCache[key];
      if (kind === 'hasMany') {
        if (promiseProxy) {
          promiseProxy._update(args.promise, args.content);
        } else {
          promiseProxy = this._relationshipProxyCache[key] = new _PromiseManyArray(args.promise, args.content);
        }
        return promiseProxy;
      }
      if (promiseProxy) {
        if (args.content !== undefined) {
          // this usage of `any` can be removed when `@types/ember_object` proxy allows `null` for content
          promiseProxy.set('content', args.content);
        }
        promiseProxy.set('promise', args.promise);
      } else {
        const klass = PromiseBelongsTo;
        // this usage of `any` can be removed when `@types/ember_object` proxy allows `null` for content
        this._relationshipProxyCache[key] = klass.create(args);
      }
      return this._relationshipProxyCache[key];
    }
    reloadHasMany(key, options) {
      {
        let loadingPromise = this._relationshipPromisesCache[key];
        if (loadingPromise) {
          return loadingPromise;
        }
        const graphFor = require('@ember-data/record-data/-private').graphFor;
        const relationship = graphFor(this.store).get(this.identifier, key);
        const {
          definition,
          state
        } = relationship;
        state.hasFailedLoadAttempt = false;
        state.shouldForceReload = true;
        let manyArray = this.getManyArray(key, definition);
        let promise = this.fetchAsyncHasMany(key, relationship, manyArray, options);
        if (this._relationshipProxyCache[key]) {
          return this._updatePromiseProxyFor('hasMany', key, {
            promise
          });
        }
        return promise;
      }
    }
    reloadBelongsTo(key, options) {
      let loadingPromise = this._relationshipPromisesCache[key];
      if (loadingPromise) {
        return loadingPromise;
      }
      let resource = this._recordData.getBelongsTo(key);
      // TODO move this to a public api
      if (resource._relationship) {
        resource._relationship.state.hasFailedLoadAttempt = false;
        resource._relationship.state.shouldForceReload = true;
      }
      let relationshipMeta = this.store._relationshipMetaFor(this.modelName, null, key);
      let promise = this._findBelongsTo(key, resource, relationshipMeta, options);
      if (this._relationshipProxyCache[key]) {
        return this._updatePromiseProxyFor('belongsTo', key, {
          promise
        });
      }
      return promise;
    }
    destroyFromRecordData() {
      if (this._doNotDestroy) {
        this._doNotDestroy = false;
        return;
      }
      this.destroy();
    }
    destroy() {
      (!(!this._record || this._record.get('isDestroyed') || this._record.get('isDestroying')) && debug.assert('Cannot destroy an internalModel while its record is materialized', !this._record || this._record.get('isDestroyed') || this._record.get('isDestroying')));
      this.isDestroying = true;
      if (this._recordReference) {
        this._recordReference.destroy();
      }
      this._recordReference = null;
      let cache = this._manyArrayCache;
      Object.keys(cache).forEach(key => {
        cache[key].destroy();
        delete cache[key];
      });
      if (this.references) {
        cache = this.references;
        Object.keys(cache).forEach(key => {
          cache[key].destroy();
          delete cache[key];
        });
      }
      internalModelFactoryFor(this.store).remove(this);
      this._isDestroyed = true;
    }
    setupData(data) {
      let changedKeys = this._recordData.pushData(data, this.hasRecord);
      if (this.hasRecord) {
        // TODO @runspired should this be going through the notification manager?
        this._record._notifyProperties(changedKeys);
      }
      this.send('pushedData');
    }
    setDirtyHasMany(key, records) {
      assertRecordsPassedToHasMany(records);
      return this._recordData.setDirtyHasMany(key, extractRecordDatasFromRecords(records));
    }
    setDirtyBelongsTo(key, value) {
      return this._recordData.setDirtyBelongsTo(key, extractRecordDataFromRecord(value));
    }
    setDirtyAttribute(key, value) {
      if (this.isDeleted()) {
        {
          throw new EmberError__default["default"](`Attempted to set '${key}' to '${value}' on the deleted record ${this}`);
        }
      }
      let currentValue = this._recordData.getAttr(key);
      if (currentValue !== value) {
        this._recordData.setDirtyAttribute(key, value);
        let isDirty = this._recordData.isAttrDirty(key);
        this.send('didSetProperty', {
          name: key,
          isDirty: isDirty
        });
      }
      return value;
    }
    get isDestroyed() {
      return this._isDestroyed;
    }
    get hasRecord() {
      return !!this._record;
    }
    createSnapshot(options = {}) {
      return new Snapshot(options, this.identifier, this.store);
    }
    hasChangedAttributes() {
      if (!this.__recordData) {
        // no need to calculate changed attributes when calling `findRecord`
        return false;
      }
      return this._recordData.hasChangedAttributes();
    }
    changedAttributes() {
      if (!this.__recordData) {
        // no need to calculate changed attributes when calling `findRecord`
        return {};
      }
      return this._recordData.changedAttributes();
    }
    adapterWillCommit() {
      this._recordData.willCommit();
      this.send('willCommit');
    }
    adapterDidDirty() {
      this.send('becomeDirty');
    }
    send(name, context) {
      let currentState = this.currentState;
      if (!currentState[name]) {
        this._unhandledEvent(currentState, name, context);
      }
      return currentState[name](this, context);
    }
    notifyHasManyChange(key) {
      if (this.hasRecord) {
        let manyArray = this._manyArrayCache[key];
        let hasPromise = !!this._relationshipPromisesCache[key];
        if (manyArray && hasPromise) {
          // do nothing, we will notify the ManyArray directly
          // once the fetch has completed.
          return;
        }
        this.store._notificationManager.notify(this.identifier, 'relationships', key);
      }
    }
    notifyBelongsToChange(key) {
      if (this.hasRecord) {
        this.store._notificationManager.notify(this.identifier, 'relationships', key);
      }
    }
    notifyPropertyChange(key) {
      if (this.hasRecord) {
        // TODO this should likely *mostly* be the `attributes` bucket
        // but it seems for local mutations we rely on computed updating
        // iteself when set. As we design our own thing we may need to change
        // that.
        this.store._notificationManager.notify(this.identifier, 'property', key);
      }
    }
    notifyStateChange(key) {
      if (this.hasRecord) {
        this.store._notificationManager.notify(this.identifier, 'state');
      }
      if (!key || key === 'isDeletionCommitted') {
        this.store.recordArrayManager.recordDidChange(this.identifier);
      }
    }
    didCreateRecord() {
      this._recordData.clientDidCreate();
    }
    rollbackAttributes() {
      this.store._backburner.join(() => {
        let dirtyKeys = this._recordData.rollbackAttributes();
        if (object.get(this, 'isError')) {
          this.didCleanError();
        }
        this.send('rolledBack');
        if (this._record && dirtyKeys && dirtyKeys.length > 0) {
          this._record._notifyProperties(dirtyKeys);
        }
      });
    }
    transitionTo(name) {
      // POSSIBLE TODO: Remove this code and replace with
      // always having direct reference to state objects

      let pivotName = extractPivotName(name);
      let state = this.currentState;
      let transitionMapId = `${state.stateName}->${name}`;
      do {
        if (state.exit) {
          state.exit(this);
        }
        state = state.parentState;
      } while (!state[pivotName]);
      let setups;
      let enters;
      let i;
      let l;
      let map = TransitionChainMap[transitionMapId];
      if (map) {
        setups = map.setups;
        enters = map.enters;
        state = map.state;
      } else {
        setups = [];
        enters = [];
        let path = splitOnDot(name);
        for (i = 0, l = path.length; i < l; i++) {
          state = state[path[i]];
          if (state.enter) {
            enters.push(state);
          }
          if (state.setup) {
            setups.push(state);
          }
        }
        TransitionChainMap[transitionMapId] = {
          setups,
          enters,
          state
        };
      }
      for (i = 0, l = enters.length; i < l; i++) {
        enters[i].enter(this);
      }
      this.currentState = state;
      if (this.hasRecord && typeof this._record.notifyPropertyChange === 'function') {
        // TODO refactor Model to have all flags pull from the notification manager
        // and for currentState.stateName to be constructed from flag state.
        // Probably just port this work from ember-m3
        // After that we can eliminate this.
        this.notifyStateChange('currentState');
        // this._record.notifyPropertyChange('currentState');
      }

      for (i = 0, l = setups.length; i < l; i++) {
        setups[i].setup(this);
      }
    }
    _unhandledEvent(state, name, context) {
      let errorMessage = 'Attempted to handle event `' + name + '` ';
      errorMessage += 'on ' + String(this) + ' while in state ';
      errorMessage += state.stateName + '. ';
      if (context !== undefined) {
        errorMessage += 'Called with ' + debug.inspect(context) + '.';
      }
      throw new EmberError__default["default"](errorMessage);
    }
    triggerLater(...args) {
      if (this._deferredTriggers.push(args) !== 1) {
        return;
      }
      this.store._updateInternalModel(this);
    }
    _triggerDeferredTriggers() {
      //TODO: Before 1.0 we want to remove all the events that happen on the pre materialized record,
      //but for now, we queue up all the events triggered before the record was materialized, and flush
      //them once we have the record
      if (!this.hasRecord) {
        return;
      }
      let triggers = this._deferredTriggers;
      let record = this._record;
      let trigger = record.trigger;
      // TODO Igor make nicer check
      if (trigger && typeof trigger === 'function') {
        for (let i = 0, l = triggers.length; i < l; i++) {
          let eventName = triggers[i];
          trigger.apply(record, eventName);
        }
      }
      triggers.length = 0;
    }
    removeFromInverseRelationships() {
      if (this.__recordData) {
        this.store._backburner.join(() => {
          this._recordData.removeFromInverseRelationships();
        });
      }
    }

    /*
      When a find request is triggered on the store, the user can optionally pass in
      attributes and relationships to be preloaded. These are meant to behave as if they
      came back from the server, except the user obtained them out of band and is informing
      the store of their existence. The most common use case is for supporting client side
      nested URLs, such as `/posts/1/comments/2` so the user can do
      `store.findRecord('comment', 2, { preload: { post: 1 } })` without having to fetch the post.
       Preloaded data can be attributes and relationships passed in either as IDs or as actual
      models.
    */
    preloadData(preload) {
      let jsonPayload = {};
      //TODO(Igor) consider the polymorphic case
      Object.keys(preload).forEach(key => {
        let preloadValue = object.get(preload, key);
        let relationshipMeta = this.modelClass.metaForProperty(key);
        if (relationshipMeta.isRelationship) {
          if (!jsonPayload.relationships) {
            jsonPayload.relationships = {};
          }
          jsonPayload.relationships[key] = this._preloadRelationship(key, preloadValue);
        } else {
          if (!jsonPayload.attributes) {
            jsonPayload.attributes = {};
          }
          jsonPayload.attributes[key] = preloadValue;
        }
      });
      this._recordData.pushData(jsonPayload);
    }
    _preloadRelationship(key, preloadValue) {
      let relationshipMeta = this.modelClass.metaForProperty(key);
      let modelClass = relationshipMeta.type;
      let data;
      if (relationshipMeta.kind === 'hasMany') {
        (!(Array.isArray(preloadValue)) && debug.assert('You need to pass in an array to set a hasMany property on a record', Array.isArray(preloadValue)));
        data = preloadValue.map(value => this._convertPreloadRelationshipToJSON(value, modelClass));
      } else {
        data = this._convertPreloadRelationshipToJSON(preloadValue, modelClass);
      }
      return {
        data
      };
    }
    _convertPreloadRelationshipToJSON(value, modelClass) {
      if (typeof value === 'string' || typeof value === 'number') {
        return {
          type: modelClass,
          id: value
        };
      }
      let internalModel;
      if (value._internalModel) {
        internalModel = value._internalModel;
      } else {
        internalModel = value;
      }
      // TODO IGOR DAVID assert if no id is present
      return {
        type: internalModel.modelName,
        id: internalModel.id
      };
    }

    /*
     * calling `store.setRecordId` is necessary to update
     * the cache index for this record if we have changed.
     *
     * However, since the store is not aware of whether the update
     * is from us (via user set) or from a push of new data
     * it will also call us so that we can notify and update state.
     *
     * When it does so it calls with `fromCache` so that we can
     * short-circuit instead of cycling back.
     *
     * This differs from the short-circuit in the `_isUpdatingId`
     * case in that the the cache can originate the call to setId,
     * so on first entry we will still need to do our own update.
     */
    setId(id, fromCache = false) {
      if (this._isUpdatingId === true) {
        return;
      }
      this._isUpdatingId = true;
      let didChange = id !== this._id;
      this._id = id;
      if (didChange && id !== null) {
        if (!fromCache) {
          this.store.setRecordId(this.modelName, id, this.clientId);
        }
        // internal set of ID to get it to RecordData from DS.Model
        // if we are within create we may not have a recordData yet.
        if (this.__recordData && this._recordData.__setId) {
          this._recordData.__setId(id);
        }
      }
      if (didChange && this.hasRecord) {
        this.store._notificationManager.notify(this.identifier, 'identity');
      }
      this._isUpdatingId = false;
    }
    didError() {}
    didCleanError() {}

    /*
      If the adapter did not return a hash in response to a commit,
      merge the changed attributes and relationships into the existing
      saved data.
    */
    adapterDidCommit(data) {
      this.didCleanError();
      this._recordData.didCommit(data);
      this.send('didCommit');
      this.store.recordArrayManager.recordDidChange(this.identifier);
      if (!data) {
        return;
      }
      this.store._notificationManager.notify(this.identifier, 'attributes');
    }
    hasErrors() {
      if (this._recordData.getErrors) {
        return this._recordData.getErrors(this.identifier).length > 0;
      } else {
        let errors = this.getRecord().errors;
        return errors.length > 0;
      }
    }

    // FOR USE DURING COMMIT PROCESS
    adapterDidInvalidate(parsedErrors, error) {
      // TODO @runspired this should be handled by RecordState
      // and errors should be dirtied but lazily fetch if at
      // all possible. We should only notify errors here.
      let attribute;
      if (error && parsedErrors) {
        if (!this._recordData.getErrors) {
          for (attribute in parsedErrors) {
            if (hasOwnProperty.call(parsedErrors, attribute)) {
              this.getRecord().errors._add(attribute, parsedErrors[attribute]);
            }
          }
        }
        let jsonApiErrors = errorsHashToArray(parsedErrors);
        this.send('becameInvalid');
        if (jsonApiErrors.length === 0) {
          jsonApiErrors = [{
            title: 'Invalid Error',
            detail: '',
            source: {
              pointer: '/data'
            }
          }];
        }
        this._recordData.commitWasRejected(this.identifier, jsonApiErrors);
      } else {
        this.send('becameError');
        this._recordData.commitWasRejected(this.identifier);
      }
    }
    notifyErrorsChange() {
      this.store._notificationManager.notify(this.identifier, 'errors');
    }
    adapterDidError() {
      this.send('becameError');
      this._recordData.commitWasRejected();
    }
    toString() {
      return `<${this.modelName}:${this.id}>`;
    }
    referenceFor(kind, name) {
      let reference = this.references[name];
      if (!reference) {
        const graphFor = require('@ember-data/record-data/-private').graphFor;
        const relationship = graphFor(this.store._storeWrapper).get(this.identifier, name);
        if (kind) {
          let modelName = this.modelName;
          let actualRelationshipKind = relationship.definition.kind;
          (!(actualRelationshipKind === kind) && debug.assert(`You tried to get the '${name}' relationship on a '${modelName}' via record.${kind}('${name}'), but the relationship is of kind '${actualRelationshipKind}'. Use record.${actualRelationshipKind}('${name}') instead.`, actualRelationshipKind === kind));
        }
        let relationshipKind = relationship.definition.kind;
        let identifierOrInternalModel = this.identifier;
        if (relationshipKind === 'belongsTo') {
          reference = new BelongsToReference(this.store, identifierOrInternalModel, relationship, name);
        } else if (relationshipKind === 'hasMany') {
          reference = new HasManyReference(this.store, identifierOrInternalModel, relationship, name);
        }
        this.references[name] = reference;
      }
      return reference;
    }
  }
  function handleCompletedRelationshipRequest(internalModel, key, relationship, value, error) {
    delete internalModel._relationshipPromisesCache[key];
    relationship.state.shouldForceReload = false;
    const isHasMany = relationship.definition.kind === 'hasMany';
    if (isHasMany) {
      // we don't notify the record property here to avoid refetch
      // only the many array
      value.notify();
    }
    if (error) {
      relationship.state.hasFailedLoadAttempt = true;
      let proxy = internalModel._relationshipProxyCache[key];
      // belongsTo relationships are sometimes unloaded
      // when a load fails, in this case we need
      // to make sure that we aren't proxying
      // to destroyed content
      // for the sync belongsTo reload case there will be no proxy
      // for the async reload case there will be no proxy if the ui
      // has never been accessed
      if (proxy && !isHasMany) {
        if (proxy.content && proxy.content.isDestroying) {
          proxy.set('content', null);
        }
      }
      throw error;
    }
    if (isHasMany) {
      value.set('isLoaded', true);
    }
    relationship.state.hasFailedLoadAttempt = false;
    // only set to not stale if no error is thrown
    relationship.state.isStale = false;
    return value;
  }
  function assertRecordsPassedToHasMany(records) {
    // TODO only allow native arrays
    (!(Array.isArray(records) || EmberArray__default["default"].detect(records)) && debug.assert(`You must pass an array of records to set a hasMany relationship`, Array.isArray(records) || EmberArray__default["default"].detect(records)));
    (!(function () {
      return EmberArray.A(records).every(record => hasOwnProperty.call(record, '_internalModel') === true);
    }()) && debug.assert(`All elements of a hasMany relationship must be instances of Model, you passed ${debug.inspect(records)}`, function () {
      return EmberArray.A(records).every(record => hasOwnProperty.call(record, '_internalModel') === true);
    }()));
  }
  function extractRecordDatasFromRecords(records) {
    return records.map(extractRecordDataFromRecord);
  }
  function extractRecordDataFromRecord(recordOrPromiseRecord) {
    if (!recordOrPromiseRecord) {
      return null;
    }
    if (recordOrPromiseRecord.then) {
      let content = recordOrPromiseRecord.get && recordOrPromiseRecord.get('content');
      (!(content !== undefined) && debug.assert('You passed in a promise that did not originate from an EmberData relationship. You can only pass promises that come from a belongsTo or hasMany relationship to the get call.', content !== undefined));
      return content ? recordDataFor(content) : null;
    }
    return recordDataFor(recordOrPromiseRecord);
  }
  function anyUnloaded(store, relationship) {
    let state = relationship.currentState;
    const unloaded = state.find(s => {
      let im = store._internalModelForResource(s);
      return im._isDematerializing || !im.currentState.isLoaded;
    });
    return unloaded || false;
  }

  const AvailableShims = new WeakCache$1('schema-shims' );
  AvailableShims._generator = () => {
    return Object.create(null);
  };
  function getShimClass(store, modelName) {
    let shims = AvailableShims.lookup(store);
    let shim = shims[modelName];
    if (shim === undefined) {
      shim = shims[modelName] = new ShimModelClass(store, modelName);
    }
    return shim;
  }
  function mapFromHash(hash) {
    let map = new Map();
    for (let i in hash) {
      if (Object.prototype.hasOwnProperty.call(hash, i)) {
        map.set(i, hash[i]);
      }
    }
    return map;
  }

  // Mimics the static apis of DSModel
  class ShimModelClass {
    // TODO Maybe expose the class here?
    constructor(__store, modelName) {
      this.__store = __store;
      this.modelName = modelName;
    }
    get fields() {
      let attrs = this.__store._attributesDefinitionFor({
        type: this.modelName
      });
      let relationships = this.__store._relationshipsDefinitionFor({
        type: this.modelName
      });
      let fields = new Map();
      Object.keys(attrs).forEach(key => fields.set(key, 'attribute'));
      Object.keys(relationships).forEach(key => fields.set(key, relationships[key].kind));
      return fields;
    }
    get attributes() {
      let attrs = this.__store._attributesDefinitionFor({
        type: this.modelName
      });
      return mapFromHash(attrs);
    }
    get relationshipsByName() {
      let relationships = this.__store._relationshipsDefinitionFor({
        type: this.modelName
      });
      return mapFromHash(relationships);
    }
    eachAttribute(callback, binding) {
      let attrDefs = this.__store._attributesDefinitionFor({
        type: this.modelName
      });
      Object.keys(attrDefs).forEach(key => {
        callback.call(binding, key, attrDefs[key]);
      });
    }
    eachRelationship(callback, binding) {
      let relationshipDefs = this.__store._relationshipsDefinitionFor({
        type: this.modelName
      });
      Object.keys(relationshipDefs).forEach(key => {
        callback.call(binding, key, relationshipDefs[key]);
      });
    }
    eachTransformedAttribute(callback, binding) {
      let relationshipDefs = this.__store._relationshipsDefinitionFor({
        type: this.modelName
      });
      Object.keys(relationshipDefs).forEach(key => {
        if (relationshipDefs[key].type) {
          callback.call(binding, key, relationshipDefs[key]);
        }
      });
    }
  }

  /**
    @module @ember-data/store
  */

  /**
    SnapshotRecordArray is not directly instantiable.
    Instances are provided to consuming application's
    adapters for certain requests.  

    @class SnapshotRecordArray
    @public
  */
  class SnapshotRecordArray {
    /**
      SnapshotRecordArray is not directly instantiable.
      Instances are provided to consuming application's
      adapters and serializers for certain requests.  
       @method constructor
      @private
      @constructor
      @param {RecordArray} recordArray
      @param {Object} meta
      @param options 
     */
    constructor(recordArray, meta, options = {}) {
      this._snapshots = void 0;
      this._recordArray = void 0;
      this._type = void 0;
      this.length = void 0;
      this.meta = void 0;
      this.adapterOptions = void 0;
      this.include = void 0;
      /**
        An array of snapshots
        @private
        @property _snapshots
        @type {Array}
      */
      this._snapshots = null;

      /**
        An array of records
        @private
        @property _recordArray
        @type {Array}
      */
      this._recordArray = recordArray;

      /**
        Number of records in the array
         Example
         ```app/adapters/post.js
        import JSONAPIAdapter from '@ember-data/adapter/json-api';
         export default class PostAdapter extends JSONAPIAdapter {
          shouldReloadAll(store, snapshotRecordArray) {
            return !snapshotRecordArray.length;
          }
        });
        ```
         @property length
        @public
        @type {Number}
      */
      this.length = recordArray.get('length');
      this._type = null;

      /**
        Meta objects for the record array.
         Example
         ```app/adapters/post.js
        import JSONAPIAdapter from '@ember-data/adapter/json-api';
         export default class PostAdapter extends JSONAPIAdapter {
          shouldReloadAll(store, snapshotRecordArray) {
            let lastRequestTime = snapshotRecordArray.meta.lastRequestTime;
            let twentyMinutes = 20 * 60 * 1000;
            return Date.now() > lastRequestTime + twentyMinutes;
          }
        });
        ```
         @property meta
        @public
        @type {Object}
      */
      this.meta = meta;

      /**
        A hash of adapter options passed into the store method for this request.
         Example
         ```app/adapters/post.js
        import MyCustomAdapter from './custom-adapter';
         export default class PostAdapter extends MyCustomAdapter {
          findAll(store, type, sinceToken, snapshotRecordArray) {
            if (snapshotRecordArray.adapterOptions.subscribe) {
              // ...
            }
            // ...
          }
        }
        ```
         @property adapterOptions
        @public
        @type {Object}
      */
      this.adapterOptions = options.adapterOptions;

      /**
        The relationships to include for this request.
         Example
         ```app/adapters/application.js
        import Adapter from '@ember-data/adapter';
         export default class ApplicationAdapter extends Adapter {
          findAll(store, type, snapshotRecordArray) {
            let url = `/${type.modelName}?include=${encodeURIComponent(snapshotRecordArray.include)}`;
             return fetch(url).then((response) => response.json())
          }
        }
        ```
         @property include
        @public
        @type {String|Array}
      */
      this.include = options.include;
    }

    /**
      The type of the underlying records for the snapshots in the array, as a Model
      @property type
      @public
      @type {Model}
    */
    get type() {
      return this._type || (this._type = this._recordArray.get('type'));
    }
    /**
      The modelName of the underlying records for the snapshots in the array, as a Model
      @property modelName
      @public
      @type {Model}
    */
    get modelName() {
      return this._recordArray.modelName;
    }

    /**
      Get snapshots of the underlying record array
       Example
       ```app/adapters/post.js
      import JSONAPIAdapter from '@ember-data/adapter/json-api';
       export default class PostAdapter extends JSONAPIAdapter {
        shouldReloadAll(store, snapshotArray) {
          let snapshots = snapshotArray.snapshots();
           return snapshots.any(function(ticketSnapshot) {
            let timeDiff = moment().diff(ticketSnapshot.attr('lastAccessedAt'), 'minutes');
            if (timeDiff > 20) {
              return true;
            } else {
              return false;
            }
          });
        }
      }
      ```
       @method snapshots
      @public
      @return {Array} Array of snapshots
    */
    snapshots() {
      if (this._snapshots !== null) {
        return this._snapshots;
      }
      this._snapshots = this._recordArray._takeSnapshot();
      return this._snapshots;
    }
  }

  function recordForIdentifier(store, identifier) {
    return internalModelFactoryFor(store).lookup(identifier).getRecord();
  }

  /**
    A record array is an array that contains records of a certain modelName. The record
    array materializes records as needed when they are retrieved for the first
    time. You should not create record arrays yourself. Instead, an instance of
    `RecordArray` or its subclasses will be returned by your application's store
    in response to queries.

    This class should not be imported and instantiated by consuming applications.

    @class RecordArray
    @public
    @extends Ember.ArrayProxy
  */

  let RecordArray = ArrayProxy__default["default"].extend({
    init(args) {
      this._super(args);

      /**
        The array of client ids backing the record array. When a
        record is requested from the record array, the record
        for the client id at the same index is materialized, if
        necessary, by the store.
         @property content
        @private
        @type Ember.Array
        */
      this.set('content', this.content || null);

      /**
      The flag to signal a `RecordArray` is finished loading data.
       Example
       ```javascript
      let people = store.peekAll('person');
      people.get('isLoaded'); // true
      ```
       @property isLoaded
      @public
      @type Boolean
      */
      this.isLoaded = this.isLoaded || false;
      /**
      The flag to signal a `RecordArray` is currently loading data.
       Example
       ```javascript
      let people = store.peekAll('person');
      people.get('isUpdating'); // false
      people.update();
      people.get('isUpdating'); // true
      ```
       @property isUpdating
      @public
      @type Boolean
      */
      this.isUpdating = false;

      /**
      The store that created this record array.
       @property store
      @private
      @type Store
      */
      this.store = this.store || null;
      this._updatingPromise = null;
    },
    replace() {
      throw new Error(`The result of a server query (for all ${this.modelName} types) is immutable. To modify contents, use toArray()`);
    },
    /**
     The modelClass represented by this record array.
      @property type
      @public
     @type {subclass of Model}
     */
    type: object.computed('modelName', function () {
      if (!this.modelName) {
        return null;
      }
      return this.store.modelFor(this.modelName);
    }).readOnly(),
    /**
      Retrieves an object from the content by index.
       @method objectAtContent
      @private
      @param {Number} index
      @return {Model} record
    */
    objectAtContent(index) {
      let identifier = object.get(this, 'content').objectAt(index);
      return identifier ? recordForIdentifier(this.store, identifier) : undefined;
    },
    /**
      Used to get the latest version of all of the records in this array
      from the adapter.
       Example
       ```javascript
      let people = store.peekAll('person');
      people.get('isUpdating'); // false
       people.update().then(function() {
        people.get('isUpdating'); // false
      });
       people.get('isUpdating'); // true
      ```
       @method update
      @public
    */
    update() {
      if (object.get(this, 'isUpdating')) {
        return this._updatingPromise;
      }
      this.set('isUpdating', true);
      let updatingPromise = this._update().finally(() => {
        this._updatingPromise = null;
        if (this.get('isDestroying') || this.get('isDestroyed')) {
          return;
        }
        this.set('isUpdating', false);
      });
      this._updatingPromise = updatingPromise;
      return updatingPromise;
    },
    /*
      Update this RecordArray and return a promise which resolves once the update
      is finished.
     */
    _update() {
      return this.store.findAll(this.modelName, {
        reload: true
      });
    },
    /**
      Saves all of the records in the `RecordArray`.
       Example
       ```javascript
      let messages = store.peekAll('message');
      messages.forEach(function(message) {
        message.set('hasBeenSeen', true);
      });
      messages.save();
      ```
       @method save
      @public
      @return {PromiseArray} promise
    */
    save() {
      let promiseLabel = `DS: RecordArray#save ${this.modelName}`;
      let promise = RSVP.Promise.all(this.invoke('save'), promiseLabel).then(() => this, null, 'DS: RecordArray#save return RecordArray');
      return PromiseArray.create({
        promise
      });
    },
    /**
      @method _unregisterFromManager
      @internal
    */
    _unregisterFromManager() {
      this.manager.unregisterRecordArray(this);
    },
    willDestroy() {
      this._unregisterFromManager();
      this._dissociateFromOwnRecords();
      // TODO: we should not do work during destroy:
      //   * when objects are destroyed, they should simply be left to do
      //   * if logic errors do to this, that logic needs to be more careful during
      //    teardown (ember provides isDestroying/isDestroyed) for this reason
      //   * the exception being: if an dominator has a reference to this object,
      //     and must be informed to release e.g. e.g. removing itself from th
      //     recordArrayMananger
      object.set(this, 'content', null);
      object.set(this, 'length', 0);
      this._super(...arguments);
    },
    /**
      @method _createSnapshot
      @private
    */
    _createSnapshot(options) {
      // this is private for users, but public for ember-data internals
      return new SnapshotRecordArray(this, this.get('meta'), options);
    },
    /**
      @method _dissociateFromOwnRecords
      @internal
    */
    _dissociateFromOwnRecords() {
      this.get('content').forEach(identifier => {
        let recordArrays = this.manager.getRecordArraysForIdentifier(identifier);
        if (recordArrays) {
          recordArrays.delete(this);
        }
      });
    },
    /**
      Adds identifiers to the `RecordArray` without duplicates
       @method _pushIdentifiers
      @internal
      @param {StableRecordIdentifier[]} identifiers
    */
    _pushIdentifiers(identifiers) {
      object.get(this, 'content').pushObjects(identifiers);
    },
    /**
      Removes identifiers from the `RecordArray`.
       @method _removeIdentifiers
      @internal
      @param {StableRecordIdentifier[]} identifiers
    */
    _removeIdentifiers(identifiers) {
      object.get(this, 'content').removeObjects(identifiers);
    },
    /**
      @method _takeSnapshot
      @internal
    */
    _takeSnapshot() {
      return object.get(this, 'content').map(identifier => internalModelFactoryFor(this.store).lookup(identifier).createSnapshot());
    }
  });

  /**
    @module @ember-data/store
  */

  /**
    Represents an ordered list of records whose order and membership is
    determined by the adapter. For example, a query sent to the adapter
    may trigger a search on the server, whose results would be loaded
    into an instance of the `AdapterPopulatedRecordArray`.

    This class should not be imported and instantiated by consuming applications.

    ---

    If you want to update the array and get the latest records from the
    adapter, you can invoke [`update()`](AdapterPopulatedRecordArray/methods/update?anchor=update):

    Example

    ```javascript
    // GET /users?isAdmin=true
    store.query('user', { isAdmin: true }).then(function(admins) {

      admins.then(function() {
        console.log(admins.get("length")); // 42
      });

      // somewhere later in the app code, when new admins have been created
      // in the meantime
      //
      // GET /users?isAdmin=true
      admins.update().then(function() {
        admins.get('isUpdating'); // false
        console.log(admins.get("length")); // 123
      });

      admins.get('isUpdating'); // true
    }
    ```

    @class AdapterPopulatedRecordArray
    @public
    @extends RecordArray
  */
  var AdapterPopulatedRecordArray = RecordArray.extend({
    init() {
      this.set('content', this.get('content') || EmberArray.A());
      this._super(...arguments);
      this.query = this.query || null;
      this.links = this.links || null;
    },
    replace() {
      throw new Error(`The result of a server query (on ${this.modelName}) is immutable.`);
    },
    _update() {
      let store = object.get(this, 'store');
      let query = object.get(this, 'query');
      return store._query(this.modelName, query, this);
    },
    _setObjects(identifiersOrInternalModels, payload) {
      // TODO: initial load should not cause change events at all, only
      // subsequent. This requires changing the public api of adapter.query, but
      // hopefully we can do that soon.
      this.get('content').setObjects(identifiersOrInternalModels);
      this.setProperties({
        isLoaded: true,
        isUpdating: false,
        meta: {
          ...payload.meta
        },
        links: {
          ...payload.links
        }
      });
      this.manager._associateWithRecordArray(identifiersOrInternalModels, this);
    },
    /**
      @method _setIdentifiers
      @param {StableRecordIdentifier[]} identifiers
      @param {Object} payload normalized payload
      @private
    */
    _setIdentifiers(identifiers, payload) {
      this._setObjects(identifiers, payload);
    }
  });

  const RecordArraysCache = new WeakCache$1('record-arrays' );
  RecordArraysCache._generator = () => new Set();
  function recordArraysForIdentifier(identifierOrInternalModel) {
    return RecordArraysCache.lookup(identifierOrInternalModel);
  }
  const pendingForIdentifier = new Set([]);
  function getIdentifier(identifierOrInternalModel) {
    let i = identifierOrInternalModel;
    if (!isStableIdentifier(identifierOrInternalModel)) {
      // identifier may actually be an internalModel
      // but during materialization we will get an identifier that
      // has already been removed from the identifiers cache yet
      // so it will not behave as if stable. This is a bug we should fix.
      i = identifierOrInternalModel.identifier || i;
    }
    return i;
  }
  function shouldIncludeInRecordArrays(store, identifier) {
    const cache = internalModelFactoryFor(store);
    const internalModel = cache.peek(identifier);
    if (internalModel === null) {
      return false;
    }
    return !internalModel.isHiddenFromRecordArrays();
  }

  /**
    @class RecordArrayManager
    @internal
  */
  class RecordArrayManager {
    constructor(options) {
      this.store = options.store;
      this.isDestroying = false;
      this.isDestroyed = false;
      this._liveRecordArrays = Object.create(null);
      this._pendingIdentifiers = Object.create(null);
      this._adapterPopulatedRecordArrays = [];
    }

    /**
     * @method getRecordArraysForIdentifier
     * @internal
     * @param {StableIdentifier} param
     * @return {RecordArray} array
     */
    getRecordArraysForIdentifier(identifier) {
      return recordArraysForIdentifier(identifier);
    }
    _flushPendingIdentifiersForModelName(modelName, identifiers) {
      if (this.isDestroying || this.isDestroyed) {
        return;
      }
      let modelsToRemove = [];
      for (let j = 0; j < identifiers.length; j++) {
        let i = identifiers[j];
        // mark identifiers, so they can once again be processed by the
        // recordArrayManager
        pendingForIdentifier.delete(i);
        // build up a set of models to ensure we have purged correctly;
        let isIncluded = shouldIncludeInRecordArrays(this.store, i);
        if (!isIncluded) {
          modelsToRemove.push(i);
        }
      }
      let array = this._liveRecordArrays[modelName];
      if (array) {
        // TODO: skip if it only changed
        // process liveRecordArrays
        updateLiveRecordArray(this.store, array, identifiers);
      }

      // process adapterPopulatedRecordArrays
      if (modelsToRemove.length > 0) {
        removeFromAdapterPopulatedRecordArrays(this.store, modelsToRemove);
      }
    }
    _flush() {
      let pending = this._pendingIdentifiers;
      this._pendingIdentifiers = Object.create(null);
      for (let modelName in pending) {
        this._flushPendingIdentifiersForModelName(modelName, pending[modelName]);
      }
    }
    _syncLiveRecordArray(array, modelName) {
      (!(typeof modelName === 'string') && debug.assert(`recordArrayManger.syncLiveRecordArray expects modelName not modelClass as the second param`, typeof modelName === 'string'));
      let pending = this._pendingIdentifiers[modelName];
      let hasPendingChanges = Array.isArray(pending);
      let hasNoPotentialDeletions = !hasPendingChanges || pending.length === 0;
      let map = internalModelFactoryFor(this.store).modelMapFor(modelName);
      let hasNoInsertionsOrRemovals = object.get(map, 'length') === object.get(array, 'length');

      /*
        Ideally the recordArrayManager has knowledge of the changes to be applied to
        liveRecordArrays, and is capable of strategically flushing those changes and applying
        small diffs if desired.  However, until we've refactored recordArrayManager, this dirty
        check prevents us from unnecessarily wiping out live record arrays returned by peekAll.
        */
      if (hasNoPotentialDeletions && hasNoInsertionsOrRemovals) {
        return;
      }
      if (hasPendingChanges) {
        this._flushPendingIdentifiersForModelName(modelName, pending);
        delete this._pendingIdentifiers[modelName];
      }
      let identifiers = this._visibleIdentifiersByType(modelName);
      let modelsToAdd = [];
      for (let i = 0; i < identifiers.length; i++) {
        let identifier = identifiers[i];
        let recordArrays = recordArraysForIdentifier(identifier);
        if (recordArrays.has(array) === false) {
          recordArrays.add(array);
          modelsToAdd.push(identifier);
        }
      }
      if (modelsToAdd.length) {
        array._pushIdentifiers(modelsToAdd);
      }
    }
    _didUpdateAll(modelName) {
      let recordArray = this._liveRecordArrays[modelName];
      if (recordArray) {
        object.set(recordArray, 'isUpdating', false);
      }
    }

    /**
      Get the `RecordArray` for a modelName, which contains all loaded records of
      given modelName.
       @method liveRecordArrayFor
      @internal
      @param {String} modelName
      @return {RecordArray}
    */
    liveRecordArrayFor(modelName) {
      (!(typeof modelName === 'string') && debug.assert(`recordArrayManger.liveRecordArrayFor expects modelName not modelClass as the param`, typeof modelName === 'string'));
      let array = this._liveRecordArrays[modelName];
      if (array) {
        // if the array already exists, synchronize
        this._syncLiveRecordArray(array, modelName);
      } else {
        // if the array is being newly created merely create it with its initial
        // content already set. This prevents unneeded change events.
        let identifiers = this._visibleIdentifiersByType(modelName);
        array = this.createRecordArray(modelName, identifiers);
        this._liveRecordArrays[modelName] = array;
      }
      return array;
    }
    _visibleIdentifiersByType(modelName) {
      let all = internalModelFactoryFor(this.store).modelMapFor(modelName).recordIdentifiers;
      let visible = [];
      for (let i = 0; i < all.length; i++) {
        let identifier = all[i];
        let shouldInclude = shouldIncludeInRecordArrays(this.store, identifier);
        if (shouldInclude) {
          visible.push(identifier);
        }
      }
      return visible;
    }

    /**
      Create a `RecordArray` for a modelName.
       @method createRecordArray
      @internal
      @param {String} modelName
      @param {Array} [identifiers]
      @return {RecordArray}
    */
    createRecordArray(modelName, identifiers) {
      (!(typeof modelName === 'string') && debug.assert(`recordArrayManger.createRecordArray expects modelName not modelClass as the param`, typeof modelName === 'string'));
      let array = RecordArray.create({
        modelName,
        content: EmberArray.A(identifiers || []),
        store: this.store,
        isLoaded: true,
        manager: this
      });
      if (Array.isArray(identifiers)) {
        this._associateWithRecordArray(identifiers, array);
      }
      return array;
    }

    /**
      Create a `AdapterPopulatedRecordArray` for a modelName with given query.
       @method createAdapterPopulatedRecordArray
      @internal
      @param {String} modelName
      @param {Object} query
      @return {AdapterPopulatedRecordArray}
    */
    createAdapterPopulatedRecordArray(modelName, query, identifiers, payload) {
      (!(typeof modelName === 'string') && debug.assert(`recordArrayManger.createAdapterPopulatedRecordArray expects modelName not modelClass as the first param, received ${modelName}`, typeof modelName === 'string'));
      let array;
      if (Array.isArray(identifiers)) {
        array = AdapterPopulatedRecordArray.create({
          modelName,
          query: query,
          content: EmberArray.A(identifiers),
          store: this.store,
          manager: this,
          isLoaded: true,
          isUpdating: false,
          meta: {
            ...payload.meta
          },
          links: {
            ...payload.links
          }
        });
        this._associateWithRecordArray(identifiers, array);
      } else {
        array = AdapterPopulatedRecordArray.create({
          modelName,
          query: query,
          content: EmberArray.A(),
          store: this.store,
          manager: this
        });
      }
      this._adapterPopulatedRecordArrays.push(array);
      return array;
    }

    /**
      Unregister a RecordArray.
      So manager will not update this array.
       @method unregisterRecordArray
      @internal
      @param {RecordArray} array
    */
    unregisterRecordArray(array) {
      let modelName = array.modelName;

      // remove from adapter populated record array
      let removedFromAdapterPopulated = removeFromArray(this._adapterPopulatedRecordArrays, array);
      if (!removedFromAdapterPopulated) {
        let liveRecordArrayForType = this._liveRecordArrays[modelName];
        // unregister live record array
        if (liveRecordArrayForType) {
          if (array === liveRecordArrayForType) {
            delete this._liveRecordArrays[modelName];
          }
        }
      }
    }

    /**
     * @method _associateWithRecordArray
     * @internal
     * @param {StableIdentifier} identifiers
     * @param {RecordArray} array
     */
    _associateWithRecordArray(identifiers, array) {
      for (let i = 0, l = identifiers.length; i < l; i++) {
        let identifier = identifiers[i];
        identifier = getIdentifier(identifier);
        let recordArrays = this.getRecordArraysForIdentifier(identifier);
        recordArrays.add(array);
      }
    }

    /**
      @method recordDidChange
      @internal
    */
    recordDidChange(identifier) {
      if (this.isDestroying || this.isDestroyed) {
        return;
      }
      let modelName = identifier.type;
      identifier = getIdentifier(identifier);
      if (pendingForIdentifier.has(identifier)) {
        return;
      }
      pendingForIdentifier.add(identifier);
      let pending = this._pendingIdentifiers;
      let models = pending[modelName] = pending[modelName] || [];
      if (models.push(identifier) !== 1) {
        return;
      }
      runloop._backburner.schedule('actions', this, this._flush);
    }
    willDestroy() {
      Object.keys(this._liveRecordArrays).forEach(modelName => this._liveRecordArrays[modelName].destroy());
      this._adapterPopulatedRecordArrays.forEach(entry => entry.destroy());
      this.isDestroyed = true;
    }
    destroy() {
      this.isDestroying = true;
      runloop._backburner.schedule('actions', this, this.willDestroy);
    }
  }
  function removeFromArray(array, item) {
    let index = array.indexOf(item);
    if (index !== -1) {
      array.splice(index, 1);
      return true;
    }
    return false;
  }
  function updateLiveRecordArray(store, recordArray, identifiers) {
    let identifiersToAdd = [];
    let identifiersToRemove = [];
    for (let i = 0; i < identifiers.length; i++) {
      let identifier = identifiers[i];
      let shouldInclude = shouldIncludeInRecordArrays(store, identifier);
      let recordArrays = recordArraysForIdentifier(identifier);
      if (shouldInclude) {
        if (!recordArrays.has(recordArray)) {
          identifiersToAdd.push(identifier);
          recordArrays.add(recordArray);
        }
      }
      if (!shouldInclude) {
        identifiersToRemove.push(identifier);
        recordArrays.delete(recordArray);
      }
    }
    if (identifiersToAdd.length > 0) {
      recordArray._pushIdentifiers(identifiersToAdd);
    }
    if (identifiersToRemove.length > 0) {
      recordArray._removeIdentifiers(identifiersToRemove);
    }
  }
  function removeFromAdapterPopulatedRecordArrays(store, identifiers) {
    for (let i = 0; i < identifiers.length; i++) {
      removeFromAll(store, identifiers[i]);
    }
  }
  function removeFromAll(store, identifier) {
    identifier = getIdentifier(identifier);
    const recordArrays = recordArraysForIdentifier(identifier);
    recordArrays.forEach(function (recordArray) {
      recordArray._removeIdentifiers([identifier]);
    });
    recordArrays.clear();
  }

  /**
    @module @ember-data/store
  */

  function payloadIsNotBlank(adapterPayload) {
    if (Array.isArray(adapterPayload)) {
      return true;
    } else {
      return Object.keys(adapterPayload || {}).length;
    }
  }
  function iterateData(data, fn) {
    if (Array.isArray(data)) {
      return data.map(fn);
    } else {
      return fn(data);
    }
  }

  // sync
  // iterate over records in payload.data
  // for each record
  //   assert that record.relationships[inverse] is either undefined (so we can fix it)
  //     or provide a data: {id, type} that matches the record that requested it
  //   return the relationship data for the parent
  function syncRelationshipDataFromLink(store, payload, parentInternalModel, relationship) {
    // ensure the right hand side (incoming payload) points to the parent record that
    // requested this relationship
    let relationshipData = payload.data ? iterateData(payload.data, (data, index) => {
      const {
        id,
        type
      } = data;
      ensureRelationshipIsSetToParent(data, parentInternalModel, store, relationship, index);
      return {
        id,
        type
      };
    }) : null;
    const relatedDataHash = {};
    if ('meta' in payload) {
      relatedDataHash.meta = payload.meta;
    }
    if ('links' in payload) {
      relatedDataHash.links = payload.links;
    }
    if ('data' in payload) {
      relatedDataHash.data = relationshipData;
    }

    // now, push the left hand side (the parent record) to ensure things are in sync, since
    // the payload will be pushed with store._push
    const parentPayload = {
      id: parentInternalModel.id,
      type: parentInternalModel.modelName,
      relationships: {
        [relationship.key]: relatedDataHash
      }
    };
    if (!Array.isArray(payload.included)) {
      payload.included = [];
    }
    payload.included.push(parentPayload);
    return payload;
  }
  function ensureRelationshipIsSetToParent(payload, parentInternalModel, store, parentRelationship, index) {
    let {
      id,
      type
    } = payload;
    if (!payload.relationships) {
      payload.relationships = {};
    }
    let {
      relationships
    } = payload;
    let inverse = getInverse(store, parentInternalModel, parentRelationship, type);
    if (inverse) {
      let {
        inverseKey,
        kind
      } = inverse;
      let relationshipData = relationships[inverseKey] && relationships[inverseKey].data;
      if (typeof relationshipData !== 'undefined' && !relationshipDataPointsToParent(relationshipData, parentInternalModel)) {
        let inspect = function inspect(thing) {
          return `'${JSON.stringify(thing)}'`;
        };
        let quotedType = inspect(type);
        let quotedInverse = inspect(inverseKey);
        let expected = inspect({
          id: parentInternalModel.id,
          type: parentInternalModel.modelName
        });
        let expectedModel = `${parentInternalModel.modelName}:${parentInternalModel.id}`;
        let got = inspect(relationshipData);
        let prefix = typeof index === 'number' ? `data[${index}]` : `data`;
        let path = `${prefix}.relationships.${inverseKey}.data`;
        let other = relationshipData ? `<${relationshipData.type}:${relationshipData.id}>` : null;
        let relationshipFetched = `${expectedModel}.${parentRelationship.kind}("${parentRelationship.name}")`;
        let includedRecord = `<${type}:${id}>`;
        let message = [`Encountered mismatched relationship: Ember Data expected ${path} in the payload from ${relationshipFetched} to include ${expected} but got ${got} instead.\n`, `The ${includedRecord} record loaded at ${prefix} in the payload specified ${other} as its ${quotedInverse}, but should have specified ${expectedModel} (the record the relationship is being loaded from) as its ${quotedInverse} instead.`, `This could mean that the response for ${relationshipFetched} may have accidentally returned ${quotedType} records that aren't related to ${expectedModel} and could be related to a different ${parentInternalModel.modelName} record instead.`, `Ember Data has corrected the ${includedRecord} record's ${quotedInverse} relationship to ${expectedModel} so that ${relationshipFetched} will include ${includedRecord}.`, `Please update the response from the server or change your serializer to either ensure that the response for only includes ${quotedType} records that specify ${expectedModel} as their ${quotedInverse}, or omit the ${quotedInverse} relationship from the response.`].join('\n');
        (debug.assert(message));
      }
      if (kind !== 'hasMany' || typeof relationshipData !== 'undefined') {
        relationships[inverseKey] = relationships[inverseKey] || {};
        relationships[inverseKey].data = fixRelationshipData(relationshipData, kind, parentInternalModel);
      }
    }
  }
  function getInverse(store, parentInternalModel, parentRelationship, type) {
    return recordDataFindInverseRelationshipInfo(store, parentInternalModel, parentRelationship, type);
  }
  function recordDataFindInverseRelationshipInfo({
    _storeWrapper
  }, parentInternalModel, parentRelationship, type) {
    let {
      name: lhs_relationshipName
    } = parentRelationship;
    let {
      modelName
    } = parentInternalModel;
    let inverseKey = _storeWrapper.inverseForRelationship(modelName, lhs_relationshipName);
    if (inverseKey) {
      let {
        meta: {
          kind
        }
      } = _storeWrapper.relationshipsDefinitionFor(type)[inverseKey];
      return {
        inverseKey,
        kind
      };
    }
  }
  function relationshipDataPointsToParent(relationshipData, internalModel) {
    if (relationshipData === null) {
      return false;
    }
    if (Array.isArray(relationshipData)) {
      if (relationshipData.length === 0) {
        return false;
      }
      for (let i = 0; i < relationshipData.length; i++) {
        let entry = relationshipData[i];
        if (validateRelationshipEntry(entry, internalModel)) {
          return true;
        }
      }
    } else {
      return validateRelationshipEntry(relationshipData, internalModel);
    }
    return false;
  }
  function fixRelationshipData(relationshipData, relationshipKind, {
    id,
    modelName
  }) {
    let parentRelationshipData = {
      id,
      type: modelName
    };
    let payload;
    if (relationshipKind === 'hasMany') {
      payload = relationshipData || [];
      if (relationshipData) {
        // these arrays could be massive so this is better than filter
        // Note: this is potentially problematic if type/id are not in the
        // same state of normalization.
        let found = relationshipData.find(v => {
          return v.type === parentRelationshipData.type && v.id === parentRelationshipData.id;
        });
        if (!found) {
          payload.push(parentRelationshipData);
        }
      } else {
        payload.push(parentRelationshipData);
      }
    } else {
      payload = relationshipData || {};
      Object.assign(payload, parentRelationshipData);
    }
    return payload;
  }
  function validateRelationshipEntry({
    id
  }, {
    id: parentModelID
  }) {
    return id && id.toString() === parentModelID;
  }
  function _findHasMany(adapter, store, internalModel, link, relationship, options) {
    let snapshot = internalModel.createSnapshot(options);
    let modelClass = store.modelFor(relationship.type);
    let useLink = !link || typeof link === 'string';
    let relatedLink = useLink ? link : link.href;
    let promise = adapter.findHasMany(store, snapshot, relatedLink, relationship);
    let label = `DS: Handle Adapter#findHasMany of '${internalModel.modelName}' : '${relationship.type}'`;
    promise = guardDestroyedStore(promise, store, label);
    promise = _guard(promise, _bind(_objectIsAlive, internalModel));
    return promise.then(adapterPayload => {
      (!(payloadIsNotBlank(adapterPayload)) && debug.assert(`You made a 'findHasMany' request for a ${internalModel.modelName}'s '${relationship.key}' relationship, using link '${link}' , but the adapter's response did not have any data`, payloadIsNotBlank(adapterPayload)));
      let serializer = store.serializerFor(relationship.type);
      let payload = normalizeResponseHelper(serializer, store, modelClass, adapterPayload, null, 'findHasMany');
      (!('data' in payload && Array.isArray(payload.data)) && debug.assert(`fetched the hasMany relationship '${relationship.name}' for ${internalModel.modelName}:${internalModel.id} with link '${link}', but no data member is present in the response. If no data exists, the response should set { data: [] }`, 'data' in payload && Array.isArray(payload.data)));
      payload = syncRelationshipDataFromLink(store, payload, internalModel, relationship);
      let internalModelArray = store._push(payload);
      return internalModelArray;
    }, null, `DS: Extract payload of '${internalModel.modelName}' : hasMany '${relationship.type}'`);
  }
  function _findBelongsTo(adapter, store, internalModel, link, relationship, options) {
    let snapshot = internalModel.createSnapshot(options);
    let modelClass = store.modelFor(relationship.type);
    let useLink = !link || typeof link === 'string';
    let relatedLink = useLink ? link : link.href;
    let promise = adapter.findBelongsTo(store, snapshot, relatedLink, relationship);
    let label = `DS: Handle Adapter#findBelongsTo of ${internalModel.modelName} : ${relationship.type}`;
    promise = guardDestroyedStore(promise, store, label);
    promise = _guard(promise, _bind(_objectIsAlive, internalModel));
    return promise.then(adapterPayload => {
      let serializer = store.serializerFor(relationship.type);
      let payload = normalizeResponseHelper(serializer, store, modelClass, adapterPayload, null, 'findBelongsTo');
      (!('data' in payload && (payload.data === null || typeof payload.data === 'object' && !Array.isArray(payload.data))) && debug.assert(`fetched the belongsTo relationship '${relationship.name}' for ${internalModel.modelName}:${internalModel.id} with link '${link}', but no data member is present in the response. If no data exists, the response should set { data: null }`, 'data' in payload && (payload.data === null || typeof payload.data === 'object' && !Array.isArray(payload.data))));
      if (!payload.data && !payload.links && !payload.meta) {
        return null;
      }
      payload = syncRelationshipDataFromLink(store, payload, internalModel, relationship);
      return store._push(payload);
    }, null, `DS: Extract payload of ${internalModel.modelName} : ${relationship.type}`);
  }
  function _findAll(adapter, store, modelName, options) {
    let modelClass = store.modelFor(modelName); // adapter.findAll depends on the class
    let recordArray = store.peekAll(modelName);
    let snapshotArray = recordArray._createSnapshot(options);
    let promise = RSVP.Promise.resolve().then(() => adapter.findAll(store, modelClass, null, snapshotArray));
    let label = 'DS: Handle Adapter#findAll of ' + modelClass;
    promise = guardDestroyedStore(promise, store, label);
    return promise.then(adapterPayload => {
      (!(payloadIsNotBlank(adapterPayload)) && debug.assert(`You made a 'findAll' request for '${modelName}' records, but the adapter's response did not have any data`, payloadIsNotBlank(adapterPayload)));
      let serializer = store.serializerFor(modelName);
      let payload = normalizeResponseHelper(serializer, store, modelClass, adapterPayload, null, 'findAll');
      store._push(payload);
      store._didUpdateAll(modelName);
      return recordArray;
    }, null, 'DS: Extract payload of findAll ${modelName}');
  }
  function _query(adapter, store, modelName, query, recordArray, options) {
    let modelClass = store.modelFor(modelName); // adapter.query needs the class

    recordArray = recordArray || store.recordArrayManager.createAdapterPopulatedRecordArray(modelName, query);
    let promise = RSVP.Promise.resolve().then(() => adapter.query(store, modelClass, query, recordArray, options));
    let label = `DS: Handle Adapter#query of ${modelName}`;
    promise = guardDestroyedStore(promise, store, label);
    return promise.then(adapterPayload => {
      let serializer = store.serializerFor(modelName);
      let payload = normalizeResponseHelper(serializer, store, modelClass, adapterPayload, null, 'query');
      let internalModels = store._push(payload);
      (!(Array.isArray(internalModels)) && debug.assert('The response to store.query is expected to be an array but it was a single record. Please wrap your response in an array or use `store.queryRecord` to query for a single record.', Array.isArray(internalModels)));
      let identifiers = internalModels.map(im => im.identifier);
      if (recordArray) {
        recordArray._setIdentifiers(identifiers, payload);
      } else {
        recordArray = store.recordArrayManager.createAdapterPopulatedRecordArray(modelName, query, identifiers, payload);
      }
      return recordArray;
    }, null, `DS: Extract payload of query ${modelName}`);
  }
  function _queryRecord(adapter, store, modelName, query, options) {
    let modelClass = store.modelFor(modelName); // adapter.queryRecord needs the class
    let promise = RSVP.Promise.resolve().then(() => adapter.queryRecord(store, modelClass, query, options));
    let label = `DS: Handle Adapter#queryRecord of ${modelName}`;
    promise = guardDestroyedStore(promise, store, label);
    return promise.then(adapterPayload => {
      let serializer = store.serializerFor(modelName);
      let payload = normalizeResponseHelper(serializer, store, modelClass, adapterPayload, null, 'queryRecord');
      (!(!Array.isArray(payload.data)) && debug.assert(`Expected the primary data returned by the serializer for a 'queryRecord' response to be a single object or null but instead it was an array.`, !Array.isArray(payload.data)));
      return store._push(payload);
    }, null, `DS: Extract payload of queryRecord ${modelName}`);
  }

  /**
    @module @ember-data/store
  */

  function metaIsRelationshipDefinition(meta) {
    return typeof meta._inverseKey === 'function';
  }
  let peekGraph;
  {
    let _peekGraph;
    peekGraph = wrapper => {
      _peekGraph = _peekGraph || require('@ember-data/record-data/-private').peekGraph;
      return _peekGraph(wrapper);
    };
  }
  class RecordDataStoreWrapper {
    constructor(_store) {
      this._store = _store;
      this._willNotify = false;
      this._pendingNotifies = new Map();
    }
    get identifierCache() {
      return this._store.identifierCache;
    }
    _scheduleNotification(identifier, key, kind) {
      let pending = this._pendingNotifies.get(identifier);
      if (!pending) {
        pending = new Map();
        this._pendingNotifies.set(identifier, pending);
      }
      pending.set(key, kind);
      if (this._willNotify === true) {
        return;
      }
      this._willNotify = true;
      let backburner = this._store._backburner;
      backburner.schedule('notify', this, this._flushNotifications);
    }
    notifyErrorsChange(type, id, lid) {
      const resource = constructResource(type, id, lid);
      const identifier = this.identifierCache.getOrCreateRecordIdentifier(resource);
      let internalModel = internalModelFactoryFor(this._store).peek(identifier);
      if (internalModel) {
        internalModel.notifyErrorsChange();
      }
    }
    _flushNotifications() {
      if (this._willNotify === false) {
        return;
      }
      let pending = this._pendingNotifies;
      this._pendingNotifies = new Map();
      this._willNotify = false;
      const factory = internalModelFactoryFor(this._store);
      pending.forEach((map, identifier) => {
        const internalModel = factory.peek(identifier);
        if (internalModel) {
          map.forEach((kind, key) => {
            if (kind === 'belongsTo') {
              internalModel.notifyBelongsToChange(key);
            } else {
              internalModel.notifyHasManyChange(key);
            }
          });
        }
      });
    }
    attributesDefinitionFor(type) {
      return this._store._attributesDefinitionFor({
        type
      });
    }
    relationshipsDefinitionFor(type) {
      return this._store._relationshipsDefinitionFor({
        type
      });
    }
    inverseForRelationship(type, key) {
      const modelClass = this._store.modelFor(type);
      const definition = this.relationshipsDefinitionFor(type)[key];
      if (!definition) {
        return null;
      }
      if (metaIsRelationshipDefinition(definition)) {
        return definition._inverseKey(this._store, modelClass);
      } else if (definition.options && definition.options.inverse !== undefined) {
        return definition.options.inverse;
      } else {
        return null;
      }
    }
    inverseIsAsyncForRelationship(type, key) {
      const modelClass = this._store.modelFor(type);
      const definition = this.relationshipsDefinitionFor(type)[key];
      if (!definition) {
        return false;
      }
      if (definition.options && definition.options.inverse === null) {
        return false;
      }
      if (definition.inverseIsAsync !== undefined) {
        // TODO do we need to amend the RFC for this prop?
        // else we should add it to the TS interface and document.
        return !!definition.inverseIsAsync;
      } else if (metaIsRelationshipDefinition(definition)) {
        return definition._inverseIsAsync(this._store, modelClass);
      } else {
        return false;
      }
    }
    notifyPropertyChange(type, id, lid, key) {
      const resource = constructResource(type, id, lid);
      const identifier = this.identifierCache.getOrCreateRecordIdentifier(resource);
      let internalModel = internalModelFactoryFor(this._store).peek(identifier);
      if (internalModel) {
        internalModel.notifyPropertyChange(key);
      }
    }
    notifyHasManyChange(type, id, lid, key) {
      const resource = constructResource(type, id, lid);
      const identifier = this.identifierCache.getOrCreateRecordIdentifier(resource);
      this._scheduleNotification(identifier, key, 'hasMany');
    }
    notifyBelongsToChange(type, id, lid, key) {
      const resource = constructResource(type, id, lid);
      const identifier = this.identifierCache.getOrCreateRecordIdentifier(resource);
      this._scheduleNotification(identifier, key, 'belongsTo');
    }
    notifyStateChange(type, id, lid, key) {
      const resource = constructResource(type, id, lid);
      const identifier = this.identifierCache.getOrCreateRecordIdentifier(resource);
      let internalModel = internalModelFactoryFor(this._store).peek(identifier);
      if (internalModel) {
        internalModel.notifyStateChange(key);
      }
    }
    recordDataFor(type, id, lid) {
      let identifier;
      let isCreate = false;
      if (!id && !lid) {
        isCreate = true;
        identifier = {
          type
        };
      } else {
        const resource = constructResource(type, id, lid);
        identifier = this.identifierCache.getOrCreateRecordIdentifier(resource);
      }
      return this._store.recordDataFor(identifier, isCreate);
    }
    setRecordId(type, id, lid) {
      this._store.setRecordId(type, id, lid);
    }
    isRecordInUse(type, id, lid) {
      const resource = constructResource(type, id, lid);
      const identifier = this.identifierCache.getOrCreateRecordIdentifier(resource);
      const internalModel = internalModelFactoryFor(this._store).peek(identifier);
      if (!internalModel) {
        return false;
      }
      const record = internalModel._record;
      return record && !(record.isDestroyed || record.isDestroying);
    }
    disconnectRecord(type, id, lid) {
      const resource = constructResource(type, id, lid);
      const identifier = this.identifierCache.getOrCreateRecordIdentifier(resource);
      {
        let graph = peekGraph(this);
        if (graph) {
          graph.remove(identifier);
        }
      }
      let internalModel = internalModelFactoryFor(this._store).peek(identifier);
      if (internalModel) {
        internalModel.destroyFromRecordData();
      }
    }
  }

  let _RecordData;
  const {
    ENV
  } = Ember__default["default"];
  const RECORD_REFERENCES = new WeakCache$1('reference' );
  function freeze(obj) {
    if (typeof Object.freeze === 'function') {
      return Object.freeze(obj);
    }
    return obj;
  }

  /**
    The store contains all of the data for records loaded from the server.
    It is also responsible for creating instances of `Model` that wrap
    the individual data for a record, so that they can be bound to in your
    Handlebars templates.

    Define your application's store like this:

    ```app/services/store.js
    import Store from '@ember-data/store';

    export default class MyStore extends Store {}
    ```

    Most Ember.js applications will only have a single `Store` that is
    automatically created by their `Ember.Application`.

    You can retrieve models from the store in several ways. To retrieve a record
    for a specific id, use `Store`'s `findRecord()` method:

    ```javascript
    store.findRecord('person', 123).then(function (person) {
    });
    ```

    By default, the store will talk to your backend using a standard
    REST mechanism. You can customize how the store talks to your
    backend by specifying a custom adapter:

    ```app/adapters/application.js
    import Adapter from '@ember-data/adapter';

    export default class ApplicationAdapter extends Adapter {
    }
    ```

    You can learn more about writing a custom adapter by reading the `Adapter`
    documentation.

    ### Store createRecord() vs. push() vs. pushPayload()

    The store provides multiple ways to create new record objects. They have
    some subtle differences in their use which are detailed below:

    [createRecord](../methods/createRecord?anchor=createRecord) is used for creating new
    records on the client side. This will return a new record in the
    `created.uncommitted` state. In order to persist this record to the
    backend, you will need to call `record.save()`.

    [push](../methods/push?anchor=push) is used to notify Ember Data's store of new or
    updated records that exist in the backend. This will return a record
    in the `loaded.saved` state. The primary use-case for `store#push` is
    to notify Ember Data about record updates (full or partial) that happen
    outside of the normal adapter methods (for example
    [SSE](http://dev.w3.org/html5/eventsource/) or [Web
    Sockets](http://www.w3.org/TR/2009/WD-websockets-20091222/)).

    [pushPayload](../methods/pushPayload?anchor=pushPayload) is a convenience wrapper for
    `store#push` that will deserialize payloads if the
    Serializer implements a `pushPayload` method.

    Note: When creating a new record using any of the above methods
    Ember Data will update `RecordArray`s such as those returned by
    `store#peekAll()` or `store#findAll()`. This means any
    data bindings or computed properties that depend on the RecordArray
    will automatically be synced to include the new or updated record
    values.

    @main @ember-data/store
    @class Store
    @public
    @extends Ember.Service
  */

  class CoreStore extends Service__default["default"] {
    /**
      The default adapter to use to communicate to a backend server or
      other persistence layer. This will be overridden by an application
      adapter if present.
       If you want to specify `app/adapters/custom.js` as a string, do:
       ```js
      import Store from '@ember-data/store';
       export default Store.extend({
        constructor() {
          super(...arguments);
          this.adapter = 'custom';
        }
      }
      ```
       @property adapter
      @public
      @default '-json-api'
      @type {String}
    */

    /**
    This property returns the adapter, after resolving a possible
    string key.
     If the supplied `adapter` was a class, or a String property
    path resolved to a class, this property will instantiate the
    class.
     This property is cacheable, so the same instance of a specified
    adapter class should be used for the lifetime of the store.
     @property defaultAdapter
    @private
    @return Adapter
    */
    /**
      @method init
      @private
    */
    constructor() {
      super(...arguments);
      /**
       * EmberData specific backburner instance
       * @property _backburner
       * @private
       */
      this._backburner = backburner;
      this.recordArrayManager = new RecordArrayManager({
        store: this
      });
      this._adapterCache = Object.create(null);
      this._serializerCache = Object.create(null);
      this._storeWrapper = new RecordDataStoreWrapper(this);
      /*
        Ember Data uses several specialized micro-queues for organizing
        and coalescing similar async work.
         These queues are currently controlled by a flush scheduled into
        ember-data's custom backburner instance.
        */
      // used for coalescing internal model updates
      this._updatedInternalModels = [];
      this.shouldTrackAsyncRequests = false;
      this.generateStackTracesForTrackedRequests = false;
      RECORD_REFERENCES._generator = identifier => {
        return new RecordReference(this, identifier);
      };
      this._fetchManager = new FetchManager(this);
      this._notificationManager = new NotificationManager(this);
      this.__recordDataFor = this.__recordDataFor.bind(this);

      /**
       * Provides access to the IdentifierCache instance
       * for this store.
       *
       * The IdentifierCache can be used to generate or
       * retrieve a stable unique identifier for any resource.
       *
       * @property {IdentifierCache} identifierCache
       * @public
       */
      this.identifierCache = new IdentifierCache();
      {
        if (this.shouldTrackAsyncRequests === undefined) {
          this.shouldTrackAsyncRequests = false;
        }
        if (this.generateStackTracesForTrackedRequests === undefined) {
          this.generateStackTracesForTrackedRequests = false;
        }
        this._trackedAsyncRequests = [];
        this._trackAsyncRequestStart = label => {
          let trace = 'set `store.generateStackTracesForTrackedRequests = true;` to get a detailed trace for where this request originated';
          if (this.generateStackTracesForTrackedRequests) {
            try {
              throw new Error(`EmberData TrackedRequest: ${label}`);
            } catch (e) {
              trace = e;
            }
          }
          let token = freeze({
            label,
            trace
          });
          this._trackedAsyncRequests.push(token);
          return token;
        };
        this._trackAsyncRequestEnd = token => {
          let index = this._trackedAsyncRequests.indexOf(token);
          if (index === -1) {
            throw new Error(`Attempted to end tracking for the following request but it was not being tracked:\n${token}`);
          }
          this._trackedAsyncRequests.splice(index, 1);
        };
        this.__asyncWaiter = () => {
          let shouldTrack = this.shouldTrackAsyncRequests;
          let tracked = this._trackedAsyncRequests;
          let isSettled = tracked.length === 0;
          return shouldTrack !== true || isSettled;
        };
        test.registerWaiter(this.__asyncWaiter);
      }
    }
    getRequestStateService() {
      return this._fetchManager.requestCache;
    }
    _instantiateRecord(internalModel, modelName, recordData, identifier, properties) {
      // assert here
      if (properties !== undefined) {
        (!(typeof properties === 'object' && properties !== null) && debug.assert(`You passed '${properties}' as properties for record creation instead of an object.`, typeof properties === 'object' && properties !== null));
        if ('id' in properties) {
          internalModel.setId(properties.id);
        }

        // convert relationship Records to RecordDatas before passing to RecordData
        let defs = this._relationshipsDefinitionFor({
          type: modelName
        });
        if (defs !== null) {
          let keys = Object.keys(properties);
          let relationshipValue;
          for (let i = 0; i < keys.length; i++) {
            let prop = keys[i];
            let def = defs[prop];
            if (def !== undefined) {
              if (def.kind === 'hasMany') {
                {
                  assertRecordsPassedToHasMany(properties[prop]);
                }
                relationshipValue = extractRecordDatasFromRecords(properties[prop]);
              } else {
                relationshipValue = extractRecordDataFromRecord(properties[prop]);
              }
              properties[prop] = relationshipValue;
            }
          }
        }
      }

      // TODO guard against initRecordOptions no being there
      let createOptions = recordData._initRecordCreateOptions(properties);
      //TODO Igor pass a wrapper instead of RD
      let record = this.instantiateRecord(identifier, createOptions, this.__recordDataFor, this._notificationManager);
      setRecordIdentifier(record, identifier);
      //recordToInternalModelMap.set(record, internalModel);
      return record;
    }
    _internalDeleteRecord(internalModel) {
      internalModel.deleteRecord();
    }

    // FeatureFlagged in the DSModelStore claas
    _attributesDefinitionFor(identifier) {
      return this.getSchemaDefinitionService().attributesDefinitionFor(identifier);
    }
    _relationshipsDefinitionFor(identifier) {
      return this.getSchemaDefinitionService().relationshipsDefinitionFor(identifier);
    }
    registerSchemaDefinitionService(schema) {
      this._schemaDefinitionService = schema;
    }
    getSchemaDefinitionService() {
      return this._schemaDefinitionService;
    }

    // TODO Double check this return value is correct
    _relationshipMetaFor(modelName, id, key) {
      return this._relationshipsDefinitionFor({
        type: modelName
      })[key];
    }

    /**
      Returns the schema for a particular `modelName`.
       When used with Model from @ember-data/model the return is the model class,
      but this is not guaranteed.
       The class of a model might be useful if you want to get a list of all the
      relationship names of the model, see
      [`relationshipNames`](/ember-data/release/classes/Model?anchor=relationshipNames)
      for example.
       @method modelFor
      @public
      @param {String} modelName
      @return {subclass of Model | ShimModelClass}
      */
    modelFor(modelName) {
      {
        assertDestroyedStoreOnly$1(this, 'modelFor');
      }
      return getShimClass(this, modelName);
    }

    // Feature Flagged in DSModelStore
    /**
      Returns whether a ModelClass exists for a given modelName
      This exists for legacy support for the RESTSerializer,
      which due to how it must guess whether a key is a model
      must query for whether a match exists.
       We should investigate an RFC to make this public or removing
      this requirement.
       @method _hasModelFor
      @private
    */
    _hasModelFor(modelName) {
      (!(utils.isPresent(modelName)) && debug.assert(`You need to pass a model name to the store's hasModelFor method`, utils.isPresent(modelName)));
      (!(typeof modelName === 'string') && debug.assert(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`, typeof modelName === 'string'));
      return this.getSchemaDefinitionService().doesTypeExist(modelName);
    }

    // .....................
    // . CREATE NEW RECORD .
    // .....................

    /**
      Create a new record in the current store. The properties passed
      to this method are set on the newly created record.
       To create a new instance of a `Post`:
       ```js
      store.createRecord('post', {
        title: 'Ember is awesome!'
      });
      ```
       To create a new instance of a `Post` that has a relationship with a `User` record:
       ```js
      let user = this.store.peekRecord('user', 1);
      store.createRecord('post', {
        title: 'Ember is awesome!',
        user: user
      });
      ```
       @method createRecord
      @public
      @param {String} modelName
      @param {Object} inputProperties a hash of properties to set on the
        newly created record.
      @return {Model} record
    */
    createRecord(modelName, inputProperties) {
      {
        assertDestroyingStore$1(this, 'createRecord');
      }
      (!(utils.isPresent(modelName)) && debug.assert(`You need to pass a model name to the store's createRecord method`, utils.isPresent(modelName)));
      (!(typeof modelName === 'string') && debug.assert(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`, typeof modelName === 'string')); // This is wrapped in a `run.join` so that in test environments users do not need to manually wrap
      //   calls to `createRecord`. The run loop usage here is because we batch the joining and updating
      //   of record-arrays via ember's run loop, not our own.
      //
      //   to remove this, we would need to move to a new `async` API.
      return runloop._backburner.join(() => {
        return this._backburner.join(() => {
          let normalizedModelName = normalizeModelName(modelName);
          let properties = {
            ...inputProperties
          };

          // If the passed properties do not include a primary key,
          // give the adapter an opportunity to generate one. Typically,
          // client-side ID generators will use something like uuid.js
          // to avoid conflicts.

          if (utils.isNone(properties.id)) {
            properties.id = this._generateId(normalizedModelName, properties);
          }

          // Coerce ID to a string
          properties.id = coerceId(properties.id);
          const factory = internalModelFactoryFor(this);
          const internalModel = factory.build({
            type: normalizedModelName,
            id: properties.id
          });
          internalModel.send('loadedData');
          // TODO this exists just to proxy `isNew` to RecordData which is weird
          internalModel.didCreateRecord();
          return internalModel.getRecord(properties);
        });
      });
    }

    /**
      If possible, this method asks the adapter to generate an ID for
      a newly created record.
       @method _generateId
      @private
      @param {String} modelName
      @param {Object} properties from the new record
      @return {String} if the adapter can generate one, an ID
    */
    _generateId(modelName, properties) {
      let adapter = this.adapterFor(modelName);
      if (adapter && adapter.generateIdForRecord) {
        return adapter.generateIdForRecord(this, modelName, properties);
      }
      return null;
    }

    // .................
    // . DELETE RECORD .
    // .................

    /**
      For symmetry, a record can be deleted via the store.
       Example
       ```javascript
      let post = store.createRecord('post', {
        title: 'Ember is awesome!'
      });
       store.deleteRecord(post);
      ```
       @method deleteRecord
      @public
      @param {Model} record
    */
    deleteRecord(record) {
      {
        assertDestroyingStore$1(this, 'deleteRecord');
      }
      this._backburner.join(() => {
        let identifier = peekRecordIdentifier(record);
        if (identifier) {
          let internalModel = internalModelFactoryFor(this).peek(identifier);
          if (internalModel) {
            internalModel.deleteRecord();
          }
        }
      });
    }

    /**
      For symmetry, a record can be unloaded via the store.
      This will cause the record to be destroyed and freed up for garbage collection.
       Example
       ```javascript
      store.findRecord('post', 1).then(function(post) {
        store.unloadRecord(post);
      });
      ```
       @method unloadRecord
      @public
      @param {Model} record
    */
    unloadRecord(record) {
      {
        assertDestroyingStore$1(this, 'unloadRecord');
      }
      let identifier = peekRecordIdentifier(record);
      if (identifier) {
        let internalModel = internalModelFactoryFor(this).peek(identifier);
        if (internalModel) {
          internalModel.unloadRecord();
        }
      }
    }

    // ................
    // . FIND RECORDS .
    // ................

    /**
      @method find
      @param {String} modelName
      @param {String|Integer} id
      @param {Object} options
      @return {Promise} promise
      @private
    */
    find(modelName, id, options) {
      {
        assertDestroyingStore$1(this, 'find');
      }
      // The default `model` hook in Route calls `find(modelName, id)`,
      // that's why we have to keep this method around even though `findRecord` is
      // the public way to get a record by modelName and id.
      (!(arguments.length !== 1) && debug.assert(`Using store.find(type) has been removed. Use store.findAll(modelName) to retrieve all records for a given type.`, arguments.length !== 1));
      (!(!options) && debug.assert(`Calling store.find(modelName, id, { preload: preload }) is no longer supported. Use store.findRecord(modelName, id, { preload: preload }) instead.`, !options));
      (!(arguments.length === 2) && debug.assert(`You need to pass the model name and id to the store's find method`, arguments.length === 2));
      (!(typeof id === 'string' || typeof id === 'number') && debug.assert(`You cannot pass '${id}' as id to the store's find method`, typeof id === 'string' || typeof id === 'number'));
      (!(typeof id !== 'object') && debug.assert(`Calling store.find() with a query object is no longer supported. Use store.query() instead.`, typeof id !== 'object'));
      (!(typeof modelName === 'string') && debug.assert(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`, typeof modelName === 'string'));
      return this.findRecord(modelName, id);
    }

    /**
      This method returns a record for a given identifier or type and id combination.
       The `findRecord` method will always resolve its promise with the same
      object for a given identifier or type and `id`.
       The `findRecord` method will always return a **promise** that will be
      resolved with the record.
       **Example 1**
       ```app/routes/post.js
      import Route from '@ember/routing/route';
       export default class PostRoute extends Route {
        model({ post_id }) {
          return this.store.findRecord('post', post_id);
        }
      }
      ```
       **Example 2**
       `findRecord` can be called with a single identifier argument instead of the combination
      of `type` (modelName) and `id` as separate arguments. You may recognize this combo as
      the typical pairing from [JSON:API](https://jsonapi.org/format/#document-resource-object-identification)
       ```app/routes/post.js
      import Route from '@ember/routing/route';
       export default class PostRoute extends Route {
        model({ post_id: id }) {
          return this.store.findRecord({ type: 'post', id });
        }
      }
      ```
       **Example 3**
       If you have previously received an lid via an Identifier for this record, and the record
      has already been assigned an id, you can find the record again using just the lid.
       ```app/routes/post.js
      store.findRecord({ lid });
      ```
       If the record is not yet available, the store will ask the adapter's `findRecord`
      method to retrieve and supply the necessary data. If the record is already present
      in the store, it depends on the reload behavior _when_ the returned promise
      resolves.
       ### Preloading
       You can optionally `preload` specific attributes and relationships that you know of
      by passing them via the passed `options`.
       For example, if your Ember route looks like `/posts/1/comments/2` and your API route
      for the comment also looks like `/posts/1/comments/2` if you want to fetch the comment
      without also fetching the post you can pass in the post to the `findRecord` call:
       ```app/routes/post-comments.js
      import Route from '@ember/routing/route';
       export default class PostRoute extends Route {
        model({ post_id, comment_id: id }) {
          return this.store.findRecord({ type: 'comment', id, { preload: { post: post_id }} });
        }
      }
      ```
       In your adapter you can then access this id without triggering a network request via the
      snapshot:
       ```app/adapters/application.js
      import EmberObject from '@ember/object';
       export default class Adapter extends EmberObject {
         findRecord(store, schema, id, snapshot) {
          let type = schema.modelName;
           if (type === 'comment')
            let postId = snapshot.belongsTo('post', { id: true });
             return fetch(`./posts/${postId}/comments/${id}`)
              .then(response => response.json())
          }
        }
      }
      ```
       This could also be achieved by supplying the post id to the adapter via the adapterOptions
      property on the options hash.
       ```app/routes/post-comments.js
      import Route from '@ember/routing/route';
       export default class PostRoute extends Route {
        model({ post_id, comment_id: id }) {
          return this.store.findRecord({ type: 'comment', id, { adapterOptions: { post: post_id }} });
        }
      }
      ```
       ```app/adapters/application.js
      import EmberObject from '@ember/object';
       export default class Adapter extends EmberObject {
         findRecord(store, schema, id, snapshot) {
          let type = schema.modelName;
           if (type === 'comment')
            let postId = snapshot.adapterOptions.post;
             return fetch(`./posts/${postId}/comments/${id}`)
              .then(response => response.json())
          }
        }
      }
      ```
       If you have access to the post model you can also pass the model itself to preload:
       ```javascript
      let post = await store.findRecord('post', 1);
      let comment = await store.findRecord('comment', 2, { post: myPostModel });
      ```
       ### Reloading
       The reload behavior is configured either via the passed `options` hash or
      the result of the adapter's `shouldReloadRecord`.
       If `{ reload: true }` is passed or `adapter.shouldReloadRecord` evaluates
      to `true`, then the returned promise resolves once the adapter returns
      data, regardless if the requested record is already in the store:
       ```js
      store.push({
        data: {
          id: 1,
          type: 'post',
          revision: 1
        }
      });
       // adapter#findRecord resolves with
      // [
      //   {
      //     id: 1,
      //     type: 'post',
      //     revision: 2
      //   }
      // ]
      store.findRecord('post', 1, { reload: true }).then(function(post) {
        post.get('revision'); // 2
      });
      ```
       If no reload is indicated via the above mentioned ways, then the promise
      immediately resolves with the cached version in the store.
       ### Background Reloading
       Optionally, if `adapter.shouldBackgroundReloadRecord` evaluates to `true`,
      then a background reload is started, which updates the records' data, once
      it is available:
       ```js
      // app/adapters/post.js
      import ApplicationAdapter from "./application";
       export default class PostAdapter extends ApplicationAdapter {
        shouldReloadRecord(store, snapshot) {
          return false;
        },
         shouldBackgroundReloadRecord(store, snapshot) {
          return true;
        }
      });
       // ...
       store.push({
        data: {
          id: 1,
          type: 'post',
          revision: 1
        }
      });
       let blogPost = store.findRecord('post', 1).then(function(post) {
        post.get('revision'); // 1
      });
       // later, once adapter#findRecord resolved with
      // [
      //   {
      //     id: 1,
      //     type: 'post',
      //     revision: 2
      //   }
      // ]
       blogPost.get('revision'); // 2
      ```
       If you would like to force or prevent background reloading, you can set a
      boolean value for `backgroundReload` in the options object for
      `findRecord`.
       ```app/routes/post/edit.js
      import Route from '@ember/routing/route';
       export default class PostEditRoute extends Route {
        model(params) {
          return this.store.findRecord('post', params.post_id, { backgroundReload: false });
        }
      }
      ```
       If you pass an object on the `adapterOptions` property of the options
      argument it will be passed to your adapter via the snapshot
       ```app/routes/post/edit.js
      import Route from '@ember/routing/route';
       export default class PostEditRoute extends Route {
        model(params) {
          return this.store.findRecord('post', params.post_id, {
            adapterOptions: { subscribe: false }
          });
        }
      }
      ```
       ```app/adapters/post.js
      import MyCustomAdapter from './custom-adapter';
       export default class PostAdapter extends MyCustomAdapter {
        findRecord(store, type, id, snapshot) {
          if (snapshot.adapterOptions.subscribe) {
            // ...
          }
          // ...
        }
      }
      ```
       See [peekRecord](../methods/peekRecord?anchor=peekRecord) to get the cached version of a record.
       ### Retrieving Related Model Records
       If you use an adapter such as Ember's default
      [`JSONAPIAdapter`](/ember-data/release/classes/JSONAPIAdapter)
      that supports the [JSON API specification](http://jsonapi.org/) and if your server
      endpoint supports the use of an
      ['include' query parameter](http://jsonapi.org/format/#fetching-includes),
      you can use `findRecord()` or `findAll()` to automatically retrieve additional records related to
      the one you request by supplying an `include` parameter in the `options` object.
       For example, given a `post` model that has a `hasMany` relationship with a `comment`
      model, when we retrieve a specific post we can have the server also return that post's
      comments in the same request:
       ```app/routes/post.js
      import Route from '@ember/routing/route';
       export default class PostRoute extends Route {
        model(params) {
          return this.store.findRecord('post', params.post_id, { include: 'comments' });
        }
      }
      ```
       ```app/adapters/application.js
      import EmberObject from '@ember/object';
       export default class Adapter extends EmberObject {
         findRecord(store, schema, id, snapshot) {
          let type = schema.modelName;
           if (type === 'post')
            let includes = snapshot.adapterOptions.include;
             return fetch(`./posts/${postId}?include=${includes}`)
              .then(response => response.json())
          }
        }
      }
      ```
       In this case, the post's comments would then be available in your template as
      `model.comments`.
       Multiple relationships can be requested using an `include` parameter consisting of a
      comma-separated list (without white-space) while nested relationships can be specified
      using a dot-separated sequence of relationship names. So to request both the post's
      comments and the authors of those comments the request would look like this:
       ```app/routes/post.js
      import Route from '@ember/routing/route';
       export default class PostRoute extends Route {
        model(params) {
          return this.store.findRecord('post', params.post_id, { include: 'comments,comments.author' });
        }
      }
      ```
       ### Retrieving Specific Fields by Type
       If your server endpoint supports the use of a ['fields' query parameter](https://jsonapi.org/format/#fetching-sparse-fieldsets),
      you can use pass those fields through to your server.  At this point in time, this requires a few manual steps on your part.
       1. Implement `buildQuery` in your adapter.
       ```app/adapters/application.js
      buildQuery(snapshot) {
        let query = super.buildQuery(...arguments);
         let { fields } = snapshot.adapterOptions;
         if (fields) {
          query.fields = fields;
        }
         return query;
      }
      ```
       2. Then pass through the applicable fields to your `findRecord` request.
       Given a `post` model with attributes body, title, publishDate and meta, you can retrieve a filtered list of attributes.
       ```app/routes/post.js
      import Route from '@ember/routing/route';
      export default Route.extend({
        model(params) {
          return this.store.findRecord('post', params.post_id, { adapterOptions: { fields: { post: 'body,title' } });
        }
      });
      ```
       Moreover, you can filter attributes on related models as well. If a `post` has a `belongsTo` relationship to a user,
      just include the relationship key and attributes.
       ```app/routes/post.js
      import Route from '@ember/routing/route';
      export default Route.extend({
        model(params) {
          return this.store.findRecord('post', params.post_id, { adapterOptions: { fields: { post: 'body,title', user: 'name,email' } });
        }
      });
      ```
       @since 1.13.0
      @method findRecord
      @public
      @param {String|object} modelName - either a string representing the modelName or a ResourceIdentifier object containing both the type (a string) and the id (a string) for the record or an lid (a string) of an existing record
      @param {(String|Integer|Object)} id - optional object with options for the request only if the first param is a ResourceIdentifier, else the string id of the record to be retrieved
      @param {Object} [options] - if the first param is a string this will be the optional options for the request. See examples for available options.
      @return {Promise} promise
    */

    findRecord(resource, id, options) {
      {
        assertDestroyingStore$1(this, 'findRecord');
      }
      (!(utils.isPresent(resource)) && debug.assert(`You need to pass a modelName or resource identifier as the first argument to the store's findRecord method`, utils.isPresent(resource)));
      if (isMaybeIdentifier(resource)) {
        options = id;
      } else {
        (!(typeof resource === 'string') && debug.assert(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${resource}`, typeof resource === 'string'));
        const type = normalizeModelName(resource);
        const normalizedId = ensureStringId(id);
        resource = constructResource(type, normalizedId);
      }
      const internalModel = internalModelFactoryFor(this).lookup(resource);
      options = options || {};
      if (!internalModel.currentState.isLoaded) {
        return this._findByInternalModel(internalModel, options);
      }
      let fetchedInternalModel = this._findRecord(internalModel, options);
      return promiseRecord(fetchedInternalModel, `DS: Store#findRecord ${internalModel.identifier}`);
    }
    _findRecord(internalModel, options) {
      // Refetch if the reload option is passed
      if (options.reload) {
        return this._scheduleFetch(internalModel, options);
      }
      let snapshot = internalModel.createSnapshot(options);
      let adapter = this.adapterFor(internalModel.modelName);

      // Refetch the record if the adapter thinks the record is stale
      if (typeof options.reload === 'undefined' && adapter.shouldReloadRecord && adapter.shouldReloadRecord(this, snapshot)) {
        return this._scheduleFetch(internalModel, options);
      }
      if (options.backgroundReload === false) {
        return RSVP.Promise.resolve(internalModel);
      }

      // Trigger the background refetch if backgroundReload option is passed
      if (options.backgroundReload || !adapter.shouldBackgroundReloadRecord || adapter.shouldBackgroundReloadRecord(this, snapshot)) {
        this._scheduleFetch(internalModel, options);
      }

      // Return the cached record
      return RSVP.Promise.resolve(internalModel);
    }
    _findByInternalModel(internalModel, options = {}) {
      if (options.preload) {
        this._backburner.join(() => {
          internalModel.preloadData(options.preload);
        });
      }
      let fetchedInternalModel = this._findEmptyInternalModel(internalModel, options);
      return promiseRecord(fetchedInternalModel, `DS: Store#findRecord ${internalModel.modelName} with id: ${internalModel.id}`);
    }
    _findEmptyInternalModel(internalModel, options) {
      if (internalModel.currentState.isEmpty) {
        return this._scheduleFetch(internalModel, options);
      }
      if (internalModel.currentState.isLoading) {
        let pendingRequest = this._fetchManager.getPendingFetch(internalModel.identifier, options);
        if (pendingRequest) {
          return pendingRequest.then(() => RSVP.Promise.resolve(internalModel));
        }
        return this._scheduleFetch(internalModel, options);
      }
      return RSVP.Promise.resolve(internalModel);
    }

    /**
      This method makes a series of requests to the adapter's `find` method
      and returns a promise that resolves once they are all loaded.
       @private
      @method findByIds
      @param {String} modelName
      @param {Array} ids
      @return {Promise} promise
    */
    findByIds(modelName, ids) {
      {
        assertDestroyingStore$1(this, 'findByIds');
      }
      (!(utils.isPresent(modelName)) && debug.assert(`You need to pass a model name to the store's findByIds method`, utils.isPresent(modelName)));
      (!(typeof modelName === 'string') && debug.assert(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`, typeof modelName === 'string'));
      let promises = new Array(ids.length);
      let normalizedModelName = normalizeModelName(modelName);
      for (let i = 0; i < ids.length; i++) {
        promises[i] = this.findRecord(normalizedModelName, ids[i]);
      }
      return promiseArray(RSVP.all(promises).then(EmberArray.A, null, `DS: Store#findByIds of ${normalizedModelName} complete`));
    }
    _scheduleFetchMany(internalModels, options) {
      let fetches = new Array(internalModels.length);
      for (let i = 0; i < internalModels.length; i++) {
        fetches[i] = this._scheduleFetch(internalModels[i], options);
      }
      return RSVP.Promise.all(fetches);
    }
    _scheduleFetch(internalModel, options = {}) {
      let generateStackTrace = this.generateStackTracesForTrackedRequests;
      // TODO  remove this once we don't rely on state machine
      internalModel.send('loadingData');
      let identifier = internalModel.identifier;
      assertIdentifierHasId(identifier);
      let promise = this._fetchManager.scheduleFetch(identifier, options, generateStackTrace);
      return promise.then(payload => {
        // ensure that regardless of id returned we assign to the correct record
        if (payload.data && !Array.isArray(payload.data)) {
          payload.data.lid = identifier.lid;
        }

        // Returning this._push here, breaks typing but not any tests, investigate potential missing tests
        let potentiallyNewIm = this._push(payload);
        if (potentiallyNewIm && !Array.isArray(potentiallyNewIm)) {
          return potentiallyNewIm;
        } else {
          return internalModel;
        }
      }, error => {
        // TODO  remove this once we don't rely on state machine
        internalModel.send('notFound');
        if (internalModel.currentState.isEmpty) {
          internalModel.unloadRecord();
        }
        throw error;
      });
    }

    /**
      Get the reference for the specified record.
       Example
       ```javascript
      let userRef = store.getReference('user', 1);
       // check if the user is loaded
      let isLoaded = userRef.value() !== null;
       // get the record of the reference (null if not yet available)
      let user = userRef.value();
       // get the identifier of the reference
      if (userRef.remoteType() === 'id') {
      let id = userRef.id();
      }
       // load user (via store.find)
      userRef.load().then(...)
       // or trigger a reload
      userRef.reload().then(...)
       // provide data for reference
      userRef.push({ id: 1, username: '@user' }).then(function(user) {
        userRef.value() === user;
      });
      ```
       @method getReference
      @public
      @param {String|object} resource - modelName (string) or Identifier (object)
      @param {String|Integer} id
      @since 2.5.0
      @return {RecordReference}
    */
    getReference(resource, id) {
      {
        assertDestroyingStore$1(this, 'getReference');
      }
      let resourceIdentifier;
      if (arguments.length === 1 && isMaybeIdentifier(resource)) {
        resourceIdentifier = resource;
      } else {
        const type = normalizeModelName(resource);
        const normalizedId = ensureStringId(id);
        resourceIdentifier = constructResource(type, normalizedId);
      }
      (!(isMaybeIdentifier(resourceIdentifier)) && debug.assert('getReference expected to receive either a resource identifier or type and id as arguments', isMaybeIdentifier(resourceIdentifier)));
      let identifier = this.identifierCache.getOrCreateRecordIdentifier(resourceIdentifier);
      if (identifier) {
        return RECORD_REFERENCES.lookup(identifier);
      }
    }

    /**
      Get a record by a given type and ID without triggering a fetch.
       This method will synchronously return the record if it is available in the store,
      otherwise it will return `null`. A record is available if it has been fetched earlier, or
      pushed manually into the store.
       See [findRecord](../methods/findRecord?anchor=findRecord) if you would like to request this record from the backend.
       _Note: This is a synchronous method and does not return a promise._
       **Example 1**
       ```js
      let post = store.peekRecord('post', 1);
       post.id; // 1
      ```
       `peekRecord` can be called with a single identifier argument instead of the combination
      of `type` (modelName) and `id` as separate arguments. You may recognize this combo as
      the typical pairing from [JSON:API](https://jsonapi.org/format/#document-resource-object-identification)
       **Example 2**
       ```js
      let post = store.peekRecord({ type: 'post', id });
      post.id; // 1
      ```
       If you have previously received an lid from an Identifier for this record, you can lookup the record again using
      just the lid.
       **Example 3**
       ```js
      let post = store.peekRecord({ lid });
      post.id; // 1
      ```
        @since 1.13.0
      @method peekRecord
      @public
      @param {String|object} modelName - either a string representing the modelName or a ResourceIdentifier object containing both the type (a string) and the id (a string) for the record or an lid (a string) of an existing record
      @param {String|Integer} id - optional only if the first param is a ResourceIdentifier, else the string id of the record to be retrieved.
      @return {Model|null} record
    */

    peekRecord(identifier, id) {
      if (arguments.length === 1 && isMaybeIdentifier(identifier)) {
        let stableIdentifier = this.identifierCache.peekRecordIdentifier(identifier);
        if (stableIdentifier) {
          return internalModelFactoryFor(this).peek(stableIdentifier)?.getRecord() || null;
        }
        return null;
      }
      {
        assertDestroyingStore$1(this, 'peekRecord');
      }
      (!(utils.isPresent(identifier)) && debug.assert(`You need to pass a model name to the store's peekRecord method`, utils.isPresent(identifier)));
      (!(typeof identifier === 'string') && debug.assert(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${identifier}`, typeof identifier === 'string'));
      const type = normalizeModelName(identifier);
      const normalizedId = ensureStringId(id);
      if (this.hasRecordForId(type, normalizedId)) {
        const resource = constructResource(type, normalizedId);
        return internalModelFactoryFor(this).lookup(resource).getRecord();
      } else {
        return null;
      }
    }

    /**
      This method is called by the record's `reload` method.
       This method calls the adapter's `find` method, which returns a promise. When
      **that** promise resolves, `_reloadRecord` will resolve the promise returned
      by the record's `reload`.
       @method _reloadRecord
      @private
      @param {Model} internalModel
      @param options optional to include adapterOptions
      @return {Promise} promise
    */
    _reloadRecord(internalModel, options) {
      options.isReloading = true;
      let {
        id,
        modelName
      } = internalModel;
      let adapter = this.adapterFor(modelName);
      (!(id) && debug.assert(`You cannot reload a record without an ID`, id));
      (!(adapter) && debug.assert(`You tried to reload a record but you have no adapter (for ${modelName})`, adapter));
      (!(typeof adapter.findRecord === 'function' || typeof adapter.find === 'function') && debug.assert(`You tried to reload a record but your adapter does not implement 'findRecord'`, typeof adapter.findRecord === 'function' || typeof adapter.find === 'function'));
      return this._scheduleFetch(internalModel, options);
    }

    /**
     This method returns true if a record for a given modelName and id is already
     loaded in the store. Use this function to know beforehand if a findRecord()
     will result in a request or that it will be a cache hit.
      Example
      ```javascript
     store.hasRecordForId('post', 1); // false
     store.findRecord('post', 1).then(function() {
       store.hasRecordForId('post', 1); // true
     });
     ```
       @method hasRecordForId
      @public
      @param {String} modelName
      @param {(String|Integer)} id
      @return {Boolean}
    */
    hasRecordForId(modelName, id) {
      {
        assertDestroyingStore$1(this, 'hasRecordForId');
      }
      (!(utils.isPresent(modelName)) && debug.assert(`You need to pass a model name to the store's hasRecordForId method`, utils.isPresent(modelName)));
      (!(typeof modelName === 'string') && debug.assert(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`, typeof modelName === 'string'));
      const type = normalizeModelName(modelName);
      const trueId = ensureStringId(id);
      const resource = {
        type,
        id: trueId
      };
      const identifier = this.identifierCache.peekRecordIdentifier(resource);
      const internalModel = identifier && internalModelFactoryFor(this).peek(identifier);
      return !!internalModel && internalModel.currentState.isLoaded;
    }

    /**
      Returns id record for a given type and ID. If one isn't already loaded,
      it builds a new record and leaves it in the `empty` state.
       @method recordForId
      @private
      @param {String} modelName
      @param {(String|Integer)} id
      @return {Model} record
    */
    recordForId(modelName, id) {
      {
        assertDestroyingStore$1(this, 'recordForId');
      }
      (!(utils.isPresent(modelName)) && debug.assert(`You need to pass a model name to the store's recordForId method`, utils.isPresent(modelName)));
      (!(typeof modelName === 'string') && debug.assert(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`, typeof modelName === 'string'));
      const resource = constructResource(modelName, ensureStringId(id));
      return internalModelFactoryFor(this).lookup(resource).getRecord();
    }

    /**
      @method findMany
      @private
      @param {Array} internalModels
      @return {Promise} promise
    */
    findMany(internalModels, options) {
      {
        assertDestroyingStore$1(this, 'findMany');
      }
      let finds = new Array(internalModels.length);
      for (let i = 0; i < internalModels.length; i++) {
        finds[i] = this._findEmptyInternalModel(internalModels[i], options);
      }
      return RSVP.Promise.all(finds);
    }

    /**
      If a relationship was originally populated by the adapter as a link
      (as opposed to a list of IDs), this method is called when the
      relationship is fetched.
       The link (which is usually a URL) is passed through unchanged, so the
      adapter can make whatever request it wants.
       The usual use-case is for the server to register a URL as a link, and
      then use that URL in the future to make a request for the relationship.
       @method findHasMany
      @private
      @param {InternalModel} internalModel
      @param {any} link
      @param {(Relationship)} relationship
      @return {Promise} promise
    */
    findHasMany(internalModel, link, relationship, options) {
      {
        assertDestroyingStore$1(this, 'findHasMany');
      }
      let adapter = this.adapterFor(internalModel.modelName);
      (!(adapter) && debug.assert(`You tried to load a hasMany relationship but you have no adapter (for ${internalModel.modelName})`, adapter));
      (!(typeof adapter.findHasMany === 'function') && debug.assert(`You tried to load a hasMany relationship from a specified 'link' in the original payload but your adapter does not implement 'findHasMany'`, typeof adapter.findHasMany === 'function'));
      return _findHasMany(adapter, this, internalModel, link, relationship, options);
    }
    _findHasManyByJsonApiResource(resource, parentInternalModel, relationship, options) {
      {
        if (!resource) {
          return RSVP.resolve([]);
        }
        const {
          definition,
          state
        } = relationship;
        let adapter = this.adapterFor(definition.type);
        let {
          isStale,
          hasDematerializedInverse,
          hasReceivedData,
          isEmpty,
          shouldForceReload
        } = state;
        const allInverseRecordsAreLoaded = areAllInverseRecordsLoaded(this, resource);
        let shouldFindViaLink = resource.links && resource.links.related && (typeof adapter.findHasMany === 'function' || typeof resource.data === 'undefined') && (shouldForceReload || hasDematerializedInverse || isStale || !allInverseRecordsAreLoaded && !isEmpty);

        // fetch via link
        if (shouldFindViaLink) {
          // findHasMany, although not public, does not need to care about our upgrade relationship definitions
          // and can stick with the public definition API for now.
          const relationshipMeta = this._storeWrapper.relationshipsDefinitionFor(definition.inverseType)[definition.key];
          return this.findHasMany(parentInternalModel, resource.links.related, relationshipMeta, options);
        }
        let preferLocalCache = hasReceivedData && !isEmpty;
        let hasLocalPartialData = hasDematerializedInverse || isEmpty && Array.isArray(resource.data) && resource.data.length > 0;

        // fetch using data, pulling from local cache if possible
        if (!shouldForceReload && !isStale && (preferLocalCache || hasLocalPartialData)) {
          let internalModels = resource.data.map(json => this._internalModelForResource(json));
          return this.findMany(internalModels, options);
        }
        let hasData = hasReceivedData && !isEmpty;

        // fetch by data
        if (hasData || hasLocalPartialData) {
          let internalModels = resource.data.map(json => this._internalModelForResource(json));
          return this._scheduleFetchMany(internalModels, options);
        }

        // we were explicitly told we have no data and no links.
        //   TODO if the relationshipIsStale, should we hit the adapter anyway?
        return RSVP.resolve([]);
      }
    }

    /**
      @method findBelongsTo
      @private
      @param {InternalModel} internalModel
      @param {any} link
      @param {Relationship} relationship
      @return {Promise} promise
    */
    findBelongsTo(internalModel, link, relationship, options) {
      {
        assertDestroyingStore$1(this, 'findBelongsTo');
      }
      let adapter = this.adapterFor(internalModel.modelName);
      (!(adapter) && debug.assert(`You tried to load a belongsTo relationship but you have no adapter (for ${internalModel.modelName})`, adapter));
      (!(typeof adapter.findBelongsTo === 'function') && debug.assert(`You tried to load a belongsTo relationship from a specified 'link' in the original payload but your adapter does not implement 'findBelongsTo'`, typeof adapter.findBelongsTo === 'function'));
      return _findBelongsTo(adapter, this, internalModel, link, relationship, options);
    }
    _fetchBelongsToLinkFromResource(resource, parentInternalModel, relationshipMeta, options) {
      if (!resource || !resource.links || !resource.links.related) {
        // should we warn here, not sure cause its an internal method
        return RSVP.resolve(null);
      }
      return this.findBelongsTo(parentInternalModel, resource.links.related, relationshipMeta, options).then(internalModel => {
        return internalModel ? internalModel.getRecord() : null;
      });
    }
    _findBelongsToByJsonApiResource(resource, parentInternalModel, relationshipMeta, options) {
      if (!resource) {
        return RSVP.resolve(null);
      }
      const internalModel = resource.data ? this._internalModelForResource(resource.data) : null;
      let {
        isStale,
        hasDematerializedInverse,
        hasReceivedData,
        isEmpty,
        shouldForceReload
      } = resource._relationship.state;
      const allInverseRecordsAreLoaded = areAllInverseRecordsLoaded(this, resource);
      let shouldFindViaLink = resource.links && resource.links.related && (shouldForceReload || hasDematerializedInverse || isStale || !allInverseRecordsAreLoaded && !isEmpty);
      if (internalModel) {
        // short circuit if we are already loading
        let pendingRequest = this._fetchManager.getPendingFetch(internalModel.identifier, options);
        if (pendingRequest) {
          return pendingRequest.then(() => internalModel.getRecord());
        }
      }

      // fetch via link
      if (shouldFindViaLink) {
        return this._fetchBelongsToLinkFromResource(resource, parentInternalModel, relationshipMeta, options);
      }
      let preferLocalCache = hasReceivedData && allInverseRecordsAreLoaded && !isEmpty;
      let hasLocalPartialData = hasDematerializedInverse || isEmpty && resource.data;
      // null is explicit empty, undefined is "we don't know anything"
      let localDataIsEmpty = resource.data === undefined || resource.data === null;

      // fetch using data, pulling from local cache if possible
      if (!shouldForceReload && !isStale && (preferLocalCache || hasLocalPartialData)) {
        /*
          We have canonical data, but our local state is empty
         */
        if (localDataIsEmpty) {
          return RSVP.resolve(null);
        }
        if (!internalModel) {
          (!(internalModel) && debug.assert(`No InternalModel found for ${resource.lid}`, internalModel));
        }
        return this._findByInternalModel(internalModel, options);
      }
      let resourceIsLocal = !localDataIsEmpty && resource.data.id === null;
      if (internalModel && resourceIsLocal) {
        return RSVP.resolve(internalModel.getRecord());
      }

      // fetch by data
      if (internalModel && !localDataIsEmpty) {
        return this._scheduleFetch(internalModel, options).then(() => {
          return internalModel.getRecord();
        });
      }

      // we were explicitly told we have no data and no links.
      //   TODO if the relationshipIsStale, should we hit the adapter anyway?
      return RSVP.resolve(null);
    }

    /**
      This method delegates a query to the adapter. This is the one place where
      adapter-level semantics are exposed to the application.
       Each time this method is called a new request is made through the adapter.
       Exposing queries this way seems preferable to creating an abstract query
      language for all server-side queries, and then require all adapters to
      implement them.
       ---
       If you do something like this:
       ```javascript
      store.query('person', { page: 1 });
      ```
       The request made to the server will look something like this:
       ```
      GET "/api/v1/person?page=1"
      ```
       ---
       If you do something like this:
       ```javascript
      store.query('person', { ids: [1, 2, 3] });
      ```
       The request made to the server will look something like this:
       ```
      GET "/api/v1/person?ids%5B%5D=1&ids%5B%5D=2&ids%5B%5D=3"
      decoded: "/api/v1/person?ids[]=1&ids[]=2&ids[]=3"
      ```
       This method returns a promise, which is resolved with an
      [`AdapterPopulatedRecordArray`](/ember-data/release/classes/AdapterPopulatedRecordArray)
      once the server returns.
       @since 1.13.0
      @method query
      @public
      @param {String} modelName
      @param {any} query an opaque query to be used by the adapter
      @param {Object} options optional, may include `adapterOptions` hash which will be passed to adapter.query
      @return {Promise} promise
    */
    query(modelName, query, options) {
      {
        assertDestroyingStore$1(this, 'query');
      }
      (!(utils.isPresent(modelName)) && debug.assert(`You need to pass a model name to the store's query method`, utils.isPresent(modelName)));
      (!(query) && debug.assert(`You need to pass a query hash to the store's query method`, query));
      (!(typeof modelName === 'string') && debug.assert(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`, typeof modelName === 'string'));
      let adapterOptionsWrapper = {};
      if (options && options.adapterOptions) {
        adapterOptionsWrapper.adapterOptions = options.adapterOptions;
      }
      let normalizedModelName = normalizeModelName(modelName);
      return this._query(normalizedModelName, query, null, adapterOptionsWrapper);
    }
    _query(modelName, query, array, options) {
      (!(utils.isPresent(modelName)) && debug.assert(`You need to pass a model name to the store's query method`, utils.isPresent(modelName)));
      (!(query) && debug.assert(`You need to pass a query hash to the store's query method`, query));
      (!(typeof modelName === 'string') && debug.assert(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`, typeof modelName === 'string'));
      let adapter = this.adapterFor(modelName);
      (!(adapter) && debug.assert(`You tried to load a query but you have no adapter (for ${modelName})`, adapter));
      (!(typeof adapter.query === 'function') && debug.assert(`You tried to load a query but your adapter does not implement 'query'`, typeof adapter.query === 'function'));
      return promiseArray(_query(adapter, this, modelName, query, array, options));
    }

    /**
      This method makes a request for one record, where the `id` is not known
      beforehand (if the `id` is known, use [`findRecord`](../methods/findRecord?anchor=findRecord)
      instead).
       This method can be used when it is certain that the server will return a
      single object for the primary data.
       Each time this method is called a new request is made through the adapter.
       Let's assume our API provides an endpoint for the currently logged in user
      via:
       ```
      // GET /api/current_user
      {
        user: {
          id: 1234,
          username: 'admin'
        }
      }
      ```
       Since the specific `id` of the `user` is not known beforehand, we can use
      `queryRecord` to get the user:
       ```javascript
      store.queryRecord('user', {}).then(function(user) {
        let username = user.get('username');
        console.log(`Currently logged in as ${username}`);
      });
      ```
       The request is made through the adapters' `queryRecord`:
       ```app/adapters/user.js
      import Adapter from '@ember-data/adapter';
      import $ from 'jquery';
       export default class UserAdapter extends Adapter {
        queryRecord(modelName, query) {
          return $.getJSON('/api/current_user');
        }
      }
      ```
       Note: the primary use case for `store.queryRecord` is when a single record
      is queried and the `id` is not known beforehand. In all other cases
      `store.query` and using the first item of the array is likely the preferred
      way:
       ```
      // GET /users?username=unique
      {
        data: [{
          id: 1234,
          type: 'user',
          attributes: {
            username: "unique"
          }
        }]
      }
      ```
       ```javascript
      store.query('user', { username: 'unique' }).then(function(users) {
        return users.get('firstObject');
      }).then(function(user) {
        let id = user.get('id');
      });
      ```
       This method returns a promise, which resolves with the found record.
       If the adapter returns no data for the primary data of the payload, then
      `queryRecord` resolves with `null`:
       ```
      // GET /users?username=unique
      {
        data: null
      }
      ```
       ```javascript
      store.queryRecord('user', { username: 'unique' }).then(function(user) {
        console.log(user); // null
      });
      ```
       @since 1.13.0
      @method queryRecord
      @public
      @param {String} modelName
      @param {any} query an opaque query to be used by the adapter
      @param {Object} options optional, may include `adapterOptions` hash which will be passed to adapter.queryRecord
      @return {Promise} promise which resolves with the found record or `null`
    */
    queryRecord(modelName, query, options) {
      {
        assertDestroyingStore$1(this, 'queryRecord');
      }
      (!(utils.isPresent(modelName)) && debug.assert(`You need to pass a model name to the store's queryRecord method`, utils.isPresent(modelName)));
      (!(query) && debug.assert(`You need to pass a query hash to the store's queryRecord method`, query));
      (!(typeof modelName === 'string') && debug.assert(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`, typeof modelName === 'string'));
      let normalizedModelName = normalizeModelName(modelName);
      let adapter = this.adapterFor(normalizedModelName);
      let adapterOptionsWrapper = {};
      if (options && options.adapterOptions) {
        adapterOptionsWrapper.adapterOptions = options.adapterOptions;
      }
      (!(adapter) && debug.assert(`You tried to make a query but you have no adapter (for ${normalizedModelName})`, adapter));
      (!(typeof adapter.queryRecord === 'function') && debug.assert(`You tried to make a query but your adapter does not implement 'queryRecord'`, typeof adapter.queryRecord === 'function'));
      return promiseObject(_queryRecord(adapter, this, normalizedModelName, query, adapterOptionsWrapper).then(internalModel => {
        // the promise returned by store.queryRecord is expected to resolve with
        // an instance of Model
        if (internalModel) {
          return internalModel.getRecord();
        }
        return null;
      }));
    }

    /**
      `findAll` asks the adapter's `findAll` method to find the records for the
      given type, and returns a promise which will resolve with all records of
      this type present in the store, even if the adapter only returns a subset
      of them.
       ```app/routes/authors.js
      import Route from '@ember/routing/route';
       export default class AuthorsRoute extends Route {
        model(params) {
          return this.store.findAll('author');
        }
      }
      ```
       _When_ the returned promise resolves depends on the reload behavior,
      configured via the passed `options` hash and the result of the adapter's
      `shouldReloadAll` method.
       ### Reloading
       If `{ reload: true }` is passed or `adapter.shouldReloadAll` evaluates to
      `true`, then the returned promise resolves once the adapter returns data,
      regardless if there are already records in the store:
       ```js
      store.push({
        data: {
          id: 'first',
          type: 'author'
        }
      });
       // adapter#findAll resolves with
      // [
      //   {
      //     id: 'second',
      //     type: 'author'
      //   }
      // ]
      store.findAll('author', { reload: true }).then(function(authors) {
        authors.getEach('id'); // ['first', 'second']
      });
      ```
       If no reload is indicated via the above mentioned ways, then the promise
      immediately resolves with all the records currently loaded in the store.
       ### Background Reloading
       Optionally, if `adapter.shouldBackgroundReloadAll` evaluates to `true`,
      then a background reload is started. Once this resolves, the array with
      which the promise resolves, is updated automatically so it contains all the
      records in the store:
       ```app/adapters/application.js
      import Adapter from '@ember-data/adapter';
       export default class ApplicationAdapter extends Adapter {
        shouldReloadAll(store, snapshotsArray) {
          return false;
        },
         shouldBackgroundReloadAll(store, snapshotsArray) {
          return true;
        }
      });
       // ...
       store.push({
        data: {
          id: 'first',
          type: 'author'
        }
      });
       let allAuthors;
      store.findAll('author').then(function(authors) {
        authors.getEach('id'); // ['first']
         allAuthors = authors;
      });
       // later, once adapter#findAll resolved with
      // [
      //   {
      //     id: 'second',
      //     type: 'author'
      //   }
      // ]
       allAuthors.getEach('id'); // ['first', 'second']
      ```
       If you would like to force or prevent background reloading, you can set a
      boolean value for `backgroundReload` in the options object for
      `findAll`.
       ```app/routes/post/edit.js
      import Route from '@ember/routing/route';
       export default class PostEditRoute extends Route {
        model() {
          return this.store.findAll('post', { backgroundReload: false });
        }
      }
      ```
       If you pass an object on the `adapterOptions` property of the options
      argument it will be passed to you adapter via the `snapshotRecordArray`
       ```app/routes/posts.js
      import Route from '@ember/routing/route';
       export default class PostsRoute extends Route {
        model(params) {
          return this.store.findAll('post', {
            adapterOptions: { subscribe: false }
          });
        }
      }
      ```
       ```app/adapters/post.js
      import MyCustomAdapter from './custom-adapter';
       export default class UserAdapter extends MyCustomAdapter {
        findAll(store, type, sinceToken, snapshotRecordArray) {
          if (snapshotRecordArray.adapterOptions.subscribe) {
            // ...
          }
          // ...
        }
      }
      ```
       See [peekAll](../methods/peekAll?anchor=peekAll) to get an array of current records in the
      store, without waiting until a reload is finished.
       ### Retrieving Related Model Records
       If you use an adapter such as Ember's default
      [`JSONAPIAdapter`](/ember-data/release/classes/JSONAPIAdapter)
      that supports the [JSON API specification](http://jsonapi.org/) and if your server
      endpoint supports the use of an
      ['include' query parameter](http://jsonapi.org/format/#fetching-includes),
      you can use `findAll()` to automatically retrieve additional records related to
      those requested by supplying an `include` parameter in the `options` object.
       For example, given a `post` model that has a `hasMany` relationship with a `comment`
      model, when we retrieve all of the post records we can have the server also return
      all of the posts' comments in the same request:
       ```app/routes/posts.js
      import Route from '@ember/routing/route';
       export default class PostsRoute extends Route {
        model() {
          return this.store.findAll('post', { include: 'comments' });
        }
      }
      ```
      Multiple relationships can be requested using an `include` parameter consisting of a
      comma-separated list (without white-space) while nested relationships can be specified
      using a dot-separated sequence of relationship names. So to request both the posts'
      comments and the authors of those comments the request would look like this:
       ```app/routes/posts.js
      import Route from '@ember/routing/route';
       export default class PostsRoute extends Route {
        model() {
          return this.store.findAll('post', { include: 'comments,comments.author' });
        }
      }
      ```
       See [query](../methods/query?anchor=query) to only get a subset of records from the server.
       @since 1.13.0
      @method findAll
      @public
      @param {String} modelName
      @param {Object} options
      @return {Promise} promise
    */
    findAll(modelName, options) {
      {
        assertDestroyingStore$1(this, 'findAll');
      }
      (!(utils.isPresent(modelName)) && debug.assert(`You need to pass a model name to the store's findAll method`, utils.isPresent(modelName)));
      (!(typeof modelName === 'string') && debug.assert(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`, typeof modelName === 'string'));
      let normalizedModelName = normalizeModelName(modelName);
      let fetch = this._fetchAll(normalizedModelName, this.peekAll(normalizedModelName), options);
      return fetch;
    }

    /**
      @method _fetchAll
      @private
      @param {Model} modelName
      @param {RecordArray} array
      @return {Promise} promise
    */
    _fetchAll(modelName, array, options = {}) {
      let adapter = this.adapterFor(modelName);
      (!(adapter) && debug.assert(`You tried to load all records but you have no adapter (for ${modelName})`, adapter));
      (!(typeof adapter.findAll === 'function') && debug.assert(`You tried to load all records but your adapter does not implement 'findAll'`, typeof adapter.findAll === 'function'));
      if (options.reload) {
        object.set(array, 'isUpdating', true);
        return promiseArray(_findAll(adapter, this, modelName, options));
      }
      let snapshotArray = array._createSnapshot(options);
      if (options.reload !== false) {
        if (adapter.shouldReloadAll && adapter.shouldReloadAll(this, snapshotArray) || !adapter.shouldReloadAll && snapshotArray.length === 0) {
          object.set(array, 'isUpdating', true);
          return promiseArray(_findAll(adapter, this, modelName, options));
        }
      }
      if (options.backgroundReload === false) {
        return promiseArray(RSVP.Promise.resolve(array));
      }
      if (options.backgroundReload || !adapter.shouldBackgroundReloadAll || adapter.shouldBackgroundReloadAll(this, snapshotArray)) {
        object.set(array, 'isUpdating', true);
        _findAll(adapter, this, modelName, options);
      }
      return promiseArray(RSVP.Promise.resolve(array));
    }

    /**
      @method _didUpdateAll
      @param {String} modelName
      @private
    */
    _didUpdateAll(modelName) {
      this.recordArrayManager._didUpdateAll(modelName);
    }

    /**
      This method returns a filtered array that contains all of the
      known records for a given type in the store.
       Note that because it's just a filter, the result will contain any
      locally created records of the type, however, it will not make a
      request to the backend to retrieve additional records. If you
      would like to request all the records from the backend please use
      [store.findAll](../methods/findAll?anchor=findAll).
       Also note that multiple calls to `peekAll` for a given type will always
      return the same `RecordArray`.
       Example
       ```javascript
      let localPosts = store.peekAll('post');
      ```
       @since 1.13.0
      @method peekAll
      @public
      @param {String} modelName
      @return {RecordArray}
    */
    peekAll(modelName) {
      {
        assertDestroyingStore$1(this, 'peekAll');
      }
      (!(utils.isPresent(modelName)) && debug.assert(`You need to pass a model name to the store's peekAll method`, utils.isPresent(modelName)));
      (!(typeof modelName === 'string') && debug.assert(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`, typeof modelName === 'string'));
      let normalizedModelName = normalizeModelName(modelName);
      return this.recordArrayManager.liveRecordArrayFor(normalizedModelName);
    }

    /**
      This method unloads all records in the store.
      It schedules unloading to happen during the next run loop.
       Optionally you can pass a type which unload all records for a given type.
       ```javascript
      store.unloadAll();
      store.unloadAll('post');
      ```
       @method unloadAll
      @public
      @param {String} modelName
    */
    unloadAll(modelName) {
      {
        assertDestroyedStoreOnly$1(this, 'unloadAll');
      }
      (!(!modelName || typeof modelName === 'string') && debug.assert(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`, !modelName || typeof modelName === 'string'));
      const factory = internalModelFactoryFor(this);
      if (modelName === undefined) {
        factory.clear();
      } else {
        let normalizedModelName = normalizeModelName(modelName);
        factory.clear(normalizedModelName);
      }
    }
    filter() {
      (debug.assert('The filter API has been moved to a plugin. To enable store.filter using an environment flag, or to use an alternative, you can visit the ember-data-filter addon page. https://github.com/ember-data/ember-data-filter', false));
    }

    // ..............
    // . PERSISTING .
    // ..............

    /**
      This method is called by `record.save`, and gets passed a
      resolver for the promise that `record.save` returns.
       It schedules saving to happen at the end of the run loop.
       @method scheduleSave
      @private
      @param {InternalModel} internalModel
      @param {Resolver} resolver
      @param {Object} options
    */
    scheduleSave(internalModel, resolver, options) {
      if (internalModel._isRecordFullyDeleted()) {
        resolver.resolve();
        return resolver.promise;
      }
      internalModel.adapterWillCommit();
      if (!options) {
        options = {};
      }
      let recordData = internalModel._recordData;
      let operation = 'updateRecord';

      // TODO handle missing isNew
      if (recordData.isNew && recordData.isNew()) {
        operation = 'createRecord';
      } else if (recordData.isDeleted && recordData.isDeleted()) {
        operation = 'deleteRecord';
      }
      options[SaveOp] = operation;
      let fetchManagerPromise = this._fetchManager.scheduleSave(internalModel.identifier, options);
      let promise = fetchManagerPromise.then(payload => {
        /*
        Note to future spelunkers hoping to optimize.
        We rely on this `run` to create a run loop if needed
        that `store._push` and `store.didSaveRecord` will both share.
         We use `join` because it is often the case that we
        have an outer run loop available still from the first
        call to `store._push`;
        */
        this._backburner.join(() => {
          let data = payload && payload.data;
          this.didSaveRecord(internalModel, {
            data
          }, operation);
          if (payload && payload.included) {
            this._push({
              data: null,
              included: payload.included
            });
          }
        });
      }, e => {
        if (typeof e === 'string') {
          throw e;
        }
        const {
          error,
          parsedErrors
        } = e;
        this.recordWasInvalid(internalModel, parsedErrors, error);
        throw error;
      });
      return promise;
    }

    /**
      This method is called at the end of the run loop, and
      flushes any records passed into `scheduleSave`
       @method flushPendingSave
      @private
    */
    flushPendingSave() {
      // assert here
      return;
    }

    /**
      This method is called once the promise returned by an
      adapter's `createRecord`, `updateRecord` or `deleteRecord`
      is resolved.
       If the data provides a server-generated ID, it will
      update the record and the store's indexes.
       @method didSaveRecord
      @private
      @param {InternalModel} internalModel the in-flight internal model
      @param {Object} data optional data (see above)
      @param {string} op the adapter operation that was committed
    */
    didSaveRecord(internalModel, dataArg, op) {
      {
        assertDestroyingStore$1(this, 'didSaveRecord');
      }
      let data;
      if (dataArg) {
        data = dataArg.data;
      }
      if (!data) {
        (!(internalModel.id) && debug.assert(`Your ${internalModel.modelName} record was saved to the server, but the response does not have an id and no id has been set client side. Records must have ids. Please update the server response to provide an id in the response or generate the id on the client side either before saving the record or while normalizing the response.`, internalModel.id));
      }
      const cache = this.identifierCache;
      const identifier = internalModel.identifier;
      if (op !== 'deleteRecord' && data) {
        cache.updateRecordIdentifier(identifier, data);
      }

      //We first make sure the primary data has been updated
      //TODO try to move notification to the user to the end of the runloop
      internalModel.adapterDidCommit(data);
    }

    /**
      This method is called once the promise returned by an
      adapter's `createRecord`, `updateRecord` or `deleteRecord`
      is rejected with a `InvalidError`.
       @method recordWasInvalid
      @private
      @param {InternalModel} internalModel
      @param {Object} errors
    */
    recordWasInvalid(internalModel, parsedErrors, error) {
      {
        assertDestroyingStore$1(this, 'recordWasInvalid');
      }
      internalModel.adapterDidInvalidate(parsedErrors, error);
    }

    /**
      This method is called once the promise returned by an
      adapter's `createRecord`, `updateRecord` or `deleteRecord`
      is rejected (with anything other than a `InvalidError`).
       @method recordWasError
      @private
      @param {InternalModel} internalModel
      @param {Error} error
    */
    recordWasError(internalModel, error) {
      {
        assertDestroyingStore$1(this, 'recordWasError');
      }
      internalModel.adapterDidError(error);
    }

    /**
      Sets newly received ID from the adapter's `createRecord`, `updateRecord`
      or `deleteRecord`.
       @method setRecordId
      @private
      @param {String} modelName
      @param {string} newId
      @param {string} clientId
     */
    setRecordId(modelName, newId, clientId) {
      {
        assertDestroyingStore$1(this, 'setRecordId');
      }
      internalModelFactoryFor(this).setRecordId(modelName, newId, clientId);
    }

    // ................
    // . LOADING DATA .
    // ................

    /**
      This internal method is used by `push`.
       @method _load
      @private
      @param {Object} data
    */
    _load(data) {
      const resource = constructResource(normalizeModelName(data.type), ensureStringId(data.id), coerceId(data.lid));
      let internalModel = internalModelFactoryFor(this).lookup(resource, data);

      // store.push will be from empty
      // findRecord will be from root.loading
      // all else will be updates
      const isLoading = internalModel.currentState.stateName === 'root.loading';
      const isUpdate = internalModel.currentState.isEmpty === false && !isLoading;

      // exclude store.push (root.empty) case
      let identifier = internalModel.identifier;
      if (isUpdate || isLoading) {
        let updatedIdentifier = this.identifierCache.updateRecordIdentifier(identifier, data);
        if (updatedIdentifier !== identifier) {
          // we encountered a merge of identifiers in which
          // two identifiers (and likely two internalModels)
          // existed for the same resource. Now that we have
          // determined the correct identifier to use, make sure
          // that we also use the correct internalModel.
          identifier = updatedIdentifier;
          internalModel = internalModelFactoryFor(this).lookup(identifier);
        }
      }
      internalModel.setupData(data);
      if (!isUpdate) {
        this.recordArrayManager.recordDidChange(identifier);
      }
      return internalModel;
    }

    /**
      Push some data for a given type into the store.
       This method expects normalized [JSON API](http://jsonapi.org/) document. This means you have to follow [JSON API specification](http://jsonapi.org/format/) with few minor adjustments:
      - record's `type` should always be in singular, dasherized form
      - members (properties) should be camelCased
       [Your primary data should be wrapped inside `data` property](http://jsonapi.org/format/#document-top-level):
       ```js
      store.push({
        data: {
          // primary data for single record of type `Person`
          id: '1',
          type: 'person',
          attributes: {
            firstName: 'Daniel',
            lastName: 'Kmak'
          }
        }
      });
      ```
       [Demo.](http://ember-twiddle.com/fb99f18cd3b4d3e2a4c7)
       `data` property can also hold an array (of records):
       ```js
      store.push({
        data: [
          // an array of records
          {
            id: '1',
            type: 'person',
            attributes: {
              firstName: 'Daniel',
              lastName: 'Kmak'
            }
          },
          {
            id: '2',
            type: 'person',
            attributes: {
              firstName: 'Tom',
              lastName: 'Dale'
            }
          }
        ]
      });
      ```
       [Demo.](http://ember-twiddle.com/69cdbeaa3702159dc355)
       There are some typical properties for `JSONAPI` payload:
      * `id` - mandatory, unique record's key
      * `type` - mandatory string which matches `model`'s dasherized name in singular form
      * `attributes` - object which holds data for record attributes - `attr`'s declared in model
      * `relationships` - object which must contain any of the following properties under each relationships' respective key (example path is `relationships.achievements.data`):
        - [`links`](http://jsonapi.org/format/#document-links)
        - [`data`](http://jsonapi.org/format/#document-resource-object-linkage) - place for primary data
        - [`meta`](http://jsonapi.org/format/#document-meta) - object which contains meta-information about relationship
       For this model:
       ```app/models/person.js
      import Model, { attr, hasMany } from '@ember-data/model';
       export default class PersonRoute extends Route {
        @attr('string') firstName;
        @attr('string') lastName;
         @hasMany('person') children;
      }
      ```
       To represent the children as IDs:
       ```js
      {
        data: {
          id: '1',
          type: 'person',
          attributes: {
            firstName: 'Tom',
            lastName: 'Dale'
          },
          relationships: {
            children: {
              data: [
                {
                  id: '2',
                  type: 'person'
                },
                {
                  id: '3',
                  type: 'person'
                },
                {
                  id: '4',
                  type: 'person'
                }
              ]
            }
          }
        }
      }
      ```
       [Demo.](http://ember-twiddle.com/343e1735e034091f5bde)
       To represent the children relationship as a URL:
       ```js
      {
        data: {
          id: '1',
          type: 'person',
          attributes: {
            firstName: 'Tom',
            lastName: 'Dale'
          },
          relationships: {
            children: {
              links: {
                related: '/people/1/children'
              }
            }
          }
        }
      }
      ```
       If you're streaming data or implementing an adapter, make sure
      that you have converted the incoming data into this form. The
      store's [normalize](../methods/normalize?anchor=normalize) method is a convenience
      helper for converting a json payload into the form Ember Data
      expects.
       ```js
      store.push(store.normalize('person', data));
      ```
       This method can be used both to push in brand new
      records, as well as to update existing records.
       @method push
      @public
      @param {Object} data
      @return the record(s) that was created or
        updated.
    */

    push(data) {
      {
        assertDestroyingStore$1(this, 'push');
      }
      let pushed = this._push(data);
      if (Array.isArray(pushed)) {
        let records = pushed.map(internalModel => internalModel.getRecord());
        return records;
      }
      if (pushed === null) {
        return null;
      }
      let record = pushed.getRecord();
      return record;
    }

    /**
      Push some data in the form of a json-api document into the store,
      without creating materialized records.
       @method _push
      @private
      @param {Object} jsonApiDoc
      @return {InternalModel|Array<InternalModel>} pushed InternalModel(s)
    */
    _push(jsonApiDoc) {
      {
        assertDestroyingStore$1(this, '_push');
      }
      let internalModelOrModels = this._backburner.join(() => {
        let included = jsonApiDoc.included;
        let i, length;
        if (included) {
          for (i = 0, length = included.length; i < length; i++) {
            this._pushInternalModel(included[i]);
          }
        }
        if (Array.isArray(jsonApiDoc.data)) {
          length = jsonApiDoc.data.length;
          let internalModels = new Array(length);
          for (i = 0; i < length; i++) {
            internalModels[i] = this._pushInternalModel(jsonApiDoc.data[i]);
          }
          return internalModels;
        }
        if (jsonApiDoc.data === null) {
          return null;
        }
        (!(utils.typeOf(jsonApiDoc.data) === 'object') && debug.assert(`Expected an object in the 'data' property in a call to 'push' for ${jsonApiDoc.type}, but was ${utils.typeOf(jsonApiDoc.data)}`, utils.typeOf(jsonApiDoc.data) === 'object'));
        return this._pushInternalModel(jsonApiDoc.data);
      });

      // this typecast is necessary because `backburner.join` is mistyped to return void
      return internalModelOrModels;
    }
    _pushInternalModel(data) {
      let modelName = data.type;
      (!(data.id !== null && data.id !== undefined && data.id !== '') && debug.assert(`You must include an 'id' for ${modelName} in an object passed to 'push'`, data.id !== null && data.id !== undefined && data.id !== ''));
      (!(this._hasModelFor(modelName)) && debug.assert(`You tried to push data with a type '${modelName}' but no model could be found with that name.`, this._hasModelFor(modelName)));
      {
        // If ENV.DS_WARN_ON_UNKNOWN_KEYS is set to true and the payload
        // contains unknown attributes or relationships, log a warning.

        if (ENV.DS_WARN_ON_UNKNOWN_KEYS) {
          let unknownAttributes, unknownRelationships;
          let relationships = this.getSchemaDefinitionService().relationshipsDefinitionFor(modelName);
          let attributes = this.getSchemaDefinitionService().attributesDefinitionFor(modelName);
          // Check unknown attributes
          unknownAttributes = Object.keys(data.attributes || {}).filter(key => {
            return !attributes[key];
          });

          // Check unknown relationships
          unknownRelationships = Object.keys(data.relationships || {}).filter(key => {
            return !relationships[key];
          });
          let unknownAttributesMessage = `The payload for '${modelName}' contains these unknown attributes: ${unknownAttributes}. Make sure they've been defined in your model.`;
          (debug.warn(unknownAttributesMessage, unknownAttributes.length === 0, {
            id: 'ds.store.unknown-keys-in-payload'
          }));
          let unknownRelationshipsMessage = `The payload for '${modelName}' contains these unknown relationships: ${unknownRelationships}. Make sure they've been defined in your model.`;
          (debug.warn(unknownRelationshipsMessage, unknownRelationships.length === 0, {
            id: 'ds.store.unknown-keys-in-payload'
          }));
        }
      }

      // Actually load the record into the store.
      let internalModel = this._load(data);

      //    this._setupRelationshipsForModel(internalModel, data);

      return internalModel;
    }

    /**
      Push some raw data into the store.
       This method can be used both to push in brand new
      records, as well as to update existing records. You
      can push in more than one type of object at once.
      All objects should be in the format expected by the
      serializer.
       ```app/serializers/application.js
      import RESTSerializer from '@ember-data/serializer/rest';
       export default class ApplicationSerializer extends RESTSerializer;
      ```
       ```js
      let pushData = {
        posts: [
          { id: 1, postTitle: "Great post", commentIds: [2] }
        ],
        comments: [
          { id: 2, commentBody: "Insightful comment" }
        ]
      }
       store.pushPayload(pushData);
      ```
       By default, the data will be deserialized using a default
      serializer (the application serializer if it exists).
       Alternatively, `pushPayload` will accept a model type which
      will determine which serializer will process the payload.
       ```app/serializers/application.js
      import RESTSerializer from '@ember-data/serializer/rest';
        export default class ApplicationSerializer extends RESTSerializer;
      ```
       ```app/serializers/post.js
      import JSONSerializer from '@ember-data/serializer/json';
       export default JSONSerializer;
      ```
       ```js
      store.pushPayload(pushData); // Will use the application serializer
      store.pushPayload('post', pushData); // Will use the post serializer
      ```
       @method pushPayload
      @public
      @param {String} modelName Optionally, a model type used to determine which serializer will be used
      @param {Object} inputPayload
    */
    pushPayload(modelName, inputPayload) {
      {
        assertDestroyingStore$1(this, 'pushPayload');
      }
      let serializer;
      let payload;
      if (!inputPayload) {
        payload = modelName;
        serializer = this.serializerFor('application');
        (!(typeof serializer.pushPayload === 'function') && debug.assert(`You cannot use 'store#pushPayload' without a modelName unless your default serializer defines 'pushPayload'`, typeof serializer.pushPayload === 'function'));
      } else {
        payload = inputPayload;
        (!(typeof modelName === 'string') && debug.assert(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`, typeof modelName === 'string'));
        let normalizedModelName = normalizeModelName(modelName);
        serializer = this.serializerFor(normalizedModelName);
      }
      (!(serializer.pushPayload) && debug.assert(`You must define a pushPayload method in your serializer in order to call store.pushPayload`, serializer.pushPayload));
      serializer.pushPayload(this, payload);
    }
    reloadManyArray(manyArray, internalModel, key, options) {
      return internalModel.reloadHasMany(key, options);
    }
    reloadBelongsTo(belongsToProxy, internalModel, key, options) {
      return internalModel.reloadBelongsTo(key, options);
    }
    _internalModelForResource(resource) {
      return internalModelFactoryFor(this).getByResource(resource);
    }

    /**
     * TODO Only needed temporarily for test support
     *
     * @method _internalModelForId
     * @internal
     */
    _internalModelForId(type, id, lid) {
      const resource = constructResource(type, id, lid);
      return internalModelFactoryFor(this).lookup(resource);
    }
    serializeRecord(record, options) {
      let identifier = recordIdentifierFor(record);
      let internalModel = internalModelFactoryFor(this).peek(identifier);
      // TODO we used to check if the record was destroyed here
      return internalModel.createSnapshot(options).serialize(options);
    }
    saveRecord(record, options) {
      let identifier = recordIdentifierFor(record);
      let internalModel = internalModelFactoryFor(this).peek(identifier);
      // TODO we used to check if the record was destroyed here
      // Casting can be removed once REQUEST_SERVICE ff is turned on
      // because a `Record` is provided there will always be a matching internalModel
      return internalModel.save(options).then(() => record);
    }
    relationshipReferenceFor(identifier, key) {
      let stableIdentifier = this.identifierCache.getOrCreateRecordIdentifier(identifier);
      let internalModel = internalModelFactoryFor(this).peek(stableIdentifier);
      // TODO we used to check if the record was destroyed here
      return internalModel.referenceFor(null, key);
    }

    /**
     * Manages setting setting up the recordData returned by createRecordDataFor
     *
     * @method _createRecordData
     * @internal
     */
    _createRecordData(identifier) {
      const recordData = this.createRecordDataFor(identifier.type, identifier.id, identifier.lid, this._storeWrapper);
      setRecordDataFor(identifier, recordData);
      // TODO this is invalid for v2 recordData but required
      // for v1 recordData. Remember to remove this once the
      // RecordData manager handles converting recordData to identifier
      setRecordIdentifier(recordData, identifier);
      return recordData;
    }

    /**
     * Instantiation hook allowing applications or addons to configure the store
     * to utilize a custom RecordData implementation.
     *
     * @method createRecordDataFor
     * @public
     * @param modelName
     * @param id
     * @param clientId
     * @param storeWrapper
     */
    createRecordDataFor(modelName, id, clientId, storeWrapper) {
      {
        // we can't greedily use require as this causes
        // a cycle we can't easily fix (or clearly pin point) at present.
        //
        // it can be reproduced in partner tests by running
        // node ./scripts/packages-for-commit.js && yarn test-external:ember-observer
        if (_RecordData === undefined) {
          _RecordData = require__default["default"]('@ember-data/record-data/-private').RecordData;
        }
        let identifier = this.identifierCache.getOrCreateRecordIdentifier({
          type: modelName,
          id,
          lid: clientId
        });
        return new _RecordData(identifier, storeWrapper);
      }
    }

    /**
     * @internal
     */
    __recordDataFor(resource) {
      const identifier = this.identifierCache.getOrCreateRecordIdentifier(resource);
      return this.recordDataFor(identifier, false);
    }

    /**
     * @internal
     */
    recordDataFor(identifier, isCreate) {
      let internalModel;
      if (isCreate === true) {
        internalModel = internalModelFactoryFor(this).build({
          type: identifier.type,
          id: null
        });
        internalModel.send('loadedData');
        internalModel.didCreateRecord();
      } else {
        internalModel = internalModelFactoryFor(this).lookup(identifier);
      }
      return internalModel._recordData;
    }

    /**
      `normalize` converts a json payload into the normalized form that
      [push](../methods/push?anchor=push) expects.
       Example
       ```js
      socket.on('message', function(message) {
        let modelName = message.model;
        let data = message.data;
        store.push(store.normalize(modelName, data));
      });
      ```
       @method normalize
      @public
      @param {String} modelName The name of the model type for this payload
      @param {Object} payload
      @return {Object} The normalized payload
    */
    normalize(modelName, payload) {
      {
        assertDestroyingStore$1(this, 'normalize');
      }
      (!(utils.isPresent(modelName)) && debug.assert(`You need to pass a model name to the store's normalize method`, utils.isPresent(modelName)));
      (!(typeof modelName === 'string') && debug.assert(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${debug.inspect(modelName)}`, typeof modelName === 'string'));
      let normalizedModelName = normalizeModelName(modelName);
      let serializer = this.serializerFor(normalizedModelName);
      let model = this.modelFor(normalizedModelName);
      (!(serializer.normalize) && debug.assert(`You must define a normalize method in your serializer in order to call store.normalize`, serializer.normalize));
      return serializer.normalize(model, payload);
    }
    newClientId() {
      (debug.assert(`Private API Removed`, false));
    }

    // ...............
    // . DESTRUCTION .
    // ...............

    /**
     * TODO remove test usage
     *
     * @internal
     */
    _internalModelsFor(modelName) {
      return internalModelFactoryFor(this).modelMapFor(modelName);
    }

    // ......................
    // . PER-TYPE ADAPTERS
    // ......................

    /**
      Returns an instance of the adapter for a given type. For
      example, `adapterFor('person')` will return an instance of
      `App.PersonAdapter`.
       If no `App.PersonAdapter` is found, this method will look
      for an `App.ApplicationAdapter` (the default adapter for
      your entire application).
       If no `App.ApplicationAdapter` is found, it will return
      the value of the `defaultAdapter`.
       @method adapterFor
      @public
      @param {String} modelName
      @return Adapter
    */
    adapterFor(modelName) {
      {
        assertDestroyingStore$1(this, 'adapterFor');
      }
      (!(utils.isPresent(modelName)) && debug.assert(`You need to pass a model name to the store's adapterFor method`, utils.isPresent(modelName)));
      (!(typeof modelName === 'string') && debug.assert(`Passing classes to store.adapterFor has been removed. Please pass a dasherized string instead of ${modelName}`, typeof modelName === 'string'));
      let normalizedModelName = normalizeModelName(modelName);
      let {
        _adapterCache
      } = this;
      let adapter = _adapterCache[normalizedModelName];
      if (adapter) {
        return adapter;
      }
      let owner = application.getOwner(this);

      // name specific adapter
      adapter = owner.lookup(`adapter:${normalizedModelName}`);
      if (adapter !== undefined) {
        object.set(adapter, 'store', this);
        _adapterCache[normalizedModelName] = adapter;
        return adapter;
      }

      // no adapter found for the specific name, fallback and check for application adapter
      adapter = _adapterCache.application || owner.lookup('adapter:application');
      if (adapter !== undefined) {
        object.set(adapter, 'store', this);
        _adapterCache[normalizedModelName] = adapter;
        _adapterCache.application = adapter;
        return adapter;
      }

      // final fallback, no model specific adapter, no application adapter, no
      // `adapter` property on store: use json-api adapter
      // TODO we should likely deprecate this?
      adapter = _adapterCache['-json-api'] || owner.lookup('adapter:-json-api');
      (!(adapter !== undefined) && debug.assert(`No adapter was found for '${modelName}' and no 'application' adapter was found as a fallback.`, adapter !== undefined));
      object.set(adapter, 'store', this);
      _adapterCache[normalizedModelName] = adapter;
      _adapterCache['-json-api'] = adapter;
      return adapter;
    }

    // ..............................
    // . RECORD CHANGE NOTIFICATION .
    // ..............................

    /**
      Returns an instance of the serializer for a given type. For
      example, `serializerFor('person')` will return an instance of
      `App.PersonSerializer`.
       If no `App.PersonSerializer` is found, this method will look
      for an `App.ApplicationSerializer` (the default serializer for
      your entire application).
       If a serializer cannot be found on the adapter, it will fall back
      to an instance of `JSONSerializer`.
       @method serializerFor
      @public
      @param {String} modelName the record to serialize
      @return {Serializer}
    */
    serializerFor(modelName) {
      {
        assertDestroyingStore$1(this, 'serializerFor');
      }
      (!(utils.isPresent(modelName)) && debug.assert(`You need to pass a model name to the store's serializerFor method`, utils.isPresent(modelName)));
      (!(typeof modelName === 'string') && debug.assert(`Passing classes to store.serializerFor has been removed. Please pass a dasherized string instead of ${modelName}`, typeof modelName === 'string'));
      let normalizedModelName = normalizeModelName(modelName);
      let {
        _serializerCache
      } = this;
      let serializer = _serializerCache[normalizedModelName];
      if (serializer) {
        return serializer;
      }
      let owner = application.getOwner(this);

      // by name
      serializer = owner.lookup(`serializer:${normalizedModelName}`);
      if (serializer !== undefined) {
        object.set(serializer, 'store', this);
        _serializerCache[normalizedModelName] = serializer;
        return serializer;
      }

      // no serializer found for the specific model, fallback and check for application serializer
      serializer = _serializerCache.application || owner.lookup('serializer:application');
      if (serializer !== undefined) {
        object.set(serializer, 'store', this);
        _serializerCache[normalizedModelName] = serializer;
        _serializerCache.application = serializer;
        return serializer;
      }
      (!(serializer !== undefined) && debug.assert(`No serializer was found for '${modelName}' and no 'application' serializer was found as a fallback`, serializer !== undefined));
    }
    destroy() {
      // enqueue destruction of any adapters/serializers we have created
      for (let adapterName in this._adapterCache) {
        let adapter = this._adapterCache[adapterName];
        if (typeof adapter.destroy === 'function') {
          adapter.destroy();
        }
      }
      for (let serializerName in this._serializerCache) {
        let serializer = this._serializerCache[serializerName];
        if (typeof serializer.destroy === 'function') {
          serializer.destroy();
        }
      }
      {
        const peekGraph = require__default["default"]('@ember-data/record-data/-private').peekGraph;
        let graph = peekGraph(this);
        if (graph) {
          graph.destroy();
        }
      }
      return super.destroy();
    }
    willDestroy() {
      super.willDestroy();
      this.recordArrayManager.destroy();
      this.identifierCache.destroy();

      // destroy the graph before unloadAll
      // since then we avoid churning relationships
      // during unload
      {
        const peekGraph = require__default["default"]('@ember-data/record-data/-private').peekGraph;
        let graph = peekGraph(this);
        if (graph) {
          graph.willDestroy();
        }
      }
      this.unloadAll();
      {
        test.unregisterWaiter(this.__asyncWaiter);
        let shouldTrack = this.shouldTrackAsyncRequests;
        let tracked = this._trackedAsyncRequests;
        let isSettled = tracked.length === 0;
        if (!isSettled) {
          if (shouldTrack) {
            throw new Error('Async Request leaks detected. Add a breakpoint here and set `store.generateStackTracesForTrackedRequests = true;`to inspect traces for leak origins:\n\t - ' + tracked.map(o => o.label).join('\n\t - '));
          } else {
            (debug.warn('Async Request leaks detected. Add a breakpoint here and set `store.generateStackTracesForTrackedRequests = true;`to inspect traces for leak origins:\n\t - ' + tracked.map(o => o.label).join('\n\t - '), false, {
              id: 'ds.async.leak.detected'
            }));
          }
        }
      }
    }
    _updateInternalModel(internalModel) {
      if (this._updatedInternalModels.push(internalModel) !== 1) {
        return;
      }
      runloop._backburner.schedule('actions', this, this._flushUpdatedInternalModels);
    }
    _flushUpdatedInternalModels() {
      let updated = this._updatedInternalModels;
      for (let i = 0, l = updated.length; i < l; i++) {
        updated[i]._triggerDeferredTriggers();
      }
      updated.length = 0;
    }
  }
  let assertDestroyingStore$1;
  let assertDestroyedStoreOnly$1;
  {
    assertDestroyingStore$1 = function assertDestroyedStore(store, method) {
      (!(!(store.isDestroying || store.isDestroyed)) && debug.assert(`Attempted to call store.${method}(), but the store instance has already been destroyed.`, !(store.isDestroying || store.isDestroyed)));
    };
    assertDestroyedStoreOnly$1 = function assertDestroyedStoreOnly(store, method) {
      (!(!store.isDestroyed) && debug.assert(`Attempted to call store.${method}(), but the store instance has already been destroyed.`, !store.isDestroyed));
    };
  }

  /**
   * Flag indicating whether all inverse records are available
   *
   * true if the inverse exists and is loaded (not empty)
   * true if there is no inverse
   * false if the inverse exists and is not loaded (empty)
   *
   * @internal
   * @return {boolean}
   */
  function areAllInverseRecordsLoaded(store, resource) {
    const cache = store.identifierCache;
    if (Array.isArray(resource.data)) {
      // treat as collection
      // check for unloaded records
      let hasEmptyRecords = resource.data.reduce((hasEmptyModel, resourceIdentifier) => {
        return hasEmptyModel || internalModelForRelatedResource(store, cache, resourceIdentifier).currentState.isEmpty;
      }, false);
      return !hasEmptyRecords;
    } else {
      // treat as single resource
      if (!resource.data) {
        return true;
      } else {
        const internalModel = internalModelForRelatedResource(store, cache, resource.data);
        return !internalModel.currentState.isEmpty;
      }
    }
  }
  function internalModelForRelatedResource(store, cache, resource) {
    const identifier = cache.getOrCreateRecordIdentifier(resource);
    return store._internalModelForResource(identifier);
  }
  function isMaybeIdentifier(maybeIdentifier) {
    return Boolean(maybeIdentifier !== null && typeof maybeIdentifier === 'object' && ('id' in maybeIdentifier && 'type' in maybeIdentifier && maybeIdentifier.id && maybeIdentifier.type || maybeIdentifier.lid));
  }
  function assertIdentifierHasId(identifier) {
    (!(identifier.id !== null) && debug.assert(`Attempted to schedule a fetch for a record without an id.`, identifier.id !== null));
  }

  let _modelForMixin;
  {
    let _found;
    _modelForMixin = function () {
      if (!_found) {
        _found = require__default["default"]('@ember-data/model/-private')._modelForMixin;
      }
      return _found(...arguments);
    };
  }
  class DSModelSchemaDefinitionService {
    constructor(store) {
      this._modelFactoryCache = Object.create(null);
      this._relationshipsDefCache = Object.create(null);
      this._attributesDefCache = Object.create(null);
      this.store = store;
    }

    // Following the existing RD implementation
    attributesDefinitionFor(identifier) {
      let modelName, attributes;
      if (typeof identifier === 'string') {
        modelName = identifier;
      } else {
        modelName = identifier.type;
      }
      attributes = this._attributesDefCache[modelName];
      if (attributes === undefined) {
        let modelClass = this.store.modelFor(modelName);
        let attributeMap = object.get(modelClass, 'attributes');
        attributes = Object.create(null);
        attributeMap.forEach((meta, name) => attributes[name] = meta);
        this._attributesDefCache[modelName] = attributes;
      }
      return attributes;
    }

    // Following the existing RD implementation
    relationshipsDefinitionFor(identifier) {
      let modelName, relationships;
      if (typeof identifier === 'string') {
        modelName = identifier;
      } else {
        modelName = identifier.type;
      }
      relationships = this._relationshipsDefCache[modelName];
      if (relationships === undefined) {
        let modelClass = this.store.modelFor(modelName);
        relationships = object.get(modelClass, 'relationshipsObject') || null;
        this._relationshipsDefCache[modelName] = relationships;
      }
      return relationships;
    }
    doesTypeExist(modelName) {
      let normalizedModelName = normalizeModelName(modelName);
      let factory = getModelFactory(this.store, this._modelFactoryCache, normalizedModelName);
      return factory !== null;
    }
  }
  function getModelFactory(store, cache, normalizedModelName) {
    let factory = cache[normalizedModelName];
    if (!factory) {
      factory = _lookupModelFactory(store, normalizedModelName);
      if (!factory && true /* HAS_MODEL_PACKAGE */) {
        //Support looking up mixins as base types for polymorphic relationships
        factory = _modelForMixin(store, normalizedModelName);
      }
      if (!factory) {
        // we don't cache misses in case someone wants to register a missing model
        return null;
      }
      let klass = factory.class;
      if (klass.isModel) {
        let hasOwnModelNameSet = klass.modelName && Object.prototype.hasOwnProperty.call(klass, 'modelName');
        if (!hasOwnModelNameSet) {
          Object.defineProperty(klass, 'modelName', {
            value: normalizedModelName
          });
        }
      }
      cache[normalizedModelName] = factory;
    }
    return factory;
  }
  function _lookupModelFactory(store, normalizedModelName) {
    let owner = application.getOwner(store);
    return owner.factoryFor(`model:${normalizedModelName}`);
  }

  class Store extends CoreStore {
    constructor(...args) {
      super(...args);
      this._modelFactoryCache = Object.create(null);
      this._relationshipsDefCache = Object.create(null);
      this._attributesDefCache = Object.create(null);
    }
    instantiateRecord(identifier, createRecordArgs, recordDataFor, notificationManager) {
      let modelName = identifier.type;
      let internalModel = this._internalModelForResource(identifier);
      let createOptions = {
        store: this,
        _internalModel: internalModel,
        // TODO deprecate allowing unknown args setting
        _createProps: createRecordArgs,
        container: null
      };

      // ensure that `getOwner(this)` works inside a model instance
      application.setOwner(createOptions, application.getOwner(this));
      delete createOptions.container;
      let record = this._modelFactoryFor(modelName).create(createOptions);
      return record;
    }
    teardownRecord(record) {
      record.destroy();
    }
    modelFor(modelName) {
      {
        assertDestroyedStoreOnly(this, 'modelFor');
      }
      (!(utils.isPresent(modelName)) && debug.assert(`You need to pass a model name to the store's modelFor method`, utils.isPresent(modelName)));
      (!(typeof modelName === 'string') && debug.assert(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`, typeof modelName === 'string'));
      let maybeFactory = this._modelFactoryFor(modelName);

      // for factorFor factory/class split
      let klass = maybeFactory && maybeFactory.class ? maybeFactory.class : maybeFactory;
      if (!klass || !klass.isModel) {
        if (!this.getSchemaDefinitionService().doesTypeExist(modelName)) {
          throw new EmberError__default["default"](`No model was found for '${modelName}' and no schema handles the type`);
        }
        return getShimClass(this, modelName);
      } else {
        return klass;
      }
    }
    _modelFactoryFor(modelName) {
      {
        assertDestroyedStoreOnly(this, '_modelFactoryFor');
      }
      (!(utils.isPresent(modelName)) && debug.assert(`You need to pass a model name to the store's _modelFactoryFor method`, utils.isPresent(modelName)));
      (!(typeof modelName === 'string') && debug.assert(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`, typeof modelName === 'string'));
      let normalizedModelName = normalizeModelName(modelName);
      let factory = getModelFactory(this, this._modelFactoryCache, normalizedModelName);
      return factory;
    }
    _hasModelFor(modelName) {
      {
        assertDestroyingStore(this, '_hasModelFor');
      }
      (!(utils.isPresent(modelName)) && debug.assert(`You need to pass a model name to the store's hasModelFor method`, utils.isPresent(modelName)));
      (!(typeof modelName === 'string') && debug.assert(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`, typeof modelName === 'string'));
      return this.getSchemaDefinitionService().doesTypeExist(modelName);
    }
    _relationshipMetaFor(modelName, id, key) {
      return this._relationshipsDefinitionFor({
        type: modelName
      })[key];
    }
    _attributesDefinitionFor(identifier) {
      return this.getSchemaDefinitionService().attributesDefinitionFor(identifier);
    }
    _relationshipsDefinitionFor(identifier) {
      return this.getSchemaDefinitionService().relationshipsDefinitionFor(identifier);
    }
    getSchemaDefinitionService() {
      if (!this._schemaDefinitionService) {
        this._schemaDefinitionService = new DSModelSchemaDefinitionService(this);
      }
      return this._schemaDefinitionService;
    }
  }
  let assertDestroyingStore;
  let assertDestroyedStoreOnly;
  {
    assertDestroyingStore = function assertDestroyedStore(store, method) {
      (!(!(store.isDestroying || store.isDestroyed)) && debug.assert(`Attempted to call store.${method}(), but the store instance has already been destroyed.`, !(store.isDestroying || store.isDestroyed)));
    };
    assertDestroyedStoreOnly = function assertDestroyedStoreOnly(store, method) {
      (!(!store.isDestroyed) && debug.assert(`Attempted to call store.${method}(), but the store instance has already been destroyed.`, !store.isDestroyed));
    };
  }

  exports.AdapterPopulatedRecordArray = AdapterPopulatedRecordArray;
  exports.InternalModel = InternalModel;
  exports.PromiseArray = PromiseArray;
  exports.PromiseObject = PromiseObject;
  exports.RecordArray = RecordArray;
  exports.RecordArrayManager = RecordArrayManager;
  exports.RecordDataStoreWrapper = RecordDataStoreWrapper;
  exports.RootState = RootState$1;
  exports.Snapshot = Snapshot;
  exports.SnapshotRecordArray = SnapshotRecordArray;
  exports.Store = Store;
  exports.WeakCache = WeakCache$1;
  exports.coerceId = coerceId;
  exports.deprecatedPromiseObject = deprecatedPromiseObject;
  exports.errorsArrayToHash = errorsArrayToHash;
  exports.errorsHashToArray = errorsHashToArray;
  exports.normalizeModelName = normalizeModelName;
  exports.recordDataFor = recordDataFor;
  exports.recordIdentifierFor = recordIdentifierFor;
  exports.removeRecordDataFor = removeRecordDataFor;
  exports.setIdentifierForgetMethod = setIdentifierForgetMethod;
  exports.setIdentifierGenerationMethod = setIdentifierGenerationMethod;
  exports.setIdentifierResetMethod = setIdentifierResetMethod;
  exports.setIdentifierUpdateMethod = setIdentifierUpdateMethod;

  Object.defineProperty(exports, '__esModule', { value: true });

}));

;define("@ember-data/store/index", ["exports", "@ember-data/store/-private"], function (_exports, _private) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _private.Store;
    }
  });
  Object.defineProperty(_exports, "normalizeModelName", {
    enumerable: true,
    get: function () {
      return _private.normalizeModelName;
    }
  });
  Object.defineProperty(_exports, "recordIdentifierFor", {
    enumerable: true,
    get: function () {
      return _private.recordIdentifierFor;
    }
  });
  Object.defineProperty(_exports, "setIdentifierForgetMethod", {
    enumerable: true,
    get: function () {
      return _private.setIdentifierForgetMethod;
    }
  });
  Object.defineProperty(_exports, "setIdentifierGenerationMethod", {
    enumerable: true,
    get: function () {
      return _private.setIdentifierGenerationMethod;
    }
  });
  Object.defineProperty(_exports, "setIdentifierResetMethod", {
    enumerable: true,
    get: function () {
      return _private.setIdentifierResetMethod;
    }
  });
  Object.defineProperty(_exports, "setIdentifierUpdateMethod", {
    enumerable: true,
    get: function () {
      return _private.setIdentifierUpdateMethod;
    }
  });
  0; //eaimeta@70e063a35619d71f0,"@ember-data/store/-private"eaimeta@70e063a35619d71f
  /**
    @module @ember-data/store
  */
});
;define("@ember-decorators/component/index", ["exports", "@ember/debug", "@ember-decorators/utils/collapse-proto", "@ember-decorators/utils/decorator"], function (_exports, _debug, _collapseProto, _decorator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.tagName = _exports.layout = _exports.classNames = _exports.classNameBindings = _exports.className = _exports.attributeBindings = _exports.attribute = void 0;
  /**
    Decorator which indicates that the field or computed should be bound
    to an attribute value on the component. This replaces `attributeBindings`
    by directly allowing you to specify which properties should be bound.
    ```js
    export default class AttributeDemoComponent extends Component {
      @attribute role = 'button';
      // With provided attribute name
      @attribute('data-foo') foo = 'lol';
      @attribute
      @computed
      get id() {
        // return generated id
      }
    }
    ```
    @function
    @param {string} name? - The name of the attribute to bind the value to if it is truthy
  */
  const attribute = _exports.attribute = (0, _decorator.decoratorWithParams)((target, key, desc, params = []) => {
    (true && !(params.length <= 1) && (0, _debug.assert)(`The @attribute decorator may take up to one parameter, the bound attribute name. Received: ${params.length}`, params.length <= 1));
    (true && !(params.every(s => typeof s === 'string')) && (0, _debug.assert)(`The @attribute decorator may only receive strings as parameters. Received: ${params}`, params.every(s => typeof s === 'string')));
    (0, _collapseProto.default)(target);
    if (!target.hasOwnProperty('attributeBindings')) {
      let parentValue = target.attributeBindings;
      target.attributeBindings = Array.isArray(parentValue) ? parentValue.slice() : [];
    }
    let binding = params[0] ? `${key}:${params[0]}` : key;
    target.attributeBindings.push(binding);
    if (desc) {
      // Decorated fields are currently not configurable in Babel for some reason, so ensure
      // that the field becomes configurable (else it messes with things)
      desc.configurable = true;
    }
    return desc;
  });

  /**
    Decorator which indicates that the field or computed should be bound to
    the component class names. This replaces `classNameBindings` by directly
    allowing you to specify which properties should be bound.
    ```js
    export default class ClassNameDemoComponent extends Component {
      @className boundField = 'default-class';
      // With provided true/false class names
      @className('active', 'inactive') isActive = true;
      @className
      @computed
      get boundComputed() {
        // return generated class
      }
    }
    ```
    @function
    @param {string} truthyName? - The class to be applied if the value the field
                                  is truthy, defaults to the name of the field.
    @param {string} falsyName? - The class to be applied if the value of the field
                                 is falsy.
  */
  const className = _exports.className = (0, _decorator.decoratorWithParams)((target, key, desc, params = []) => {
    (true && !(params.length <= 2) && (0, _debug.assert)(`The @className decorator may take up to two parameters, the truthy class and falsy class for the class binding. Received: ${params.length}`, params.length <= 2));
    (true && !(params.every(s => typeof s === 'string')) && (0, _debug.assert)(`The @className decorator may only receive strings as parameters. Received: ${params}`, params.every(s => typeof s === 'string')));
    (0, _collapseProto.default)(target);
    if (!target.hasOwnProperty('classNameBindings')) {
      let parentValue = target.classNameBindings;
      target.classNameBindings = Array.isArray(parentValue) ? parentValue.slice() : [];
    }
    let binding = params.length > 0 ? `${key}:${params.join(':')}` : key;
    target.classNameBindings.push(binding);
    if (desc) {
      // Decorated fields are currently not configurable in Babel for some reason, so ensure
      // that the field becomes configurable (else it messes with things)
      desc.configurable = true;
    }
    return desc;
  });
  function concattedPropDecorator(propName) {
    return (0, _decorator.decoratorWithRequiredParams)((target, propValues) => {
      (true && !(propValues.reduce((allStrings, name) => allStrings && typeof name === 'string', true)) && (0, _debug.assert)(`The @${propName} decorator must be provided strings, received: ${propValues}`, propValues.reduce((allStrings, name) => allStrings && typeof name === 'string', true)));
      (0, _collapseProto.default)(target.prototype);
      if (propName in target.prototype) {
        let parentValues = target.prototype[propName];
        propValues.unshift(...parentValues);
      }
      target.prototype[propName] = propValues;
      return target;
    }, propName);
  }

  /**
    Class decorator which specifies the class names to be applied to a component.
    This replaces the `classNames` property on components in the traditional Ember
    object model.
    ```js
    @classNames('a-static-class', 'another-static-class')
    export default class ClassNamesDemoComponent extends Component {}
    ```
    @function
    @param {...string} classNames - The list of classes to be applied to the component
  */
  const classNames = _exports.classNames = concattedPropDecorator('classNames');

  /**
    Class decorator which specifies the class name bindings to be applied to a
    component. This replaces the `classNameBindings` property on components in the
    traditional Ember object model.
    ```js
    @classNameBindings('aDynamicProperty:truthy-class-name:falsy-class-name')
    export default class ClassNamesDemoComponent extends Component {}
    ```
    @function
    @param {...string} classNameBindings - The list of class name bindings to be applied to the component
  */
  const classNameBindings = _exports.classNameBindings = concattedPropDecorator('classNameBindings');

  /**
    Class decorator which specifies the attribute bindings to be applied to a
    component. This replaces the `attributeBindings` property on components in the
    traditional Ember object model.
    ```js
    @attributeBindings('role', 'aProperty:a-different-attribute')
    export default class ClassNamesDemoComponent extends Component {}
    ```
    @function
    @param {...string} attributeBindings - The list of attribute bindings to be applied to the component
  */
  const attributeBindings = _exports.attributeBindings = concattedPropDecorator('attributeBindings');

  /**
    Class decorator which specifies the tag name of the component. This replaces
    the `tagName` property on components in the traditional Ember object model.
    ```js
    @tagName('button')
    export default class TagNameDemoComponent extends Component {}
    ```
    @function
    @param {string} tagName - The HTML tag to be used for the component
  */
  const tagName = _exports.tagName = (0, _decorator.decoratorWithRequiredParams)((target, params) => {
    let [tagName] = params;
    (true && !(params.length === 1) && (0, _debug.assert)(`The @tagName decorator must be provided exactly one argument, received: ${tagName}`, params.length === 1));
    (true && !(typeof tagName === 'string') && (0, _debug.assert)(`The @tagName decorator must be provided a string, received: ${tagName}`, typeof tagName === 'string'));
    target.prototype.tagName = tagName;
    return target;
  }, 'tagName');

  /**
    Class decorator which specifies the layout for the component. This replaces
    the `layout` property on components in the traditional Ember object model.
    ```js
    import template from '../templates/components/x-foo';
    @layout(template)
    export default class TagNameDemoComponent extends Component {}
    ```
    ```js
    import hbs from 'htmlbars-inline-precompile';
    @layout(hbs`<h1>Hello {{ name }}</h1>`)
    export default class TagNameDemoComponent extends Component {
      constructor() {
        super(...arguments);
        this.set('name', 'Tomster');
      }
    }
    ```
    @function
    @param {TemplateFactory} template - The compiled template to be used for the component
  */
  const layout = (...params) => target => {
    let [template] = params;
    (true && !(params.length === 1) && (0, _debug.assert)(`The @layout decorator must be provided exactly one argument, received: ${params.length}`, params.length === 1));
    (true && !(typeof template !== 'string') && (0, _debug.assert)(`The @layout decorator must be provided a template, received: ${template}. If you want to compile strings to templates, be sure to use 'htmlbars-inline-precompile'`, typeof template !== 'string'));
    (true && !(typeof template === 'function' || typeof template === 'object' && typeof template.indexOf === 'undefined') && (0, _debug.assert)(`The @layout decorator must be provided a template, received: ${template}`, typeof template === 'function' || typeof template === 'object' && typeof template.indexOf === 'undefined'));
    target.prototype.layout = template;
    return target;
  };
  _exports.layout = layout;
});
;define("@ember-decorators/object/index", ["exports", "@ember/debug", "@ember/object", "@ember/object/computed", "@ember/object/events", "@ember/object/observers", "@ember-decorators/utils/decorator"], function (_exports, _debug, _object, _computed, _events, _observers, _decorator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.unobserves = _exports.on = _exports.off = _exports.observes = void 0;
  /**
    Triggers the target function when the dependent properties have changed. Note,
    `@observes` _must_ be used on EmberObject based classes only, otherwise there
    may be subtle issues and breakage.
  
    ```javascript
    import { observes } from '@ember-decorators/object';
  
    class Foo {
      @observes('foo')
      bar() {
        //...
      }
    }
    ```
  
    @function
    @param {...String} propertyNames - Names of the properties that trigger the function
   */
  const observes = _exports.observes = (0, _decorator.decoratorWithRequiredParams)((target, key, desc, params) => {
    (true && !(desc && typeof desc.value === 'function') && (0, _debug.assert)('The @observes decorator must be applied to functions', desc && typeof desc.value === 'function'));
    (true && !(target instanceof _object.default) && (0, _debug.assert)(`You attempted to use @observes on ${target.constructor.name}#${key}, which does not extend from EmberObject. Unfortunately this does not work with stage 1 decorator transforms, and will break in subtle ways. You must rewrite your class to extend from EmberObject.`, target instanceof _object.default));
    for (let path of params) {
      (0, _computed.expandProperties)(path, expandedPath => {
        (0, _observers.addObserver)(target, expandedPath, null, key);
      });
    }
    return desc;
  }, 'observes');

  /**
    Removes observers from the target function.
  
    ```javascript
    import { observes, unobserves } from '@ember-decorators/object';
  
    class Foo {
      @observes('foo')
      bar() {
        //...
      }
    }
  
    class Bar extends Foo {
      @unobserves('foo') bar;
    }
    ```
  
    @function
    @param {...String} propertyNames - Names of the properties that no longer trigger the function
   */
  const unobserves = _exports.unobserves = (0, _decorator.decoratorWithRequiredParams)((target, key, desc, params) => {
    for (let path of params) {
      (0, _computed.expandProperties)(path, expandedPath => {
        (0, _observers.removeObserver)(target, expandedPath, null, key);
      });
    }
    return desc;
  }, 'unobserves');

  /**
    Adds an event listener to the target function.
  
    ```javascript
    import { on } from '@ember-decorators/object';
  
    class Foo {
      @on('fooEvent', 'barEvent')
      bar() {
        //...
      }
    }
    ```
  
    @function
    @param {...String} eventNames - Names of the events that trigger the function
   */
  const on = _exports.on = (0, _decorator.decoratorWithRequiredParams)((target, key, desc, params) => {
    (true && !(desc && typeof desc.value === 'function') && (0, _debug.assert)('The @on decorator must be applied to functions', desc && typeof desc.value === 'function'));
    for (let eventName of params) {
      (0, _events.addListener)(target, eventName, null, key);
    }
    return desc;
  }, 'on');

  /**
    Removes an event listener from the target function.
  
    ```javascript
    import { on, off } from '@ember-decorators/object';
  
    class Foo {
      @on('fooEvent', 'barEvent')
      bar() {
        //...
      }
    }
  
    class Bar extends Foo {
      @off('fooEvent', 'barEvent') bar;
    }
    ```
  
    @function
    @param {...String} eventNames - Names of the events that no longer trigger the function
   */
  const off = _exports.off = (0, _decorator.decoratorWithRequiredParams)((target, key, desc, params) => {
    for (let eventName of params) {
      (0, _events.removeListener)(target, eventName, null, key);
    }
    return desc;
  }, 'off');
});
;define("@ember-decorators/utils/-private/class-field-descriptor", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.isDescriptor = isDescriptor;
  _exports.isFieldDescriptor = isFieldDescriptor;
  function isClassDescriptor(possibleDesc) {
    let [target] = possibleDesc;
    return possibleDesc.length === 1 && typeof target === 'function' && 'prototype' in target && !target.__isComputedDecorator;
  }
  function isFieldDescriptor(possibleDesc) {
    let [target, key, desc] = possibleDesc;
    return possibleDesc.length === 3 && typeof target === 'object' && target !== null && typeof key === 'string' && (typeof desc === 'object' && desc !== null && 'enumerable' in desc && 'configurable' in desc || desc === undefined) // TS compatibility
    ;
  }

  function isDescriptor(possibleDesc) {
    return isFieldDescriptor(possibleDesc) || isClassDescriptor(possibleDesc);
  }
});
;define("@ember-decorators/utils/collapse-proto", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = collapseProto;
  function collapseProto(target) {
    // We must collapse the superclass prototype to make sure that the `actions`
    // object will exist. Since collapsing doesn't generally happen until a class is
    // instantiated, we have to do it manually.
    if (typeof target.constructor.proto === 'function') {
      target.constructor.proto();
    }
  }
});
;define("@ember-decorators/utils/decorator", ["exports", "@ember/debug", "@ember-decorators/utils/-private/class-field-descriptor"], function (_exports, _debug, _classFieldDescriptor) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.decoratorWithParams = decoratorWithParams;
  _exports.decoratorWithRequiredParams = decoratorWithRequiredParams;
  /**
   * A macro that takes a decorator function and allows it to optionally
   * receive parameters
   *
   * ```js
   * let foo = decoratorWithParams((target, desc, key, params) => {
   *   console.log(params);
   * });
   *
   * class {
   *   @foo bar; // undefined
   *   @foo('bar') baz; // ['bar']
   * }
   * ```
   *
   * @param {Function} fn - decorator function
   */
  function decoratorWithParams(fn) {
    return function (...params) {
      // determine if user called as @computed('blah', 'blah') or @computed
      if ((0, _classFieldDescriptor.isDescriptor)(params)) {
        return fn(...params);
      } else {
        return (...desc) => fn(...desc, params);
      }
    };
  }

  /**
   * A macro that takes a decorator function and requires it to receive
   * parameters:
   *
   * ```js
   * let foo = decoratorWithRequiredParams((target, desc, key, params) => {
   *   console.log(params);
   * });
   *
   * class {
   *   @foo('bar') baz; // ['bar']
   *   @foo bar; // Error
   * }
   * ```
   *
   * @param {Function} fn - decorator function
   */
  function decoratorWithRequiredParams(fn, name) {
    return function (...params) {
      (true && !(!(0, _classFieldDescriptor.isDescriptor)(params) && params.length > 0) && (0, _debug.assert)(`The @${name || fn.name} decorator requires parameters`, !(0, _classFieldDescriptor.isDescriptor)(params) && params.length > 0));
      return (...desc) => fn(...desc, params);
    };
  }
});
;define("@ember/render-modifiers/modifiers/did-insert", ["exports", "@ember/modifier"], function (_exports, _modifier) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
    The `{{did-insert}}` element modifier is activated when an element is
    inserted into the DOM.
  
    In this example, the `fadeIn` function receives the `div` DOM element as its
    first argument and is executed after the element is inserted into the DOM.
  
    ```handlebars
    <div {{did-insert this.fadeIn}} class="alert">
      {{yield}}
    </div>
    ```
  
    ```js
    export default Component.extend({
      fadeIn(element) {
        element.classList.add('fade-in');
      }
    });
    ```
  
    By default, the executed function will be unbound. If you would like to access
    the component context in your function, use the `action` decorator as follows:
  
    ```handlebars
    <div {{did-insert this.incrementCount}}>first</div>
    <div {{did-insert this.incrementCount}}>second</div>
  
    <p>{{this.count}} elements were rendered</p>
    ```
  
    ```js
    export default Component.extend({
      count: tracked({ value: 0 }),
  
      incrementCount: action(function() {
        this.count++;
      })
    });
    ```
  
    @method did-insert
    @public
  */
  var _default = _exports.default = (0, _modifier.setModifierManager)(() => ({
    capabilities: (0, _modifier.capabilities)('3.22', {
      disableAutoTracking: true
    }),
    createModifier() {},
    installModifier(_state, element, {
      positional: [fn, ...args],
      named
    }) {
      fn(element, args, named);
    },
    updateModifier() {},
    destroyModifier() {}
  }), class DidInsertModifier {});
});
;define("@ember/render-modifiers/modifiers/did-update", ["exports", "@ember/modifier", "@embroider/macros/es-compat2"], function (_exports, _modifier, _esCompat) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const untrack = function () {
    {
      // ember-source@3.27 shipped "real modules" by default, so we can just use
      // importSync to get @glimmer/validator directly
      return (0, _esCompat.default)(require("@glimmer/validator")).untrack;
    }
  }();

  /**
    The `{{did-update}}` element modifier is activated when any of its arguments
    are updated. It does not run on initial render.
  
    In this example, the `resize` function receives the `textarea` DOM element as its
    first argument and is executed anytime the `@text` argument changes.
  
    ```handlebars
    <textarea {{did-update this.resize @text}} readonly style="padding: 0px;">
      {{@text}}
    </textarea>
    ```
  
    ```js
    export default Component.extend({
      resize(element) {
        element.style.height = `${element.scrollHeight}px`;
      }
    });
    ```
  
    In addition to the `element`, both named and positional arguments are passed to the
    executed function:
  
    ```handlebars
    <div {{did-update this.logArguments @first @second third=@third}} />
    ```
  
    ```js
    export default Component.extend({
      logArguments(element, [first, second], { third }) {
        console.log('element', element);
        console.log('positional args', first, second);
        console.log('names args', third);
      }
    });
    ```
  
    By default, the executed function will be unbound. If you would like to access
    the component context in your function, use the `action` decorator as follows:
  
    ```handlebars
    <div {{did-update this.someFunction @someArg} />
    ```
  
    ```js
    export default Component.extend({
      someFunction: action(function(element, [someArg]) {
        // the `this` context will be the component instance
      })
    });
    ```
  
    @method did-update
    @public
  */
  var _default = _exports.default = (0, _modifier.setModifierManager)(() => ({
    capabilities: (0, _modifier.capabilities)('3.22', {
      disableAutoTracking: false
    }),
    createModifier() {
      return {
        element: null
      };
    },
    installModifier(state, element, args) {
      // save element into state bucket
      state.element = element;
      {
        // Consume individual properties to entangle tracking.
        // https://github.com/emberjs/ember.js/issues/19277
        // https://github.com/ember-modifier/ember-modifier/pull/63#issuecomment-815908201
        args.positional.forEach(() => {});
        args.named && Object.values(args.named);
      }
    },
    updateModifier({
      element
    }, args) {
      let [fn, ...positional] = args.positional;
      {
        // Consume individual properties to entangle tracking.
        // https://github.com/emberjs/ember.js/issues/19277
        // https://github.com/ember-modifier/ember-modifier/pull/63#issuecomment-815908201
        args.positional.forEach(() => {});
        args.named && Object.values(args.named);
        untrack(() => {
          fn(element, positional, args.named);
        });
      }
    },
    destroyModifier() {}
  }), class DidUpdateModifier {});
});
;define("@ember/render-modifiers/modifiers/will-destroy", ["exports", "@ember/modifier"], function (_exports, _modifier) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
    The `{{will-destroy}}` element modifier is activated immediately before the element
    is removed from the DOM.
  
    ```handlebars
    <div {{will-destroy this.teardownPlugin}}>
      {{yield}}
    </div>
    ```
  
    ```js
    export default Component.extend({
      teardownPlugin(element) {
        // teardown logic here
      }
    });
    ```
  
    By default, the executed function will be unbound. If you would like to access
    the component context in your function, use the `action` decorator as follows:
  
    ```handlebars
    <div {{will-destroy this.teardownPlugin}}>
      {{yield}}
    </div>
    ```
  
    ```js
    export default Component.extend({
      teardownPlugin: action(function(element) {
        // the `this` context will be the component instance
      })
    });
    ```
  
    @method will-destroy
    @public
  */
  var _default = _exports.default = (0, _modifier.setModifierManager)(() => ({
    capabilities: (0, _modifier.capabilities)('3.22', {
      disableAutoTracking: true
    }),
    createModifier() {
      return {
        element: null
      };
    },
    installModifier(state, element) {
      state.element = element;
    },
    updateModifier() {},
    destroyModifier({
      element
    }, args) {
      let [fn, ...positional] = args.positional;
      fn(element, positional, args.named);
    }
  }), class WillDestroyModifier {});
});
;define("@ember/string/cache", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  class Cache {
    constructor(limit, func, store) {
      _defineProperty(this, "size", 0);
      _defineProperty(this, "misses", 0);
      _defineProperty(this, "hits", 0);
      this.limit = limit;
      this.func = func;
      this.store = store;
      this.store = store || new Map();
    }
    get(key) {
      let value = this.store.get(key);
      if (this.store.has(key)) {
        this.hits++;
        return this.store.get(key);
      } else {
        this.misses++;
        value = this.set(key, this.func(key));
      }
      return value;
    }
    set(key, value) {
      if (this.limit > this.size) {
        this.size++;
        this.store.set(key, value);
      }
      return value;
    }
    purge() {
      this.store.clear();
      this.size = 0;
      this.hits = 0;
      this.misses = 0;
    }
  }
  _exports.default = Cache;
});
;define("@ember/string/index", ["exports", "@ember/string/cache"], function (_exports, _cache) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.camelize = camelize;
  _exports.capitalize = capitalize;
  _exports.classify = classify;
  _exports.dasherize = dasherize;
  _exports.decamelize = decamelize;
  _exports.getString = getString;
  _exports.getStrings = getStrings;
  _exports.htmlSafe = htmlSafe;
  _exports.isHTMLSafe = isHTMLSafe;
  _exports.setStrings = setStrings;
  _exports.underscore = underscore;
  _exports.w = w;
  /* eslint-disable no-useless-escape */

  /**
   @module @ember/string
   */

  // STATE within a module is frowned upon, this exists
  // to support Ember.STRINGS but shield ember internals from this legacy global
  // API.
  let STRINGS = {};
  function setStrings(strings) {
    STRINGS = strings;
  }
  function getStrings() {
    return STRINGS;
  }
  function getString(name) {
    return STRINGS[name];
  }
  const STRING_DASHERIZE_REGEXP = /[ _]/g;
  const STRING_DASHERIZE_CACHE = new _cache.default(1000, key => decamelize(key).replace(STRING_DASHERIZE_REGEXP, '-'));
  const STRING_CAMELIZE_REGEXP_1 = /(\-|\_|\.|\s)+(.)?/g;
  const STRING_CAMELIZE_REGEXP_2 = /(^|\/)([A-Z])/g;
  const CAMELIZE_CACHE = new _cache.default(1000, key => key.replace(STRING_CAMELIZE_REGEXP_1, (_match, _separator, chr) => chr ? chr.toUpperCase() : '').replace(STRING_CAMELIZE_REGEXP_2, (match
  /*, separator, chr */) => match.toLowerCase()));
  const STRING_CLASSIFY_REGEXP_1 = /^(\-|_)+(.)?/;
  const STRING_CLASSIFY_REGEXP_2 = /(.)(\-|\_|\.|\s)+(.)?/g;
  const STRING_CLASSIFY_REGEXP_3 = /(^|\/|\.)([a-z])/g;
  const CLASSIFY_CACHE = new _cache.default(1000, str => {
    const replace1 = (_match, _separator, chr) => chr ? `_${chr.toUpperCase()}` : '';
    const replace2 = (_match, initialChar, _separator, chr) => initialChar + (chr ? chr.toUpperCase() : '');
    const parts = str.split('/');
    for (let i = 0; i < parts.length; i++) {
      parts[i] = parts[i].replace(STRING_CLASSIFY_REGEXP_1, replace1).replace(STRING_CLASSIFY_REGEXP_2, replace2);
    }
    return parts.join('/').replace(STRING_CLASSIFY_REGEXP_3, (match
    /*, separator, chr */) => match.toUpperCase());
  });
  const STRING_UNDERSCORE_REGEXP_1 = /([a-z\d])([A-Z]+)/g;
  const STRING_UNDERSCORE_REGEXP_2 = /\-|\s+/g;
  const UNDERSCORE_CACHE = new _cache.default(1000, str => str.replace(STRING_UNDERSCORE_REGEXP_1, '$1_$2').replace(STRING_UNDERSCORE_REGEXP_2, '_').toLowerCase());
  const STRING_CAPITALIZE_REGEXP = /(^|\/)([a-z\u00C0-\u024F])/g;
  const CAPITALIZE_CACHE = new _cache.default(1000, str => str.replace(STRING_CAPITALIZE_REGEXP, (match
  /*, separator, chr */) => match.toUpperCase()));
  const STRING_DECAMELIZE_REGEXP = /([a-z\d])([A-Z])/g;
  const DECAMELIZE_CACHE = new _cache.default(1000, str => str.replace(STRING_DECAMELIZE_REGEXP, '$1_$2').toLowerCase());
  /**
    Splits a string into separate units separated by spaces, eliminating any
    empty strings in the process. This is a convenience method for split that
    is mostly useful when applied to the `String.prototype`.
  
    ```javascript
    import { w } from '@ember/string';
  
    w("alpha beta gamma").forEach(function(key) {
      console.log(key);
    });
  
    // > alpha
    // > beta
    // > gamma
    ```
  
    @method w
    @param {String} str The string to split
    @return {Array} array containing the split strings
    @public
  */

  function w(str) {
    return str.split(/\s+/);
  }
  /**
    Converts a camelized string into all lower case separated by underscores.
  
    ```javascript
    import { decamelize } from '@ember/string';
  
    decamelize('innerHTML');          // 'inner_html'
    decamelize('action_name');        // 'action_name'
    decamelize('css-class-name');     // 'css-class-name'
    decamelize('my favorite items');  // 'my favorite items'
    ```
  
    @method decamelize
    @param {String} str The string to decamelize.
    @return {String} the decamelized string.
    @public
  */

  function decamelize(str) {
    return DECAMELIZE_CACHE.get(str);
  }
  /**
    Replaces underscores, spaces, or camelCase with dashes.
  
    ```javascript
    import { dasherize } from '@ember/string';
  
    dasherize('innerHTML');                // 'inner-html'
    dasherize('action_name');              // 'action-name'
    dasherize('css-class-name');           // 'css-class-name'
    dasherize('my favorite items');        // 'my-favorite-items'
    dasherize('privateDocs/ownerInvoice';  // 'private-docs/owner-invoice'
    ```
  
    @method dasherize
    @param {String} str The string to dasherize.
    @return {String} the dasherized string.
    @public
  */

  function dasherize(str) {
    return STRING_DASHERIZE_CACHE.get(str);
  }
  /**
    Returns the lowerCamelCase form of a string.
  
    ```javascript
    import { camelize } from '@ember/string';
  
    camelize('innerHTML');                   // 'innerHTML'
    camelize('action_name');                 // 'actionName'
    camelize('css-class-name');              // 'cssClassName'
    camelize('my favorite items');           // 'myFavoriteItems'
    camelize('My Favorite Items');           // 'myFavoriteItems'
    camelize('private-docs/owner-invoice');  // 'privateDocs/ownerInvoice'
    ```
  
    @method camelize
    @param {String} str The string to camelize.
    @return {String} the camelized string.
    @public
  */

  function camelize(str) {
    return CAMELIZE_CACHE.get(str);
  }
  /**
    Returns the UpperCamelCase form of a string.
  
    ```javascript
    import { classify } from '@ember/string';
  
    classify('innerHTML');                   // 'InnerHTML'
    classify('action_name');                 // 'ActionName'
    classify('css-class-name');              // 'CssClassName'
    classify('my favorite items');           // 'MyFavoriteItems'
    classify('private-docs/owner-invoice');  // 'PrivateDocs/OwnerInvoice'
    ```
  
    @method classify
    @param {String} str the string to classify
    @return {String} the classified string
    @public
  */

  function classify(str) {
    return CLASSIFY_CACHE.get(str);
  }
  /**
    More general than decamelize. Returns the lower\_case\_and\_underscored
    form of a string.
  
    ```javascript
    import { underscore } from '@ember/string';
  
    underscore('innerHTML');                 // 'inner_html'
    underscore('action_name');               // 'action_name'
    underscore('css-class-name');            // 'css_class_name'
    underscore('my favorite items');         // 'my_favorite_items'
    underscore('privateDocs/ownerInvoice');  // 'private_docs/owner_invoice'
    ```
  
    @method underscore
    @param {String} str The string to underscore.
    @return {String} the underscored string.
    @public
  */

  function underscore(str) {
    return UNDERSCORE_CACHE.get(str);
  }
  /**
    Returns the Capitalized form of a string
  
    ```javascript
    import { capitalize } from '@ember/string';
  
    capitalize('innerHTML')                 // 'InnerHTML'
    capitalize('action_name')               // 'Action_name'
    capitalize('css-class-name')            // 'Css-class-name'
    capitalize('my favorite items')         // 'My favorite items'
    capitalize('privateDocs/ownerInvoice'); // 'PrivateDocs/ownerInvoice'
    ```
  
    @method capitalize
    @param {String} str The string to capitalize.
    @return {String} The capitalized string.
    @public
  */

  function capitalize(str) {
    return CAPITALIZE_CACHE.get(str);
  }
  /*
    The following are implemented here to give users adding `@ember/string` to
    their projects a useful error message. The `ember-source` implementation of
    `@ember/string` is clobbered by adding this addon, and so the deprecation of
    the import path is not triggered. This error message is intended to help
    users discover what they need to change.
  */

  function htmlSafe(str) {
    throw new Error('htmlSafe is not implemented in the `@ember/string` package. Please import from `@ember/template` instead.');
  }
  function isHTMLSafe(str) {
    throw new Error('isHTMLSafe is not implemented in the `@ember/string` package. Please import from `@ember/template` instead.');
  }
});
;define("@ember/test-waiters/build-waiter", ["exports", "@ember/debug", "@ember/test-waiters/token", "@ember/test-waiters/waiter-manager"], function (_exports, _debug, _token, _waiterManager) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports._resetWaiterNames = _resetWaiterNames;
  _exports.default = buildWaiter;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  const WAITER_NAME_PATTERN = /^[^:]*:?.*/;
  let WAITER_NAMES = true /* DEBUG */ ? new Set() : undefined;
  function _resetWaiterNames() {
    WAITER_NAMES = new Set();
  }
  function getNextToken() {
    return new _token.default();
  }
  class TestWaiterImpl {
    constructor(name, nextToken) {
      _defineProperty(this, "isRegistered", false);
      _defineProperty(this, "items", new Map());
      _defineProperty(this, "completedOperationsForTokens", new WeakMap());
      _defineProperty(this, "completedOperationsForPrimitives", new Map());
      this.name = name; // @ts-ignore

      this.nextToken = nextToken || getNextToken;
    }
    beginAsync(token = this.nextToken(), label) {
      this._register();
      if (this.items.has(token)) {
        throw new Error(`beginAsync called for ${token} but it is already pending.`);
      }
      let error = new Error();
      this.items.set(token, {
        get stack() {
          return error.stack;
        },
        label
      });
      return token;
    }
    endAsync(token) {
      if (!this.items.has(token) && !this._getCompletedOperations(token).has(token)) {
        throw new Error(`testWaiter.endAsync called with no preceding testWaiter.beginAsync call.
        Test waiter calls should always be paired. This can occur when a test waiter's paired calls are invoked in a non-deterministic order.

        See https://github.com/emberjs/ember-test-waiters#keep-beginasyncendasync-in-same-block-scope for more information.`);
      }
      this.items.delete(token); // Mark when a waiter operation has completed so we can distinguish
      // whether endAsync is being called before a prior beginAsync call above.

      this._getCompletedOperations(token).set(token, true);
    }
    waitUntil() {
      return this.items.size === 0;
    }
    debugInfo() {
      let result = [];
      this.items.forEach(value => {
        result.push(value);
      });
      return result;
    }
    reset() {
      this.items.clear();
    }
    _register() {
      if (!this.isRegistered) {
        (0, _waiterManager.register)(this);
        this.isRegistered = true;
      }
    }
    _getCompletedOperations(token) {
      let type = typeof token;
      let isFunction = type === 'function';
      let isObject = token !== null && type === 'object';
      let isPrimitive = !isFunction && !isObject;
      return isPrimitive ? this.completedOperationsForPrimitives : this.completedOperationsForTokens;
    }
  }
  class NoopTestWaiter {
    constructor(name) {
      this.name = name;
    }
    beginAsync() {
      return this;
    }
    endAsync() {}
    waitUntil() {
      return true;
    }
    debugInfo() {
      return [];
    }
    reset() {}
  }
  /**
   * Builds and returns a test waiter. The type of the
   * returned waiter is dependent on whether the app or
   * addon is in `DEBUG` mode or not.
   *
   * @public
   *
   * @param name {string} The name of the test waiter
   * @returns {TestWaiter}
   *
   * @example
   *
   * import Component from '@ember/component';
   * import { buildWaiter } from '@ember/test-waiters';
   *
   * if (DEBUG) {
   *   let waiter = buildWaiter('friend-waiter');
   * }
   *
   * export default class Friendz extends Component {
   *   didInsertElement() {
   *     let token = waiter.beginAsync(this);
   *
   *     someAsyncWork().then(() => {
   *       waiter.endAsync(token);
   *     });
   *   }
   * }
   */

  function buildWaiter(name) {
    if (true /* DEBUG */) {
      (true && (0, _debug.warn)(`The waiter name '${name}' is already in use`, !WAITER_NAMES.has(name), {
        id: '@ember/test-waiters.duplicate-waiter-name'
      }));
      WAITER_NAMES.add(name);
    }
    if (!true /* DEBUG */) {
      return new NoopTestWaiter(name);
    } else {
      (true && (0, _debug.warn)(`You must provide a name that contains a descriptive prefix separated by a colon.

        Example: ember-fictitious-addon:some-file

        You passed: ${name}`, WAITER_NAME_PATTERN.test(name), {
        id: '@ember/test-waiters.invalid-waiter-name'
      }));
      return new TestWaiterImpl(name);
    }
  }
});
;define("@ember/test-waiters/index", ["exports", "@ember/test-waiters/waiter-manager", "@ember/test-waiters/build-waiter", "@ember/test-waiters/wait-for-promise", "@ember/test-waiters/wait-for"], function (_exports, _waiterManager, _buildWaiter, _waitForPromise, _waitFor) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "_reset", {
    enumerable: true,
    get: function () {
      return _waiterManager._reset;
    }
  });
  Object.defineProperty(_exports, "_resetWaiterNames", {
    enumerable: true,
    get: function () {
      return _buildWaiter._resetWaiterNames;
    }
  });
  Object.defineProperty(_exports, "buildWaiter", {
    enumerable: true,
    get: function () {
      return _buildWaiter.default;
    }
  });
  Object.defineProperty(_exports, "getPendingWaiterState", {
    enumerable: true,
    get: function () {
      return _waiterManager.getPendingWaiterState;
    }
  });
  Object.defineProperty(_exports, "getWaiters", {
    enumerable: true,
    get: function () {
      return _waiterManager.getWaiters;
    }
  });
  Object.defineProperty(_exports, "hasPendingWaiters", {
    enumerable: true,
    get: function () {
      return _waiterManager.hasPendingWaiters;
    }
  });
  Object.defineProperty(_exports, "register", {
    enumerable: true,
    get: function () {
      return _waiterManager.register;
    }
  });
  Object.defineProperty(_exports, "unregister", {
    enumerable: true,
    get: function () {
      return _waiterManager.unregister;
    }
  });
  Object.defineProperty(_exports, "waitFor", {
    enumerable: true,
    get: function () {
      return _waitFor.default;
    }
  });
  Object.defineProperty(_exports, "waitForPromise", {
    enumerable: true,
    get: function () {
      return _waitForPromise.default;
    }
  });
});
;define("@ember/test-waiters/token", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
   * A class representing a test waiter token.
   *
   * @public
   * @class
   */
  class Token {}
  _exports.default = Token;
});
;define("@ember/test-waiters/types/index", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
});
;define("@ember/test-waiters/wait-for-promise", ["exports", "@ember/test-waiters/build-waiter"], function (_exports, _buildWaiter) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = waitForPromise;
  const PROMISE_WAITER = (0, _buildWaiter.default)('@ember/test-waiters:promise-waiter');
  /**
   * A convenient utility function to simplify waiting for a promise.
   *
   * @public
   * @param promise {Promise<T> | RSVP.Promise<T>} The promise to track async operations for
   * @param label {string} An optional string to identify the promise
   *
   * @example
   *
   * import Component from '@ember/component';
   * import { waitForPromise } from '@ember/test-waiters';
   *
   * export default class Friendz extends Component {
   *   didInsertElement() {
   *     waitForPromise(new Promise(resolve => {
   *       doSomeWork();
   *       resolve();
   *     }));
   *   }
   * }
   */

  function waitForPromise(promise, label) {
    let result = promise;
    if (true /* DEBUG */) {
      PROMISE_WAITER.beginAsync(promise, label);
      result = promise.then(value => {
        PROMISE_WAITER.endAsync(promise);
        return value;
      }, error => {
        PROMISE_WAITER.endAsync(promise);
        throw error;
      });
    }
    return result;
  }
});
;define("@ember/test-waiters/wait-for", ["exports", "@ember/test-waiters/wait-for-promise", "@ember/test-waiters/build-waiter"], function (_exports, _waitForPromise, _buildWaiter) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = waitFor;
  function waitFor(...args) {
    let isFunction = args.length < 3;
    if (isFunction) {
      let [fn, label] = args;
      return wrapFunction(fn, label);
    } else {
      let [,, descriptor, label] = args;
      if (!true /* DEBUG */) {
        return descriptor;
      }
      let fn = descriptor.value;
      descriptor.value = wrapFunction(fn, label);
      return descriptor;
    }
  }
  function wrapFunction(fn, label) {
    if (!true /* DEBUG */) {
      return fn;
    }
    return function (...args) {
      let result = fn.call(this, ...args);
      if (isThenable(result)) {
        return (0, _waitForPromise.default)(result, label);
      } else if (isGenerator(result)) {
        return waitForGenerator(result, label);
      } else {
        return result;
      }
    };
  }
  function isThenable(maybePromise) {
    let type = typeof maybePromise;
    return (maybePromise !== null && type === 'object' || type === 'function') && typeof maybePromise.then === 'function';
  }
  function isGenerator(maybeGenerator) {
    // Because we don't have Symbol.iterator in IE11
    return typeof maybeGenerator.next === 'function' && typeof maybeGenerator.return === 'function' && typeof maybeGenerator.throw === 'function';
  }
  const GENERATOR_WAITER = (0, _buildWaiter.default)('@ember/test-waiters:generator-waiter');
  function waitForGenerator(generator, label) {
    GENERATOR_WAITER.beginAsync(generator, label);
    let isWaiting = true;
    function stopWaiting() {
      if (isWaiting) {
        GENERATOR_WAITER.endAsync(generator);
        isWaiting = false;
      }
    }
    return {
      next(...args) {
        let hasErrored = true;
        try {
          let val = generator.next(...args);
          hasErrored = false;
          if (val.done) {
            stopWaiting();
          }
          return val;
        } finally {
          // If generator.next() throws, we need to stop waiting. But if we catch
          // and re-throw exceptions, it could move the location from which the
          // uncaught exception is thrown, interfering with the developer
          // debugging experience if they have break-on-exceptions enabled. So we
          // use a boolean flag and a finally block to emulate a catch block.
          if (hasErrored) {
            stopWaiting();
          }
        }
      },
      return(...args) {
        stopWaiting();
        return generator.return(...args);
      },
      throw(...args) {
        stopWaiting();
        return generator.throw(...args);
      }
    };
  }
});
;define("@ember/test-waiters/waiter-manager", ["exports", "ember", "@ember/test"], function (_exports, _ember, _test) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports._reset = _reset;
  _exports.getPendingWaiterState = getPendingWaiterState;
  _exports.getWaiters = getWaiters;
  _exports.hasPendingWaiters = hasPendingWaiters;
  _exports.register = register;
  _exports.unregister = unregister;
  // this ensures that if @ember/test-waiters exists in multiple places in the
  // build output we will still use a single map of waiters (there really should
  // only be one of them, or else `settled` will not work at all)
  const WAITERS = function () {
    const HAS_SYMBOL = typeof Symbol !== 'undefined';
    let symbolName = 'TEST_WAITERS';
    let symbol = HAS_SYMBOL ? Symbol.for(symbolName) : symbolName;
    let global = getGlobal();
    let waiters = global[symbol];
    if (waiters === undefined) {
      waiters = global[symbol] = new Map();
    }
    return waiters;
  }();
  function indexable(input) {
    return input;
  }
  function getGlobal() {
    // eslint-disable-next-line node/no-unsupported-features/es-builtins
    if (typeof globalThis !== 'undefined') return indexable(globalThis);
    if (typeof self !== 'undefined') return indexable(self);
    if (typeof window !== 'undefined') return indexable(window);
    if (typeof global !== 'undefined') return indexable(global);
    throw new Error('unable to locate global object');
  }
  /**
   * Backwards compatibility with legacy waiters system.
   *
   * We want to always register a waiter using the legacy waiter system, as right
   * now if consumers are not on the right version of @ember/test-helpers, using
   * this addon will result in none of these waiters waiting.
   */
  // eslint-disable-next-line ember/new-module-imports

  if (_ember.default.Test) {
    (0, _test.registerWaiter)(() => !hasPendingWaiters());
  }
  /**
   * Registers a waiter.
   *
   * @public
   * @param waiter {Waiter} A test waiter instance
   */

  function register(waiter) {
    WAITERS.set(waiter.name, waiter);
  }
  /**
   * Un-registers a waiter.
   *
   * @public
   * @param waiter {Waiter} A test waiter instance
   */

  function unregister(waiter) {
    WAITERS.delete(waiter.name);
  }
  /**
   * Gets an array of all waiters current registered.
   *
   * @public
   * @returns {Waiter[]}
   */

  function getWaiters() {
    let result = [];
    WAITERS.forEach(value => {
      result.push(value);
    });
    return result;
  }
  /**
   * Clears all waiters.
   *
   * @private
   */

  function _reset() {
    for (let waiter of getWaiters()) {
      waiter.isRegistered = false;
    }
    WAITERS.clear();
  }
  /**
   * Gets the current state of all waiters. Any waiters whose
   * `waitUntil` method returns false will be considered `pending`.
   *
   * @returns {PendingWaiterState} An object containing a count of all waiters
   * pending and a `waiters` object containing the name of all pending waiters
   * and their debug info.
   */

  function getPendingWaiterState() {
    let result = {
      pending: 0,
      waiters: {}
    };
    WAITERS.forEach(waiter => {
      if (!waiter.waitUntil()) {
        result.pending++;
        let debugInfo = waiter.debugInfo();
        result.waiters[waiter.name] = debugInfo || true;
      }
    });
    return result;
  }
  /**
   * Determines if there are any pending waiters.
   *
   * @returns {boolean} `true` if there are pending waiters, otherwise `false`.
   */

  function hasPendingWaiters() {
    let state = getPendingWaiterState();
    return state.pending > 0;
  }
});
;define("@embroider/macros/es-compat2", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = esCompat;
  function esCompat(m) {
    return m?.__esModule ? m : {
      default: m,
      ...m
    };
  }
});
;define("@embroider/macros/runtime", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.config = config;
  _exports.each = each;
  _exports.getGlobalConfig = getGlobalConfig;
  _exports.isTesting = isTesting;
  _exports.macroCondition = macroCondition;
  /*
    These are the runtime implementations for the javascript macros that have
    runtime implementations.
  
    Not every macro has a runtime implementation, some only make sense in the
    build and always run there.
  
    Even when we have runtime implementations, we are still careful to emit static
    errors during the build wherever possible, and runtime errors when necessary,
    so that you're not surprised when you switch from runtime-mode to compile-time
    mode.
  */

  /*
    CAUTION: in classic builds, this file gets shared by all present copies of
    @embroider/macros. If you want to change its public API, you need to rename it
    and update `pathToRuntime` in ../babel/state.ts to point at it, so that your
    babel plugin and runtime will match.
  */

  function each(array) {
    if (!Array.isArray(array)) {
      throw new Error(`the argument to the each() macro must be an array`);
    }
    return array;
  }
  function macroCondition(predicate) {
    return predicate;
  }

  // This is here as a compile target for `getConfig` and `getOwnConfig` when
  // we're in runtime mode. This is not public API to call from your own code.
  function config(packageRoot) {
    return runtimeConfig.packages[packageRoot];
  }
  function getGlobalConfig() {
    return runtimeConfig.global;
  }
  function isTesting() {
    let g = runtimeConfig.global;
    let e = g && g['@embroider/macros'];
    return Boolean(e && e.isTesting);
  }
  const runtimeConfig = initializeRuntimeMacrosConfig();

  // this exists to be targeted by our babel plugin
  function initializeRuntimeMacrosConfig() {
    return {
      "packages": {
        "/home/ec2-user/coup/client/node_modules/ember-bootstrap": {
          "isBS4": false,
          "isBS5": true,
          "isNotBS5": false,
          "version": "5.1.1"
        }
      },
      "global": {
        "@embroider/macros": {
          "isTesting": false
        }
      }
    };
  }
  function updaterMethods() {
    return {
      config,
      getGlobalConfig,
      setConfig(packageRoot, value) {
        runtimeConfig.packages[packageRoot] = value;
      },
      setGlobalConfig(key, value) {
        runtimeConfig.global[key] = value;
      }
    };
  }

  // this is how runtime config can get injected at boot. I'm not sure yet if this
  // should be public API, but we certainly need it internally to set things like
  // the global fastboot.isRunning.
  //
  // consumers of this API push a function onto
  // window._embroider_macros_runtime_config. The function is given four methods
  // which allow it to read and write the per-package and global configs. The
  // reason for allowing both read & write is that merging strategies are up to
  // each consumers -- read first, then merge, then write.
  //
  // For an example user of this API, see where we generate
  // embroider_macros_fastboot_init.js' in @embroider/core.
  let updaters = typeof window !== 'undefined' ? window._embroider_macros_runtime_config : undefined;
  if (updaters) {
    let methods = updaterMethods();
    for (let updater of updaters) {
      updater(methods);
    }
  }
});
;define("@embroider/util/ember-private-api", ["exports", "@embroider/macros/es-compat2"], function (_exports, _esCompat) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.isCurriedComponentDefinition = void 0;
  _exports.lookupCurriedComponentDefinition = lookupCurriedComponentDefinition;
  let runtime;
  {
    // new enough ember has a real module we can import
    runtime = (0, _esCompat.default)(require("@glimmer/runtime"));
  }
  let {
    isCurriedComponentDefinition,
    CurriedComponentDefinition,
    curry,
    CurriedValue
  } = runtime;

  // older embers have isCurriedComponentDefinition, new ones have CurriedValue
  // and instanceof CurriedValue seems good enough.
  _exports.isCurriedComponentDefinition = isCurriedComponentDefinition;
  if (!isCurriedComponentDefinition) {
    _exports.isCurriedComponentDefinition = isCurriedComponentDefinition = function (value) {
      return value instanceof CurriedValue;
    };
  }
  function runtimeResolver(owner) {
    let resolver = owner.lookup('renderer:-dom')._runtimeResolver;
    if (resolver) {
      return resolver;
    }
    let entry = Object.entries(owner.__container__.cache).find(e => e[0].startsWith('template-compiler:main-'));
    if (entry) {
      return entry[1].resolver.resolver;
    }
    throw new Error(`@embroider/util couldn't locate the runtime resolver on this ember version`);
  }
  function lookupCurriedComponentDefinition(name, owner) {
    let resolver = runtimeResolver(owner);
    if (typeof resolver.lookupComponentHandle === 'function') {
      let handle = resolver.lookupComponentHandle(name, contextForLookup(owner));
      if (handle != null) {
        return new CurriedComponentDefinition(resolver.resolve(handle), null);
      }
    }

    // here we're doing the same thing the internal currying does, in order to
    // generate a sane error message (even though we don't actually use
    // resolvedDefinition as part of our return value).
    let resolvedDefinition = resolver.lookupComponent(name, owner);
    if (!resolvedDefinition) {
      throw new Error(`Attempted to resolve \`${name}\` via ensureSafeComponent, but nothing was found.`);
    }
    return curry(0, name, owner, {
      named: {},
      positional: []
    });
  }
  function contextForLookup(owner) {
    {
      return owner;
    }
  }
});
;define("@embroider/util/index", ["exports", "@ember/debug", "@ember/application", "@embroider/util/ember-private-api", "@ember/component/helper"], function (_exports, _debug, _application, _emberPrivateApi, _helper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.EnsureSafeComponentHelper = void 0;
  _exports.ensureSafeComponent = ensureSafeComponent;
  function ensureSafeComponent(value, thingWithOwner) {
    if (typeof value === 'string') {
      return handleString(value, thingWithOwner);
    } else if ((0, _emberPrivateApi.isCurriedComponentDefinition)(value)) {
      return value;
    } else if (value == null) {
      return value;
    } else {
      return handleClass(value, thingWithOwner);
    }
  }
  class EnsureSafeComponentHelper extends _helper.default {
    compute([value]) {
      return ensureSafeComponent(value, this);
    }
  }
  _exports.EnsureSafeComponentHelper = EnsureSafeComponentHelper;
  function handleString(name, thingWithOwner) {
    (true && !(false) && (0, _debug.deprecate)(`You're trying to invoke the component "${name}" by passing its name as a string. This won't work under Embroider.`, false, {
      id: 'ensure-safe-component.string',
      url: 'https://github.com/embroider-build/embroider/blob/main/docs/replacing-component-helper.md#when-youre-passing-a-component-to-someone-else',
      until: 'embroider',
      for: '@embroider/util',
      since: '0.27.0'
    }));
    let owner = (0, _application.getOwner)(thingWithOwner);
    return (0, _emberPrivateApi.lookupCurriedComponentDefinition)(name, owner);
  }
  function ensureRegistered(klass, owner) {
    let service = owner.lookup('service:-ensure-registered');
    (true && !(service) && (0, _debug.assert)('Could not lookup private -ensure-registered service', service));
    return service.register(klass, owner);
  }
  function handleClass(klass, thingWithOwner) {
    {
      return klass;
    }
  }
});
;define("@embroider/util/services/ensure-registered", ["exports", "@ember/service", "@ember/application"], function (_exports, _service, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  class EnsureRegisteredService extends _service.default {
    constructor(...args) {
      super(...args);
      _defineProperty(this, "classNonces", new WeakMap());
      _defineProperty(this, "nonceCounter", 0);
    }
    register(klass, owner = (0, _application.getOwner)(this)) {
      let nonce = this.classNonces.get(klass);
      if (nonce == null) {
        nonce = `-ensure${this.nonceCounter++}`;
        this.classNonces.set(klass, nonce);
        owner.register(`component:${nonce}`, klass);
      }
      return nonce;
    }
  }
  _exports.default = EnsureRegisteredService;
});
;define("@glimmer/component/-private/base-component-manager", ["exports", "@glimmer/component/-private/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = BaseComponentManager;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  /**
   * This factory function returns a component manager class with common behavior
   * that can be extend to add Glimmer.js- or Ember.js-specific functionality. As
   * these environments converge, the need for two component manager
   * implementations (and thus this factory) should go away.
   */
  function BaseComponentManager(setOwner, getOwner, capabilities) {
    return class {
      static create(attrs) {
        let owner = getOwner(attrs);
        return new this(owner);
      }
      constructor(owner) {
        _defineProperty(this, "capabilities", capabilities);
        setOwner(this, owner);
      }
      createComponent(ComponentClass, args) {
        if (true /* DEBUG */) {
          _component.ARGS_SET.set(args.named, true);
        }
        return new ComponentClass(getOwner(this), args.named);
      }
      getContext(component) {
        return component;
      }
    };
  }
});
;define("@glimmer/component/-private/component", ["exports", "@glimmer/component/-private/owner", "@glimmer/component/-private/destroyables"], function (_exports, _owner, _destroyables) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports.ARGS_SET = void 0;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  // This provides a type-safe `WeakMap`: the getter and setter link the key to a
  // specific value. This is how `WeakMap`s actually behave, but the TS type
  // system does not (yet!) have a good way to capture that for types like
  // `WeakMap` where the type is generic over another generic type (here, `Args`).

  // SAFETY: this only holds because we *only* acces this when `DEBUG` is `true`.
  // There is not a great way to connect that data in TS at present.
  let ARGS_SET = _exports.ARGS_SET = void 0;
  if (true /* DEBUG */) {
    _exports.ARGS_SET = ARGS_SET = new WeakMap();
  }

  // --- Type utilities for component signatures --- //
  // Type-only "symbol" to use with `EmptyObject` below, so that it is *not*
  // equivalent to an empty interface.
  /**
   * This provides us a way to have a "fallback" which represents an empty object,
   * without the downsides of how TS treats `{}`. Specifically: this will
   * correctly leverage "excess property checking" so that, given a component
   * which has no named args, if someone invokes it with any named args, they will
   * get a type error.
   *
   * @internal This is exported so declaration emit works (if it were not emitted,
   *   declarations which fall back to it would not work). It is *not* intended for
   *   public usage, and the specific mechanics it uses may change at any time.
   *   The location of this export *is* part of the public API, because moving it
   *   will break existing declarations, but is not legal for end users to import
   *   themselves, so ***DO NOT RELY ON IT***.
   */
  /** Given a signature `S`, get back the `Args` type. */
  /**
   * Given any allowed shorthand form of a signature, desugars it to its full
   * expanded type.
   *
   * @internal This is only exported so we can avoid duplicating it in
   *   [Glint](https://github.com/typed-ember/glint) or other such tooling. It is
   *   *not* intended for public usage, and the specific mechanics it uses may
   *   change at any time. Although the signature produced by is part of Glimmer's
   *   public API the existence and mechanics of this specific symbol are *not*,
   *   so ***DO NOT RELY ON IT***.
   */
  // The conditional type here is because TS applies conditional types
  // distributively. This means that for union types, checks like `keyof T` get
  // all the keys from all elements of the union, instead of ending up as `never`
  // and then always falling into the `Signature` path instead of falling back to
  // the legacy args handling path.
  /**
   * @internal we use this type for convenience internally; inference means users
   *   should not normally need to name it
   */
  /**
   * The `Component` class defines an encapsulated UI element that is rendered to
   * the DOM. A component is made up of a template and, optionally, this component
   * object.
   *
   * ## Defining a Component
   *
   * To define a component, subclass `Component` and add your own properties,
   * methods and lifecycle hooks:
   *
   * ```ts
   * import Component from '@glimmer/component';
   *
   * export default class extends Component {
   * }
   * ```
   *
   * ## Lifecycle Hooks
   *
   * Lifecycle hooks allow you to respond to changes to a component, such as when
   * it gets created, rendered, updated or destroyed. To add a lifecycle hook to a
   * component, implement the hook as a method on your component subclass.
   *
   * For example, to be notified when Glimmer has rendered your component so you
   * can attach a legacy jQuery plugin, implement the `didInsertElement()` method:
   *
   * ```ts
   * import Component from '@glimmer/component';
   *
   * export default class extends Component {
   *   didInsertElement() {
   *     $(this.element).pickadate();
   *   }
   * }
   * ```
   *
   * ## Data for Templates
   *
   * `Component`s have two different kinds of data, or state, that can be
   * displayed in templates:
   *
   * 1. Arguments
   * 2. Properties
   *
   * Arguments are data that is passed in to a component from its parent
   * component. For example, if I have a `UserGreeting` component, I can pass it
   * a name and greeting to use:
   *
   * ```hbs
   * <UserGreeting @name="Ricardo" @greeting="Olá" />
   * ```
   *
   * Inside my `UserGreeting` template, I can access the `@name` and `@greeting`
   * arguments that I've been given:
   *
   * ```hbs
   * {{@greeting}}, {{@name}}!
   * ```
   *
   * Arguments are also available inside my component:
   *
   * ```ts
   * console.log(this.args.greeting); // prints "Olá"
   * ```
   *
   * Properties, on the other hand, are internal to the component and declared in
   * the class. You can use properties to store data that you want to show in the
   * template, or pass to another component as an argument.
   *
   * ```ts
   * import Component from '@glimmer/component';
   *
   * export default class extends Component {
   *   user = {
   *     name: 'Robbie'
   *   }
   * }
   * ```
   *
   * In the above example, we've defined a component with a `user` property that
   * contains an object with its own `name` property.
   *
   * We can render that property in our template:
   *
   * ```hbs
   * Hello, {{user.name}}!
   * ```
   *
   * We can also take that property and pass it as an argument to the
   * `UserGreeting` component we defined above:
   *
   * ```hbs
   * <UserGreeting @greeting="Hello" @name={{user.name}} />
   * ```
   *
   * ## Arguments vs. Properties
   *
   * Remember, arguments are data that was given to your component by its parent
   * component, and properties are data your component has defined for itself.
   *
   * You can tell the difference between arguments and properties in templates
   * because arguments always start with an `@` sign (think "A is for arguments"):
   *
   * ```hbs
   * {{@firstName}}
   * ```
   *
   * We know that `@firstName` came from the parent component, not the current
   * component, because it starts with `@` and is therefore an argument.
   *
   * On the other hand, if we see:
   *
   * ```hbs
   * {{name}}
   * ```
   *
   * We know that `name` is a property on the component. If we want to know where
   * the data is coming from, we can go look at our component class to find out.
   *
   * Inside the component itself, arguments always show up inside the component's
   * `args` property. For example, if `{{@firstName}}` is `Tom` in the template,
   * inside the component `this.args.firstName` would also be `Tom`.
   */
  class BaseComponent {
    /**
     * Constructs a new component and assigns itself the passed properties. You
     * should not construct new components yourself. Instead, Glimmer will
     * instantiate new components automatically as it renders.
     *
     * @param owner
     * @param args
     */
    constructor(owner, args) {
      /**
       * Named arguments passed to the component from its parent component.
       * They can be accessed in JavaScript via `this.args.argumentName` and in the template via `@argumentName`.
       *
       * Say you have the following component, which will have two `args`, `firstName` and `lastName`:
       *
       * ```hbs
       * <my-component @firstName="Arthur" @lastName="Dent" />
       * ```
       *
       * If you needed to calculate `fullName` by combining both of them, you would do:
       *
       * ```ts
       * didInsertElement() {
       *   console.log(`Hi, my full name is ${this.args.firstName} ${this.args.lastName}`);
       * }
       * ```
       *
       * While in the template you could do:
       *
       * ```hbs
       * <p>Welcome, {{@firstName}} {{@lastName}}!</p>
       * ```
       */
      _defineProperty(this, "args", void 0);
      if (true /* DEBUG */ && !(owner !== null && typeof owner === 'object' && ARGS_SET.has(args))) {
        throw new Error(`You must pass both the owner and args to super() in your component: ${this.constructor.name}. You can pass them directly, or use ...arguments to pass all arguments through.`);
      }
      this.args = args;
      (0, _owner.setOwner)(this, owner);
    }
    get isDestroying() {
      return (0, _destroyables.isDestroying)(this);
    }
    get isDestroyed() {
      return (0, _destroyables.isDestroyed)(this);
    }

    /**
     * Called before the component has been removed from the DOM.
     */
    willDestroy() {}
  }
  _exports.default = BaseComponent;
});
;define("@glimmer/component/-private/destroyables", ["exports", "ember"], function (_exports, _ember) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.isDestroying = _exports.isDestroyed = void 0;
  const isDestroying = _exports.isDestroying = _ember.default._isDestroying;
  const isDestroyed = _exports.isDestroyed = _ember.default._isDestroyed;
});
;define("@glimmer/component/-private/ember-component-manager", ["exports", "ember", "@ember/object", "@ember/application", "@ember/component", "@ember/runloop", "@glimmer/component/-private/base-component-manager", "@glimmer/component/-private/destroyables"], function (_exports, _ember, _object, _application, _component, _runloop, _baseComponentManager, destroyables) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const {
    setDestroyed,
    setDestroying
  } = destroyables;
  const CAPABILITIES = true // @ts-ignore
  // @ts-ignore
  ? (0, _component.capabilities)('3.13', {
    destructor: true,
    asyncLifecycleCallbacks: false,
    updateHook: false
  }) : (0, _component.capabilities)('3.4', {
    destructor: true,
    asyncLifecycleCallbacks: false
  });
  const scheduledDestroyComponent = true ? undefined : (component, meta) => {
    if (component.isDestroyed) {
      return;
    }
    _ember.default.destroy(component);
    meta.setSourceDestroyed();
    setDestroyed(component);
  };
  const destroy = true ? _ember.default.destroy : component => {
    if (component.isDestroying) {
      return;
    }
    let meta = _ember.default.meta(component);
    meta.setSourceDestroying();
    setDestroying(component);
    (0, _runloop.schedule)('actions', component, component.willDestroy);
    (0, _runloop.schedule)('destroy', void 0, scheduledDestroyComponent, component, meta);
  };
  const registerDestructor = true ? _ember.default._registerDestructor : true ? _ember.default.__loader.require('@glimmer/runtime').registerDestructor : undefined;

  /**
   * This component manager runs in Ember.js environments and extends the base component manager to:
   *
   * 1. Properly destroy the component's associated `meta` data structure
   * 2. Schedule destruction using Ember's runloop
   */
  class EmberGlimmerComponentManager extends (0, _baseComponentManager.default)(_application.setOwner, _application.getOwner, CAPABILITIES) {
    createComponent(ComponentClass, args) {
      const component = super.createComponent(ComponentClass, args);
      if (true) {
        registerDestructor(component, () => {
          component.willDestroy();
        });
      }
      return component;
    }
    destroyComponent(component) {
      destroy(component);
    }
  }
  // In Ember 3.12 and earlier, the updateComponent hook was mandatory.
  // As of Ember 3.13, the `args` object is stable and each property of the
  // object participates in the autotrack stack on its own. This means we do not
  // need to set the `args` property on the component instance to invalidate
  // tracked getters that rely on `args`, and therefore don't require the `updateComponent`
  // hook at all.
  if (!true) {
    EmberGlimmerComponentManager.prototype.updateComponent = function updateComponent(component, args) {
      let argSnapshot = args.named;
      if (true /* DEBUG */) {
        argSnapshot = Object.freeze(argSnapshot);
      }
      (0, _object.set)(component, 'args', argSnapshot);
    };
  }
  var _default = _exports.default = EmberGlimmerComponentManager;
});
;define("@glimmer/component/-private/owner", ["exports", "@ember/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "setOwner", {
    enumerable: true,
    get: function () {
      return _application.setOwner;
    }
  });
});
;define("@glimmer/component/index", ["exports", "@ember/component", "@glimmer/component/-private/ember-component-manager", "@glimmer/component/-private/component"], function (_exports, _component, _emberComponentManager, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // Hax because the old version of `@types/ember__component` the `1.x` branch
  // uses does not provide any types for `setComponentManager` *and* because we
  // are using a very old version of `setComponentManager` for versions before
  // Ember 3.8.
  let GlimmerComponent = _component2.default;
  if (true /* DEBUG */) {
    // Add assertions against using Glimmer.js only APIs

    // TODO: Add GlimmerComponent API docs link to these messages once API docs are live
    function throwMethodUseError(methodName) {
      throw new Error(`You attempted to define the '${methodName}' method on a Glimmer Component, but that lifecycle hook does not exist in Ember.js applications, it only exists in Glimmer.js apps. You can rename this method, and you can trigger it using a modifier such as {{did-insert}} from '@ember/render-modifiers': https://github.com/emberjs/ember-render-modifiers.`);
    }
    function throwPropertyUseError(propertyName) {
      throw new Error(`You attempted to access the '${propertyName}' property on a Glimmer Component, but that property does not exist in Ember.js applications, it only exists in Glimmer.js apps. You define a class field with the same name on your component class and it will overwrite this error message, but it will not be used by the framework.`);
    }
    GlimmerComponent = class GlimmerDebugComponent extends GlimmerComponent {
      constructor(owner, args) {
        super(owner, args);
        if (typeof this['didInsertElement'] === 'function') {
          throwMethodUseError('didInsertElement');
        }
        if (typeof this['didUpdate'] === 'function') {
          throwMethodUseError('didUpdate');
        }
      }
    };
    let proto = GlimmerComponent.prototype;
    function defineErrorProp(proto, key, getterMethod) {
      Object.defineProperty(proto, key, {
        get: () => getterMethod(key),
        set(value) {
          Object.defineProperty(this, key, {
            value
          });
        }
      });
    }

    // Methods should still throw whenever they are accessed
    defineErrorProp(proto, 'bounds', throwPropertyUseError);
    defineErrorProp(proto, 'element', throwPropertyUseError);
    defineErrorProp(proto, 'debugName', throwPropertyUseError);
  }
  if (true) {
    (0, _component.setComponentManager)(owner => {
      return new _emberComponentManager.default(owner);
    }, GlimmerComponent);
  } else {
    (0, _component.setComponentManager)('glimmer', GlimmerComponent);
  }
  var _default = _exports.default = GlimmerComponent;
});
;define("ember-bootstrap/components/bs-accordion", ["exports", "@ember/component", "@ember/object", "@glimmer/component", "ember-bootstrap/utils/deprecate-subclassing", "@glimmer/tracking", "@ember/template-factory"], function (_exports, _component, _object, _component2, _deprecateSubclassing, _tracking, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _class2, _descriptor;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/object",0,"@glimmer/component",0,"ember-bootstrap/utils/deprecate-subclassing",0,"@glimmer/tracking",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <div
    class="accordion"
    role="tablist"
    ...attributes
  >
    {{yield
      (hash
        item=(component (ensure-safe-component (bs-default @itemComponent (component "bs-accordion/item"))) selected=this.isSelected onClick=this.doChange)
        change=this.doChange
      )
    }}
  </div>
  */
  {
    "id": "MtH21jnJ",
    "block": "[[[11,0],[24,0,\"accordion\"],[24,\"role\",\"tablist\"],[17,1],[12],[1,\"\\n  \"],[18,3,[[28,[37,1],null,[[\"item\",\"change\"],[[50,[28,[37,3],[[28,[37,4],[[30,2],[50,\"bs-accordion/item\",0,null,null]],null]],null],0,null,[[\"selected\",\"onClick\"],[[30,0,[\"isSelected\"]],[30,0,[\"doChange\"]]]]],[30,0,[\"doChange\"]]]]]]],[1,\"\\n\"],[13]],[\"&attrs\",\"@itemComponent\",\"&default\"],false,[\"yield\",\"hash\",\"component\",\"ensure-safe-component\",\"bs-default\"]]",
    "moduleName": "ember-bootstrap/components/bs-accordion.hbs",
    "isStrictMode": false
  });

  /**
    Bootstrap-style [accordion group](http://getbootstrap.com/javascript/#collapse-example-accordion),
    with collapsible/expandable items.
  
    ### Usage
  
    Use as a block level component with any number of yielded [Components.AccordionItem](Components.AccordionItem.html)
    components as children:
  
    ```handlebars
    <BsAccordion as |acc|>
      <acc.item @value={{1}} @title="First item">
        <p>Lorem ipsum...</p>
        <button {{on "click" (fn acc.change 2)}}>
          Next
        </button>
      </acc.item>
      <acc.item @value={{2}} @title="Second item">
        <p>Lorem ipsum...</p>
      </acc.item>
      <acc.item @value={{3}} @title="Third item">
        <p>Lorem ipsum...</p>
      </acc.item>
    </BsAccordion>
    ```
  
    In the example above the first accordion item utilizes the yielded `change` action to add some custom behaviour.
  
    *Note that only invoking the component in a template as shown above is considered part of its public API. Extending from it (subclassing) is generally not supported, and may break at any time.*
  
    @class Accordion
    @namespace Components
    @extends Glimmer.Component
    @public
  */
  let Accordion = _exports.default = (0, _deprecateSubclassing.default)(_class = (_class2 = class Accordion extends _component2.default {
    constructor(...args) {
      super(...args);
      /**
       * The value of the currently selected accordion item. Set this to change selection programmatically.
       *
       * When the selection is changed by user interaction this property will not update by using two-way bindings in order
       * to follow DDAU best practices. If you want to react to such changes, subscribe to the `onChange` action
       *
       * @property selected
       * @public
       */
      /**
       * @property itemComponent
       * @type {String}
       * @private
       */
      _initializerDefineProperty(this, "_isSelected", _descriptor, this);
      _defineProperty(this, "_isSelectedNonTracked", this.args.selected);
      _defineProperty(this, "_prevSelected", this.args.selected);
    }
    /**
     * The value of the currently selected accordion item
     *
     * @property isSelected
     * @private
     */
    get isSelected() {
      // ideally we would have used @localCopy here, but unfortunately this fails for Ember 3.16 in this special case
      // see https://github.com/pzuraq/tracked-toolbox/issues/17
      // So don't look at this, it is going to get ugly...
      this._isSelected; // just consume this to invalidate the getter when this changes

      if (this.args.selected && this._prevSelected !== this.args.selected) {
        // eslint-disable-next-line ember/no-side-effects
        this._isSelectedNonTracked = this._prevSelected = this.args.selected;
      }
      return this._isSelectedNonTracked;
    }
    set isSelected(value) {
      this._isSelectedNonTracked = value;
      this._isSelected = value;
    }

    /**
     * Action when the selected accordion item is about to be changed.
     *
     * You can return false to prevent changing the active item, and do that in your action by
     * setting the `selected` accordingly.
     *
     * @event onChange
     * @param newValue
     * @param oldValue
     * @public
     */

    doChange(newValue) {
      let oldValue = this.isSelected;
      if (oldValue === newValue) {
        newValue = null;
      }
      if (this.args.onChange?.(newValue, oldValue) !== false) {
        this.isSelected = newValue;
      }
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_isSelected", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return this.args.selected;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "doChange", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "doChange"), _class2.prototype)), _class2)) || _class;
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, Accordion);
});
;define("ember-bootstrap/components/bs-accordion/item", ["exports", "@ember/component", "@glimmer/component", "ember-bootstrap/utils/cp/type-class", "@ember/object/internals", "ember-bootstrap/utils/deprecate-subclassing", "ember-bootstrap/utils/decorators/arg", "@ember/template-factory"], function (_exports, _component, _component2, _typeClass, _internals, _deprecateSubclassing, _arg, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _class, _class2, _descriptor, _descriptor2, _descriptor3;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@glimmer/component",0,"ember-bootstrap/utils/cp/type-class",0,"@ember/object/internals",0,"ember-bootstrap/utils/deprecate-subclassing",0,"ember-bootstrap/utils/decorators/arg",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    {{#let
    (component (ensure-safe-component (bs-default @titleComponent (component "bs-accordion/item/title"))) collapsed=this.collapsed disabled=@disabled onClick=(fn (bs-default @onClick (bs-noop)) this.value))
    (component (ensure-safe-component (bs-default @bodyComponent (component "bs-accordion/item/body"))) collapsed=this.collapsed)
  as |Title Body|
  }}
    <div
      class="{{if @disabled "disabled"}} {{this.typeClass}} {{if (macroCondition (macroGetOwnConfig "isBS4")) "card"}} {{if (macroCondition (macroGetOwnConfig "isBS5")) "accordion-item"}}"
      ...attributes
    >
      {{#if (has-block-params)}}
        {{yield
          (hash
            title=Title
            body=Body        )
        }}
      {{else}}
        <Title>
          {{@title}}
        </Title>
        <Body>
        {{yield}}
        </Body>
      {{/if}}
    </div>
  {{/let}}
  */
  {
    "id": "SVyBycpw",
    "block": "[[[44,[[50,[28,[37,2],[[28,[37,3],[[30,1],[50,\"bs-accordion/item/title\",0,null,null]],null]],null],0,null,[[\"collapsed\",\"disabled\",\"onClick\"],[[30,0,[\"collapsed\"]],[30,2],[28,[37,4],[[28,[37,3],[[30,3],[28,[37,5],null,null]],null],[30,0,[\"value\"]]],null]]]],[50,[28,[37,2],[[28,[37,3],[[30,4],[50,\"bs-accordion/item/body\",0,null,null]],null]],null],0,null,[[\"collapsed\"],[[30,0,[\"collapsed\"]]]]]],[[[1,\"  \"],[11,0],[16,0,[29,[[52,[30,2],\"disabled\"],\" \",[30,0,[\"typeClass\"]],\" \",[27],\" \",\"accordion-item\"]]],[17,7],[12],[1,\"\\n\"],[41,[49,[30,9]],[[[1,\"      \"],[18,9,[[28,[37,9],null,[[\"title\",\"body\"],[[30,5],[30,6]]]]]],[1,\"\\n\"]],[]],[[[1,\"      \"],[8,[30,5],null,null,[[\"default\"],[[[[1,\"\\n        \"],[1,[30,8]],[1,\"\\n      \"]],[]]]]],[1,\"\\n      \"],[8,[30,6],null,null,[[\"default\"],[[[[1,\"\\n      \"],[18,9,null],[1,\"\\n      \"]],[]]]]],[1,\"\\n\"]],[]]],[1,\"  \"],[13],[1,\"\\n\"]],[5,6]]]],[\"@titleComponent\",\"@disabled\",\"@onClick\",\"@bodyComponent\",\"Title\",\"Body\",\"&attrs\",\"@title\",\"&default\"],false,[\"let\",\"component\",\"ensure-safe-component\",\"bs-default\",\"fn\",\"bs-noop\",\"if\",\"has-block-params\",\"yield\",\"hash\"]]",
    "moduleName": "ember-bootstrap/components/bs-accordion/item.hbs",
    "isStrictMode": false
  });

  /**
   A collapsible/expandable item within an accordion
  
   See [Components.Accordion](Components.Accordion.html) for examples.
  
   @class AccordionItem
   @namespace Components
   @extends Ember.Component
   @public
   */
  let AccordionItem = _exports.default = (_dec = (0, _typeClass.default)('bg', 'type'), (0, _deprecateSubclassing.default)(_class = (_class2 = class AccordionItem extends _component2.default {
    constructor(...args) {
      super(...args);
      /**
       * The title of the accordion item, displayed as a .panel-title element
       *
       * @property title
       * @type string
       * @public
       */
      /**
       * The value of the accordion item, which is used as the value of the `selected` property of the parent [Components.Accordion](Components.Accordion.html) component
       *
       * @property value
       * @public
       */
      _initializerDefineProperty(this, "value", _descriptor, this);
      /**
       * @property disabled
       * @type boolean
       * @public
       */
      /**
       * Property for type styling
       *
       * For the available types see the [Bootstrap docs](https://getbootstrap.com/docs/4.3/components/navbar/#color-schemes)
       *
       * @property type
       * @type String
       * @default 'default'
       * @public
       */
      _initializerDefineProperty(this, "type", _descriptor2, this);
      _initializerDefineProperty(this, "typeClass", _descriptor3, this);
    }
    /**
     * @property selected
     * @private
     */

    /**
     * @property titleComponent
     * @type {String}
     * @private
     */

    /**
     * @property bodyComponent
     * @type {String}
     * @private
     */
    /**
     * @property collapsed
     * @type boolean
     * @readonly
     * @private
     */
    get collapsed() {
      return this.value !== this.args.selected;
    }
    /**
     * Reference to the parent `Components.Accordion` class.
     *
     * @property accordion
     * @private
     */
    /**
     * @event onClick
     * @public
     */
  }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "value", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return (0, _internals.guidFor)(this);
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "type", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 'default';
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "typeClass", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, AccordionItem);
});
;define("ember-bootstrap/components/bs-accordion/item/body", ["exports", "@ember/component", "@ember/component/template-only", "@ember/template-factory"], function (_exports, _component, _templateOnly, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/component/template-only",0,"@ember/component"eaimeta@70e063a35619d71f
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <BsCollapse @collapsed={{@collapsed}} role="tabpanel">
    <div class="{{if (macroCondition (macroGetOwnConfig "isBS4")) "card-body"}} {{if (macroCondition (macroGetOwnConfig "isBS5")) "accordion-body"}}">
      {{yield}}
    </div>
  </BsCollapse>
  */
  {
    "id": "wepDe7Zy",
    "block": "[[[8,[39,0],[[24,\"role\",\"tabpanel\"]],[[\"@collapsed\"],[[30,1]]],[[\"default\"],[[[[1,\"\\n  \"],[10,0],[15,0,[29,[[27],\" \",\"accordion-body\"]]],[12],[1,\"\\n    \"],[18,2,null],[1,\"\\n  \"],[13],[1,\"\\n\"]],[]]]]]],[\"@collapsed\",\"&default\"],false,[\"bs-collapse\",\"yield\"]]",
    "moduleName": "ember-bootstrap/components/bs-accordion/item/body.hbs",
    "isStrictMode": false
  });
  /**
   Component for an accordion item body.
  
   See [Components.Accordion](Components.Accordion.html) for examples.
  
   @class AccordionItemBody
   @namespace Components
   @extends Ember.Component
   @public
   */

  /**
   * @property collapsed
   * @type boolean
   * @public
   */
  var _default = _exports.default = (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, (0, _templateOnly.default)());
});
;define("ember-bootstrap/components/bs-accordion/item/title", ["exports", "@ember/component", "@ember/object", "@glimmer/component", "ember-bootstrap/utils/deprecate-subclassing", "@ember/template-factory"], function (_exports, _component, _object, _component2, _deprecateSubclassing, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _class2;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/object",0,"@glimmer/component",0,"ember-bootstrap/utils/deprecate-subclassing",0,"@ember/component"eaimeta@70e063a35619d71f
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    {{!-- template-lint-disable no-nested-interactive --}}
  {{!-- @todo fix this, see https://github.com/kaliber5/ember-bootstrap/issues/999 --}}
  {{#if (macroCondition (macroGetOwnConfig "isBS5"))}}
    <h2
      class="accordion-header"
      role="tab"
      ...attributes
    >
      <button
        class="accordion-button {{if @disabled "disabled"}} {{if @collapsed "collapsed"}}"
        type="button"
        disabled={{@disabled}}
        {{on "click" this.handleClick}}
      >
        {{yield}}
      </button>
    </h2>
  {{else}}
    <div
      class="card-header"
      role="tab"
      ...attributes
      {{on "click" this.handleClick}}
    >
      <h5 class="mb-0">
        <button class="btn btn-link {{if @disabled "disabled"}} {{if @collapsed "collapsed" "expanded"}}" type="button" disabled={{@disabled}}>
          {{yield}}
        </button>
      </h5>
    </div>
  {{/if}}
  
  */
  {
    "id": "4/I+tlpl",
    "block": "[[[1,\"  \"],[11,\"h2\"],[24,0,\"accordion-header\"],[24,\"role\",\"tab\"],[17,1],[12],[1,\"\\n    \"],[11,\"button\"],[16,0,[29,[\"accordion-button \",[52,[30,2],\"disabled\"],\" \",[52,[30,3],\"collapsed\"]]]],[16,\"disabled\",[30,2]],[24,4,\"button\"],[4,[38,1],[\"click\",[30,0,[\"handleClick\"]]],null],[12],[1,\"\\n      \"],[18,4,null],[1,\"\\n    \"],[13],[1,\"\\n  \"],[13],[1,\"\\n\"]],[\"&attrs\",\"@disabled\",\"@collapsed\",\"&default\"],false,[\"if\",\"on\",\"yield\"]]",
    "moduleName": "ember-bootstrap/components/bs-accordion/item/title.hbs",
    "isStrictMode": false
  });

  /**
   Component for an accordion item title.
  
   See [Components.Accordion](Components.Accordion.html) for examples.
  
   @class AccordionItemTitle
   @namespace Components
   @extends Glimmer.Component
   @public
   */
  let AccordionItemTitle = _exports.default = (0, _deprecateSubclassing.default)(_class = (_class2 = class AccordionItemTitle extends _component2.default {
    /**
     * @property collapsed
     * @type boolean
     * @public
     */

    /**
     * @property disabled
     * @type boolean
     * @private
     */

    /**
     * @event onClick
     * @public
     */

    handleClick(e) {
      e.preventDefault();
      if (!this.args.disabled) {
        this.args.onClick?.();
      }
    }
  }, (_applyDecoratedDescriptor(_class2.prototype, "handleClick", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "handleClick"), _class2.prototype)), _class2)) || _class;
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, AccordionItemTitle);
});
;define("ember-bootstrap/components/bs-alert", ["exports", "@ember/component", "@ember/object", "@glimmer/component", "@glimmer/tracking", "@ember/runloop", "ember-bootstrap/utils/decorators/uses-transition", "ember-bootstrap/utils/deprecate-subclassing", "ember-bootstrap/utils/decorators/arg", "tracked-toolbox", "@ember/template-factory"], function (_exports, _component, _object, _component2, _tracking, _runloop, _usesTransition, _deprecateSubclassing, _arg, _trackedToolbox, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _dec2, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/object",0,"@glimmer/component",0,"@glimmer/tracking",0,"@ember/runloop",0,"ember-bootstrap/utils/decorators/uses-transition",0,"ember-bootstrap/utils/deprecate-subclassing",0,"ember-bootstrap/utils/decorators/arg",0,"tracked-toolbox",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <div
    class="{{unless this.hidden "alert"}} {{if this.fade "fade"}} {{if this.dismissible "alert-dismissible"}} {{bs-type-class "alert" @type}} {{if this.showAlert "show"}}"
    ...attributes
    {{did-update this.showOrHide this._visible}}
  >
    {{#unless this.hidden}}
      {{#if this.dismissible}}
        <button type="button" class={{if (macroCondition (macroGetOwnConfig "isBS5")) "btn-close" "close"}} aria-label="Close" {{on "click" this.dismiss}}>
          {{#if (macroCondition (macroGetOwnConfig "isBS4"))}}<span aria-hidden="true">&times;</span>{{/if}}
        </button>
      {{/if}}
  
      {{#if (has-block "header")}}
        {{#let (element (bs-default @headerTag "h4")) as |Tag|}}
          <Tag class="alert-heading">
            {{yield to="header"}}
          </Tag>
        {{/let}}
      {{/if}}
  
      {{#if (has-block "body")}}
        {{yield to="body"}}
      {{else}}
        {{yield}}
      {{/if}}
    {{/unless}}
  </div>
  */
  {
    "id": "M7QzW85W",
    "block": "[[[11,0],[16,0,[29,[[52,[51,[30,0,[\"hidden\"]]],\"alert\"],\" \",[52,[30,0,[\"fade\"]],\"fade\"],\" \",[52,[30,0,[\"dismissible\"]],\"alert-dismissible\"],\" \",[28,[37,2],[\"alert\",[30,1]],null],\" \",[52,[30,0,[\"showAlert\"]],\"show\"]]]],[17,2],[4,[38,3],[[30,0,[\"showOrHide\"]],[30,0,[\"_visible\"]]],null],[12],[1,\"\\n\"],[41,[51,[30,0,[\"hidden\"]]],[[[41,[30,0,[\"dismissible\"]],[[[1,\"      \"],[11,\"button\"],[24,0,\"btn-close\"],[24,\"aria-label\",\"Close\"],[24,4,\"button\"],[4,[38,4],[\"click\",[30,0,[\"dismiss\"]]],null],[12],[1,\"\\n        \"],[1,\"\\n      \"],[13],[1,\"\\n\"]],[]],null],[1,\"\\n\"],[41,[48,[30,5]],[[[44,[[28,[37,7],[[28,[37,8],[[30,3],\"h4\"],null]],null]],[[[1,\"        \"],[8,[30,4],[[24,0,\"alert-heading\"]],null,[[\"default\"],[[[[1,\"\\n          \"],[18,5,null],[1,\"\\n        \"]],[]]]]],[1,\"\\n\"]],[4]]]],[]],null],[1,\"\\n\"],[41,[48,[30,6]],[[[1,\"      \"],[18,6,null],[1,\"\\n\"]],[]],[[[1,\"      \"],[18,7,null],[1,\"\\n\"]],[]]]],[]],null],[13]],[\"@type\",\"&attrs\",\"@headerTag\",\"Tag\",\"&header\",\"&body\",\"&default\"],false,[\"unless\",\"if\",\"bs-type-class\",\"did-update\",\"on\",\"has-block\",\"let\",\"element\",\"bs-default\",\"yield\"]]",
    "moduleName": "ember-bootstrap/components/bs-alert.hbs",
    "isStrictMode": false
  });

  /**
    Implements [Bootstrap alerts](http://getbootstrap.com/components/#alerts)
  
    ### Usage
  
    By default, it is a user dismissible alert with a fade out animation, both of which can be disabled. Be sure to set the
    `type` property for proper styling.
  
    ```hbs
    <BsAlert @type="success">
      <strong>Well done!</strong> You successfully read this important alert message.
    </BsAlert>
    ```
  
    Optionally you can render a header for the alert using named blocks syntax:
  
    ```hbs
    <BsAlert>
      <:header>
        Well done!
      </:header>
      <:body>
        You successfully read this important alert message.
      </:body>
    </BsAlert>
    ```
  
    The header is rendered using a `<h4>` element by default. You can customize
    that one by setting `@headerTag` argument of `<BsAlert>`.
  
    Using named block syntax as shown above may require installing
    [ember-named-blocks-polyfill](https://github.com/ember-polyfills/ember-named-blocks-polyfill)
    in your project depending on the Ember version used.
  
    *Note that only invoking the component in a template as shown above is considered part of its public API. Extending from it (subclassing) is generally not supported, and may break at any time.*
  
    @class Alert
    @namespace Components
    @extends Glimmer.Component
    @public
  */
  let Alert = _exports.default = (_dec = (0, _trackedToolbox.localCopy)('visible'), _dec2 = (0, _usesTransition.default)('fade'), (0, _deprecateSubclassing.default)(_class = (_class2 = class Alert extends _component2.default {
    constructor(...args) {
      super(...args);
      /**
       * A dismissible alert will have a close button in the upper right corner, that the user can click to dismiss
       * the alert.
       *
       * @property dismissible
       * @type boolean
       * @default true
       * @public
       */
      _initializerDefineProperty(this, "dismissible", _descriptor, this);
      /**
       * If true the alert is completely hidden. Will be set when the fade animation has finished.
       *
       * @property hidden
       * @type boolean
       * @default false
       * @readonly
       * @private
       */
      _initializerDefineProperty(this, "hidden", _descriptor2, this);
      /**
       * This is an unfortunate duplication of the previous property, but this is untracked to avoid causing the dreaded "same computation" assertion in GlimmerVM when reading a tracked property before setting it.
       * @private
       */
      _defineProperty(this, "_hidden", !this.visible);
      /**
       * This property controls if the alert should be visible. If false it might still be in the DOM until the fade animation
       * has completed.
       *
       * When the alert is dismissed by user interaction this property will not update by using two-way bindings in order
       * to follow DDAU best practices. If you want to react to such changes, subscribe to the `onDismiss` action
       *
       * @property visible
       * @type boolean
       * @default true
       * @public
       */
      _initializerDefineProperty(this, "visible", _descriptor3, this);
      /**
       * @property _visible
       * @private
       */
      _initializerDefineProperty(this, "_visible", _descriptor4, this);
      /**
       * Set to false to disable the fade out animation when hiding the alert.
       *
       * @property fade
       * @type boolean
       * @default true
       * @public
       */
      _initializerDefineProperty(this, "fade", _descriptor5, this);
      /**
       * The duration of the fade out animation
       *
       * @property fadeDuration
       * @type number
       * @default 150
       * @public
       */
      _initializerDefineProperty(this, "fadeDuration", _descriptor6, this);
      /**
       * Property for type styling
       *
       * For the available types see the [Bootstrap docs](https://getbootstrap.com/docs/4.3/components/alerts/)
       *
       * @property type
       * @type String
       * @public
       */
      /**
       * Use CSS transitions?
       *
       * @property usesTransition
       * @type boolean
       * @readonly
       * @private
       */
      _initializerDefineProperty(this, "usesTransition", _descriptor7, this);
    }
    get showAlert() {
      return this._visible && this.args.fade !== false;
    }
    /**
     * The action to be sent after the alert has been dismissed (including the CSS transition).
     *
     * @event onDismissed
     * @public
     */
    /**
     * The action is called when the close button is clicked.
     *
     * You can return false to prevent closing the alert automatically, and do that in your action by
     * setting `visible` to false.
     *
     * @event onDismiss
     * @public
     */
    dismiss() {
      if (this.args.onDismiss?.() !== false) {
        this._visible = false;
      }
    }

    /**
     * Call to make the alert visible again after it has been hidden
     *
     * @method show
     * @private
     */
    show() {
      this.hidden = this._hidden = false;
    }

    /**
     * Call to hide the alert. If the `fade` property is true, this will fade out the alert before being finally
     * dismissed.
     *
     * @method hide
     * @private
     */
    hide() {
      if (this._hidden) {
        return;
      }
      if (this.usesTransition) {
        (0, _runloop.later)(this, function () {
          if (!this.isDestroyed) {
            this.hidden = this._hidden = true;
            this.args.onDismissed?.();
          }
        }, this.fadeDuration);
      } else {
        this.hidden = this._hidden = true;
        this.args.onDismissed?.();
      }
    }
    showOrHide() {
      if (this._visible) {
        this.show();
      } else {
        this.hide();
      }
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "dismissible", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "hidden", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return !this.visible;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "visible", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_visible", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "fade", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "fadeDuration", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 150;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "usesTransition", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class2.prototype, "dismiss", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "dismiss"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "showOrHide", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "showOrHide"), _class2.prototype)), _class2)) || _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, Alert);
});
;define("ember-bootstrap/components/bs-button-group", ["exports", "@ember/component", "@ember/object", "@glimmer/component", "@ember/array", "ember-bootstrap/utils/deprecate-subclassing", "@ember/template-factory"], function (_exports, _component, _object, _component2, _array, _deprecateSubclassing, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _class2;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/object",0,"@glimmer/component",0,"@ember/array",0,"ember-bootstrap/utils/deprecate-subclassing",0,"@ember/component"eaimeta@70e063a35619d71f
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <div class="{{if @vertical "btn-group-vertical" "btn-group"}} {{bs-size-class "btn-group" @size}}" role="group" ...attributes>
    {{yield
      (hash
        button=(component (ensure-safe-component (bs-default @buttonComponent (component "bs-button-group/button"))) buttonGroupType=@type groupValue=@value onClick=this.buttonPressed)
      )
    }}
  </div>
  */
  {
    "id": "zOthkaa3",
    "block": "[[[11,0],[16,0,[29,[[52,[30,1],\"btn-group-vertical\",\"btn-group\"],\" \",[28,[37,1],[\"btn-group\",[30,2]],null]]]],[24,\"role\",\"group\"],[17,3],[12],[1,\"\\n  \"],[18,7,[[28,[37,3],null,[[\"button\"],[[50,[28,[37,5],[[28,[37,6],[[30,4],[50,\"bs-button-group/button\",0,null,null]],null]],null],0,null,[[\"buttonGroupType\",\"groupValue\",\"onClick\"],[[30,5],[30,6],[30,0,[\"buttonPressed\"]]]]]]]]]],[1,\"\\n\"],[13]],[\"@vertical\",\"@size\",\"&attrs\",\"@buttonComponent\",\"@type\",\"@value\",\"&default\"],false,[\"if\",\"bs-size-class\",\"yield\",\"hash\",\"component\",\"ensure-safe-component\",\"bs-default\"]]",
    "moduleName": "ember-bootstrap/components/bs-button-group.hbs",
    "isStrictMode": false
  });

  /**
    Bootstrap-style button group, that visually groups buttons, and optionally adds radio/checkbox like behaviour.
    See http://getbootstrap.com/components/#btn-groups
  
    Use as a block level component with any number of [Components.Button](Components.Button.html) components provided as
    a yielded pre-configured contextual component:
  
    ```handlebars
    <BsButtonGroup as |bg|>
      <bg.button>1</bg.button>
      <bg.button>2</bg.button>
      <bg.button>3</bg.button>
    </BsButtonGroup>
    ```
  
    ### Radio-like behaviour
  
    Use the `type` property set to "radio" to make the child buttons toggle like radio buttons, i.e. only one button can be active.
    Set the `value` property of the buttons to something meaningful. The `value` property of the button group will then reflect
    the value of the active button:
  
    ```handlebars
    <BsButtonGroup @value={{this.buttonGroupValue}} @type="radio" @onChange={{action (mut this.buttonGroupValue}} as |bg|>
      <bg.button @type="default" @value={{1}}>1</bg.button>
      <bg.button @type="default" @value={{2}}>2</bg.button>
      <bg.button @type="default" @value={{3}}>3</bg.button>
    </BsButtonGroup>
  
    You selected: {{this.buttonGroupValue}}!
    ```
  
    ### Checkbox-like behaviour
  
    Set `type` to "checkbox" to make any number of child buttons selectable. The `value` property will be an array
    of all the values of the active buttons:
  
    ```handlebars
    <BsButtonGroup @value={{this.buttonGroupValue}} @type="checkbox" @onChange={{action (mut this.buttonGroupValue}} as |bg|>
      <bg.button @type="default" @value={{1}}>1</bg.button>
      <bg.button @type="default" @value={{2}}>2</bg.button>
      <bg.button @type="default" @value={{3}}>3</bg.button>
    </BsButtonGroup>
  
    You selected:
    <ul>
      {{#each value in this.buttonGroupValue}}
        <li>{{value}}</li>
      {{/each}}
    </ul>
    ```
  
    *Note that only invoking the component in a template as shown above is considered part of its public API. Extending from it (subclassing) is generally not supported, and may break at any time.*
  
    @class ButtonGroup
    @namespace Components
    @extends Glimmer.Component
    @public
  */
  let ButtonGroup = _exports.default = (0, _deprecateSubclassing.default)(_class = (_class2 = class ButtonGroup extends _component2.default {
    /**
     * @property buttonComponent
     * @type {String}
     * @private
     */

    /**
     * Set to true for a vertically stacked button group, see http://getbootstrap.com/components/#btn-groups-vertical
     *
     * @property vertical
     * @type boolean
     * @default false
     * @public
     */

    /**
     * Set to true for the buttons to stretch at equal sizes to span the entire width of its parent. (BS3 only!)
     *
     * *Important*: You have to wrap every button component in a `div class="btn-group">`:
     *
     * ```handlebars
     * <div class="btn-group" role="group">
     * {{#bs-button}}My Button{{/bs-button}}
     * </div>
     * ```
     *
     * See http://getbootstrap.com/components/#btn-groups-justified
     *
     * @property justified
     * @type boolean
     * @default false
     * @public
     */

    /**
     * The type of the button group specifies how child buttons behave and how the `value` property will be computed:
     *
     * ### null
     * If `type` is not set (null), the button group will add no functionality besides Bootstrap styling
     *
     * ### radio
     * if `type` is set to "radio", the buttons will behave like radio buttons:
     * * the `value` property of the button group will reflect the `value` property of the active button
     * * thus only one button may be active
     *
     * ### checkbox
     * if `type` is set to "checkbox", the buttons will behave like checkboxes:
     * * any number of buttons may be active
     * * the `value` property of the button group will be an array containing the `value` properties of all active buttons
     *
     * @property type
     * @type string
     * @default null
     * @public
     */

    /**
     * The value of the button group, computed by its child buttons.
     * See the `type` property for how the value property is constructed.
     *
     * When you set the value, the corresponding buttons will be activated:
     * * use a single value for a radio button group to activate the button with the same value
     * * use an array of values for a checkbox button group to activate all the buttons with values contained in the array
     *
     * @property value
     * @type array
     * @public
     */

    /**
     * Property for size styling, set to 'lg', 'sm' or 'xs'
     *
     * Also see the [Bootstrap docs](https://getbootstrap.com/docs/4.3/components/button-group/#sizing)
     *
     * @property size
     * @type String
     * @public
     */

    /**
     * This action is called whenever the button group's value should be changed because the user clicked a button.
     * You will receive the new value of the button group (based on the `type` property), which you should use to update the
     * `value` property.
     *
     * @event onChange
     * @param {*} value
     * @public
     */

    buttonPressed(pressedValue) {
      if (!this.args.onChange) {
        return;
      }
      let newValue;
      if (this.args.type === 'radio') {
        if (pressedValue === this.args.value) {
          return;
        }
        newValue = pressedValue;
      } else {
        if (!(0, _array.isArray)(this.args.value)) {
          newValue = [pressedValue];
        } else {
          if (this.args.value.includes(pressedValue)) {
            newValue = this.args.value.filter(v => v !== pressedValue);
          } else {
            newValue = [...this.args.value, pressedValue];
          }
        }

        // For compatibility we continue to return an EmberArray instance for now
        // @todo this should be changed for the next major release!
        newValue = (0, _array.A)(newValue);
      }
      this.args.onChange(newValue);
    }
  }, (_applyDecoratedDescriptor(_class2.prototype, "buttonPressed", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "buttonPressed"), _class2.prototype)), _class2)) || _class;
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, ButtonGroup);
});
;define("ember-bootstrap/components/bs-button-group/button", ["exports", "@ember/component", "@ember/array", "ember-bootstrap/components/bs-button", "@ember/object/internals", "@ember/template-factory", "@embroider/macros/runtime"], function (_exports, _component, _array, _bsButton, _internals, _templateFactory, _runtime) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/array",0,"ember-bootstrap/components/bs-button",0,"@ember/object/internals",0,"@embroider/macros",0,"@ember/component"eaimeta@70e063a35619d71f
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    {{#if this.isBS5ToggleButton}}
    <input
      type={{@buttonGroupType}}
      class="btn-check"
      id={{this.formId}}
      autocomplete="off"
      checked={{this.active}}
      ...attributes
      {{on "click" this.handleClick}}
      {{did-update this.resetState @reset}}
    >
    <label
      class="btn {{bs-size-class "btn" @size}} {{bs-type-class "btn" @type default="secondary" outline=@outline}}"
      for={{this.formId}}
    >
      {{#if this.icon}}
        <i class={{this.icon}}></i>
      {{/if}}
      {{this.text}}
      {{yield
        (hash
          isFulfilled=this.isFulfilled
          isPending=this.isPending
          isRejected=this.isRejected
          isSettled=this.isSettled
        )
      }}
    </label>
  {{else}}
    <button
      disabled={{this.__disabled}}
      type={{this.buttonType}}
      class="btn {{if this.active "active"}} {{if this.block "btn-block"}} {{bs-size-class "btn" @size}} {{bs-type-class "btn" @type default="secondary" outline=@outline}}"
      ...attributes
      {{on "click" this.handleClick}}
      {{did-update this.resetState @reset}}
    >
      {{#if this.icon}}
        <i class={{this.icon}}></i>
      {{/if}}
      {{this.text}}
      {{yield
        (hash
          isFulfilled=this.isFulfilled
          isPending=this.isPending
          isRejected=this.isRejected
          isSettled=this.isSettled
        )
      }}
    </button>
  {{/if}}
  */
  {
    "id": "iJHXyODq",
    "block": "[[[41,[30,0,[\"isBS5ToggleButton\"]],[[[1,\"  \"],[11,\"input\"],[16,4,[30,1]],[24,0,\"btn-check\"],[16,1,[30,0,[\"formId\"]]],[24,\"autocomplete\",\"off\"],[16,\"checked\",[30,0,[\"active\"]]],[17,2],[4,[38,1],[\"click\",[30,0,[\"handleClick\"]]],null],[4,[38,2],[[30,0,[\"resetState\"]],[30,3]],null],[12],[13],[1,\"\\n  \"],[10,\"label\"],[15,0,[29,[\"btn \",[28,[37,3],[\"btn\",[30,4]],null],\" \",[28,[37,4],[\"btn\",[30,5]],[[\"default\",\"outline\"],[\"secondary\",[30,6]]]]]]],[15,\"for\",[30,0,[\"formId\"]]],[12],[1,\"\\n\"],[41,[30,0,[\"icon\"]],[[[1,\"      \"],[10,\"i\"],[15,0,[30,0,[\"icon\"]]],[12],[13],[1,\"\\n\"]],[]],null],[1,\"    \"],[1,[30,0,[\"text\"]]],[1,\"\\n    \"],[18,7,[[28,[37,6],null,[[\"isFulfilled\",\"isPending\",\"isRejected\",\"isSettled\"],[[30,0,[\"isFulfilled\"]],[30,0,[\"isPending\"]],[30,0,[\"isRejected\"]],[30,0,[\"isSettled\"]]]]]]],[1,\"\\n  \"],[13],[1,\"\\n\"]],[]],[[[1,\"  \"],[11,\"button\"],[16,\"disabled\",[30,0,[\"__disabled\"]]],[16,4,[30,0,[\"buttonType\"]]],[16,0,[29,[\"btn \",[52,[30,0,[\"active\"]],\"active\"],\" \",[52,[30,0,[\"block\"]],\"btn-block\"],\" \",[28,[37,3],[\"btn\",[30,4]],null],\" \",[28,[37,4],[\"btn\",[30,5]],[[\"default\",\"outline\"],[\"secondary\",[30,6]]]]]]],[17,2],[4,[38,1],[\"click\",[30,0,[\"handleClick\"]]],null],[4,[38,2],[[30,0,[\"resetState\"]],[30,3]],null],[12],[1,\"\\n\"],[41,[30,0,[\"icon\"]],[[[1,\"      \"],[10,\"i\"],[15,0,[30,0,[\"icon\"]]],[12],[13],[1,\"\\n\"]],[]],null],[1,\"    \"],[1,[30,0,[\"text\"]]],[1,\"\\n    \"],[18,7,[[28,[37,6],null,[[\"isFulfilled\",\"isPending\",\"isRejected\",\"isSettled\"],[[30,0,[\"isFulfilled\"]],[30,0,[\"isPending\"]],[30,0,[\"isRejected\"]],[30,0,[\"isSettled\"]]]]]]],[1,\"\\n  \"],[13],[1,\"\\n\"]],[]]]],[\"@buttonGroupType\",\"&attrs\",\"@reset\",\"@size\",\"@type\",\"@outline\",\"&default\"],false,[\"if\",\"on\",\"did-update\",\"bs-size-class\",\"bs-type-class\",\"yield\",\"hash\"]]",
    "moduleName": "ember-bootstrap/components/bs-button-group/button.hbs",
    "isStrictMode": false
  });

  /**
   Internal component for button-group buttons
  
   @class ButtonGroupButton
   @namespace Components
   @extends Components.Button
   @private
   */
  class ButtonGroupButton extends _bsButton.default {
    constructor(...args) {
      super(...args);
      _defineProperty(this, '__ember-bootstrap_subclass', true);
      _defineProperty(this, "formId", (0, _internals.guidFor)(this));
    }
    /**
     * @property groupValue
     * @private
     */

    /**
     * @property buttonGroupType
     * @type string
     * @private
     */
    /**
     * @property active
     * @type boolean
     * @readonly
     * @private
     */
    get active() {
      let {
        value,
        groupValue
      } = this.args;
      if (this.args.buttonGroupType === 'radio') {
        return value === groupValue;
      } else {
        if ((0, _array.isArray)(groupValue)) {
          return groupValue.indexOf(value) !== -1;
        }
      }
      return false;
    }
    get isBS5ToggleButton() {
      if ((0, _runtime.macroCondition)((0, _runtime.config)("/home/ec2-user/coup/client/node_modules/ember-bootstrap").isBS5)) {
        return this.args.buttonGroupType === 'radio' || this.args.buttonGroupType === 'checkbox';
      } else {
        return false;
      }
    }
  }
  _exports.default = ButtonGroupButton;
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, ButtonGroupButton);
});
;define("ember-bootstrap/components/bs-button", ["exports", "@ember/component", "@glimmer/tracking", "@ember/object", "@glimmer/component", "ember-bootstrap/utils/decorators/arg", "ember-bootstrap/utils/deprecate-subclassing", "@ember/template-factory"], function (_exports, _component, _tracking, _object, _component2, _arg, _deprecateSubclassing, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _class2, _descriptor, _descriptor2, _descriptor3;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@glimmer/tracking",0,"@ember/object",0,"@glimmer/component",0,"ember-bootstrap/utils/decorators/arg",0,"ember-bootstrap/utils/deprecate-subclassing",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <button
    disabled={{this.__disabled}}
    type={{this.buttonType}}
    class="btn {{if @active "active"}} {{if (macroCondition (macroGetOwnConfig "isNotBS5")) (if this.block "btn-block")}} {{bs-size-class "btn" @size}} {{bs-type-class "btn" @type default="secondary" outline=@outline}}"
    ...attributes
    {{on "click" this.handleClick}}
    {{did-update this.resetState @reset}}
  >
    {{#if this.icon}}<i class={{this.icon}}></i> {{/if}}{{this.text}}{{yield
      (hash
        isFulfilled=this.isFulfilled
        isPending=this.isPending
        isRejected=this.isRejected
        isSettled=this.isSettled
      )
    }}
  </button>
  */
  {
    "id": "YG62SDKc",
    "block": "[[[11,\"button\"],[16,\"disabled\",[30,0,[\"__disabled\"]]],[16,4,[30,0,[\"buttonType\"]]],[16,0,[29,[\"btn \",[52,[30,1],\"active\"],\" \",[27],\" \",[28,[37,1],[\"btn\",[30,2]],null],\" \",[28,[37,2],[\"btn\",[30,3]],[[\"default\",\"outline\"],[\"secondary\",[30,4]]]]]]],[17,5],[4,[38,3],[\"click\",[30,0,[\"handleClick\"]]],null],[4,[38,4],[[30,0,[\"resetState\"]],[30,6]],null],[12],[1,\"\\n  \"],[41,[30,0,[\"icon\"]],[[[10,\"i\"],[15,0,[30,0,[\"icon\"]]],[12],[13],[1,\" \"]],[]],null],[1,[30,0,[\"text\"]]],[18,7,[[28,[37,6],null,[[\"isFulfilled\",\"isPending\",\"isRejected\",\"isSettled\"],[[30,0,[\"isFulfilled\"]],[30,0,[\"isPending\"]],[30,0,[\"isRejected\"]],[30,0,[\"isSettled\"]]]]]]],[1,\"\\n\"],[13]],[\"@active\",\"@size\",\"@type\",\"@outline\",\"&attrs\",\"@reset\",\"&default\"],false,[\"if\",\"bs-size-class\",\"bs-type-class\",\"on\",\"did-update\",\"yield\",\"hash\"]]",
    "moduleName": "ember-bootstrap/components/bs-button.hbs",
    "isStrictMode": false
  });

  /**
    Implements a HTML button element, with support for all [Bootstrap button CSS styles](http://getbootstrap.com/css/#buttons)
    as well as advanced functionality such as button states.
  
    ### Basic Usage
  
    ```hbs
    <BsButton @type="primary" @icon="glyphicon glyphicon-download">
      Downloads
    </BsButton>
    ```
  
    ### Actions
  
    Use the `onClick` property of the component to send an action to your controller. It will receive the button's value
    (see the `value` property) as an argument.
  
    ```hbs
    <BsButton @type="primary" @icon="glyphicon glyphicon-download" @onClick=(action "download")>
      Downloads
    </BsButton>
    ```
  
    ### Promise support for automatic state change
  
    When returning a Promise for any asynchronous operation from the `onClick` closure action the button will
    manage an internal state ("default" > "pending" > "fulfilled"/"rejected") automatically.
  
    The button is disabled by default if it's in pending state. You could override this behavior by passing
    the `disabled` HTML attribute or by setting `@preventConcurrency` to false.
  
    ```hbs
    <BsButton
      disabled={{false}}
    />
    ```
  
    ```hbs
    <BsButton
      @preventConcurrency={{false}}
    />
    ```
  
    The label could be changed automatically according to the state of the promise with `@defaultText`,
    `@pendingText`, `@fulfilledText` and `@rejectedText` arguments:
  
    ```hbs
    <BsButton
      @type="primary"
      @icon="glyphicon glyphicon-download"
      @defaultText="Download"
      @pendingText="Loading..."
      @fulfilledText="Completed!"
      @rejectedText="Oups!?"
      @onClick={{this.download}}
    />
    ```
  
    ```js
    // controller.js
    import { Controller } from '@ember/controller';
    import { action } from '@ember/object';
  
    export default class MyController extends Controller {
      @action
      download(value) {
        return new Promise(...);
      }
    });
    ```
  
    For further customization `isPending`, `isFulfilled`, `isRejected` and `isSettled` properties are yielded:
  
    ```hbs
    <BsButton @onClick=(action "download") as |button|>
      Download
      {{#if button.isPending}}
        <span class="loading-spinner"></span>
      {{/if}}
    </BsButton>
    ```
  
    You can `reset` the state represented by these properties and used for button's text by setting `reset` property to
    `true`.
  
    *Note that only invoking the component in a template as shown above is considered part of its public API. Extending from it (subclassing) is generally not supported, and may break at any time.*
  
    @class Button
    @namespace Components
    @extends Glimmer.Component
    @public
  */
  let Button = _exports.default = (0, _deprecateSubclassing.default)(_class = (_class2 = class Button extends _component2.default {
    /**
     * Default label of the button. Not need if used as a block component
     *
     * @property defaultText
     * @type string
     * @public
     */

    /**
     * Label of the button used if `onClick` event has returned a Promise which is pending.
     * Not considered if used as a block component.
     *
     * @property pendingText
     * @type string
     * @public
     */

    /**
     * Label of the button used if `onClick` event has returned a Promise which succeeded.
     * Not considered if used as a block component.
     *
     * @property fulfilledText
     * @type string
     * @public
     */

    /**
     * Label of the button used if `onClick` event has returned a Promise which failed.
     * Not considered if used as a block component.
     *
     * @property rejectedText
     * @type string
     * @public
     */

    /**
     * Property to disable the button only used in internal communication
     * between Ember Boostrap components.
     *
     * @property _disabled
     * @type ?boolean
     * @default null
     * @private
     */

    get __disabled() {
      if (this.args._disabled !== undefined) {
        return this.args._disabled;
      }
      return this.isPending && this.args.preventConcurrency !== false;
    }

    /**
     * Set the type of the button, either 'button' or 'submit'
     *
     * @property buttonType
     * @type String
     * @default 'button'
     * @deprecated
     * @public
     */

    /**
     * A click event on a button will not bubble up the DOM tree if it has an `onClick` action handler. Set to true to
     * enable the event to bubble
     *
     * @property bubble
     * @type boolean
     * @default false
     * @public
     */

    /**
     * If button is active and this is set, the icon property will match this property
     *
     * @property iconActive
     * @type String
     * @public
     */

    /**
     * If button is inactive and this is set, the icon property will match this property
     *
     * @property iconInactive
     * @type String
     * @public
     */
    /**
     * Class(es) (e.g. glyphicons or font awesome) to use as a button icon
     * This will render a <i class="{{icon}}"></i> element in front of the button's label
     *
     * @property icon
     * @type String
     * @public
     */
    get icon() {
      return this.args.icon || (this.args.active ? this.args.iconActive : this.args.iconInactive);
    }

    /**
     * Supply a value that will be associated with this button. This will be sent
     * as a parameter of the default action triggered when clicking the button
     *
     * @property value
     * @type any
     * @public
     */

    /**
     * Controls if `onClick` action is fired concurrently. If `true` clicking button multiple times will not trigger
     * `onClick` action if a Promise returned by previous click is not settled yet.
     *
     * This does not affect event bubbling.
     *
     * @property preventConcurrency
     * @type Boolean
     * @default true
     * @public
     */

    /**
     * State of the button. The button's label (if not used as a block component) will be set to the
     * `<state>Text` property.
     * This property will automatically be set when using a click action that supplies the callback with a promise.
     * Possible values are: "default" > "pending" > "fulfilled" / "rejected".
     * It could be resetted by `reset` property.
     *
     * @property state
     * @type String
     * @default 'default'
     * @private
     */

    get state() {
      return this.args.state ?? this._state;
    }
    set state(state) {
      this._state = state;
    }

    /**
     * Promise returned by `onClick` event is pending.
     *
     * @property isPending
     * @type Boolean
     * @private
     */
    get isPending() {
      return this.state === 'pending';
    }

    /**
     * Promise returned by `onClick` event has been succeeded.
     *
     * @property isFulfilled
     * @type Boolean
     * @private
     */
    get isFulfilled() {
      return this.state === 'fulfilled';
    }

    /**
     * Promise returned by `onClick` event has been rejected.
     *
     * @property isRejected
     * @type Boolean
     * @private
     */
    get isRejected() {
      return this.state === 'rejected';
    }

    /**
     * Promise returned by `onClick` event has been succeeded or rejected.
     *
     * @property isSettled
     * @type Boolean
     * @private
     */
    get isSettled() {
      return this.isFulfilled || this.isRejected;
    }

    /**
     * Set this to `true` to reset the `state`. A typical use case is to bind this attribute with ember-data isDirty flag.
     *
     * The old value is not taken into consideration. Setting a `true` value to `true` again will also reset `state`.
     * In that case it's even to notify the observer system that the property has changed by calling
     * [`notifyPropertyChange()`](https://www.emberjs.com/api/ember/3.2/classes/EmberObject/methods/notifyPropertyChange?anchor=notifyPropertyChange).
     *
     * @property reset
     * @type boolean
     * @public
     */

    /**
     * Property for size styling, set to 'lg', 'sm' or 'xs'
     *
     * Also see the [Bootstrap docs](https://getbootstrap.com/docs/4.3/components/buttons/#sizes)
     *
     * @property size
     * @type String
     * @public
     */

    /**
     * Property for type styling
     *
     * For the available types see the [Bootstrap docs](https://getbootstrap.com/docs/4.3/components/buttons/)
     *
     * @property type
     * @type String
     * @default 'secondary'
     * @public
     */

    /**
     * Property to create outline buttons (BS4+ only)
     *
     * @property outline
     * @type boolean
     * @default false
     * @public
     */

    /**
     * When clicking the button this action is called with the value of the button (that is the value of the "value" property).
     *
     * Return a promise object, and the buttons state will automatically set to "pending", "resolved" and/or "rejected".
     * This could be used to automatically set the button's text depending on promise state (`defaultText`, `pendingText`,
     * `fulfilledText`, `rejectedText`) and for further customization using the yielded `isPending`, `isFulfilled`,
     * `isRejected` properties.
     *
     * The click event will not bubble up, unless you set `bubble` to true.
     *
     * @event onClick
     * @param {*} value
     * @public
     */

    /**
     * This will reset the state property to 'default', and with that the button's label to defaultText
     *
     * @method resetState
     * @private
     */
    resetState() {
      this.state = 'default';
    }
    get text() {
      return this.args[`${this.state}Text`] || this.args.defaultText;
    }

    /**
     * @method click
     * @private
     */
    async handleClick(e) {
      const {
        bubble,
        onClick,
        preventConcurrency
      } = this.args;
      if (typeof onClick !== 'function') {
        return;
      }

      // Shouldn't we prevent propagation regardless if `@onClick` is a function?
      if (!bubble) {
        e.stopPropagation();
      }
      if (preventConcurrency && this.isPending) {
        return;
      }
      this.state = 'pending';
      try {
        await onClick(this.args.value);
        if (!this.isDestroyed) {
          this.state = 'fulfilled';
        }
      } catch (error) {
        if (!this.isDestroyed) {
          this.state = 'rejected';
        }
        throw error;
      }
    }
    constructor() {
      super(...arguments);
      _initializerDefineProperty(this, "buttonType", _descriptor, this);
      /**
       * Set the 'active' class to apply active/pressed CSS styling
       *
       * @property active
       * @type boolean
       * @default false
       * @public
       */
      /**
       * Property for block level buttons (BS3 and BS4 only!)
       *
       * See the [Bootstrap docs](http://getbootstrap.com/css/#buttons-sizes)
       * @property block
       * @type boolean
       * @default false
       * @public
       */
      _initializerDefineProperty(this, "block", _descriptor2, this);
      _initializerDefineProperty(this, "_state", _descriptor3, this);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "buttonType", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 'button';
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "block", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_state", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 'default';
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "resetState", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "resetState"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "handleClick", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "handleClick"), _class2.prototype)), _class2)) || _class;
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, Button);
});
;define("ember-bootstrap/components/bs-carousel", ["exports", "@ember/component", "@ember-decorators/component", "@ember-decorators/object", "@ember/object", "@ember/object/computed", "ember-bootstrap/components/bs-carousel/slide", "ember-bootstrap/mixins/component-parent", "@ember/runloop", "ember-concurrency", "rsvp", "ember-bootstrap/utils/default-decorator", "ember-bootstrap/utils/deprecate-subclassing", "@ember/template-factory"], function (_exports, _component, _component2, _object, _object2, _computed, _slide, _componentParent, _runloop, _emberConcurrency, _rsvp, _defaultDecorator, _deprecateSubclassing, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _descriptor26;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember-decorators/component",0,"@ember-decorators/object",0,"@ember/object",0,"@ember/object/computed",0,"ember-bootstrap/components/bs-carousel/slide",0,"@ember/component",0,"ember-bootstrap/mixins/component-parent",0,"@ember/runloop",0,"ember-concurrency",0,"rsvp",0,"ember-bootstrap/utils/default-decorator",0,"ember-bootstrap/utils/deprecate-subclassing",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <div
    {{!-- template-lint-disable no-positive-tabindex --}}{{!-- @todo --}}
    tabindex={{this.tabindex}}
    class="carousel slide {{if this.carouselFade "carousel-fade"}}"
    ...attributes
    {{on "keydown" this.handleKeyDown}}
    {{on "mouseenter" this.handleMouseEnter}}
    {{on "mouseleave" this.handleMouseLeave}}
  >
    {{#if this.showIndicators}}
      <ol class="carousel-indicators">
        {{#each this.indicators as |indicator _index|}}
          <li class={{if (bs-eq this.currentIndex _index) "active"}} {{on "click" (fn this.toSlide _index)}} role="button"></li>
        {{/each}}
      </ol>
    {{/if}}
  
    <div class="carousel-inner" role="listbox">
      {{yield
        (hash
          slide=(component (ensure-safe-component (bs-default @slideComponent (component "bs-carousel/slide")))
            currentSlide=this.currentSlide
            directionalClassName=this.directionalClassName
            followingSlide=this.followingSlide
            orderClassName=this.orderClassName
            presentationState=this.presentationState
          )
        )
      }}
    </div>
  
    {{#if this.showControls}}
      <a class="carousel-control-prev" href="#{{this.elementId}}" {{on "click" this.toPrevSlide}} role="button">
        <span aria-hidden="true" class="carousel-control-prev-icon"></span>
        <span class={{if (macroCondition (macroGetOwnConfig "isBS5")) "visually-hidden" "sr-only"}}>{{this.prevControlLabel}}</span>
      </a>
      <a class="carousel-control-next" href="#{{this.elementId}}" {{on "click" this.toNextSlide}} role="button">
        <span aria-hidden="true" class="carousel-control-next-icon"></span>
        <span class={{if (macroCondition (macroGetOwnConfig "isBS5")) "visually-hidden" "sr-only"}}>{{this.nextControlLabel}}</span>
      </a>
    {{/if}}
  
  </div>
  */
  {
    "id": "0/cZmH20",
    "block": "[[[11,0],[16,\"tabindex\",[30,0,[\"tabindex\"]]],[16,0,[29,[\"carousel slide \",[52,[30,0,[\"carouselFade\"]],\"carousel-fade\"]]]],[17,1],[4,[38,1],[\"keydown\",[30,0,[\"handleKeyDown\"]]],null],[4,[38,1],[\"mouseenter\",[30,0,[\"handleMouseEnter\"]]],null],[4,[38,1],[\"mouseleave\",[30,0,[\"handleMouseLeave\"]]],null],[12],[1,\"\\n\"],[41,[30,0,[\"showIndicators\"]],[[[1,\"    \"],[10,\"ol\"],[14,0,\"carousel-indicators\"],[12],[1,\"\\n\"],[42,[28,[37,3],[[28,[37,3],[[30,0,[\"indicators\"]]],null]],null],null,[[[1,\"        \"],[11,\"li\"],[16,0,[52,[28,[37,4],[[30,0,[\"currentIndex\"]],[30,3]],null],\"active\"]],[24,\"role\",\"button\"],[4,[38,1],[\"click\",[28,[37,5],[[30,0,[\"toSlide\"]],[30,3]],null]],null],[12],[13],[1,\"\\n\"]],[2,3]],null],[1,\"    \"],[13],[1,\"\\n\"]],[]],null],[1,\"\\n  \"],[10,0],[14,0,\"carousel-inner\"],[14,\"role\",\"listbox\"],[12],[1,\"\\n    \"],[18,5,[[28,[37,7],null,[[\"slide\"],[[50,[28,[37,9],[[28,[37,10],[[30,4],[50,\"bs-carousel/slide\",0,null,null]],null]],null],0,null,[[\"currentSlide\",\"directionalClassName\",\"followingSlide\",\"orderClassName\",\"presentationState\"],[[30,0,[\"currentSlide\"]],[30,0,[\"directionalClassName\"]],[30,0,[\"followingSlide\"]],[30,0,[\"orderClassName\"]],[30,0,[\"presentationState\"]]]]]]]]]],[1,\"\\n  \"],[13],[1,\"\\n\\n\"],[41,[30,0,[\"showControls\"]],[[[1,\"    \"],[11,3],[24,0,\"carousel-control-prev\"],[16,6,[29,[\"#\",[30,0,[\"elementId\"]]]]],[24,\"role\",\"button\"],[4,[38,1],[\"click\",[30,0,[\"toPrevSlide\"]]],null],[12],[1,\"\\n      \"],[10,1],[14,\"aria-hidden\",\"true\"],[14,0,\"carousel-control-prev-icon\"],[12],[13],[1,\"\\n      \"],[10,1],[14,0,\"visually-hidden\"],[12],[1,[30,0,[\"prevControlLabel\"]]],[13],[1,\"\\n    \"],[13],[1,\"\\n    \"],[11,3],[24,0,\"carousel-control-next\"],[16,6,[29,[\"#\",[30,0,[\"elementId\"]]]]],[24,\"role\",\"button\"],[4,[38,1],[\"click\",[30,0,[\"toNextSlide\"]]],null],[12],[1,\"\\n      \"],[10,1],[14,\"aria-hidden\",\"true\"],[14,0,\"carousel-control-next-icon\"],[12],[13],[1,\"\\n      \"],[10,1],[14,0,\"visually-hidden\"],[12],[1,[30,0,[\"nextControlLabel\"]]],[13],[1,\"\\n    \"],[13],[1,\"\\n\"]],[]],null],[1,\"\\n\"],[13]],[\"&attrs\",\"indicator\",\"_index\",\"@slideComponent\",\"&default\"],false,[\"if\",\"on\",\"each\",\"-track-array\",\"bs-eq\",\"fn\",\"yield\",\"hash\",\"component\",\"ensure-safe-component\",\"bs-default\"]]",
    "moduleName": "ember-bootstrap/components/bs-carousel.hbs",
    "isStrictMode": false
  });

  /**
    Ember implementation of Bootstrap's Carousel. Supports all original features but API is partially different:
  
    | Description | Original | Component |
    | ------ | ------ | ------ |
    | Autoplays after first user event or on page load. | ride='carousel'\|false | autoPlay=false\|true |
    | Disable automatic cycle. | interval=false | interval=0 |
    | If first slide should follow last slide on "previous" event, the opposite will also be true for "next" event. | wrap=false\|true | wrap=false\|true |
    | Jumps into specific slide index | data-slide-to=n | index=n |
    | Keyboard events. | keyboard=false\|true | keyboard=false\|true |
    | Left-to-right or right-to-left sliding. | N/A |  ltr=false\|true |
    | Pause current cycle on mouse enter. | pause='hover'\|null | pauseOnMouseEnter=false\|true |
    | Show or hide controls  | Tag manipulation. | showControls=false\|true |
    | Show or hide indicators  | Tag manipulation. | showIndicators=false\|true |
    | Waiting time of slides in an automatic cycle. | interval=n | interval=n |
  
    Default settings are the same as the original, so you don't have to worry about changing parameters.
  
    ```hbs
    <BsCarousel as |car|>
      <car.slide>
        <img alt="First slide" src="slide1.jpg">
      </car.slide>
      <car.slide>
        <img alt="Second slide" src="slide2.jpg">
      </car.slide>
      <car.slide>
        <img alt="Third slide" src="slide3.jpg">
      </car.slide>
    </BsCarousel>
    ```
  
    To better understand the whole documentation, you should be aware of the following operations:
  
    | Operation | Description |
    | ------ | ------ |
    | Transition | Swaps two slides. |
    | Interval | Waiting time after a transition. |
    | Presentation | Represents a single transition, or a single interval, or the union of both. |
    | Cycle | Presents all slides until it reaches first or last slide. |
    | Wrap | wrap slides, cycles without stopping at first or last slide. |
  
    *Note that only invoking the component in a template as shown above is considered part of its public API. Extending from it (subclassing) is generally not supported, and may break at any time.*
  
    @class Carousel
    @namespace Components
    @extends Ember.Component
    @public
  */
  let Carousel = _exports.default = (_dec = (0, _component2.tagName)(''), _dec2 = (0, _object2.computed)('wrap', 'currentIndex'), _dec3 = (0, _object2.computed)('childSlides.length', 'wrap', 'currentIndex'), _dec4 = (0, _computed.filter)('children', function (view) {
    return view instanceof _slide.default;
  }).readOnly(), _dec5 = (0, _object.observes)('childSlides.[]', 'autoPlay'), _dec6 = (0, _object2.computed)('childSlides', 'currentIndex').readOnly(), _dec7 = (0, _object2.computed)('childSlides', 'followingIndex').readOnly(), _dec8 = (0, _computed.gt)('interval', 0).readOnly(), _dec9 = (0, _object.observes)('index'), _dec10 = (0, _object2.computed)('childSlides.length'), _dec11 = (0, _computed.lte)('childSlides.length', 1), _dec12 = (0, _computed.readOnly)('hasInterval'), _dec13 = (0, _computed.equal)('transition', 'fade').readOnly(), _dec14 = (0, _emberConcurrency.task)(function* () {
    yield this.transitioner.perform();
    yield (0, _emberConcurrency.timeout)(this.interval);
    this.toAppropriateSlide();
  }).restartable(), _dec15 = (0, _emberConcurrency.task)(function* () {
    this.set('presentationState', 'willTransit');
    yield (0, _emberConcurrency.timeout)(this.transitionDuration);
    this.set('presentationState', 'didTransition');
    // Must change current index after execution of 'presentationStateObserver' method
    // from child components.
    yield new _rsvp.default.Promise(resolve => {
      (0, _runloop.schedule)('afterRender', this, function () {
        this.set('currentIndex', this.followingIndex);
        resolve();
      });
    });
  }).drop(), _dec16 = (0, _emberConcurrency.task)(function* () {
    if (this.shouldRunAutomatically === false) {
      return;
    }
    yield (0, _emberConcurrency.timeout)(this.interval);
    this.toAppropriateSlide();
  }).restartable(), _dec(_class = (0, _deprecateSubclassing.default)(_class = (_class2 = class Carousel extends _component.default.extend(_componentParent.default) {
    constructor(...args) {
      super(...args);
      _defineProperty(this, "tabindex", '1');
      /**
       * All `CarouselSlide` child components.
       *
       * @private
       * @property childSlides
       * @readonly
       * @type array
       */
      _initializerDefineProperty(this, "childSlides", _descriptor, this);
      /**
       * Indicates the current index of the current slide.
       *
       * @property currentIndex
       * @private
       */
      _initializerDefineProperty(this, "currentIndex", _descriptor2, this);
      /**
       * Bootstrap style to indicate that a given slide should be moving to left/right.
       *
       * @property directionalClassName
       * @private
       * @type string
       */
      _initializerDefineProperty(this, "directionalClassName", _descriptor3, this);
      /**
       * Indicates the next slide index to move into.
       *
       * @property followingIndex
       * @private
       * @type number
       */
      _initializerDefineProperty(this, "followingIndex", _descriptor4, this);
      /**
       * @private
       * @property hasInterval
       * @type boolean
       */
      _initializerDefineProperty(this, "hasInterval", _descriptor5, this);
      /**
       * If user is hovering its cursor on component.
       * This property is only manipulated when 'pauseOnMouseEnter' is true.
       *
       * @property isMouseHovering
       * @private
       * @type boolean
       */
      _initializerDefineProperty(this, "isMouseHovering", _descriptor6, this);
      /**
       * The class name to append to the next control link element.
       *
       * @property nextControlClassName
       * @type string
       * @private
       */
      /**
       * Bootstrap style to indicate the next/previous slide.
       *
       * @property orderClassName
       * @private
       * @type string
       */
      /**
       * The current state of the current presentation, can be either "didTransition"
       * or "willTransit".
       *
       * @private
       * @property presentationState
       * @type string
       */
      _initializerDefineProperty(this, "presentationState", _descriptor7, this);
      /**
       * The class name to append to the previous control link element.
       *
       * @property prevControlClassName
       * @type string
       * @private
       */
      /**
       * @private
       * @property shouldNotDoPresentation
       * @type boolean
       */
      _initializerDefineProperty(this, "shouldNotDoPresentation", _descriptor8, this);
      /**
       * @private
       * @property shouldRunAutomatically
       * @type boolean
       */
      _initializerDefineProperty(this, "shouldRunAutomatically", _descriptor9, this);
      /**
       * Starts automatic sliding on page load.
       * This parameter has no effect if interval is less than or equal to zero.
       *
       * @default false
       * @property autoPlay
       * @public
       * @type boolean
       */
      _initializerDefineProperty(this, "autoPlay", _descriptor10, this);
      /**
       * If false will hard stop on corners, i.e., first slide won't make a transition to the
       * last slide and vice versa.
       *
       * @default true
       * @property wrap
       * @public
       * @type boolean
       */
      _initializerDefineProperty(this, "wrap", _descriptor11, this);
      /**
       * Index of starting slide.
       *
       * @default 0
       * @property index
       * @public
       * @type number
       */
      _initializerDefineProperty(this, "index", _descriptor12, this);
      /**
       * Waiting time before automatically show another slide.
       * Automatic sliding is canceled if interval is less than or equal to zero.
       *
       * @default 5000
       * @property interval
       * @public
       * @type number
       */
      _initializerDefineProperty(this, "interval", _descriptor13, this);
      /**
       * Should bind keyboard events into sliding.
       *
       * @default true
       * @property keyboard
       * @public
       * @type boolean
       */
      _initializerDefineProperty(this, "keyboard", _descriptor14, this);
      /**
       * If automatic sliding should be left-to-right or right-to-left.
       * This parameter has no effect if interval is less than or equal to zero.
       *
       * @default true
       * @property ltr
       * @public
       * @type boolean
       */
      _initializerDefineProperty(this, "ltr", _descriptor15, this);
      /**
       * The next control icon to be displayed.
       *
       * @default null
       * @property nextControlIcon
       * @type string
       * @public
       */
      /**
       * Label for screen readers, defaults to 'Next'.
       *
       * @default 'Next'
       * @property nextControlLabel
       * @type string
       * @public
       */
      _initializerDefineProperty(this, "nextControlLabel", _descriptor16, this);
      /**
       * Pauses automatic sliding if mouse cursor is hovering the component.
       * This parameter has no effect if interval is less than or equal to zero.
       *
       * @default true
       * @property pauseOnMouseEnter
       * @public
       * @type boolean
       */
      _initializerDefineProperty(this, "pauseOnMouseEnter", _descriptor17, this);
      /**
       * The previous control icon to be displayed.
       *
       * @default null
       * @property prevControlIcon
       * @type string
       * @public
       */
      /**
       * Label for screen readers, defaults to 'Previous'.
       *
       * @default 'Previous'
       * @property prevControlLabel
       * @type string
       * @public
       */
      _initializerDefineProperty(this, "prevControlLabel", _descriptor18, this);
      /**
       * Show or hide controls.
       *
       * @default true
       * @property showControls
       * @public
       * @type boolean
       */
      _initializerDefineProperty(this, "showControls", _descriptor19, this);
      /**
       * Show or hide indicators.
       *
       * @default true
       * @property showIndicators
       * @public
       * @type boolean
       */
      _initializerDefineProperty(this, "showIndicators", _descriptor20, this);
      /**
       * The duration of the slide transition.
       * You should also change this parameter in Bootstrap CSS file.
       *
       * @default 600
       * @property transitionDuration
       * @public
       * @type number
       */
      _initializerDefineProperty(this, "transitionDuration", _descriptor21, this);
      /**
       * The type slide transition to perform.
       * Options are 'fade' or 'slide'. Note: BS4 only
       *
       * @default 'slide'
       * @property transition
       * @public
       * @type string
       */
      _initializerDefineProperty(this, "transition", _descriptor22, this);
      _initializerDefineProperty(this, "carouselFade", _descriptor23, this);
      // eslint-disable-line no-unused-vars
      /**
       * Do a presentation and calls itself to perform a cycle.
       *
       * @method cycle
       * @private
       */
      _initializerDefineProperty(this, "cycle", _descriptor24, this);
      /**
       * @method transitioner
       * @private
       */
      _initializerDefineProperty(this, "transitioner", _descriptor25, this);
      /**
       * Waits an interval time to start a cycle.
       *
       * @method waitIntervalToInitCycle
       * @private
       */
      _initializerDefineProperty(this, "waitIntervalToInitCycle", _descriptor26, this);
    }
    /**
     * @property slideComponent
     * @type {String}
     * @private
     */
    /**
     * If a slide can turn to left, including corners.
     *
     * @private
     * @property canTurnToLeft
     */
    get canTurnToLeft() {
      return this.wrap || this.currentIndex > 0;
    }

    /**
     * If a slide can turn to right, including corners.
     *
     * @private
     * @property canTurnToRight
     */
    get canTurnToRight() {
      return this.wrap || this.currentIndex < this.childSlides.length - 1;
    }
    /**
     * This observer is the entry point for real time insertion and removing of slides.
     *
     * @private
     * @property childSlidesObserver
     */
    childSlidesObserver() {
      (0, _runloop.scheduleOnce)('actions', this, this._childSlidesObserver);
    }
    _childSlidesObserver() {
      let childSlides = this.childSlides;
      if (childSlides.length === 0) {
        return;
      }
      // Sets new current index
      let currentIndex = this.currentIndex;
      if (currentIndex >= childSlides.length) {
        currentIndex = childSlides.length - 1;
        this.set('currentIndex', currentIndex);
      }
      // Automatic sliding
      if (this.autoPlay) {
        this.waitIntervalToInitCycle.perform();
      }
      // Initial slide state
      this.set('presentationState', null);
    }
    /**
     * The current slide object that is going to be used by the nested slides components.
     *
     * @property currentSlide
     * @private
     *
     */
    get currentSlide() {
      return this.childSlides.objectAt(this.currentIndex);
    }
    /**
     * The following slide object that is going to be used by the nested slides components.
     *
     * @property followingIndex
     * @private
     */
    get followingSlide() {
      return this.childSlides.objectAt(this.followingIndex);
    }
    /**
     * This observer is the entry point for programmatically slide changing.
     *
     * @property indexObserver
     * @private
     */
    indexObserver() {
      this.send('toSlide', this.index);
    }

    /**
     * @property indicators
     * @private
     */
    get indicators() {
      return [...Array(this.childSlides.length)];
    }
    /**
     * Action called after the slide has changed.
     *
     * @event onSlideChanged
     * @param toIndex
     * @public
     */
    onSlideChanged(toIndex) {}
    toSlide(toIndex) {
      if (this.currentIndex === toIndex || this.shouldNotDoPresentation) {
        return;
      }
      this.assignClassNameControls(toIndex);
      this.setFollowingIndex(toIndex);
      if (this.shouldRunAutomatically === false || this.isMouseHovering) {
        this.transitioner.perform();
      } else {
        this.cycle.perform();
      }
      this.onSlideChanged(toIndex);
    }
    toNextSlide() {
      if (this.canTurnToRight) {
        this.send('toSlide', this.currentIndex + 1);
      }
    }
    toPrevSlide() {
      if (this.canTurnToLeft) {
        this.send('toSlide', this.currentIndex - 1);
      }
    }

    /**
     * Indicates what class names should be applicable to the current transition slides.
     *
     * @method assignClassNameControls
     * @private
     */
    assignClassNameControls(toIndex) {
      if (toIndex < this.currentIndex) {
        this.set('directionalClassName', 'right');
        this.set('orderClassName', 'prev');
      } else {
        this.set('directionalClassName', 'left');
        this.set('orderClassName', 'next');
      }
    }

    /**
     * Initial page loading configuration.
     */
    // eslint-disable-next-line ember/no-component-lifecycle-hooks
    didInsertElement() {
      super.didInsertElement(...arguments);
      this.triggerChildSlidesObserver();
    }
    handleMouseEnter() {
      if (this.pauseOnMouseEnter) {
        this.set('isMouseHovering', true);
        this.cycle.cancelAll();
        this.waitIntervalToInitCycle.cancelAll();
      }
    }
    handleMouseLeave() {
      if (this.pauseOnMouseEnter && (this.transitioner.last !== null || this.waitIntervalToInitCycle.last !== null)) {
        this.set('isMouseHovering', false);
        this.waitIntervalToInitCycle.perform();
      }
    }
    handleKeyDown(e) {
      let code = e.keyCode || e.which;
      if (this.keyboard === false || /input|textarea/i.test(e.target.tagName)) {
        return;
      }
      switch (code) {
        case 37:
          this.send('toPrevSlide');
          break;
        case 39:
          this.send('toNextSlide');
          break;
        default:
          break;
      }
    }

    /**
     * Sets the following slide index within the lower and upper bounds.
     *
     * @method setFollowingIndex
     * @private
     */
    setFollowingIndex(toIndex) {
      let slidesLengthMinusOne = this.childSlides.length - 1;
      if (toIndex > slidesLengthMinusOne) {
        this.set('followingIndex', 0);
      } else if (toIndex < 0) {
        this.set('followingIndex', slidesLengthMinusOne);
      } else {
        this.set('followingIndex', toIndex);
      }
    }

    /**
     * Coordinates the correct slide movement direction.
     *
     * @method toAppropriateSlide
     * @private
     */
    toAppropriateSlide() {
      if (this.ltr) {
        this.send('toNextSlide');
      } else {
        this.send('toPrevSlide');
      }
    }

    /**
     * @method triggerChildSlidesObserver
     * @private
     */
    triggerChildSlidesObserver() {
      this.childSlides;
    }
  }, (_applyDecoratedDescriptor(_class2.prototype, "canTurnToLeft", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "canTurnToLeft"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "canTurnToRight", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "canTurnToRight"), _class2.prototype), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "childSlides", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class2.prototype, "childSlidesObserver", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "childSlidesObserver"), _class2.prototype), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "currentIndex", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return this.index;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "currentSlide", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "currentSlide"), _class2.prototype), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "directionalClassName", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "followingIndex", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "followingSlide", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "followingSlide"), _class2.prototype), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "hasInterval", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class2.prototype, "indexObserver", [_dec9], Object.getOwnPropertyDescriptor(_class2.prototype, "indexObserver"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "indicators", [_dec10], Object.getOwnPropertyDescriptor(_class2.prototype, "indicators"), _class2.prototype), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "isMouseHovering", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "presentationState", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "shouldNotDoPresentation", [_dec11], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "shouldRunAutomatically", [_dec12], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "autoPlay", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "wrap", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "index", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 0;
    }
  }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "interval", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 5000;
    }
  }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "keyboard", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "ltr", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "nextControlLabel", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 'Next';
    }
  }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "pauseOnMouseEnter", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "prevControlLabel", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 'Previous';
    }
  }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "showControls", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "showIndicators", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "transitionDuration", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 600;
    }
  }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "transition", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 'slide';
    }
  }), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "carouselFade", [_dec13], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor24 = _applyDecoratedDescriptor(_class2.prototype, "cycle", [_dec14], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor25 = _applyDecoratedDescriptor(_class2.prototype, "transitioner", [_dec15], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor26 = _applyDecoratedDescriptor(_class2.prototype, "waitIntervalToInitCycle", [_dec16], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class2.prototype, "toSlide", [_object2.action], Object.getOwnPropertyDescriptor(_class2.prototype, "toSlide"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "toNextSlide", [_object2.action], Object.getOwnPropertyDescriptor(_class2.prototype, "toNextSlide"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "toPrevSlide", [_object2.action], Object.getOwnPropertyDescriptor(_class2.prototype, "toPrevSlide"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "handleMouseEnter", [_object2.action], Object.getOwnPropertyDescriptor(_class2.prototype, "handleMouseEnter"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "handleMouseLeave", [_object2.action], Object.getOwnPropertyDescriptor(_class2.prototype, "handleMouseLeave"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "handleKeyDown", [_object2.action], Object.getOwnPropertyDescriptor(_class2.prototype, "handleKeyDown"), _class2.prototype)), _class2)) || _class) || _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, Carousel);
});
;define("ember-bootstrap/components/bs-carousel/slide", ["exports", "@ember/component", "@ember-decorators/component", "@ember/object", "ember-bootstrap/mixins/component-child", "@ember/runloop", "ember-bootstrap/utils/cp/overrideable", "@ember/object/observers", "ember-bootstrap/utils/deprecate-subclassing", "ember-ref-bucket", "@ember/template-factory"], function (_exports, _component, _component2, _object, _componentChild, _runloop, _overrideable, _observers, _deprecateSubclassing, _emberRefBucket, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember-decorators/component",0,"@ember/object",0,"@ember/component",0,"ember-bootstrap/mixins/component-child",0,"@ember/runloop",0,"ember-bootstrap/utils/cp/overrideable",0,"@ember/object/observers",0,"ember-bootstrap/utils/deprecate-subclassing",0,"ember-ref-bucket",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <div
    class="carousel-item {{if this.active "active"}} {{if this.left "carousel-item-left"}} {{if this.next "carousel-item-next"}} {{if this.prev "carousel-item-prev"}} {{if this.right "carousel-item-right"}}"
    ...attributes
    {{create-ref "mainNode"}}
  >
    {{yield}}
  </div>
  */
  {
    "id": "dnjlOHD9",
    "block": "[[[11,0],[16,0,[29,[\"carousel-item \",[52,[30,0,[\"active\"]],\"active\"],\" \",[52,[30,0,[\"left\"]],\"carousel-item-left\"],\" \",[52,[30,0,[\"next\"]],\"carousel-item-next\"],\" \",[52,[30,0,[\"prev\"]],\"carousel-item-prev\"],\" \",[52,[30,0,[\"right\"]],\"carousel-item-right\"]]]],[17,1],[4,[38,1],[\"mainNode\"],[[\"debugName\",\"bucket\"],[\"create-ref\",[30,0]]]],[12],[1,\"\\n  \"],[18,2,null],[1,\"\\n\"],[13]],[\"&attrs\",\"&default\"],false,[\"if\",\"create-ref\",\"yield\"]]",
    "moduleName": "ember-bootstrap/components/bs-carousel/slide.hbs",
    "isStrictMode": false
  });

  /**
    A visible user-defined slide.
  
    See [Components.Carousel](Components.Carousel.html) for examples.
  
    @class CarouselSlide
    @namespace Components
    @extends Ember.Component
    @public
   */
  let CarouselSlide = _exports.default = (_dec = (0, _component2.tagName)(''), _dec2 = (0, _emberRefBucket.ref)('mainNode'), _dec3 = (0, _overrideable.default)('isCurrentSlide', 'presentationState', function () {
    return this.isCurrentSlide && this.presentationState === null;
  }), _dec4 = (0, _object.computed)('currentSlide').readOnly(), _dec5 = (0, _object.computed)('followingSlide').readOnly(), _dec(_class = (0, _deprecateSubclassing.default)(_class = (_class2 = class CarouselSlide extends _component.default.extend(_componentChild.default) {
    constructor(...args) {
      super(...args);
      /**
       * @property _element
       * @type null | HTMLElement
       * @private
       */
      _initializerDefineProperty(this, "_element", _descriptor, this);
      /**
       * Defines slide visibility.
       *
       * @property active
       * @type boolean
       * @private
       */
      _initializerDefineProperty(this, "active", _descriptor2, this);
      /**
       * Slide is moving to the left.
       *
       * @property left
       * @type boolean
       * @private
       */
      _defineProperty(this, "left", false);
      /**
       * Next to appear in a left sliding.
       *
       * @property next
       * @type boolean
       * @private
       */
      _defineProperty(this, "next", false);
      /**
       * Next to appear in a right sliding.
       *
       * @property prev
       * @type boolean
       * @private
       */
      _defineProperty(this, "prev", false);
      /**
       * Slide is moving to the right.
       *
       * @property right
       * @type boolean
       * @private
       */
      _defineProperty(this, "right", false);
    }
    /**
     * @private
     * @property isCurrentSlide
     * @type boolean
     */
    get isCurrentSlide() {
      return this.currentSlide === this;
    }

    /**
     * @private
     * @property isFollowingSlide
     * @type boolean
     */
    get isFollowingSlide() {
      return this.followingSlide === this;
    }
    /**
     * Coordinates the execution of a presentation.
     *
     * @method presentationStateObserver
     * @private
     */
    presentationStateObserver() {
      let presentationState = this.presentationState;
      if (this.isCurrentSlide) {
        switch (presentationState) {
          case 'didTransition':
            this.currentSlideDidTransition();
            break;
          case 'willTransit':
            this.currentSlideWillTransit();
            break;
        }
      }
      if (this.isFollowingSlide) {
        switch (presentationState) {
          case 'didTransition':
            this.followingSlideDidTransition();
            break;
          case 'willTransit':
            this.followingSlideWillTransit();
            break;
        }
      }
    }
    init() {
      super.init(...arguments);
      (0, _observers.addObserver)(this, 'presentationState', null, this.presentationStateObserver, true);
    }

    /**
     * @method currentSlideDidTransition
     * @private
     */
    currentSlideDidTransition() {
      this.set(this.directionalClassName, false);
      this.set('active', false);
    }

    /**
     * @method currentSlideWillTransit
     * @private
     */
    currentSlideWillTransit() {
      this.set('active', true);
      (0, _runloop.next)(this, function () {
        this.set(this.directionalClassName, true);
      });
    }

    /**
     * @method followingSlideDidTransition
     * @private
     */
    followingSlideDidTransition() {
      this.set('active', true);
      this.set(this.directionalClassName, false);
      this.set(this.orderClassName, false);
    }

    /**
     * @method followingSlideWillTransit
     * @private
     */
    followingSlideWillTransit() {
      this.set(this.orderClassName, true);
      (0, _runloop.next)(this, function () {
        this.reflow();
        this.set(this.directionalClassName, true);
      });
    }

    /**
     * Makes things more stable, especially when fast changing.
     */
    reflow() {
      this._element.offsetHeight;
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_element", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "active", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class2.prototype, "isCurrentSlide", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "isCurrentSlide"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "isFollowingSlide", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "isFollowingSlide"), _class2.prototype)), _class2)) || _class) || _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, CarouselSlide);
});
;define("ember-bootstrap/components/bs-collapse", ["exports", "@ember/component", "@ember/object", "@glimmer/component", "@ember/utils", "@ember/runloop", "@ember/string", "ember-bootstrap/utils/transition-end", "ember-bootstrap/utils/deprecate-subclassing", "ember-ref-bucket", "ember-bootstrap/utils/decorators/arg", "@glimmer/tracking", "@ember/template-factory"], function (_exports, _component, _object, _component2, _utils, _runloop, _string, _transitionEnd, _deprecateSubclassing, _emberRefBucket, _arg, _tracking, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/object",0,"@glimmer/component",0,"@ember/utils",0,"@ember/runloop",0,"@ember/string",0,"ember-bootstrap/utils/transition-end",0,"ember-bootstrap/utils/deprecate-subclassing",0,"ember-ref-bucket",0,"ember-bootstrap/utils/decorators/arg",0,"@glimmer/tracking",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <div
    class="{{if this.collapse "collapse"}} {{if this.transitioning "collapsing"}} {{if this.showContent "show"}}"
    ...attributes
    {{create-ref "mainNode"}}
    {{style this.cssStyle}}
    {{did-update this._onCollapsedChange this.collapsed}}
    {{did-update this._updateCollapsedSize this.collapsedSize}}
    {{did-update this._updateExpandedSize this.expandedSize}}
  >
    {{yield}}
  </div>
  
  */
  {
    "id": "MN1KqMZ/",
    "block": "[[[11,0],[16,0,[29,[[52,[30,0,[\"collapse\"]],\"collapse\"],\" \",[52,[30,0,[\"transitioning\"]],\"collapsing\"],\" \",[52,[30,0,[\"showContent\"]],\"show\"]]]],[17,1],[4,[38,1],[\"mainNode\"],[[\"debugName\",\"bucket\"],[\"create-ref\",[30,0]]]],[4,[38,2],[[30,0,[\"cssStyle\"]]],null],[4,[38,3],[[30,0,[\"_onCollapsedChange\"]],[30,0,[\"collapsed\"]]],null],[4,[38,3],[[30,0,[\"_updateCollapsedSize\"]],[30,0,[\"collapsedSize\"]]],null],[4,[38,3],[[30,0,[\"_updateExpandedSize\"]],[30,0,[\"expandedSize\"]]],null],[12],[1,\"\\n  \"],[18,2,null],[1,\"\\n\"],[13],[1,\"\\n\"]],[\"&attrs\",\"&default\"],false,[\"if\",\"create-ref\",\"style\",\"did-update\",\"yield\"]]",
    "moduleName": "ember-bootstrap/components/bs-collapse.hbs",
    "isStrictMode": false
  });

  /**
    An Ember component that mimics the behaviour of [Bootstrap's collapse.js plugin](http://getbootstrap.com/javascript/#collapse)
  
    ### Usage
  
    ```hbs
    <BsCollapse @collapsed={{this.collapsed}}>
      <div class="well">
        <h2>Collapse</h2>
        <p>This is collapsible content</p>
      </div>
    </BsCollapse>
    ```
  
    *Note that only invoking the component in a template as shown above is considered part of its public API. Extending from it (subclassing) is generally not supported, and may break at any time.*
  
    @class Collapse
    @namespace Components
    @extends Glimmer.Component
    @public
  */
  let Collapse = _exports.default = (_dec = (0, _emberRefBucket.ref)('mainNode'), (0, _deprecateSubclassing.default)(_class = (_class2 = class Collapse extends _component2.default {
    constructor(...args) {
      super(...args);
      /**
       * @property _element
       * @type null | HTMLElement
       * @private
       */
      _initializerDefineProperty(this, "_element", _descriptor, this);
      /**
       * Collapsed/expanded state
       *
       * @property collapsed
       * @type boolean
       * @default true
       * @public
       */
      _initializerDefineProperty(this, "collapsed", _descriptor2, this);
      /**
       * True if this item is expanded
       *
       * @property active
       * @private
       */
      _defineProperty(this, "active", !this.collapsed);
      /**
       * true if the component is currently transitioning
       *
       * @property transitioning
       * @type boolean
       * @private
       */
      _initializerDefineProperty(this, "transitioning", _descriptor3, this);
      /**
       * The size of the element when collapsed. Defaults to 0.
       *
       * @property collapsedSize
       * @type number
       * @default 0
       * @public
       */
      _initializerDefineProperty(this, "collapsedSize", _descriptor4, this);
      /**
       * The size of the element when expanded. When null the value is calculated automatically to fit the containing elements.
       *
       * @property expandedSize
       * @type number
       * @default null
       * @public
       */
      _initializerDefineProperty(this, "expandedSize", _descriptor5, this);
      /**
       * Usually the size (height) of the element is only set while transitioning, and reseted afterwards. Set to true to always set a size.
       *
       * @property resetSizeWhenNotCollapsing
       * @type boolean
       * @default true
       * @private
       */
      _defineProperty(this, "resetSizeWhenNotCollapsing", true);
      /**
       * The direction (height/width) of the collapse animation.
       * When setting this to 'width' you should also define custom CSS transitions for the width property, as the Bootstrap
       * CSS does only support collapsible elements for the height direction.
       *
       * @property collapseDimension
       * @type string
       * @default 'height'
       * @public
       */
      _initializerDefineProperty(this, "collapseDimension", _descriptor6, this);
      /**
       * The duration of the fade transition
       *
       * @property transitionDuration
       * @type number
       * @default 350
       * @public
       */
      _initializerDefineProperty(this, "transitionDuration", _descriptor7, this);
      _initializerDefineProperty(this, "collapseSize", _descriptor8, this);
    }
    get collapse() {
      return !this.transitioning;
    }
    get showContent() {
      return this.collapse && this.active;
    }
    /**
     * Calculates a hash for style attribute.
     */
    get cssStyle() {
      if ((0, _utils.isNone)(this.collapseSize)) {
        return {};
      }
      return {
        [this.collapseDimension]: `${this.collapseSize}px`
      };
    }
    /**
     * The action to be sent when the element is about to be hidden.
     *
     * @event onHide
     * @public
     */

    /**
     * The action to be sent after the element has been completely hidden (including the CSS transition).
     *
     * @event onHidden
     * @public
     */

    /**
     * The action to be sent when the element is about to be shown.
     *
     * @event onShow
     * @public
     */

    /**
     * The action to be sent after the element has been completely shown (including the CSS transition).
     *
     * @event onShown
     * @public
     */
    /**
     * Triggers the show transition
     *
     * @method show
     * @protected
     */
    show() {
      this.args.onShow?.();
      this.transitioning = true;
      this.active = true;
      this.collapseSize = this.collapsedSize;
      (0, _transitionEnd.default)(this._element, this.transitionDuration).then(() => {
        if (this.isDestroyed) {
          return;
        }
        this.transitioning = false;
        if (this.resetSizeWhenNotCollapsing) {
          this.collapseSize = null;
        }
        this.args.onShown?.();
      });
      (0, _runloop.next)(this, function () {
        if (!this.isDestroyed) {
          this.collapseSize = this.getExpandedSize('show');
        }
      });
    }

    /**
     * Get the size of the element when expanded
     *
     * @method getExpandedSize
     * @param action
     * @return {Number}
     * @private
     */
    getExpandedSize(action) {
      let expandedSize = this.expandedSize;
      if (expandedSize != null) {
        return expandedSize;
      }
      let collapseElement = this._element;
      let prefix = action === 'show' ? 'scroll' : 'offset';
      let measureProperty = (0, _string.camelize)(`${prefix}-${this.collapseDimension}`);
      return collapseElement[measureProperty];
    }

    /**
     * Triggers the hide transition
     *
     * @method hide
     * @protected
     */
    hide() {
      this.args.onHide?.();
      this.transitioning = true;
      this.active = false;
      this.collapseSize = this.getExpandedSize('hide');
      (0, _transitionEnd.default)(this._element, this.transitionDuration).then(() => {
        if (this.isDestroyed) {
          return;
        }
        this.transitioning = false;
        if (this.resetSizeWhenNotCollapsing) {
          this.collapseSize = null;
        }
        this.args.onHidden?.();
      });
      (0, _runloop.next)(this, function () {
        if (!this.isDestroyed) {
          this.collapseSize = this.collapsedSize;
        }
      });
    }
    _onCollapsedChange() {
      let collapsed = this.collapsed;
      let active = this.active;
      if (collapsed !== active) {
        return;
      }
      if (collapsed === false) {
        this.show();
      } else {
        this.hide();
      }
    }
    _updateCollapsedSize() {
      if (!this.resetSizeWhenNotCollapsing && this.collapsed && !this.collapsing) {
        this.collapseSize = this.collapsedSize;
      }
    }
    _updateExpandedSize() {
      if (!this.resetSizeWhenNotCollapsing && !this.collapsed && !this.collapsing) {
        this.collapseSize = this.expandedSize;
      }
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_element", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "collapsed", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "transitioning", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "collapsedSize", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 0;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "expandedSize", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "collapseDimension", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 'height';
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "transitionDuration", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 350;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "collapseSize", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "_onCollapsedChange", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "_onCollapsedChange"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "_updateCollapsedSize", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "_updateCollapsedSize"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "_updateExpandedSize", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "_updateExpandedSize"), _class2.prototype)), _class2)) || _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, Collapse);
});
;define("ember-bootstrap/components/bs-contextual-help", ["exports", "@glimmer/component", "@ember/array", "@ember/object", "@ember/runloop", "ember-bootstrap/utils/transition-end", "ember-bootstrap/utils/dom", "ember-bootstrap/utils/decorators/uses-transition", "@ember/debug", "ember", "ember-bootstrap/utils/decorators/arg", "@glimmer/tracking", "ember-ref-bucket"], function (_exports, _component, _array, _object, _runloop, _transitionEnd, _dom, _usesTransition, _debug, _ember, _arg, _tracking, _emberRefBucket) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _dec2, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16;
  0; //eaimeta@70e063a35619d71f0,"@glimmer/component",0,"@ember/array",0,"@ember/object",0,"@ember/runloop",0,"ember-bootstrap/utils/transition-end",0,"ember-bootstrap/utils/dom",0,"ember-bootstrap/utils/decorators/uses-transition",0,"@ember/debug",0,"ember",0,"ember-bootstrap/utils/decorators/arg",0,"@glimmer/tracking",0,"ember-ref-bucket"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const HOVERSTATE_NONE = 'none';
  const HOVERSTATE_IN = 'in';
  const HOVERSTATE_OUT = 'out';
  function noop() {}

  /**
    @class ContextualHelp
    @namespace Components
    @extends Glimmer.Component
    @private
  */
  let ContextualHelp = _exports.default = (_dec = (0, _usesTransition.default)('fade'), _dec2 = (0, _emberRefBucket.ref)('overlayElement'), (_class = class ContextualHelp extends _component.default {
    constructor(...args) {
      super(...args);
      /**
       * @property title
       * @type string
       * @public
       */
      /**
       * How to position the tooltip/popover - top | bottom | left | right
       *
       * @property title
       * @type string
       * @default 'top'
       * @public
       */
      _initializerDefineProperty(this, "placement", _descriptor, this);
      /**
       * By default it will dynamically reorient the tooltip/popover based on the available space in the viewport. For
       * example, if `placement` is "left", the tooltip/popover will display to the left when possible, otherwise it will
       * display right. Set to `false` to force placement according to the `placement` property
       *
       * @property autoPlacement
       * @type boolean
       * @default true
       * @public
       */
      _initializerDefineProperty(this, "autoPlacement", _descriptor2, this);
      /**
       * You can programmatically show the tooltip/popover by setting this to `true`
       *
       * @property visible
       * @type boolean
       * @default false
       * @public
       */
      _initializerDefineProperty(this, "visible", _descriptor3, this);
      /**
       * @property inDom
       * @type boolean
       * @private
       */
      _initializerDefineProperty(this, "_inDom", _descriptor4, this);
      /**
       * Set to false to disable fade animations.
       *
       * @property fade
       * @type boolean
       * @default true
       * @public
       */
      _initializerDefineProperty(this, "fade", _descriptor5, this);
      /**
       * Used to apply Bootstrap's visibility class
       *
       * @property showHelp
       * @type boolean
       * @default false
       * @private
       */
      _initializerDefineProperty(this, "showHelp", _descriptor6, this);
      /**
       * Delay showing and hiding the tooltip/popover (ms). Individual delays for showing and hiding can be specified by using the
       * `delayShow` and `delayHide` properties.
       *
       * @property delay
       * @type number
       * @default 0
       * @public
       */
      _initializerDefineProperty(this, "delay", _descriptor7, this);
      /**
       * Delay showing the tooltip/popover. This property overrides the general delay set with the `delay` property.
       *
       * @property delayShow
       * @type number
       * @default 0
       * @public
       */
      _initializerDefineProperty(this, "delayShow", _descriptor8, this);
      /**
       * Delay hiding the tooltip/popover. This property overrides the general delay set with the `delay` property.
       *
       * @property delayHide
       * @type number
       * @default 0
       * @public
       */
      _initializerDefineProperty(this, "delayHide", _descriptor9, this);
      /**
       * The duration of the fade transition
       *
       * @property transitionDuration
       * @type number
       * @default 150
       * @public
       */
      _initializerDefineProperty(this, "transitionDuration", _descriptor10, this);
      /**
       * Keeps the tooltip/popover within the bounds of this element when `autoPlacement` is true. Can be any valid CSS selector.
       *
       * @property viewportSelector
       * @type string
       * @default 'body'
       * @see viewportPadding
       * @see autoPlacement
       * @public
       */
      _initializerDefineProperty(this, "viewportSelector", _descriptor11, this);
      /**
       * Take a padding into account for keeping the tooltip/popover within the bounds of the element given by `viewportSelector`.
       *
       * @property viewportPadding
       * @type number
       * @default 0
       * @see viewportSelector
       * @see autoPlacement
       * @public
       */
      _initializerDefineProperty(this, "viewportPadding", _descriptor12, this);
      _defineProperty(this, "_parentFinder", self.document ? self.document.createTextNode('') : '');
      /**
       * The DOM element that triggers the tooltip/popover. By default it is the parent element of this component.
       * You can set this to any CSS selector to have any other element trigger the tooltip/popover.
       *
       * @property triggerElement
       * @type string | null
       * @public
       */
      _initializerDefineProperty(this, "triggerElement", _descriptor13, this);
      /**
       * The event(s) that should trigger the tooltip/popover - click | hover | focus.
       * You can set this to a single event or multiple events, given as an array or a string separated by spaces.
       *
       * @property triggerEvents
       * @type array|string
       * @default 'hover focus'
       * @public
       */
      _initializerDefineProperty(this, "triggerEvents", _descriptor14, this);
      /**
       * Current hover state, 'in', 'out' or null
       *
       * @property hoverState
       * @type number
       * @private
       */
      _defineProperty(this, "hoverState", HOVERSTATE_NONE);
      /**
       * Current state for events
       */
      _defineProperty(this, "hover", false);
      _defineProperty(this, "focus", false);
      _defineProperty(this, "click", false);
      /**
       * Ember.run timer
       *
       * @property timer
       * @private
       */
      _defineProperty(this, "timer", null);
      /**
       * Use CSS transitions?
       *
       * @property usesTransition
       * @type boolean
       * @readonly
       * @private
       */
      _initializerDefineProperty(this, "usesTransition", _descriptor15, this);
      /**
       * The DOM element of the overlay element.
       *
       * @property overlayElement
       * @type object
       * @readonly
       * @private
       */
      _initializerDefineProperty(this, "overlayElement", _descriptor16, this);
    }
    get inDom() {
      return this._inDom ?? !!(this.visible && this.triggerTargetElement);
    }
    set inDom(value) {
      if (this._inDom === value) {
        return;
      }
      this._inDom = value;
    }
    /**
     * The DOM element of the arrow element.
     *
     * @property arrowElement
     * @type object
     * @readonly
     * @private
     */
    /**
     * The wormhole destinationElement
     *
     * @property destinationElement
     * @type object
     * @readonly
     * @private
     */
    get destinationElement() {
      return (0, _dom.getDestinationElement)(this);
    }

    /**
     * The DOM element of the viewport element.
     *
     * @property viewportElement
     * @type object
     * @readonly
     * @private
     */
    get viewportElement() {
      return document.querySelector(this.viewportSelector);
    }
    /**
     * @method getTriggerTargetElement
     * @private
     */
    getTriggerTargetElement() {
      let triggerElement = this.triggerElement;
      let el;
      if (!triggerElement) {
        el = this._parent;
      } else {
        el = document.querySelector(triggerElement);
      }
      (true && !(el) && (0, _debug.assert)('Could not find trigger element for tooltip/popover component', el));
      return el;
    }
    get _triggerEvents() {
      let events = this.triggerEvents;
      if (!(0, _array.isArray)(events)) {
        events = events.split(' ');
      }
      return events.map(event => {
        switch (event) {
          case 'hover':
            return ['mouseenter', 'mouseleave'];
          case 'focus':
            return ['focusin', 'focusout'];
          default:
            return event;
        }
      });
    }

    /**
     * If true component will render in place, rather than be wormholed.
     *
     * @property renderInPlace
     * @type boolean
     * @default false
     * @public
     */

    /**
     * @property _renderInPlace
     * @type boolean
     * @private
     */
    get _renderInPlace() {
      return this.args.renderInPlace || !this.destinationElement;
    }
    get shouldShowHelp() {
      return this.hover || this.focus || this.click;
    }
    /**
     * This action is called immediately when the tooltip/popover is about to be shown.
     *
     * @event onShow
     * @public
     */

    /**
     * This action will be called when the tooltip/popover has been made visible to the user (will wait for CSS transitions to complete).
     *
     * @event onShown
     * @public
     */

    /**
     * This action is called immediately when the tooltip/popover is about to be hidden.
     *
     * @event onHide
     * @public
     */

    /**
     * This action is called when the tooltip/popover has finished being hidden from the user (will wait for CSS transitions to complete).
     *
     * @event onHidden
     * @public
     */
    /**
     * Called when a show event has been received
     *
     * @method enter
     * @param e
     * @private
     */
    enter(e) {
      if (e) {
        let eventType = e.type === 'focusin' ? 'focus' : 'hover';
        this[eventType] = true;
      }
      if (this.showHelp || this.hoverState === HOVERSTATE_IN) {
        this.hoverState = HOVERSTATE_IN;
        return;
      }
      (0, _runloop.cancel)(this.timer);
      this.hoverState = HOVERSTATE_IN;
      if (!this.delayShow) {
        return this.show();
      }
      this.timer = (0, _runloop.later)(this, function () {
        if (this.hoverState === HOVERSTATE_IN) {
          this.show();
        }
      }, this.delayShow);
    }

    /**
     * Called when a hide event has been received
     *
     * @method leave
     * @param e
     * @private
     */
    leave(e) {
      if (e) {
        let eventType = e.type === 'focusout' ? 'focus' : 'hover';
        this[eventType] = false;
      }
      if (this.shouldShowHelp) {
        return;
      }
      (0, _runloop.cancel)(this.timer);
      this.hoverState = HOVERSTATE_OUT;
      if (!this.delayHide) {
        return this.hide();
      }
      this.timer = (0, _runloop.later)(() => {
        if (this.hoverState === HOVERSTATE_OUT) {
          this.hide();
        }
      }, this.delayHide);
    }

    /**
     * Called for a click event
     *
     * @method toggle
     * @private
     */
    toggle() {
      this.click = !this.click;
      if (this.shouldShowHelp) {
        this.enter();
      } else {
        this.leave();
      }
    }

    /**
     * Show the tooltip/popover
     *
     * @method show
     * @private
     */
    show() {
      if (this.isDestroyed || this.isDestroying) {
        return;
      }
      if (false === this.args.onShow?.(this)) {
        return;
      }
      this.inDom = true;
      (0, _runloop.schedule)('afterRender', this, this._show);
    }
    _show(skipTransition = false) {
      if (this.isDestroyed || this.isDestroying) {
        return;
      }
      this.showHelp = true;

      // If this is a touch-enabled device we add extra
      // empty mouseover listeners to the body's immediate children;
      // only needed because of broken event delegation on iOS
      // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html

      // See https://github.com/twbs/bootstrap/pull/22481
      if ('ontouchstart' in document.documentElement) {
        let {
          children
        } = document.body;
        for (let i = 0; i < children.length; i++) {
          children[i].addEventListener('mouseover', noop);
        }
      }
      let tooltipShowComplete = () => {
        if (this.isDestroyed) {
          return;
        }
        let prevHoverState = this.hoverState;
        this.args.onShown?.(this);
        this.hoverState = HOVERSTATE_NONE;
        if (prevHoverState === HOVERSTATE_OUT) {
          this.leave();
        }
      };
      if (skipTransition === false && this.usesTransition) {
        (0, _transitionEnd.default)(this.overlayElement, this.transitionDuration).then(tooltipShowComplete);
      } else {
        tooltipShowComplete();
      }
    }

    /**
     * Position the tooltip/popover's arrow
     *
     * @method replaceArrow
     * @param delta
     * @param dimension
     * @param isVertical
     * @private
     */
    replaceArrow(delta, dimension, isVertical) {
      let el = this.arrowElement;
      el.style[isVertical ? 'left' : 'top'] = `${50 * (1 - delta / dimension)}%`;
      el.style[isVertical ? 'top' : 'left'] = null;
    }

    /**
     * Hide the tooltip/popover
     *
     * @method hide
     * @private
     */
    hide() {
      if (this.isDestroyed) {
        return;
      }
      if (false === this.args.onHide?.(this)) {
        return;
      }
      let tooltipHideComplete = () => {
        if (this.isDestroyed) {
          return;
        }
        if (this.hoverState !== HOVERSTATE_IN) {
          this.inDom = false;
        }
        this.args.onHidden?.(this);
      };
      this.showHelp = false;

      // if this is a touch-enabled device we remove the extra
      // empty mouseover listeners we added for iOS support
      if ('ontouchstart' in document.documentElement) {
        let {
          children
        } = document.body;
        for (let i = 0; i < children.length; i++) {
          children[i].removeEventListener('mouseover', noop);
        }
      }
      if (this.usesTransition) {
        (0, _transitionEnd.default)(this.overlayElement, this.transitionDuration).then(tooltipHideComplete);
      } else {
        tooltipHideComplete();
      }
      this.hoverState = HOVERSTATE_NONE;
    }

    /**
     * @method addListeners
     * @private
     */
    addListeners() {
      let target = this.triggerTargetElement;
      this._triggerEvents.forEach(event => {
        if ((0, _array.isArray)(event)) {
          let [inEvent, outEvent] = event;
          target.addEventListener(inEvent, this._handleEnter);
          target.addEventListener(outEvent, this._handleLeave);
        } else {
          target.addEventListener(event, this._handleToggle);
        }
      });
    }

    /**
     * @method removeListeners
     * @private
     */
    removeListeners() {
      try {
        let target = this.triggerTargetElement;
        this._triggerEvents.forEach(event => {
          if ((0, _array.isArray)(event)) {
            let [inEvent, outEvent] = event;
            target.removeEventListener(inEvent, this._handleEnter);
            target.removeEventListener(outEvent, this._handleLeave);
          } else {
            target.removeEventListener(event, this._handleToggle);
          }
        });
      } catch (e) {} // eslint-disable-line no-empty
    }

    /**
     * @method handleTriggerEvent
     * @private
     */
    handleTriggerEvent(handler, e) {
      let overlayElement = this.overlayElement;
      if (overlayElement && overlayElement.contains(e.target)) {
        return;
      }
      return handler.call(this, e);
    }
    _handleEnter(e) {
      this.handleTriggerEvent(this.enter, e);
    }
    _handleLeave(e) {
      this.handleTriggerEvent(this.leave, e);
    }
    _handleToggle(e) {
      this.handleTriggerEvent(this.toggle, e);
    }
    close() {
      // Make sure our click state is off, otherwise the next click would
      // close the already-closed tooltip/popover. We don't need to worry
      // about this for hover/focus because those aren't "stateful" toggle
      // events like click.
      this.click = false;
      this.hide();
    }
    setup() {
      if (typeof FastBoot !== 'undefined') {
        // ember-render-helpers calls this also in FastBoot, so guard against this
        return;
      }
      let parent = this._parentFinder.parentNode;
      // In the rare case of using FastBoot w/ rehydration, the parent finder TextNode rendered by FastBoot will be reused,
      // so our own instance on the component is not rendered, only exists here as detached from DOM and thus has no parent.
      // In this case we try to use Ember's private API as a fallback.
      // Related: https://github.com/emberjs/rfcs/issues/168
      if (!parent) {
        try {
          parent = _ember.default.ViewUtils.getViewBounds(this).parentElement;
        } catch (e) {
          // we catch the possibly broken private API call, the component can still work if the trigger element is defined
          // using a CSS selector.
        }
      }
      this._parent = parent;

      // Look for target element after rendering has finished, in case the target DOM element is rendered *after* us
      // see https://github.com/kaliber5/ember-bootstrap/issues/1329
      (0, _runloop.schedule)('afterRender', () => {
        this.triggerTargetElement = this.getTriggerTargetElement();
        this.addListeners();
        if (this.visible) {
          (0, _runloop.next)(this, this.show);
        }
      });
    }
    showOrHide() {
      if (this.args.visible) {
        (0, _runloop.next)(this, this.show);
      } else {
        (0, _runloop.next)(this, this.hide);
      }
    }
    willDestroy() {
      super.willDestroy(...arguments);
      this.removeListeners();
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "placement", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 'top';
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "autoPlacement", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "visible", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "_inDom", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "fade", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "showHelp", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return this.visible;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "delay", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 0;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "delayShow", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return this.args.delay ?? 0;
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, "delayHide", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return this.args.delay ?? 0;
    }
  }), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, "transitionDuration", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 150;
    }
  }), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, "viewportSelector", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 'body';
    }
  }), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, "viewportPadding", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 0;
    }
  }), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, "triggerElement", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor14 = _applyDecoratedDescriptor(_class.prototype, "triggerEvents", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 'hover focus';
    }
  }), _descriptor15 = _applyDecoratedDescriptor(_class.prototype, "usesTransition", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor16 = _applyDecoratedDescriptor(_class.prototype, "overlayElement", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "_handleEnter", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "_handleEnter"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_handleLeave", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "_handleLeave"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_handleToggle", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "_handleToggle"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "close", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "close"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setup", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "setup"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "showOrHide", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "showOrHide"), _class.prototype)), _class));
});
;define("ember-bootstrap/components/bs-contextual-help/element", ["exports", "@ember/object", "@glimmer/component", "ember-bootstrap/utils/decorators/arg", "@glimmer/tracking", "ember-ref-bucket", "@embroider/macros/runtime"], function (_exports, _object, _component, _arg, _tracking, _emberRefBucket, _runtime) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;
  /**
   Internal (abstract) component for contextual help markup. Should not be used directly.
  
   @class ContextualHelpElement
   @namespace Components
   @extends Glimmer.Component
   @private
   */
  0; //eaimeta@70e063a35619d71f0,"@ember/object",0,"@glimmer/component",0,"ember-bootstrap/utils/decorators/arg",0,"@glimmer/tracking",0,"@embroider/macros",0,"ember-ref-bucket"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ContextualHelpElement = _exports.default = (_dec = (0, _emberRefBucket.trackedRef)('popperElement'), (_class = class ContextualHelpElement extends _component.default {
    constructor(...args) {
      super(...args);
      /**
       * @property placement
       * @type string
       * @default 'top'
       * @public
       */
      _initializerDefineProperty(this, "placement", _descriptor, this);
      _initializerDefineProperty(this, "actualPlacement", _descriptor2, this);
      /**
       * @property fade
       * @type boolean
       * @default true
       * @public
       */
      _initializerDefineProperty(this, "fade", _descriptor3, this);
      /**
       * @property showHelp
       * @type boolean
       * @default false
       * @public
       */
      _initializerDefineProperty(this, "showHelp", _descriptor4, this);
      /**
       * If true component will render in place, rather than be wormholed.
       *
       * @property renderInPlace
       * @type boolean
       * @default true
       * @public
       */
      /**
       * Which element to align to
       *
       * @property popperTarget
       * @type {string|HTMLElement}
       * @public
       */
      /**
       * @property autoPlacement
       * @type boolean
       * @default true
       * @public
       */
      /**
       * The DOM element of the viewport element.
       *
       * @property viewportElement
       * @type object
       * @public
       */
      /**
       * Take a padding into account for keeping the tooltip/popover within the bounds of the element given by `viewportElement`.
       *
       * @property viewportPadding
       * @type number
       * @default 0
       * @public
       */
      /**
       * @property arrowClass
       * @private
       */
      _defineProperty(this, "arrowClass", 'arrow');
      _defineProperty(this, "placementClassPrefix", '');
      _defineProperty(this, "offset", [0, 0]);
      _initializerDefineProperty(this, "popperElement", _descriptor5, this);
    }
    /**
     * popper.js modifier config
     *
     * @property popperModifiers
     * @type {object}
     * @private
     */
    get popperOptions() {
      let options = {
        placement: this.placement,
        onFirstUpdate: this.updatePlacement
      };

      // We need popperElement, so we wait for this getter to recompute once it's available
      if (!this.popperElement) {
        return options;
      }
      options.modifiers = [{
        name: 'arrow',
        options: {
          element: this.popperElement.querySelector(`.${this.arrowClass}`),
          padding: 4
        }
      }, {
        name: 'offset',
        options: {
          offset: this.offset
        }
      }, {
        name: 'preventOverflow',
        enabled: this.args.autoPlacement,
        options: {
          boundary: this.args.viewportElement,
          padding: this.args.viewportPadding
        }
      }, {
        name: 'flip',
        enabled: this.args.autoPlacement
      }, {
        name: 'onChange',
        enabled: true,
        phase: 'afterWrite',
        fn: this.updatePlacement
      }];
      return options;
    }
    get actualPlacementClass() {
      let ending = this.actualPlacement;
      if ((0, _runtime.macroCondition)((0, _runtime.config)("/home/ec2-user/coup/client/node_modules/ember-bootstrap").isBS5)) {
        if (ending === 'right') {
          ending = 'end';
        }
        if (ending === 'left') {
          ending = 'start';
        }
      }
      return this.placementClassPrefix + ending;
    }
    updatePlacement(state) {
      // normalize argument
      state = state.state ?? state;
      if (this.actualPlacement === state.placement) {
        return;
      }
      this.actualPlacement = state.placement;
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "placement", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 'top';
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "actualPlacement", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return this.args.placement;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "fade", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "showHelp", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "popperElement", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "updatePlacement", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "updatePlacement"), _class.prototype)), _class));
});
;define("ember-bootstrap/components/bs-dropdown", ["exports", "@ember/component", "@ember-decorators/component", "@ember/object", "ember-bootstrap/utils/default-decorator", "@ember/debug", "ember-bootstrap/utils/deprecate-subclassing", "@ember/template-factory"], function (_exports, _component, _component2, _object, _defaultDecorator, _debug, _deprecateSubclassing, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _dec2, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember-decorators/component",0,"@ember/object",0,"@ember/component",0,"ember-bootstrap/utils/default-decorator",0,"@ember/debug",0,"ember-bootstrap/utils/deprecate-subclassing",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    {{#let (element this.htmlTag) as |Tag|}}
    <Tag class="{{this.containerClass}} {{if this.inNav "nav-item"}} {{if this.isOpen "show"}}" ...attributes>
      {{yield
        (hash
          button=(component (ensure-safe-component (bs-default @buttonComponent (component "bs-dropdown/button")))
            isOpen=this.isOpen
            onClick=this.toggleDropdown
            onKeyDown=this.handleKeyEvent
            registerChildElement=this.registerChildElement
            unregisterChildElement=this.unregisterChildElement
          )
          toggle=(component (ensure-safe-component (bs-default @toggleComponent (component "bs-dropdown/toggle")))
            isOpen=this.isOpen
            inNav=@inNav
            onClick=this.toggleDropdown
            onKeyDown=this.handleKeyEvent
            registerChildElement=this.registerChildElement
            unregisterChildElement=this.unregisterChildElement
          )
          menu=(component (ensure-safe-component (bs-default @menuComponent (component "bs-dropdown/menu")))
            isOpen=this.isOpen
            direction=this.direction
            toggleElement=this.toggleElement
            registerChildElement=this.registerChildElement
            unregisterChildElement=this.unregisterChildElement
          )
          toggleDropdown=this.toggleDropdown
          openDropdown=this.openDropdown
          closeDropdown=this.closeDropdown
          isOpen=this.isOpen
        )
      }}
      {{#if this.isOpen}}
        {{on-document "keydown" this.handleKeyEvent}}
        {{on-document "click" this.closeHandler capture=true}}
        {{on-document "keyup" this.closeHandler}}
      {{/if}}
  
    </Tag>
  {{/let}}
  */
  {
    "id": "dHYJTKSi",
    "block": "[[[44,[[28,[37,1],[[30,0,[\"htmlTag\"]]],null]],[[[1,\"  \"],[8,[30,1],[[16,0,[29,[[30,0,[\"containerClass\"]],\" \",[52,[30,0,[\"inNav\"]],\"nav-item\"],\" \",[52,[30,0,[\"isOpen\"]],\"show\"]]]],[17,2]],null,[[\"default\"],[[[[1,\"\\n    \"],[18,7,[[28,[37,4],null,[[\"button\",\"toggle\",\"menu\",\"toggleDropdown\",\"openDropdown\",\"closeDropdown\",\"isOpen\"],[[50,[28,[37,6],[[28,[37,7],[[30,3],[50,\"bs-dropdown/button\",0,null,null]],null]],null],0,null,[[\"isOpen\",\"onClick\",\"onKeyDown\",\"registerChildElement\",\"unregisterChildElement\"],[[30,0,[\"isOpen\"]],[30,0,[\"toggleDropdown\"]],[30,0,[\"handleKeyEvent\"]],[30,0,[\"registerChildElement\"]],[30,0,[\"unregisterChildElement\"]]]]],[50,[28,[37,6],[[28,[37,7],[[30,4],[50,\"bs-dropdown/toggle\",0,null,null]],null]],null],0,null,[[\"isOpen\",\"inNav\",\"onClick\",\"onKeyDown\",\"registerChildElement\",\"unregisterChildElement\"],[[30,0,[\"isOpen\"]],[30,5],[30,0,[\"toggleDropdown\"]],[30,0,[\"handleKeyEvent\"]],[30,0,[\"registerChildElement\"]],[30,0,[\"unregisterChildElement\"]]]]],[50,[28,[37,6],[[28,[37,7],[[30,6],[50,\"bs-dropdown/menu\",0,null,null]],null]],null],0,null,[[\"isOpen\",\"direction\",\"toggleElement\",\"registerChildElement\",\"unregisterChildElement\"],[[30,0,[\"isOpen\"]],[30,0,[\"direction\"]],[30,0,[\"toggleElement\"]],[30,0,[\"registerChildElement\"]],[30,0,[\"unregisterChildElement\"]]]]],[30,0,[\"toggleDropdown\"]],[30,0,[\"openDropdown\"]],[30,0,[\"closeDropdown\"]],[30,0,[\"isOpen\"]]]]]]],[1,\"\\n\"],[41,[30,0,[\"isOpen\"]],[[[1,\"      \"],[1,[28,[35,8],[\"keydown\",[30,0,[\"handleKeyEvent\"]]],null]],[1,\"\\n      \"],[1,[28,[35,8],[\"click\",[30,0,[\"closeHandler\"]]],[[\"capture\"],[true]]]],[1,\"\\n      \"],[1,[28,[35,8],[\"keyup\",[30,0,[\"closeHandler\"]]],null]],[1,\"\\n\"]],[]],null],[1,\"\\n  \"]],[]]]]],[1,\"\\n\"]],[1]]]],[\"Tag\",\"&attrs\",\"@buttonComponent\",\"@toggleComponent\",\"@inNav\",\"@menuComponent\",\"&default\"],false,[\"let\",\"element\",\"if\",\"yield\",\"hash\",\"component\",\"ensure-safe-component\",\"bs-default\",\"on-document\"]]",
    "moduleName": "ember-bootstrap/components/bs-dropdown.hbs",
    "isStrictMode": false
  });
  const ESCAPE_KEYCODE = 27; // KeyboardEvent.which value for Escape (Esc) key
  const SPACE_KEYCODE = 32; // KeyboardEvent.which value for space key
  const TAB_KEYCODE = 9; // KeyboardEvent.which value for tab key
  const ARROW_UP_KEYCODE = 38; // KeyboardEvent.which value for up arrow key
  const ARROW_DOWN_KEYCODE = 40; // KeyboardEvent.which value for down arrow key

  const SUPPORTED_KEYCODES = [ESCAPE_KEYCODE, ARROW_DOWN_KEYCODE, ARROW_UP_KEYCODE];

  /**
    Bootstrap style [dropdown menus](http://getbootstrap.com/components/#dropdowns), consisting
    of a toggle element, and the dropdown menu itself.
  
    ### Usage
  
    Use this component together with the yielded contextual components:
    * [Components.DropdownToggle](Components.DropdownToggle.html)
    * [Components.DropdownButton](Components.DropdownButton.html)
    * [Components.DropdownMenu](Components.DropdownMenu.html)
      * [Components.DropdownMenuItem](Components.DropdownMenuItem.html)
      * [Components.DropdownMenuDivider](Components.DropdownMenuDivider.html)
      * [Components.DropdownMenuLinkTo](Components.DropdownMenuLinkTo.html)
  
    Furthermore references to the following actions are yielded:
  
    * `toggleDropdown`
    * `openDropdown`
    * `closeDropdown`
  
    ```hbs
    <BsDropdown as |dd|>
      <dd.toggle>Dropdown <span class="caret"></span></dd.toggle>
      <dd.menu as |ddm|>
        <ddm.item>
          <ddm.linkTo @route="index">Something</ddm.linkTo>
        </ddm.item>
        <ddm.item>
          <ddm.linkTo @route="index">Something different</ddm.linkTo>
        </ddm.item>
      </dd.menu>
    </BsDropdown>
    ```
  
    If you need to use dropdowns in a [nav](Components.Nav.html), use the `bs-nav.dropdown`
    contextual component rather than a standalone dropdown to ensure the correct styling
    regardless of your Bootstrap version.
  
    > Note: the use of angle brackets `<ddm.linkTo>` as shown above is only supported for Ember >= 3.10, as it relies on its
    > Ember's native implementation of the [`LinkComponent`](https://api.emberjs.com/ember/3.12/classes/Ember.Templates.helpers/methods/link-to?anchor=link-to).
    > For older Ember versions please use the legacy syntax with positional arguments:
    > `{{#ddm.link-to "bar" this.model}}Bar{{/ddm.link-to}}`
  
    ### Button dropdowns
  
    To use a button as the dropdown toggle element (see http://getbootstrap.com/components/#btn-dropdowns), use the
    `Components.DropdownButton` component as the toggle:
  
    ```hbs
    <BsDropdown as |dd|>
      <dd.button>Dropdown <span class="caret"></span></dd.button>
      <dd.menu as |ddm|>
        <ddm.item>
          <ddm.linkTo @route="index">Something</ddm.linkTo>
        </ddm.item>
        <ddm.item>
          <ddm.linkTo @route="index">Something different</ddm.linkTo>
        </ddm.item>
      </dd.menu>
    </BsDropdown>
    ```
  
    It has all the functionality of a `Components.Button` with additional dropdown support.
  
    ### Split button dropdowns
  
    To have a regular button with a dropdown button as in http://getbootstrap.com/components/#btn-dropdowns-split, use a
    `Components.Button` component and a `Components.DropdownButton`:
  
    ```hbs
    <BsDropdown as |dd|>
      <BsButton>Dropdown</BsButton>
      <dd.button>Dropdown <span class="caret"></span></dd.button>
      <dd.menu as |ddm|>
        <ddm.item>
          <ddm.linkTo @route="index">Something</ddm.linkTo>
        </ddm.item>
        <ddm.item>
          <ddm.linkTo @route="index">Something different</ddm.linkTo>
        </ddm.item>
      </dd.menu>
    </BsDropdown>
    ```
  
    ### Dropup style
  
    Set the `direction` property to "up" to switch to a "dropup" style:
  
    ```hbs
    <BsDropdown @direction="up" as |dd|>
      ...
    </BsDropdown>
    ```
  
    ### Open, close or toggle the dropdown programmatically
  
    If you wanted to control when the dropdown opens and closes programmatically, the `bs-dropdown` component yields the
    `openDropdown`, `closeDropdown` and `toggleDropdown` actions which you can then pass to your own handlers. For example:
  
    ```hbs
    <BsDropdown @closeOnMenuClick={{false}} as |dd|>
      <BsButton>Dropdown</BsButton>
      <dd.button>Dropdown <span class="caret"></span></dd.button>
      <dd.menu as |ddm|>
        {{#each this.items as |item|}}
          <ddm.item>
            <a href onclick={{action "changeItems" item dd.closeDropdown}}>
              {{item.text}}
            </a>
          </ddm.item>
        {{/each}}
      </dd.menu>
    </BsDropdown>
    ```
  
    Then in your controller or component, optionally close the dropdown:
  
    ```js
    ...
    actions: {
      handleDropdownClicked(item, closeDropdown) {
        if(item.isTheRightOne) {
          this.chosenItems.pushObject(item);
          closeDropdown();
        } else {
          this.set('item', this.getRandomItems());
        }
      },
    }
    ```
  
  
    ### Bootstrap 3/4 Notes
  
    If you need to use dropdowns in a [nav](Components.Nav.html), use the `bs-nav.dropdown`
    contextual component rather than a standalone dropdown to ensure the correct styling
    regardless of your Bootstrap version.
  
    If you use the [dropdown divider](Components.DropdownMenuDivider), you don't have to worry
    about differences in the markup between versions.
  
    Be sure to use the [dropdown menu link-to](Component.DropdownMenuLinkTo), for in-application
    links as dropdown menu items. This is essential for proper styling regardless of Bootstrap
    version and will also provide automatic `active` highlighting on dropdown menu items. If you
    wish to have a dropdown menu item refer to an external link, be sure to apply the `dropdown-item`
    class to the `<a>` tag for Bootstrap 4 compatibility.
  
    The dropdown menu will be positioned using the `popper.js` library, just as the original Bootstrap
    version does. This also allows you to set `renderInPlace=false` on the menu component to render it in a wormhole,
    which you might want to do if you experience clipping issues by an outer `overflow: hidden` element.
  
    *Note that only invoking the component in a template as shown above is considered part of its public API. Extending from it (subclassing) is generally not supported, and may break at any time.*
  
    @class Dropdown
    @namespace Components
    @extends Ember.Component
    @public
  s*/
  let Dropdown = _exports.default = (_dec = (0, _component2.tagName)(''), _dec2 = (0, _object.computed)('direction', 'hasButton', 'toggleElement.classList'), _dec(_class = (0, _deprecateSubclassing.default)(_class = (_class2 = class Dropdown extends _component.default {
    constructor(...args) {
      super(...args);
      /**
       * The tag name used for the dropdown element.
       *
       * @property htmlTag
       * @default 'div'
       * @type {string}
       * @public
       */
      _initializerDefineProperty(this, "htmlTag", _descriptor, this);
      /**
       * This property reflects the state of the dropdown, whether it is open or closed.
       *
       * @property isOpen
       * @default false
       * @type boolean
       * @private
       */
      _initializerDefineProperty(this, "isOpen", _descriptor2, this);
      /**
       * By default, clicking on an open dropdown menu will close it. Set this property to false for the menu to stay open.
       *
       * @property closeOnMenuClick
       * @default true
       * @type boolean
       * @public
       */
      _initializerDefineProperty(this, "closeOnMenuClick", _descriptor3, this);
      /**
       * By default, the dropdown menu will expand downwards. Other options include, 'up', 'left' and 'right'
       *
       * @property direction
       * @type string
       * @default 'down'
       * @public
       */
      _initializerDefineProperty(this, "direction", _descriptor4, this);
      /**
       * @property toggleElement
       * @private
       */
      _defineProperty(this, "toggleElement", null);
      /**
       * The DOM element of the `.dropdown-menu` element
       * @type object
       * @readonly
       * @private
       */
      _defineProperty(this, "menuElement", null);
    }
    /**
     * Indicates the dropdown is being used as a navigation item dropdown.
     *
     * @property inNav
     * @type boolean
     * @default false
     * @private
     */
    /**
     * A computed property to generate the suiting class for the dropdown container, either "dropdown", "dropup" or "btn-group".
     * BS4 only: "dropleft", "dropright"
     *
     * @property containerClass
     * @type string
     * @readonly
     * @private
     */
    get containerClass() {
      if (this.hasButton && !this.toggleElement.classList.contains('btn-block')) {
        return this.direction !== 'down' ? `btn-group drop${this.direction}` : 'btn-group';
      } else {
        return `drop${this.direction}`;
      }
    }
    get hasButton() {
      return this.toggleElement && this.toggleElement.tagName === 'BUTTON';
    }
    /**
     * Action is called when dropdown is about to be shown
     *
     * @event onShow
     * @param {*} value
     * @public
     */
    onShow(value) {} // eslint-disable-line no-unused-vars

    /**
     * Action is called when dropdown is about to be hidden
     * Returning `false` will block closing the dropdown
     *
     * @event onHide
     * @param {*} value
     * @public
     */
    onHide(value) {} // eslint-disable-line no-unused-vars

    toggleDropdown() {
      if (this.isOpen) {
        this.closeDropdown();
      } else {
        this.openDropdown();
      }
    }
    openDropdown() {
      this.set('isOpen', true);
      this.onShow();
    }
    closeDropdown() {
      if (this.onHide() === false) return;
      this.set('isOpen', false);
    }

    /**
     * Handler for click events to close the dropdown
     *
     * @method closeOnClickHandler
     * @param e
     * @protected
     */
    closeHandler(e) {
      let {
        target
      } = e;
      let {
        toggleElement,
        menuElement
      } = this;
      if (!this.isDestroyed && (e.type === 'keyup' && e.which === TAB_KEYCODE && menuElement && !menuElement.contains(target) || e.type === 'click' && toggleElement && !toggleElement.contains(target) && (menuElement && !menuElement.contains(target) || this.closeOnMenuClick))) {
        this.closeDropdown();
      }
    }
    handleKeyEvent(event) {
      // If not input/textarea:
      //  - And not a key in REGEXP_KEYDOWN => not a dropdown command
      // If input/textarea:
      //  - If space key => not a dropdown command
      //  - If key is other than escape
      //    - If key is not up or down => not a dropdown command
      //    - If trigger inside the menu => not a dropdown command
      if (['input', 'textarea'].includes(event.target.tagName.toLowerCase()) ? event.which === SPACE_KEYCODE || event.which !== ESCAPE_KEYCODE && (event.which !== ARROW_DOWN_KEYCODE && event.which !== ARROW_UP_KEYCODE || this.menuElement.contains(event.target)) : !SUPPORTED_KEYCODES.includes(event.which)) {
        return;
      }
      event.preventDefault();
      event.stopPropagation();
      if (!this.isOpen) {
        this.openDropdown();
        return;
      } else if (event.which === ESCAPE_KEYCODE || event.which === SPACE_KEYCODE) {
        this.closeDropdown();
        this.toggleElement.focus();
        return;
      }
      let items = [].slice.call(this.menuElement.querySelectorAll('.dropdown-item:not(.disabled):not(:disabled)'));
      if (items.length === 0) {
        return;
      }
      let index = items.indexOf(event.target);
      if (event.which === ARROW_UP_KEYCODE && index > 0) {
        // Up
        index--;
      }
      if (event.which === ARROW_DOWN_KEYCODE && index < items.length - 1) {
        // Down
        index++;
      }
      if (index < 0) {
        index = 0;
      }
      items[index].focus();
    }
    registerChildElement(element, [type]) {
      (true && !(type === 'toggle' || type === 'menu') && (0, _debug.assert)(`Unknown child element type "${type}"`, type === 'toggle' || type === 'menu'));
      (true && !(element instanceof HTMLElement) && (0, _debug.assert)(`Registered ${type} element must be an HTMLElement`, element instanceof HTMLElement));
      this.set(`${type}Element`, element);
    }
    unregisterChildElement(element, [type]) {
      (true && !(type === 'toggle' || type === 'menu') && (0, _debug.assert)(`Unknown child element type "${type}"`, type === 'toggle' || type === 'menu'));
      this.set(`${type}Element`, null);
    }

    /**
     * @property buttonComponent
     * @type {String}
     * @private
     */

    /**
     * @property toggleComponent
     * @type {String}
     * @private
     */

    /**
     * @property menuComponent
     * @type {String}
     * @private
     */
  }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "htmlTag", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 'div';
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "isOpen", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "closeOnMenuClick", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "direction", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 'down';
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "containerClass", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "containerClass"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "toggleDropdown", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "toggleDropdown"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "openDropdown", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "openDropdown"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "closeDropdown", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "closeDropdown"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "closeHandler", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "closeHandler"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "handleKeyEvent", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "handleKeyEvent"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "registerChildElement", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "registerChildElement"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "unregisterChildElement", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "unregisterChildElement"), _class2.prototype)), _class2)) || _class) || _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, Dropdown);
});
;define("ember-bootstrap/components/bs-dropdown/button", ["exports", "@ember/component", "ember-bootstrap/components/bs-button", "@ember/template-factory"], function (_exports, _component, _bsButton, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"ember-bootstrap/components/bs-button",0,"@ember/component"eaimeta@70e063a35619d71f
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <button
    disabled={{this.__disabled}}
    type={{this.buttonType}}
    aria-expanded={{if @isOpen "true" "false"}}
    class="btn dropdown-toggle {{if @active "active"}} {{if this.block "btn-block"}} {{bs-size-class "btn" @size}} {{bs-type-class "btn" @type default=(if (macroCondition (macroGetOwnConfig "isBS3")) "default" "secondary") outline=@outline}}"
    ...attributes
    {{on "click" this.handleClick}}
    {{on "keydown" @onKeyDown}}
    {{did-insert @registerChildElement "toggle"}}
    {{will-destroy @unregisterChildElement "toggle"}}
  >
    {{#if this.icon}}<i class={{this.icon}}></i> {{/if}}{{this.text}}{{yield
      (hash
        isFulfilled=this.isFulfilled
        isPending=this.isPending
        isRejected=this.isRejected
        isSettled=this.isSettled
      )
    }}
  </button>
  
  */
  {
    "id": "Boa0YUbh",
    "block": "[[[11,\"button\"],[16,\"disabled\",[30,0,[\"__disabled\"]]],[16,4,[30,0,[\"buttonType\"]]],[16,\"aria-expanded\",[52,[30,1],\"true\",\"false\"]],[16,0,[29,[\"btn dropdown-toggle \",[52,[30,2],\"active\"],\" \",[52,[30,0,[\"block\"]],\"btn-block\"],\" \",[28,[37,1],[\"btn\",[30,3]],null],\" \",[28,[37,2],[\"btn\",[30,4]],[[\"default\",\"outline\"],[\"secondary\",[30,5]]]]]]],[17,6],[4,[38,3],[\"click\",[30,0,[\"handleClick\"]]],null],[4,[38,3],[\"keydown\",[30,7]],null],[4,[38,4],[[30,8],\"toggle\"],null],[4,[38,5],[[30,9],\"toggle\"],null],[12],[1,\"\\n  \"],[41,[30,0,[\"icon\"]],[[[10,\"i\"],[15,0,[30,0,[\"icon\"]]],[12],[13],[1,\" \"]],[]],null],[1,[30,0,[\"text\"]]],[18,10,[[28,[37,7],null,[[\"isFulfilled\",\"isPending\",\"isRejected\",\"isSettled\"],[[30,0,[\"isFulfilled\"]],[30,0,[\"isPending\"]],[30,0,[\"isRejected\"]],[30,0,[\"isSettled\"]]]]]]],[1,\"\\n\"],[13],[1,\"\\n\"]],[\"@isOpen\",\"@active\",\"@size\",\"@type\",\"@outline\",\"&attrs\",\"@onKeyDown\",\"@registerChildElement\",\"@unregisterChildElement\",\"&default\"],false,[\"if\",\"bs-size-class\",\"bs-type-class\",\"on\",\"did-insert\",\"will-destroy\",\"yield\",\"hash\"]]",
    "moduleName": "ember-bootstrap/components/bs-dropdown/button.hbs",
    "isStrictMode": false
  });

  /**
   Button component with that can act as a dropdown toggler.
  
   See [Components.Dropdown](Components.Dropdown.html) for examples.
  
   @class DropdownButton
   @namespace Components
   @extends Components.Button
   @public
   */
  class DropdownButton extends _bsButton.default {
    constructor(...args) {
      super(...args);
      _defineProperty(this, '__ember-bootstrap_subclass', true);
    }
  }
  _exports.default = DropdownButton;
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, DropdownButton);
});
;define("ember-bootstrap/components/bs-dropdown/menu", ["exports", "@ember/component", "@ember-decorators/component", "@ember/object", "@ember/runloop", "ember-bootstrap/utils/dom", "ember-bootstrap/utils/default-decorator", "ember-bootstrap/utils/deprecate-subclassing", "ember-ref-bucket", "@ember/template-factory"], function (_exports, _component, _component2, _object, _runloop, _dom, _defaultDecorator, _deprecateSubclassing, _emberRefBucket, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember-decorators/component",0,"@ember/object",0,"@ember/component",0,"@ember/runloop",0,"ember-bootstrap/utils/dom",0,"ember-bootstrap/utils/default-decorator",0,"ember-bootstrap/utils/deprecate-subclassing",0,"ember-ref-bucket",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    {{#if this._isOpen}}
    {{#if this._renderInPlace}}
      <div
        class="dropdown-menu {{this.alignClass}} {{if this.isOpen "show"}}"
        tabindex="-1"
        ...attributes
        {{popper-tooltip this.toggleElement this.popperOptions}}
        {{did-insert @registerChildElement "menu"}}
        {{will-destroy @unregisterChildElement "menu"}}
        {{create-ref "menuElement"}}
      >
        {{yield
          (hash
            item=(ensure-safe-component (bs-default @itemComponent (component "bs-dropdown/menu/item")))
            link-to=(ensure-safe-component (bs-default @linkToComponent (component "bs-link-to" class="dropdown-item")))
            linkTo=(ensure-safe-component (bs-default @linkToComponent (component "bs-link-to" class="dropdown-item")))
            divider=(ensure-safe-component (bs-default @dividerComponent (component "bs-dropdown/menu/divider")))
          )
        }}
      </div>
    {{else}}
      {{#in-element this.destinationElement insertBefore=null}}
        <div
          class="dropdown-menu {{this.alignClass}} {{if this.isOpen "show"}}"
          tabindex="-1"
          ...attributes
          {{popper-tooltip this.toggleElement this.popperOptions}}
          {{did-insert @registerChildElement "menu"}}
          {{will-destroy @unregisterChildElement "menu"}}
          {{create-ref "menuElement"}}
        >
          {{yield
            (hash
              item=(ensure-safe-component (bs-default @itemComponent (component "bs-dropdown/menu/item")))
              link-to=(ensure-safe-component (bs-default @linkToComponent (component "bs-link-to" class="dropdown-item")))
              linkTo=(ensure-safe-component (bs-default @linkToComponent (component "bs-link-to" class="dropdown-item")))
              divider=(ensure-safe-component (bs-default @dividerComponent (component "bs-dropdown/menu/divider")))
            )
          }}
        </div>
      {{/in-element}}
    {{/if}}
  {{/if}}
  
  */
  {
    "id": "LBOv0mYA",
    "block": "[[[41,[30,0,[\"_isOpen\"]],[[[41,[30,0,[\"_renderInPlace\"]],[[[1,\"    \"],[11,0],[16,0,[29,[\"dropdown-menu \",[30,0,[\"alignClass\"]],\" \",[52,[30,0,[\"isOpen\"]],\"show\"]]]],[24,\"tabindex\",\"-1\"],[17,1],[4,[38,1],[[30,0,[\"toggleElement\"]],[30,0,[\"popperOptions\"]]],null],[4,[38,2],[[30,2],\"menu\"],null],[4,[38,3],[[30,3],\"menu\"],null],[4,[38,4],[\"menuElement\"],[[\"debugName\",\"bucket\"],[\"create-ref\",[30,0]]]],[12],[1,\"\\n      \"],[18,7,[[28,[37,6],null,[[\"item\",\"link-to\",\"linkTo\",\"divider\"],[[28,[37,7],[[28,[37,8],[[30,4],[50,\"bs-dropdown/menu/item\",0,null,null]],null]],null],[28,[37,7],[[28,[37,8],[[30,5],[50,\"bs-link-to\",0,null,[[\"class\"],[\"dropdown-item\"]]]],null]],null],[28,[37,7],[[28,[37,8],[[30,5],[50,\"bs-link-to\",0,null,[[\"class\"],[\"dropdown-item\"]]]],null]],null],[28,[37,7],[[28,[37,8],[[30,6],[50,\"bs-dropdown/menu/divider\",0,null,null]],null]],null]]]]]],[1,\"\\n    \"],[13],[1,\"\\n\"]],[]],[[[40,[[[1,\"      \"],[11,0],[16,0,[29,[\"dropdown-menu \",[30,0,[\"alignClass\"]],\" \",[52,[30,0,[\"isOpen\"]],\"show\"]]]],[24,\"tabindex\",\"-1\"],[17,1],[4,[38,1],[[30,0,[\"toggleElement\"]],[30,0,[\"popperOptions\"]]],null],[4,[38,2],[[30,2],\"menu\"],null],[4,[38,3],[[30,3],\"menu\"],null],[4,[38,4],[\"menuElement\"],[[\"debugName\",\"bucket\"],[\"create-ref\",[30,0]]]],[12],[1,\"\\n        \"],[18,7,[[28,[37,6],null,[[\"item\",\"link-to\",\"linkTo\",\"divider\"],[[28,[37,7],[[28,[37,8],[[30,4],[50,\"bs-dropdown/menu/item\",0,null,null]],null]],null],[28,[37,7],[[28,[37,8],[[30,5],[50,\"bs-link-to\",0,null,[[\"class\"],[\"dropdown-item\"]]]],null]],null],[28,[37,7],[[28,[37,8],[[30,5],[50,\"bs-link-to\",0,null,[[\"class\"],[\"dropdown-item\"]]]],null]],null],[28,[37,7],[[28,[37,8],[[30,6],[50,\"bs-dropdown/menu/divider\",0,null,null]],null]],null]]]]]],[1,\"\\n      \"],[13],[1,\"\\n\"]],[]],\"%cursor:0%\",[28,[37,11],[[30,0,[\"destinationElement\"]]],null],null]],[]]]],[]],null]],[\"&attrs\",\"@registerChildElement\",\"@unregisterChildElement\",\"@itemComponent\",\"@linkToComponent\",\"@dividerComponent\",\"&default\"],false,[\"if\",\"popper-tooltip\",\"did-insert\",\"will-destroy\",\"create-ref\",\"yield\",\"hash\",\"ensure-safe-component\",\"bs-default\",\"component\",\"in-element\",\"-in-el-null\"]]",
    "moduleName": "ember-bootstrap/components/bs-dropdown/menu.hbs",
    "isStrictMode": false
  });

  /**
   Component for the dropdown menu.
  
   See [Components.Dropdown](Components.Dropdown.html) for examples.
  
   @class DropdownMenu
   @namespace Components
   @extends Ember.Component
   @public
   */
  let DropdownMenu = _exports.default = (_dec = (0, _component2.tagName)(''), _dec2 = (0, _emberRefBucket.ref)('menuElement'), _dec3 = (0, _object.computed)('destinationElement', 'renderInPlace'), _dec4 = (0, _object.computed)('align'), _dec5 = (0, _object.computed)('direction', 'align'), _dec6 = (0, _object.computed)('flip', 'popperPlacement'), _dec(_class = (0, _deprecateSubclassing.default)(_class = (_class2 = class DropdownMenu extends _component.default {
    constructor(...args) {
      super(...args);
      /**
       * @property _element
       * @type null | HTMLElement
       * @private
       */
      _initializerDefineProperty(this, "menuElement", _descriptor, this);
      /**
       * @property ariaRole
       * @default menu
       * @type string
       * @protected
       */
      _defineProperty(this, "ariaRole", 'menu');
      /**
       * Alignment of the menu, either "left" or "right"
       *
       * @property align
       * @type string
       * @default left
       * @public
       */
      _initializerDefineProperty(this, "align", _descriptor2, this);
      /**
       * @property direction
       * @default 'down'
       * @type string
       * @private
       */
      _initializerDefineProperty(this, "direction", _descriptor3, this);
      /**
       * By default the menu is rendered in the same place as the dropdown. If you experience clipping
       * issues, you can set this to false to render the menu in a wormhole at the top of the DOM.
       *
       * @property renderInPlace
       * @type boolean
       * @default true
       * @public
       */
      _initializerDefineProperty(this, "renderInPlace", _descriptor4, this);
      _defineProperty(this, "_isOpen", false);
      _defineProperty(this, "flip", true);
      _defineProperty(this, "_popperApi", null);
    }
    /**
     * @property _renderInPlace
     * @type boolean
     * @private
     */
    get _renderInPlace() {
      return this.renderInPlace || !this.destinationElement;
    }

    /**
     * The wormhole destinationElement
     *
     * @property destinationElement
     * @type object
     * @readonly
     * @private
     */
    get destinationElement() {
      return (0, _dom.getDestinationElement)(this);
    }
    get alignClass() {
      return this.align !== 'left' ? `dropdown-menu-${this.align}` : undefined;
    }
    get isOpen() {
      return false;
    }
    set isOpen(value) {
      // delay removing the menu from DOM to allow (delegated Ember) event to fire for the menu's children
      // Fixes https://github.com/kaliber5/ember-bootstrap/issues/660
      (0, _runloop.next)(() => {
        if (this.isDestroying || this.isDestroyed) {
          return;
        }
        this.set('_isOpen', value);
      });
      return value;
    }
    get popperPlacement() {
      let placement = 'bottom-start';
      let {
        direction,
        align
      } = this;
      if (direction === 'up') {
        placement = 'top-start';
        if (align === 'right') {
          placement = 'top-end';
        }
      } else if (direction === 'left') {
        placement = 'left-start';
      } else if (direction === 'right') {
        placement = 'right-start';
      } else if (align === 'right') {
        placement = 'bottom-end';
      }
      return placement;
    }
    setFocus() {
      // when the dropdown menu is rendered in place, focus can stay on the toggle element
      if (this._renderInPlace) {
        return;
      }
      if (this.menuElement) {
        this.menuElement.focus();
      }
    }
    get popperOptions() {
      return {
        placement: this.popperPlacement,
        onFirstUpdate: () => this.setFocus(),
        modifiers: [{
          name: 'flip',
          enabled: this.flip
        }]
      };
    }

    /**
     * @property itemComponent
     * @type {String}
     * @private
     */

    /**
     * @property linkToComponent
     * @type {String}
     * @private
     */

    /**
     * @property dividerComponent
     * @type {String}
     * @private
     */
  }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "menuElement", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "align", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 'left';
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "direction", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 'down';
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "renderInPlace", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "_renderInPlace", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "_renderInPlace"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "destinationElement", [_object.computed], Object.getOwnPropertyDescriptor(_class2.prototype, "destinationElement"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "alignClass", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "alignClass"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "isOpen", [_object.computed], Object.getOwnPropertyDescriptor(_class2.prototype, "isOpen"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "popperPlacement", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "popperPlacement"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setFocus", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "setFocus"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "popperOptions", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "popperOptions"), _class2.prototype)), _class2)) || _class) || _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, DropdownMenu);
});
;define("ember-bootstrap/components/bs-dropdown/menu/divider", ["exports", "@ember/component", "@ember-decorators/component", "ember-bootstrap/utils/deprecate-subclassing", "@ember/template-factory"], function (_exports, _component, _component2, _deprecateSubclassing, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _class;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/component",0,"@ember-decorators/component",0,"ember-bootstrap/utils/deprecate-subclassing",0,"@ember/component"eaimeta@70e063a35619d71f
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <div class="dropdown-divider" ...attributes>
    {{yield}}
  </div>
  */
  {
    "id": "2o+e9vPB",
    "block": "[[[11,0],[24,0,\"dropdown-divider\"],[17,1],[12],[1,\"\\n  \"],[18,2,null],[1,\"\\n\"],[13]],[\"&attrs\",\"&default\"],false,[\"yield\"]]",
    "moduleName": "ember-bootstrap/components/bs-dropdown/menu/divider.hbs",
    "isStrictMode": false
  });

  /**
   Component for a dropdown menu divider.
  
   See [Components.Dropdown](Components.Dropdown.html) for examples.
  
   @class DropdownMenuDivider
   @namespace Components
   @extends Ember.Component
   @public
   */
  let DropdownMenuDivider = _exports.default = (_dec = (0, _component2.tagName)(''), _dec(_class = (0, _deprecateSubclassing.default)(_class = class DropdownMenuDivider extends _component.default {}) || _class) || _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, DropdownMenuDivider);
});
;define("ember-bootstrap/components/bs-dropdown/menu/item", ["exports", "@ember/component", "@ember-decorators/component", "ember-bootstrap/utils/deprecate-subclassing"], function (_exports, _component, _component2, _deprecateSubclassing) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _class;
  0; //eaimeta@70e063a35619d71f0,"@ember/component",0,"@ember-decorators/component",0,"ember-bootstrap/utils/deprecate-subclassing"eaimeta@70e063a35619d71f
  /**
   Component for a dropdown menu item.
  
   See [Components.Dropdown](Components.Dropdown.html) for examples.
  
   @class DropdownMenuItem
   @namespace Components
   @extends Ember.Component
   @public
   */
  let DropdownMenuItem = _exports.default = (_dec = (0, _component2.tagName)(''), _dec(_class = (0, _deprecateSubclassing.default)(_class = class DropdownMenuItem extends _component.default {}) || _class) || _class);
});
;define("ember-bootstrap/components/bs-dropdown/toggle", ["exports", "@ember/component", "@ember-decorators/component", "ember-bootstrap/utils/default-decorator", "@ember/object", "ember-bootstrap/utils/deprecate-subclassing", "@ember/template-factory"], function (_exports, _component, _component2, _defaultDecorator, _object, _deprecateSubclassing, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _dec2, _class, _class2, _descriptor;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember-decorators/component",0,"@ember/component",0,"ember-bootstrap/utils/default-decorator",0,"@ember/object",0,"ember-bootstrap/utils/deprecate-subclassing",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <a
    href="#"
    class="dropdown-toggle {{if @inNav "nav-link"}}"
    aria-expanded={{this.aria-expanded}}
    role="button"
    ...attributes
    {{on "keydown" this.handleKeyDown}}
    {{on "click" this.handleClick}}
    {{did-insert @registerChildElement "toggle"}}
    {{will-destroy @unregisterChildElement "toggle"}}
  >
    {{yield}}
  </a>
  */
  {
    "id": "xphN5h2d",
    "block": "[[[11,3],[24,6,\"#\"],[16,0,[29,[\"dropdown-toggle \",[52,[30,1],\"nav-link\"]]]],[16,\"aria-expanded\",[30,0,[\"aria-expanded\"]]],[24,\"role\",\"button\"],[17,2],[4,[38,1],[\"keydown\",[30,0,[\"handleKeyDown\"]]],null],[4,[38,1],[\"click\",[30,0,[\"handleClick\"]]],null],[4,[38,2],[[30,3],\"toggle\"],null],[4,[38,3],[[30,4],\"toggle\"],null],[12],[1,\"\\n  \"],[18,5,null],[1,\"\\n\"],[13]],[\"@inNav\",\"&attrs\",\"@registerChildElement\",\"@unregisterChildElement\",\"&default\"],false,[\"if\",\"on\",\"did-insert\",\"will-destroy\",\"yield\"]]",
    "moduleName": "ember-bootstrap/components/bs-dropdown/toggle.hbs",
    "isStrictMode": false
  });

  /**
   Anchor element that triggers the parent dropdown to open.
   Use [Components.DropdownButton](Components.DropdownButton.html) if you want a button instead of an anchor tag.
  
   See [Components.Dropdown](Components.Dropdown.html) for examples.
  
   @class DropdownToggle
   @namespace Components
   @extends Ember.Component
   @publicø
   */
  let DropdownToggle = _exports.default = (_dec = (0, _component2.tagName)(''), _dec2 = (0, _object.computed)('isOpen'), _dec(_class = (0, _deprecateSubclassing.default)(_class = (_class2 = class DropdownToggle extends _component.default {
    constructor(...args) {
      super(...args);
      /**
       * @property inNav
       * @type {boolean}
       * @private
       */
      _initializerDefineProperty(this, "inNav", _descriptor, this);
    }
    get 'aria-expanded'() {
      return this.isOpen ? 'true' : 'false';
    }

    /**
     * When clicking the toggle this action is called.
     *
     * @event onClick
     * @param {*} value
     * @public
     */
    onClick() {}
    handleClick(e) {
      e.preventDefault();
      this.onClick();
    }
    handleKeyDown(e) {
      this.onKeyDown(e);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "inNav", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, 'aria-expanded', [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, 'aria-expanded'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "handleClick", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "handleClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "handleKeyDown", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "handleKeyDown"), _class2.prototype)), _class2)) || _class) || _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, DropdownToggle);
});
;define("ember-bootstrap/components/bs-form", ["exports", "@ember/component", "@glimmer/component", "@ember/object", "@ember/debug", "@ember/utils", "@ember/runloop", "rsvp", "ember-bootstrap/utils/deprecate-subclassing", "ember-bootstrap/utils/decorators/arg", "@glimmer/tracking", "tracked-toolbox", "ember-ref-bucket", "@ember/template-factory", "@embroider/macros/runtime"], function (_exports, _component, _component2, _object, _debug, _utils, _runloop, _rsvp, _deprecateSubclassing, _arg, _tracking, _trackedToolbox, _emberRefBucket, _templateFactory, _runtime) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@glimmer/component",0,"@ember/object",0,"@ember/debug",0,"@ember/utils",0,"@ember/runloop",0,"rsvp",0,"@embroider/macros",0,"ember-bootstrap/utils/deprecate-subclassing",0,"ember-bootstrap/utils/decorators/arg",0,"@glimmer/tracking",0,"tracked-toolbox",0,"ember-ref-bucket",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    {{!-- template-lint-disable no-invalid-interactive --}}
  <form
    novalidate={{this.hasValidator}}
    class={{this.layoutClass}}
    ...attributes
    {{on "keypress" this.handleKeyPress}}
    {{on "submit" this.handleSubmit}}
    {{create-ref "formElement"}}
  >
    {{yield
      (hash
        element=(component (ensure-safe-component (bs-default @elementComponent (component "bs-form/element")))
          model=this.model
          formLayout=this.formLayout
          horizontalLabelGridClass=this.horizontalLabelGridClass
          showAllValidations=this.showAllValidations
          _disabled=@disabled
          _readonly=@readonly
          onChange=this.elementChanged
          _onChange=this.resetSubmissionState
        )
        isSubmitting=this.isSubmitting
        isSubmitted=this.isSubmitted
        isRejected=this.isRejected
        resetSubmissionState=this.resetSubmissionState
        submit=this.doSubmit
        submitButton=(component (ensure-safe-component (bs-default @submitButtonComponent (component "bs-button")))
          buttonType="submit"
          type="primary"
          state=this.submitButtonState
          _disabled=this.isSubmitting
        )
      )
    }}
  </form>
  
  */
  {
    "id": "5MZZej/L",
    "block": "[[[11,\"form\"],[16,\"novalidate\",[30,0,[\"hasValidator\"]]],[16,0,[30,0,[\"layoutClass\"]]],[17,1],[4,[38,0],[\"keypress\",[30,0,[\"handleKeyPress\"]]],null],[4,[38,0],[\"submit\",[30,0,[\"handleSubmit\"]]],null],[4,[38,1],[\"formElement\"],[[\"debugName\",\"bucket\"],[\"create-ref\",[30,0]]]],[12],[1,\"\\n  \"],[18,6,[[28,[37,3],null,[[\"element\",\"isSubmitting\",\"isSubmitted\",\"isRejected\",\"resetSubmissionState\",\"submit\",\"submitButton\"],[[50,[28,[37,5],[[28,[37,6],[[30,2],[50,\"bs-form/element\",0,null,null]],null]],null],0,null,[[\"model\",\"formLayout\",\"horizontalLabelGridClass\",\"showAllValidations\",\"_disabled\",\"_readonly\",\"onChange\",\"_onChange\"],[[30,0,[\"model\"]],[30,0,[\"formLayout\"]],[30,0,[\"horizontalLabelGridClass\"]],[30,0,[\"showAllValidations\"]],[30,3],[30,4],[30,0,[\"elementChanged\"]],[30,0,[\"resetSubmissionState\"]]]]],[30,0,[\"isSubmitting\"]],[30,0,[\"isSubmitted\"]],[30,0,[\"isRejected\"]],[30,0,[\"resetSubmissionState\"]],[30,0,[\"doSubmit\"]],[50,[28,[37,5],[[28,[37,6],[[30,5],[50,\"bs-button\",0,null,null]],null]],null],0,null,[[\"buttonType\",\"type\",\"state\",\"_disabled\"],[\"submit\",\"primary\",[30,0,[\"submitButtonState\"]],[30,0,[\"isSubmitting\"]]]]]]]]]],[1,\"\\n\"],[13],[1,\"\\n\"]],[\"&attrs\",\"@elementComponent\",\"@disabled\",\"@readonly\",\"@submitButtonComponent\",\"&default\"],false,[\"on\",\"create-ref\",\"yield\",\"hash\",\"component\",\"ensure-safe-component\",\"bs-default\"]]",
    "moduleName": "ember-bootstrap/components/bs-form.hbs",
    "isStrictMode": false
  });

  /**
    Render a form with the appropriate Bootstrap layout class (see `formLayout`).
    Allows setting a `model` that nested `Components.FormElement`s can access, and that can provide form validation (see below)
  
    You can use whatever markup you like within the form.
    However, to benefit from features such as automatic form markup, validations and validation markup, use `Components.FormElement`
    as nested components. See below for an example.
  
    ### Submitting the form
  
    The form yields a `submitButton` component, which is a preconfigured `<BsButton>` with `@type="primary"` and `@buttonType="submit"`.
    The button is disabled while a form submission is pending. Additionally, the button state is bound to the form submission state.
  
    ```hbs
    <BsForm as |form|>
      <form.submitButton>Submit</form.submitButton>
    </BsForm>
    ```
  
    When the form is submitted (e.g. by clicking the submit button), the event will be intercepted and the `onSubmit` action
    will be sent to the controller or parent component.
    In case the form supports validation (see "Form validation" below), the `onBefore` action is called (which allows you to
    do e.g. model data normalization), then the available validation rules are evaluated, and if those fail, the `onInvalid`
    action is sent instead of `onSubmit`.
  
    ### Use with Components.FormElement
  
    When using `Components.FormElement`s with their `property` set to property names of the form's validation enabled
    `model`, you gain some additional powerful features:
    * the appropriate Bootstrap markup for the given `formLayout` and the form element's `controlType` is automatically generated
    * markup for validation states and error messages is generated based on the model's validation (if available), when submitting the form
    with an invalid validation, or when focusing out of invalid inputs
  
    ```handlebars
    <BsForm @formLayout="horizontal" @model={{this}} @onSubmit={{action "submit"}} as |form|>
      <form.element @controlType="email" @label="Email" @placeholder="Email" @property="email" />
      <form.element @controlType="password" @label="Password" @placeholder="Password" @property="password" />
      <form.element @controlType="checkbox" @label="Remember me" @property="rememberMe" />
      <form.submitButton>Submit</form.submitButton>
    </BsForm>
    ```
  
    See the [Components.FormElement](Components.FormElement.html) API docs for further information.
  
    ### Form validation
  
    All version of ember-bootstrap beginning from 0.7.0 do not come with built-in support for validation engines anymore.
    Instead, support is added usually by additional Ember addons, for example:
  
    * [ember-bootstrap-validations](https://github.com/kaliber5/ember-bootstrap-validations): adds support for [ember-validations](https://github.com/DockYard/ember-validations)
    * [ember-bootstrap-cp-validations](https://github.com/offirgolan/ember-bootstrap-cp-validations): adds support for [ember-cp-validations](https://github.com/offirgolan/ember-cp-validations)
    * [ember-bootstrap-changeset-validations](https://github.com/kaliber5/ember-bootstrap-changeset-validations): adds support for [ember-changeset](https://github.com/poteto/ember-changeset)
  
    To add your own validation support, you have to:
  
    * extend this component, setting `hasValidator` to true if validations are available (by means of a computed property for example), and implementing the `validate` method
    * extend the [Components.FormElement](Components.FormElement.html) component and implement the `setupValidations` hook or simply override the `errors` property to add the validation error messages to be displayed
  
    When validation fails, the appropriate Bootstrap markup is added automatically, i.e. the error classes are applied and
    the validation messages are shown for each form element. In case the validation library supports it, also warning messages
    are shown. See the [Components.FormElement](Components.FormElement.html) documentation for further details.
  
    See the above-mentioned addons for examples.
  
    The `novalidate` HTML attribute is set by default for forms that have validation.
  
    ### Submission state
  
    A `isSubmitting` property is yielded, which is `true` after submit has been triggered and before the Promise returned
    by `onSubmit` is fulfilled. It could be used to show a loading spinner instead of the form while it's submitting for example:
  
    ```hbs
    <BsForm @onSubmit={{action "save"}} as |form|>
      {{#if form.isSubmitting}}
        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
        Logging in...
      {{else}}
        <form.element @property="email" @label="email" />
        <form.element @property="password" @label="password" @controlType="password" />
        <form.submitButton>Login</form.submitButton>
      {{/if}}
    </BsForm>
    ```
  
    Additionaly `isSubmitted` and `isRejected` properties are yielded. `isSubmitted` is `true` if last submission was successful.
    `isRejected` is `true` if last submission was rejected due to validation errors or by an action bound to `onSubmit` event, returning a rejected promise.
    It could be used for visual feedback about last submission:
  
    ```hbs
    <BsForm @onSubmit={{action 'save}} as |form|>
      <form.submitButton @type={{if form.isRejected "danger" "primary"}}>
        Save
      </form.submitButton>
    </BsForm>
    ```
  
    The submission state is reset as soon as any value of a form element changes. Additionally, it can be reset programmatically by
    calling the yielded `resetSubmissionState` function.
  
    *Note that only invoking the component in a template as shown above is considered part of its public API. Extending from it (subclassing) is generally not supported, and may break at any time.*
  
    @class Form
    @namespace Components
    @extends Ember.Component
    @public
  */
  let Form = _exports.default = (_dec = (0, _emberRefBucket.ref)('formElement'), (0, _deprecateSubclassing.default)(_class = (_class2 = class Form extends _component2.default {
    /**
     * Bootstrap form class name (computed)
     *
     * @property layoutClass
     * @type string
     * @readonly
     * @protected
     *
     */
    get layoutClass() {
      let layout = this.formLayout;
      if ((0, _runtime.macroCondition)((0, _runtime.config)("/home/ec2-user/coup/client/node_modules/ember-bootstrap").isBS4)) {
        return layout === 'inline' ? 'form-inline' : null;
      } else {
        return null;
      }
    }

    /**
     * Set a model that this form should represent. This serves several purposes:
     *
     * * child `Components.FormElement`s can access and bind to this model by their `property`
     * * when the model supports validation by using the [ember-validations](https://github.com/dockyard/ember-validations) mixin,
     * child `Components.FormElement`s will look at the validation information of their `property` and render their form group accordingly.
     * Moreover, the form's `submit` event handler will validate the model and deny submitting if the model is not validated successfully.
     *
     * @property model
     * @type object
     * @public
     */
    get model() {
      return this.args.model ?? {};
    }

    /**
     * Set the layout of the form to either "vertical", "horizontal" or "inline". See http://getbootstrap.com/css/#forms-inline and http://getbootstrap.com/css/#forms-horizontal
     *
     * @property formLayout
     * @type string
     * @public
     */

    /**
     * @property elementComponent
     * @type {String}
     * @private
     */

    /**
     * @property submitButtonComponent
     * @type {String}
     * @private
     */
    /**
     * `isSubmitting` is `true` after `submit` event has been triggered and until Promise returned by `onSubmit` is
     * fulfilled. If `validate` returns a Promise that one is also taken into consideration.
     *
     * If multiple concurrent submit events are fired, it stays `true` until all submit events have been fulfilled.
     *
     * @property isSubmitting
     * @type {Boolean}
     * @readonly
     * @private
     */
    get isSubmitting() {
      return this.pendingSubmissions > 0;
    }

    /**
     * `isSubmitted` is `true` if last submission was successful.
     * A change to any form element resets its value to `false`.
     *
     * If not using `Components.FormElement`, `resetSubmissionState` action must be triggered on each change to reset
     * form's submission state.
     *
     * @property isSubmitted
     * @type {Boolean}
     * @private
     */

    /**
     * State of the form expressed as state values expected by `<BsButton>`.
     *
     * @property submitButtonState
     * @type {String}
     * @private
     */
    get submitButtonState() {
      if (this.isSubmitting) {
        return 'pending';
      }
      if (this.isSubmitted) {
        return 'fulfilled';
      }
      if (this.isRejected) {
        return 'rejected';
      }
      return 'default';
    }

    /**
     * Count of pending submissions.
     *
     * @property pendingSubmissions
     * @type {Integer}
     * @private
     */

    /**
     * If true, after successful validation and upon submitting the form, all current element validations will be hidden.
     * If the form remains visible, the user would have to focus out of elements of submit the form again for the
     * validations to show up again, as if a fresh new form component had been rendered.
     *
     * @property hideValidationsOnSubmit
     * @type {Boolean}
     * @default false
     * @public
     */

    /**
     * If set to true the `readonly` property of all yielded form elements will be set, making their form controls read-only.
     *
     * @property readonly
     * @type boolean
     * @default false
     * @public
     */

    /**
     * If set to true the `disabled` property of all yielded form elements will be set, making their form controls disabled.
     *
     * @property disabled
     * @type boolean
     * @default false
     * @public
     */
    /**
     * Validate hook which will return a promise that will either resolve if the model is valid
     * or reject if it's not. This should be overridden to add validation support.
     *
     * @method validate
     * @param {Object} model
     * @param {HTMLFormElement} form
     * @return {Promise}
     * @public
     */
    validate(model, form) {} // eslint-disable-line no-unused-vars

    /**
     * @property showAllValidations
     * @type boolean
     * @default undefined
     * @private
     */

    /**
     * Action is called before the form is validated (if possible) and submitted.
     *
     * @event onBefore
     * @param { Object } model  The form's `model`
     * @public
     */

    /**
     * Action is called when submit has been triggered and the model has passed all validations (if present).
     *
     * @event onSubmit
     * @param { Object } model  The form's `model`
     * @param { Object } result The returned result from the validate method, if validation is available
     * @public
     */

    /**
     * Action is called when validation of the model has failed.
     *
     * @event onInvalid
     * @param { Object } model  The form's `model`
     * @param { Object } error
     * @public
     */
    /**
     * Submit handler that will send the default action ("action") to the controller when submitting the form.
     *
     * If there is a supplied `model` that supports validation (`hasValidator`) the model will be validated before, and
     * only if validation is successful the default action will be sent. Otherwise, an "invalid" action will be sent, and
     * all the `showValidation` property of all child `Components.FormElement`s will be set to true, so error state and
     * messages will be shown automatically.
     *
     * @method submit
     * @private
     */
    submitHandler(e, throwValidationErrors = true) {
      if (e) {
        e.preventDefault();
      }
      if (this.preventConcurrency && this.isSubmitting) {
        return _rsvp.default.resolve();
      }
      let model = this.model;
      this.pendingSubmissions++;
      this.args.onBefore?.(model);
      return _rsvp.default.resolve().then(() => {
        return this.hasValidator ? this.validate(model, this._element) : null;
      }).then(record => {
        if (this.args.hideValidationsOnSubmit === true) {
          this.showAllValidations = false;
        }
        return _rsvp.default.resolve().then(() => {
          return this.args.onSubmit?.(model, record);
        }).then(() => {
          if (this.isDestroyed) {
            return;
          }
          this.isSubmitted = true;
        }).catch(error => {
          if (this.isDestroyed) {
            return;
          }
          this.isRejected = true;
          throw error;
        }).finally(() => {
          if (this.isDestroyed) {
            return;
          }
          this.pendingSubmissions--;

          // reset forced hiding of validations
          if (this.showAllValidations === false) {
            (0, _runloop.next)(() => this.showAllValidations = undefined);
          }
        });
      }, error => {
        return _rsvp.default.resolve().then(() => {
          return this.args.onInvalid?.(model, error);
        }).finally(() => {
          if (this.isDestroyed) {
            return;
          }
          this.showAllValidations = true;
          this.isRejected = true;
          this.pendingSubmissions = this.pendingSubmissions - 1;
          if (throwValidationErrors) {
            throw error;
          }
        });
      });
    }
    handleSubmit(event) {
      this.submitHandler(event, false);
    }
    handleKeyPress(event) {
      let code = event.keyCode || event.which;
      if (code === 13 && this.args.submitOnEnter) {
        let submitEvent = document.createEvent('Event');
        submitEvent.initEvent('submit', true, true);
        event.target.dispatchEvent(submitEvent);
      }
    }
    constructor() {
      super(...arguments);
      /**
       * @property _element
       * @type null | HTMLFormElement
       * @private
       */
      _initializerDefineProperty(this, "_element", _descriptor, this);
      _initializerDefineProperty(this, "formLayout", _descriptor2, this);
      /**
       * Check if validating the model is supported. This needs to be implemented by another addon.
       *
       * @property hasValidator
       * @type boolean
       * @readonly
       * @protected
       */
      /**
       * The Bootstrap grid class for form labels. This is used by the `Components.FormElement` class as a default for the
       * whole form.
       *
       * @property horizontalLabelGridClass
       * @type string
       * @default 'col-md-4'
       * @public
       */
      _initializerDefineProperty(this, "horizontalLabelGridClass", _descriptor3, this);
      _initializerDefineProperty(this, "isSubmitted", _descriptor4, this);
      /**
       * `isRejected` is `true` if last submission was rejected.
       * A submission is considered as rejected if form is invalid as well as if `onSubmit` rejects.
       * A change to any form element resets its value to `false`.
       *
       * If not using `Components.FormElement`, `resetSubmissionState` action must be triggered on each change to reset
       * form's submission state.
       *
       * @property isRejected
       * @type {Boolean}
       * @private
       */
      _initializerDefineProperty(this, "isRejected", _descriptor5, this);
      _initializerDefineProperty(this, "pendingSubmissions", _descriptor6, this);
      /**
       * If set to true pressing enter will submit the form, even if no submit button is present
       *
       * @property submitOnEnter
       * @type boolean
       * @default false
       * @public
       */
      /**
       * Controls if `onSubmit` action is fired concurrently. If `true` submitting form multiple
       * times will not trigger `onSubmit` action if a Promise returned by previous submission is
       * not settled yet.
       *
       * Dropping a submission also prevents rerunning validation and `onBefore` hook.
       *
       * @property preventConcurrency
       * @type Boolean
       * @default true
       * @public
       */
      _initializerDefineProperty(this, "preventConcurrency", _descriptor7, this);
      _initializerDefineProperty(this, "showAllValidations", _descriptor8, this);
      let formLayout = this.formLayout;
      (true && !(['vertical', 'horizontal', 'inline'].indexOf(formLayout) >= 0) && (0, _debug.assert)(`Invalid formLayout property given: ${formLayout}`, ['vertical', 'horizontal', 'inline'].indexOf(formLayout) >= 0));
    }
    elementChanged(value, model, property) {
      (true && !((0, _utils.isPresent)(model) && (0, _utils.isPresent)(property)) && (0, _debug.assert)("You cannot use the form element's default onChange action for form elements if not using a model or setting the value directly on a form element. You must add your own onChange action to the form element in this case!", (0, _utils.isPresent)(model) && (0, _utils.isPresent)(property)));
      if (typeof model.set === 'function') {
        model.set(property, value);
      } else {
        (0, _object.set)(model, property, value);
      }
    }
    resetSubmissionState() {
      this.isSubmitted = false;
      this.isRejected = false;
    }
    doSubmit() {
      return this.submitHandler();
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_element", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "model", [_trackedToolbox.cached], Object.getOwnPropertyDescriptor(_class2.prototype, "model"), _class2.prototype), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "formLayout", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 'vertical';
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "horizontalLabelGridClass", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 'col-md-4';
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "isSubmitted", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "isRejected", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "pendingSubmissions", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 0;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "preventConcurrency", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "showAllValidations", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return undefined;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "handleSubmit", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "handleSubmit"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "handleKeyPress", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "handleKeyPress"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "elementChanged", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "elementChanged"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "resetSubmissionState", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "resetSubmissionState"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "doSubmit", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "doSubmit"), _class2.prototype)), _class2)) || _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, Form);
});
;define("ember-bootstrap/components/bs-form/element", ["exports", "@ember/component", "@glimmer/component", "@glimmer/tracking", "@ember/object", "@ember/debug", "@ember/utils", "@ember/array", "@ember/application", "@ember/object/internals", "ember-ref-bucket", "ember-bootstrap/components/bs-form/element/control/input", "ember-bootstrap/components/bs-form/element/control/checkbox", "ember-bootstrap/components/bs-form/element/control/textarea", "ember-bootstrap/components/bs-form/element/control/radio", "ember-bootstrap/components/bs-form/element/control/switch", "ember-bootstrap/utils/decorators/arg", "tracked-toolbox", "@ember/template-factory"], function (_exports, _component, _component2, _tracking, _object, _debug, _utils, _array, _application, _internals, _emberRefBucket, _input, _checkbox, _textarea, _radio, _switch, _arg, _trackedToolbox, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@glimmer/component",0,"@glimmer/tracking",0,"@ember/object",0,"@ember/debug",0,"@ember/utils",0,"@ember/array",0,"@ember/application",0,"@ember/object/internals",0,"ember-ref-bucket",0,"ember-bootstrap/components/bs-form/element/control/input",0,"ember-bootstrap/components/bs-form/element/control/checkbox",0,"ember-bootstrap/components/bs-form/element/control/textarea",0,"ember-bootstrap/components/bs-form/element/control/radio",0,"ember-bootstrap/components/bs-form/element/control/switch",0,"ember-bootstrap/utils/decorators/arg",0,"tracked-toolbox",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    {{!-- template-lint-disable no-invalid-interactive --}}
  <div
    class="{{if (macroCondition (macroGetOwnConfig "isNotBS5")) "form-group"}} {{if (macroCondition (macroGetOwnConfig "isBS5")) (if (bs-eq @formLayout "vertical") "mb-3")}} {{if (bs-eq @formLayout "horizontal") (if (macroCondition (macroGetOwnConfig "isBS5")) "row mb-3" "row")}}"
    ...attributes
    {{create-ref "mainNode"}}
    {{on "focusout" this.showValidationOnHandler}}
    {{on "change" this.showValidationOnHandler}}
    {{on "input" this.showValidationOnHandler}}
    {{did-update this.handleShowAllValidationsChange this.showAllValidations}}
  >
    {{#component
      (ensure-safe-component
        (bs-default
          @layoutComponent
          (if
            (bs-contains (array "checkbox" "switch") this.controlType)
            (if
              (bs-eq @formLayout "inline")
              (component "bs-form/element/layout/inline/checkbox" controlType=this.controlType)
              (if
                (bs-eq @formLayout "horizontal")
                (component "bs-form/element/layout/horizontal/checkbox" controlType=this.controlType)
                (component "bs-form/element/layout/vertical/checkbox" controlType=this.controlType)
              )
            )
            (if
              (bs-eq @formLayout "inline")
              (component "bs-form/element/layout/inline")
              (if
                (bs-eq @formLayout "horizontal")
                (component "bs-form/element/layout/horizontal")
                (component "bs-form/element/layout/vertical")
              )
            )
          )
        )
      )
      hasLabel=(if @label true false)
      formElementId=this.formElementId
      horizontalLabelGridClass=@horizontalLabelGridClass
      errorsComponent=(component (ensure-safe-component (bs-default @errorsComponent (component "bs-form/element/errors")))
        messages=this.validationMessages
        show=this.showValidationMessages
        showMultipleErrors=this.showMultipleErrors
      )
      feedbackIconComponent=(component (ensure-safe-component (bs-default @feedbackIconComponent (component "bs-form/element/feedback-icon")))
        iconName=@iconName
        show=this.hasFeedback
      )
      labelComponent=(component
        (ensure-safe-component
          (bs-default
            @labelComponent
            (if
              (bs-eq this.controlType "radio")
              (component "bs-form/element/legend")
              (component "bs-form/element/label")
            )
          )
        )
        label=@label
        invisibleLabel=@invisibleLabel
        formElementId=this.formElementId
        controlType=this.controlType
        formLayout=@formLayout
        size=@size
      )
      helpTextComponent=(if @helpText
        (component (ensure-safe-component (bs-default @helpTextComponent (component "bs-form/element/help-text")))
          text=@helpText
          id=this.ariaDescribedBy
        )
      )
    }}
      {{!
        Ember does not allow to access a variable with `@` in template if its name start with an underscore.
        `@_disabled` and `@_readonly` are affected by this. As a work-a-round we access them on `this.args`.
      }}
      {{!-- template-lint-disable no-args-paths --}}
      {{#let
        (component
          (ensure-safe-component
            (bs-default
              @controlComponent
              this.controlComponent
            )
          )
          value=this.value
          id=this.formElementId
          type=this.controlType
          label=@label
          disabled=this.args._disabled
          readonly=this.args._readonly
          required=@required
          options=@options
          optionLabelPath=@optionLabelPath
          ariaDescribedBy=(if @helpText this.ariaDescribedBy)
          onChange=this.doChange
          validationType=this.validation
          size=@size
      ) as |Control|}}
      {{!-- template-lint-enable no-args-paths --}}
        {{#if (has-block)}}
          {{yield
            (hash
              value=this.value
              setValue=this.doChange
              id=this.formElementId
              validation=this.validation
              control=Control
            )
          }}
        {{else}}
          <Control />
        {{/if}}
      {{/let}}
    {{/component}}
  </div>
  
  */
  {
    "id": "qBtBRDP+",
    "block": "[[[11,0],[16,0,[29,[[27],\" \",[52,[28,[37,1],[[30,1],\"vertical\"],null],\"mb-3\"],\" \",[52,[28,[37,1],[[30,1],\"horizontal\"],null],\"row mb-3\"]]]],[17,2],[4,[38,2],[\"mainNode\"],[[\"debugName\",\"bucket\"],[\"create-ref\",[30,0]]]],[4,[38,3],[\"focusout\",[30,0,[\"showValidationOnHandler\"]]],null],[4,[38,3],[\"change\",[30,0,[\"showValidationOnHandler\"]]],null],[4,[38,3],[\"input\",[30,0,[\"showValidationOnHandler\"]]],null],[4,[38,4],[[30,0,[\"handleShowAllValidationsChange\"]],[30,0,[\"showAllValidations\"]]],null],[12],[1,\"\\n\"],[46,[28,[37,6],[[28,[37,7],[[30,3],[52,[28,[37,8],[[28,[37,9],[\"checkbox\",\"switch\"],null],[30,0,[\"controlType\"]]],null],[52,[28,[37,1],[[30,1],\"inline\"],null],[50,\"bs-form/element/layout/inline/checkbox\",0,null,[[\"controlType\"],[[30,0,[\"controlType\"]]]]],[52,[28,[37,1],[[30,1],\"horizontal\"],null],[50,\"bs-form/element/layout/horizontal/checkbox\",0,null,[[\"controlType\"],[[30,0,[\"controlType\"]]]]],[50,\"bs-form/element/layout/vertical/checkbox\",0,null,[[\"controlType\"],[[30,0,[\"controlType\"]]]]]]],[52,[28,[37,1],[[30,1],\"inline\"],null],[50,\"bs-form/element/layout/inline\",0,null,null],[52,[28,[37,1],[[30,1],\"horizontal\"],null],[50,\"bs-form/element/layout/horizontal\",0,null,null],[50,\"bs-form/element/layout/vertical\",0,null,null]]]]],null]],null],null,[[\"hasLabel\",\"formElementId\",\"horizontalLabelGridClass\",\"errorsComponent\",\"feedbackIconComponent\",\"labelComponent\",\"helpTextComponent\"],[[52,[30,4],true,false],[30,0,[\"formElementId\"]],[30,5],[50,[28,[37,6],[[28,[37,7],[[30,6],[50,\"bs-form/element/errors\",0,null,null]],null]],null],0,null,[[\"messages\",\"show\",\"showMultipleErrors\"],[[30,0,[\"validationMessages\"]],[30,0,[\"showValidationMessages\"]],[30,0,[\"showMultipleErrors\"]]]]],[50,[28,[37,6],[[28,[37,7],[[30,7],[50,\"bs-form/element/feedback-icon\",0,null,null]],null]],null],0,null,[[\"iconName\",\"show\"],[[30,8],[30,0,[\"hasFeedback\"]]]]],[50,[28,[37,6],[[28,[37,7],[[30,9],[52,[28,[37,1],[[30,0,[\"controlType\"]],\"radio\"],null],[50,\"bs-form/element/legend\",0,null,null],[50,\"bs-form/element/label\",0,null,null]]],null]],null],0,null,[[\"label\",\"invisibleLabel\",\"formElementId\",\"controlType\",\"formLayout\",\"size\"],[[30,4],[30,10],[30,0,[\"formElementId\"]],[30,0,[\"controlType\"]],[30,1],[30,11]]]],[52,[30,12],[50,[28,[37,6],[[28,[37,7],[[30,13],[50,\"bs-form/element/help-text\",0,null,null]],null]],null],0,null,[[\"text\",\"id\"],[[30,12],[30,0,[\"ariaDescribedBy\"]]]]]]]],[[\"default\"],[[[[44,[[50,[28,[37,6],[[28,[37,7],[[30,14],[30,0,[\"controlComponent\"]]],null]],null],0,null,[[\"value\",\"id\",\"type\",\"label\",\"disabled\",\"readonly\",\"required\",\"options\",\"optionLabelPath\",\"ariaDescribedBy\",\"onChange\",\"validationType\",\"size\"],[[30,0,[\"value\"]],[30,0,[\"formElementId\"]],[30,0,[\"controlType\"]],[30,4],[30,0,[\"args\",\"_disabled\"]],[30,0,[\"args\",\"_readonly\"]],[30,15],[30,16],[30,17],[52,[30,12],[30,0,[\"ariaDescribedBy\"]]],[30,0,[\"doChange\"]],[30,0,[\"validation\"]],[30,11]]]]],[[[41,[48,[30,19]],[[[1,\"        \"],[18,19,[[28,[37,13],null,[[\"value\",\"setValue\",\"id\",\"validation\",\"control\"],[[30,0,[\"value\"]],[30,0,[\"doChange\"]],[30,0,[\"formElementId\"]],[30,0,[\"validation\"]],[30,18]]]]]],[1,\"\\n\"]],[]],[[[1,\"        \"],[8,[30,18],null,null,null],[1,\"\\n\"]],[]]]],[18]]]],[]]]]],[13],[1,\"\\n\"]],[\"@formLayout\",\"&attrs\",\"@layoutComponent\",\"@label\",\"@horizontalLabelGridClass\",\"@errorsComponent\",\"@feedbackIconComponent\",\"@iconName\",\"@labelComponent\",\"@invisibleLabel\",\"@size\",\"@helpText\",\"@helpTextComponent\",\"@controlComponent\",\"@required\",\"@options\",\"@optionLabelPath\",\"Control\",\"&default\"],false,[\"if\",\"bs-eq\",\"create-ref\",\"on\",\"did-update\",\"component\",\"ensure-safe-component\",\"bs-default\",\"bs-contains\",\"array\",\"let\",\"has-block\",\"yield\",\"hash\"]]",
    "moduleName": "ember-bootstrap/components/bs-form/element.hbs",
    "isStrictMode": false
  });

  /**
    Subclass of `Components.FormGroup` that adds automatic form layout markup and form validation features.
  
    ### Form layout
  
    The appropriate Bootstrap markup for the given `formLayout` and `controlType` is automatically generated to easily
    create forms without coding the default Bootstrap form markup by hand:
  
    ```handlebars
    <BsForm @formLayout="horizontal" @model={{this}} @onSubmit={{action "submit"}} as |form|>
      <form.element @controlType="email" @label="Email" @value={{this.email}}" />
      <form.element @controlType="password" @label="Password" @value={{this.password}} />
      <form.element @controlType="checkbox" @label="Remember me" @value={{this.rememberMe}} />
      <BsButton @defaultText="Submit" @type="primary" type="submit" />
    </BsForm>
    ```
  
    ### Control types
  
    The following control types are supported out of the box:
  
    * Inputs (simple `text`, or any other HTML5 supported input types like `password`, `email` etc.)
    * Checkbox (single)
    * Radio Button (group)
    * Textarea
    * Switch (BS4 Only)
  
    #### Radio Buttons
  
    For a group of mutually exclusive radio buttons to work, you must supply the `options` property with an array of
    options, each of which will be rendered with an appropriate radio button and its label. It can be either a simple array
    of strings or objects. In the latter case, you would have to set `optionLabelPath` to the property, that contains the
    label on these objects.
  
    ```hbs
    <BsForm @model={{this}} @onSubmit={{action "submit"}} as |form|>
      <form.element @controlType="radio" @label="Gender" @options={{this.genderOptions}} @optionLabelPath="title" @property="gender" />
    </BsForm>
    ```
  
    The default layout for radios is stacked, but Bootstrap's inline layout is also supported using the `inline` property
    of the yielded control component:
  
    ```hbs
    <BsForm @model={{this}} @onSubmit={{action "submit"}} as |form|>
      <form.element @controlType="radio" @label="Gender" @options={{this.genderOptions}} @property="gender" as |el|>
        <el.control @inline={{true}} />
      </form.element>
    </BsForm>
    ```
  
    #### Custom controls
  
    Apart from the standard built-in browser controls (see the `controlType` property), you can use any custom control simply
    by invoking the component with a block template. Use whatever control you might want, for example a `<PikadayInput>`
    component (from the [ember-pikaday addon](https://github.com/adopted-ember-addons/ember-pikaday)):
  
    ```hbs
    <BsForm @model={{this}} @onSubmit={{action "submit"}} as |form|>
      <form.element @label="Select-2" @property="gender" as |el|>
        <PikadayInput @value={{el.value}} @onSelection={{action el.setValue}} id={{el.id}} />
      </form.element>
    </BsForm>
    ```
  
    The component yields a hash with the following properties:
    * `control`: the component that would be used for rendering the form control based on the given `controlType`
    * `id`: id to be used for the form control, so it matches the labels `for` attribute
    * `value`: the value of the form element
    * `setValue`: function to change the value of the form element
    * `validation`: the validation state of the element, `null` if no validation is to be shown, otherwise 'success', 'error' or 'warning'
  
    If you just want to customize the existing control component, you can use the aforementioned yielded `control` component
    to customize that existing component:
  
    ```hbs
    <BsForm @model={{this}} @onSubmit={{action "submit"}} as |form|>
      <form.element @label="Email" @property="email" as |el|>
        <el.control class="input-lg" placeholder="Email" />
      </form.element>
    </BsForm>
    ```
  
    If you are using the custom control quite often, you should consider writing an integration plugin like
    [`ember-bootstrap-power-select`](https://github.com/kaliber5/ember-bootstrap-power-select).
    To do so, you need to provide a component `{{bs-form/element/control/my-custom-control}}` which extends
    [`Components.FormElementControl`](Components.FormElementControl.html).
  
    ### Form validation
  
    In the following example the control elements of the three form elements value will be bound to the properties
    (given by `property`) of the form's `model`, which in this case is its controller (see `model=this`):
  
    ```handlebars
    <BsForm @formLayout="horizontal" @model={{this}} @onSubmit={{action "submit"}} as |form|>
      <form.element @controlType="email" @label="Email" @property="email" />
      <form.element @controlType="password" @label="Password" @property="password" />
      <form.element @controlType="checkbox" @label="Remember me" @property="rememberMe" />
      <BsButton @defaultText="Submit" @type="primary" @buttonType="submit" />
    </BsForm>
    ```
  
    By using this indirection in comparison to directly binding the `value` property, you get the benefit of automatic
    form validation, given that your `model` has a supported means of validating itself.
    See [Components.Form](Components.Form.html) for details on how to enable form validation.
  
    In the example above the `model` was our controller itself, so the control elements were bound to the appropriate
    properties of our controller. A controller implementing validations on those properties could look like this:
  
    ```js
    import Ember from 'ember';
    import EmberValidations from 'ember-validations';
  
    export default Ember.Controller.extend(EmberValidations,{
      email: null,
      password: null,
      rememberMe: false,
      validations: {
        email: {
          presence: true,
          format: {
            with: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/
          }
        },
        password: {
          presence: true,
          length: { minimum: 6, maximum: 10}
        },
        comments: {
          length: { minimum: 5, maximum: 20}
        }
      }
    });
    ```
  
    If the `showValidation` property is `true` (which is automatically the case if a `focusOut` event is captured from the
    control element or the containing `Components.Form` was submitted with its `model` failing validation) and there are
    validation errors for the `model`'s `property`, the appropriate Bootstrap validation markup (see
    http://getbootstrap.com/css/#forms-control-validation) is applied:
  
    * `validation` is set to 'error', which will set the `has-error` CSS class
    * the `errorIcon` feedback icon is displayed if `controlType` is a text field
    * the validation messages are displayed as Bootstrap `help-block`s in BS3 and `form-control-feedback` in BS4
  
    The same applies for warning messages, if the used validation library supports this. (Currently only
    [ember-cp-validations](https://github.com/offirgolan/ember-cp-validations))
  
    As soon as the validation is successful again...
  
    * `validation` is set to 'success', which will set the `has-success` CSS class
    * the `successIcon` feedback icon is displayed if `controlType` is a text field
    * the validation messages are removed
  
    In case you want to display some error or warning message that is independent of the model's validation, for
    example to display a failure message on a login form after a failed authentication attempt (so not coming from
    the validation library), you can use the `customError` or `customWarning` properties to do so.
  
    ### HTML attributes
  
    To set HTML attributes on the control element provided by this component when using the modern angle bracket invocation,
    you can pass them to the yielded `control` component:
  
    ```hbs
    <BsForm @formLayout="horizontal" @model={{this}} @onSubmit={{action "submit"}} as |form|>
    <form.element @controlType="email" @label="Email" @property="email" as |el|>
      <el.control
        placeholder="Email"
        tabindex={{5}}
        multiple
        required
      />
    </form.element>
    ...
    </BsForm>
    ```
  
    @class FormElement
    @namespace Components
    @extends Components.FormGroup
    @public
  */
  let FormElement = _exports.default = (_dec = (0, _emberRefBucket.ref)('mainNode'), (_class = class FormElement extends _component2.default {
    /**
     * The value of the control element is bound to this property:
     *
     * ```hbs
     * <form.element @controlType="email" @label="Email" @value={{this.email}} />
     * ```
     *
     * Note two things:
     * * the binding is uni-directional (DDAU), so you would have to use the `onChange` action to subscribe to changes.
     * * you lose the ability to validate this form element by directly binding to its value. It is recommended
     * to use the `property` feature instead.
     *
     * @property value
     * @public
     */
    get value() {
      (true && !((0, _utils.isBlank)(this.args.property) || (0, _utils.isBlank)(this.args.value)) && (0, _debug.assert)('You can not set both property and value on a form element', (0, _utils.isBlank)(this.args.property) || (0, _utils.isBlank)(this.args.value)));
      if (this.args.property && this.args.model) {
        return (0, _object.get)(this.args.model, this.args.property);
      }
      return this.args.value;
    }

    /**
     The property name of the form element's `model` (by default the `model` of its parent `Components.Form`) that this
     form element should represent. The control element's value will automatically be bound to the model property's
     value.
      Using this property enables form validation on this element.
      @property property
     @type string
     @public
     */

    /**
     * The model used for validation. Defaults to the parent `Components.Form`'s `model`
     *
     * @property model
     * @public
     */

    /**
     * Show a help text next to the control
     *
     * @property helpText
     * @type {string}
     * @public
     */

    /**
     * Only if there is a validator, this property makes all errors to be displayed at once
     * inside a scrollable container.
     *
     * @default false
     * @property showMultipleErrors
     * @public
     * @type {Boolean}
     */

    /**
     * @property hasErrors
     * @type boolean
     * @readonly
     * @private
     */
    get hasErrors() {
      return Array.isArray(this.errors) && this.errors.length > 0;
    }

    /**
     * The array of warning messages from the `model`'s validation.
     *
     * @property warnings
     * @type array
     * @protected
     */
    // This shouldn't be an argument. It's only an argument because tests rely on
    // setting it as an argument. See https://github.com/kaliber5/ember-bootstrap/issues/1338
    // for details.

    /**
     * @property hasWarnings
     * @type boolean
     * @readonly
     * @private
     */
    get hasWarnings() {
      return Array.isArray(this.warnings) && this.warnings.length > 0;
    }

    /**
     * Show a custom error message that does not come from the model's validation. Will be immediately shown, regardless
     * of any user interaction (i.e. no `focusOut` event required)
     *
     * @property customError
     * @type string
     * @public
     */

    /**
     * @property hasCustomError
     * @type boolean
     * @readonly
     * @private
     */
    get hasCustomError() {
      return (0, _utils.isPresent)(this.args.customError);
    }

    /**
     * Show a custom warning message that does not come from the model's validation. Will be immediately shown, regardless
     * of any user interaction (i.e. no `focusOut` event required). If the model's validation has an error then the error
     * will be shown in place of this warning.
     *
     * @property customWarning
     * @type string
     * @public
     */

    /**
     * @property hasCustomWarning
     * @type boolean
     * @readonly
     * @private
     */
    get hasCustomWarning() {
      return (0, _utils.isPresent)(this.args.customWarning);
    }

    /**
     * Property for size styling, set to 'lg', 'sm' or 'xs' (the latter only for BS3)
     *
     * @property size
     * @type String
     * @public
     */

    /**
     * The array of validation messages (either errors or warnings) from either custom error/warnings or , if we are showing model validation messages, the model's validation
     *
     * @property validationMessages
     * @type array
     * @private
     */
    get validationMessages() {
      if (this.hasCustomError) {
        return (0, _array.A)([this.args.customError]);
      }
      if (this.hasErrors && this.showModelValidation) {
        return (0, _array.A)(this.errors);
      }
      if (this.hasCustomWarning) {
        return (0, _array.A)([this.args.customWarning]);
      }
      if (this.hasWarnings && this.showModelValidation) {
        return (0, _array.A)(this.warnings);
      }
      return null;
    }

    /**
     * @property hasValidationMessages
     * @type boolean
     * @readonly
     * @private
     */
    get hasValidationMessages() {
      return Array.isArray(this.validationMessages) && this.validationMessages.length > 0;
    }

    /**
     * Set a validating state for async validations
     *
     * @property isValidating
     * @type boolean
     * @default false
     * @protected
     */

    /**
     * If `true` form validation markup is rendered (requires a validatable `model`).
     *
     * @property showValidation
     * @type boolean
     * @default false
     * @private
     */
    get showValidation() {
      return this.showOwnValidation || this.showAllValidations || this.hasCustomError || this.hasCustomWarning;
    }

    /**
     * @property showOwnValidation
     * @type boolean
     * @default false
     * @private
     */

    /*
     * Resets `showOwnValidation` if `@showAllValidations` argument is changed to `false`.
     * Must be called whenever `@showAllValidations` argument changes.
     */
    handleShowAllValidationsChange() {
      if (this.args.showAllValidations === false) {
        this.showOwnValidation = false;
      }
    }

    /**
     * @property showModelValidations
     * @type boolean
     * @readonly
     * @private
     */
    get showModelValidation() {
      return this.showOwnValidation || this.showAllValidations;
    }

    /**
     * @property showValidationMessages
     * @type boolean
     * @readonly
     * @private
     */
    get showValidationMessages() {
      return this.showValidation && this.hasValidationMessages;
    }

    /**
     * Event or list of events which enable form validation markup rendering.
     * Supported events: ['focusout', 'change', 'input']
     *
     * @property showValidationOn
     * @type string|array
     * @default ['focusout']
     * @public
     */

    /**
     * @property _showValidationOn
     * @type array
     * @readonly
     * @private
     */
    get _showValidationOn() {
      let showValidationOn = this.showValidationOn;
      (true && !((0, _array.isArray)(showValidationOn) || (0, _utils.typeOf)(showValidationOn) === 'string') && (0, _debug.assert)('showValidationOn must be a String or an Array', (0, _array.isArray)(showValidationOn) || (0, _utils.typeOf)(showValidationOn) === 'string'));
      if ((0, _array.isArray)(showValidationOn)) {
        return showValidationOn.map(type => {
          return type.toLowerCase();
        });
      }
      if (typeof showValidationOn.toString === 'function') {
        return [showValidationOn.toLowerCase()];
      }
      return [];
    }

    /**
     * @method showValidationOnHandler
     * @param {Event} event
     * @private
     */
    showValidationOnHandler({
      target,
      type
    }) {
      // Should not do anything if
      if (
      // validations should not be shown for this event type or
      this._showValidationOn.indexOf(type) === -1 ||
      // validation should not be shown for this event target
      (0, _array.isArray)(this.doNotShowValidationForEventTargets) && this.doNotShowValidationForEventTargets.length > 0 && this._element && [...this._element.querySelectorAll(this.doNotShowValidationForEventTargets.join(','))].some(el => el.contains(target))) {
        return;
      }
      this.showOwnValidation = true;
    }

    /**
     * Controls if validation should be shown for specified event targets.
     *
     * It expects an array of query selectors. If event target is a children of an event that matches
     * these selectors, an event triggered for it will not trigger validation errors to be shown.
     *
     * By default, events fired on elements inside an input group are skipped.
     *
     * If `null` or an empty array is passed validation errors are shown for all events regardless
     * of event target.
     *
     * @property doNotShowValidationForEventTargets
     * @type ?array
     * @public
     */

    /**
     * The validation ("error" (BS3)/"danger" (BS4), "warning", or "success") or null if no validation is to be shown. Automatically computed from the
     * model's validation state.
     *
     * @property validation
     * @readonly
     * @type string
     * @private
     */
    get validation() {
      const shouldShowValidationState = this.showModelValidation && this.hasValidator && !this.isValidating && !this.args._disabled;
      if ( /* custom errors should be always shown */
      this.hasCustomError || /* validation error should be shown in preference to warnings */
      shouldShowValidationState && this.hasErrors) {
        return 'error';
      }
      if ( /* custom warning should be always shown unless there is a validation error */
      this.hasCustomWarning || shouldShowValidationState && this.hasWarnings) {
        return 'warning';
      }
      if (shouldShowValidationState) {
        return 'success';
      }
      return null;
    }

    /**
     * The form layout used for the markup generation (see http://getbootstrap.com/css/#forms):
     *
     * * 'horizontal'
     * * 'vertical'
     * * 'inline'
     *
     * Defaults to the parent `form`'s `formLayout` property.
     *
     * @property formLayout
     * @type string
     * @default 'vertical'
     * @public
     */

    /**
     * The Bootstrap grid class for form labels within a horizontal layout form. Defaults to the value of the same
     * property of the parent form. The corresponding grid class for form controls is automatically computed.
     *
     * @property horizontalLabelGridClass
     * @type string
     * @public
     */

    /**
     * ID for input field and the corresponding label's "for" attribute
     *
     * @property formElementId
     * @type string
     * @private
     */
    get formElementId() {
      return `${this._elementId}-field`;
    }

    /**
     * ID of the helpText, used for aria-describedby attribute of the control element
     *
     * @property ariaDescribedBy
     * @type string
     * @private
     */
    get ariaDescribedBy() {
      return `${this._elementId}-help`;
    }

    /**
     * @property layoutComponent
     * @type {String}
     * @private
     */

    /**
     * @property controlComponent
     * @private
     */
    get controlComponent() {
      let owner = (0, _application.getOwner)(this);
      let componentClass = owner.resolveRegistration(`component:bs-form/element/control/${this.controlType}`);
      if (componentClass) {
        return componentClass;
      }
      if (this.controlType === 'checkbox') {
        return _checkbox.default;
      } else if (this.controlType === 'textarea') {
        return _textarea.default;
      } else if (this.controlType === 'radio') {
        return _radio.default;
      } else if (this.controlType === 'switch') {
        return _switch.default;
      } else {
        return _input.default;
      }
    }

    /**
     * @property errorsComponent
     * @type {String}
     * @private
     */

    /**
     * @property feedbackIconComponent
     * @type {String}
     * @private
     */

    /**
     * @property labelComponent
     * @type {String}
     * @private
     */

    /**
     * @property helpTextComponent
     * @type {String}
     * @private
     */

    /**
     * Setup validation properties. This method acts as a hook for external validation
     * libraries to overwrite. In case of failed validations the `errors` property should contain an array of error messages.
     *
     * @method setupValidations
     * @private
     */

    /**
     * The action is called whenever the input value is changed, e.g. by typing text
     *
     * @event onChange
     * @param {String} value The new value of the form control
     * @param {Object} model The form element's model
     * @param {String} property The value of `property`
     * @public
     */

    /**
     * Private duplicate of onChange event used for internal state handling between form and it's elements.
     *
     * @event _onChange
     * @private
     */

    constructor() {
      super(...arguments);
      /**
       * @property _element
       * @type null | HTMLElement
       * @private
       */
      _initializerDefineProperty(this, "_element", _descriptor, this);
      /**
       * Text to display within a `<label>` tag.
       *
       * You should include a label for every form input cause otherwise screen readers
       * will have trouble with your forms. Use `invisibleLabel` property if you want
       * to hide them.
       *
       * @property label
       * @type string
       * @public
       */
      /**
       * Controls label visibility by adding 'sr-only' class.
       *
       * @property invisibleLabel
       * @type boolean
       * @default false
       * @public
       */
      /**
       * The type of the control widget.
       * Supported types:
       *
       * * 'text'
       * * 'checkbox'
       * * 'radio'
       * * 'switch'
       * * 'textarea'
       * * any other type will use an input tag with the `controlType` value as the type attribute (for e.g. HTML5 input
       * types like 'email'), and the same layout as the 'text' type
       *
       * @property controlType
       * @type string
       * @default 'text'
       * @public
       */
      _initializerDefineProperty(this, "controlType", _descriptor2, this);
      _initializerDefineProperty(this, "showMultipleErrors", _descriptor3, this);
      /**
       * Array of options for control types that show a selection (e.g. radio button groups)
       * Can be an array of simple strings or objects. For objects use `optionLabelPath` to specify the path containing the
       * label.
       *
       * @property options
       * @type {Array}
       * @public
       */
      /**
       * Property path (e.g. 'title' or 'related.name') to render the label of a selection option. See `options`.
       *
       * @property optionLabelPath
       * @type {String}
       * @public
       */
      /**
       * The array of error messages from the `model`'s validation.
       *
       * @property errors
       * @type array
       * @protected
       */
      // This shouldn't be an argument. It's only an argument because tests rely on
      // setting it as an argument. See https://github.com/kaliber5/ember-bootstrap/issues/1338
      // for details.
      _initializerDefineProperty(this, "errors", _descriptor4, this);
      _initializerDefineProperty(this, "warnings", _descriptor5, this);
      _initializerDefineProperty(this, "isValidating", _descriptor6, this);
      _initializerDefineProperty(this, "showOwnValidation", _descriptor7, this);
      /**
       * @property showAllValidations
       * @type boolean
       * @default false
       * @private
       */
      _initializerDefineProperty(this, "showAllValidations", _descriptor8, this);
      _initializerDefineProperty(this, "showValidationOn", _descriptor9, this);
      _initializerDefineProperty(this, "doNotShowValidationForEventTargets", _descriptor10, this);
      _defineProperty(this, "_elementId", (0, _internals.guidFor)(this));
      if (!(0, _utils.isBlank)(this.args.property)) {
        this.setupValidations?.();
      }
    }
    doChange(value) {
      let {
        onChange,
        model,
        property,
        _onChange
      } = this.args;
      onChange?.(value, model, property);
      _onChange?.();
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "_element", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "controlType", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 'text';
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "showMultipleErrors", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "errors", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "warnings", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "isValidating", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "showOwnValidation", [_trackedToolbox.dedupeTracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "showAllValidations", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "handleShowAllValidationsChange", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "handleShowAllValidationsChange"), _class.prototype), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, "showValidationOn", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return ['focusOut'];
    }
  }), _applyDecoratedDescriptor(_class.prototype, "showValidationOnHandler", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "showValidationOnHandler"), _class.prototype), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, "doNotShowValidationForEventTargets", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return ['.input-group-append', '.input-group-prepend'];
    }
  }), _applyDecoratedDescriptor(_class.prototype, "doChange", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "doChange"), _class.prototype)), _class));
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, FormElement);
});
;define("ember-bootstrap/components/bs-form/element/control", ["exports", "@glimmer/component", "ember-bootstrap/utils/form-validation-class"], function (_exports, _component, _formValidationClass) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"@glimmer/component",0,"ember-bootstrap/utils/form-validation-class"eaimeta@70e063a35619d71f
  /**
  
   @class FormElementControl
   @namespace Components
   @extends Ember.Component
   @private
   */
  class FormElementControl extends _component.default {
    /**
     * @property value
     * @public
     */

    get formValidationClass() {
      return (0, _formValidationClass.default)(this.args.validationType);
    }

    /**
     * This action is called whenever the `value` changes
     *
     * @event onChange
     * @param {*} value
     * @public
     */
  }
  _exports.default = FormElementControl;
});
;define("ember-bootstrap/components/bs-form/element/control/checkbox", ["exports", "@ember/component", "@ember/object", "ember-bootstrap/components/bs-form/element/control", "ember-bootstrap/utils/deprecate-subclassing", "@ember/template-factory"], function (_exports, _component, _object, _control, _deprecateSubclassing, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _class2;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/object",0,"ember-bootstrap/components/bs-form/element/control",0,"ember-bootstrap/utils/deprecate-subclassing",0,"@ember/component"eaimeta@70e063a35619d71f
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <input
    type="checkbox"
    id={{@id}}
    disabled={{@disabled}}
    readonly={{@readonly}}
    aria-describedby={{@ariaDescribedBy}}
    checked={{@value}}
    class="form-check-input {{this.formValidationClass}}"
    ...attributes
    {{on "click" this.handleClick}}
  >
  
  
  */
  {
    "id": "QzkdD5kY",
    "block": "[[[11,\"input\"],[24,4,\"checkbox\"],[16,1,[30,1]],[16,\"disabled\",[30,2]],[16,\"readonly\",[30,3]],[16,\"aria-describedby\",[30,4]],[16,\"checked\",[30,5]],[16,0,[29,[\"form-check-input \",[30,0,[\"formValidationClass\"]]]]],[17,6],[4,[38,0],[\"click\",[30,0,[\"handleClick\"]]],null],[12],[13],[1,\"\\n\\n\"]],[\"@id\",\"@disabled\",\"@readonly\",\"@ariaDescribedBy\",\"@value\",\"&attrs\"],false,[\"on\"]]",
    "moduleName": "ember-bootstrap/components/bs-form/element/control/checkbox.hbs",
    "isStrictMode": false
  });

  /**
  
   @class FormElementControlCheckbox
   @namespace Components
   @extends Components.FormElementControl
   @private
   */
  let FormElementControlCheckbox = _exports.default = (0, _deprecateSubclassing.default)(_class = (_class2 = class FormElementControlCheckbox extends _control.default {
    handleClick(event) {
      this.args.onChange(event.target.checked);
    }
  }, (_applyDecoratedDescriptor(_class2.prototype, "handleClick", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "handleClick"), _class2.prototype)), _class2)) || _class;
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, FormElementControlCheckbox);
});
;define("ember-bootstrap/components/bs-form/element/control/input", ["exports", "@ember/component", "@ember/object", "ember-bootstrap/components/bs-form/element/control", "ember-bootstrap/utils/size-class", "ember-bootstrap/utils/deprecate-subclassing", "@ember/template-factory"], function (_exports, _component, _object, _control, _sizeClass, _deprecateSubclassing, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _class2;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/object",0,"ember-bootstrap/components/bs-form/element/control",0,"ember-bootstrap/utils/size-class",0,"ember-bootstrap/utils/deprecate-subclassing",0,"@ember/component"eaimeta@70e063a35619d71f
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <input
    type={{bs-default @type "text"}}
    id={{@id}}
    disabled={{@disabled}}
    readonly={{@readonly}}
    aria-describedby={{@ariaDescribedBy}}
    value={{@value}}
    class="form-control {{this.formValidationClass}} {{this.sizeClass}}"
    ...attributes
    {{on "change" this.handleChange}}
    {{on "input" this.handleInput}}
  >
  */
  {
    "id": "A1MCANYC",
    "block": "[[[11,\"input\"],[16,4,[28,[37,0],[[30,1],\"text\"],null]],[16,1,[30,2]],[16,\"disabled\",[30,3]],[16,\"readonly\",[30,4]],[16,\"aria-describedby\",[30,5]],[16,2,[30,6]],[16,0,[29,[\"form-control \",[30,0,[\"formValidationClass\"]],\" \",[30,0,[\"sizeClass\"]]]]],[17,7],[4,[38,1],[\"change\",[30,0,[\"handleChange\"]]],null],[4,[38,1],[\"input\",[30,0,[\"handleInput\"]]],null],[12],[13]],[\"@type\",\"@id\",\"@disabled\",\"@readonly\",\"@ariaDescribedBy\",\"@value\",\"&attrs\"],false,[\"bs-default\",\"on\"]]",
    "moduleName": "ember-bootstrap/components/bs-form/element/control/input.hbs",
    "isStrictMode": false
  });

  /**
  
   @class FormElementControlInput
   @namespace Components
   @extends Components.FormElementControl
   @private
   */
  let FormElementControlInput = _exports.default = (0, _deprecateSubclassing.default)(_class = (_class2 = class FormElementControlInput extends _control.default {
    /**
     * @property type
     * @type {String}
     * @public
     */

    handleChange(event) {
      this.args.onChange(event.target.value);
    }
    handleInput(event) {
      this.args.onChange(event.target.value);
    }

    /**
     * [BS4 only] Property for size styling, set to 'lg', 'sm' or 'xs'
     *
     * Also see the [Bootstrap docs](https://getbootstrap.com/docs/4.3/components/forms/#sizing)
     *
     * @property size
     * @type String
     * @public
     */

    get sizeClass() {
      return (0, _sizeClass.default)('form-control', this.args.size);
    }
  }, (_applyDecoratedDescriptor(_class2.prototype, "handleChange", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "handleChange"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "handleInput", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "handleInput"), _class2.prototype)), _class2)) || _class;
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, FormElementControlInput);
});
;define("ember-bootstrap/components/bs-form/element/control/radio", ["exports", "@ember/component", "ember-bootstrap/components/bs-form/element/control", "ember-bootstrap/utils/deprecate-subclassing", "@ember/template-factory"], function (_exports, _component, _control, _deprecateSubclassing, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"ember-bootstrap/components/bs-form/element/control",0,"ember-bootstrap/utils/deprecate-subclassing",0,"@ember/component"eaimeta@70e063a35619d71f
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    {{!-- template-lint-disable no-positive-tabindex --}}
  {{#each @options as |option index|}}
    {{#let (concat @id "-" index) as |id|}}
      <div class="form-check{{if @inline " form-check-inline"}}">
        <input
          type="radio"
          class="form-check-input"
          id={{id}}
          checked={{bs-eq option @value}}
          onclick={{fn @onChange option}}
          name={{@name}}
          required={{@required}}
          disabled={{@disabled}}
          autofocus={{@autofocus}}
          tabindex={{@tabindex}}
          form={{@form}}
          title={{@title}}
          ...attributes
        >
        <label
          for={{id}}
          class="form-check-label"
        >
          {{#if (has-block)}}
            {{yield option index}}
          {{else}}
            {{#if @optionLabelPath}}
              {{get option @optionLabelPath}}
            {{else}}
              {{option}}
            {{/if}}
          {{/if}}
        </label>
      </div>
    {{/let}}
  {{/each}}
  
  */
  {
    "id": "NxoE5X8k",
    "block": "[[[42,[28,[37,1],[[28,[37,1],[[30,1]],null]],null],null,[[[44,[[28,[37,3],[[30,4],\"-\",[30,3]],null]],[[[1,\"    \"],[10,0],[15,0,[29,[\"form-check\",[52,[30,6],\" form-check-inline\"]]]],[12],[1,\"\\n      \"],[11,\"input\"],[24,4,\"radio\"],[24,0,\"form-check-input\"],[16,1,[30,5]],[16,\"checked\",[28,[37,5],[[30,2],[30,7]],null]],[16,\"onclick\",[28,[37,6],[[30,8],[30,2]],null]],[16,3,[30,9]],[16,\"required\",[30,10]],[16,\"disabled\",[30,11]],[16,\"autofocus\",[30,12]],[16,\"tabindex\",[30,13]],[16,\"form\",[30,14]],[16,\"title\",[30,15]],[17,16],[12],[13],[1,\"\\n      \"],[10,\"label\"],[15,\"for\",[30,5]],[14,0,\"form-check-label\"],[12],[1,\"\\n\"],[41,[48,[30,18]],[[[1,\"          \"],[18,18,[[30,2],[30,3]]],[1,\"\\n\"]],[]],[[[41,[30,17],[[[1,\"            \"],[1,[28,[35,9],[[30,2],[30,17]],null]],[1,\"\\n\"]],[]],[[[1,\"            \"],[1,[30,2]],[1,\"\\n\"]],[]]]],[]]],[1,\"      \"],[13],[1,\"\\n    \"],[13],[1,\"\\n\"]],[5]]]],[2,3]],null]],[\"@options\",\"option\",\"index\",\"@id\",\"id\",\"@inline\",\"@value\",\"@onChange\",\"@name\",\"@required\",\"@disabled\",\"@autofocus\",\"@tabindex\",\"@form\",\"@title\",\"&attrs\",\"@optionLabelPath\",\"&default\"],false,[\"each\",\"-track-array\",\"let\",\"concat\",\"if\",\"bs-eq\",\"fn\",\"has-block\",\"yield\",\"get\"]]",
    "moduleName": "ember-bootstrap/components/bs-form/element/control/radio.hbs",
    "isStrictMode": false
  });

  /**
  
   @class FormElementControlRadio
   @namespace Components
   @extends Components.FormElementControl
   @private
   */
  let FormElementControlRadio = _exports.default = (0, _deprecateSubclassing.default)(_class = class FormElementControlRadio extends _control.default {
    /**
     * @property inline
     * @type {Boolean}
     * @default false
     * @public
     */
  }) || _class;
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, FormElementControlRadio);
});
;define("ember-bootstrap/components/bs-form/element/control/switch", ["exports", "@ember/component", "@ember/object", "ember-bootstrap/components/bs-form/element/control", "ember-bootstrap/utils/deprecate-subclassing", "@ember/template-factory"], function (_exports, _component, _object, _control, _deprecateSubclassing, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _class2;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/object",0,"ember-bootstrap/components/bs-form/element/control",0,"ember-bootstrap/utils/deprecate-subclassing",0,"@ember/component"eaimeta@70e063a35619d71f
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <input
    type="checkbox"
    id={{@id}}
    disabled={{@disabled}}
    readonly={{@readonly}}
    aria-describedby={{@ariaDescribedBy}}
    checked={{@value}}
    class="{{if (macroCondition (macroGetOwnConfig "isBS5")) "form-check-input" "custom-control-input"}} {{this.formValidationClass}}"
    ...attributes
    {{on "click" this.handleClick}}
  >
  
  */
  {
    "id": "rQsCo5dM",
    "block": "[[[11,\"input\"],[24,4,\"checkbox\"],[16,1,[30,1]],[16,\"disabled\",[30,2]],[16,\"readonly\",[30,3]],[16,\"aria-describedby\",[30,4]],[16,\"checked\",[30,5]],[16,0,[29,[\"form-check-input\",\" \",[30,0,[\"formValidationClass\"]]]]],[17,6],[4,[38,0],[\"click\",[30,0,[\"handleClick\"]]],null],[12],[13],[1,\"\\n\"]],[\"@id\",\"@disabled\",\"@readonly\",\"@ariaDescribedBy\",\"@value\",\"&attrs\"],false,[\"on\"]]",
    "moduleName": "ember-bootstrap/components/bs-form/element/control/switch.hbs",
    "isStrictMode": false
  });

  /**
  
   @class FormElementControlSwitch
   @namespace Components
   @extends Components.FormElementControl
   @private
   */
  let FormElementControlSwitch = _exports.default = (0, _deprecateSubclassing.default)(_class = (_class2 = class FormElementControlSwitch extends _control.default {
    handleClick(event) {
      this.args.onChange(event.target.checked);
    }
  }, (_applyDecoratedDescriptor(_class2.prototype, "handleClick", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "handleClick"), _class2.prototype)), _class2)) || _class;
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, FormElementControlSwitch);
});
;define("ember-bootstrap/components/bs-form/element/control/textarea", ["exports", "@ember/component", "@ember/object", "ember-bootstrap/components/bs-form/element/control", "ember-bootstrap/utils/deprecate-subclassing", "@ember/template-factory"], function (_exports, _component, _object, _control, _deprecateSubclassing, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _class2;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/object",0,"ember-bootstrap/components/bs-form/element/control",0,"ember-bootstrap/utils/deprecate-subclassing",0,"@ember/component"eaimeta@70e063a35619d71f
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <textarea
    id={{@id}}
    disabled={{@disabled}}
    readonly={{@readonly}}
    aria-describedby={{@ariaDescribedBy}}
    value={{@value}}
    class="form-control {{this.formValidationClass}}"
    ...attributes
    {{on "change" this.handleChange}}
    {{on "input" this.handleInput}}>
  </textarea>
  */
  {
    "id": "Dpyf6aRY",
    "block": "[[[11,\"textarea\"],[16,1,[30,1]],[16,\"disabled\",[30,2]],[16,\"readonly\",[30,3]],[16,\"aria-describedby\",[30,4]],[16,2,[30,5]],[16,0,[29,[\"form-control \",[30,0,[\"formValidationClass\"]]]]],[17,6],[4,[38,0],[\"change\",[30,0,[\"handleChange\"]]],null],[4,[38,0],[\"input\",[30,0,[\"handleInput\"]]],null],[12],[1,\"\"],[13]],[\"@id\",\"@disabled\",\"@readonly\",\"@ariaDescribedBy\",\"@value\",\"&attrs\"],false,[\"on\"]]",
    "moduleName": "ember-bootstrap/components/bs-form/element/control/textarea.hbs",
    "isStrictMode": false
  });

  /**
  
   @class FormElementControlTextarea
   @namespace Components
   @extends Components.FormElementControl
   @private
   */
  let FormElementControlTextarea = _exports.default = (0, _deprecateSubclassing.default)(_class = (_class2 = class FormElementControlTextarea extends _control.default {
    handleChange(event) {
      this.args.onChange(event.target.value);
    }
    handleInput(event) {
      this.args.onChange(event.target.value);
    }
  }, (_applyDecoratedDescriptor(_class2.prototype, "handleChange", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "handleChange"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "handleInput", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "handleInput"), _class2.prototype)), _class2)) || _class;
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, FormElementControlTextarea);
});
;define("ember-bootstrap/components/bs-form/element/errors", ["exports", "@ember/component", "@ember/component/template-only", "@ember/template-factory"], function (_exports, _component, _templateOnly, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/component/template-only",0,"@ember/component"eaimeta@70e063a35619d71f
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    {{#if @show}}
    {{#if @showMultipleErrors}}
      <div class="pre-scrollable">
        {{#each @messages as |message|}}
          <div class="invalid-feedback d-block">{{message}}</div>
        {{/each}}
      </div>
    {{else}}
      <div class="invalid-feedback d-block">{{@messages.firstObject}}</div>
    {{/if}}
  {{/if}}
  
  */
  {
    "id": "ka/kT84v",
    "block": "[[[41,[30,1],[[[41,[30,2],[[[1,\"    \"],[10,0],[14,0,\"pre-scrollable\"],[12],[1,\"\\n\"],[42,[28,[37,2],[[28,[37,2],[[30,3]],null]],null],null,[[[1,\"        \"],[10,0],[14,0,\"invalid-feedback d-block\"],[12],[1,[30,4]],[13],[1,\"\\n\"]],[4]],null],[1,\"    \"],[13],[1,\"\\n\"]],[]],[[[1,\"    \"],[10,0],[14,0,\"invalid-feedback d-block\"],[12],[1,[30,3,[\"firstObject\"]]],[13],[1,\"\\n\"]],[]]]],[]],null]],[\"@show\",\"@showMultipleErrors\",\"@messages\",\"message\"],false,[\"if\",\"each\",\"-track-array\"]]",
    "moduleName": "ember-bootstrap/components/bs-form/element/errors.hbs",
    "isStrictMode": false
  });
  var _default = _exports.default = (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, (0, _templateOnly.default)());
});
;define("ember-bootstrap/components/bs-form/element/feedback-icon", ["exports", "@ember/component", "@ember/component/template-only", "@ember/template-factory"], function (_exports, _component, _templateOnly, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/component/template-only",0,"@ember/component"eaimeta@70e063a35619d71f
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    {{#if @show}}
    <span class="form-control-feedback {{@iconName}}" aria-hidden="true"></span>
  {{/if}}
  */
  {
    "id": "6O4Sa44z",
    "block": "[[[41,[30,1],[[[1,\"  \"],[10,1],[15,0,[29,[\"form-control-feedback \",[30,2]]]],[14,\"aria-hidden\",\"true\"],[12],[13],[1,\"\\n\"]],[]],null]],[\"@show\",\"@iconName\"],false,[\"if\"]]",
    "moduleName": "ember-bootstrap/components/bs-form/element/feedback-icon.hbs",
    "isStrictMode": false
  });
  var _default = _exports.default = (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, (0, _templateOnly.default)());
});
;define("ember-bootstrap/components/bs-form/element/help-text", ["exports", "@ember/component", "@ember/component/template-only", "@ember/template-factory"], function (_exports, _component, _templateOnly, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/component/template-only",0,"@ember/component"eaimeta@70e063a35619d71f
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <div
    id={{@id}}
    class="form-text"
    ...attributes
  >
    {{@text}}
  </div>
  */
  {
    "id": "AQnSQIXc",
    "block": "[[[11,0],[16,1,[30,1]],[24,0,\"form-text\"],[17,2],[12],[1,\"\\n  \"],[1,[30,3]],[1,\"\\n\"],[13]],[\"@id\",\"&attrs\",\"@text\"],false,[]]",
    "moduleName": "ember-bootstrap/components/bs-form/element/help-text.hbs",
    "isStrictMode": false
  });
  var _default = _exports.default = (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, (0, _templateOnly.default)());
});
;define("ember-bootstrap/components/bs-form/element/label", ["exports", "@ember/component", "@glimmer/component", "ember-bootstrap/utils/deprecate-subclassing", "ember-bootstrap/utils/decorators/arg", "@ember/template-factory"], function (_exports, _component, _component2, _deprecateSubclassing, _arg, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _class2, _descriptor, _descriptor2;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@glimmer/component",0,"ember-bootstrap/utils/deprecate-subclassing",0,"ember-bootstrap/utils/decorators/arg",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <label
    class="
      {{if (macroCondition (macroGetOwnConfig "isBS5")) "form-label"}}
      {{if @invisibleLabel (if (macroCondition (macroGetOwnConfig "isBS5")) "visually-hidden" "sr-only")}}
      {{@labelClass}}
      {{if this.isHorizontalAndNotCheckbox "col-form-label"}}
      {{if this.isCheckbox "form-check-label"}}
      {{if (bs-eq "switch" @controlType) (if (macroCondition (macroGetOwnConfig "isBS5")) "form-check-label" "custom-control-label")}}
      {{if this.isHorizontal (bs-size-class "col-form-label" @size)}}"
    for={{@formElementId}}
    ...attributes
  >
    {{#if (has-block)}}
      {{yield}}
    {{/if}}
    {{@label}}
  </label>
  
  */
  {
    "id": "grH19S03",
    "block": "[[[11,\"label\"],[16,0,[29,[\"\\n    \",\"form-label\",\"\\n    \",[52,[30,1],\"visually-hidden\"],\"\\n    \",[30,2],\"\\n    \",[52,[30,0,[\"isHorizontalAndNotCheckbox\"]],\"col-form-label\"],\"\\n    \",[52,[30,0,[\"isCheckbox\"]],\"form-check-label\"],\"\\n    \",[52,[28,[37,1],[\"switch\",[30,3]],null],\"form-check-label\"],\"\\n    \",[52,[30,0,[\"isHorizontal\"]],[28,[37,2],[\"col-form-label\",[30,4]],null]]]]],[16,\"for\",[30,5]],[17,6],[12],[1,\"\\n\"],[41,[48,[30,8]],[[[1,\"    \"],[18,8,null],[1,\"\\n\"]],[]],null],[1,\"  \"],[1,[30,7]],[1,\"\\n\"],[13],[1,\"\\n\"]],[\"@invisibleLabel\",\"@labelClass\",\"@controlType\",\"@size\",\"@formElementId\",\"&attrs\",\"@label\",\"&default\"],false,[\"if\",\"bs-eq\",\"bs-size-class\",\"has-block\",\"yield\"]]",
    "moduleName": "ember-bootstrap/components/bs-form/element/label.hbs",
    "isStrictMode": false
  });

  /**
  
   @class FormElementLabel
   @namespace Components
   @extends Ember.Component
   @private
   */
  let FormElementLabel = _exports.default = (0, _deprecateSubclassing.default)(_class = (_class2 = class FormElementLabel extends _component2.default {
    constructor(...args) {
      super(...args);
      /**
       * [BS4 only] Property for size styling, set to 'lg', 'sm'
       *
       * @property size
       * @type String
       * @public
       */
      /**
       * @property formElementId
       * @type {String}
       * @public
       */
      /**
       * @property labelClass
       * @type {String}
       * @public
       */
      /**
       * The form layout used for the markup generation (see http://getbootstrap.com/css/#forms):
       *
       * * 'horizontal'
       * * 'vertical'
       * * 'inline'
       *
       * Defaults to the parent `form`'s `formLayout` property.
       *
       * @property formLayout
       * @type string
       * @default 'vertical'
       * @public
       */
      _initializerDefineProperty(this, "formLayout", _descriptor, this);
      /**
       * The type of the control widget.
       * Supported types:
       *
       * * 'text'
       * * 'checkbox'
       * * 'textarea'
       * * any other type will use an input tag with the `controlType` value as the type attribute (for e.g. HTML5 input
       * types like 'email'), and the same layout as the 'text' type
       *
       * @property controlType
       * @type string
       * @default 'text'
       * @public
       */
      _initializerDefineProperty(this, "controlType", _descriptor2, this);
    }
    /**
     * @property label
     * @type string
     * @public
     */

    /**
     * @property invisibleLabel
     * @type boolean
     * @public
     */

    get isHorizontalAndNotCheckbox() {
      return this.isHorizontal && !this.isCheckbox;
    }
    /**
     * Indicates whether the type of the control widget equals `checkbox`
     *
     * @property isCheckbox
     * @type boolean
     * @private
     */
    get isCheckbox() {
      return this.args.controlType === 'checkbox';
    }

    /**
     * Indicates whether the form type equals `horizontal`
     *
     * @property isHorizontal
     * @type boolean
     * @private
     */
    get isHorizontal() {
      return this.args.formLayout === 'horizontal';
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "formLayout", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 'vertical';
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "controlType", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 'text';
    }
  })), _class2)) || _class;
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, FormElementLabel);
});
;define("ember-bootstrap/components/bs-form/element/layout/horizontal", ["exports", "@ember/component", "@ember/component/template-only", "@ember/template-factory"], function (_exports, _component, _templateOnly, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/component/template-only",0,"@ember/component"eaimeta@70e063a35619d71f
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    {{#if @hasLabel}}
    <@labelComponent @labelClass={{@horizontalLabelGridClass}}/>
    <div class={{bs-form-horiz-input-class @horizontalLabelGridClass}}>
      {{yield}}
      <@errorsComponent/>
      <@helpTextComponent/>
    </div>
  {{else}}
    <div class="{{bs-form-horiz-input-class @horizontalLabelGridClass}} {{bs-form-horiz-offset-class @horizontalLabelGridClass}}">
      {{yield}}
      <@errorsComponent/>
      <@helpTextComponent/>
    </div>
  {{/if}}
  */
  {
    "id": "lVC8pQ+K",
    "block": "[[[41,[30,1],[[[1,\"  \"],[8,[30,2],null,[[\"@labelClass\"],[[30,3]]],null],[1,\"\\n  \"],[10,0],[15,0,[28,[37,1],[[30,3]],null]],[12],[1,\"\\n    \"],[18,6,null],[1,\"\\n    \"],[8,[30,4],null,null,null],[1,\"\\n    \"],[8,[30,5],null,null,null],[1,\"\\n  \"],[13],[1,\"\\n\"]],[]],[[[1,\"  \"],[10,0],[15,0,[29,[[28,[37,1],[[30,3]],null],\" \",[28,[37,3],[[30,3]],null]]]],[12],[1,\"\\n    \"],[18,6,null],[1,\"\\n    \"],[8,[30,4],null,null,null],[1,\"\\n    \"],[8,[30,5],null,null,null],[1,\"\\n  \"],[13],[1,\"\\n\"]],[]]]],[\"@hasLabel\",\"@labelComponent\",\"@horizontalLabelGridClass\",\"@errorsComponent\",\"@helpTextComponent\",\"&default\"],false,[\"if\",\"bs-form-horiz-input-class\",\"yield\",\"bs-form-horiz-offset-class\"]]",
    "moduleName": "ember-bootstrap/components/bs-form/element/layout/horizontal.hbs",
    "isStrictMode": false
  });
  var _default = _exports.default = (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, (0, _templateOnly.default)());
});
;define("ember-bootstrap/components/bs-form/element/layout/horizontal/checkbox", ["exports", "@ember/component", "@ember/component/template-only", "@ember/template-factory"], function (_exports, _component, _templateOnly, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/component/template-only",0,"@ember/component"eaimeta@70e063a35619d71f
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <div class="{{bs-form-horiz-input-class @horizontalLabelGridClass}} {{bs-form-horiz-offset-class @horizontalLabelGridClass}}">
    <div class="{{if (bs-eq "switch" @controlType) (if (macroCondition (macroGetOwnConfig "isBS5")) "form-check form-switch" "custom-control custom-switch") "form-check"}}">
      {{yield}}
      <@labelComponent/>
      <@errorsComponent/>
      <@helpTextComponent/>
    </div>
  </div>
  
  */
  {
    "id": "OZJdQYBS",
    "block": "[[[10,0],[15,0,[29,[[28,[37,0],[[30,1]],null],\" \",[28,[37,1],[[30,1]],null]]]],[12],[1,\"\\n  \"],[10,0],[15,0,[29,[[52,[28,[37,3],[\"switch\",[30,2]],null],\"form-check form-switch\",\"form-check\"]]]],[12],[1,\"\\n    \"],[18,6,null],[1,\"\\n    \"],[8,[30,3],null,null,null],[1,\"\\n    \"],[8,[30,4],null,null,null],[1,\"\\n    \"],[8,[30,5],null,null,null],[1,\"\\n  \"],[13],[1,\"\\n\"],[13],[1,\"\\n\"]],[\"@horizontalLabelGridClass\",\"@controlType\",\"@labelComponent\",\"@errorsComponent\",\"@helpTextComponent\",\"&default\"],false,[\"bs-form-horiz-input-class\",\"bs-form-horiz-offset-class\",\"if\",\"bs-eq\",\"yield\"]]",
    "moduleName": "ember-bootstrap/components/bs-form/element/layout/horizontal/checkbox.hbs",
    "isStrictMode": false
  });
  var _default = _exports.default = (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, (0, _templateOnly.default)());
});
;define("ember-bootstrap/components/bs-form/element/layout/inline", ["exports", "@ember/component", "@ember/component/template-only", "@ember/template-factory"], function (_exports, _component, _templateOnly, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/component/template-only",0,"@ember/component"eaimeta@70e063a35619d71f
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    {{#if @hasLabel}}
    <@labelComponent/>
  {{/if}}
  {{yield}}
  <@errorsComponent/>
  <@helpTextComponent/>
  */
  {
    "id": "+Tqw45qJ",
    "block": "[[[41,[30,1],[[[1,\"  \"],[8,[30,2],null,null,null],[1,\"\\n\"]],[]],null],[18,5,null],[1,\"\\n\"],[8,[30,3],null,null,null],[1,\"\\n\"],[8,[30,4],null,null,null]],[\"@hasLabel\",\"@labelComponent\",\"@errorsComponent\",\"@helpTextComponent\",\"&default\"],false,[\"if\",\"yield\"]]",
    "moduleName": "ember-bootstrap/components/bs-form/element/layout/inline.hbs",
    "isStrictMode": false
  });
  var _default = _exports.default = (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, (0, _templateOnly.default)());
});
;define("ember-bootstrap/components/bs-form/element/layout/inline/checkbox", ["exports", "@ember/component", "@ember/component/template-only", "@ember/template-factory"], function (_exports, _component, _templateOnly, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/component/template-only",0,"@ember/component"eaimeta@70e063a35619d71f
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <div class="{{if (bs-eq "switch" @controlType) (if (macroCondition (macroGetOwnConfig "isBS5")) "form-check form-switch" "custom-control custom-switch") "form-check"}}">
    {{yield}}
    <@labelComponent/>
    <@errorsComponent/>
    <@helpTextComponent/>
  </div>
  
  */
  {
    "id": "IyTCu5IW",
    "block": "[[[10,0],[15,0,[29,[[52,[28,[37,1],[\"switch\",[30,1]],null],\"form-check form-switch\",\"form-check\"]]]],[12],[1,\"\\n  \"],[18,5,null],[1,\"\\n  \"],[8,[30,2],null,null,null],[1,\"\\n  \"],[8,[30,3],null,null,null],[1,\"\\n  \"],[8,[30,4],null,null,null],[1,\"\\n\"],[13],[1,\"\\n\"]],[\"@controlType\",\"@labelComponent\",\"@errorsComponent\",\"@helpTextComponent\",\"&default\"],false,[\"if\",\"bs-eq\",\"yield\"]]",
    "moduleName": "ember-bootstrap/components/bs-form/element/layout/inline/checkbox.hbs",
    "isStrictMode": false
  });
  var _default = _exports.default = (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, (0, _templateOnly.default)());
});
;define("ember-bootstrap/components/bs-form/element/layout/vertical", ["exports", "@ember/component", "@ember/component/template-only", "@ember/template-factory"], function (_exports, _component, _templateOnly, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/component/template-only",0,"@ember/component"eaimeta@70e063a35619d71f
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    {{#if @hasLabel}}
    <@labelComponent/>
  {{/if}}
  {{yield}}
  <@errorsComponent/>
  <@helpTextComponent/>
  */
  {
    "id": "7Kb27cj4",
    "block": "[[[41,[30,1],[[[1,\"  \"],[8,[30,2],null,null,null],[1,\"\\n\"]],[]],null],[18,5,null],[1,\"\\n\"],[8,[30,3],null,null,null],[1,\"\\n\"],[8,[30,4],null,null,null]],[\"@hasLabel\",\"@labelComponent\",\"@errorsComponent\",\"@helpTextComponent\",\"&default\"],false,[\"if\",\"yield\"]]",
    "moduleName": "ember-bootstrap/components/bs-form/element/layout/vertical.hbs",
    "isStrictMode": false
  });
  var _default = _exports.default = (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, (0, _templateOnly.default)());
});
;define("ember-bootstrap/components/bs-form/element/layout/vertical/checkbox", ["exports", "@ember/component", "@ember/component/template-only", "@ember/template-factory"], function (_exports, _component, _templateOnly, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/component/template-only",0,"@ember/component"eaimeta@70e063a35619d71f
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <div class="{{if (bs-eq "switch" @controlType) (if (macroCondition (macroGetOwnConfig "isBS5")) "form-check form-switch" "custom-control custom-switch") "form-check"}}">
    {{yield}}
    <@labelComponent/>
    <@errorsComponent/>
    <@helpTextComponent/>
  </div>
  
  */
  {
    "id": "UL5hkja7",
    "block": "[[[10,0],[15,0,[29,[[52,[28,[37,1],[\"switch\",[30,1]],null],\"form-check form-switch\",\"form-check\"]]]],[12],[1,\"\\n  \"],[18,5,null],[1,\"\\n  \"],[8,[30,2],null,null,null],[1,\"\\n  \"],[8,[30,3],null,null,null],[1,\"\\n  \"],[8,[30,4],null,null,null],[1,\"\\n\"],[13],[1,\"\\n\"]],[\"@controlType\",\"@labelComponent\",\"@errorsComponent\",\"@helpTextComponent\",\"&default\"],false,[\"if\",\"bs-eq\",\"yield\"]]",
    "moduleName": "ember-bootstrap/components/bs-form/element/layout/vertical/checkbox.hbs",
    "isStrictMode": false
  });
  var _default = _exports.default = (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, (0, _templateOnly.default)());
});
;define("ember-bootstrap/components/bs-form/element/legend", ["exports", "@ember/component", "ember-bootstrap/components/bs-form/element/label", "ember-bootstrap/utils/deprecate-subclassing", "@ember/template-factory"], function (_exports, _component, _label, _deprecateSubclassing, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"ember-bootstrap/components/bs-form/element/label",0,"ember-bootstrap/utils/deprecate-subclassing",0,"@ember/component"eaimeta@70e063a35619d71f
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <legend
    class="
      {{if @invisibleLabel (if (macroCondition (macroGetOwnConfig "isBS5")) "visually-hidden" "sr-only")}}
      {{@labelClass}}
      {{if this.isHorizontalAndNotCheckbox "col-form-label"}}
      {{if this.isHorizontal (bs-size-class "col-form-label" @size)}}"
  >
    {{#if (has-block)}}
      {{yield}}
    {{/if}}
    {{@label}}
  </legend>
  */
  {
    "id": "LQefTwl+",
    "block": "[[[10,\"legend\"],[15,0,[29,[\"\\n    \",[52,[30,1],\"visually-hidden\"],\"\\n    \",[30,2],\"\\n    \",[52,[30,0,[\"isHorizontalAndNotCheckbox\"]],\"col-form-label\"],\"\\n    \",[52,[30,0,[\"isHorizontal\"]],[28,[37,1],[\"col-form-label\",[30,3]],null]]]]],[12],[1,\"\\n\"],[41,[48,[30,5]],[[[1,\"    \"],[18,5,null],[1,\"\\n\"]],[]],null],[1,\"  \"],[1,[30,4]],[1,\"\\n\"],[13]],[\"@invisibleLabel\",\"@labelClass\",\"@size\",\"@label\",\"&default\"],false,[\"if\",\"bs-size-class\",\"has-block\",\"yield\"]]",
    "moduleName": "ember-bootstrap/components/bs-form/element/legend.hbs",
    "isStrictMode": false
  });
  let FormElementLegend = _exports.default = (0, _deprecateSubclassing.default)(_class = class FormElementLegend extends _label.default {
    constructor(...args) {
      super(...args);
      _defineProperty(this, '__ember-bootstrap_subclass', true);
    }
  }) || _class;
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, FormElementLegend);
});
;define("ember-bootstrap/components/bs-link-to", ["exports", "@ember/component", "@ember-decorators/component", "@ember/service", "@ember/debug", "ember-bootstrap/mixins/component-child", "@ember/object/compat", "@ember/template-factory"], function (_exports, _component, _component2, _service, _debug, _componentChild, _compat, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _dec2, _class, _class2, _descriptor;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/component",0,"@ember-decorators/component",0,"@ember/service",0,"@ember/debug",0,"ember-bootstrap/mixins/component-child",0,"@ember/object/compat"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <LinkTo
    @route={{this.route}}
    @models={{this._models}}
    @query={{this._query}}
    @disabled={{@disabled}}
    class={{@class}}
    ...attributes
  >
    {{yield}}
  </LinkTo>
  */
  {
    "id": "Sh+cPgSI",
    "block": "[[[8,[39,0],[[16,0,[30,1]],[17,2]],[[\"@route\",\"@models\",\"@query\",\"@disabled\"],[[30,0,[\"route\"]],[30,0,[\"_models\"]],[30,0,[\"_query\"]],[30,3]]],[[\"default\"],[[[[1,\"\\n  \"],[18,4,null],[1,\"\\n\"]],[]]]]]],[\"@class\",\"&attrs\",\"@disabled\",\"&default\"],false,[\"link-to\",\"yield\"]]",
    "moduleName": "ember-bootstrap/components/bs-link-to.hbs",
    "isStrictMode": false
  });
  /* eslint-disable ember/classic-decorator-no-classic-methods */

  /**
   This is largely copied from Ember.LinkComponent. It is used as extending from Ember.LinkComponent has been deprecated.
   We need this to
   * register ourselves to a parent component that needs to know `active` state due to Bootstrap markup requirements, see Nav/LinkTo
   * continue supporting positional params until we can remove support
  
   @class LinkComponent
   @namespace Components
   @extends Component
   @private
  */
  let LinkComponent = (_dec = (0, _component2.tagName)(''), _dec2 = (0, _service.inject)('router'), _dec(_class = (_class2 = class LinkComponent extends _component.default.extend(_componentChild.default) {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "router", _descriptor, this);
    }
    get active() {
      if (!this.route) {
        return false;
      }

      // Ember < 3.22 does not correctly entangle autotracking with routing state changes, so we manually do that here
      // See https://github.com/emberjs/ember.js/issues/19004
      // shamelessly stolen from https://github.com/rwjblue/ember-router-helpers/blob/master/addon/utils/track-active-route.js

      // ensure we recompute anytime `router.currentURL` changes
      this.router.currentURL;

      // ensure we recompute whenever the `router.currentRouteName` changes
      // this is slightly overlapping with router.currentURL but there are
      // cases where route.currentURL doesn't change but the
      // router.currentRouteName has (e.g. loading and error states)
      this.router.currentRouteName;
      return this.router.isActive(this.route, ...this._models, {
        queryParams: this._query
      });
    }
    get _models() {
      let {
        model,
        models
      } = this;
      if (model !== undefined) {
        return [model];
      } else if (models !== undefined) {
        (true && !(Array.isArray(models)) && (0, _debug.assert)('The `@models` argument must be an array.', Array.isArray(models)));
        return models;
      } else {
        return [];
      }
    }
    get _query() {
      return this.query ?? {};
    }

    // eslint-disable-next-line ember/no-component-lifecycle-hooks
    didReceiveAttrs() {
      super.didReceiveAttrs(...arguments);
      let {
        params
      } = this;
      if (!params || params.length === 0) {
        return;
      }
      (true && !(false) && (0, _debug.deprecate)(`Positional arguments for ember-bootstrap's link-to components are deprecated. Switch to angle bracket invocation and named arguments.`, false, {
        id: `ember-bootstrap.link-to.positional-args`,
        until: '5.0.0',
        since: '4.7.0',
        for: 'ember-bootstrap'
      }));
      params = params.slice();

      // taken from original Ember.LnkComponent
      // Process the positional arguments, in order.

      // Skipping this, as we don't support this
      // 1. Inline link title comes first, if present.
      // if (!hasBlock) {
      //   this.set('linkTitle', params.shift());
      // }

      // 2. The last argument is possibly the `query` object.
      let queryParams = params[params.length - 1];
      if (queryParams && queryParams.isQueryParams) {
        this.set('query', params.pop().values);
      } else {
        this.set('query', undefined);
      }

      // 3. If there is a `route`, it is now at index 0.
      if (params.length === 0) {
        this.set('route', undefined);
      } else {
        this.set('route', params.shift());
      }

      // 4. Any remaining indices (if any) are `models`.
      this.set('model', undefined);
      this.set('models', params);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "router", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class2.prototype, "active", [_compat.dependentKeyCompat], Object.getOwnPropertyDescriptor(_class2.prototype, "active"), _class2.prototype)), _class2)) || _class);
  LinkComponent.reopenClass({
    positionalParams: 'params'
  });
  var _default = _exports.default = (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, LinkComponent);
});
;define("ember-bootstrap/components/bs-modal-simple", ["exports", "@ember/component", "@ember/component/template-only", "@ember/template-factory"], function (_exports, _component, _templateOnly, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/component/template-only",0,"@ember/component"eaimeta@70e063a35619d71f
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <BsModal
    @open={{@open}}
    @fade={{@fade}}
    @backdrop={{@backdrop}}
    @keyboard={{@keyboard}}
    @position={{@position}}
    @scrollable={{@scrollable}}
    @size={{@size}}
    @backdropClose={{@backdropClose}}
    @renderInPlace={{@renderInPlace}}
    @transitionDuration={{@transitionDuration}}
    @backdropTransitionDuration={{@backdropTransitionDuration}}
    @onSubmit={{@onSubmit}}
    @onHide={{@onHide}}
    @onHidden={{@onHidden}}
    @onShow={{@onShow}}
    @onShown={{@onShown}}
    ...attributes
    as |modal|
  >
    <modal.header @title={{@title}} @closeButton={{@closeButton}} />
    <modal.body>
      {{yield
        (hash
          close=modal.close
          submit=modal.submit
        )
      }}
    </modal.body>
    <modal.footer
      @closeTitle={{@closeTitle}}
      @submitTitle={{@submitTitle}}
      @submitButtonType={{@submitButtonType}}
    />
  </BsModal>
  
  */
  {
    "id": "iZMJEKKu",
    "block": "[[[8,[39,0],[[17,1]],[[\"@open\",\"@fade\",\"@backdrop\",\"@keyboard\",\"@position\",\"@scrollable\",\"@size\",\"@backdropClose\",\"@renderInPlace\",\"@transitionDuration\",\"@backdropTransitionDuration\",\"@onSubmit\",\"@onHide\",\"@onHidden\",\"@onShow\",\"@onShown\"],[[30,2],[30,3],[30,4],[30,5],[30,6],[30,7],[30,8],[30,9],[30,10],[30,11],[30,12],[30,13],[30,14],[30,15],[30,16],[30,17]]],[[\"default\"],[[[[1,\"\\n  \"],[8,[30,18,[\"header\"]],null,[[\"@title\",\"@closeButton\"],[[30,19],[30,20]]],null],[1,\"\\n  \"],[8,[30,18,[\"body\"]],null,null,[[\"default\"],[[[[1,\"\\n    \"],[18,24,[[28,[37,2],null,[[\"close\",\"submit\"],[[30,18,[\"close\"]],[30,18,[\"submit\"]]]]]]],[1,\"\\n  \"]],[]]]]],[1,\"\\n  \"],[8,[30,18,[\"footer\"]],null,[[\"@closeTitle\",\"@submitTitle\",\"@submitButtonType\"],[[30,21],[30,22],[30,23]]],null],[1,\"\\n\"]],[18]]]]],[1,\"\\n\"]],[\"&attrs\",\"@open\",\"@fade\",\"@backdrop\",\"@keyboard\",\"@position\",\"@scrollable\",\"@size\",\"@backdropClose\",\"@renderInPlace\",\"@transitionDuration\",\"@backdropTransitionDuration\",\"@onSubmit\",\"@onHide\",\"@onHidden\",\"@onShow\",\"@onShown\",\"modal\",\"@title\",\"@closeButton\",\"@closeTitle\",\"@submitTitle\",\"@submitButtonType\",\"&default\"],false,[\"bs-modal\",\"yield\",\"hash\"]]",
    "moduleName": "ember-bootstrap/components/bs-modal-simple.hbs",
    "isStrictMode": false
  });
  /**
    Component for creating [Bootstrap modals](http://getbootstrap.com/javascript/#modals) with a some common default markup
    including a header, footer and body. Creating a simple modal is easy:
  
    ```hbs
    <BsModalSimple @title="Simple Dialog">
      Hello world!
    </BsModalSimple>
    ```
  
    This will automatically create the appropriate markup, with a modal header containing the title, and a footer containing
    a default "Ok" button, that will close the modal automatically (unless you return `false` from `onHide`).
  
    A modal created this way will be visible at once. You can use the `{{#if ...}}` helper to hide all modal elements from
    the DOM until needed. Or you can bind the `open` argument to trigger showing and hiding the modal:
  
    ```hbs
    <BsModalSimple @open={{this.openModal}} @title="Simple Dialog">
      Hello world!
    </BsModalSimple>
    ```
  
    ### Custom Markup
  
    To customize the markup within the modal you can use the [<BsModal>](Components.Modal.html) component.
  
    ### Modals with forms
  
    There is a special case when you have a form inside your modals body: you probably do not want to have a submit button
    within your form but instead in your modal footer. Hover pressing the submit button outside your form would not
    trigger the form data to be submitted. In the example below this would not trigger the submit action of the form, and
    thus bypass the form validation feature of the form component.
  
    ```hbs
    <BsModalSimple @title="Form Example" @closeTitle="Cancel" @submitTitle="Ok">
      <BsForm @model={{this}} @onSubmit={{this.submit}} @submitOnEnter={{true}} as |Form|>
        <Form.element @label="first name" @property="firstname" />
        <Form.element @label="last name" @property="lastname" />
      </BsForm>
    </BsModalSimple>
    ```
  
    The modal component supports this common case by triggering the submit event programmatically on the body's form if
    present whenever the footer's submit button is pressed. To allow the form to be submitted by pressing the enter key
    also, you must either set `@submitOnEnter={{true}}` on the `<BsForm>` or include an invisible submit button in the
    form (`<button type="submit" class="d-hidden">Submit</button>`).
  
    ### Auto-focus
  
    In order to allow key handling to function, the modal's root element is given focus once the modal is shown. If your
    modal contains an element such as a text input and you would like it to be given focus rather than the modal element,
    then give it the HTML5 autofocus attribute:
  
    ```hbs
    <BsModalSimple @title="Form Example" @closeTitle="Cancel" @submitTitle="Ok">
      <BsForm @model={{this}} @onSubmit={{this.submit}} @submitOnEnter={{true}} as |Form|>
        <Form.element @label="first name" @property="firstname" @autofocus={{true}} />
        <Form.element @label="last name" @property="lastname" />
      </BsForm>
    </BsModalSimple>
    ```
  
    ### Modals inside wormhole
  
    Modals make use of the [ember-wormhole](https://github.com/yapplabs/ember-wormhole) addon, which will be installed
    automatically alongside ember-bootstrap. This is used to allow the modal to be placed in deeply nested
    components/templates where it belongs to logically, but to have the actual DOM elements within a special container
    element, which is a child of ember's root element. This will make sure that modals always overlay the whole app, and
    are not effected by parent elements with `overflow: hidden` for example.
  
    If you want the modal to render in place, rather than being wormholed, you can set `@renderInPlace={{true}}`.
  
    @class ModalSimple
    @namespace Components
    @public
  */

  /**
   * The title of the modal, visible in the modal header. Is ignored if `header` is false.
   *
   * @property title
   * @type string
   * @public
   */

  /**
   * Visibility of the modal. Toggle to show/hide with CSS transitions.
   *
   * When the modal is closed by user interaction this property will not update by using two-way bindings in order
   * to follow DDAU best practices. If you want to react to such changes, subscribe to the `onHide` action
   *
   * @property open
   * @type boolean
   * @default true
   * @public
   */

  /**
   * Set to false to disable fade animations.
   *
   * @property fade
   * @type boolean
   * @default true
   * @public
   */

  /**
   * Use a semi-transparent modal background to hide the rest of the page.
   *
   * @property backdrop
   * @type boolean
   * @default true
   * @public
   */

  /**
   * Closes the modal when escape key is pressed.
   *
   * @property keyboard
   * @type boolean
   * @default true
   * @public
   */

  /**
   * [BS4 only!] Vertical position, either 'top' (default) or 'center'
   * 'center' will apply the `modal-dialog-centered` class
   *
   * @property position
   * @type {string}
   * @default 'top'
   * @public
   */

  /**
   * [BS4 only!] Allows scrolling within the modal body
   * 'true' will apply the `modal-dialog-scrollable` class
   *
   * @property scrollable
   * @type boolean
   * @default false
   * @public
   */

  /**
   * Property for size styling, set to null (default), 'lg' or 'sm'
   *
   * Also see the [Bootstrap docs](http://getbootstrap.com/javascript/#modals-sizes)
   *
   * @property size
   * @type String
   * @public
   */

  /**
   * If true clicking on the backdrop will close the modal.
   *
   * @property backdropClose
   * @type boolean
   * @default true
   * @public
   */

  /**
   * If true component will render in place, rather than be wormholed.
   *
   * @property renderInPlace
   * @type boolean
   * @default false
   * @public
   */

  /**
   * The duration of the fade transition
   *
   * @property transitionDuration
   * @type number
   * @default 300
   * @public
   */

  /**
   * The duration of the backdrop fade transition
   *
   * @property backdropTransitionDuration
   * @type number
   * @default 150
   * @public
   */

  /**
   * The action to be sent when the modal footer's submit button (if present) is pressed.
   * Note that if your modal body contains a form (e.g. [Components.Form](Components.Form.html)) this action will
   * not be triggered. Instead, a submit event will be triggered on the form itself. See the class description for an
   * example.
   *
   * @property onSubmit
   * @type function
   * @public
   */

  /**
   * The action to be sent when the modal is closing.
   * This will be triggered by pressing the modal header's close button (x button) or the modal footer's close button.
   * Note that this will happen before the modal is hidden from the DOM, as the fade transitions will still need some
   * time to finish. Use the `onHidden` if you need the modal to be hidden when the action triggers.
   *
   * You can return `false` to prevent closing the modal automatically, and do that in your action by
   * setting `@open` to `false`.
   *
   * @property onHide
   * @type function
   * @public
   */

  /**
   * The action to be sent after the modal has been completely hidden (including the CSS transition).
   *
   * @property onHidden
   * @type function
   * @default null
   * @public
   */

  /**
   * The action to be sent when the modal is opening.
   * This will be triggered immediately after the modal is shown (so it's safe to access the DOM for
   * size calculations and the like). This means that if `@fade={{true}}`, it will be shown in between the
   * backdrop animation and the fade animation.
   *
   * @property onShow
   * @type function
   * @default null
   * @public
   */

  /**
   * The action to be sent after the modal has been completely shown (including the CSS transition).
   *
   * @property onShown
   * @type function
   * @public
   */

  /**
   * Display a close button (x icon) in the corner of the modal header.
   *
   * @property closeButton
   * @type boolean
   * @default true
   * @public
   */

  /**
   * The title of the default close button.
   *
   * @property closeTitle
   * @type string
   * @default 'Ok'
   * @public
   */

  /**
   * The type of the submit button (primary button).
   *
   * @property submitButtonType
   * @type string
   * @default 'primary'
   * @public
   */

  /**
   * The title of the submit button (primary button). Will be ignored (i.e. no button) if set to null.
   *
   * @property submitTitle
   * @type string
   * @default null
   * @public
   */
  var _default = _exports.default = (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, (0, _templateOnly.default)());
});
;define("ember-bootstrap/components/bs-modal", ["exports", "@ember/component", "@ember/object", "@ember/debug", "@glimmer/component", "@ember/runloop", "@ember/service", "ember-bootstrap/utils/transition-end", "ember-bootstrap/utils/dom", "ember-bootstrap/utils/decorators/uses-transition", "ember-bootstrap/utils/is-fastboot", "ember-bootstrap/utils/deprecate-subclassing", "ember-bootstrap/utils/decorators/arg", "@glimmer/tracking", "ember-ref-bucket", "@ember/template-factory"], function (_exports, _component, _object, _debug, _component2, _runloop, _service, _transitionEnd, _dom, _usesTransition, _isFastboot, _deprecateSubclassing, _arg, _tracking, _emberRefBucket, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/object",0,"@ember/debug",0,"@glimmer/component",0,"@ember/runloop",0,"@ember/service",0,"ember-bootstrap/utils/transition-end",0,"ember-bootstrap/utils/dom",0,"ember-bootstrap/utils/decorators/uses-transition",0,"ember-bootstrap/utils/is-fastboot",0,"ember-bootstrap/utils/deprecate-subclassing",0,"ember-bootstrap/utils/decorators/arg",0,"@glimmer/tracking",0,"ember-ref-bucket",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    {{did-insert this.handleVisibilityChanges}}
  {{did-update this.handleVisibilityChanges @open}}
  
  {{#if this.inDom}}
    {{!
      ember-on-helper do not support FastBoot yet. This guard can be removed as
      soon as ember-on-helper guards for FastBoot itself. It is tracked in this
      GitHub issue: https://github.com/buschtoens/ember-on-helper/issues/3
    }}
    {{#unless this.isFastBoot}}
      {{on-window "resize" this.adjustDialog}}
    {{/unless}}
  
    {{#let (component (ensure-safe-component (bs-default @dialogComponent (component "bs-modal/dialog")))
      onClose=this.close
      fade=this._fade
      showModal=this.showModal
      keyboard=this.keyboard
      size=@size
      backdropClose=this.backdropClose
      inDom=this.inDom
      paddingLeft=this.paddingLeft
      paddingRight=this.paddingRight
      centered=(bs-eq this.position "center")
      scrollable=this.scrollable
      fullscreen=@fullscreen
    ) as |Dialog|}}
      {{#if this._renderInPlace}}
        <Dialog
          {{create-ref "modalElement"}}
          ...attributes
        >
          {{yield
            (hash
              header=(component (ensure-safe-component (bs-default @headerComponent (component "bs-modal/header"))) onClose=this.close)
              body=(ensure-safe-component (bs-default @bodyComponent (component "bs-modal/body")))
              footer=(component (ensure-safe-component (bs-default @footerComponent (component "bs-modal/footer"))) onClose=this.close onSubmit=this.doSubmit)
              close=this.close
              submit=this.doSubmit
            )
          }}
        </Dialog>
        <div>
          {{#if this.shouldShowBackdrop}}
            <div class="modal-backdrop {{if this._fade "fade"}} {{if this.showModal "show"}}" {{create-ref "backdropElement"}}></div>
          {{/if}}
        </div>
      {{else}}
        {{#in-element this.destinationElement insertBefore=null}}
          <Dialog
            {{create-ref "modalElement"}}
            ...attributes
          >
            {{yield
              (hash
                header=(component (ensure-safe-component (bs-default @headerComponent (component "bs-modal/header"))) onClose=this.close)
                body=(ensure-safe-component (bs-default @bodyComponent (component "bs-modal/body")))
                footer=(component (ensure-safe-component (bs-default @footerComponent (component "bs-modal/footer"))) onClose=this.close onSubmit=this.doSubmit)
                close=this.close
                submit=this.doSubmit
              )
            }}
          </Dialog>
          <div>
            {{#if this.shouldShowBackdrop}}
              <div class="modal-backdrop {{if this._fade "fade"}} {{if this.showModal "show"}}" {{create-ref "backdropElement"}}></div>
            {{/if}}
          </div>
        {{/in-element}}
      {{/if}}
    {{/let}}
  {{/if}}
  
  */
  {
    "id": "XcEYN0VF",
    "block": "[[[1,[28,[35,0],[[30,0,[\"handleVisibilityChanges\"]]],null]],[1,\"\\n\"],[1,[28,[35,1],[[30,0,[\"handleVisibilityChanges\"]],[30,1]],null]],[1,\"\\n\\n\"],[41,[30,0,[\"inDom\"]],[[[41,[51,[30,0,[\"isFastBoot\"]]],[[[1,\"    \"],[1,[28,[35,4],[\"resize\",[30,0,[\"adjustDialog\"]]],null]],[1,\"\\n\"]],[]],null],[1,\"\\n\"],[44,[[50,[28,[37,7],[[28,[37,8],[[30,2],[50,\"bs-modal/dialog\",0,null,null]],null]],null],0,null,[[\"onClose\",\"fade\",\"showModal\",\"keyboard\",\"size\",\"backdropClose\",\"inDom\",\"paddingLeft\",\"paddingRight\",\"centered\",\"scrollable\",\"fullscreen\"],[[30,0,[\"close\"]],[30,0,[\"_fade\"]],[30,0,[\"showModal\"]],[30,0,[\"keyboard\"]],[30,3],[30,0,[\"backdropClose\"]],[30,0,[\"inDom\"]],[30,0,[\"paddingLeft\"]],[30,0,[\"paddingRight\"]],[28,[37,9],[[30,0,[\"position\"]],\"center\"],null],[30,0,[\"scrollable\"]],[30,4]]]]],[[[41,[30,0,[\"_renderInPlace\"]],[[[1,\"      \"],[8,[30,5],[[17,6],[4,[38,10],[\"modalElement\"],[[\"debugName\",\"bucket\"],[\"create-ref\",[30,0]]]]],null,[[\"default\"],[[[[1,\"\\n        \"],[18,10,[[28,[37,12],null,[[\"header\",\"body\",\"footer\",\"close\",\"submit\"],[[50,[28,[37,7],[[28,[37,8],[[30,7],[50,\"bs-modal/header\",0,null,null]],null]],null],0,null,[[\"onClose\"],[[30,0,[\"close\"]]]]],[28,[37,7],[[28,[37,8],[[30,8],[50,\"bs-modal/body\",0,null,null]],null]],null],[50,[28,[37,7],[[28,[37,8],[[30,9],[50,\"bs-modal/footer\",0,null,null]],null]],null],0,null,[[\"onClose\",\"onSubmit\"],[[30,0,[\"close\"]],[30,0,[\"doSubmit\"]]]]],[30,0,[\"close\"]],[30,0,[\"doSubmit\"]]]]]]],[1,\"\\n      \"]],[]]]]],[1,\"\\n      \"],[10,0],[12],[1,\"\\n\"],[41,[30,0,[\"shouldShowBackdrop\"]],[[[1,\"          \"],[11,0],[16,0,[29,[\"modal-backdrop \",[52,[30,0,[\"_fade\"]],\"fade\"],\" \",[52,[30,0,[\"showModal\"]],\"show\"]]]],[4,[38,10],[\"backdropElement\"],[[\"debugName\",\"bucket\"],[\"create-ref\",[30,0]]]],[12],[13],[1,\"\\n\"]],[]],null],[1,\"      \"],[13],[1,\"\\n\"]],[]],[[[40,[[[1,\"        \"],[8,[30,5],[[17,6],[4,[38,10],[\"modalElement\"],[[\"debugName\",\"bucket\"],[\"create-ref\",[30,0]]]]],null,[[\"default\"],[[[[1,\"\\n          \"],[18,10,[[28,[37,12],null,[[\"header\",\"body\",\"footer\",\"close\",\"submit\"],[[50,[28,[37,7],[[28,[37,8],[[30,7],[50,\"bs-modal/header\",0,null,null]],null]],null],0,null,[[\"onClose\"],[[30,0,[\"close\"]]]]],[28,[37,7],[[28,[37,8],[[30,8],[50,\"bs-modal/body\",0,null,null]],null]],null],[50,[28,[37,7],[[28,[37,8],[[30,9],[50,\"bs-modal/footer\",0,null,null]],null]],null],0,null,[[\"onClose\",\"onSubmit\"],[[30,0,[\"close\"]],[30,0,[\"doSubmit\"]]]]],[30,0,[\"close\"]],[30,0,[\"doSubmit\"]]]]]]],[1,\"\\n        \"]],[]]]]],[1,\"\\n        \"],[10,0],[12],[1,\"\\n\"],[41,[30,0,[\"shouldShowBackdrop\"]],[[[1,\"            \"],[11,0],[16,0,[29,[\"modal-backdrop \",[52,[30,0,[\"_fade\"]],\"fade\"],\" \",[52,[30,0,[\"showModal\"]],\"show\"]]]],[4,[38,10],[\"backdropElement\"],[[\"debugName\",\"bucket\"],[\"create-ref\",[30,0]]]],[12],[13],[1,\"\\n\"]],[]],null],[1,\"        \"],[13],[1,\"\\n\"]],[]],\"%cursor:0%\",[28,[37,14],[[30,0,[\"destinationElement\"]]],null],null]],[]]]],[5]]]],[]],null]],[\"@open\",\"@dialogComponent\",\"@size\",\"@fullscreen\",\"Dialog\",\"&attrs\",\"@headerComponent\",\"@bodyComponent\",\"@footerComponent\",\"&default\"],false,[\"did-insert\",\"did-update\",\"if\",\"unless\",\"on-window\",\"let\",\"component\",\"ensure-safe-component\",\"bs-default\",\"bs-eq\",\"create-ref\",\"yield\",\"hash\",\"in-element\",\"-in-el-null\"]]",
    "moduleName": "ember-bootstrap/components/bs-modal.hbs",
    "isStrictMode": false
  });
  function nextRunloop() {
    return new Promise(resolve => (0, _runloop.next)(resolve));
  }
  function afterRender() {
    return new Promise(resolve => (0, _runloop.schedule)('afterRender', resolve));
  }

  /**
    Component for creating [Bootstrap modals](http://getbootstrap.com/javascript/#modals) with custom markup.
  
    ### Usage
  
    ```hbs
    <BsModal @onSubmit={{action "submit"}} as |Modal|>
      <Modal.header>
        <h4 class="modal-title"><i class="glyphicon glyphicon-alert"></i> Alert</h4>
      </Modal.header>
      <Modal.body>
        Are you absolutely sure you want to do that???
      </Modal.body>
      <Modal.footer as |footer|>
        <BsButton @onClick={{action Modal.close}} @type="danger">Oh no, forget it!</BsButton>
        <BsButton @onClick={{action Modal.submit}} @type="success">Yeah!</BsButton>
      </Modal.footer>
    </BsModal>
    ```
  
    The component yields references to the following contextual components, that you can use to further customize the output:
  
    * [modal.body](Components.ModalBody.html)
    * [modal.header](Components.ModalHeader.html)
    * [modal.footer](Components.ModalFooter.html)
  
    Furthermore references to the following actions are yielded:
  
    * `close`: triggers the `onHide` action and closes the modal
    * `submit`: triggers the `onSubmit` action (or the submit event on a form if present in the body element)
  
    ### Further reading
  
    See the documentation of the [bs-modal-simple](Components.ModalSimple.html) component for further examples.
  
    *Note that only invoking the component in a template as shown above is considered part of its public API. Extending from it (subclassing) is generally not supported, and may break at any time.*
  
    @class Modal
    @namespace Components
    @extends Glimmer.Component
    @public
  */
  let Modal = _exports.default = (_dec = (0, _service.inject)('-document'), _dec2 = (0, _usesTransition.default)('_fade'), _dec3 = (0, _emberRefBucket.ref)('modalElement'), _dec4 = (0, _emberRefBucket.ref)('backdropElement'), _dec5 = (0, _object.computed)('modalElement'), (0, _deprecateSubclassing.default)(_class = (_class2 = class Modal extends _component2.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "document", _descriptor, this);
      /**
       * @property _isOpen
       * @private
       */
      _defineProperty(this, "_isOpen", false);
      /**
       * Used to apply Bootstrap's visibility classes.
       *
       * @property showModal
       * @type boolean
       * @default false
       * @private
       */
      _initializerDefineProperty(this, "showModal", _descriptor2, this);
      /**
       * Render modal markup?
       *
       * @property inDom
       * @type boolean
       * @default false
       * @private
       */
      _initializerDefineProperty(this, "inDom", _descriptor3, this);
      /**
       * @property paddingLeft
       * @type number|undefined
       * @private
       */
      _initializerDefineProperty(this, "paddingLeft", _descriptor4, this);
      /**
       * @property paddingRight
       * @type number|undefined
       * @private
       */
      _initializerDefineProperty(this, "paddingRight", _descriptor5, this);
      /**
       * Visibility of the modal. Toggle to show/hide with CSS transitions.
       *
       * When the modal is closed by user interaction this property will not update by using two-way bindings in order
       * to follow DDAU best practices. If you want to react to such changes, subscribe to the `onHide` action
       *
       * @property open
       * @type boolean
       * @default true
       * @public
       */
      _initializerDefineProperty(this, "open", _descriptor6, this);
      /**
       * Use a semi-transparent modal background to hide the rest of the page.
       *
       * @property backdrop
       * @type boolean
       * @default true
       * @public
       */
      _initializerDefineProperty(this, "backdrop", _descriptor7, this);
      /**
       * @property shouldShowBackdrop
       * @type boolean
       * @private
       */
      _initializerDefineProperty(this, "shouldShowBackdrop", _descriptor8, this);
      /**
       * Closes the modal when escape key is pressed.
       *
       * @property keyboard
       * @type boolean
       * @default true
       * @public
       */
      _initializerDefineProperty(this, "keyboard", _descriptor9, this);
      /**
       * [BS4 only!] Vertical position, either 'top' (default) or 'center'
       * 'center' will apply the `modal-dialog-centered` class
       *
       * @property position
       * @type {string}
       * @default 'top'
       * @public
       */
      _initializerDefineProperty(this, "position", _descriptor10, this);
      /**
       * [BS4 only!] Allows scrolling within the modal body
       * 'true' will apply the `modal-dialog-scrollable` class
       *
       * @property scrollable
       * @type boolean
       * @default false
       * @public
       */
      _initializerDefineProperty(this, "scrollable", _descriptor11, this);
      /**
       *  [BS5 only!] Allows adding fullscreen mode for modals. It will
       *  apply the `modal-fullscreen` class when using `true` and
       *  `modal-fullscreen-[x]-down` class when using BS breakpoints
       *   ([x] = `sm`, `md`, `lg`, `xl`, `xxl`).
       *
       * Also see the [Bootstrap docs](https://getbootstrap.com/docs/5.1/components/modal/#fullscreen-modal)
       *
       * @property fullscreen
       * @type {(Boolean|String)}
       * @default false
       * @public
       */
      /**
       * @property dialogComponent
       * @type {String}
       * @private
       */
      /**
       * @property headerComponent
       * @type {String}
       * @private
       */
      /**
       * @property bodyComponent
       * @type {String}
       * @private
       */
      /**
       * @property footerComponent
       * @type {String}
       * @private
       */
      /**
       * Property for size styling, set to null (default), 'lg' or 'sm'
       *
       * Also see the [Bootstrap docs](http://getbootstrap.com/javascript/#modals-sizes)
       *
       * @property size
       * @type String
       * @public
       */
      /**
       * If true clicking on the backdrop will close the modal.
       *
       * @property backdropClose
       * @type boolean
       * @default true
       * @public
       */
      _initializerDefineProperty(this, "backdropClose", _descriptor12, this);
      /**
       * If true component will render in place, rather than be wormholed.
       *
       * @property renderInPlace
       * @type boolean
       * @default false
       * @public
       */
      _initializerDefineProperty(this, "renderInPlace", _descriptor13, this);
      /**
       * The duration of the fade transition
       *
       * @property transitionDuration
       * @type number
       * @default 300
       * @public
       */
      _initializerDefineProperty(this, "transitionDuration", _descriptor14, this);
      /**
       * The duration of the backdrop fade transition
       *
       * @property backdropTransitionDuration
       * @type number
       * @default 150
       * @public
       */
      _initializerDefineProperty(this, "backdropTransitionDuration", _descriptor15, this);
      /**
       * Use CSS transitions?
       *
       * @property usesTransition
       * @type boolean
       * @readonly
       * @private
       */
      _initializerDefineProperty(this, "usesTransition", _descriptor16, this);
      _defineProperty(this, "destinationElement", (0, _dom.getDestinationElement)(this));
      /**
       * The DOM element of the `.modal` element.
       *
       * @property modalElement
       * @type HTMLElement
       * @readonly
       * @private
       */
      _initializerDefineProperty(this, "modalElement", _descriptor17, this);
      /**
       * The DOM element of the backdrop element.
       *
       * @property backdropElement
       * @type HTMLElement
       * @readonly
       * @private
       */
      _initializerDefineProperty(this, "backdropElement", _descriptor18, this);
      /**
       * @type boolean
       * @readonly
       * @private
       */
      _defineProperty(this, "isFastBoot", (0, _isFastboot.default)(this));
    }
    /**
     * Set to false to disable fade animations.
     *
     * @property fade
     * @type boolean
     * @default true
     * @public
     */

    get _fade() {
      let isFB = (0, _isFastboot.default)(this);
      return this.args.fade === undefined ? !isFB : this.args.fade;
    }
    /**
     * @property _renderInPlace
     * @type boolean
     * @private
     */
    get _renderInPlace() {
      return this.renderInPlace || !this.destinationElement;
    }
    /**
     * The action to be sent when the modal footer's submit button (if present) is pressed.
     * Note that if your modal body contains a form (e.g. [Components.Form](Components.Form.html)) this action will
     * not be triggered. Instead, a submit event will be triggered on the form itself. See the class description for an
     * example.
     *
     * @property onSubmit
     * @type function
     * @public
     */

    /**
     * The action to be sent when the modal is closing.
     * This will be triggered by pressing the modal header's close button (x button) or the modal footer's close button.
     * Note that this will happen before the modal is hidden from the DOM, as the fade transitions will still need some
     * time to finish. Use the `onHidden` if you need the modal to be hidden when the action triggers.
     *
     * You can return false to prevent closing the modal automatically, and do that in your action by
     * setting `open` to false.
     *
     * @property onHide
     * @type function
     * @public
     */

    /**
     * The action to be sent after the modal has been completely hidden (including the CSS transition).
     *
     * @property onHidden
     * @type function
     * @default null
     * @public
     */

    /**
     * The action to be sent when the modal is opening.
     * This will be triggered immediately after the modal is shown (so it's safe to access the DOM for
     * size calculations and the like). This means that if fade=true, it will be shown in between the
     * backdrop animation and the fade animation.
     *
     * @property onShow
     * @type function
     * @default null
     * @public
     */
    /**
     * The action to be sent after the modal has been completely shown (including the CSS transition).
     *
     * @property onShown
     * @type function
     * @public
     */
    close() {
      if (this.args.onHide?.() !== false) {
        this.hide();
      }
    }
    doSubmit() {
      let forms = this.modalElement.querySelectorAll('.modal-body form');
      if (forms.length > 0) {
        // trigger submit event on body forms
        let event = document.createEvent('Events');
        event.initEvent('submit', true, true);
        Array.prototype.slice.call(forms).forEach(form => form.dispatchEvent(event));
      } else {
        // if we have no form, we send a submit action
        this.args.onSubmit?.();
      }
    }

    /**
     * Show the modal
     *
     * @method show
     * @private
     */
    async show() {
      if (this._isOpen) {
        return;
      }
      this._isOpen = true;
      this.addBodyClass();
      this.inDom = true;
      await this.showBackdrop();
      if (this.isDestroyed) {
        return;
      }
      if (!(0, _isFastboot.default)(this)) {
        this.checkScrollbar();
        this.setScrollbar();
      }
      await afterRender();
      const {
        modalElement
      } = this;
      if (!modalElement) {
        return;
      }
      if (!(0, _isFastboot.default)(this)) {
        modalElement.scrollTop = 0;
        this.adjustDialog();
      }
      this.showModal = true;
      this.args.onShow?.();
      if (this.usesTransition) {
        await (0, _transitionEnd.default)(modalElement, this.transitionDuration);
      }
      this.args.onShown?.();
    }

    /**
     * Hide the modal
     *
     * @method hide
     * @private
     */
    async hide() {
      if (!this._isOpen) {
        return;
      }
      this._isOpen = false;
      this.showModal = false;
      if (this.usesTransition) {
        await (0, _transitionEnd.default)(this.modalElement, this.transitionDuration);
      }
      await this.hideModal();
    }

    /**
     * Clean up after modal is hidden and call onHidden
     *
     * @method hideModal
     * @private
     */
    async hideModal() {
      if (this.isDestroyed) {
        return;
      }
      await this.hideBackdrop();
      this.removeBodyClass();
      if (!(0, _isFastboot.default)(this)) {
        this.resetAdjustments();
        this.resetScrollbar();
      }
      this.inDom = false;
      this.args.onHidden?.();
    }

    /**
     * Show the backdrop
     *
     * @method showBackdrop
     * @async
     * @private
     */
    async showBackdrop() {
      if (!this.backdrop || !this.usesTransition) {
        return;
      }
      this.shouldShowBackdrop = true;
      await nextRunloop();
      const {
        backdropElement
      } = this;
      (true && !(backdropElement) && (0, _debug.assert)('Backdrop element should be in DOM', backdropElement));
      await (0, _transitionEnd.default)(backdropElement, this.backdropTransitionDuration);
    }

    /**
     * Hide the backdrop
     *
     * @method hideBackdrop
     * @async
     * @private
     */
    async hideBackdrop() {
      if (!this.backdrop) {
        return;
      }
      if (this.usesTransition) {
        const {
          backdropElement
        } = this;
        (true && !(backdropElement) && (0, _debug.assert)('Backdrop element should be in DOM', backdropElement));
        await (0, _transitionEnd.default)(backdropElement, this.backdropTransitionDuration);
      }
      if (this.isDestroyed) {
        return;
      }
      this.shouldShowBackdrop = false;
    }

    /**
     * @method adjustDialog
     * @private
     */
    adjustDialog() {
      let modalIsOverflowing = this.modalElement.scrollHeight > document.documentElement.clientHeight;
      this.paddingLeft = !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : undefined;
      this.paddingRight = this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : undefined;
    }

    /**
     * @method resetAdjustments
     * @private
     */
    resetAdjustments() {
      this.paddingLeft = undefined;
      this.paddingRight = undefined;
    }

    /**
     * @method checkScrollbar
     * @private
     */
    checkScrollbar() {
      const fullWindowWidth = window.innerWidth;
      this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth;
    }

    /**
     * @method setScrollbar
     * @private
     */
    setScrollbar() {
      let bodyPad = parseInt(document.body.style.paddingRight || 0, 10);
      this._originalBodyPad = document.body.style.paddingRight || '';
      if (this.bodyIsOverflowing) {
        document.body.style.paddingRight = bodyPad + this.scrollbarWidth;
      }
    }

    /**
     * @method resetScrollbar
     * @private
     */
    resetScrollbar() {
      document.body.style.paddingRight = this._originalBodyPad;
    }
    addBodyClass() {
      // special handling for FastBoot, where real `document` is not available
      if ((0, _isFastboot.default)(this)) {
        // a SimpleDOM instance with just a subset of the DOM API!
        let document = this.document;
        let existingClasses = document.body.getAttribute('class') || '';
        if (!existingClasses.includes('modal-open')) {
          document.body.setAttribute('class', `modal-open ${existingClasses}`);
        }
      } else {
        document.body.classList.add('modal-open');
      }
    }
    removeBodyClass() {
      if ((0, _isFastboot.default)(this)) {
        // no need for FastBoot support here
        return;
      }
      document.body.classList.remove('modal-open');
    }

    /**
     * @property scrollbarWidth
     * @type number
     * @readonly
     * @private
     */
    get scrollbarWidth() {
      let scrollDiv = document.createElement('div');
      scrollDiv.className = 'modal-scrollbar-measure';
      let modalEl = this.modalElement;
      modalEl.parentNode.insertBefore(scrollDiv, modalEl.nextSibling);
      let scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
      scrollDiv.parentNode.removeChild(scrollDiv);
      return scrollbarWidth;
    }
    willDestroy() {
      super.willDestroy(...arguments);
      this.removeBodyClass();
      if (!(0, _isFastboot.default)(this)) {
        this.resetScrollbar();
      }
    }
    handleVisibilityChanges() {
      if (this.open) {
        this.show();
      } else {
        this.hide();
      }
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "document", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "showModal", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return this.open && (!this._fade || (0, _isFastboot.default)(this));
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "inDom", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return this.open;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "paddingLeft", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "paddingRight", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "open", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "backdrop", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "shouldShowBackdrop", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return this.open && this.backdrop;
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "keyboard", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "position", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 'top';
    }
  }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "scrollable", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "backdropClose", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "renderInPlace", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "transitionDuration", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 300;
    }
  }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "backdropTransitionDuration", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 150;
    }
  }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "usesTransition", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "modalElement", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "backdropElement", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class2.prototype, "close", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "close"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "doSubmit", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "doSubmit"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "adjustDialog", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "adjustDialog"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "scrollbarWidth", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "scrollbarWidth"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "handleVisibilityChanges", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "handleVisibilityChanges"), _class2.prototype)), _class2)) || _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, Modal);
});
;define("ember-bootstrap/components/bs-modal/body", ["exports", "@ember/component", "@ember/component/template-only", "@ember/template-factory"], function (_exports, _component, _templateOnly, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/component/template-only",0,"@ember/component"eaimeta@70e063a35619d71f
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <div class="modal-body" ...attributes>
    {{yield}}
  </div>
  */
  {
    "id": "G3hKY2T1",
    "block": "[[[11,0],[24,0,\"modal-body\"],[17,1],[12],[1,\"\\n  \"],[18,2,null],[1,\"\\n\"],[13]],[\"&attrs\",\"&default\"],false,[\"yield\"]]",
    "moduleName": "ember-bootstrap/components/bs-modal/body.hbs",
    "isStrictMode": false
  });
  /**
  
   Modal body element used within [Components.Modal](Components.Modal.html) components. See there for examples.
  
   @class ModalBody
   @namespace Components
   @extends Glimmer.Component
   @public
   */
  var _default = _exports.default = (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, (0, _templateOnly.default)());
});
;define("ember-bootstrap/components/bs-modal/dialog", ["exports", "@ember/component", "@ember/object", "@ember/utils", "@glimmer/component", "@ember/runloop", "ember-bootstrap/utils/deprecate-subclassing", "ember-ref-bucket", "@glimmer/tracking", "@ember/object/internals", "@ember/template-factory"], function (_exports, _component, _object, _utils, _component2, _runloop, _deprecateSubclassing, _emberRefBucket, _tracking, _internals, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _class, _class2, _descriptor, _descriptor2;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/object",0,"@ember/utils",0,"@glimmer/component",0,"@ember/runloop",0,"ember-bootstrap/utils/deprecate-subclassing",0,"ember-ref-bucket",0,"@glimmer/tracking",0,"@ember/object/internals",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <div
    role="dialog"
    tabindex="-1"
    aria-labelledby={{this.titleId}}
    class="modal {{if @fade "fade"}} {{if @showModal "show"}} {{if @inDom "d-block"}}"
    ...attributes
    {{on "keydown" this.handleKeyDown}}
    {{on "mousedown" this.handleMouseDown}}
    {{on "mouseup" this.handleMouseUp}}
    {{on "click" this.handleClick}}
    {{style
      paddingLeft=(concat @paddingLeft "px")
      paddingRight=(concat @paddingRight "px")
      display=(if @inDom "block" "")
    }}
    {{create-ref "mainNode"}}
    {{did-insert this.getOrSetTitleId}}
    {{did-insert this.setInitialFocus}}
  >
    <div
      class="modal-dialog
        {{this.sizeClass}}
        {{if @centered "modal-dialog-centered"}}
        {{if @scrollable "modal-dialog-scrollable"}}
        {{if
          (macroCondition (macroGetOwnConfig "isBS5"))
          (if
            @fullscreen (if (bs-eq @fullscreen true) "modal-fullscreen" (concat "modal-fullscreen-" @fullscreen "-down"))
          )
        }}
        "
      role="document"
    >
      <div
        class="modal-content"
        tabindex="-1"
        {{focus-trap shouldSelfFocus=true focusTrapOptions=(hash clickOutsideDeactivates=true fallbackFocus=".modal")}}
      >
        {{yield}}
      </div>
    </div>
  </div>
  
  */
  {
    "id": "RWA/uXJ2",
    "block": "[[[11,0],[24,\"role\",\"dialog\"],[24,\"tabindex\",\"-1\"],[16,\"aria-labelledby\",[30,0,[\"titleId\"]]],[16,0,[29,[\"modal \",[52,[30,1],\"fade\"],\" \",[52,[30,2],\"show\"],\" \",[52,[30,3],\"d-block\"]]]],[17,4],[4,[38,1],[\"keydown\",[30,0,[\"handleKeyDown\"]]],null],[4,[38,1],[\"mousedown\",[30,0,[\"handleMouseDown\"]]],null],[4,[38,1],[\"mouseup\",[30,0,[\"handleMouseUp\"]]],null],[4,[38,1],[\"click\",[30,0,[\"handleClick\"]]],null],[4,[38,2],null,[[\"paddingLeft\",\"paddingRight\",\"display\"],[[28,[37,3],[[30,5],\"px\"],null],[28,[37,3],[[30,6],\"px\"],null],[52,[30,3],\"block\",\"\"]]]],[4,[38,4],[\"mainNode\"],[[\"debugName\",\"bucket\"],[\"create-ref\",[30,0]]]],[4,[38,5],[[30,0,[\"getOrSetTitleId\"]]],null],[4,[38,5],[[30,0,[\"setInitialFocus\"]]],null],[12],[1,\"\\n  \"],[10,0],[15,0,[29,[\"modal-dialog\\n      \",[30,0,[\"sizeClass\"]],\"\\n      \",[52,[30,7],\"modal-dialog-centered\"],\"\\n      \",[52,[30,8],\"modal-dialog-scrollable\"],\"\\n      \",[52,[30,9],[52,[28,[37,6],[[30,9],true],null],\"modal-fullscreen\",[28,[37,3],[\"modal-fullscreen-\",[30,9],\"-down\"],null]]],\"\\n      \"]]],[14,\"role\",\"document\"],[12],[1,\"\\n    \"],[11,0],[24,0,\"modal-content\"],[24,\"tabindex\",\"-1\"],[4,[38,7],null,[[\"shouldSelfFocus\",\"focusTrapOptions\"],[true,[28,[37,8],null,[[\"clickOutsideDeactivates\",\"fallbackFocus\"],[true,\".modal\"]]]]]],[12],[1,\"\\n      \"],[18,10,null],[1,\"\\n    \"],[13],[1,\"\\n  \"],[13],[1,\"\\n\"],[13],[1,\"\\n\"]],[\"@fade\",\"@showModal\",\"@inDom\",\"&attrs\",\"@paddingLeft\",\"@paddingRight\",\"@centered\",\"@scrollable\",\"@fullscreen\",\"&default\"],false,[\"if\",\"on\",\"style\",\"concat\",\"create-ref\",\"did-insert\",\"bs-eq\",\"focus-trap\",\"hash\",\"yield\"]]",
    "moduleName": "ember-bootstrap/components/bs-modal/dialog.hbs",
    "isStrictMode": false
  });

  /**
   Internal component for modal's markup and event handling. Should not be used directly.
  
   @class ModalDialog
   @namespace Components
   @extends Glimmer.Component
   @private
   */
  let ModalDialog = _exports.default = (_dec = (0, _emberRefBucket.ref)('mainNode'), (0, _deprecateSubclassing.default)(_class = (_class2 = class ModalDialog extends _component2.default {
    constructor(...args) {
      super(...args);
      /**
       * @property id
       * @type null | HTMLElement
       */
      _initializerDefineProperty(this, "_element", _descriptor, this);
      /**
       * The id of the `.modal-title` element
       *
       * @property titleId
       * @type string
       * @default null
       * @private
       */
      _initializerDefineProperty(this, "titleId", _descriptor2, this);
      /**
       * If true clicking on the backdrop will be ignored and will not close modal.
       *
       * @property ignoreBackdropClick
       * @type boolean
       * @default false
       * @private
       */
      _defineProperty(this, "ignoreBackdropClick", false);
      /**
       * The target DOM element of mouse down event.
       *
       * @property mouseDownElement
       * @type object
       * @default null
       * @private
       */
      _defineProperty(this, "mouseDownElement", null);
    }
    /**
     * Name of the size class
     *
     * @property sizeClass
     * @type string
     * @readOnly
     * @private
     */
    get sizeClass() {
      let size = this.args.size;
      return (0, _utils.isBlank)(size) ? null : `modal-${size}`;
    }
    /**
     * Gets or sets the id of the title element for aria accessibility tags
     *
     * @method getSetTitleID
     * @private
     */
    getOrSetTitleId(modalNode) {
      //Title element may be set by user so we have to try and find it to set the id
      let nodeId = null;
      if (modalNode) {
        const titleNode = modalNode.querySelector('.modal-title');
        if (titleNode) {
          //Get title id of .modal-title
          nodeId = titleNode.id;
          if (!nodeId) {
            //no title id so we set one
            nodeId = `${(0, _internals.guidFor)(this)}-title`;
            titleNode.id = nodeId;
          }
        }
      }
      this.titleId = nodeId;
    }
    setInitialFocus(element) {
      let autofocus = element && element.querySelector('[autofocus]');
      if (autofocus) {
        (0, _runloop.next)(() => autofocus.focus());
      }
    }
    /**
     * @event onClose
     * @public
     */

    handleKeyDown(e) {
      let code = e.keyCode || e.which;
      if (code === 27 && this.args.keyboard) {
        this.args.onClose?.();
      }
    }
    handleClick(e) {
      if (this.ignoreBackdropClick) {
        this.ignoreBackdropClick = false;
        return;
      }
      if (e.target !== this._element || !this.args.backdropClose) {
        return;
      }
      this.args.onClose?.();
    }
    handleMouseDown(e) {
      this.mouseDownElement = e.target;
    }
    handleMouseUp(e) {
      if (this.mouseDownElement !== this._element && e.target === this._element) {
        this.ignoreBackdropClick = true;
      }
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_element", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "titleId", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "getOrSetTitleId", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "getOrSetTitleId"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setInitialFocus", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "setInitialFocus"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "handleKeyDown", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "handleKeyDown"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "handleClick", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "handleClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "handleMouseDown", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "handleMouseDown"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "handleMouseUp", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "handleMouseUp"), _class2.prototype)), _class2)) || _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, ModalDialog);
});
;define("ember-bootstrap/components/bs-modal/footer", ["exports", "@ember/component", "@ember/component/template-only", "@ember/template-factory"], function (_exports, _component, _templateOnly, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/component/template-only",0,"@ember/component"eaimeta@70e063a35619d71f
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    {{#let (ensure-safe-component (bs-default @buttonComponent (component "bs-button"))) as |Button|}}
    <div class="modal-footer" ...attributes {{on "submit" (bs-default @onSubmit (bs-noop))}}>
      {{#if (has-block)}}
        {{yield}}
      {{else}}
        {{#if @submitTitle}}
          <Button @onClick={{@onClose}}>{{bs-default @closeTitle "Ok"}}</Button>
          <Button @type={{bs-default @submitButtonType "primary"}} onClick={{@onSubmit}} disabled={{bs-default @submitDisabled false}}>{{@submitTitle}}</Button>
        {{else}}
          <Button @type="primary" @onClick={{@onClose}}>{{bs-default @closeTitle "Ok"}}</Button>
        {{/if}}
      {{/if}}
    </div>
  {{/let}}
  */
  {
    "id": "5/iNLiF0",
    "block": "[[[44,[[28,[37,1],[[28,[37,2],[[30,1],[50,\"bs-button\",0,null,null]],null]],null]],[[[1,\"  \"],[11,0],[24,0,\"modal-footer\"],[17,3],[4,[38,4],[\"submit\",[28,[37,2],[[30,4],[28,[37,5],null,null]],null]],null],[12],[1,\"\\n\"],[41,[48,[30,10]],[[[1,\"      \"],[18,10,null],[1,\"\\n\"]],[]],[[[41,[30,5],[[[1,\"        \"],[8,[30,2],null,[[\"@onClick\"],[[30,6]]],[[\"default\"],[[[[1,[28,[35,2],[[30,7],\"Ok\"],null]]],[]]]]],[1,\"\\n        \"],[8,[30,2],[[16,\"onClick\",[30,4]],[16,\"disabled\",[28,[37,2],[[30,8],false],null]]],[[\"@type\"],[[28,[37,2],[[30,9],\"primary\"],null]]],[[\"default\"],[[[[1,[30,5]]],[]]]]],[1,\"\\n\"]],[]],[[[1,\"        \"],[8,[30,2],null,[[\"@type\",\"@onClick\"],[\"primary\",[30,6]]],[[\"default\"],[[[[1,[28,[35,2],[[30,7],\"Ok\"],null]]],[]]]]],[1,\"\\n\"]],[]]]],[]]],[1,\"  \"],[13],[1,\"\\n\"]],[2]]]],[\"@buttonComponent\",\"Button\",\"&attrs\",\"@onSubmit\",\"@submitTitle\",\"@onClose\",\"@closeTitle\",\"@submitDisabled\",\"@submitButtonType\",\"&default\"],false,[\"let\",\"ensure-safe-component\",\"bs-default\",\"component\",\"on\",\"bs-noop\",\"if\",\"has-block\",\"yield\"]]",
    "moduleName": "ember-bootstrap/components/bs-modal/footer.hbs",
    "isStrictMode": false
  });
  /**
  
   Modal footer element used within [Components.Modal](Components.Modal.html) components. See there for examples.
  
   @class ModalFooter
   @namespace Components
   @extends Glimmer.Component
   @public
   */

  /**
   * The title of the default close button. Will be ignored (i.e. no close button) if you provide your own block
   * template.
   *
   * @property closeTitle
   * @type string
   * @default 'Ok'
   * @public
   */

  /**
   * The title of the submit button (primary button). Will be ignored (i.e. no button) if set to `null` or if you provide
   * your own block template.
   *
   * @property submitTitle
   * @type string
   * @default null
   * @public
   */

  /**
   * Set to `true` to disable the submit button. If you bind this to some property that indicates if submitting is allowed
   * (form validation for example) this can be used to prevent the user from pressing the submit button.
   *
   * @property submitDisabled
   * @type boolean
   * @default false
   * @public
   */

  /**
   * The type of the submit button (primary button).
   *
   * @property submitButtonType
   * @type string
   * @default 'primary'
   * @public
   */

  /**
   * @property buttonComponent
   * @type {String}
   * @private
   */

  /**
   * The action to send to the parent modal component when the modal footer's form is submitted
   *
   * @event onSubmit
   * @public
   */

  /**
   * @event onClose
   * @public
   */
  var _default = _exports.default = (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, (0, _templateOnly.default)());
});
;define("ember-bootstrap/components/bs-modal/header", ["exports", "@ember/component", "@ember/component/template-only", "@ember/template-factory"], function (_exports, _component, _templateOnly, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/component/template-only",0,"@ember/component"eaimeta@70e063a35619d71f
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    {{#let
    (ensure-safe-component (bs-default @titleComponent (component "bs-modal/header/title")))
    (component (ensure-safe-component (bs-default @closeComponent (component "bs-modal/header/close"))) onClick=@onClose)
  as |Title Close|
  }}
    <div class="modal-header" ...attributes>
      {{#if (has-block-params)}}
        {{yield
          (hash
            title=Title
            close=Close
          )
        }}
      {{else}}
        {{#if (has-block)}}
          {{yield}}
        {{else}}
          <Title>{{@title}}</Title>
        {{/if}}
        {{#if (bs-default @closeButton true)}}
          <Close/>
        {{/if}}
      {{/if}}
    </div>
  {{/let}}
  */
  {
    "id": "yXvRKbSp",
    "block": "[[[44,[[28,[37,1],[[28,[37,2],[[30,1],[50,\"bs-modal/header/title\",0,null,null]],null]],null],[50,[28,[37,1],[[28,[37,2],[[30,2],[50,\"bs-modal/header/close\",0,null,null]],null]],null],0,null,[[\"onClick\"],[[30,3]]]]],[[[1,\"  \"],[11,0],[24,0,\"modal-header\"],[17,6],[12],[1,\"\\n\"],[41,[49,[30,9]],[[[1,\"      \"],[18,9,[[28,[37,7],null,[[\"title\",\"close\"],[[30,4],[30,5]]]]]],[1,\"\\n\"]],[]],[[[41,[48,[30,9]],[[[1,\"        \"],[18,9,null],[1,\"\\n\"]],[]],[[[1,\"        \"],[8,[30,4],null,null,[[\"default\"],[[[[1,[30,7]]],[]]]]],[1,\"\\n\"]],[]]],[41,[28,[37,2],[[30,8],true],null],[[[1,\"        \"],[8,[30,5],null,null,null],[1,\"\\n\"]],[]],null]],[]]],[1,\"  \"],[13],[1,\"\\n\"]],[4,5]]]],[\"@titleComponent\",\"@closeComponent\",\"@onClose\",\"Title\",\"Close\",\"&attrs\",\"@title\",\"@closeButton\",\"&default\"],false,[\"let\",\"ensure-safe-component\",\"bs-default\",\"component\",\"if\",\"has-block-params\",\"yield\",\"hash\",\"has-block\"]]",
    "moduleName": "ember-bootstrap/components/bs-modal/header.hbs",
    "isStrictMode": false
  });
  /**
  
   Modal header element used within [Components.Modal](Components.Modal.html) components. See there for examples.
  
   @class ModalHeader
   @namespace Components
   @extends Glimmer.Component
   @public
   */

  /**
   * Show a close button (x icon)
   *
   * @property closeButton
   * @type boolean
   * @default true
   * @public
   */

  /**
   * The title to display in the modal header
   *
   * @property title
   * @type string
   * @default null
   * @public
   */

  /**
   * @property titleComponent
   * @type {String}
   * @private
   */

  /**
   * @property closeComponent
   * @type {String}
   * @private
   */

  /**
   * @event onClose
   * @public
   */
  var _default = _exports.default = (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, (0, _templateOnly.default)());
});
;define("ember-bootstrap/components/bs-modal/header/close", ["exports", "@ember/component", "@ember/component/template-only", "@ember/template-factory"], function (_exports, _component, _templateOnly, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/component/template-only",0,"@ember/component"eaimeta@70e063a35619d71f
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <button type="button" aria-label="Close" class={{if (macroCondition (macroGetOwnConfig "isBS5")) "btn-close" "close"}} ...attributes {{on "click" (bs-default @onClick (bs-noop))}}>
    {{#if (macroCondition (macroGetOwnConfig "isBS4"))}}<span aria-hidden="true">&times;</span>{{/if}}
  </button>
  */
  {
    "id": "MksajYwi",
    "block": "[[[11,\"button\"],[24,4,\"button\"],[24,\"aria-label\",\"Close\"],[24,0,\"btn-close\"],[17,1],[4,[38,0],[\"click\",[28,[37,1],[[30,2],[28,[37,2],null,null]],null]],null],[12],[1,\"\\n  \"],[1,\"\\n\"],[13]],[\"&attrs\",\"@onClick\"],false,[\"on\",\"bs-default\",\"bs-noop\"]]",
    "moduleName": "ember-bootstrap/components/bs-modal/header/close.hbs",
    "isStrictMode": false
  });
  /**
  
   @class ModalHeaderClose
   @namespace Components
   @extends Glimmer.Component
   @private
   */

  /**
   * @event onClick
   * @public
   */
  var _default = _exports.default = (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, (0, _templateOnly.default)());
});
;define("ember-bootstrap/components/bs-modal/header/title", ["exports", "@ember/component", "@ember/component/template-only", "@ember/template-factory"], function (_exports, _component, _templateOnly, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/component/template-only",0,"@ember/component"eaimeta@70e063a35619d71f
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <h5 class="modal-title" ...attributes>
    {{yield}}
  </h5>
  
  */
  {
    "id": "/XWdcOJH",
    "block": "[[[11,\"h5\"],[24,0,\"modal-title\"],[17,1],[12],[1,\"\\n  \"],[18,2,null],[1,\"\\n\"],[13],[1,\"\\n\"]],[\"&attrs\",\"&default\"],false,[\"yield\"]]",
    "moduleName": "ember-bootstrap/components/bs-modal/header/title.hbs",
    "isStrictMode": false
  });
  /**
  
   @class ModalHeaderTitle
   @namespace Components
   @extends Glimmer.Component
   @private
   */
  var _default = _exports.default = (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, (0, _templateOnly.default)());
});
;define("ember-bootstrap/components/bs-nav", ["exports", "@ember/component", "@ember-decorators/component", "@ember/object", "ember-bootstrap/utils/default-decorator", "ember-bootstrap/utils/deprecate-subclassing", "@ember/template-factory"], function (_exports, _component, _component2, _object, _defaultDecorator, _deprecateSubclassing, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _dec2, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember-decorators/component",0,"@ember/object",0,"@ember/component",0,"ember-bootstrap/utils/default-decorator",0,"ember-bootstrap/utils/deprecate-subclassing",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <ul class="nav {{this.typeClass}} {{this.additionalClass}} {{if this.justified "nav-justified"}} {{if this.stacked "flex-column"}} {{if this.fill "nav-fill"}}" ...attributes>
    {{yield
      (hash
        item=(ensure-safe-component (bs-default @itemComponent (component "bs-nav/item")))
        link-to=(ensure-safe-component (bs-default @linkToComponent (component "bs-link-to" class="nav-link")))
        linkTo=(ensure-safe-component (bs-default @linkToComponent (component "bs-link-to" class="nav-link")))
        dropdown=(component (ensure-safe-component (bs-default @dropdownComponent (component "bs-dropdown"))) inNav=true htmlTag="li")
      )
    }}
  </ul>
  */
  {
    "id": "9jRgaP/p",
    "block": "[[[11,\"ul\"],[16,0,[29,[\"nav \",[30,0,[\"typeClass\"]],\" \",[30,0,[\"additionalClass\"]],\" \",[52,[30,0,[\"justified\"]],\"nav-justified\"],\" \",[52,[30,0,[\"stacked\"]],\"flex-column\"],\" \",[52,[30,0,[\"fill\"]],\"nav-fill\"]]]],[17,1],[12],[1,\"\\n  \"],[18,5,[[28,[37,2],null,[[\"item\",\"link-to\",\"linkTo\",\"dropdown\"],[[28,[37,3],[[28,[37,4],[[30,2],[50,\"bs-nav/item\",0,null,null]],null]],null],[28,[37,3],[[28,[37,4],[[30,3],[50,\"bs-link-to\",0,null,[[\"class\"],[\"nav-link\"]]]],null]],null],[28,[37,3],[[28,[37,4],[[30,3],[50,\"bs-link-to\",0,null,[[\"class\"],[\"nav-link\"]]]],null]],null],[50,[28,[37,3],[[28,[37,4],[[30,4],[50,\"bs-dropdown\",0,null,null]],null]],null],0,null,[[\"inNav\",\"htmlTag\"],[true,\"li\"]]]]]]]],[1,\"\\n\"],[13]],[\"&attrs\",\"@itemComponent\",\"@linkToComponent\",\"@dropdownComponent\",\"&default\"],false,[\"if\",\"yield\",\"hash\",\"ensure-safe-component\",\"bs-default\",\"component\"]]",
    "moduleName": "ember-bootstrap/components/bs-nav.hbs",
    "isStrictMode": false
  });

  /**
    Component to generate [bootstrap navs](http://getbootstrap.com/components/#nav)
  
    ### Usage
  
    Use in combination with the yielded components
  
    * [Components.NavItem](Components.NavItem.html)
    * [`nav.dropdown`](Components.Dropdown.html)
  
    ```hbs
    <BsNav @type="pills" as |nav|>
      <nav.item>
        <nav.linkTo @route="foo">
          Foo
        </nav.linkTo>
      </nav.item>
      <nav.item>
        <nav.linkTo @route="bar" @model={{this.model}}>
          Bar
        </nav.linkTo>
      </nav.item>
    </BsNav>
    ```
  
    > Note: the use of angle brackets `<nav.linkTo>` as shown above is only supported for Ember >= 3.10, as it relies on
    > Ember's native implementation of the [`LinkComponent`](https://api.emberjs.com/ember/3.12/classes/Ember.Templates.helpers/methods/link-to?anchor=link-to).
    > For older Ember versions please use the legacy syntax with positional arguments: `{{#nav.link-to "bar" this.model}}Bar{{/nav.link-to}}`
  
    ### Nav styles
  
    The component supports the default bootstrap nav styling options "pills" and "tabs" through the `type`
    property, as well as the `justified`, `fill` and `stacked` properties.
  
    ### Active items
  
    Bootstrap 3 expects to have the `active` class on the `<li>` element that should be the active (highlighted)
    navigation item. To achieve that use the `@route` and optionally `@model` (or `@models`) and `@query` properties
    of the yielded `nav.linkTo` component just as you would for Ember's `<LinkTo>` component to create a link with proper
    `active` class support.
  
    ### Dropdowns
  
    Use the `nav.dropdown` contextual version of the [Components.Dropdown](Components.Dropdown.html) component
    with a `tagName` of "li" to integrate a dropdown into your nav:
  
    ```hbs
    <BsNav @type="pills" as |nav|>
      <nav.item>
        <nav.linkTo @route="index">
          Home
        </nav.linkTo>
      </nav.item>
      <nav.dropdown as |dd|>
        <dd.toggle>Dropdown <span class="caret"></span></dd.toggle>
        <dd.menu as |ddm|>
          <ddm.item><ddm.linkTo @route="foo">Foo</ddm.linkTo></ddm.item>
          <ddm.item><ddm.linkTo @route="bar">Bar</ddm.linkTo></ddm.item>
        </dd.menu>
      </nav.dropdown>
    </BsNav>
    ```
  
    ### Bootstrap 3/4 Notes
  
    Use [`nav.linkTo`](Components.NavLinkTo.html) for in-app links to ensure proper styling regardless of
    Bootstrap version. Explicit use of `<a>` tags in Bootstrap 4 must apply the `nav-link` class and manage
    the `active` state explicitly.
  
    The `fill` styling is only available with Bootstrap 4
  
    *Note that only invoking the component in a template as shown above is considered part of its public API. Extending from it (subclassing) is generally not supported, and may break at any time.*
  
    @class Nav
    @namespace Components
    @extends Ember.Component
    @public
  
   */
  let Nav = _exports.default = (_dec = (0, _component2.tagName)(''), _dec2 = (0, _object.computed)('type'), _dec(_class = (0, _deprecateSubclassing.default)(_class = (_class2 = class Nav extends _component.default {
    constructor(...args) {
      super(...args);
      /**
       * Special type of nav, either "pills" or "tabs"
       *
       * @property type
       * @type String
       * @default null
       * @public
       */
      _initializerDefineProperty(this, "type", _descriptor, this);
      /**
       * Make the nav justified, see [bootstrap docs](http://getbootstrap.com/components/#nav-justified)
       *
       * @property justified
       * @type boolean
       * @default false
       * @public
       */
      _initializerDefineProperty(this, "justified", _descriptor2, this);
      /**
       * Make the nav pills stacked, see [bootstrap docs](http://getbootstrap.com/components/#nav-pills)
       *
       * @property stacked
       * @type boolean
       * @default false
       * @public
       */
      _initializerDefineProperty(this, "stacked", _descriptor3, this);
      /**
       * Make the nav flex fill (BS4 only), see [bootstrap docs](http://getbootstrap.com/docs/4.1/components/navs/#fill-and-justify)
       *
       * @property fill
       * @type boolean
       * @default false
       * @public
       */
      _initializerDefineProperty(this, "fill", _descriptor4, this);
    }
    get typeClass() {
      let type = this.type;
      return type ? `nav-${type}` : undefined;
    }
    /**
     * @property itemComponent
     * @type {String}
     * @private
     */
    /**
     * @property linkToComponent
     * @type {String}
     * @private
     */
    /**
     * @property dropdownComponent
     * @type {String}
     * @private
     */
  }, (_applyDecoratedDescriptor(_class2.prototype, "typeClass", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "typeClass"), _class2.prototype), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "type", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "justified", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "stacked", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "fill", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  })), _class2)) || _class) || _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, Nav);
});
;define("ember-bootstrap/components/bs-nav/item", ["exports", "@ember/component", "@ember-decorators/component", "@ember-decorators/object", "@ember/object/computed", "@ember/object", "@ember/runloop", "ember-bootstrap/components/bs-link-to", "ember-bootstrap/mixins/component-parent", "ember-bootstrap/utils/cp/overrideable", "@ember/debug", "ember-bootstrap/utils/deprecate-subclassing", "@ember/template-factory"], function (_exports, _component, _component2, _object, _computed, _object2, _runloop, _bsLinkTo, _componentParent, _overrideable, _debug, _deprecateSubclassing, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember-decorators/component",0,"@ember-decorators/object",0,"@ember/object/computed",0,"@ember/component",0,"@ember/object",0,"@ember/runloop",0,"ember-bootstrap/components/bs-link-to",0,"ember-bootstrap/mixins/component-parent",0,"ember-bootstrap/utils/cp/overrideable",0,"@ember/debug",0,"ember-bootstrap/utils/deprecate-subclassing",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    {{!-- template-lint-disable no-invalid-interactive --}}
  <li class="nav-item {{if this.disabled "disabled"}} {{if this.active "active"}}" ...attributes {{on "click" this.handleClick}}>
    {{yield}}
  </li>
  */
  {
    "id": "Y5PmvRRU",
    "block": "[[[11,\"li\"],[16,0,[29,[\"nav-item \",[52,[30,0,[\"disabled\"]],\"disabled\"],\" \",[52,[30,0,[\"active\"]],\"active\"]]]],[17,1],[4,[38,1],[\"click\",[30,0,[\"handleClick\"]]],null],[12],[1,\"\\n  \"],[18,2,null],[1,\"\\n\"],[13]],[\"&attrs\",\"&default\"],false,[\"if\",\"on\",\"yield\"]]",
    "moduleName": "ember-bootstrap/components/bs-nav/item.hbs",
    "isStrictMode": false
  });

  /**
  
   Component for each item within a [Components.Nav](Components.Nav.html) component. Have a look there for examples.
  
   @class NavItem
   @namespace Components
   @extends Ember.Component
   @uses Mixins.ComponentParent
   @public
   */
  let NavItem = _exports.default = (_dec = (0, _component2.tagName)(''), _dec2 = (0, _overrideable.default)('_disabled', function () {
    return this._disabled;
  }), _dec3 = (0, _overrideable.default)('_active', function () {
    return this._active;
  }), _dec4 = (0, _computed.filter)('children', function (view) {
    return view instanceof _bsLinkTo.default;
  }), _dec5 = (0, _computed.filterBy)('childLinks', 'active'), _dec6 = (0, _computed.gt)('activeChildLinks.length', 0), _dec7 = (0, _computed.filterBy)('childLinks', 'disabled'), _dec8 = (0, _computed.gt)('disabledChildLinks.length', 0), _dec9 = (0, _object.observes)('activeChildLinks.[]'), _dec10 = (0, _object.observes)('disabledChildLinks.[]'), _dec(_class = (0, _deprecateSubclassing.default)(_class = (_class2 = class NavItem extends _component.default.extend(_componentParent.default) {
    constructor(...args) {
      super(...args);
      /**
       * Render the nav item as disabled (see [Bootstrap docs](http://getbootstrap.com/components/#nav-disabled-links)).
       * By default it will look at any nested `link-to` components and make itself disabled if there is a disabled link.
       * See the [link-to API](http://emberjs.com/api/classes/Ember.Templates.helpers.html#toc_disabling-the-code-link-to-code-component)
       *
       * @property disabled
       * @type boolean
       * @public
       */
      _initializerDefineProperty(this, "disabled", _descriptor, this);
      _defineProperty(this, "_disabled", false);
      /**
       * Render the nav item as active.
       * By default it will look at any nested `link-to` components and make itself active if there is an active link
       * (i.e. the link points to the current route).
       * See the [link-to API](http://emberjs.com/api/classes/Ember.Templates.helpers.html#toc_handling-current-route)
       *
       * @property active
       * @type boolean
       * @public
       */
      _initializerDefineProperty(this, "active", _descriptor2, this);
      _defineProperty(this, "_active", false);
      /**
       * Collection of all `Ember.LinkComponent`s that are children
       *
       * @property childLinks
       * @private
       */
      _initializerDefineProperty(this, "childLinks", _descriptor3, this);
      _initializerDefineProperty(this, "activeChildLinks", _descriptor4, this);
      _initializerDefineProperty(this, "hasActiveChildLinks", _descriptor5, this);
      _initializerDefineProperty(this, "disabledChildLinks", _descriptor6, this);
      _initializerDefineProperty(this, "hasDisabledChildLinks", _descriptor7, this);
    }
    /**
     * Called when clicking the nav item
     *
     * @event onClick
     * @public
     */
    onClick() {}
    handleClick() {
      this.onClick();
    }
    init() {
      super.init(...arguments);
      let {
        model,
        models
      } = this;
      (true && !(!model || !models) && (0, _debug.assert)('You cannot pass both `@model` and `@models` to a nav item component!', !model || !models));
      this.activeChildLinks;
      this.disabledChildLinks;
    }
    _observeActive() {
      (0, _runloop.scheduleOnce)('afterRender', this, this._updateActive);
    }
    _updateActive() {
      this.set('_active', this.hasActiveChildLinks);
    }
    _observeDisabled() {
      (0, _runloop.scheduleOnce)('afterRender', this, this._updateDisabled);
    }
    _updateDisabled() {
      this.set('_disabled', this.hasDisabledChildLinks);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "disabled", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "active", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "childLinks", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "activeChildLinks", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "hasActiveChildLinks", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "disabledChildLinks", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "hasDisabledChildLinks", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class2.prototype, "handleClick", [_object2.action], Object.getOwnPropertyDescriptor(_class2.prototype, "handleClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "_observeActive", [_dec9], Object.getOwnPropertyDescriptor(_class2.prototype, "_observeActive"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "_observeDisabled", [_dec10], Object.getOwnPropertyDescriptor(_class2.prototype, "_observeDisabled"), _class2.prototype)), _class2)) || _class) || _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, NavItem);
});
;define("ember-bootstrap/components/bs-navbar", ["exports", "@ember/component", "@ember-decorators/component", "@ember-decorators/object", "@ember/object", "ember-bootstrap/utils/cp/listen-to", "ember-bootstrap/utils/default-decorator", "@ember/debug", "@ember/utils", "ember-bootstrap/utils/deprecate-subclassing", "@ember/template-factory"], function (_exports, _component, _component2, _object, _object2, _listenTo, _defaultDecorator, _debug, _utils, _deprecateSubclassing, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember-decorators/component",0,"@ember-decorators/object",0,"@ember/object",0,"@ember/component",0,"ember-bootstrap/utils/cp/listen-to",0,"ember-bootstrap/utils/default-decorator",0,"@ember/debug",0,"@ember/utils",0,"ember-bootstrap/utils/deprecate-subclassing",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    {{!-- template-lint-disable no-duplicate-landmark-elements --}}
  {{#let
    (hash
      toggle=(component (ensure-safe-component (bs-default @toggleComponent (component "bs-navbar/toggle"))) onClick=this.toggleNavbar collapsed=this._collapsed)
      content=(component (ensure-safe-component (bs-default @contentComponent (component "bs-navbar/content"))) collapsed=this._collapsed onHidden=this.onCollapsed onShown=this.onExpanded)
      nav=(component
        (ensure-safe-component (bs-default @navComponent (component "bs-navbar/nav")))
        linkToComponent=(component "bs-navbar/link-to" onCollapse=this.collapse class="nav-link")
      )
      collapse=this.collapse
      expand=this.expand
      toggleNavbar=this.toggleNavbar
    ) as |yieldedHash|}}
    <nav class="navbar {{this.positionClass}} {{this.typeClass}} {{this.breakpointClass}} {{this.backgroundClass}}" ...attributes>
      {{#if (macroCondition (macroGetOwnConfig "isBS4"))}}
        {{#if this.fluid}}
          {{yield yieldedHash}}
        {{else}}
          <div class="container">
            {{yield yieldedHash}}
          </div>
        {{/if}}
      {{else}}
        <div class={{this.containerClass}}>
          {{yield yieldedHash}}
        </div>
      {{/if}}
    </nav>
  {{/let}}
  */
  {
    "id": "gxCpscXR",
    "block": "[[[44,[[28,[37,1],null,[[\"toggle\",\"content\",\"nav\",\"collapse\",\"expand\",\"toggleNavbar\"],[[50,[28,[37,3],[[28,[37,4],[[30,1],[50,\"bs-navbar/toggle\",0,null,null]],null]],null],0,null,[[\"onClick\",\"collapsed\"],[[30,0,[\"toggleNavbar\"]],[30,0,[\"_collapsed\"]]]]],[50,[28,[37,3],[[28,[37,4],[[30,2],[50,\"bs-navbar/content\",0,null,null]],null]],null],0,null,[[\"collapsed\",\"onHidden\",\"onShown\"],[[30,0,[\"_collapsed\"]],[30,0,[\"onCollapsed\"]],[30,0,[\"onExpanded\"]]]]],[50,[28,[37,3],[[28,[37,4],[[30,3],[50,\"bs-navbar/nav\",0,null,null]],null]],null],0,null,[[\"linkToComponent\"],[[50,\"bs-navbar/link-to\",0,null,[[\"onCollapse\",\"class\"],[[30,0,[\"collapse\"]],\"nav-link\"]]]]]],[30,0,[\"collapse\"]],[30,0,[\"expand\"]],[30,0,[\"toggleNavbar\"]]]]]],[[[1,\"  \"],[11,\"nav\"],[16,0,[29,[\"navbar \",[30,0,[\"positionClass\"]],\" \",[30,0,[\"typeClass\"]],\" \",[30,0,[\"breakpointClass\"]],\" \",[30,0,[\"backgroundClass\"]]]]],[17,5],[12],[1,\"\\n\"],[1,\"      \"],[10,0],[15,0,[30,0,[\"containerClass\"]]],[12],[1,\"\\n        \"],[18,6,[[30,4]]],[1,\"\\n      \"],[13],[1,\"\\n\"],[1,\"  \"],[13],[1,\"\\n\"]],[4]]]],[\"@toggleComponent\",\"@contentComponent\",\"@navComponent\",\"yieldedHash\",\"&attrs\",\"&default\"],false,[\"let\",\"hash\",\"component\",\"ensure-safe-component\",\"bs-default\",\"yield\"]]",
    "moduleName": "ember-bootstrap/components/bs-navbar.hbs",
    "isStrictMode": false
  });

  /**
    Component to generate [Bootstrap navbars](http://getbootstrap.com/components/#navbar).
  
    ### Usage
  
    Uses the following components by a contextual reference:
  
    ```hbs
    <BsNavbar as |navbar|>
      <div class="navbar-header">
        <navbar.toggle />
        <a class="navbar-brand" href="#">Brand</a>
      </div>
      <navbar.content>
        <navbar.nav as |nav|>
          <nav.item>
            <nav.linkTo @route="home">Home</nav.linkTo>
          </nav.item>
          <nav.item>
            <nav.linkTo @route="navbars">Navbars</nav.linkTo>
          </nav.item>
        </navbar.nav>
      </navbar.content>
    </BsNavbar>
    ```
  
    **Note:** the `<div class="navbar-header">` is required for BS3 to hold the elements visible on a mobile breakpoint,
    when the actual content is collapsed. It should *not* be used for BS4!
  
    The component yields references to the following contextual components:
  
    * [Components.NavbarContent](Components.NavbarContent.html)
    * [Components.NavbarToggle](Components.NavbarToggle.html)
    * [Components.NavbarNav](Components.NavbarNav.html)
  
    Furthermore references to the following actions are yielded:
  
    * `collapse`: triggers the `onCollapse` action and collapses the navbar (mobile)
    * `expand`: triggers the `onExpand` action and expands the navbar (mobile)
    * `toggleNavbar`: triggers the `toggleNavbar` action and toggles the navbar (mobile)
  
    ### Responsive Design
  
    For the mobile breakpoint the Bootstrap styles will hide the navbar content (`{{navbar.content}}`). Clicking on the
    navbar toggle button (`{{navbar.toggle}}`) will expand the menu. By default all nav links (`<nav.linkTo @route="...">`) are already
    wired up to call the navbar's `collapse` action, so clicking any of them will collapse the navbar. To selectively
    prevent that, you can set its `collapseNavbar` property to false:
  
    ```hbs
    <nav.item>
      <nav.linkTo @route="index" @collapseNavbar={{false}}>Don't collapse</nav.linkTo>
    </nav.item>
    ```
  
    To collapse the navbar when clicking on some nav items that are not internal links, you can use the yielded `collapse`
    action:
  
    ```hbs
    <BsNavbar as |navbar|>
      <navbar.content>
        <navbar.nav as |nav|>
          <nav.item>
            <a onclick={{action navbar.collapse}}>Collapse</a>
          </nav.item>
        </navbar.nav>
      </navbar.content>
    </BsNavbar>
    ```
  
    ### Navbar styles
  
    The component supports the default bootstrap navbar styling options through the `type`
    property. Bootstrap navbars [do not currently support justified nav links](http://getbootstrap.com/components/#navbar-default),
    so those are explicitly disallowed.
  
    Other bootstrap navbar variations, such as forms, buttons, etc. can be supported through direct use of
    bootstrap styles applied through the `class` attribute on the components.
  
    ### Bootstrap 3/4 Notes
  
    Bootstrap 4 changed the default navbar styling option from `navbar-default` to `navbar-light`.
    If you explicitly specified "default" in Bootstrap 3 and are migrating, you will need to change
    this in your code. Bootstrap 4 changes `navbar-inverse` to `navbar-dark`.
  
    Bootstrap 4 navbars are fluid by default without the need for an additional container. An
    additional container is added like with Bootstrap 3 if `fluid` is `false`.
  
    *Note that only invoking the component in a template as shown above is considered part of its public API. Extending from it (subclassing) is generally not supported, and may break at any time.*
  
    @class Navbar
    @namespace Components
    @extends Ember.Component
    @public
  */
  let Navbar = _exports.default = (_dec = (0, _component2.tagName)(''), _dec2 = (0, _listenTo.default)('collapsed'), _dec3 = (0, _object2.computed)('fluid', 'container'), _dec4 = (0, _object2.computed)('position'), _dec5 = (0, _object2.computed)('type'), _dec6 = (0, _object.observes)('_collapsed'), _dec7 = (0, _object2.computed)('toggleBreakpoint'), _dec8 = (0, _object2.computed)('backgroundColor'), _dec(_class = (0, _deprecateSubclassing.default)(_class = (_class2 = class Navbar extends _component.default {
    constructor(...args) {
      super(...args);
      /**
       * Manages the state for the responsive menu between the toggle and the content.
       *
       * @property collapsed
       * @type boolean
       * @default true
       * @public
       */
      _initializerDefineProperty(this, "collapsed", _descriptor, this);
      /**
       * @property _collapsed
       * @private
       */
      _initializerDefineProperty(this, "_collapsed", _descriptor2, this);
      /**
       * Controls whether the wrapping div is a fluid container or not.
       *
       * @property fluid
       * @type boolean
       * @default true
       * @public
       */
      _initializerDefineProperty(this, "fluid", _descriptor3, this);
      /**
       * Specifies the position classes for the navbar, currently supporting none, "fixed-top", "fixed-bottom", and
       * either "static-top" (BS3) or "sticky-top" (BS4).
       * See the [bootstrap docs](http://getbootstrap.com/components/#navbar-fixed-top) for details.
       *
       * @property position
       * @type String
       * @default null
       * @public
       */
      _initializerDefineProperty(this, "position", _descriptor4, this);
      /**
       * Property for type styling
       *
       * For the available types see the [Bootstrap docs](https://getbootstrap.com/docs/4.3/components/navbar/#color-schemes)
       *
       * @property type
       * @type String
       * @default 'light'
       * @public
       */
      _initializerDefineProperty(this, "type", _descriptor5, this);
      /**
       * Bootstrap 4 Only: Defines the responsive toggle breakpoint size. Options are the standard
       * two character Bootstrap size abbreviations. Used to set the `navbar-expand-*`
       * class. Set to `null` to disable collapsing.
       *
       * @property toggleBreakpoint
       * @type String
       * @default 'lg'
       * @public
       */
      _initializerDefineProperty(this, "toggleBreakpoint", _descriptor6, this);
      /**
       * Bootstrap 4 Only: Sets the background color for the navbar. Can be any color
       * in the set that composes the `bg-*` classes and can be extended by creating your
       * own `bg-*` classes.
       *
       * @property backgroundColor
       * @type String
       * @default 'light'
       * @public
       */
      _initializerDefineProperty(this, "backgroundColor", _descriptor7, this);
    }
    /**
     * BS5 only: Allows to override the container layout, see https://getbootstrap.com/docs/5.0/components/navbar/#containers.
     * Allowed values: `'sm'`, `'md'`, `'lg'`, `'xl'`, `'xxl'`, `'fluid'`, see https://getbootstrap.com/docs/5.0/layout/containers/.
     * By default it is `.container-fluid`, or `.container` if the `@fluid` argument is set to false.
     *
     * @property container
     * @type string
     * @public
     */

    get containerClass() {
      if (this.container) {
        return `container-${this.container}`;
      }
      return this.fluid ? 'container-fluid' : 'container';
    }
    get positionClass() {
      let position = this.position;
      let validPositions = ['fixed-top', 'fixed-bottom', 'sticky-top'];
      if (validPositions.indexOf(position) === -1) {
        return null;
      }
      return position;
    }
    get typeClass() {
      let type = this.type || 'light';
      (true && !(typeof type === 'string' && type !== '') && (0, _debug.assert)('The value of `type` must be a string', typeof type === 'string' && type !== ''));
      return `navbar-${type}`;
    }

    /**
     * The action to be sent when the navbar is about to be collapsed.
     *
     * You can return false to prevent collapsing the navbar automatically, and do that in your action by
     * setting `collapsed` to true.
     *
     * @event onCollapse
     * @public
     */
    onCollapse() {}

    /**
     * The action to be sent after the navbar has been collapsed (including the CSS transition).
     *
     * @event onCollapsed
     * @public
     */
    onCollapsed() {}

    /**
     * The action to be sent when the navbar is about to be expanded.
     *
     * You can return false to prevent expanding the navbar automatically, and do that in your action by
     * setting `collapsed` to false.
     *
     * @event onExpand
     * @public
     */
    onExpand() {}

    /**
     * The action to be sent after the navbar has been expanded (including the CSS transition).
     *
     * @event onExpanded
     * @public
     */
    onExpanded() {}
    _onCollapsedChange() {
      let collapsed = this._collapsed;
      let active = this.active;
      if (collapsed !== active) {
        return;
      }
      if (collapsed === false) {
        this.show();
      } else {
        this.hide();
      }
    }

    /**
     * @method expand
     * @private
     */
    expand() {
      if (this.onExpand() !== false) {
        this.set('_collapsed', false);
      }
    }

    /**
     * @method collapse
     * @private
     */
    collapse() {
      if (this.onCollapse() !== false) {
        this.set('_collapsed', true);
      }
    }
    toggleNavbar() {
      if (this._collapsed) {
        this.expand();
      } else {
        this.collapse();
      }
    }
    get breakpointClass() {
      let toggleBreakpoint = this.toggleBreakpoint;
      if ((0, _utils.isBlank)(toggleBreakpoint)) {
        return 'navbar-expand';
      } else {
        return `navbar-expand-${toggleBreakpoint}`;
      }
    }
    get backgroundClass() {
      return `bg-${this.backgroundColor}`;
    }

    /**
     * @property toggleComponent
     * @type {String}
     * @private
     */

    /**
     * @property contentComponent
     * @type {String}
     * @private
     */

    /**
     * @property navComponent
     * @type {String}
     * @private
     */

    /**
     * @property linkToComponent
     * @type {String}
     * @private
     */
  }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "collapsed", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_collapsed", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "fluid", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "containerClass", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "containerClass"), _class2.prototype), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "position", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "positionClass", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "positionClass"), _class2.prototype), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "type", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 'light';
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "typeClass", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "typeClass"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "_onCollapsedChange", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "_onCollapsedChange"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "expand", [_object2.action], Object.getOwnPropertyDescriptor(_class2.prototype, "expand"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "collapse", [_object2.action], Object.getOwnPropertyDescriptor(_class2.prototype, "collapse"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "toggleNavbar", [_object2.action], Object.getOwnPropertyDescriptor(_class2.prototype, "toggleNavbar"), _class2.prototype), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "toggleBreakpoint", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 'lg';
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "backgroundColor", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 'light';
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "breakpointClass", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "breakpointClass"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "backgroundClass", [_dec8], Object.getOwnPropertyDescriptor(_class2.prototype, "backgroundClass"), _class2.prototype)), _class2)) || _class) || _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, Navbar);
});
;define("ember-bootstrap/components/bs-navbar/content", ["exports", "@ember/component", "@ember-decorators/component", "ember-bootstrap/utils/deprecate-subclassing", "@ember/template-factory"], function (_exports, _component, _component2, _deprecateSubclassing, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _class;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember-decorators/component",0,"@ember/component",0,"ember-bootstrap/utils/deprecate-subclassing",0,"@ember/component"eaimeta@70e063a35619d71f
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <BsCollapse
    @collapsed={{@collapsed}}
    @onHidden={{@onHidden}}
    @onShown={{@onShown}}
    class="navbar-collapse"
    ...attributes
  >
    {{yield}}
  </BsCollapse>
  
  */
  {
    "id": "UA5o+uis",
    "block": "[[[8,[39,0],[[24,0,\"navbar-collapse\"],[17,1]],[[\"@collapsed\",\"@onHidden\",\"@onShown\"],[[30,2],[30,3],[30,4]]],[[\"default\"],[[[[1,\"\\n  \"],[18,5,null],[1,\"\\n\"]],[]]]]],[1,\"\\n\"]],[\"&attrs\",\"@collapsed\",\"@onHidden\",\"@onShown\",\"&default\"],false,[\"bs-collapse\",\"yield\"]]",
    "moduleName": "ember-bootstrap/components/bs-navbar/content.hbs",
    "isStrictMode": false
  });

  /**
   * Component to wrap the collapsible content of a [Components.Navbar](Components.Navbar.html) component.
   * Have a look there for examples.
   *
   * @class NavbarContent
   * @namespace Components
   * @extends Components.Collapse
   * @public
   */
  let NavbarContent = _exports.default = (_dec = (0, _component2.tagName)(''), _dec(_class = (0, _deprecateSubclassing.default)(_class = class NavbarContent extends _component.default {}) || _class) || _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, NavbarContent);
});
;define("ember-bootstrap/components/bs-navbar/link-to", ["exports", "@ember/component", "@glimmer/component", "@ember/object", "@ember/template-factory"], function (_exports, _component, _component2, _object, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@glimmer/component",0,"@ember/object",0,"@ember/component"eaimeta@70e063a35619d71f
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <BsLinkTo
    @route={{@route}}
    @model={{@model}}
    @models={{@models}}
    @query={{@query}}
    @disabled={{@disabled}}
    {{on 'click' this.onClick}}
    class={{@class}}
    ...attributes
  >
    {{yield}}
  </BsLinkTo>
  */
  {
    "id": "grDuxrMN",
    "block": "[[[8,[39,0],[[16,0,[30,1]],[17,2],[4,[38,1],[\"click\",[30,0,[\"onClick\"]]],null]],[[\"@route\",\"@model\",\"@models\",\"@query\",\"@disabled\"],[[30,3],[30,4],[30,5],[30,6],[30,7]]],[[\"default\"],[[[[1,\"\\n  \"],[18,8,null],[1,\"\\n\"]],[]]]]]],[\"@class\",\"&attrs\",\"@route\",\"@model\",\"@models\",\"@query\",\"@disabled\",\"&default\"],false,[\"bs-link-to\",\"on\",\"yield\"]]",
    "moduleName": "ember-bootstrap/components/bs-navbar/link-to.hbs",
    "isStrictMode": false
  });

  /**
   * Extended `{{link-to}}` component for use within Navbars.
   *
   * @class NavbarLinkTo
   * @namespace Components
   * @extends Components.NavLinkTo
   * @public
   */
  let NavbarLinkTo = _exports.default = (_class = class NavbarLinkTo extends _component2.default {
    /**
     * @property collapseNavbar
     * @type {Boolean}
     * @default true
     * @public
     */

    onClick() {
      if (this.args.collapseNavbar ?? true) {
        this.args.onCollapse();
      }
    }
  }, (_applyDecoratedDescriptor(_class.prototype, "onClick", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onClick"), _class.prototype)), _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, NavbarLinkTo);
});
;define("ember-bootstrap/components/bs-navbar/nav", ["exports", "ember-bootstrap/components/bs-nav", "ember-bootstrap/utils/default-decorator"], function (_exports, _bsNav, _defaultDecorator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor;
  0; //eaimeta@70e063a35619d71f0,"ember-bootstrap/components/bs-nav",0,"ember-bootstrap/utils/default-decorator"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  /**
   * Component for the `.nav` element within a [Components.Navbar](Components.Navbar.html)
   * component. Have a look there for examples.
   *
   * Per [the bootstrap docs](http://getbootstrap.com/components/#navbar),
   * justified navbar nav links are not supported.
   *
   * @class NavbarNav
   * @namespace Components
   * @extends Components.Nav
   * @public
   */
  let NavbarNav = _exports.default = (_class = class NavbarNav extends _bsNav.default {
    constructor(...args) {
      super(...args);
      _defineProperty(this, '__ember-bootstrap_subclass', true);
      _initializerDefineProperty(this, "justified", _descriptor, this);
      _defineProperty(this, "additionalClass", 'navbar-nav');
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "justified", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  })), _class);
});
;define("ember-bootstrap/components/bs-navbar/toggle", ["exports", "@ember/component", "@ember/object", "@ember-decorators/component", "ember-bootstrap/utils/default-decorator", "ember-bootstrap/utils/deprecate-subclassing", "@ember/template-factory"], function (_exports, _component, _object, _component2, _defaultDecorator, _deprecateSubclassing, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _class, _class2, _descriptor;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember/object",0,"@ember-decorators/component",0,"@ember/component",0,"ember-bootstrap/utils/default-decorator",0,"ember-bootstrap/utils/deprecate-subclassing",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <button type="button" class="navbar-toggler {{if this.collapsed "collapsed"}}" ...attributes {{on "click" this.handleClick}}>
    {{#if (has-block)}}
      {{yield}}
    {{else}}
      <span class="navbar-toggler-icon"></span>
    {{/if}}
  </button>
  */
  {
    "id": "LZVFFPo5",
    "block": "[[[11,\"button\"],[24,4,\"button\"],[16,0,[29,[\"navbar-toggler \",[52,[30,0,[\"collapsed\"]],\"collapsed\"]]]],[17,1],[4,[38,1],[\"click\",[30,0,[\"handleClick\"]]],null],[12],[1,\"\\n\"],[41,[48,[30,2]],[[[1,\"    \"],[18,2,null],[1,\"\\n\"]],[]],[[[1,\"    \"],[10,1],[14,0,\"navbar-toggler-icon\"],[12],[13],[1,\"\\n\"]],[]]],[13]],[\"&attrs\",\"&default\"],false,[\"if\",\"on\",\"has-block\",\"yield\"]]",
    "moduleName": "ember-bootstrap/components/bs-navbar/toggle.hbs",
    "isStrictMode": false
  });

  /**
   * Component to implement the responsive menu toggle behavior in a [Components.Navbar](Components.Navbar.html)
   * component. Have a look there for examples.
   *
   * ### Bootstrap 3/4 Notes
   *
   * The inline version of the component uses the triple `icon-bar` styling for Bootstrap 3 and the
   * `navbar-toggler-icon` styling for Bootstrap 4.
   *
   * @class NavbarToggle
   * @namespace Components
   * @extends Ember.Component
   * @public
   */
  let NavbarToggle = _exports.default = (_dec = (0, _component2.tagName)(''), _dec(_class = (0, _deprecateSubclassing.default)(_class = (_class2 = class NavbarToggle extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "collapsed", _descriptor, this);
    }
    /**
     * @event onClick
     * @public
     */
    onClick() {}
    handleClick() {
      this.onClick();
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "collapsed", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "handleClick", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "handleClick"), _class2.prototype)), _class2)) || _class) || _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, NavbarToggle);
});
;define("ember-bootstrap/components/bs-popover", ["exports", "@ember/component", "ember-bootstrap/components/bs-contextual-help", "ember-bootstrap/utils/decorators/arg", "ember-bootstrap/utils/deprecate-subclassing", "@ember/template-factory"], function (_exports, _component, _bsContextualHelp, _arg, _deprecateSubclassing, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _class2, _descriptor, _descriptor2;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"ember-bootstrap/components/bs-contextual-help",0,"ember-bootstrap/utils/decorators/arg",0,"ember-bootstrap/utils/deprecate-subclassing",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    {{! template-lint-disable no-unbound }}
  {{unbound this._parentFinder}}
  {{#if this.inDom}}
    {{#let (ensure-safe-component (bs-default @elementComponent (component "bs-popover/element"))) as |Element|}}
      <Element
        @placement={{this.placement}}
        @fade={{this.fade}}
        @showHelp={{this.showHelp}}
        @title={{@title}}
        @renderInPlace={{this._renderInPlace}}
        @popperTarget={{this.triggerTargetElement}}
        @destinationElement={{this.destinationElement}}
        @autoPlacement={{this.autoPlacement}}
        @viewportElement={{this.viewportElement}}
        @viewportPadding={{this.viewportPadding}}
  
        {{create-ref "overlayElement"}}
        ...attributes
      >
        {{yield
          (hash
            close=this.close
          )
        }}
      </Element>
    {{/let}}
  {{/if}}
  {{did-insert this.setup}}
  {{did-update this.showOrHide @visible}}
  */
  {
    "id": "XLzkvvMK",
    "block": "[[[1,[28,[35,0],[[30,0,[\"_parentFinder\"]]],null]],[1,\"\\n\"],[41,[30,0,[\"inDom\"]],[[[44,[[28,[37,3],[[28,[37,4],[[30,1],[50,\"bs-popover/element\",0,null,null]],null]],null]],[[[1,\"    \"],[8,[30,2],[[17,3],[4,[38,6],[\"overlayElement\"],[[\"debugName\",\"bucket\"],[\"create-ref\",[30,0]]]]],[[\"@placement\",\"@fade\",\"@showHelp\",\"@title\",\"@renderInPlace\",\"@popperTarget\",\"@destinationElement\",\"@autoPlacement\",\"@viewportElement\",\"@viewportPadding\"],[[30,0,[\"placement\"]],[30,0,[\"fade\"]],[30,0,[\"showHelp\"]],[30,4],[30,0,[\"_renderInPlace\"]],[30,0,[\"triggerTargetElement\"]],[30,0,[\"destinationElement\"]],[30,0,[\"autoPlacement\"]],[30,0,[\"viewportElement\"]],[30,0,[\"viewportPadding\"]]]],[[\"default\"],[[[[1,\"\\n      \"],[18,6,[[28,[37,8],null,[[\"close\"],[[30,0,[\"close\"]]]]]]],[1,\"\\n    \"]],[]]]]],[1,\"\\n\"]],[2]]]],[]],null],[1,[28,[35,9],[[30,0,[\"setup\"]]],null]],[1,\"\\n\"],[1,[28,[35,10],[[30,0,[\"showOrHide\"]],[30,5]],null]]],[\"@elementComponent\",\"Element\",\"&attrs\",\"@title\",\"@visible\",\"&default\"],false,[\"unbound\",\"if\",\"let\",\"ensure-safe-component\",\"bs-default\",\"component\",\"create-ref\",\"yield\",\"hash\",\"did-insert\",\"did-update\"]]",
    "moduleName": "ember-bootstrap/components/bs-popover.hbs",
    "isStrictMode": false
  });

  /**
    Component that implements Bootstrap [popovers](http://getbootstrap.com/javascript/#popovers).
  
    By default, it will attach its listeners (click) to the parent DOM element to trigger
    the popover:
  
    ```hbs
    <button class="btn">
      <BsPopover @title="this is a title">and this the body</BsPopover>
    </button>
    ```
  
    ### Trigger
  
    The trigger element is the DOM element that will cause the popover to be shown when one of the trigger events occur on
    that element. By default, the trigger element is the parent DOM element of the component, and the trigger event will be
    "click".
  
    The `triggerElement` property accepts any CSS selector to attach the popover to any other existing DOM element.
  
    To customize the events that will trigger the popover use the `triggerEvents` property, that accepts an array or a
    string of events, with "hover", "focus" and "click" being supported.
  
    ### Placement options
  
    By default, the popover will show up to the right of the trigger element. Use the `placement` property to change that
    ("top", "bottom", "left" and "right"). To make sure the popover will not exceed the viewport (see Advanced customization)
    you can set `autoPlacement` to true. A popover with `placement="right" will be placed to the right if there is enough
    space, otherwise to the left.
  
    ### Advanced customization
  
    Several other properties allow for some advanced customization:
    * `visible` to show/hide the popover programmatically
    * `fade` to disable the fade in transition
    * `delay` (or `delayShow` and `delayHide`) to add a delay
    * `viewportSelector` and `viewportPadding` to customize the viewport that affects `autoPlacement`
    *  a `close` action is yielded, that allows you to close the tooltip:
  
    ```hbs
    <BsPopover as |po| >This is a popover <button onclick={{action po.close}}>Close</button></BsPopover>
    ```
  
    See the individual API docs for each property.
  
    ### Actions
  
    When you want to react on the popover being shown or hidden, you can use one of the following supported actions:
    * `onShow`
    * `onShown`
    * `onHide`
    * `onHidden`
  
    *Note that only invoking the component in a template as shown above is considered part of its public API. Extending from it (subclassing) is generally not supported, and may break at any time.*
  
    @class Popover
    @namespace Components
    @extends Components.ContextualHelp
    @public
  */
  let Popover = _exports.default = (0, _deprecateSubclassing.default)(_class = (_class2 = class Popover extends _bsContextualHelp.default {
    constructor(...args) {
      super(...args);
      /**
       * @property placement
       * @type string
       * @default 'right'
       * @public
       */
      _initializerDefineProperty(this, "placement", _descriptor, this);
      /**
       * @property triggerEvents
       * @type array|string
       * @default 'click'
       * @public
       */
      _initializerDefineProperty(this, "triggerEvents", _descriptor2, this);
    }
    /**
     * @property elementComponent
     * @type {String}
     * @private
     */
    /**
     * The DOM element of the arrow element.
     *
     * @property arrowElement
     * @type object
     * @readonly
     * @private
     */
    get arrowElement() {
      return this.overlayElement.querySelector('.arrow');
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "placement", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 'right';
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "triggerEvents", [_arg.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 'click';
    }
  })), _class2)) || _class;
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, Popover);
});
;define("ember-bootstrap/components/bs-popover/element", ["exports", "@ember/component", "ember-bootstrap/components/bs-contextual-help/element", "@ember/template-factory", "@embroider/macros/runtime"], function (_exports, _component, _element, _templateFactory, _runtime) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"ember-bootstrap/components/bs-contextual-help/element",0,"@embroider/macros",0,"@ember/component"eaimeta@70e063a35619d71f
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    {{#if @renderInPlace}}
    <div
      class="popover {{if this.fade "fade"}} {{this.actualPlacementClass}} {{if this.showHelp "show"}}"
      role="tooltip"
      ...attributes
      {{popper-tooltip @popperTarget this.popperOptions}}
      {{create-ref "popperElement"}}
    >
      <div class={{this.arrowClass}}></div>
      {{#if @title}}
        <h3 class="popover-header">{{@title}}</h3>
      {{/if}}
      <div class="popover-body">{{yield}}</div>
    </div>
  {{else}}
    {{#in-element @destinationElement insertBefore=null}}
      <div
        class="popover {{if this.fade "fade"}} {{this.actualPlacementClass}} {{if this.showHelp "show"}}"
        role="tooltip"
        ...attributes
        {{popper-tooltip @popperTarget this.popperOptions}}
        {{create-ref "popperElement"}}
      >
        <div class={{this.arrowClass}}></div>
        {{#if @title}}
          <h3 class="popover-header">{{@title}}</h3>
        {{/if}}
        <div class="popover-body">{{yield}}</div>
      </div>
    {{/in-element}}
  {{/if}}
  
  
  */
  {
    "id": "zvfjZqoW",
    "block": "[[[41,[30,1],[[[1,\"  \"],[11,0],[16,0,[29,[\"popover \",[52,[30,0,[\"fade\"]],\"fade\"],\" \",[30,0,[\"actualPlacementClass\"]],\" \",[52,[30,0,[\"showHelp\"]],\"show\"]]]],[24,\"role\",\"tooltip\"],[17,2],[4,[38,1],[[30,3],[30,0,[\"popperOptions\"]]],null],[4,[38,2],[\"popperElement\"],[[\"debugName\",\"bucket\"],[\"create-ref\",[30,0]]]],[12],[1,\"\\n    \"],[10,0],[15,0,[30,0,[\"arrowClass\"]]],[12],[13],[1,\"\\n\"],[41,[30,4],[[[1,\"      \"],[10,\"h3\"],[14,0,\"popover-header\"],[12],[1,[30,4]],[13],[1,\"\\n\"]],[]],null],[1,\"    \"],[10,0],[14,0,\"popover-body\"],[12],[18,6,null],[13],[1,\"\\n  \"],[13],[1,\"\\n\"]],[]],[[[40,[[[1,\"    \"],[11,0],[16,0,[29,[\"popover \",[52,[30,0,[\"fade\"]],\"fade\"],\" \",[30,0,[\"actualPlacementClass\"]],\" \",[52,[30,0,[\"showHelp\"]],\"show\"]]]],[24,\"role\",\"tooltip\"],[17,2],[4,[38,1],[[30,3],[30,0,[\"popperOptions\"]]],null],[4,[38,2],[\"popperElement\"],[[\"debugName\",\"bucket\"],[\"create-ref\",[30,0]]]],[12],[1,\"\\n      \"],[10,0],[15,0,[30,0,[\"arrowClass\"]]],[12],[13],[1,\"\\n\"],[41,[30,4],[[[1,\"        \"],[10,\"h3\"],[14,0,\"popover-header\"],[12],[1,[30,4]],[13],[1,\"\\n\"]],[]],null],[1,\"      \"],[10,0],[14,0,\"popover-body\"],[12],[18,6,null],[13],[1,\"\\n    \"],[13],[1,\"\\n\"]],[]],\"%cursor:0%\",[28,[37,5],[[30,5]],null],null]],[]]],[1,\"\\n\"]],[\"@renderInPlace\",\"&attrs\",\"@popperTarget\",\"@title\",\"@destinationElement\",\"&default\"],false,[\"if\",\"popper-tooltip\",\"create-ref\",\"yield\",\"in-element\",\"-in-el-null\"]]",
    "moduleName": "ember-bootstrap/components/bs-popover/element.hbs",
    "isStrictMode": false
  });

  /**
   Internal component for popover's markup. Should not be used directly.
  
   @class PopoverElement
   @namespace Components
   @extends Components.ContextualHelpElement
   @private
   */
  class PopoverElement extends _element.default {
    constructor(...args) {
      super(...args);
      /**
       * @property title
       * @type string
       * @public
       */
      _defineProperty(this, "arrowClass", (0, _runtime.macroCondition)((0, _runtime.config)("/home/ec2-user/coup/client/node_modules/ember-bootstrap").isBS5) ? 'popover-arrow' : 'arrow');
      _defineProperty(this, "placementClassPrefix", 'bs-popover-');
      _defineProperty(this, "offset", [0, 8]);
    }
  }
  _exports.default = PopoverElement;
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, PopoverElement);
});
;define("ember-bootstrap/components/bs-progress", ["exports", "@ember/component", "@ember-decorators/component", "ember-bootstrap/utils/deprecate-subclassing", "@ember/template-factory"], function (_exports, _component, _component2, _deprecateSubclassing, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _class;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember-decorators/component",0,"@ember/component",0,"ember-bootstrap/utils/deprecate-subclassing",0,"@ember/component"eaimeta@70e063a35619d71f
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <div class="progress" ...attributes>
    {{yield
      (hash
        bar=(bs-default @progressBarComponent (component "bs-progress/bar"))
      )
    }}
  </div>
  */
  {
    "id": "Lh5+fd5N",
    "block": "[[[11,0],[24,0,\"progress\"],[17,1],[12],[1,\"\\n  \"],[18,3,[[28,[37,1],null,[[\"bar\"],[[28,[37,2],[[30,2],[50,\"bs-progress/bar\",0,null,null]],null]]]]]],[1,\"\\n\"],[13]],[\"&attrs\",\"@progressBarComponent\",\"&default\"],false,[\"yield\",\"hash\",\"bs-default\",\"component\"]]",
    "moduleName": "ember-bootstrap/components/bs-progress.hbs",
    "isStrictMode": false
  });

  /**
    Component to display a Bootstrap progress bar, see http://getbootstrap.com/components/#progress.
  
    ### Usage
  
    The component yields a [Components.ProgressBar](Components.ProgressBar.html) component that represents a single bar.
    Use the `value` property to control the progress bar's width. To apply the different styling options supplied by
    Bootstrap, use the appropriate properties like `type`, `showLabel`, `striped` or `animate`.
  
    ```hbs
    <BsProgress as |pg| >
      <pg.bar @value={{this.progressValue}} @minValue={{0}} @maxValue={{10}} @showLabel={{true}} @type="danger" aria-label="Loading" />
    </BsProgress>
    ```
  
    > Don't forget to add a `aria-label` attribute to the progress bar for accessibility!
  
    ### Stacked
  
    You can place multiple progress bar components in a single progress component to
    create a stack of progress bars as seen in http://getbootstrap.com/components/#progress-stacked.
  
    ```hbs
    <BsProgress as |pg| >
      <pg.bar @value={{this.progressValue1}} @type="success" />
      <pg.bar @value={{this.progressValue2}} @type="warning" />
      <pg.bar @value={{this.progressValue3}} @type="danger" />
    </BsProgress>
    ```
  
    *Note that only invoking the component in a template as shown above is considered part of its public API. Extending from it (subclassing) is generally not supported, and may break at any time.*
  
    @class Progress
    @namespace Components
    @extends Ember.Component
    @public
  */
  let Progress = _exports.default = (_dec = (0, _component2.tagName)(''), _dec(_class = (0, _deprecateSubclassing.default)(_class = class Progress extends _component.default {
    /**
     * @property progressBarComponent
     * @type {String}
     * @private
     */
  }) || _class) || _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, Progress);
});
;define("ember-bootstrap/components/bs-progress/bar", ["exports", "@ember/component", "@ember-decorators/component", "@ember/object", "ember-bootstrap/utils/default-decorator", "ember-bootstrap/utils/cp/type-class", "ember-bootstrap/utils/deprecate-subclassing", "@ember/template-factory"], function (_exports, _component, _component2, _object, _defaultDecorator, _typeClass, _deprecateSubclassing, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember-decorators/component",0,"@ember/object",0,"@ember/component",0,"ember-bootstrap/utils/default-decorator",0,"ember-bootstrap/utils/cp/type-class",0,"ember-bootstrap/utils/deprecate-subclassing",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <div
    role="progressbar"
    aria-valuenow={{this.value}}
    aria-valuemin={{this.minValue}}
    aria-valuemax={{this.maxValue}}
    class="progress-bar {{if this.striped "progress-bar-striped"}} {{this.typeClass}} {{if this.animate "progress-bar-animated"}}"
    ...attributes
    {{style width=this.percentStyleValue}}
  >
    {{#if this.showLabel}}
      {{#if (has-block)}}
        {{yield this.percentRounded}}
      {{else}}
        {{this.percentRounded}}%
      {{/if}}
    {{else}}
      {{#if (has-block)}}
        <span class={{if (macroCondition (macroGetOwnConfig "isBS5")) "visually-hidden" "sr-only"}}>{{yield this.percentRounded}}</span>
      {{else}}
        <span class={{if (macroCondition (macroGetOwnConfig "isBS5")) "visually-hidden" "sr-only"}}>{{this.percentRounded}}%</span>
      {{/if}}
    {{/if}}
  </div>
  */
  {
    "id": "n3Nl0xK0",
    "block": "[[[11,0],[24,\"role\",\"progressbar\"],[16,\"aria-valuenow\",[30,0,[\"value\"]]],[16,\"aria-valuemin\",[30,0,[\"minValue\"]]],[16,\"aria-valuemax\",[30,0,[\"maxValue\"]]],[16,0,[29,[\"progress-bar \",[52,[30,0,[\"striped\"]],\"progress-bar-striped\"],\" \",[30,0,[\"typeClass\"]],\" \",[52,[30,0,[\"animate\"]],\"progress-bar-animated\"]]]],[17,1],[4,[38,1],null,[[\"width\"],[[30,0,[\"percentStyleValue\"]]]]],[12],[1,\"\\n\"],[41,[30,0,[\"showLabel\"]],[[[41,[48,[30,2]],[[[1,\"      \"],[18,2,[[30,0,[\"percentRounded\"]]]],[1,\"\\n\"]],[]],[[[1,\"      \"],[1,[30,0,[\"percentRounded\"]]],[1,\"%\\n\"]],[]]]],[]],[[[41,[48,[30,2]],[[[1,\"      \"],[10,1],[14,0,\"visually-hidden\"],[12],[18,2,[[30,0,[\"percentRounded\"]]]],[13],[1,\"\\n\"]],[]],[[[1,\"      \"],[10,1],[14,0,\"visually-hidden\"],[12],[1,[30,0,[\"percentRounded\"]]],[1,\"%\"],[13],[1,\"\\n\"]],[]]]],[]]],[13]],[\"&attrs\",\"&default\"],false,[\"if\",\"style\",\"has-block\",\"yield\"]]",
    "moduleName": "ember-bootstrap/components/bs-progress/bar.hbs",
    "isStrictMode": false
  });

  /**
  
   Component for a single progress bar, see [Components.Progress](Components.Progress.html) for more examples.
  
   @class ProgressBar
   @namespace Components
   @extends Ember.Component
   @public
   */
  let ProgressBar = _exports.default = (_dec = (0, _component2.tagName)(''), _dec2 = (0, _typeClass.default)('bg', 'type'), _dec3 = (0, _object.computed)('value', 'minValue', 'maxValue').readOnly(), _dec4 = (0, _object.computed)('percent', 'roundDigits').readOnly(), _dec(_class = (0, _deprecateSubclassing.default)(_class = (_class2 = class ProgressBar extends _component.default {
    constructor(...args) {
      super(...args);
      /**
       * The lower limit of the value range
       *
       * @property minValue
       * @type number
       * @default 0
       * @public
       */
      _initializerDefineProperty(this, "minValue", _descriptor, this);
      /**
       * The upper limit of the value range
       *
       * @property maxValue
       * @type number
       * @default 100
       * @public
       */
      _initializerDefineProperty(this, "maxValue", _descriptor2, this);
      /**
       * The value the progress bar should represent
       *
       * @property value
       * @type number
       * @default 0
       * @public
       */
      _initializerDefineProperty(this, "value", _descriptor3, this);
      /**
       If true a label will be shown inside the progress bar.
        By default it will be the percentage corresponding to the `value` property, rounded to `roundDigits` digits.
       You can customize it by using the component with a block template, which the component yields the percentage
       value to:
        ```hbs
       {{#bs-progress}}
       {{#bs-progress-bar value=progressValue as |percent|}}{{progressValue}} ({{percent}}%){{/bs-progress-bar}}
       {{/bs-progress}}
       ```
        @property showLabel
       @type boolean
       @default false
       @public
       */
      _initializerDefineProperty(this, "showLabel", _descriptor4, this);
      /**
       * Create a striped effect, see http://getbootstrap.com/components/#progress-striped
       *
       * @property striped
       * @type boolean
       * @default false
       * @public
       */
      _initializerDefineProperty(this, "striped", _descriptor5, this);
      /**
       * Animate the stripes, see http://getbootstrap.com/components/#progress-animated
       *
       * @property animate
       * @type boolean
       * @default false
       * @public
       */
      _initializerDefineProperty(this, "animate", _descriptor6, this);
      /**
       * Specify to how many digits the progress bar label should be rounded.
       *
       * @property roundDigits
       * @type number
       * @default 0
       * @public
       */
      _initializerDefineProperty(this, "roundDigits", _descriptor7, this);
      /**
       * Property for type styling
       *
       * For the available types see the [Bootstrap docs](https://getbootstrap.com/docs/4.3/components/progress/#backgrounds)
       *
       * @property type
       * @type String
       * @default 'default'
       * @public
       */
      _initializerDefineProperty(this, "type", _descriptor8, this);
      _initializerDefineProperty(this, "typeClass", _descriptor9, this);
    }
    /**
     * The percentage of `value`
     *
     * @property percent
     * @type number
     * @protected
     * @readonly
     */
    get percent() {
      let value = parseFloat(this.value);
      let minValue = parseFloat(this.minValue);
      let maxValue = parseFloat(this.maxValue);
      return Math.min(Math.max((value - minValue) / (maxValue - minValue), 0), 1) * 100;
    }

    /**
     * The percentage of `value`, rounded to `roundDigits` digits
     *
     * @property percentRounded
     * @type number
     * @protected
     * @readonly
     */
    get percentRounded() {
      let roundFactor = Math.pow(10, this.roundDigits);
      return Math.round(this.percent * roundFactor) / roundFactor;
    }
    get percentStyleValue() {
      let percent = this.percent;
      return !isNaN(percent) ? `${percent}%` : '';
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "minValue", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 0;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "maxValue", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 100;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "value", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 0;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "showLabel", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "striped", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "animate", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "roundDigits", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 0;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "type", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 'default';
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "typeClass", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class2.prototype, "percent", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "percent"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "percentRounded", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "percentRounded"), _class2.prototype)), _class2)) || _class) || _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, ProgressBar);
});
;define("ember-bootstrap/components/bs-tab", ["exports", "@ember/component", "@ember-decorators/component", "@ember/object", "@ember/object/computed", "@ember/utils", "@ember/array", "ember-bootstrap/mixins/component-parent", "ember-bootstrap/components/bs-tab/pane", "ember-bootstrap/utils/cp/listen-to", "ember-bootstrap/utils/default-decorator", "ember-bootstrap/utils/deprecate-subclassing", "@ember/template-factory"], function (_exports, _component, _component2, _object, _computed, _utils, _array, _componentParent, _pane, _listenTo, _defaultDecorator, _deprecateSubclassing, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember-decorators/component",0,"@ember/object",0,"@ember/object/computed",0,"@ember/component",0,"@ember/utils",0,"@ember/array",0,"ember-bootstrap/mixins/component-parent",0,"ember-bootstrap/components/bs-tab/pane",0,"ember-bootstrap/utils/cp/listen-to",0,"ember-bootstrap/utils/default-decorator",0,"ember-bootstrap/utils/deprecate-subclassing",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <div ...attributes>
    {{#if this.customTabs}}
      {{yield
        (hash
          pane=(component (ensure-safe-component (bs-default @paneComponent (component "bs-tab/pane"))) parent=this activeId=this.isActiveId fade=this.fade fadeTransition=this.fadeTransition)
          activeId=this.isActiveId
          select=this.select
        )
      }}
    {{else}}
      {{#let (ensure-safe-component (bs-default @navComponent (component "bs-nav"))) as |NavComponent|}}
        <NavComponent @type={{this.type}} role="tablist" as |Nav|>
          {{#each this.navItems as |item|}}
            {{#if item.isGroup}}
              <Nav.dropdown class={{if (bs-contains item.childIds this.isActiveId) "active"}} role="presentation" as |DD|>
                <DD.toggle>{{item.groupTitle}} <span class="caret"></span></DD.toggle>
                <DD.menu as |Menu|>
                  {{#each item.children as |subItem|}}
                    <Menu.item>
                      <a
                        href="#{{subItem.id}}"
                        role="tab"
                        class="dropdown-item {{if (bs-eq this.isActiveId subItem.id) "active"}}"
                        {{on "click" (fn this.select subItem.id)}}
                      >
                        {{subItem.title}}
                      </a>
                    </Menu.item>
                  {{/each}}
                </DD.menu>
              </Nav.dropdown>
            {{else}}
              <Nav.item @active={{bs-eq item.id this.isActiveId}} role="presentation">
                <a
                  href="#{{item.id}}"
                  role="tab"
                  class="nav-link {{if (bs-eq this.isActiveId item.id) "active"}}"
                  aria-selected={{if (bs-eq this.isActiveId item.id) "true" "false"}}
                  {{on "click" (fn this.select item.id)}}
                >
                  {{item.title}}
                </a>
              </Nav.item>
            {{/if}}
          {{/each}}
        </NavComponent>
      {{/let}}
  
      <div class="tab-content">
        {{yield
          (hash
            pane=(component (ensure-safe-component (bs-default @paneComponent (component "bs-tab/pane"))) parent=this activeId=this.isActiveId fade=this.fade fadeTransition=this.fadeTransition)
            activeId=this.isActiveId
            select=this.select
          )
        }}
      </div>
    {{/if}}
  
  </div>
  */
  {
    "id": "r/6rrKOy",
    "block": "[[[11,0],[17,1],[12],[1,\"\\n\"],[41,[30,0,[\"customTabs\"]],[[[1,\"    \"],[18,10,[[28,[37,2],null,[[\"pane\",\"activeId\",\"select\"],[[50,[28,[37,4],[[28,[37,5],[[30,2],[50,\"bs-tab/pane\",0,null,null]],null]],null],0,null,[[\"parent\",\"activeId\",\"fade\",\"fadeTransition\"],[[30,0],[30,0,[\"isActiveId\"]],[30,0,[\"fade\"]],[30,0,[\"fadeTransition\"]]]]],[30,0,[\"isActiveId\"]],[30,0,[\"select\"]]]]]]],[1,\"\\n\"]],[]],[[[44,[[28,[37,4],[[28,[37,5],[[30,3],[50,\"bs-nav\",0,null,null]],null]],null]],[[[1,\"      \"],[8,[30,4],[[24,\"role\",\"tablist\"]],[[\"@type\"],[[30,0,[\"type\"]]]],[[\"default\"],[[[[1,\"\\n\"],[42,[28,[37,8],[[28,[37,8],[[30,0,[\"navItems\"]]],null]],null],null,[[[41,[30,6,[\"isGroup\"]],[[[1,\"            \"],[8,[30,5,[\"dropdown\"]],[[16,0,[52,[28,[37,9],[[30,6,[\"childIds\"]],[30,0,[\"isActiveId\"]]],null],\"active\"]],[24,\"role\",\"presentation\"]],null,[[\"default\"],[[[[1,\"\\n              \"],[8,[30,7,[\"toggle\"]],null,null,[[\"default\"],[[[[1,[30,6,[\"groupTitle\"]]],[1,\" \"],[10,1],[14,0,\"caret\"],[12],[13]],[]]]]],[1,\"\\n              \"],[8,[30,7,[\"menu\"]],null,null,[[\"default\"],[[[[1,\"\\n\"],[42,[28,[37,8],[[28,[37,8],[[30,6,[\"children\"]]],null]],null],null,[[[1,\"                  \"],[8,[30,8,[\"item\"]],null,null,[[\"default\"],[[[[1,\"\\n                    \"],[11,3],[16,6,[29,[\"#\",[30,9,[\"id\"]]]]],[24,\"role\",\"tab\"],[16,0,[29,[\"dropdown-item \",[52,[28,[37,10],[[30,0,[\"isActiveId\"]],[30,9,[\"id\"]]],null],\"active\"]]]],[4,[38,11],[\"click\",[28,[37,12],[[30,0,[\"select\"]],[30,9,[\"id\"]]],null]],null],[12],[1,\"\\n                      \"],[1,[30,9,[\"title\"]]],[1,\"\\n                    \"],[13],[1,\"\\n                  \"]],[]]]]],[1,\"\\n\"]],[9]],null],[1,\"              \"]],[8]]]]],[1,\"\\n            \"]],[7]]]]],[1,\"\\n\"]],[]],[[[1,\"            \"],[8,[30,5,[\"item\"]],[[24,\"role\",\"presentation\"]],[[\"@active\"],[[28,[37,10],[[30,6,[\"id\"]],[30,0,[\"isActiveId\"]]],null]]],[[\"default\"],[[[[1,\"\\n              \"],[11,3],[16,6,[29,[\"#\",[30,6,[\"id\"]]]]],[24,\"role\",\"tab\"],[16,0,[29,[\"nav-link \",[52,[28,[37,10],[[30,0,[\"isActiveId\"]],[30,6,[\"id\"]]],null],\"active\"]]]],[16,\"aria-selected\",[52,[28,[37,10],[[30,0,[\"isActiveId\"]],[30,6,[\"id\"]]],null],\"true\",\"false\"]],[4,[38,11],[\"click\",[28,[37,12],[[30,0,[\"select\"]],[30,6,[\"id\"]]],null]],null],[12],[1,\"\\n                \"],[1,[30,6,[\"title\"]]],[1,\"\\n              \"],[13],[1,\"\\n            \"]],[]]]]],[1,\"\\n\"]],[]]]],[6]],null],[1,\"      \"]],[5]]]]],[1,\"\\n\"]],[4]]],[1,\"\\n    \"],[10,0],[14,0,\"tab-content\"],[12],[1,\"\\n      \"],[18,10,[[28,[37,2],null,[[\"pane\",\"activeId\",\"select\"],[[50,[28,[37,4],[[28,[37,5],[[30,2],[50,\"bs-tab/pane\",0,null,null]],null]],null],0,null,[[\"parent\",\"activeId\",\"fade\",\"fadeTransition\"],[[30,0],[30,0,[\"isActiveId\"]],[30,0,[\"fade\"]],[30,0,[\"fadeTransition\"]]]]],[30,0,[\"isActiveId\"]],[30,0,[\"select\"]]]]]]],[1,\"\\n    \"],[13],[1,\"\\n\"]],[]]],[1,\"\\n\"],[13]],[\"&attrs\",\"@paneComponent\",\"@navComponent\",\"NavComponent\",\"Nav\",\"item\",\"DD\",\"Menu\",\"subItem\",\"&default\"],false,[\"if\",\"yield\",\"hash\",\"component\",\"ensure-safe-component\",\"bs-default\",\"let\",\"each\",\"-track-array\",\"bs-contains\",\"bs-eq\",\"on\",\"fn\"]]",
    "moduleName": "ember-bootstrap/components/bs-tab.hbs",
    "isStrictMode": false
  });

  /**
    Tab component for dynamic tab functionality that mimics the behaviour of Bootstrap's tab.js plugin,
    see http://getbootstrap.com/javascript/#tabs
  
    ### Usage
  
    Just nest any number of yielded [Components.TabPane](Components.TabPane.html) components that hold the tab content.
    The tab navigation is automatically generated from the tab panes' `title` property:
  
    ```hbs
    <BsTab as |tab|>
      <tab.pane @title="Tab 1">
        <p> ... </p>
      </tab.pane>
      <tab.pane @title="Tab 2">
        <p> ... </p>
      </tab.pane>
    </BsTab>
    ```
  
    ### Groupable (dropdown) tabs
  
    Bootstrap's support for dropdown menus as tab navigation is mimiced by the use of the `groupTitle` property.
    All panes with the same `groupTitle` will be put inside the menu of a [Components.Dropdown](Components.Dropdown.html)
    component with `groupTitle` being the dropdown's title:
  
    ```hbs
    <BsTab as |tab|>
      <tab.pane @title="Tab 1">
        <p> ... </p>
      </tab.pane>
      <tab.pane @title="Tab 2">
        <p> ... </p>
      </tab.pane>
      <tab.pane @title="Tab 3" @groupTitle="Dropdown">
        <p> ... </p>
      </tab.pane>
      <tab.pane @title="Tab 4" @groupTitle="Dropdown">
        <p> ... </p>
      </tab.pane>
    </BsTab>
    ```
  
    ### Custom tabs
  
    When having the tab pane's `title` as the tab navigation title is not sufficient, for example because you want to
    integrate some other dynamic content, maybe even other components in the tab navigation item, then you have to setup
    your navigation by yourself.
  
    Set `customTabs` to true to deactivate the automatic tab navigation generation. Then setup your navigation, probably
    using a [Components.Nav](Components.Nav.html) component. The tab component yields the `activeId` property as well as
    its `select` action, which you would have to use to manually set the `active` state of the navigation items and to
    trigger the selection of the different tab panes, using their ids:
  
    ```hbs
    <BsTab @customTabs={{true}} as |tab|>
      <BsNav @type="tabs" as |nav|>
        <nav.item @active={{bs-eq Tab.activeId "pane1"}}><a href="#pane1" role="tab" onclick={{action Tab.select "pane1"}}>Tab 1</a></nav.item>
        <nav.item @active={{bs-eq Tab.activeId "pane2"}}><a href="#pane2" role="tab" onclick={{action Tab.select "pane2"}}>Tab 2 <span class="badge">{{badge}}</span></a></nav.item>
      </BsNav>
      <div class="tab-content">
        <tab.pane @id="pane1" @title="Tab 1">
          <p> ... </p>
        </tab.pane>
        <tab.pane @id="pane2" @title="Tab 2">
          <p> ... </p>
        </tab.pane>
      </div>
    </BsTab>
    ```
  
    Note that the `bs-eq` helper used in the example above is a private helper, which is not guaranteed to be available for
    the future. Better use the corresponding `eq` helper of the
    [ember-truth-helpers](https://github.com/jmurphyau/ember-truth-helpers) addon for example!
  
    ### Routable tabs
  
    The tab component purpose is to have panes of content, that are all in DOM at the same time and that are activated and
    deactivated dynamically, just as the  original Bootstrap implementation.
  
    If you want to have the content delivered through individual sub routes, just use
    the [Components.Nav](Components.Nav.html) component and an `{{outlet}}` that show the nested routes' content:
  
    ```hbs
    <div>
      <BsNav @type="tabs" as |nav|>
        <nav.item>
          <nav.linkTo @route="tabs.index">Tab 1</nav.linkTo>
        </nav.item>
        <nav.item>
          <nav.linkTo @route="tabs.other">Tab 3</nav.linkTo>
        </nav.item>
      </BsNav>
    </div>
    ```
  
    *Note that only invoking the component in a template as shown above is considered part of its public API. Extending from it (subclassing) is generally not supported, and may break at any time.*
  
    @class Tab
    @namespace Components
    @extends Ember.Component
    @uses Mixins.ComponentParent
    @public
  */
  let Tab = _exports.default = (_dec = (0, _component2.tagName)(''), _dec2 = (0, _computed.oneWay)('childPanes.firstObject.id'), _dec3 = (0, _listenTo.default)('activeId'), _dec4 = (0, _computed.filter)('children', function (view) {
    return view instanceof _pane.default;
  }), _dec5 = (0, _object.computed)('childPanes.@each.{id,title,group}'), _dec(_class = (0, _deprecateSubclassing.default)(_class = (_class2 = class Tab extends _component.default.extend(_componentParent.default) {
    constructor(...args) {
      super(...args);
      /**
       * Type of nav, either "pills" or "tabs"
       *
       * @property type
       * @type String
       * @default 'tabs'
       * @public
       */
      _initializerDefineProperty(this, "type", _descriptor, this);
      /**
       * @property paneComponent
       * @type {String}
       * @private
       */
      /**
       * @property navComponent
       * @type {String}
       * @private
       */
      /**
       * By default the tabs will be automatically generated using the available [TabPane](Components.TabPane.html)
       * components. If set to true, you can deactivate this and setup the tabs manually. See the example above.
       *
       * @property customTabs
       * @type boolean
       * @default false
       * @public
       */
      _initializerDefineProperty(this, "customTabs", _descriptor2, this);
      /**
       * The id (`id`) of the active [TabPane](Components.TabPane.html).
       * By default the first tab will be active, but this can be changed by setting this property
       *
       * ```hbs
       * {{#bs-tab activeId="pane2"}}
       *   {{#tab.pane id="pane1" title="Tab 1"}}
       *      ...
       *   {{/tab.pane}}
       *   {{#tab.pane id="pane1" title="Tab 1"}}
       *     ...
       *   {{/tab.pane}}
       * {{/bs-tab}}
       * ```
       *
       * When the selection is changed by user interaction this property will not update by using two-way bindings in order
       * to follow DDAU best practices. If you want to react to such changes, subscribe to the `onChange` action
       *
       * @property activeId
       * @type string
       * @public
       */
      _initializerDefineProperty(this, "activeId", _descriptor3, this);
      /**
       * @property isActiveId
       * @private
       */
      _initializerDefineProperty(this, "isActiveId", _descriptor4, this);
      /**
       * Set to false to disable the fade animation when switching tabs.
       *
       * @property fade
       * @type boolean
       * @default true
       * @public
       */
      _initializerDefineProperty(this, "fade", _descriptor5, this);
      /**
       * The duration of the fade animation
       *
       * @property fadeDuration
       * @type integer
       * @default 150
       * @public
       */
      _initializerDefineProperty(this, "fadeDuration", _descriptor6, this);
      /**
       * All `TabPane` child components
       *
       * @property childPanes
       * @type array
       * @readonly
       * @private
       */
      _initializerDefineProperty(this, "childPanes", _descriptor7, this);
    }
    /**
     * This action is called when switching the active tab, with the new and previous pane id
     *
     * You can return false to prevent changing the active tab automatically, and do that in your action by
     * setting `activeId`.
     *
     * @event onChange
     * @public
     */
    onChange() {}
    /**
     * Array of objects that define the tab structure
     *
     * @property navItems
     * @type array
     * @readonly
     * @private
     */
    get navItems() {
      let items = (0, _array.A)();
      this.childPanes.forEach(pane => {
        let groupTitle = pane.get('groupTitle');
        let item = pane.getProperties('id', 'title');
        if ((0, _utils.isPresent)(groupTitle)) {
          let group = items.findBy('groupTitle', groupTitle);
          if (group) {
            group.children.push(item);
            group.childIds.push(item.id);
          } else {
            items.push({
              isGroup: true,
              groupTitle,
              children: (0, _array.A)([item]),
              childIds: (0, _array.A)([item.id])
            });
          }
        } else {
          items.push(item);
        }
      });
      return items;
    }
    select(id) {
      let previous = this.isActiveId;
      if (this.onChange(id, previous) !== false) {
        // change active tab when `onChange` does not return false
        this.set('isActiveId', id);
      }
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "type", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 'tabs';
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "customTabs", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "activeId", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "isActiveId", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "fade", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "fadeDuration", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 150;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "childPanes", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class2.prototype, "navItems", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "navItems"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "select", [_object.action], Object.getOwnPropertyDescriptor(_class2.prototype, "select"), _class2.prototype)), _class2)) || _class) || _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, Tab);
});
;define("ember-bootstrap/components/bs-tab/pane", ["exports", "@ember/component", "@ember-decorators/component", "@ember/object", "@ember/object/observers", "@ember/runloop", "ember-bootstrap/mixins/component-child", "ember-bootstrap/utils/transition-end", "ember-bootstrap/utils/cp/uses-transition", "ember-bootstrap/utils/default-decorator", "@ember/object/internals", "ember-bootstrap/utils/deprecate-subclassing", "ember-ref-bucket", "@ember/template-factory"], function (_exports, _component, _component2, _object, _observers, _runloop, _componentChild, _transitionEnd, _usesTransition, _defaultDecorator, _internals, _deprecateSubclassing, _emberRefBucket, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"@ember-decorators/component",0,"@ember/object",0,"@ember/object/observers",0,"@ember/component",0,"@ember/runloop",0,"ember-bootstrap/mixins/component-child",0,"ember-bootstrap/utils/transition-end",0,"ember-bootstrap/utils/cp/uses-transition",0,"ember-bootstrap/utils/default-decorator",0,"@ember/object/internals",0,"ember-bootstrap/utils/deprecate-subclassing",0,"ember-ref-bucket",0,"@ember/component"eaimeta@70e063a35619d71f
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <div
    class="tab-pane {{if this.showContent "show"}} {{if this.active "active"}} {{if this.usesTransition "fade"}}"
    role="tabpanel"
    ...attributes
    {{create-ref "mainNode"}}
  >
    {{yield}}
  </div>
  */
  {
    "id": "ZG8RYPyI",
    "block": "[[[11,0],[16,0,[29,[\"tab-pane \",[52,[30,0,[\"showContent\"]],\"show\"],\" \",[52,[30,0,[\"active\"]],\"active\"],\" \",[52,[30,0,[\"usesTransition\"]],\"fade\"]]]],[24,\"role\",\"tabpanel\"],[17,1],[4,[38,1],[\"mainNode\"],[[\"debugName\",\"bucket\"],[\"create-ref\",[30,0]]]],[12],[1,\"\\n  \"],[18,2,null],[1,\"\\n\"],[13]],[\"&attrs\",\"&default\"],false,[\"if\",\"create-ref\",\"yield\"]]",
    "moduleName": "ember-bootstrap/components/bs-tab/pane.hbs",
    "isStrictMode": false
  });

  /**
   The tab pane of a tab component.
   See [Components.Tab](Components.Tab.html) for examples.
  
   @class TabPane
   @namespace Components
   @extends Ember.Component
   @uses Mixins.ComponentChild
   @public
   */
  let TabPane = _exports.default = (_dec = (0, _component2.tagName)(''), _dec2 = (0, _emberRefBucket.ref)('mainNode'), _dec3 = (0, _object.computed)('activeId', 'id').readOnly(), _dec4 = (0, _usesTransition.default)('fade'), _dec(_class = (0, _deprecateSubclassing.default)(_class = (_class2 = class TabPane extends _component.default.extend(_componentChild.default) {
    constructor(...args) {
      super(...args);
      /**
       * @property id
       * @type null | HTMLElement
       */
      _initializerDefineProperty(this, "_element", _descriptor, this);
      /**
       * @property id
       * @type string
       * @public
       */
      _defineProperty(this, "id", (0, _internals.guidFor)(this));
      /**
       * @property activeId
       * @private
       */
      _initializerDefineProperty(this, "activeId", _descriptor2, this);
      /**
       * Used to apply Bootstrap's "active" class
       *
       * @property active
       * @type boolean
       * @default false
       * @private
       */
      _initializerDefineProperty(this, "active", _descriptor3, this);
      /**
       * Used to trigger the Bootstrap visibility classes.
       *
       * @property showContent
       * @type boolean
       * @default false
       * @private
       */
      _initializerDefineProperty(this, "showContent", _descriptor4, this);
      /**
       * The title for this tab pane. This is used by the `bs-tab` component to automatically generate
       * the tab navigation.
       * See the [Components.Tab](Components.Tab.html) for examples.
       *
       * @property title
       * @type string
       * @default null
       * @public
       */
      _initializerDefineProperty(this, "title", _descriptor5, this);
      /**
       * An optional group title used by the `bs-tab` component to group all panes with the same group title
       * under a common drop down in the tab navigation.
       * See the [Components.Tab](Components.Tab.html) for examples.
       *
       * @property groupTitle
       * @type string
       * @default null
       * @public
       */
      _initializerDefineProperty(this, "groupTitle", _descriptor6, this);
      /**
       * Use fade animation when switching tabs.
       *
       * @property fade
       * @type boolean
       * @private
       */
      _initializerDefineProperty(this, "fade", _descriptor7, this);
      /**
       * The duration of the fade out animation
       *
       * @property fadeDuration
       * @type integer
       * @default 150
       * @private
       */
      _initializerDefineProperty(this, "fadeDuration", _descriptor8, this);
      /**
       * Use CSS transitions?
       *
       * @property usesTransition
       * @type boolean
       * @readonly
       * @private
       */
      _initializerDefineProperty(this, "usesTransition", _descriptor9, this);
    }
    /**
     * True if this pane is active (visible)
     *
     * @property isActive
     * @type boolean
     * @readonly
     * @private
     */
    get isActive() {
      return this.activeId === this.id;
    }
    /**
     * Show the pane
     *
     * @method show
     * @protected
     */
    show() {
      if (this.usesTransition) {
        if (!this._element) {
          // _element is initially set by `{{create-ref}}` which happens in next run loop, so can be undefined here.
          this.setProperties({
            active: true,
            showContent: true
          });
        } else {
          (0, _transitionEnd.default)(this._element, this.fadeDuration).then(() => {
            if (!this.isDestroyed) {
              this.setProperties({
                active: true,
                showContent: true
              });
            }
          });
        }
      } else {
        this.set('active', true);
      }
    }

    /**
     * Hide the pane
     *
     * @method hide
     * @protected
     */
    hide() {
      if (this.usesTransition) {
        (0, _transitionEnd.default)(this._element, this.fadeDuration).then(() => {
          if (!this.isDestroyed) {
            this.set('active', false);
          }
        });
        this.set('showContent', false);
      } else {
        this.set('active', false);
      }
    }
    _showHide() {
      if (this.isActive) {
        this.show();
      } else {
        this.hide();
      }
    }
    _setActive() {
      this.set('active', this.isActive);
      this.set('showContent', this.isActive && this.fade);
    }
    init() {
      super.init(...arguments);

      // isActive comes from parent component, so only available after render...
      (0, _runloop.scheduleOnce)('afterRender', this, this._setActive);
      (0, _observers.addObserver)(this, 'isActive', null, this._showHide, true);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_element", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "activeId", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "isActive", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "isActive"), _class2.prototype), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "active", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "showContent", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "title", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "groupTitle", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "fade", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "fadeDuration", [_defaultDecorator.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 150;
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "usesTransition", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class) || _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, TabPane);
});
;define("ember-bootstrap/components/bs-tooltip", ["exports", "@ember/component", "ember-bootstrap/components/bs-contextual-help", "ember-bootstrap/utils/deprecate-subclassing", "@ember/template-factory"], function (_exports, _component, _bsContextualHelp, _deprecateSubclassing, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"ember-bootstrap/components/bs-contextual-help",0,"ember-bootstrap/utils/deprecate-subclassing",0,"@ember/component"eaimeta@70e063a35619d71f
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    {{! template-lint-disable no-unbound }}
  {{unbound this._parentFinder}}
  {{#if this.inDom}}
    {{#let (ensure-safe-component (bs-default @elementComponent (component "bs-tooltip/element"))) as |Element|}}
      <Element
        @placement={{this.placement}}
        @fade={{this.fade}}
        @showHelp={{this.showHelp}}
        @renderInPlace={{this._renderInPlace}}
        @destinationElement={{this.destinationElement}}
        @popperTarget={{this.triggerTargetElement}}
        @autoPlacement={{this.autoPlacement}}
        @viewportElement={{this.viewportElement}}
        @viewportPadding={{this.viewportPadding}}
  
        {{create-ref "overlayElement"}}
        ...attributes
      >
        {{#if (has-block)}}
          {{yield
            (hash
              close=this.close
            )
          }}
        {{else}}
          {{@title}}
        {{/if}}
      </Element>
    {{/let}}
  {{/if}}
  {{did-insert this.setup}}
  {{did-update this.showOrHide @visible}}
  */
  {
    "id": "6PYmpPUE",
    "block": "[[[1,[28,[35,0],[[30,0,[\"_parentFinder\"]]],null]],[1,\"\\n\"],[41,[30,0,[\"inDom\"]],[[[44,[[28,[37,3],[[28,[37,4],[[30,1],[50,\"bs-tooltip/element\",0,null,null]],null]],null]],[[[1,\"    \"],[8,[30,2],[[17,3],[4,[38,6],[\"overlayElement\"],[[\"debugName\",\"bucket\"],[\"create-ref\",[30,0]]]]],[[\"@placement\",\"@fade\",\"@showHelp\",\"@renderInPlace\",\"@destinationElement\",\"@popperTarget\",\"@autoPlacement\",\"@viewportElement\",\"@viewportPadding\"],[[30,0,[\"placement\"]],[30,0,[\"fade\"]],[30,0,[\"showHelp\"]],[30,0,[\"_renderInPlace\"]],[30,0,[\"destinationElement\"]],[30,0,[\"triggerTargetElement\"]],[30,0,[\"autoPlacement\"]],[30,0,[\"viewportElement\"]],[30,0,[\"viewportPadding\"]]]],[[\"default\"],[[[[1,\"\\n\"],[41,[48,[30,6]],[[[1,\"        \"],[18,6,[[28,[37,9],null,[[\"close\"],[[30,0,[\"close\"]]]]]]],[1,\"\\n\"]],[]],[[[1,\"        \"],[1,[30,4]],[1,\"\\n\"]],[]]],[1,\"    \"]],[]]]]],[1,\"\\n\"]],[2]]]],[]],null],[1,[28,[35,10],[[30,0,[\"setup\"]]],null]],[1,\"\\n\"],[1,[28,[35,11],[[30,0,[\"showOrHide\"]],[30,5]],null]]],[\"@elementComponent\",\"Element\",\"&attrs\",\"@title\",\"@visible\",\"&default\"],false,[\"unbound\",\"if\",\"let\",\"ensure-safe-component\",\"bs-default\",\"component\",\"create-ref\",\"has-block\",\"yield\",\"hash\",\"did-insert\",\"did-update\"]]",
    "moduleName": "ember-bootstrap/components/bs-tooltip.hbs",
    "isStrictMode": false
  });

  /**
    Component that implements Bootstrap [tooltips](http://getbootstrap.com/javascript/#tooltips).
  
    By default, it will attach its listeners (mouseover and focus) to the parent DOM element to trigger
    the tooltip:
  
    ```hbs
    <button class="btn">
      <BsTooltip @title="This is a tooltip" />
    </button>
    ```
  
    You can also use the component in a block form to set the title:
  
    ```hbs
    <button class="btn">
      <BsTooltip>
        This is a tooltip
      </BsTooltip>
    </button>
    ```
  
    ### Trigger
  
    The trigger element is the DOM element that will cause the tooltip to be shown when one of the trigger events occur on
    that element. By default, the trigger element is the parent DOM element of the component, and the trigger events will be
    "hover" and "focus".
  
    The `triggerElement` property accepts any CSS selector to attach the tooltip to any other existing DOM element.
  
    To customize the events that will trigger the tooltip use the `triggerEvents` property, that accepts an array or a
    string of events, with "hover", "focus" and "click" being supported.
  
    ### Placement options
  
    By default, the tooltip will show up on top of the trigger element. Use the `placement` property to change that
    ("top", "bottom", "left" and "right"). To make sure the tooltip will not exceed the viewport (see Advanced customization)
    you can set `autoPlacement` to true. A tooltip with `placement="right" will be placed to the right if there is enough
    space, otherwise to the left.
  
    ### Advanced customization
  
    Several other properties allow for some advanced customization:
    * `visible` to show/hide the tooltip programmatically
    * `fade` to disable the fade in transition
    * `delay` (or `delayShow` and `delayHide`) to add a delay
    * `viewportSelector` and `viewportPadding` to customize the viewport that affects `autoPlacement`
    * a `close` action is yielded, that allows you to close the tooltip:
  
    ```hbs
    <BsTooltip as |tt|>This is a tooltip <button onclick={{action tt.close}}>Close</button></BsTooltip>
    ```
  
    See the individual API docs for each property.
  
    ### Actions
  
    When you want to react on the tooltip being shown or hidden, you can use one of the following supported actions:
    * `onShow`
    * `onShown`
    * `onHide`
    * `onHidden`
  
    *Note that only invoking the component in a template as shown above is considered part of its public API. Extending from it (subclassing) is generally not supported, and may break at any time.*
  
    @class Tooltip
    @namespace Components
    @extends Components.ContextualHelp
    @public
  */
  let Tooltip = _exports.default = (0, _deprecateSubclassing.default)(_class = class Tooltip extends _bsContextualHelp.default {
    /**
     * @property elementComponent
     * @type {String}
     * @private
     */

    /**
     * The DOM element of the arrow element.
     *
     * @property arrowElement
     * @type object
     * @readonly
     * @private
     */
    get arrowElement() {
      return this.overlayElement.querySelector('.tooltip-arrow');
    }
  }) || _class;
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, Tooltip);
});
;define("ember-bootstrap/components/bs-tooltip/element", ["exports", "@ember/component", "ember-bootstrap/components/bs-contextual-help/element", "@ember/template-factory", "@embroider/macros/runtime"], function (_exports, _component, _element, _templateFactory, _runtime) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"ember-cli-htmlbars",0,"ember-bootstrap/components/bs-contextual-help/element",0,"@embroider/macros",0,"@ember/component"eaimeta@70e063a35619d71f
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    {{#if @renderInPlace}}
    <div
      class="tooltip {{if this.fade "fade"}} {{this.actualPlacementClass}} {{if this.showHelp "show"}}"
      role="tooltip"
      ...attributes
      {{popper-tooltip @popperTarget this.popperOptions}}
      {{create-ref "popperElement"}}
    >
      <div class={{this.arrowClass}}></div>
      <div class="tooltip-inner">
        {{yield}}
      </div>
    </div>
  {{else}}
    {{#in-element @destinationElement insertBefore=null}}
      <div
        class="tooltip {{if this.fade "fade"}} {{this.actualPlacementClass}} {{if this.showHelp "show"}}"
        role="tooltip"
        ...attributes
        {{popper-tooltip @popperTarget this.popperOptions}}
        {{create-ref "popperElement"}}
      >
        <div class={{this.arrowClass}}></div>
        <div class="tooltip-inner">
          {{yield}}
        </div>
      </div>
    {{/in-element}}
  {{/if}}
  
  
  */
  {
    "id": "eZQ66aRd",
    "block": "[[[41,[30,1],[[[1,\"  \"],[11,0],[16,0,[29,[\"tooltip \",[52,[30,0,[\"fade\"]],\"fade\"],\" \",[30,0,[\"actualPlacementClass\"]],\" \",[52,[30,0,[\"showHelp\"]],\"show\"]]]],[24,\"role\",\"tooltip\"],[17,2],[4,[38,1],[[30,3],[30,0,[\"popperOptions\"]]],null],[4,[38,2],[\"popperElement\"],[[\"debugName\",\"bucket\"],[\"create-ref\",[30,0]]]],[12],[1,\"\\n    \"],[10,0],[15,0,[30,0,[\"arrowClass\"]]],[12],[13],[1,\"\\n    \"],[10,0],[14,0,\"tooltip-inner\"],[12],[1,\"\\n      \"],[18,5,null],[1,\"\\n    \"],[13],[1,\"\\n  \"],[13],[1,\"\\n\"]],[]],[[[40,[[[1,\"    \"],[11,0],[16,0,[29,[\"tooltip \",[52,[30,0,[\"fade\"]],\"fade\"],\" \",[30,0,[\"actualPlacementClass\"]],\" \",[52,[30,0,[\"showHelp\"]],\"show\"]]]],[24,\"role\",\"tooltip\"],[17,2],[4,[38,1],[[30,3],[30,0,[\"popperOptions\"]]],null],[4,[38,2],[\"popperElement\"],[[\"debugName\",\"bucket\"],[\"create-ref\",[30,0]]]],[12],[1,\"\\n      \"],[10,0],[15,0,[30,0,[\"arrowClass\"]]],[12],[13],[1,\"\\n      \"],[10,0],[14,0,\"tooltip-inner\"],[12],[1,\"\\n        \"],[18,5,null],[1,\"\\n      \"],[13],[1,\"\\n    \"],[13],[1,\"\\n\"]],[]],\"%cursor:0%\",[28,[37,5],[[30,4]],null],null]],[]]],[1,\"\\n\"]],[\"@renderInPlace\",\"&attrs\",\"@popperTarget\",\"@destinationElement\",\"&default\"],false,[\"if\",\"popper-tooltip\",\"create-ref\",\"yield\",\"in-element\",\"-in-el-null\"]]",
    "moduleName": "ember-bootstrap/components/bs-tooltip/element.hbs",
    "isStrictMode": false
  });

  /**
   Internal component for tooltip's markup. Should not be used directly.
  
   @class TooltipElement
   @namespace Components
   @extends Components.ContextualHelpElement
   @private
   */
  class TooltipElement extends _element.default {
    constructor(...args) {
      super(...args);
      _defineProperty(this, "arrowClass", (0, _runtime.macroCondition)((0, _runtime.config)("/home/ec2-user/coup/client/node_modules/ember-bootstrap").isBS4) ? 'arrow' : 'tooltip-arrow');
      _defineProperty(this, "placementClassPrefix", 'bs-tooltip-');
    }
  }
  _exports.default = TooltipElement;
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, TooltipElement);
});
;define("ember-bootstrap/config", ["exports", "@ember/object"], function (_exports, _object) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"@ember/object"eaimeta@70e063a35619d71f
  class Config extends _object.default {}
  Config.reopenClass({
    formValidationSuccessIcon: 'glyphicon glyphicon-ok',
    formValidationErrorIcon: 'glyphicon glyphicon-remove',
    formValidationWarningIcon: 'glyphicon glyphicon-warning-sign',
    formValidationInfoIcon: 'glyphicon glyphicon-info-sign',
    insertEmberWormholeElementToDom: true,
    load(config = {}) {
      for (let property in config) {
        if (Object.prototype.hasOwnProperty.call(this, property) && typeof this[property] !== 'function') {
          this[property] = config[property];
        }
      }
    }
  });
  var _default = _exports.default = Config;
});
;define("ember-bootstrap/helpers/bs-contains", ["exports", "@ember/component/helper", "@ember/array"], function (_exports, _helper, _array) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.bsContains = bsContains;
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"@ember/component/helper",0,"@ember/array"eaimeta@70e063a35619d71f
  function bsContains(params /* , hash*/) {
    return (0, _array.isArray)(params[0]) ? (0, _array.A)(params[0]).includes(params[1]) : false;
  }
  var _default = _exports.default = (0, _helper.helper)(bsContains);
});
;define("ember-bootstrap/helpers/bs-default", ["exports", "@ember/component/helper"], function (_exports, _helper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.bsDefault = bsDefault;
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"@ember/component/helper"eaimeta@70e063a35619d71f
  function bsDefault(params) {
    return params[0] ?? params[1];
  }
  var _default = _exports.default = (0, _helper.helper)(bsDefault);
});
;define("ember-bootstrap/helpers/bs-eq", ["exports", "@ember/component/helper"], function (_exports, _helper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.eq = eq;
  0; //eaimeta@70e063a35619d71f0,"@ember/component/helper"eaimeta@70e063a35619d71f
  function eq(params) {
    return params[0] === params[1];
  }
  var _default = _exports.default = (0, _helper.helper)(eq);
});
;define("ember-bootstrap/helpers/bs-form-horiz-input-class", ["exports", "@ember/component/helper", "@ember/debug", "@ember/utils"], function (_exports, _helper, _debug, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"@ember/component/helper",0,"@ember/debug",0,"@ember/utils"eaimeta@70e063a35619d71f
  var _default = _exports.default = (0, _helper.helper)(function bsFormHorizInputClass([horizontalLabelGridClass] /*, named*/) {
    if ((0, _utils.isBlank)(horizontalLabelGridClass)) {
      return undefined;
    }
    let parts = horizontalLabelGridClass.split('-');
    (true && !(parts.length === 3) && (0, _debug.assert)('horizontalInputGridClass must match format bootstrap grid column class', parts.length === 3));
    parts[2] = 12 - parts[2];
    return parts.join('-');
  });
});
;define("ember-bootstrap/helpers/bs-form-horiz-offset-class", ["exports", "@ember/component/helper", "@ember/utils"], function (_exports, _helper, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"@ember/component/helper",0,"@ember/utils"eaimeta@70e063a35619d71f
  var _default = _exports.default = (0, _helper.helper)(function bsFormHorizOffsetClass([horizontalLabelGridClass] /*, named*/) {
    if ((0, _utils.isBlank)(horizontalLabelGridClass)) {
      return undefined;
    }
    let parts = horizontalLabelGridClass.split('-');
    parts.splice(0, 1, 'offset');
    return parts.join('-');
  });
});
;define("ember-bootstrap/helpers/bs-noop", ["exports", "@ember/component/helper"], function (_exports, _helper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.bsNoop = bsNoop;
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"@ember/component/helper"eaimeta@70e063a35619d71f
  const noop = () => {};
  function bsNoop() {
    return noop;
  }
  var _default = _exports.default = (0, _helper.helper)(bsNoop);
});
;define("ember-bootstrap/helpers/bs-size-class", ["exports", "@ember/component/helper", "@ember/utils"], function (_exports, _helper, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.sizeClassHelper = sizeClassHelper;
  0; //eaimeta@70e063a35619d71f0,"@ember/component/helper",0,"@ember/utils"eaimeta@70e063a35619d71f
  function sizeClassHelper([prefix, size], {
    default: defaultValue
  }) {
    size = size ?? defaultValue;
    return (0, _utils.isBlank)(size) ? null : `${prefix}-${size}`;
  }
  var _default = _exports.default = (0, _helper.helper)(sizeClassHelper);
});
;define("ember-bootstrap/helpers/bs-type-class", ["exports", "@ember/component/helper"], function (_exports, _helper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.typeClassHelper = typeClassHelper;
  0; //eaimeta@70e063a35619d71f0,"@ember/component/helper"eaimeta@70e063a35619d71f
  function typeClassHelper([prefix, type], {
    default: defaultValue,
    outline = false
  }) {
    type = type ?? defaultValue;
    if (outline) {
      return `${prefix}-outline-${type}`;
    }
    return `${prefix}-${type}`;
  }
  var _default = _exports.default = (0, _helper.helper)(typeClassHelper);
});
;define("ember-bootstrap/mixins/component-child", ["exports", "@ember/object/mixin", "@ember/object", "ember-bootstrap/mixins/component-parent"], function (_exports, _mixin, _object, _componentParent) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"@ember/object/mixin",0,"@ember/object",0,"ember-bootstrap/mixins/component-parent"eaimeta@70e063a35619d71f
  /**
   * Mixin for components that act as a child component in a parent-child relationship of components
   *
   * @class ComponentChild
   * @namespace Mixins
   * @private
   */
  // eslint-disable-next-line ember/no-new-mixins
  var _default = _exports.default = _mixin.default.create({
    /**
     * The parent component
     *
     * @property _parent
     * @private
     */
    _parent: (0, _object.computed)(function () {
      return this.nearestOfType(_componentParent.default);
    }),
    /**
     * flag to check if component has already been registered
     * @property _didRegister
     * @type boolean
     * @private
     */
    _didRegister: false,
    /**
     * Register ourself as a child at the parent component
     * We use the `willRender` event here to also support the fastboot environment, where there is no `didInsertElement`
     *
     * @method _registerWithParent
     * @private
     */
    _registerWithParent() {
      if (!this._didRegister) {
        let parent = this._parent;
        if (parent) {
          parent.registerChild(this);
          this._didRegister = true;
        }
      }
    },
    /**
     * Unregister from the parent component
     *
     * @method _unregisterFromParent
     * @private
     */
    _unregisterFromParent() {
      let parent = this._parent;
      if (this._didRegister && parent) {
        parent.removeChild(this);
        this._didRegister = false;
      }
    },
    didReceiveAttrs() {
      this._super(...arguments);
      this._registerWithParent();
    },
    willRender() {
      this._super(...arguments);
      this._registerWithParent();
    },
    willDestroyElement() {
      this._super(...arguments);
      this._unregisterFromParent();
    }
  });
});
;define("ember-bootstrap/mixins/component-parent", ["exports", "@ember/runloop", "@ember/array", "@ember/object/mixin"], function (_exports, _runloop, _array, _mixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"@ember/runloop",0,"@ember/array",0,"@ember/object/mixin"eaimeta@70e063a35619d71f
  /**
   * Mixin for components that act as a parent component in a parent-child relationship of components
   *
   * @class ComponentParent
   * @namespace Mixins
   * @private
   */
  // eslint-disable-next-line ember/no-new-mixins
  var _default = _exports.default = _mixin.default.create({
    /**
     * Array of registered child components
     *
     * @property children
     * @type array
     * @protected
     */
    children: null,
    init() {
      this._super(...arguments);
      this.set('children', (0, _array.A)());
    },
    /**
     * Register a component as a child of this parent
     *
     * @method registerChild
     * @param child
     * @public
     */
    registerChild(child) {
      (0, _runloop.schedule)('actions', this, function () {
        this.children.addObject(child);
      });
    },
    /**
     * Remove the child component from this parent component
     *
     * @method removeChild
     * @param child
     * @public
     */
    removeChild(child) {
      (0, _runloop.schedule)('actions', this, function () {
        this.children.removeObject(child);
      });
    }
  });
});
;define("ember-bootstrap/utils/cp/listen-to", ["exports", "@ember/object"], function (_exports, _object) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _default;
  0; //eaimeta@70e063a35619d71f0,"@ember/object"eaimeta@70e063a35619d71f
  /**
   * CP macro that listens to dependent (external) property, but allows overriding it locally without violating DDAU
   * By using a simple setter it will still trigger on changes of the dependent property even when being set before.
   *
   * Kudos to @fsmanuel for coming up with this solution.
   *
   * @method
   * @return {boolean}
   * @param {string} dependentKey
   * @param {*} defaultValue
   * @private
   */
  function _default(dependentKey, defaultValue = null) {
    return (0, _object.computed)(dependentKey, {
      get() {
        return this[dependentKey] ?? defaultValue;
      },
      set(key, value) {
        // eslint-disable-line no-unused-vars
        return value;
      }
    });
  }
});
;define("ember-bootstrap/utils/cp/overrideable", ["exports", "@ember/object", "@ember/debug"], function (_exports, _object, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = overrideableCP;
  0; //eaimeta@70e063a35619d71f0,"@ember/object",0,"@ember/debug"eaimeta@70e063a35619d71f
  /**
   * CP macro that created a regular computed property, which can be manually overriden.
   * This is needed after implicitly overrideable CPs have been deprecated:
   * https://deprecations-app-prod.herokuapp.com/deprecations/v3.x/#toc_computed-property-override
   *
   * @private
   */
  function overrideableCP() {
    let fn = Array.prototype.slice.call(arguments, -1)[0];
    let args = Array.prototype.slice.call(arguments, 0, arguments.length - 1);
    (true && !(typeof fn === 'function') && (0, _debug.assert)('Last argument for overrideableCP must be a function', typeof fn === 'function'));
    return (0, _object.computed)(...args, {
      get(key) {
        let overridden = this[`__${key}`];
        return overridden || fn.call(this);
      },
      set(key, value) {
        this[`__${key}`] = value;
        return value;
      }
    });
  }
});
;define("ember-bootstrap/utils/cp/size-class", ["exports", "@ember/object", "@ember/utils", "@ember/debug"], function (_exports, _object, _utils, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = sizeClass;
  0; //eaimeta@70e063a35619d71f0,"@ember/object",0,"@ember/utils",0,"@ember/debug"eaimeta@70e063a35619d71f
  function sizeClass(prefix, sizeProperty) {
    (true && !(typeof prefix === 'string') && (0, _debug.assert)('You have to provide a prefix for sizeClass', typeof prefix === 'string'));
    (true && !(typeof sizeProperty === 'string') && (0, _debug.assert)('You have to provide a sizeProperty for sizeClass', typeof sizeProperty === 'string'));
    return (0, _object.computed)('size', function () {
      let size = this[sizeProperty];
      (true && !(!size || typeof size === 'string' && size !== '') && (0, _debug.assert)('The value of `size` must be a string', !size || typeof size === 'string' && size !== ''));
      return (0, _utils.isBlank)(size) ? null : `${prefix}-${size}`;
    });
  }
});
;define("ember-bootstrap/utils/cp/type-class", ["exports", "@ember/object", "@ember/debug"], function (_exports, _object, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = typeClass;
  0; //eaimeta@70e063a35619d71f0,"@ember/object",0,"@ember/debug"eaimeta@70e063a35619d71f
  function typeClass(prefix, typeProperty) {
    (true && !(typeof prefix === 'string') && (0, _debug.assert)('You have to provide a prefix for typeClass', typeof prefix === 'string'));
    (true && !(typeof typeProperty === 'string') && (0, _debug.assert)('You have to provide a typeProperty for typeClass', typeof typeProperty === 'string'));
    return (0, _object.computed)('outline', 'type', function () {
      let type = this[typeProperty] || 'default';
      (true && !(typeof type === 'string' && type !== '') && (0, _debug.assert)('The value of `type` must be a string', typeof type === 'string' && type !== ''));
      if (this.outline) {
        return `${prefix}-outline-${type}`;
      }
      return `${prefix}-${type}`;
    });
  }
});
;define("ember-bootstrap/utils/cp/uses-transition", ["exports", "@ember/object", "@ember/debug", "ember-bootstrap/utils/is-fastboot"], function (_exports, _object, _debug, _isFastboot) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = usesTransition;
  0; //eaimeta@70e063a35619d71f0,"@ember/object",0,"@ember/debug",0,"ember-bootstrap/utils/is-fastboot"eaimeta@70e063a35619d71f
  function usesTransition(fadeProperty) {
    (true && !(typeof fadeProperty === 'string') && (0, _debug.assert)('You have to provide a fadeProperty for typeClass', typeof fadeProperty === 'string'));
    return (0, _object.computed)(fadeProperty, function () {
      return !(0, _isFastboot.default)(this) && this[fadeProperty];
    });
  }
});
;define("ember-bootstrap/utils/decorators/arg", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = arg;
  0; //eaimeta@70e063a35619d71feaimeta@70e063a35619d71f
  function arg(target, key, descriptor) {
    return {
      get() {
        const argValue = this.args[key];
        return argValue !== undefined ? argValue : descriptor.initializer ? descriptor.initializer.call(this) : undefined;
      }
    };
  }
});
;define("ember-bootstrap/utils/decorators/uses-transition", ["exports", "ember-bootstrap/utils/is-fastboot", "@ember/debug"], function (_exports, _isFastboot, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = arg;
  0; //eaimeta@70e063a35619d71f0,"ember-bootstrap/utils/is-fastboot",0,"@ember/debug"eaimeta@70e063a35619d71f
  function arg(fadeProperty) {
    (true && !(typeof fadeProperty === 'string') && (0, _debug.assert)('You have to provide a fadeProperty for typeClass', typeof fadeProperty === 'string'));
    return function () {
      return {
        get() {
          return !(0, _isFastboot.default)(this) && this.args[fadeProperty] !== false;
        }
      };
    };
  }
});
;define("ember-bootstrap/utils/default-decorator", ["exports", "@ember/object"], function (_exports, _object) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = defaultValue;
  0; //eaimeta@70e063a35619d71f0,"@ember/object"eaimeta@70e063a35619d71f
  function defaultValue(target, key, descriptor) {
    let {
      initializer,
      value
    } = descriptor;
    return (0, _object.computed)({
      get() {
        return initializer ? initializer.call(this) : value;
      },
      set(_, v) {
        if (v !== undefined) {
          return v;
        }
        return initializer ? initializer.call(this) : value;
      }
    })(target, key, {
      ...descriptor,
      value: undefined,
      initializer: undefined
    });
  }
});
;define("ember-bootstrap/utils/deprecate-subclassing", ["exports", "@ember/debug", "@ember/runloop"], function (_exports, _debug, _runloop) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = deprecateSubclassing;
  0; //eaimeta@70e063a35619d71f0,"@glimmer/env",0,"@ember/debug",0,"@ember/runloop"eaimeta@70e063a35619d71f
  function deprecateSubclassing(target) {
    if (true /* DEBUG */) {
      const wrapperClass = class extends target {
        constructor() {
          super(...arguments);
          // we need to delay the deprecation check, as the __ember-bootstrap_subclass class field will only be set *after* the constructor
          (0, _runloop.next)(() => {
            (true && !(
            // the `__ember-bootstrap_subclass` flag is an escape hatch for "privileged" addons like validations addons that currently still have to rely on subclassing
            wrapperClass === this.constructor || this['__ember-bootstrap_subclass'] === true) && (0, _debug.deprecate)(`Extending from ember-bootstrap component classes is not supported, and might break anytime. Detected subclassing of <Bs${target.name}> component.`, wrapperClass === this.constructor || this['__ember-bootstrap_subclass'] === true, {
              id: `ember-bootstrap.subclassing#${target.name}`,
              until: '5.0.0',
              since: '4.0.0',
              for: 'ember-bootstrap'
            }));
          });
        }
      };
      return wrapperClass;
    }
  }
});
;define("ember-bootstrap/utils/dom", ["exports", "@ember/application", "require", "@ember/debug"], function (_exports, _application, _require, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.findElemementByIdInShadowDom = findElemementByIdInShadowDom;
  _exports.findElementById = findElementById;
  _exports.getDOM = getDOM;
  _exports.getDestinationElement = getDestinationElement;
  0; //eaimeta@70e063a35619d71f0,"@ember/application",0,"@glimmer/env",0,"require",0,"@ember/debug"eaimeta@70e063a35619d71f
  /*
   * Implement some helpers methods for interacting with the DOM,
   * be it Fastboot's SimpleDOM or the browser's version.
   *
   * Credit to https://github.com/yapplabs/ember-wormhole, from where this has been shamelessly stolen.
   */
  function childNodesOfElement(element) {
    let children = [];
    let child = element.firstChild;
    while (child) {
      children.push(child);
      child = child.nextSibling;
    }
    return children;
  }
  function findElementById(doc, id) {
    if (doc.getElementById) {
      return doc.getElementById(id);
    }
    let nodes = childNodesOfElement(doc);
    let node;
    while (nodes.length) {
      node = nodes.shift();
      if (node.getAttribute && node.getAttribute('id') === id) {
        return node;
      }
      nodes = childNodesOfElement(node).concat(nodes);
    }
  }

  // Private Ember API usage. Get the dom implementation used by the current
  // renderer, be it native browser DOM or Fastboot SimpleDOM
  function getDOM(context) {
    let {
      renderer
    } = context;
    if (!renderer?._dom) {
      // pre glimmer2
      let container = _application.getOwner ? (0, _application.getOwner)(context) : context.container;
      let documentService = container.lookup('service:-document');
      if (documentService) {
        return documentService;
      }
      renderer = container.lookup('renderer:-dom');
    }
    if (renderer._dom && renderer._dom.document) {
      return renderer._dom.document;
    } else {
      throw new Error('Could not get DOM');
    }
  }
  function getDestinationElement(context) {
    let dom = getDOM(context);
    const id = 'ember-bootstrap-wormhole';
    let destinationElement = findElementById(dom, id) || findElemementByIdInShadowDom(context, id);
    if (true /* DEBUG */ && !destinationElement) {
      let config = (0, _application.getOwner)(context).resolveRegistration('config:environment');
      if (config.environment === 'test' && typeof FastBoot === 'undefined') {
        let id;
        if (_require.default.has('@ember/test-helpers/dom/get-root-element')) {
          try {
            id = (0, _require.default)('@ember/test-helpers/dom/get-root-element').default().id;
          } catch (ex) {
            // no op
          }
        }
        if (!id) {
          return document.querySelector('#ember-testing');
        }
        return document.getElementById(id);
      }
      (true && (0, _debug.warn)(`No wormhole destination element found for component ${context}. If you have set \`insertEmberWormholeElementToDom\` to false, you should insert a \`div#ember-bootstrap-wormhole\` manually!`, false, {
        id: 'ember-bootstrap.no-destination-element'
      }));
    }
    return destinationElement;
  }
  function findElemementByIdInShadowDom(context, id) {
    const owner = (0, _application.getOwner)(context);
    return owner.rootElement.querySelector && owner.rootElement.querySelector(`[id="${id}"]`);
  }
});
;define("ember-bootstrap/utils/form-validation-class", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = formValidationClass;
  0; //eaimeta@70e063a35619d71feaimeta@70e063a35619d71f
  function formValidationClass(validationType) {
    switch (validationType) {
      case 'error':
        return 'is-invalid';
      case 'success':
        return 'is-valid';
      case 'warning':
        return 'is-warning';
      // not officially supported in BS4 :(
      default:
        return undefined;
    }
  }
});
;define("ember-bootstrap/utils/is-fastboot", ["exports", "@ember/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = isFastBoot;
  0; //eaimeta@70e063a35619d71f0,"@ember/application"eaimeta@70e063a35619d71f
  function isFastBoot(context) {
    let owner = (0, _application.getOwner)(context);
    let fastbootService = owner.lookup('service:fastboot');
    return fastbootService ? fastbootService.get('isFastBoot') : false;
  }
});
;define("ember-bootstrap/utils/size-class", ["exports", "@ember/utils", "@ember/debug"], function (_exports, _utils, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = sizeClass;
  0; //eaimeta@70e063a35619d71f0,"@ember/utils",0,"@ember/debug"eaimeta@70e063a35619d71f
  function sizeClass(prefix, size) {
    (true && !(typeof prefix === 'string') && (0, _debug.assert)('You have to provide a prefix for sizeClass', typeof prefix === 'string'));
    (true && !(!size || typeof size === 'string' && size !== '') && (0, _debug.assert)('The value of `size` must be a string', !size || typeof size === 'string' && size !== ''));
    return (0, _utils.isBlank)(size) ? null : `${prefix}-${size}`;
  }
});
;define("ember-bootstrap/utils/transition-end", ["exports", "ember", "@ember/runloop", "rsvp"], function (_exports, _ember, _runloop, _rsvp) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = waitForTransitionEnd;
  _exports.skipTransition = skipTransition;
  0; //eaimeta@70e063a35619d71f0,"ember",0,"@ember/runloop",0,"rsvp"eaimeta@70e063a35619d71f
  let _skipTransition;
  function skipTransition(bool) {
    _skipTransition = bool;
  }
  function _isSkipped() {
    return _skipTransition === true | _skipTransition !== false && _ember.default.testing;
  }
  function waitForTransitionEnd(node, duration = 0) {
    if (!node) {
      return (0, _rsvp.reject)();
    }
    let backup;
    if (_isSkipped()) {
      duration = 0;
    }
    return new _rsvp.Promise(function (resolve) {
      let done = function () {
        if (backup) {
          (0, _runloop.cancel)(backup);
          backup = null;
        }
        node.removeEventListener('transitionend', done);
        resolve();
      };
      node.addEventListener('transitionend', done, false);
      backup = (0, _runloop.later)(this, done, duration);
    });
  }
});
;define("ember-bootstrap/version", ["exports", "ember", "@embroider/macros/runtime"], function (_exports, _ember, _runtime) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.VERSION = void 0;
  _exports.registerLibrary = registerLibrary;
  0; //eaimeta@70e063a35619d71f0,"@embroider/macros",0,"ember"eaimeta@70e063a35619d71f
  const VERSION = _exports.VERSION = (0, _runtime.config)("/home/ec2-user/coup/client/node_modules/ember-bootstrap").version;
  function registerLibrary() {
    _ember.default.libraries.register('Ember Bootstrap', VERSION);
  }
});
;define("ember-cached-decorator-polyfill/index", ["exports", "@glimmer/tracking/primitives/cache", "@ember/debug"], function (_exports, _cache, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.cached = cached;
  function cached(...args) {
    const [target, key, descriptor] = args;

    // Error on `@cached()`, `@cached(...args)`, and `@cached propName = value;`
    (true && !(target !== undefined) && (0, _debug.assert)('You attempted to use @cached(), which is not necessary nor supported. Remove the parentheses and you will be good to go!', target !== undefined));
    (true && !(typeof target === 'object' && typeof key === 'string' && typeof descriptor === 'object' && args.length === 3) && (0, _debug.assert)(`You attempted to use @cached on with ${args.length > 1 ? 'arguments' : 'an argument'} ( @cached(${args.map(d => `'${d}'`).join(', ')}), which is not supported. Dependencies are automatically tracked, so you can just use ${'`@cached`'}`, typeof target === 'object' && typeof key === 'string' && typeof descriptor === 'object' && args.length === 3));
    (true && !(typeof descriptor.get == 'function') && (0, _debug.assert)(`The @cached decorator must be applied to getters. '${key}' is not a getter.`, typeof descriptor.get == 'function'));
    const caches = new WeakMap();
    const getter = descriptor.get;
    descriptor.get = function () {
      if (!caches.has(this)) caches.set(this, (0, _cache.createCache)(getter.bind(this)));
      return (0, _cache.getValue)(caches.get(this));
    };
  }
});
;define("ember-cli-app-version/initializer-factory", ["exports", "ember", "@ember/string"], function (_exports, _ember, _string) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = initializerFactory;
  const {
    libraries
  } = _ember.default;
  function initializerFactory(name, version) {
    let registered = false;
    return function () {
      if (!registered && name && version) {
        let appName = (0, _string.classify)(name);
        libraries.register(appName, version);
        registered = true;
      }
    };
  }
});
;define("ember-cli-app-version/utils/regexp", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.versionRegExp = _exports.versionExtendedRegExp = _exports.shaRegExp = void 0;
  const versionRegExp = _exports.versionRegExp = /\d+[.]\d+[.]\d+/; // Match any number of 3 sections of digits separated by .
  const versionExtendedRegExp = _exports.versionExtendedRegExp = /\d+[.]\d+[.]\d+-[a-z]*([.]\d+)?/; // Match the above but also hyphen followed by any number of lowercase letters, then optionally period and digits
  const shaRegExp = _exports.shaRegExp = /[a-z\d]{8}$/; // Match 8 lowercase letters and digits, at the end of the string only (to avoid matching with version extended part)
});
;define("ember-concurrency/-private/async-arrow-runtime", ["exports", "ember-concurrency/-private/task-factory"], function (_exports, _taskFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.buildTask = buildTask;
  /**
   * This builder function is called by the transpiled code from
   * `task(async () => {})`. See lib/babel-plugin-transform-ember-concurrency-async-tasks.js
   *
   * @private
   */
  function buildTask(contextFn, options, taskName, bufferPolicyName) {
    let optionsWithBufferPolicy = options;
    if (bufferPolicyName) {
      optionsWithBufferPolicy = Object.assign({}, optionsWithBufferPolicy);
      optionsWithBufferPolicy[bufferPolicyName] = true;
    }
    const result = contextFn();
    const taskFactory = new _taskFactory.TaskFactory(taskName || '<unknown>', result.generator, optionsWithBufferPolicy);
    return taskFactory.createTask(result.context);
  }
});
;define("ember-concurrency/-private/cancelable-promise-helpers", ["exports", "@ember/debug", "rsvp", "ember-concurrency/-private/task-instance", "ember-concurrency/-private/external/yieldables"], function (_exports, _debug, _rsvp, _taskInstance, _yieldables) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.race = _exports.hashSettled = _exports.hash = _exports.allSettled = _exports.all = void 0;
  /**
   * A cancelation-aware variant of [Promise.all](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all).
   * The normal version of a `Promise.all` just returns a regular, uncancelable
   * Promise. The `ember-concurrency` variant of `all()` has the following
   * additional behavior:
   *
   * - if the task that `yield`ed `all()` is canceled, any of the
   *   {@linkcode TaskInstance}s passed in to `all` will be canceled
   * - if any of the {@linkcode TaskInstance}s (or regular promises) passed in reject (or
   *   are canceled), all of the other unfinished `TaskInstance`s will
   *   be automatically canceled.
   *
   * [Check out the "Awaiting Multiple Child Tasks example"](/docs/examples/joining-tasks)
   */
  const all = _exports.all = taskAwareVariantOf(_rsvp.default.Promise, 'all', identity);

  /**
   * A cancelation-aware variant of [RSVP.allSettled](https://api.emberjs.com/ember/release/functions/rsvp/allSettled).
   * The normal version of a `RSVP.allSettled` just returns a regular, uncancelable
   * Promise. The `ember-concurrency` variant of `allSettled()` has the following
   * additional behavior:
   *
   * - if the task that `yield`ed `allSettled()` is canceled, any of the
   *   {@linkcode TaskInstance}s passed in to `allSettled` will be canceled
   */
  const allSettled = _exports.allSettled = taskAwareVariantOf(_rsvp.default, 'allSettled', identity);

  /**
   * A cancelation-aware variant of [Promise.race](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race).
   * The normal version of a `Promise.race` just returns a regular, uncancelable
   * Promise. The `ember-concurrency` variant of `race()` has the following
   * additional behavior:
   *
   * - if the task that `yield`ed `race()` is canceled, any of the
   *   {@linkcode TaskInstance}s passed in to `race` will be canceled
   * - once any of the tasks/promises passed in complete (either success, failure,
   *   or cancelation), any of the {@linkcode TaskInstance}s passed in will be canceled
   *
   * [Check out the "Awaiting Multiple Child Tasks example"](/docs/examples/joining-tasks)
   */
  const race = _exports.race = taskAwareVariantOf(_rsvp.Promise, 'race', identity);

  /**
   * A cancelation-aware variant of [RSVP.hash](https://api.emberjs.com/ember/release/functions/rsvp/hash).
   * The normal version of a `RSVP.hash` just returns a regular, uncancelable
   * Promise. The `ember-concurrency` variant of `hash()` has the following
   * additional behavior:
   *
   * - if the task that `yield`ed `hash()` is canceled, any of the
   *   {@linkcode TaskInstance}s passed in to `hash` will be canceled
   * - if any of the items rejects/cancels, all other cancelable items
   *   (e.g. {@linkcode TaskInstance}s) will be canceled
   */
  const hash = _exports.hash = taskAwareVariantOf(_rsvp.default, 'hash', getValues);

  /**
   * A cancelation-aware variant of [RSVP.hashSettled](https://api.emberjs.com/ember/release/functions/rsvp/hashSettled).
   * The normal version of a `RSVP.hashSettled` just returns a regular, uncancelable
   * Promise. The `ember-concurrency` variant of `hashSettled()` has the following
   * additional behavior:
   *
   * - if the task that `yield`ed `hashSettled()` is canceled, any of the
   *   {@linkcode TaskInstance}s passed in to `hashSettled` will be canceled
   */
  const hashSettled = _exports.hashSettled = taskAwareVariantOf(_rsvp.default, 'hashSettled', getValues);
  function identity(obj) {
    return obj;
  }
  function getValues(obj) {
    return Object.keys(obj).map(k => obj[k]);
  }
  function castForPromiseHelper(castable) {
    if (castable) {
      if (castable instanceof _taskInstance.TaskInstance) {
        // Mark TaskInstances, including those that performed synchronously and
        // have finished already, as having their errors handled, as if they had
        // been then'd, which this is emulating.
        castable.executor.asyncErrorsHandled = true;
      } else if (castable instanceof _yieldables.Yieldable) {
        // Cast to promise
        return castable._toPromise();
      }
    }
    return castable;
  }
  function castAwaitables(arrOrHash, callback) {
    if (Array.isArray(arrOrHash)) {
      return arrOrHash.map(callback);
    } else if (typeof arrOrHash === 'object' && arrOrHash !== null) {
      let obj = {};
      Object.keys(arrOrHash).forEach(key => {
        obj[key] = callback(arrOrHash[key]);
      });
      return obj;
    } else {
      // :shruggie:
      return arrOrHash;
    }
  }
  function taskAwareVariantOf(obj, method, getItems) {
    return function (awaitable) {
      let awaitables = castAwaitables(awaitable, castForPromiseHelper);
      let items = getItems(awaitables);
      (true && !(Array.isArray(items)) && (0, _debug.assert)(`'${method}' expects an array.`, Array.isArray(items)));
      let defer = _rsvp.default.defer();
      obj[method](awaitables).then(defer.resolve, defer.reject);
      let hasCancelled = false;
      let cancelAll = () => {
        if (hasCancelled) {
          return;
        }
        hasCancelled = true;
        items.forEach(it => {
          if (it) {
            if (it instanceof _taskInstance.TaskInstance) {
              it.cancel();
            } else if (typeof it[_yieldables.cancelableSymbol] === 'function') {
              it[_yieldables.cancelableSymbol]();
            }
          }
        });
      };
      let promise = defer.promise.finally(cancelAll);
      promise[_yieldables.cancelableSymbol] = cancelAll;
      return promise;
    };
  }
});
;define("ember-concurrency/-private/ember-environment", ["exports", "ember", "rsvp", "ember-concurrency/-private/external/environment", "@ember/debug", "@ember/runloop"], function (_exports, _ember, _rsvp, _environment, _debug, _runloop) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.EmberEnvironment = _exports.EMBER_ENVIRONMENT = void 0;
  class EmberEnvironment extends _environment.Environment {
    assert(...args) {
      (true && !(false) && (0, _debug.assert)(...args));
    }
    async(callback) {
      (0, _runloop.join)(() => (0, _runloop.schedule)('actions', callback));
    }
    reportUncaughtRejection(error) {
      (0, _runloop.next)(null, function () {
        if (_ember.default.onerror) {
          _ember.default.onerror(error);
        } else {
          throw error;
        }
      });
    }
    defer() {
      return (0, _rsvp.defer)();
    }
    globalDebuggingEnabled() {
      return _ember.default.ENV.DEBUG_TASKS;
    }
  }
  _exports.EmberEnvironment = EmberEnvironment;
  const EMBER_ENVIRONMENT = _exports.EMBER_ENVIRONMENT = new EmberEnvironment();
});
;define("ember-concurrency/-private/external/environment", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Environment = _exports.DEFAULT_ENVIRONMENT = void 0;
  class Environment {
    assert() {}
    async(callback) {
      Promise.resolve().then(callback);
    }
    reportUncaughtRejection() {
      this.async(error => {
        throw error;
      });
    }
    defer() {
      let deferable = {
        promise: null,
        resolve: null,
        reject: null
      };
      let promise = new Promise((resolve, reject) => {
        deferable.resolve = resolve;
        deferable.reject = reject;
      });
      deferable.promise = promise;
      return deferable;
    }
    globalDebuggingEnabled() {
      return false;
    }
  }
  _exports.Environment = Environment;
  const DEFAULT_ENVIRONMENT = _exports.DEFAULT_ENVIRONMENT = new Environment();
});
;define("ember-concurrency/-private/external/generator-state", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.GeneratorStepResult = _exports.GeneratorState = void 0;
  class GeneratorStepResult {
    constructor(value, done, errored) {
      this.value = value;
      this.done = done;
      this.errored = errored;
    }
  }
  _exports.GeneratorStepResult = GeneratorStepResult;
  class GeneratorState {
    constructor(generatorFactory) {
      this.done = false;
      this.generatorFactory = generatorFactory;
      this.iterator = null;
    }
    step(resolvedValue, iteratorMethod) {
      try {
        let iterator = this.getIterator();
        let {
          value,
          done
        } = iterator[iteratorMethod](resolvedValue);
        if (done) {
          return this.finalize(value, false);
        } else {
          return new GeneratorStepResult(value, false, false);
        }
      } catch (e) {
        return this.finalize(e, true);
      }
    }
    getIterator() {
      if (!this.iterator && !this.done) {
        this.iterator = this.generatorFactory();
      }
      return this.iterator;
    }
    finalize(value, errored) {
      this.done = true;
      this.iterator = null;
      return new GeneratorStepResult(value, true, errored);
    }
  }
  _exports.GeneratorState = GeneratorState;
});
;define("ember-concurrency/-private/external/scheduler/policies/bounded-policy", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  class BoundedPolicy {
    constructor(maxConcurrency) {
      this.maxConcurrency = maxConcurrency || 1;
    }
  }
  var _default = _exports.default = BoundedPolicy;
});
;define("ember-concurrency/-private/external/scheduler/policies/drop-policy", ["exports", "ember-concurrency/-private/external/scheduler/policies/bounded-policy", "ember-concurrency/-private/external/scheduler/policies/execution-states"], function (_exports, _boundedPolicy, _executionStates) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const CANCELLED = (0, _executionStates.makeCancelState)(`it belongs to a 'drop' Task that was already running`);
  class DropReducer {
    constructor(remainingSlots) {
      this.remainingSlots = remainingSlots;
    }
    step() {
      if (this.remainingSlots > 0) {
        this.remainingSlots--;
        return _executionStates.STARTED;
      }
      return CANCELLED;
    }
  }
  class DropPolicy extends _boundedPolicy.default {
    makeReducer() {
      return new DropReducer(this.maxConcurrency);
    }
  }
  var _default = _exports.default = DropPolicy;
});
;define("ember-concurrency/-private/external/scheduler/policies/enqueued-policy", ["exports", "ember-concurrency/-private/external/scheduler/policies/bounded-policy", "ember-concurrency/-private/external/scheduler/policies/execution-states"], function (_exports, _boundedPolicy, _executionStates) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  class EnqueuedReducer {
    constructor(remainingSlots) {
      this.remainingSlots = remainingSlots;
    }
    step() {
      if (this.remainingSlots > 0) {
        this.remainingSlots--;
        return _executionStates.STARTED;
      } else {
        return _executionStates.QUEUED;
      }
    }
  }
  class EnqueuedPolicy extends _boundedPolicy.default {
    makeReducer() {
      return new EnqueuedReducer(this.maxConcurrency);
    }
  }
  var _default = _exports.default = EnqueuedPolicy;
});
;define("ember-concurrency/-private/external/scheduler/policies/execution-states", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.makeCancelState = _exports.TYPE_STARTED = _exports.TYPE_QUEUED = _exports.TYPE_CANCELLED = _exports.STARTED = _exports.QUEUED = void 0;
  const TYPE_CANCELLED = _exports.TYPE_CANCELLED = 'CANCELLED';
  const TYPE_STARTED = _exports.TYPE_STARTED = 'STARTED';
  const TYPE_QUEUED = _exports.TYPE_QUEUED = 'QUEUED';
  const STARTED = _exports.STARTED = {
    type: TYPE_STARTED
  };
  const QUEUED = _exports.QUEUED = {
    type: TYPE_QUEUED
  };
  const makeCancelState = reason => ({
    type: TYPE_CANCELLED,
    reason
  });
  _exports.makeCancelState = makeCancelState;
});
;define("ember-concurrency/-private/external/scheduler/policies/keep-latest-policy", ["exports", "ember-concurrency/-private/external/scheduler/policies/bounded-policy", "ember-concurrency/-private/external/scheduler/policies/execution-states"], function (_exports, _boundedPolicy, _executionStates) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const CANCELLED = (0, _executionStates.makeCancelState)(`it belongs to a 'keepLatest' Task that was already running`);

  // Given:
  // - started tasks: [a,b,_]
  // - queued tasks:  [c,d,e,f]
  // KeepLatest will cancel all but the last queued task instance, producing:
  // - started tasks: [a,b,c]
  // - queued tasks: [f]

  // TODO: perhaps we should expose another config for the number to keep enqueued.
  //       this would also make sense for enqueued, e.g. perform a max of maxConcurrency
  //       concurrent task instances, but after a number of queued instances has been
  //       reached, they should be cancelled.

  class KeepLatestReducer {
    constructor(remainingSlots, numToCancel) {
      this.remainingSlots = remainingSlots;
      this.numToCancel = numToCancel;
    }
    step() {
      if (this.remainingSlots > 0) {
        this.remainingSlots--;
        return _executionStates.STARTED;
      } else {
        if (this.numToCancel > 0) {
          this.numToCancel--;
          return CANCELLED;
        } else {
          return _executionStates.QUEUED;
        }
      }
    }
  }
  class KeepLatestPolicy extends _boundedPolicy.default {
    makeReducer(numRunning, numQueued) {
      let maxEnqueued = 1;
      let totalRunning = numRunning + numQueued;
      return new KeepLatestReducer(this.maxConcurrency, totalRunning - this.maxConcurrency - maxEnqueued);
    }
  }
  var _default = _exports.default = KeepLatestPolicy;
});
;define("ember-concurrency/-private/external/scheduler/policies/restartable-policy", ["exports", "ember-concurrency/-private/external/scheduler/policies/bounded-policy", "ember-concurrency/-private/external/scheduler/policies/execution-states"], function (_exports, _boundedPolicy, _executionStates) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const CANCELLED = (0, _executionStates.makeCancelState)(`it belongs to a 'restartable' Task that was .perform()ed again`);
  class RestartableReducer {
    constructor(numToCancel) {
      this.numToCancel = numToCancel;
    }
    step() {
      if (this.numToCancel > 0) {
        this.numToCancel--;
        return CANCELLED;
      } else {
        return _executionStates.STARTED;
      }
    }
  }
  class RestartablePolicy extends _boundedPolicy.default {
    makeReducer(numRunning, numQueued) {
      return new RestartableReducer(numRunning + numQueued - this.maxConcurrency);
    }
  }
  var _default = _exports.default = RestartablePolicy;
});
;define("ember-concurrency/-private/external/scheduler/policies/unbounded-policy", ["exports", "ember-concurrency/-private/external/scheduler/policies/execution-states"], function (_exports, _executionStates) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  class UnboundedReducer {
    step() {
      return _executionStates.STARTED;
    }
  }
  const SINGLETON_REDUCER = new UnboundedReducer();
  class UnboundedPolicy {
    makeReducer() {
      return SINGLETON_REDUCER;
    }
  }
  var _default = _exports.default = UnboundedPolicy;
});
;define("ember-concurrency/-private/external/scheduler/refresh", ["exports", "ember-concurrency/-private/external/scheduler/policies/execution-states"], function (_exports, _executionStates) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const LAST_APPLIED_TAGS = new Map();
  class Refresh {
    constructor(schedulerPolicy, stateTracker, taskInstances) {
      this.stateTracker = stateTracker;
      this.schedulerPolicy = schedulerPolicy;
      this.initialTaskInstances = taskInstances;
      this.startingInstances = [];
    }
    process() {
      let [taskInstances, numRunning, numQueued] = this.filterFinishedTaskInstances();
      let reducer = this.schedulerPolicy.makeReducer(numRunning, numQueued);
      let finalTaskInstances = taskInstances.filter(taskInstance => {
        return this.setTaskInstanceExecutionState(taskInstance, reducer.step());
      });
      this.stateTracker.computeFinalStates(state => this.applyState(state));
      this.startingInstances.forEach(taskInstance => taskInstance.start());
      return finalTaskInstances;
    }
    filterFinishedTaskInstances() {
      let numRunning = 0,
        numQueued = 0;
      let taskInstances = this.initialTaskInstances.filter(taskInstance => {
        let taskState = this.stateTracker.stateFor(taskInstance.task);
        let executorState = taskInstance.executor.state;
        if (executorState.isFinished) {
          taskState.onCompletion(taskInstance);
          return false;
        }
        if (executorState.hasStarted) {
          numRunning += 1;
        } else {
          numQueued += 1;
        }
        return true;
      });
      return [taskInstances, numRunning, numQueued];
    }
    setTaskInstanceExecutionState(taskInstance, desiredState) {
      let taskState = this.stateTracker.stateFor(taskInstance.task);
      if (!taskInstance.executor.counted) {
        taskInstance.executor.counted = true;
        taskState.onPerformed(taskInstance);
      }
      switch (desiredState.type) {
        case _executionStates.TYPE_CANCELLED:
          // this will cause a follow up flush which will detect and recompute cancellation state
          taskInstance.cancel(desiredState.reason);
          return false;
        case _executionStates.TYPE_STARTED:
          if (!taskInstance.executor.state.hasStarted) {
            this.startingInstances.push(taskInstance);
            taskState.onStart(taskInstance);
          }
          taskState.onRunning(taskInstance);
          return true;
        case _executionStates.TYPE_QUEUED:
          taskState.onQueued(taskInstance);
          // TODO: assert taskInstance hasn't started?
          // Or perhaps this can be a way to pause a task?
          return true;
      }
    }
    applyState(state) {
      let {
        taskable
      } = state;
      if (!taskable.onState) {
        return;
      }
      const {
        guid
      } = taskable;
      if (LAST_APPLIED_TAGS.has(guid) && state.tag < LAST_APPLIED_TAGS.get(guid)) {
        return;
      }
      let props = Object.assign({
        numRunning: state.numRunning,
        numQueued: state.numQueued,
        numPerformedInc: state.numPerformedInc
      }, state.attrs);
      taskable.onState(props, taskable);
      LAST_APPLIED_TAGS.set(guid, state.tag);
    }
  }
  var _default = _exports.default = Refresh;
});
;define("ember-concurrency/-private/external/scheduler/scheduler", ["exports", "ember-concurrency/-private/external/scheduler/refresh", "ember-concurrency/-private/external/scheduler/state-tracker/state-tracker", "ember-concurrency/-private/external/scheduler/state-tracker/null-state-tracker"], function (_exports, _refresh, _stateTracker, _nullStateTracker) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // Scheduler base class

  // When a Task is performed, it creates an unstarted TaskInstance and
  // passes it to the Scheduler to determine when it should run. The
  // scheduler consults the schedulerPolicy (e.g. DropPolicy, RestartablePolicy, etc)
  // to determine whether the task instance should start executing, be enqueued
  // for later execution, or be immediately cancelled. As TaskInstances start
  // and run to completion, the Scheduler's `refresh()` method is called to
  // give it an opportunity to start (or cancel) previously enqueued task instances,
  // as well as update the derived state on Tasks and TaskGroups.

  // Every Task has its own Scheduler instance, unless it is part of a group,
  // in which case all the Tasks in a group share a single Scheduler.
  class Scheduler {
    constructor(schedulerPolicy, stateTrackingEnabled) {
      this.schedulerPolicy = schedulerPolicy;
      this.stateTrackingEnabled = stateTrackingEnabled;
      this.taskInstances = [];
    }
    cancelAll(guid, cancelRequest) {
      let cancelations = this.taskInstances.map(taskInstance => {
        if (taskInstance.task.guids[guid]) {
          taskInstance.executor.cancel(cancelRequest);
        }
      }).filter(cancelation => !!cancelation);
      return Promise.all(cancelations);
    }
    perform(taskInstance) {
      taskInstance.onFinalize(() => this.scheduleRefresh());
      this.taskInstances.push(taskInstance);
      this.refresh();
    }
    scheduleRefresh() {
      Promise.resolve().then(() => this.refresh());
    }
    refresh() {
      let stateTracker = this.stateTrackingEnabled ? new _stateTracker.default() : new _nullStateTracker.default();
      let refresh = new _refresh.default(this.schedulerPolicy, stateTracker, this.taskInstances);
      this.taskInstances = refresh.process();
    }
  }
  var _default = _exports.default = Scheduler;
});
;define("ember-concurrency/-private/external/scheduler/state-tracker/null-state-tracker", ["exports", "ember-concurrency/-private/external/scheduler/state-tracker/null-state"], function (_exports, _nullState) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const NULL_STATE = new _nullState.default();
  class NullStateTracker {
    stateFor() {
      return NULL_STATE;
    }
    computeFinalStates() {}
  }
  var _default = _exports.default = NullStateTracker;
});
;define("ember-concurrency/-private/external/scheduler/state-tracker/null-state", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  class NullState {
    onCompletion() {}
    onPerformed() {}
    onStart() {}
    onRunning() {}
    onQueued() {}
  }
  var _default = _exports.default = NullState;
});
;define("ember-concurrency/-private/external/scheduler/state-tracker/state-tracker", ["exports", "ember-concurrency/-private/external/scheduler/state-tracker/state"], function (_exports, _state) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const CURRENT_REFRESH_TAGS = new Map();
  class StateTracker {
    constructor() {
      this.states = new Map();
    }
    stateFor(taskable) {
      let guid = taskable.guid;
      let taskState = this.states.get(guid);
      if (!taskState) {
        let currentTag = CURRENT_REFRESH_TAGS.has(guid) ? CURRENT_REFRESH_TAGS.get(guid) : 0;
        taskState = new _state.default(taskable, ++currentTag);
        this.states.set(guid, taskState);
        CURRENT_REFRESH_TAGS.set(guid, currentTag);
      }
      return taskState;
    }

    // After cancelling/queueing task instances, we have to recompute the derived state
    // of all the tasks that had/have task instances in this scheduler. We do this by
    // looping through all the Tasks that we've accumulated state for, and then recursively
    // applying/adding to the state of any TaskGroups they belong to.
    computeFinalStates(callback) {
      this.computeRecursiveState();
      this.forEachState(state => callback(state));
    }
    computeRecursiveState() {
      this.forEachState(taskState => {
        let lastState = taskState;
        taskState.recurseTaskGroups(taskGroup => {
          let state = this.stateFor(taskGroup);
          state.applyStateFrom(lastState);
          lastState = state;
        });
      });
    }
    forEachState(callback) {
      this.states.forEach(state => callback(state));
    }
  }
  var _default = _exports.default = StateTracker;
});
;define("ember-concurrency/-private/external/scheduler/state-tracker/state", ["exports", "ember-concurrency/-private/external/task-instance/completion-states"], function (_exports, _completionStates) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  class RefreshState {
    constructor(taskable, tag) {
      this.taskable = taskable;
      this.group = taskable.group;
      this.numRunning = 0;
      this.numQueued = 0;
      this.numPerformedInc = 0;
      this.attrs = {};
      this.tag = tag;
    }
    onCompletion(taskInstance) {
      let state = taskInstance.completionState;
      this.attrs.lastRunning = null;
      this.attrs.lastComplete = taskInstance;
      if (state === _completionStates.COMPLETION_SUCCESS) {
        this.attrs.lastSuccessful = taskInstance;
      } else {
        if (state === _completionStates.COMPLETION_ERROR) {
          this.attrs.lastErrored = taskInstance;
        } else if (state === _completionStates.COMPLETION_CANCEL) {
          this.attrs.lastCanceled = taskInstance;
        }
        this.attrs.lastIncomplete = taskInstance;
      }
    }
    onPerformed(taskInstance) {
      this.numPerformedInc += 1;
      this.attrs.lastPerformed = taskInstance;
    }
    onStart(taskInstance) {
      this.attrs.last = taskInstance;
    }
    onRunning(taskInstance) {
      this.attrs.lastRunning = taskInstance;
      this.numRunning += 1;
    }
    onQueued() {
      this.numQueued += 1;
    }
    recurseTaskGroups(callback) {
      let group = this.group;
      while (group) {
        callback(group);
        group = group.group;
      }
    }
    applyStateFrom(other) {
      Object.assign(this.attrs, other.attrs);
      this.numRunning += other.numRunning;
      this.numQueued += other.numQueued;
      this.numPerformedInc += other.numPerformedInc;
    }
  }
  var _default = _exports.default = RefreshState;
});
;define("ember-concurrency/-private/external/task-decorators", ["exports", "ember-concurrency/-private/external/task-factory"], function (_exports, _taskFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.createTaskDecorator = createTaskDecorator;
  _exports.createTaskGroupDecorator = createTaskGroupDecorator;
  _exports.decoratorWithParams = decoratorWithParams;
  _exports.lastValue = void 0;
  function taskFromPropertyDescriptor(target, key, descriptor, params = [], factoryClass = _taskFactory.TaskFactory) {
    let {
      initializer,
      get,
      value
    } = descriptor;
    let taskFn;
    if (initializer) {
      taskFn = initializer.call(undefined);
    } else if (get) {
      taskFn = get.call(undefined);
    } else if (value) {
      taskFn = value;
    }
    taskFn.displayName = `${key} (task)`;
    let tasks = new WeakMap();
    let options = params[0] || {};
    let factory = new factoryClass(key, taskFn, options);
    factory._setupEmberKVO(target);
    return {
      get() {
        let task = tasks.get(this);
        if (!task) {
          task = factory.createTask(this);
          tasks.set(this, task);
        }
        return task;
      }
    };
  }
  function taskGroupPropertyDescriptor(_target, key, _descriptor, params = [], factoryClass = _taskFactory.TaskFactory) {
    let taskGroups = new WeakMap();
    let options = params[0] || {};
    let factory = new factoryClass(key, null, options);
    return {
      get() {
        let task = taskGroups.get(this);
        if (!task) {
          task = factory.createTaskGroup(this);
          taskGroups.set(this, task);
        }
        return task;
      }
    };
  }

  // Cribbed from @ember-decorators/utils
  function isFieldDescriptor(possibleDesc) {
    let [target, key, desc] = possibleDesc;
    return possibleDesc.length === 3 && typeof target === 'object' && target !== null && typeof key === 'string' && (typeof desc === 'object' && desc !== null && 'enumerable' in desc && 'configurable' in desc || desc === undefined) // TS compatibility ???
    ;
  }

  function decoratorWithParams(descriptorFn) {
    return function (...params) {
      if (isFieldDescriptor(params)) {
        return descriptorFn(...params);
      } else {
        return (...desc) => descriptorFn(...desc, params);
      }
    };
  }
  function createDecorator(fn, baseOptions = {}, factoryClass = _taskFactory.TaskFactory) {
    return decoratorWithParams((target, key, descriptor, [userOptions] = []) => {
      let mergedOptions = Object.assign({}, {
        ...baseOptions,
        ...userOptions
      });
      return fn(target, key, descriptor, [mergedOptions], factoryClass);
    });
  }
  function createTaskDecorator(baseOptions = {}, factoryClass = _taskFactory.TaskFactory) {
    return createDecorator(taskFromPropertyDescriptor, baseOptions, factoryClass);
  }
  function createTaskGroupDecorator(baseOptions = {}, factoryClass = _taskFactory.TaskFactory) {
    return createDecorator(taskGroupPropertyDescriptor, baseOptions, factoryClass);
  }
  const lastValue = _exports.lastValue = decoratorWithParams((_target, _key, descriptor, [taskName] = []) => {
    const {
      initializer
    } = descriptor;
    delete descriptor.initializer;
    return {
      get() {
        let lastInstance = this[taskName].lastSuccessful;
        if (lastInstance) {
          return lastInstance.value;
        }
        if (initializer) {
          return initializer.call(this);
        }
        return undefined;
      }
    };
  });
});
;define("ember-concurrency/-private/external/task-factory", ["exports", "ember-concurrency/-private/external/scheduler/scheduler", "ember-concurrency/-private/external/scheduler/policies/unbounded-policy", "ember-concurrency/-private/external/scheduler/policies/enqueued-policy", "ember-concurrency/-private/external/scheduler/policies/drop-policy", "ember-concurrency/-private/external/scheduler/policies/keep-latest-policy", "ember-concurrency/-private/external/scheduler/policies/restartable-policy", "ember-concurrency/-private/external/task/task", "ember-concurrency/-private/external/task/task-group", "ember-concurrency/-private/external/environment"], function (_exports, _scheduler, _unboundedPolicy, _enqueuedPolicy, _dropPolicy, _keepLatestPolicy, _restartablePolicy, _task, _taskGroup, _environment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.TaskFactory = void 0;
  _exports.getModifier = getModifier;
  _exports.hasModifier = hasModifier;
  _exports.registerModifier = registerModifier;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function assertModifiersNotMixedWithGroup(obj) {
    if (obj._hasSetConcurrencyConstraint && obj._taskGroupPath) {
      throw new Error(`Cannot use both 'group' and other concurrency-constraining task modifiers (e.g. 'drop', 'enqueue', 'restartable')`);
    }
  }
  function assertUnsetBufferPolicy(obj) {
    if (obj._hasSetBufferPolicy) {
      throw new Error(`Cannot set multiple buffer policies on a task or task group. ${obj._schedulerPolicyClass} has already been set for task or task group '${obj.name}'`);
    }
  }
  const MODIFIER_REGISTRY = {
    enqueue: (factory, value) => value && factory.setBufferPolicy(_enqueuedPolicy.default),
    evented: (factory, value) => value && factory.setEvented(value),
    debug: (factory, value) => value && factory.setDebug(value),
    drop: (factory, value) => value && factory.setBufferPolicy(_dropPolicy.default),
    group: (factory, groupName) => factory.setGroup(groupName),
    keepLatest: (factory, value) => value && factory.setBufferPolicy(_keepLatestPolicy.default),
    maxConcurrency: (factory, maxConcurrency) => factory.setMaxConcurrency(maxConcurrency),
    onState: (factory, onStateCallback) => factory.setOnState(onStateCallback),
    restartable: (factory, value) => value && factory.setBufferPolicy(_restartablePolicy.default)
  };

  /**
   * Callback type defining a task modifier
   *
   * @callback TaskFactory~TaskModifier
   * @param {TaskFactory} factory
   * @param {*} taskModifierOption
   */

  /**
   * Registers a new modifier with the modifier registry
   *
   * @param {string} name Name of the modifier
   * @param {TaskFactory~TaskModifier} callback
   */
  function registerModifier(name, callback) {
    if (MODIFIER_REGISTRY[name]) {
      throw new Error(`A modifier with the name '${name}' has already been defined.`);
    }
    MODIFIER_REGISTRY[name] = callback;
  }

  /**
   * Returns a specified modifier, if it exists in the registry
   *
   * @param {string} name Name of the modifier
   * @returns {TaskFactory~TaskModifier?}
   */
  function getModifier(name) {
    return MODIFIER_REGISTRY[name];
  }

  /**
   * Returns whether a specified modifier exists in the registry
   *
   * @param {string} name Name of the modifier
   * @returns {boolean}
   */
  function hasModifier(name) {
    return name in MODIFIER_REGISTRY;
  }

  /**
   * Factory used for instantiating Tasks and Task Groups. Mostly for internal
   * use, but some public APIs exposed via the Task Modifier APIs.
   *
   * <style>
   *  .ignore-this--this-is-here-to-hide-constructor,
   *  #TaskFactory { display: none }
   * </style>
   *
   * @class TaskFactory
   */
  class TaskFactory {
    constructor(name = '<unknown>', taskDefinition = null, options = {}) {
      _defineProperty(this, "env", _environment.DEFAULT_ENVIRONMENT);
      _defineProperty(this, "_debug", null);
      _defineProperty(this, "_enabledModifiers", []);
      _defineProperty(this, "_hasSetConcurrencyConstraint", false);
      _defineProperty(this, "_hasSetBufferPolicy", false);
      _defineProperty(this, "_hasEnabledEvents", false);
      _defineProperty(this, "_maxConcurrency", null);
      _defineProperty(this, "_onStateCallback", (state, taskable) => taskable.setState(state));
      _defineProperty(this, "_schedulerPolicyClass", _unboundedPolicy.default);
      _defineProperty(this, "_taskGroupPath", null);
      this.name = name;
      this.taskDefinition = taskDefinition;
      this.options = options;
      this._processModifierOptions(options);
    }

    /**
     * Returns a new Task bound to the given context
     *
     * @protected
     * @param {*} context
     * @returns {Task}
     */
    createTask(context) {
      let options = this.getTaskOptions(context);
      return new _task.Task(Object.assign({
        generatorFactory: args => this.taskDefinition.apply(context, args)
      }, options));
    }

    /**
     * Returns a new TaskGroup bound to the given context
     *
     * @protected
     * @param {*} context
     * @returns {Task}
     */
    createTaskGroup(context) {
      let options = this.getTaskOptions(context);
      return new _taskGroup.TaskGroup(options);
    }

    /**
     * Returns a modifier callback with the given name bound to this TaskFactory,
     * if registered.
     *
     * @protected
     * @param {string} name
     * @returns {TaskFactory~TaskModifier?}
     */
    getModifier(name) {
      if (hasModifier(name)) {
        return MODIFIER_REGISTRY[name].bind(null, this);
      }
    }

    /**
     * Returns the options provided to TaskFactory
     *
     * @public
     * @returns {object}
     */
    getOptions() {
      return this.options;
    }

    /**
     * Returns a new Scheduler instance
     *
     * @protected
     * @param {*} schedulerPolicy
     * @param {boolean} stateTrackingEnabled
     * @returns {Scheduler}
     */
    getScheduler(schedulerPolicy, stateTrackingEnabled) {
      return new _scheduler.default(schedulerPolicy, stateTrackingEnabled);
    }

    /**
     * Returns the options to pass to a Task or TaskGroup constructor
     *
     * @protected
     * @param {*} context
     * @returns {object}
     */
    getTaskOptions(context) {
      let group, scheduler;
      let onStateCallback = this._onStateCallback;
      if (this._taskGroupPath) {
        group = context[this._taskGroupPath];
        if (!(group instanceof _taskGroup.TaskGroup)) {
          throw new Error(`Expected group '${this._taskGroupPath}' to be defined but was not found.`);
        }
        scheduler = group.scheduler;
      } else {
        let schedulerPolicy = new this._schedulerPolicyClass(this._maxConcurrency);
        scheduler = this.getScheduler(schedulerPolicy, onStateCallback && typeof onStateCallback === 'function');
      }
      return {
        context,
        debug: this._debug,
        env: this.env,
        name: this.name,
        group,
        scheduler,
        hasEnabledEvents: this._hasEnabledEvents,
        onStateCallback,
        enabledModifiers: this._enabledModifiers,
        modifierOptions: this.getOptions()
      };
    }

    /**
     * Sets the Scheduler buffer policy class to the specified value.
     *
     * Will raise an assertion if a buffer policy has already been specified
     *
     * @param {*} policy
     * @returns {TaskFactory}
     */
    setBufferPolicy(policy) {
      assertUnsetBufferPolicy(this);
      this._hasSetBufferPolicy = true;
      this._hasSetConcurrencyConstraint = true;
      this._schedulerPolicyClass = policy;
      assertModifiersNotMixedWithGroup(this);
      return this;
    }

    /**
     * Sets debug mode
     *
     * @param {boolean} enabled
     * @returns {TaskFactory}
     */
    setDebug(enabled) {
      this._debug = enabled;
      return this;
    }

    /**
     * Sets whether Task will dispatch Task events or not
     *
     * @param {boolean} enabled
     * @returns {TaskFactory}
     */
    setEvented(enabled) {
      this._hasEnabledEvents = enabled;
      return this;
    }

    /**
     * Sets Scheduling policy's `maxConcurrency`
     *
     * @param {number} maxConcurrency
     * @returns {TaskFactory}
     */
    setMaxConcurrency(maxConcurrency) {
      this._hasSetConcurrencyConstraint = true;
      this._maxConcurrency = maxConcurrency;
      return this;
    }

    /**
     * Assigns Task created from this factory to the specified group name
     *
     * @param {string} group
     * @returns {TaskFactory}
     */
    setGroup(group) {
      this._taskGroupPath = group;
      return this;
    }

    /**
     * Sets the name of tasks created from this factory
     *
     * @param {string} name
     * @returns {TaskFactory}
     */
    setName(name) {
      this.name = name;
      return this;
    }

    /**
     * Sets the callback used on state updates. Can be set to null to disable
     * state tracking on tasks.
     *
     * @param {function} onStateCallback
     * @returns {TaskFactory}
     */
    setOnState(onStateCallback) {
      this._onStateCallback = onStateCallback;
      return this;
    }

    /**
     * Sets the definition for tasks created from this factory
     *
     * @param {*} taskDefinition
     * @returns {TaskFactory}
     */
    setTaskDefinition(taskDefinition) {
      this.taskDefinition = taskDefinition;
      return this;
    }
    _processModifierOptions(options) {
      if (!options) {
        return;
      }
      for (let key of Object.keys(options)) {
        let value = options[key];
        let modifier = this.getModifier(key);
        if (typeof modifier === 'function' && modifier(value)) {
          this._enabledModifiers.push(key);
        }
      }
    }
  }
  _exports.TaskFactory = TaskFactory;
});
;define("ember-concurrency/-private/external/task-instance/base", ["exports", "ember-concurrency/-private/external/task-instance/initial-state", "ember-concurrency/-private/external/yieldables", "ember-concurrency/-private/external/task-instance/cancelation"], function (_exports, _initialState, _yieldables, _cancelation) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.BaseTaskInstance = void 0;
  const EXPLICIT_CANCEL_REASON = '.cancel() was explicitly called';
  class BaseTaskInstance {
    constructor({
      task,
      args,
      executor,
      performType,
      hasEnabledEvents
    }) {
      this.task = task;
      this.args = args;
      this.performType = performType;
      this.executor = executor;
      this.executor.taskInstance = this;
      this.hasEnabledEvents = hasEnabledEvents;
    }
    setState() {}
    onStarted() {}
    onSuccess() {}
    onError() {}
    onCancel() {}
    formatCancelReason() {}
    selfCancelLoopWarning() {}
    onFinalize(callback) {
      this.executor.onFinalize(callback);
    }
    proceed(index, yieldResumeType, value) {
      this.executor.proceedChecked(index, yieldResumeType, value);
    }
    [_yieldables.yieldableSymbol](parentTaskInstance, resumeIndex) {
      return this.executor.onYielded(parentTaskInstance, resumeIndex);
    }
    cancel(cancelReason = EXPLICIT_CANCEL_REASON) {
      this.executor.cancel(new _cancelation.CancelRequest(_cancelation.CANCEL_KIND_EXPLICIT, cancelReason));
    }
    then(...args) {
      return this.executor.promise().then(...args);
    }
    catch(...args) {
      return this.executor.promise().catch(...args);
    }
    finally(...args) {
      return this.executor.promise().finally(...args);
    }
    toString() {
      return `${this.task} TaskInstance`;
    }
    start() {
      this.executor.start();
      return this;
    }
  }
  _exports.BaseTaskInstance = BaseTaskInstance;
  Object.assign(BaseTaskInstance.prototype, _initialState.INITIAL_STATE);
  Object.assign(BaseTaskInstance.prototype, {
    state: 'waiting',
    isDropped: false,
    isRunning: true
  });
});
;define("ember-concurrency/-private/external/task-instance/cancelation", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.TASK_CANCELATION_NAME = _exports.CancelRequest = _exports.CANCEL_KIND_YIELDABLE_CANCEL = _exports.CANCEL_KIND_PARENT_CANCEL = _exports.CANCEL_KIND_LIFESPAN_END = _exports.CANCEL_KIND_EXPLICIT = void 0;
  _exports.didCancel = didCancel;
  const TASK_CANCELATION_NAME = _exports.TASK_CANCELATION_NAME = 'TaskCancelation';

  /**
   * Returns true if the object passed to it is a TaskCancelation error.
   * If you call `someTask.perform().catch(...)` or otherwise treat
   * a {@linkcode TaskInstance} like a promise, you may need to
   * handle the cancelation of a TaskInstance differently from
   * other kinds of errors it might throw, and you can use this
   * convenience function to distinguish cancelation from errors.
   *
   * ```js
   * click() {
   *   this.myTask.perform().catch(e => {
   *     if (!didCancel(e)) { throw e; }
   *   });
   * }
   * ```
   *
   * @param {object} error the caught error, which might be a TaskCancelation
   * @returns {boolean}
   */
  function didCancel(e) {
    return e && e.name === TASK_CANCELATION_NAME;
  }
  const CANCEL_KIND_EXPLICIT = _exports.CANCEL_KIND_EXPLICIT = 'explicit';
  const CANCEL_KIND_YIELDABLE_CANCEL = _exports.CANCEL_KIND_YIELDABLE_CANCEL = 'yielded';
  const CANCEL_KIND_LIFESPAN_END = _exports.CANCEL_KIND_LIFESPAN_END = 'lifespan_end';
  const CANCEL_KIND_PARENT_CANCEL = _exports.CANCEL_KIND_PARENT_CANCEL = 'parent_cancel';
  class CancelRequest {
    constructor(kind, reason) {
      this.kind = kind;
      this.reason = reason;
      this.promise = new Promise(resolve => {
        this.finalize = resolve;
      });
    }
  }
  _exports.CancelRequest = CancelRequest;
});
;define("ember-concurrency/-private/external/task-instance/completion-states", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.COMPLETION_SUCCESS = _exports.COMPLETION_PENDING = _exports.COMPLETION_ERROR = _exports.COMPLETION_CANCEL = void 0;
  const COMPLETION_PENDING = _exports.COMPLETION_PENDING = 0;
  const COMPLETION_SUCCESS = _exports.COMPLETION_SUCCESS = 1;
  const COMPLETION_ERROR = _exports.COMPLETION_ERROR = 2;
  const COMPLETION_CANCEL = _exports.COMPLETION_CANCEL = 3;
});
;define("ember-concurrency/-private/external/task-instance/executor", ["exports", "ember-concurrency/-private/external/generator-state", "ember-concurrency/-private/external/task-instance/initial-state", "ember-concurrency/-private/external/yieldables", "ember-concurrency/-private/external/task-instance/completion-states", "ember-concurrency/-private/external/task-instance/cancelation"], function (_exports, _generatorState, _initialState, _yieldables, _completionStates, _cancelation) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.TaskInstanceExecutor = _exports.PERFORM_TYPE_UNLINKED = _exports.PERFORM_TYPE_LINKED = _exports.PERFORM_TYPE_DEFAULT = void 0;
  _exports.getRunningInstance = getRunningInstance;
  const PERFORM_TYPE_DEFAULT = _exports.PERFORM_TYPE_DEFAULT = 'PERFORM_TYPE_DEFAULT';
  const PERFORM_TYPE_UNLINKED = _exports.PERFORM_TYPE_UNLINKED = 'PERFORM_TYPE_UNLINKED';
  const PERFORM_TYPE_LINKED = _exports.PERFORM_TYPE_LINKED = 'PERFORM_TYPE_LINKED';
  const CANCEL_RETURN_VALUE_SENTINEL = {};
  let TASK_INSTANCE_STACK = [];
  function getRunningInstance() {
    return TASK_INSTANCE_STACK[TASK_INSTANCE_STACK.length - 1];
  }
  class TaskInstanceExecutor {
    constructor({
      generatorFactory,
      env,
      debug
    }) {
      this.generatorState = new _generatorState.GeneratorState(generatorFactory);
      this.state = Object.assign({}, _initialState.INITIAL_STATE);
      this.index = 1;
      this.disposers = [];
      this.finalizeCallbacks = [];
      this.env = env;
      this.debug = debug;
      this.cancelRequest = null;
    }
    start() {
      if (this.state.hasStarted || this.cancelRequest) {
        return;
      }
      this.setState({
        hasStarted: true
      });
      this.proceedSync(_yieldables.YIELDABLE_CONTINUE, undefined);
      this.taskInstance.onStarted();
    }
    cancel(cancelRequest) {
      if (!this.requestCancel(cancelRequest)) {
        cancelRequest.finalize();
        return cancelRequest.promise;
      }
      if (this.state.hasStarted) {
        this.proceedWithCancelAsync();
      } else {
        this.finalizeWithCancel();
      }
      return this.cancelRequest.promise;
    }
    setState(state) {
      Object.assign(this.state, state);
      this.taskInstance.setState(this.state);
    }
    proceedChecked(index, yieldResumeType, value) {
      if (this.state.isFinished) {
        return;
      }
      if (!this.advanceIndex(index)) {
        return;
      }
      if (yieldResumeType === _yieldables.YIELDABLE_CANCEL) {
        this.requestCancel(new _cancelation.CancelRequest(_cancelation.CANCEL_KIND_YIELDABLE_CANCEL), value);
        this.proceedWithCancelAsync();
      } else {
        this.proceedAsync(yieldResumeType, value);
      }
    }
    proceedWithCancelAsync() {
      this.proceedAsync(_yieldables.YIELDABLE_RETURN, CANCEL_RETURN_VALUE_SENTINEL);
    }
    proceedAsync(yieldResumeType, value) {
      this.advanceIndex(this.index);
      this.env.async(() => this.proceedSync(yieldResumeType, value));
    }
    proceedSync(yieldResumeType, value) {
      if (this.state.isFinished) {
        return;
      }
      this.dispose();
      if (this.generatorState.done) {
        this.handleResolvedReturnedValue(yieldResumeType, value);
      } else {
        this.handleResolvedContinueValue(yieldResumeType, value);
      }
    }

    /**
     * This method is called when a previously yielded value from
     * the generator has been resolved, and now it's time to pass
     * it back into the generator. There are 3 ways to "resume" a
     * generator:
     *
     * - call `.next(value)` on it, which is used to pass in a resolved
     *   value (the fulfilled value of a promise), e.g. if a task generator fn
     *   does `yield Promise.resolve(5)`, then we take that promise yielded
     *   by the generator, detect that it's a promise, resolve it, and then
     *   pass its fulfilled value `5` back into the generator function so
     *   that it can continue executing.
     * - call `.throw(error)` on it, which throw an exception from where the
     *   the generator previously yielded. We do this when the previously
     *   yielded value resolves to an error value (e.g. a rejected promise
     *   or a TaskInstance that finished with an error). Note that when you
     *   resume a generator with a `.throw()`, it can still recover from that
     *   thrown error and continue executing normally so long as the `yield`
     *   was inside a `try/catch` statement.
     * - call `.return(value)` on it, causes the generator function to return
     *   from where it previously `yield`ed. We use `.return()` when cancelling
     *   a TaskInstance; by `.return`ing, rather than `.throw`ing, it allows
     *   the generator function to skip `catch(e) {}` blocks, which is usually
     *   reserved for actual errors/exceptions; if we `.throw`'d cancellations,
     *   it would require all tasks that used try/catch to conditionally ignore
     *   cancellations, which is annoying. So we `.return()` from generator functions
     *   in the case of errors as a matter of convenience.
     *
     * @private
     */
    handleResolvedContinueValue(iteratorMethod, resumeValue) {
      let beforeIndex = this.index;
      let stepResult = this.generatorStep(resumeValue, iteratorMethod);

      // TODO: what is this doing? write breaking test.
      if (!this.advanceIndex(beforeIndex)) {
        return;
      }
      if (stepResult.errored) {
        this.finalize(stepResult.value, _completionStates.COMPLETION_ERROR);
        return;
      }
      this.handleYieldedValue(stepResult);
    }

    /**
     * This method is called when the generator function is all
     * out of values, and the last value returned from the function
     * (possible a thenable/yieldable/promise/etc) has been resolved.
     *
     * Possible cases:
     * - `return "simple value";` // resolved value is "simple value"
     * - `return undefined;` // (or omitted return) resolved value is undefined
     * - `return someTask.perform()` // resolved value is the value returned/resolved from someTask
     *
     * @private
     */
    handleResolvedReturnedValue(yieldResumeType, value) {
      switch (yieldResumeType) {
        case _yieldables.YIELDABLE_CONTINUE:
        case _yieldables.YIELDABLE_RETURN:
          this.finalize(value, _completionStates.COMPLETION_SUCCESS);
          break;
        case _yieldables.YIELDABLE_THROW:
          this.finalize(value, _completionStates.COMPLETION_ERROR);
          break;
      }
    }
    handleYieldedUnknownThenable(thenable) {
      let resumeIndex = this.index;
      thenable.then(value => {
        this.proceedChecked(resumeIndex, _yieldables.YIELDABLE_CONTINUE, value);
      }, error => {
        this.proceedChecked(resumeIndex, _yieldables.YIELDABLE_THROW, error);
      });
    }

    /**
     * The TaskInstance internally tracks an index/sequence number
     * (the `index` property) which gets incremented every time the
     * task generator function iterator takes a step. When a task
     * function is paused at a `yield`, there are two events that
     * cause the TaskInstance to take a step: 1) the yielded value
     * "resolves", thus resuming the TaskInstance's execution, or
     * 2) the TaskInstance is canceled. We need some mechanism to prevent
     * stale yielded value resolutions from resuming the TaskFunction
     * after the TaskInstance has already moved on (either because
     * the TaskInstance has since been canceled or because an
     * implementation of the Yieldable API tried to resume the
     * TaskInstance more than once). The `index` serves as
     * that simple mechanism: anyone resuming a TaskInstance
     * needs to pass in the `index` they were provided that acts
     * as a ticket to resume the TaskInstance that expires once
     * the TaskInstance has moved on.
     *
     * @private
     */
    advanceIndex(index) {
      if (this.index === index) {
        return ++this.index;
      }
    }
    handleYieldedValue(stepResult) {
      let yieldedValue = stepResult.value;
      if (!yieldedValue) {
        this.proceedWithSimpleValue(yieldedValue);
        return;
      }
      this.addDisposer(yieldedValue[_yieldables.cancelableSymbol]);
      if (yieldedValue[_yieldables.yieldableSymbol]) {
        this.invokeYieldable(yieldedValue);
      } else if (typeof yieldedValue.then === 'function') {
        this.handleYieldedUnknownThenable(yieldedValue);
      } else {
        this.proceedWithSimpleValue(yieldedValue);
      }
    }
    proceedWithSimpleValue(yieldedValue) {
      this.proceedAsync(_yieldables.YIELDABLE_CONTINUE, yieldedValue);
    }
    addDisposer(maybeDisposer) {
      if (typeof maybeDisposer !== 'function') {
        return;
      }
      this.disposers.push(maybeDisposer);
    }

    /**
     * Runs any disposers attached to the task's most recent `yield`.
     * For instance, when a task yields a TaskInstance, it registers that
     * child TaskInstance's disposer, so that if the parent task is canceled,
     * dispose() will run that disposer and cancel the child TaskInstance.
     *
     * @private
     */
    dispose() {
      let disposers = this.disposers;
      if (disposers.length === 0) {
        return;
      }
      this.disposers = [];
      disposers.forEach(disposer => disposer());
    }

    /**
     * Calls .next()/.throw()/.return() on the task's generator function iterator,
     * essentially taking a single step of execution on the task function.
     *
     * @private
     */
    generatorStep(nextValue, iteratorMethod) {
      TASK_INSTANCE_STACK.push(this);
      let stepResult = this.generatorState.step(nextValue, iteratorMethod);
      TASK_INSTANCE_STACK.pop();

      // TODO: fix this!
      if (this._expectsLinkedYield) {
        let value = stepResult.value;
        if (!value || value.performType !== PERFORM_TYPE_LINKED) {
          // eslint-disable-next-line no-console
          console.warn('You performed a .linked() task without immediately yielding/returning it. This is currently unsupported (but might be supported in future version of ember-concurrency).');
        }
        this._expectsLinkedYield = false;
      }
      return stepResult;
    }
    maybeResolveDefer() {
      if (!this.defer || !this.state.isFinished) {
        return;
      }
      if (this.state.completionState === _completionStates.COMPLETION_SUCCESS) {
        this.defer.resolve(this.state.value);
      } else {
        this.defer.reject(this.state.error);
      }
    }
    onFinalize(callback) {
      this.finalizeCallbacks.push(callback);
      if (this.state.isFinished) {
        this.runFinalizeCallbacks();
      }
    }
    runFinalizeCallbacks() {
      this.finalizeCallbacks.forEach(cb => cb());
      this.finalizeCallbacks = [];
      this.maybeResolveDefer();
      this.maybeThrowUnhandledTaskErrorLater();
    }
    promise() {
      if (!this.defer) {
        this.defer = this.env.defer();
        this.asyncErrorsHandled = true;
        this.maybeResolveDefer();
      }
      return this.defer.promise;
    }
    maybeThrowUnhandledTaskErrorLater() {
      if (!this.asyncErrorsHandled && this.state.completionState === _completionStates.COMPLETION_ERROR && !(0, _cancelation.didCancel)(this.state.error)) {
        this.env.async(() => {
          if (!this.asyncErrorsHandled) {
            this.env.reportUncaughtRejection(this.state.error);
          }
        });
      }
    }
    requestCancel(request) {
      if (this.cancelRequest || this.state.isFinished) {
        return false;
      }
      this.cancelRequest = request;
      return true;
    }
    finalize(value, completionState) {
      if (this.cancelRequest) {
        return this.finalizeWithCancel();
      }
      let state = {
        completionState
      };
      if (completionState === _completionStates.COMPLETION_SUCCESS) {
        state.isSuccessful = true;
        state.value = value;
      } else if (completionState === _completionStates.COMPLETION_ERROR) {
        state.isError = true;
        state.error = value;
      } else if (completionState === _completionStates.COMPLETION_CANCEL) {
        state.error = value;
      }
      this.finalizeShared(state);
    }
    finalizeWithCancel() {
      let cancelReason = this.taskInstance.formatCancelReason(this.cancelRequest.reason);
      let error = new Error(cancelReason);
      if (this.debugEnabled()) {
        // eslint-disable-next-line no-console
        console.log(cancelReason);
      }
      error.name = _cancelation.TASK_CANCELATION_NAME;
      this.finalizeShared({
        isCanceled: true,
        completionState: _completionStates.COMPLETION_CANCEL,
        error,
        cancelReason
      });
      this.cancelRequest.finalize();
    }
    debugEnabled() {
      return this.debug || this.env.globalDebuggingEnabled();
    }
    finalizeShared(state) {
      this.index++;
      state.isFinished = true;
      this.setState(state);
      this.runFinalizeCallbacks();
      this.dispatchFinalizeEvents(state.completionState);
    }
    dispatchFinalizeEvents(completionState) {
      switch (completionState) {
        case _completionStates.COMPLETION_SUCCESS:
          this.taskInstance.onSuccess();
          break;
        case _completionStates.COMPLETION_ERROR:
          this.taskInstance.onError(this.state.error);
          break;
        case _completionStates.COMPLETION_CANCEL:
          this.taskInstance.onCancel(this.state.cancelReason);
          break;
      }
    }
    invokeYieldable(yieldedValue) {
      try {
        let maybeDisposer = yieldedValue[_yieldables.yieldableSymbol](this.taskInstance, this.index);
        this.addDisposer(maybeDisposer);
      } catch (e) {
        this.env.reportUncaughtRejection(e);
      }
    }

    /**
     * `onYielded` is called when this task instance has been
     * yielded in another task instance's execution. We take
     * this opportunity to conditionally link up the tasks
     * so that when the parent or child cancels, the other
     * is cancelled.
     *
     * Given the following case:
     *
     * ```js
     * parentTask: task(function * () {
     *   yield otherTask.perform();
     * })
     * ```
     *
     * Then the `parent` param is the task instance that is executing, `this`
     * is the `otherTask` task instance that was yielded.
     *
     * @private
     */
    onYielded(parent, resumeIndex) {
      this.asyncErrorsHandled = true;
      this.onFinalize(() => {
        let completionState = this.state.completionState;
        if (completionState === _completionStates.COMPLETION_SUCCESS) {
          parent.proceed(resumeIndex, _yieldables.YIELDABLE_CONTINUE, this.state.value);
        } else if (completionState === _completionStates.COMPLETION_ERROR) {
          parent.proceed(resumeIndex, _yieldables.YIELDABLE_THROW, this.state.error);
        } else if (completionState === _completionStates.COMPLETION_CANCEL) {
          parent.proceed(resumeIndex, _yieldables.YIELDABLE_CANCEL, null);
        }
      });
      let performType = this.getPerformType();
      if (performType === PERFORM_TYPE_UNLINKED) {
        return;
      }
      return () => {
        this.detectSelfCancelLoop(performType, parent);
        this.cancel(new _cancelation.CancelRequest(_cancelation.CANCEL_KIND_PARENT_CANCEL));
      };
    }
    getPerformType() {
      return this.taskInstance.performType || PERFORM_TYPE_DEFAULT;
    }
    detectSelfCancelLoop(performType, parent) {
      if (performType !== PERFORM_TYPE_DEFAULT) {
        return;
      }
      let parentCancelRequest = parent.executor && parent.executor.cancelRequest;

      // Detect that the parent was cancelled by a lifespan ending and
      // that the child is still running and not cancelled.
      if (parentCancelRequest && parentCancelRequest.kind === _cancelation.CANCEL_KIND_LIFESPAN_END && !this.cancelRequest && !this.state.isFinished) {
        this.taskInstance.selfCancelLoopWarning(parent);
      }
    }
  }
  _exports.TaskInstanceExecutor = TaskInstanceExecutor;
});
;define("ember-concurrency/-private/external/task-instance/initial-state", ["exports", "ember-concurrency/-private/external/task-instance/completion-states"], function (_exports, _completionStates) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.INITIAL_STATE = void 0;
  const INITIAL_STATE = _exports.INITIAL_STATE = {
    completionState: _completionStates.COMPLETION_PENDING,
    /**
     * If this TaskInstance runs to completion by returning a property
     * other than a rejecting promise, this property will be set
     * with that value.
     *
     * @memberof TaskInstance
     * @instance
     * @readOnly
     */
    value: null,
    /**
     * If this TaskInstance is canceled or throws an error (or yields
     * a promise that rejects), this property will be set with that error.
     * Otherwise, it is null.
     *
     * @memberof TaskInstance
     * @instance
     * @readOnly
     */
    error: null,
    /**
     * True if the task instance is fulfilled.
     *
     * @memberof TaskInstance
     * @instance
     * @readOnly
     */
    isSuccessful: false,
    /**
     * True if the task instance resolves to a rejection.
     *
     * @memberof TaskInstance
     * @instance
     * @readOnly
     */
    isError: false,
    /**
     * True if the task instance is canceled
     *
     * @memberof TaskInstance
     * @instance
     * @readOnly
     */
    isCanceled: false,
    /**
     * True if the task instance has started, else false.
     *
     * @memberof TaskInstance
     * @instance
     * @readOnly
     */
    hasStarted: false,
    /**
     * True if the task has run to completion.
     *
     * @memberof TaskInstance
     * @instance
     * @readOnly
     */
    isFinished: false
  };
});
;define("ember-concurrency/-private/external/task/default-state", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.DEFAULT_STATE = void 0;
  const DEFAULT_STATE = _exports.DEFAULT_STATE = {
    last: null,
    lastRunning: null,
    lastPerformed: null,
    lastSuccessful: null,
    lastComplete: null,
    lastErrored: null,
    lastCanceled: null,
    lastIncomplete: null,
    performCount: 0
  };
  Object.freeze(DEFAULT_STATE);
});
;define("ember-concurrency/-private/external/task/task-group", ["exports", "ember-concurrency/-private/external/task/taskable"], function (_exports, _taskable) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.TaskGroup = void 0;
  class TaskGroup extends _taskable.Taskable {}
  _exports.TaskGroup = TaskGroup;
});
;define("ember-concurrency/-private/external/task/task", ["exports", "ember-concurrency/-private/external/task/taskable", "ember-concurrency/-private/external/task-instance/executor"], function (_exports, _taskable, _executor) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Task = void 0;
  class TaskLinkProxy {
    constructor(task, performType, linkedObject) {
      this.task = task;
      this.performType = performType;
      this.linkedObject = linkedObject;
    }
    perform(...args) {
      return this.task._performShared(args, this.performType, this.linkedObject);
    }
  }
  class Task extends _taskable.Taskable {
    constructor(options) {
      super(options);
      this.generatorFactory = options.generatorFactory;
      this.perform = this._perform.bind(this);
    }
    linked() {
      let linkedObject = (0, _executor.getRunningInstance)();
      if (!linkedObject) {
        throw new Error(`You can only call .linked() from within a task.`);
      }
      return new TaskLinkProxy(this, _executor.PERFORM_TYPE_LINKED, linkedObject);
    }
    unlinked() {
      return new TaskLinkProxy(this, _executor.PERFORM_TYPE_UNLINKED, null);
    }
    toString() {
      return `<Task:${this.name}>`;
    }
    _clone() {
      return new Task({
        context: this.context,
        debug: this.debug,
        env: this.env,
        generatorFactory: this.generatorFactory,
        group: this.group,
        hasEnabledEvents: this.hasEnabledEvents,
        name: this.name,
        onStateCallback: this.onStateCallback,
        scheduler: this.scheduler
      });
    }
    _curry(...args) {
      let task = this._clone();
      task._curryArgs = [...(this._curryArgs || []), ...args];
      return task;
    }
    _perform(...args) {
      return this._performShared(args, _executor.PERFORM_TYPE_DEFAULT, null);
    }
    _performShared(args, performType, linkedObject) {
      let fullArgs = this._curryArgs ? [...this._curryArgs, ...args] : args;
      let taskInstance = this._taskInstanceFactory(fullArgs, performType, linkedObject);
      if (performType === _executor.PERFORM_TYPE_LINKED) {
        linkedObject._expectsLinkedYield = true;
      }
      if (!this._isAlive) {
        // a task linked to a dead lifetime should immediately cancel.
        taskInstance.cancel();
      }
      this.scheduler.perform(taskInstance);
      return taskInstance;
    }

    // eslint-disable-next-line no-unused-vars
    _taskInstanceOptions(args, performType, _linkedObject) {
      let generatorFactory = () => this.generatorFactory(args);
      let taskInstanceOptions = {
        task: this,
        args,
        executor: new _executor.TaskInstanceExecutor({
          generatorFactory,
          env: this.env,
          debug: this.debug
        }),
        performType,
        hasEnabledEvents: this.hasEnabledEvents
      };
      return taskInstanceOptions;
    }
  }
  _exports.Task = Task;
});
;define("ember-concurrency/-private/external/task/taskable", ["exports", "ember-concurrency/-private/external/task/default-state", "ember-concurrency/-private/external/task-instance/cancelation"], function (_exports, _defaultState, _cancelation) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Taskable = void 0;
  let guidId = 0;
  function makeGuid() {
    return `ec_${guidId++}`;
  }
  class Taskable {
    constructor(options) {
      this.context = options.context;
      this.debug = options.debug || false;
      this.enabledModifiers = options.enabledModifiers;
      this.env = options.env;
      this.group = options.group;
      this.hasEnabledEvents = options.hasEnabledEvents;
      this.modifierOptions = options.modifierOptions;
      this.name = options.name;
      this.onStateCallback = options.onStateCallback;
      this.scheduler = options.scheduler;
      this.guid = makeGuid();
      this.guids = {};
      this.guids[this.guid] = true;
      if (this.group) {
        Object.assign(this.guids, this.group.guids);
      }
    }
    cancelAll(options) {
      let {
        reason,
        cancelRequestKind,
        resetState
      } = options || {};
      reason = reason || '.cancelAll() was explicitly called on the Task';
      let cancelRequest = new _cancelation.CancelRequest(cancelRequestKind || _cancelation.CANCEL_KIND_EXPLICIT, reason);
      return this.scheduler.cancelAll(this.guid, cancelRequest).then(() => {
        if (resetState) {
          this._resetState();
        }
      });
    }
    get _isAlive() {
      return true;
    }
    _resetState() {
      this.setState(_defaultState.DEFAULT_STATE);
    }

    // override
    setState() {}
  }
  _exports.Taskable = Taskable;
  Object.assign(Taskable.prototype, _defaultState.DEFAULT_STATE);
  Object.assign(Taskable.prototype, {
    numRunning: 0,
    numQueued: 0,
    isRunning: false,
    isQueued: false,
    isIdle: true,
    state: 'idle'
  });
});
;define("ember-concurrency/-private/external/yieldables", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Yieldable = _exports.YIELDABLE_THROW = _exports.YIELDABLE_RETURN = _exports.YIELDABLE_CONTINUE = _exports.YIELDABLE_CANCEL = void 0;
  _exports.animationFrame = animationFrame;
  _exports.forever = _exports.cancelableSymbol = void 0;
  _exports.rawTimeout = rawTimeout;
  _exports.yieldableSymbol = void 0;
  const cancelableSymbol = _exports.cancelableSymbol = '__ec_cancel__';
  const yieldableSymbol = _exports.yieldableSymbol = '__ec_yieldable__';
  const YIELDABLE_CONTINUE = _exports.YIELDABLE_CONTINUE = 'next';
  const YIELDABLE_THROW = _exports.YIELDABLE_THROW = 'throw';
  const YIELDABLE_RETURN = _exports.YIELDABLE_RETURN = 'return';
  const YIELDABLE_CANCEL = _exports.YIELDABLE_CANCEL = 'cancel';

  /**
   * @class YieldableState
   * @hideconstructor
   */
  class YieldableState {
    constructor(taskInstance, resumeIndex) {
      this._taskInstance = taskInstance;
      this._resumeIndex = resumeIndex;
    }

    /**
     * Return yielded TaskInstance. Useful for introspection on instance state.
     * @method getTaskInstance
     * @memberof YieldableState
     * @public
     * @instance
     */
    getTaskInstance() {
      return this._taskInstance;
    }

    /**
     * Cancel the yielded TaskInstance.
     * @method cancel
     * @memberof YieldableState
     * @public
     * @instance
     */
    cancel() {
      let taskInstance = this._taskInstance;
      taskInstance.proceed.call(taskInstance, this._resumeIndex, YIELDABLE_CANCEL);
    }

    /**
     * Cause the TaskInstance to return from its yield with an optional value,
     * and continue executing.
     * @method next
     * @memberof YieldableState
     * @param value
     * @public
     * @instance
     */
    next(value) {
      let taskInstance = this._taskInstance;
      taskInstance.proceed.call(taskInstance, this._resumeIndex, YIELDABLE_CONTINUE, value);
    }

    /**
     * Short-circuit TaskInstance execution and have it return with an optional
     * value.
     * @method return
     * @memberof YieldableState
     * @param value
     * @public
     * @instance
     */
    return(value) {
      let taskInstance = this._taskInstance;
      taskInstance.proceed.call(taskInstance, this._resumeIndex, YIELDABLE_RETURN, value);
    }

    /**
     * Raise a given error within the given task instance and halt execution
     * @method throw
     * @memberof YieldableState
     * @param error
     * @public
     * @instance
     */
    throw(error) {
      let taskInstance = this._taskInstance;
      taskInstance.proceed.call(taskInstance, this._resumeIndex, YIELDABLE_THROW, error);
    }
  }

  /**
   * Yieldables are a primitive for building safe, cancelation-aware ways to
   * instrument and introspect the runtime of a task. Many Yieldables are built-in
   * to ember-concurrency today, such as `timeout`, `animationFrame`, and
   * `rawTimeout`.
   *
   * For example, if I wanted to implement a yieldable for `requestIdleCallback`,
   * I could do the following:
   *
   * ```javascript
   * import Component from '@glimmer/component';
   * import { task, Yieldable } from 'ember-concurrency';
   *
   * class IdleCallbackYieldable extends Yieldable {
   *   onYield(state) {
   *     let callbackId = requestIdleCallback(() => state.next());
   *
   *     return () => cancelIdleCallback(callbackId);
   *   }
   * }
   *
   * const idleCallback = () => new IdleCallbackYieldable();
   *
   * class MyComponent extends Component {
   *   &#64;task *backgroundTask() {
   *     while (1) {
   *       yield idleCallback();
   *
   *       const data = this.complicatedNumberCrunching();
   *       yield this.sendData(data);
   *     }
   *   }
   * }
   * ```
   *
   * In general, `Yieldable` instances **should** be reusable across calls, and thus
   * care should be taken to ensure that teardown is provided and state not
   * intended to be shared across calls stay inside `onYield`.
   *
   * `Yieldable` also provides automatic Promise-casting.
   *
   * <style>
   *   .ignore-this--this-is-here-to-hide-constructor,
   *   #Yieldable { display: none }
   * </style>
   *
   * @class Yieldable
   */
  class Yieldable {
    constructor() {
      this[yieldableSymbol] = this[yieldableSymbol].bind(this);
    }

    /**
     * Defines what happens when the task encounters `yield myYieldable` and returns
     * a disposer function that handles any cleanup.
     *
     * The state parameter is provided by the runtime, and provides operations for
     * interacting with the yielding task instance and advancing, returning,
     * throwing, or canceling its execution.
     *
     * @method onYield
     * @memberof Yieldable
     * @param {YieldableState} state
     * @instance
     * @public
     */
    onYield() {}
    _deferable() {
      let def = {
        resolve: undefined,
        reject: undefined
      };
      def.promise = new Promise((resolve, reject) => {
        def.resolve = resolve;
        def.reject = reject;
      });
      return def;
    }
    _toPromise() {
      let def = this._deferable();
      let thinInstance = {
        proceed(_index, resumeType, value) {
          if (resumeType == YIELDABLE_CONTINUE || resumeType == YIELDABLE_RETURN) {
            def.resolve(value);
          } else {
            def.reject(value);
          }
        }
      };
      let maybeDisposer = this[yieldableSymbol](thinInstance, 0);
      def.promise[cancelableSymbol] = maybeDisposer;
      return def.promise;
    }

    /**
     * Returns a promise that resolves with the value yielded back to or returned
     * to the yielded task, or rejects with either the exception thrown from the
     * Yieldable, or an error with a `.name` property with value `"TaskCancelation"`.
     *
     * @method then
     * @memberof Yieldable
     * @instance
     * @return {Promise}
     */
    then(...args) {
      return this._toPromise().then(...args);
    }

    /**
     * @method catch
     * @memberof Yieldable
     * @instance
     * @return {Promise}
     */
    catch(...args) {
      return this._toPromise().catch(...args);
    }

    /**
     * @method finally
     * @memberof Yieldable
     * @instance
     * @return {Promise}
     */
    finally(...args) {
      return this._toPromise().finally(...args);
    }
    [yieldableSymbol](taskInstance, resumeIndex) {
      let state = new YieldableState(taskInstance, resumeIndex);
      return this.onYield(state);
    }
  }
  _exports.Yieldable = Yieldable;
  class AnimationFrameYieldable extends Yieldable {
    onYield(state) {
      let timerId = requestAnimationFrame(() => state.next());
      return () => cancelAnimationFrame(timerId);
    }
  }
  class ForeverYieldable extends Yieldable {
    onYield() {}
  }
  class RawTimeoutYieldable extends Yieldable {
    constructor(ms) {
      super();
      this.ms = ms;
    }
    onYield(state) {
      let timerId = setTimeout(() => state.next(), this.ms);
      return () => clearTimeout(timerId);
    }
  }

  /**
   * Yielding `animationFrame()` will pause a task until after the next animation
   * frame using the native `requestAnimationFrame()` browser API.
   *
   * The task below, when performed, will print the time since the last loop run
   * for every animation frame.
   *
   * ```js
   * export default class MyComponent extends Component {
   *   &#64;task *myTask() {
   *     let lastNow = performance.now();
   *     while (true) {
   *       yield animationFrame();
   *
   *       let now = performance.now();
   *       let dt = now - lastNow;
   *       lastNow = now;
   *
   *       console.log(dt);
   *     }
   *   }
   * }
   * ```
   */
  function animationFrame() {
    return new AnimationFrameYieldable();
  }

  /**
   *
   * Yielding `forever` will pause a task indefinitely until
   * it is cancelled (i.e. via host object destruction, the restartable modifier,
   * or manual cancellation).
   *
   * This is often useful in cases involving animation: if you're
   * using Liquid Fire, or some other animation scheme, sometimes you'll
   * notice buttons visibly reverting to their inactive states during
   * a route transition. By yielding `forever` in a Component task that drives a
   * button's active state, you can keep a task indefinitely running
   * until the animation runs to completion.
   *
   * NOTE: Liquid Fire also includes a useful `waitUntilIdle()` method
   * on the `liquid-fire-transitions` service that you can use in a lot
   * of these cases, but it won't cover cases of asynchrony that are
   * unrelated to animation, in which case `forever` might be better suited
   * to your needs.
   *
   * ```js
   * import { task, forever } from 'ember-concurrency';
   * export default class MyComponent extends Component {
   *   &#64;service myService;
   *   &#64;task *myTask() {
   *     yield this.myService.doSomethingThatCausesATransition();
   *     yield forever;
   *   }
   * }
   * ```
   */
  const forever = _exports.forever = new ForeverYieldable();

  /**
   *
   * Yielding `rawTimeout(ms)` will pause a task for the duration
   * of time passed in, in milliseconds.
   *
   * The timeout will use the native `setTimeout()` browser API,
   * instead of the Ember runloop, which means that test helpers
   * will *not* wait for it to complete.
   *
   * The task below, when performed, will print a message to the
   * console every second.
   *
   * ```js
   * export default class MyComponent extends Component {
   *   &#64;task *myTask() {
   *     while (true) {
   *       console.log("Hello!");
   *       yield rawTimeout(1000);
   *     }
   *   }
   * }
   * ```
   *
   * @param {number} ms - the amount of time to sleep before resuming
   *   the task, in milliseconds
   */
  function rawTimeout(ms) {
    return new RawTimeoutYieldable(ms);
  }
});
;define("ember-concurrency/-private/helpers", ["exports", "@ember/object", "@ember/debug"], function (_exports, _object, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.taskHelperClosure = taskHelperClosure;
  function taskHelperClosure(helperName, taskMethod, _args, hash) {
    let task = _args[0];
    let outerArgs = _args.slice(1);
    return function (...innerArgs) {
      if (!task || typeof task[taskMethod] !== 'function') {
        (true && !(false) && (0, _debug.assert)(`The first argument passed to the \`${helperName}\` helper should be a Task object (without quotes); you passed ${task}`, false));
        return;
      }
      if (hash && hash.value) {
        let event = innerArgs.pop();
        innerArgs.push((0, _object.get)(event, hash.value));
      }
      return task[taskMethod](...outerArgs, ...innerArgs);
    };
  }
});
;define("ember-concurrency/-private/scheduler/ember-scheduler", ["exports", "ember-concurrency/-private/external/scheduler/scheduler", "@ember/runloop"], function (_exports, _scheduler, _runloop) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  class EmberScheduler extends _scheduler.default {
    scheduleRefresh() {
      (0, _runloop.once)(this, this.refresh);
    }
  }
  var _default = _exports.default = EmberScheduler;
});
;define("ember-concurrency/-private/task-decorators", ["exports", "@ember/object", "ember-concurrency/-private/external/task-decorators", "ember-concurrency/-private/task-factory", "ember-concurrency/-private/utils"], function (_exports, _object, _taskDecorators, _taskFactory, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.taskGroup = _exports.task = _exports.restartableTaskGroup = _exports.restartableTask = _exports.lastValue = _exports.keepLatestTaskGroup = _exports.keepLatestTask = _exports.enqueueTaskGroup = _exports.enqueueTask = _exports.dropTaskGroup = _exports.dropTask = void 0;
  const computedLastValue = (0, _taskDecorators.decoratorWithParams)((target, key, descriptor, [taskName] = []) => {
    const {
      initializer
    } = descriptor;
    delete descriptor.initializer;
    let cp = (0, _object.computed)(`${taskName}.lastSuccessful`, function () {
      let lastInstance = (0, _object.get)(this, `${taskName}.lastSuccessful`);
      if (lastInstance) {
        // eslint-disable-next-line ember/no-get
        return (0, _object.get)(lastInstance, 'value');
      }
      if (initializer) {
        return initializer.call(this);
      }
      return undefined;
    });
    return cp(target, key, descriptor);
  });
  const lastValue = _exports.lastValue = _utils.USE_TRACKED ? _taskDecorators.lastValue : computedLastValue;

  /**
   * A Task is a cancelable, restartable, asynchronous operation that
   * is driven by a generator function. Tasks are automatically canceled
   * when the object they live on is destroyed (e.g. a Component
   * is unrendered).
   *
   * Turns the decorated generator function into a task.
   *
   * Optionally takes a hash of options that will be applied as modifiers to the
   * task. For instance `maxConcurrency`, `on`, `group` or `keepLatest`.
   *
   * By default, tasks have no concurrency constraints
   * (multiple instances of a task can be running at the same time)
   * but much of a power of tasks lies in proper usage of Task Modifiers
   * that you can apply to a task.
   *
   * You can also define an
   * <a href="/docs/advanced/encapsulated-task">Encapsulated Task</a>
   * by decorating an object that defines a `perform` generator
   * method.
   *
   * ```js
   * import Component from '@ember/component';
   * import { task } from 'ember-concurrency';
   *
   * class MyComponent extends Component {
   *   &#64;task
   *   *plainTask() {}
   *
   *   &#64;task({ maxConcurrency: 5, keepLatest: true, cancelOn: 'click' })
   *   *taskWithModifiers() {}
   * }
   * ```
   *
   * @function
   * @param {object?} [options={}] Task modifier options
   * @param {string|string[]} [options.cancelOn] Events to cancel task on. Applies only to `&#64;ember/component`
   * @param {boolean} [options.enqueue] Sets `enqueue` modifier on task if `true`
   * @param {boolean} [options.evented] Enables [task lifecycle events](/docs/advanced/lifecycle-events) for this Task, if `true`
   * @param {boolean} [options.debug] Enables task debugging if `true`
   * @param {boolean} [options.drop] Sets `drop` modifier on task if `true`
   * @param {string} [options.group] Associates task with the group specified
   * @param {boolean} [options.keepLatest] Sets `keepLatest` modifier on task if `true`
   * @param {number} [options.maxConcurrency] Sets the maximum number of running task instances for the task
   * @param {string|string[]} [options.observes] Properties to watch and cause task to be performed when they change
   * @param {string|string[]} [options.on] Events to perform task on. Applies only to `&#64;ember/component`
   * @param {function?} [options.onState] Callback to use for state tracking. May be set to `null` to disable state tracking.
   * @param {boolean} [options.restartable] Sets `restartable` modifier on task if `true`
   * @return {Task}
   */
  const task = _exports.task = (0, _taskDecorators.createTaskDecorator)({}, _taskFactory.TaskFactory);

  /**
   * Turns the decorated generator function into a task and applies the
   * `drop` modifier.
   *
   * Optionally takes a hash of options that will be applied as modifiers to the
   * task. For instance `maxConcurrency`, `on`, or `group`.
   *
   * You can also define an
   * <a href="/docs/advanced/encapsulated-task">Encapsulated Task</a>
   * by decorating an object that defines a `perform` generator
   * method.
   *
   * ```js
   * import Component from '@ember/component';
   * import { task, dropTask } from 'ember-concurrency';
   *
   * class MyComponent extends Component {
   *   &#64;task
   *   *plainTask() {}
   *
   *   &#64;dropTask({ cancelOn: 'click' })
   *   *myDropTask() {}
   * }
   * ```
   *
   * @function
   * @param {object?} [options={}] Task modifier options. See {@link task} for list.
   * @return {Task}
   */
  const dropTask = _exports.dropTask = (0, _taskDecorators.createTaskDecorator)({
    drop: true
  }, _taskFactory.TaskFactory);

  /**
   * Turns the decorated generator function into a task and applies the
   * `enqueue` modifier.
   *
   * Optionally takes a hash of options that will be applied as modifiers to the
   * task. For instance `maxConcurrency`, `on`, or `group`.
   *
   * You can also define an
   * <a href="/docs/advanced/encapsulated-task">Encapsulated Task</a>
   * by decorating an object that defines a `perform` generator
   * method.
   *
   * ```js
   * import Component from '@ember/component';
   * import { task, enqueueTask } from 'ember-concurrency';
   *
   * class MyComponent extends Component {
   *   &#64;task
   *   *plainTask() {}
   *
   *   &#64;enqueueTask({ cancelOn: 'click' })
   *   *myEnqueueTask() {}
   * }
   * ```
   *
   * @function
   * @param {object?} [options={}] Task modifier options. See {@link task} for list.
   * @return {Task}
   */
  const enqueueTask = _exports.enqueueTask = (0, _taskDecorators.createTaskDecorator)({
    enqueue: true
  }, _taskFactory.TaskFactory);

  /**
   * Turns the decorated generator function into a task and applies the
   * `keepLatest` modifier.
   *
   * Optionally takes a hash of options that will be applied as modifiers to the
   * task. For instance `maxConcurrency`, `on`, or `group`.
   *
   * You can also define an
   * <a href="/docs/advanced/encapsulated-task">Encapsulated Task</a>
   * by decorating an object that defines a `perform` generator
   * method.
   *
   * ```js
   * import Component from '@ember/component';
   * import { task, keepLatestTask } from 'ember-concurrency';
   *
   * class MyComponent extends Component {
   *   &#64;task
   *   *plainTask() {}
   *
   *   &#64;keepLatestTask({ cancelOn: 'click' })
   *   *myKeepLatestTask() {}
   * }
   * ```
   *
   * @function
   * @param {object?} [options={}] Task modifier options. See {@link task} for list.
   * @return {Task}
   */
  const keepLatestTask = _exports.keepLatestTask = (0, _taskDecorators.createTaskDecorator)({
    keepLatest: true
  }, _taskFactory.TaskFactory);

  /**
   * Turns the decorated generator function into a task and applies the
   * `restartable` modifier.
   *
   * Optionally takes a hash of options that will be applied as modifiers to the
   * task. For instance `maxConcurrency`, `on`, or `group`.
   *
   * You can also define an
   * <a href="/docs/advanced/encapsulated-task">Encapsulated Task</a>
   * by decorating an object that defines a `perform` generator
   * method.
   *
   * ```js
   * import Component from '@ember/component';
   * import { task, restartableTask } from 'ember-concurrency';
   *
   * class MyComponent extends Component {
   *   &#64;task
   *   *plainTask() {}
   *
   *   &#64;restartableTask({ cancelOn: 'click' })
   *   *myRestartableTask() {}
   * }
   * ```
   *
   * @function
   * @param {object?} [options={}] Task modifier options. See {@link task} for list.
   * @return {Task}
   */
  const restartableTask = _exports.restartableTask = (0, _taskDecorators.createTaskDecorator)({
    restartable: true
  }, _taskFactory.TaskFactory);

  /**
   * "Task Groups" provide a means for applying
   * task modifiers to groups of tasks. Once a {@linkcode Task} is declared
   * as part of a group task, modifiers like `drop` or `restartable`
   * will no longer affect the individual `Task`. Instead those
   * modifiers can be applied to the entire group.
   *
   * Turns the decorated property into a task group.
   *
   * Optionally takes a hash of options that will be applied as modifiers to the
   * task group. For instance `maxConcurrency` or `keepLatest`.
   *
   * ```js
   * import Component from '@glimmer/component';
   * import { task, taskGroup } from 'ember-concurrency';
   *
   * class MyComponent extends Component {
   *   &#64;taskGroup({ maxConcurrency: 5 }) chores;
   *
   *   &#64;task({ group: 'chores' })
   *   *mowLawn() {}
   *
   *   &#64;task({ group: 'chores' })
   *   *doDishes() {}
   * }
   * ```
   *
   * @function
   * @param {object?} [options={}] Task group modifier options. See {@link task} for list.
   * @return {TaskGroup}
   */
  const taskGroup = _exports.taskGroup = (0, _taskDecorators.createTaskGroupDecorator)({}, _taskFactory.TaskFactory);

  /**
   * Turns the decorated property into a task group and applies the
   * `drop` modifier.
   *
   * Optionally takes a hash of further options that will be applied as modifiers
   * to the task group.
   *
   * @function
   * @param {object?} [options={}] Task group modifier options. See {@link task} for list.
   * @return {TaskGroup}
   */
  const dropTaskGroup = _exports.dropTaskGroup = (0, _taskDecorators.createTaskGroupDecorator)({
    drop: true
  }, _taskFactory.TaskFactory);

  /**
   * Turns the decorated property into a task group and applies the
   * `enqueue` modifier.
   *
   * Optionally takes a hash of further options that will be applied as modifiers
   * to the task group.
   *
   * @function
   * @param {object?} [options={}] Task group modifier options. See {@link task} for list.
   * @return {TaskGroup}
   */
  const enqueueTaskGroup = _exports.enqueueTaskGroup = (0, _taskDecorators.createTaskGroupDecorator)({
    enqueue: true
  }, _taskFactory.TaskFactory);

  /**
   * Turns the decorated property into a task group and applies the
   * `keepLatest` modifier.
   *
   * Optionally takes a hash of further options that will be applied as modifiers
   * to the task group.
   *
   * @function
   * @param {object?} [options={}] Task group modifier options. See {@link task} for list.
   * @return {TaskGroup}
   */
  const keepLatestTaskGroup = _exports.keepLatestTaskGroup = (0, _taskDecorators.createTaskGroupDecorator)({
    keepLatest: true
  }, _taskFactory.TaskFactory);

  /**
   * Turns the decorated property into a task group and applies the
   * `restartable` modifier.
   *
   * Optionally takes a hash of further options that will be applied as modifiers
   * to the task group.
   *
   * @function
   * @param {object?} [options={}] Task group modifier options. See {@link task} for list.
   * @return {TaskGroup}
   */
  const restartableTaskGroup = _exports.restartableTaskGroup = (0, _taskDecorators.createTaskGroupDecorator)({
    restartable: true
  }, _taskFactory.TaskFactory);
});
;define("ember-concurrency/-private/task-factory", ["exports", "@ember/debug", "@ember/object", "@ember/object/events", "@ember/object/observers", "@ember/runloop", "ember-concurrency/-private/external/task-factory", "ember-concurrency/-private/task", "ember-concurrency/-private/task-properties", "ember-concurrency/-private/task-group", "ember-concurrency/-private/scheduler/ember-scheduler", "ember-concurrency/-private/ember-environment"], function (_exports, _debug, _object, _events, _observers, _runloop, _taskFactory, _task, _taskProperties, _taskGroup, _emberScheduler, _emberEnvironment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.TaskFactory = void 0;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  let handlerCounter = 0;
  function registerOnPrototype(addListenerOrObserver, proto, names, taskName, taskMethod, once) {
    if (names && names.length > 0) {
      for (let i = 0; i < names.length; ++i) {
        let name = names[i];
        let handlerName = `__ember_concurrency_handler_${handlerCounter++}`;
        proto[handlerName] = makeTaskCallback(taskName, taskMethod, once);
        addListenerOrObserver(proto, name, null, handlerName);
      }
    }
  }
  function makeTaskCallback(taskName, method, once) {
    return function () {
      let task = (0, _object.get)(this, taskName);
      if (once) {
        (0, _runloop.scheduleOnce)('actions', task, method, ...arguments);
      } else {
        task[method].apply(task, arguments);
      }
    };
  }
  const ensureArray = possibleArr => Array.isArray(possibleArr) ? possibleArr : [possibleArr];
  (0, _taskFactory.registerModifier)('cancelOn', (factory, eventNames) => factory.addCancelEvents(...ensureArray(eventNames)));
  (0, _taskFactory.registerModifier)('observes', (factory, propertyPaths) => factory.addObserverKeys(...ensureArray(propertyPaths)));
  (0, _taskFactory.registerModifier)('on', (factory, eventNames) => factory.addPerformEvents(...ensureArray(eventNames)));
  class TaskFactory extends _taskFactory.TaskFactory {
    constructor(...args) {
      super(...args);
      _defineProperty(this, "env", _emberEnvironment.EMBER_ENVIRONMENT);
    }
    createTask(context) {
      (true && !(this.taskDefinition) && (0, _debug.assert)(`Cannot create task if a task definition is not provided as generator function or encapsulated task.`, this.taskDefinition));
      let options = this.getTaskOptions(context);
      if (typeof this.taskDefinition === 'object') {
        return new _task.EncapsulatedTask(Object.assign({
          taskObj: this.taskDefinition
        }, options));
      } else {
        return new _task.Task(Object.assign({
          generatorFactory: args => this.taskDefinition.apply(context, args)
        }, options));
      }
    }
    createTaskGroup(context) {
      (true && !(!this.taskDefinition) && (0, _debug.assert)(`A task definition is not expected for a task group.`, !this.taskDefinition));
      let options = this.getTaskOptions(context);
      return new _taskGroup.TaskGroup(options);
    }
    addCancelEvents(...cancelEventNames) {
      this._cancelEventNames = this._cancelEventNames || [];
      this._cancelEventNames.push(...cancelEventNames);
      return this;
    }
    addObserverKeys(...keys) {
      this._observes = this._observes || [];
      this._observes.push(...keys);
      return this;
    }
    addPerformEvents(...eventNames) {
      this._eventNames = this._eventNames || [];
      this._eventNames.push(...eventNames);
      return this;
    }
    getModifier(name) {
      let modifier = super.getModifier(name);
      if (!modifier && typeof _taskProperties.TaskProperty.prototype[name] === 'function') {
        // Shim for compatibility with user-defined TaskProperty prototype
        // extensions. To be removed when replaced with proper public API.
        modifier = _taskProperties.TaskProperty.prototype[name].bind(this);
      }
      (true && !(modifier) && (0, _debug.assert)(`Task option '${name}' is not recognized as a supported option.`, modifier));
      return modifier;
    }
    getScheduler(schedulerPolicy, stateTrackingEnabled) {
      return new _emberScheduler.default(schedulerPolicy, stateTrackingEnabled);
    }
    _setupEmberKVO(proto) {
      // TODO: Does this make sense in a post-Ember object world?

      registerOnPrototype(_events.addListener, proto, this._eventNames, this.name, 'perform', false);
      registerOnPrototype(_events.addListener, proto, this._cancelEventNames, this.name, 'cancelAll', false);
      registerOnPrototype(_observers.addObserver, proto, this._observes, this.name, 'perform', true);
    }

    // Provided for compatibility with ember-concurrency TaskProperty extension
    // methods
    get taskFn() {
      return this.taskDefinition;
    }
    set taskFn(fn) {
      this.setTaskDefinition(fn);
    }
  }
  _exports.TaskFactory = TaskFactory;
});
;define("ember-concurrency/-private/task-group", ["exports", "ember-concurrency/-private/external/task/task-group", "ember-concurrency/-private/taskable-mixin", "ember-concurrency/-private/tracked-state"], function (_exports, _taskGroup, _taskableMixin, _trackedState) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.TaskGroup = void 0;
  /**
   * "Task Groups" provide a means for applying
   * task modifiers to groups of tasks. Once a {@linkcode Task} is declared
   * as part of a group task, modifiers like `drop` or `restartable`
   * will no longer affect the individual `Task`. Instead those
   * modifiers can be applied to the entire group.
   *
   * Turns the decorated property into a task group.
   *
   * Optionally takes a hash of options that will be applied as modifiers to the
   * task group. For instance `maxConcurrency` or `keepLatest`.
   *
   * ```js
   * import Component from '@glimmer/component';
   * import { task, taskGroup } from 'ember-concurrency';
   *
   * class MyComponent extends Component {
   *   &#64;taskGroup({ maxConcurrency: 5 }) chores;
   *
   *   &#64;task({ group: 'chores' })
   *   *mowLawn() {}
   *
   *   &#64;task({ group: 'chores' })
   *   *doDishes() {}
   * }
   * ```
   *
   * <style>
   *  .ignore-this--this-is-here-to-hide-constructor,
   *  #TaskGroup { display: none }
   * </style>
   *
   * @class TaskGroup
   */
  class TaskGroup extends _taskGroup.TaskGroup {
    /**
     * Cancels all running or queued `TaskInstance`s for this task group.
     * If you're trying to cancel a specific TaskInstance (rather
     * than all of the instances running under this task group) call
     * `.cancel()` on the specific TaskInstance.
     *
     * @method cancelAll
     * @memberof TaskGroup
     * @param options.reason A descriptive reason the task group was
     *   cancelled. Defaults to `".cancelAll() was explicitly called
     *   on the Task"`.
     * @param options.resetState If true, will clear the task group state
     *   (`last*` and `performCount` properties will be set to initial
     *   values). Defaults to false.
     * @instance
     * @async
     *
     */
    /**
     * `true` if any current task instances are running.
     *
     * @memberof TaskGroup
     * @member {boolean} isRunning
     * @instance
     * @readOnly
     */
    /**
     * `true` if any future task instances are queued.
     *
     * @memberof TaskGroup
     * @member {boolean} isQueued
     * @instance
     * @readOnly
     */
    /**
     * `true` if the task is not in the running or queued state.
     *
     * @memberof TaskGroup
     * @member {boolean} isIdle
     * @instance
     * @readOnly
     */
    /**
     * The current state of the task: `"running"`, `"queued"` or `"idle"`.
     *
     * @memberof TaskGroup
     * @member {string} state
     * @instance
     * @readOnly
     */
    /**
     * The most recently started task instance.
     *
     * @memberof TaskGroup
     * @member {TaskInstance} last
     * @instance
     * @readOnly
     */
    /**
     * The most recent task instance that is currently running.
     *
     * @memberof TaskGroup
     * @member {TaskInstance} lastRunning
     * @instance
     * @readOnly
     */
    /**
     * The most recently performed task instance.
     *
     * @memberof TaskGroup
     * @member {TaskInstance} lastPerformed
     * @instance
     * @readOnly
     */
    /**
     * The most recent task instance that succeeded.
     *
     * @memberof TaskGroup
     * @member {TaskInstance} lastSuccessful
     * @instance
     * @readOnly
     */
    /**
     * The most recently completed task instance.
     *
     * @memberof TaskGroup
     * @member {TaskInstance} lastComplete
     * @instance
     * @readOnly
     */
    /**
     * The most recent task instance that errored.
     *
     * @memberof TaskGroup
     * @member {TaskInstance} lastErrored
     * @instance
     * @readOnly
     */
    /**
     * The most recently canceled task instance.
     *
     * @memberof TaskGroup
     * @member {TaskInstance} lastCanceled
     * @instance
     * @readOnly
     */
    /**
     * The most recent task instance that is incomplete.
     *
     * @memberof TaskGroup
     * @member {TaskInstance} lastIncomplete
     * @instance
     * @readOnly
     */
    /**
     * The number of times this task has been performed.
     *
     * @memberof TaskGroup
     * @member {number} performCount
     * @instance
     * @readOnly
     */
  }
  _exports.TaskGroup = TaskGroup;
  if (_trackedState.TRACKED_INITIAL_TASK_STATE) {
    Object.defineProperties(TaskGroup.prototype, _trackedState.TRACKED_INITIAL_TASK_STATE);
  }
  Object.assign(TaskGroup.prototype, _taskableMixin.TASKABLE_MIXIN);
});
;define("ember-concurrency/-private/task-instance", ["exports", "ember-concurrency/-private/external/task-instance/base", "ember-concurrency/-private/tracked-state", "ember-concurrency/-private/utils"], function (_exports, _base, _trackedState, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.TaskInstance = void 0;
  /**
    A `TaskInstance` represent a single execution of a
    {@linkcode Task}. Every call to {@linkcode Task#perform} returns
    a `TaskInstance`.
  
    `TaskInstance`s are cancelable, either explicitly
    via {@linkcode TaskInstance#cancel} or {@linkcode Task#cancelAll},
    or automatically due to the host object being destroyed, or
    because concurrency policy enforced by a
    {@linkcode TaskProperty Task Modifier} canceled the task instance.
  
    <style>
      .ignore-this--this-is-here-to-hide-constructor,
      #TaskInstance { display: none }
    </style>
  
    @class TaskInstance
  */

  class TaskInstance extends _base.BaseTaskInstance {
    setState(props) {
      let state = this._recomputeState(props);
      (0, _utils.assignProperties)(this, {
        ...props,
        isRunning: !props.isFinished,
        isDropped: state === 'dropped',
        state
      });
    }
    _recomputeState(props) {
      if (props.isDropped) {
        return 'dropped';
      } else if (props.isCanceled) {
        if (props.hasStarted) {
          return 'canceled';
        } else {
          return 'dropped';
        }
      } else if (props.isFinished) {
        return 'finished';
      } else if (props.hasStarted) {
        return 'running';
      } else {
        return 'waiting';
      }
    }
    onStarted() {
      this.triggerEvent('started', this);
    }
    onSuccess() {
      this.triggerEvent('succeeded', this);
    }
    onError(error) {
      this.triggerEvent('errored', this, error);
    }
    onCancel(cancelReason) {
      this.triggerEvent('canceled', this, cancelReason);
    }
    formatCancelReason(reason) {
      return `TaskInstance '${this.getName()}' was canceled because ${reason}. For more information, see: http://ember-concurrency.com/docs/task-cancelation-help`;
    }
    getName() {
      if (!this.name) {
        this.name = this.task && this.task.name || '<unknown>';
      }
      return this.name;
    }
    selfCancelLoopWarning(parent) {
      let parentName = `\`${parent.getName()}\``;
      let childName = `\`${this.getName()}\``;
      // eslint-disable-next-line no-console
      console.warn(`ember-concurrency detected a potentially hazardous "self-cancel loop" between parent task ${parentName} and child task ${childName}. If you want child task ${childName} to be canceled when parent task ${parentName} is canceled, please change \`.perform()\` to \`.linked().perform()\`. If you want child task ${childName} to keep running after parent task ${parentName} is canceled, change it to \`.unlinked().perform()\``);
    }
    triggerEvent(...allArgs) {
      if (!this.hasEnabledEvents) {
        return;
      }
      let taskInstance = this;
      let task = taskInstance.task;
      let host = task.context;
      let eventNamespace = task && task.name;
      if (host && host.trigger && eventNamespace) {
        let [eventType, ...args] = allArgs;
        host.trigger(`${eventNamespace}:${eventType}`, ...args);
      }
    }

    /**
     * Describes the state that the task instance is in. Can be used for debugging,
     * or potentially driving some UI state. Possible values are:
     *
     * - `"dropped"`: task instance was canceled before it started
     * - `"canceled"`: task instance was canceled before it could finish
     * - `"finished"`: task instance ran to completion (even if an exception was thrown)
     * - `"running"`: task instance is currently running (returns true even if
     *     is paused on a yielded promise)
     * - `"waiting"`: task instance hasn't begun running yet (usually
     *     because the task is using the {@linkcode TaskProperty#enqueue enqueue}
     *     task modifier)
     *
     * The animated timeline examples on the [Task Concurrency](/docs/task-concurrency)
     * docs page make use of this property.
     *
     * @name state
     * @memberof TaskInstance
     * @instance
     * @readOnly
     */

    /**
     * True if the TaskInstance was canceled before it could
     * ever start running. For example, calling
     * {@linkcode Task#perform .perform()} twice on a
     * task with the {@linkcode TaskProperty#drop drop} modifier applied
     * will result in the second task instance being dropped.
     *
     * @name isDropped
     * @memberof TaskInstance
     * @instance
     * @readOnly
     */

    /**
     * True if the task is still running.
     *
     * @name isRunning
     * @memberof TaskInstance
     * @instance
     * @readOnly
     */

    /**
     * Event emitted when a new {@linkcode TaskInstance} starts executing.
     *
     * `on` from `@ember/object/evented` may be used to create a binding on the host object to the event.
     *
     * ```js
     * export default Component.extend({
     *   doSomething: task(function * () {
     *     // ... does something
     *   }),
     *
     *   onDoSomethingStarted: on('doSomething:started', function (taskInstance) {
     *     // ...
     *   })
     * });
     * ```
     *
     * @event TaskInstance#TASK_NAME:started
     * @param {TaskInstance} taskInstance - Task instance that was started
     */

    /**
     * Event emitted when a {@linkcode TaskInstance} succeeds.
     *
     * `on` from `@ember/object/evented` may be used to create a binding on the host object to the event.
     *
     * ```js
     * export default Component.extend({
     *   doSomething: task(function * () {
     *     // ... does something
     *   }),
     *
     *   onDoSomethingSucceeded: on('doSomething:succeeded', function (taskInstance) {
     *     // ...
     *   })
     * });
     * ```
     *
     * @event TaskInstance#TASK_NAME:succeeded
     * @param {TaskInstance} taskInstance - Task instance that was succeeded
     */

    /**
     * Event emitted when a {@linkcode TaskInstance} throws an an error that is
     * not handled within the task itself.
     *
     * `on` from `@ember/object/evented` may be used to create a binding on the host object to the event.
     *
     * ```js
     * export default Component.extend({
     *   doSomething: task(function * () {
     *     // ... does something
     *   }),
     *
     *   onDoSomethingErrored: on('doSomething:errored', function (taskInstance, error) {
     *     // ...
     *   })
     * });
     * ```
     *
     * @event TaskInstance#TASK_NAME:errored
     * @param {TaskInstance} taskInstance - Task instance that was started
     * @param {Error} error - Error that was thrown by the task instance
     */

    /**
     * Event emitted when a {@linkcode TaskInstance} is canceled.
     *
     * `on` from `@ember/object/evented` may be used to create a binding on the host object to the event.
     *
     * ```js
     * export default Component.extend({
     *   doSomething: task(function * () {
     *     // ... does something
     *   }),
     *
     *   onDoSomethingCanceled: on('doSomething:canceled', function (taskInstance, cancelationReason) {
     *     // ...
     *   })
     * });
     * ```
     *
     * @event TaskInstance#TASK_NAME:canceled
     * @param {TaskInstance} taskInstance - Task instance that was started
     * @param {string} cancelationReason - Cancelation reason that was was provided to {@linkcode TaskInstance#cancel}
     */

    /**
     * Cancels the task instance. Has no effect if the task instance has
     * already been canceled or has already finished running.
     *
     * @method cancel
     * @memberof TaskInstance
     * @instance
     * @async
     */

    /**
     * Returns a promise that resolves with the value returned
     * from the task's (generator) function, or rejects with
     * either the exception thrown from the task function, or
     * an error with a `.name` property with value `"TaskCancelation"`.
     *
     * @method then
     * @memberof TaskInstance
     * @instance
     * @return {Promise}
     */

    /**
     * @method catch
     * @memberof TaskInstance
     * @instance
     * @return {Promise}
     */

    /**
     * @method finally
     * @memberof TaskInstance
     * @instance
     * @return {Promise}
     */
  }
  _exports.TaskInstance = TaskInstance;
  if (_trackedState.TRACKED_INITIAL_INSTANCE_STATE) {
    Object.defineProperties(TaskInstance.prototype, _trackedState.TRACKED_INITIAL_INSTANCE_STATE);
  }
});
;define("ember-concurrency/-private/task-properties", ["exports", "ember", "@ember/object", "@ember/object/computed", "ember-concurrency/-private/external/scheduler/policies/enqueued-policy", "ember-concurrency/-private/external/scheduler/policies/drop-policy", "ember-concurrency/-private/external/scheduler/policies/keep-latest-policy", "ember-concurrency/-private/external/scheduler/policies/restartable-policy"], function (_exports, _ember, _object, _computed, _enqueuedPolicy, _dropPolicy, _keepLatestPolicy, _restartablePolicy) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.propertyModifiers = _exports.TaskProperty = _exports.TaskGroupProperty = void 0;
  _exports.taskComputed = taskComputed;
  _exports.taskFactorySymbol = void 0;
  let taskFactorySymbol = _exports.taskFactorySymbol = '__ec_task_factory';
  const propertyModifiers = _exports.propertyModifiers = {
    /**
     * Configures the task to cancel old currently task instances
     * to make room for a new one to perform. Sets default
     * maxConcurrency to 1.
     *
     * [See the Live Example](/docs/examples/route-tasks/1)
     *
     * @method restartable
     * @memberof TaskProperty
     * @instance
     */
    restartable() {
      this[taskFactorySymbol].setBufferPolicy(_restartablePolicy.default);
      return this;
    },
    /**
     * Configures the task to run task instances one-at-a-time in
     * the order they were `.perform()`ed. Sets default
     * maxConcurrency to 1.
     *
     * @method enqueue
     * @memberof TaskProperty
     * @instance
     */
    enqueue() {
      this[taskFactorySymbol].setBufferPolicy(_enqueuedPolicy.default);
      return this;
    },
    /**
     * Configures the task to immediately cancel (i.e. drop) any
     * task instances performed when the task is already running
     * at maxConcurrency. Sets default maxConcurrency to 1.
     *
     * @method drop
     * @memberof TaskProperty
     * @instance
     */
    drop() {
      this[taskFactorySymbol].setBufferPolicy(_dropPolicy.default);
      return this;
    },
    /**
     * Configures the task to drop all but the most recently
     * performed {@linkcode TaskInstance }.
     *
     * @method keepLatest
     * @memberof TaskProperty
     * @instance
     */
    keepLatest() {
      this[taskFactorySymbol].setBufferPolicy(_keepLatestPolicy.default);
      return this;
    },
    /**
     * Sets the maximum number of task instances that are allowed
     * to run at the same time. By default, with no task modifiers
     * applied, this number is Infinity (there is no limit
     * to the number of tasks that can run at the same time).
     * {@linkcode TaskProperty#restartable .restartable},
     * {@linkcode TaskProperty#enqueue .enqueue}, and
     * {@linkcode TaskProperty#drop .drop} set the default
     * maxConcurrency to 1, but you can override this value
     * to set the maximum number of concurrently running tasks
     * to a number greater than 1.
     *
     * [See the AJAX Throttling example](/docs/examples/ajax-throttling)
     *
     * The example below uses a task with `maxConcurrency(3)` to limit
     * the number of concurrent AJAX requests (for anyone using this task)
     * to 3.
     *
     * ```js
     * doSomeAjax: task(function * (url) {
     *   return fetch(url);
     * }).maxConcurrency(3),
     *
     * elsewhere() {
     *   this.doSomeAjax.perform("http://www.example.com/json");
     * },
     * ```
     *
     * @method maxConcurrency
     * @memberof TaskProperty
     * @param {Number} n The maximum number of concurrently running tasks
     * @instance
     */
    maxConcurrency(n) {
      this[taskFactorySymbol].setMaxConcurrency(n);
      return this;
    },
    /**
     * Adds this task to a TaskGroup so that concurrency constraints
     * can be shared between multiple tasks.
     *
     * [See the Task Group docs for more information](/docs/task-groups)
     *
     * @method group
     * @memberof TaskProperty
     * @param {String} groupPath A path to the TaskGroup property
     * @instance
     */
    group(taskGroupPath) {
      this[taskFactorySymbol].setGroup(taskGroupPath);
      return this;
    },
    /**
     * Activates lifecycle events, allowing Evented host objects to react to task state
     * changes.
     *
     * ```js
     *
     * export default Component.extend({
     *   uploadTask: task(function* (file) {
     *     // ... file upload stuff
     *   }).evented(),
     *
     *   uploadedStarted: on('uploadTask:started', function(taskInstance) {
     *     this.analytics.track("User Photo: upload started");
     *   }),
     * });
     * ```
     *
     * @method evented
     * @memberof TaskProperty
     * @instance
     */
    evented() {
      this[taskFactorySymbol].setEvented(true);
      return this;
    },
    /**
     * Logs lifecycle events to aid in debugging unexpected Task behavior.
     * Presently only logs cancelation events and the reason for the cancelation,
     * e.g. "TaskInstance 'doStuff' was canceled because the object it lives on was destroyed or unrendered"
     *
     * @method debug
     * @memberof TaskProperty
     * @instance
     */
    debug() {
      this[taskFactorySymbol].setDebug(true);
      return this;
    },
    /**
     * Configures the task to call the passed in callback for derived state updates,
     * overriding the default derived state tracking. You may call with `null` to
     * completely opt-out of derived state tracking.
     *
     * @method onState
     * @memberof TaskProperty
     * @param {function?} callback Callback to be called. Receives an object argument with the new state.
     * @instance
     */
    onState(callback) {
      this[taskFactorySymbol].setOnState(callback);
      return this;
    }
  };

  /**
    A {@link TaskProperty} is the Computed Property-like object returned
    from the {@linkcode task} function. You can call Task Modifier methods
    on this object to configure the behavior of the {@link Task}.
  
    See [Managing Task Concurrency](/docs/task-concurrency) for an
    overview of all the different task modifiers you can use and how
    they impact automatic cancelation / enqueueing of task instances.
  
    {@link TaskProperty} is only used for supporting "classic" Ember objects.
    When using Native JavaScript or TypeScript classes, you will use [task decorators](/docs/task-decorators)
    on methods instead.
  
    @class TaskProperty
  */
  let TaskProperty = _exports.TaskProperty = void 0;
  let TaskGroupProperty = _exports.TaskGroupProperty = void 0;
  if (true) {
    _exports.TaskProperty = TaskProperty = class {};
    _exports.TaskGroupProperty = TaskGroupProperty = class {};
  } else {
    // Prior to the 3.10.0 refactors, we had to extend the _ComputedProperty class
    // for a classic decorator/descriptor to run correctly.
    _exports.TaskProperty = TaskProperty = class extends _computed.default {
      callSuperSetup() {
        if (super.setup) {
          super.setup(...arguments);
        }
      }
    };
    _exports.TaskGroupProperty = TaskGroupProperty = class extends _computed.default {};
  }
  Object.assign(TaskGroupProperty.prototype, propertyModifiers);
  Object.assign(TaskProperty.prototype, propertyModifiers, {
    setup(proto, key) {
      if (this.callSuperSetup) {
        this.callSuperSetup(...arguments);
      }
      this[taskFactorySymbol].setName(key);
      this[taskFactorySymbol]._setupEmberKVO(proto);
    },
    /**
     * Calling `task(...).on(eventName)` configures the task to be
     * automatically performed when the specified events fire. In
     * this way, it behaves like
     * [Ember.on](http://emberjs.com/api/classes/Ember.html#method_on).
     *
     * You can use `task(...).on('init')` to perform the task
     * when the host object is initialized.
     *
     * ```js
     * export default Component.extend({
     *   pollForUpdates: task(function * () {
     *     // ... this runs when the Component is first created
     *     // because we specified .on('init')
     *   }).on('init'),
     *
     *   handleFoo: task(function * (a, b, c) {
     *     // this gets performed automatically if the 'foo'
     *     // event fires on this Component,
     *     // e.g., if someone called component.trigger('foo')
     *   }).on('foo'),
     * });
     * ```
     *
     * [See the Writing Tasks Docs for more info](/docs/writing-tasks)
     *
     * @method on
     * @memberof TaskProperty
     * @param {String} eventNames*
     * @instance
     */
    on() {
      this[taskFactorySymbol].addPerformEvents(...arguments);
      return this;
    },
    /**
     * This behaves like the {@linkcode TaskProperty#on task(...).on() modifier},
     * but instead will cause the task to be canceled if any of the
     * specified events fire on the parent object.
     *
     * [See the Live Example](/docs/examples/route-tasks/1)
     *
     * @method cancelOn
     * @memberof TaskProperty
     * @param {String} eventNames*
     * @instance
     */
    cancelOn() {
      this[taskFactorySymbol].addCancelEvents(...arguments);
      return this;
    },
    /**
     * This behaves like the {@linkcode TaskProperty#on task(...).on() modifier},
     * but instead will cause the task to be performed if any of the
     * specified properties on the parent object change.
     *
     * @method observes
     * @memberof TaskProperty
     * @param {String} keys*
     * @instance
     */
    observes() {
      this[taskFactorySymbol].addObserverKeys(...arguments);
      return this;
    }
  });
  const setDecorator = _ember.default._setClassicDecorator || _ember.default._setComputedDecorator;
  function taskComputed(fn) {
    if (true) {
      let cp = function (proto, key) {
        if (cp.setup !== undefined) {
          cp.setup(proto, key);
        }
        return (0, _object.computed)(fn)(...arguments);
      };
      setDecorator(cp);
      return cp;
    } else {
      return (0, _object.computed)(fn);
    }
  }
});
;define("ember-concurrency/-private/task-public-api", ["exports", "ember-concurrency/-private/task-factory", "ember-concurrency/-private/task-properties", "ember-concurrency/-private/task-decorators", "@ember/debug"], function (_exports, _taskFactory, _taskProperties, _taskDecorators, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.task = task;
  _exports.taskGroup = taskGroup;
  /**
   * TODO: update docs to reflect both old and new ES6 styles
   *
   * A Task is a cancelable, restartable, asynchronous operation that
   * is driven by a generator function. Tasks are automatically canceled
   * when the object they live on is destroyed (e.g. a Component
   * is unrendered).
   *
   * To define a task, use the `task(...)` function, and pass in
   * a generator function, which will be invoked when the task
   * is performed. The reason generator functions are used is
   * that they (like the proposed ES7 async-await syntax) can
   * be used to elegantly express asynchronous, cancelable
   * operations.
   *
   * You can also define an
   * <a href="/docs/advanced/encapsulated-task">Encapsulated Task</a>
   * by passing in an object that defined a `perform` generator
   * function property.
   *
   * The following Component defines a task called `myTask` that,
   * when performed, prints a message to the console, sleeps for 1 second,
   * prints a final message to the console, and then completes.
   *
   * ```js
   * import { task, timeout } from 'ember-concurrency';
   * export default Component.extend({
   *   myTask: task(function * () {
   *     console.log("Pausing for a second...");
   *     yield timeout(1000);
   *     console.log("Done!");
   *   })
   * });
   * ```
   *
   * ```hbs
   * <button {{action myTask.perform}}>Perform Task</button>
   * ```
   *
   * By default, tasks have no concurrency constraints
   * (multiple instances of a task can be running at the same time)
   * but much of a power of tasks lies in proper usage of Task Modifiers
   * that you can apply to a task.
   *
   * @param {function} generatorFunction the generator function backing the task.
   * @returns {TaskProperty}
   */
  function task(taskFnOrProtoOrDecoratorOptions, key, descriptor) {
    (true && !(!isUntranspiledAsyncFn(arguments[arguments.length - 1])) && (0, _debug.assert)(`It appears you're attempting to use the new task(async () => { ... }) syntax, but the async arrow task function you've provided is not being properly compiled by Babel.\n\nPossible causes / remedies:\n\n1. You must pass the async function expression directly to the task() function (it is not currently supported to pass in a variable containing the async arrow fn, or any other kind of indirection)\n2. The new task syntax is only supported by native classes. Ensure that this is one.\n3. If this code is in an addon, please ensure the addon specifies ember-concurrency "2.3.0" or higher in "dependencies" (not "devDependencies")\n4. Ensure that there is only one version of ember-concurrency v2.3.0+ being used in your project (including nested dependencies) and consider using npm/yarn/pnpm resolutions to enforce a single version is used`, !isUntranspiledAsyncFn(arguments[arguments.length - 1])));
    if (isDecoratorOptions(taskFnOrProtoOrDecoratorOptions) || key && descriptor) {
      return (0, _taskDecorators.task)(...arguments);
    } else {
      return buildClassicTaskProperty(taskFnOrProtoOrDecoratorOptions);
    }
  }
  function isUntranspiledAsyncFn(obj) {
    return obj && obj.constructor && obj.constructor.name === 'AsyncFunction';
  }

  /**
   * Build and return a "classic" TaskProperty, which is essentially a subclass of a Computed Property
   * descriptor that can be used to define Tasks on classic Ember.Objects.
   *
   * @private
   */
  function buildClassicTaskProperty(taskFn) {
    const taskProperty = (0, _taskProperties.taskComputed)(function () {
      taskProperty[_taskProperties.taskFactorySymbol].setTaskDefinition(taskProperty.taskFn);
      return taskProperty[_taskProperties.taskFactorySymbol].createTask(this);
    });
    taskProperty.taskFn = taskFn;
    taskProperty[_taskProperties.taskFactorySymbol] = new _taskFactory.TaskFactory();
    Object.setPrototypeOf(taskProperty, _taskProperties.TaskProperty.prototype);
    return taskProperty;
  }

  /**
   * "Task Groups" provide a means for applying
   * task modifiers to groups of tasks. Once a {@linkcode Task} is declared
   * as part of a group task, modifiers like `drop` or `restartable`
   * will no longer affect the individual `Task`. Instead those
   * modifiers can be applied to the entire group.
   *
   * ```js
   * import { task, taskGroup } from 'ember-concurrency';
   *
   * export default class MyController extends Controller {
   *   &#64;taskGroup({ drop: true }) chores;
   *
   *   &#64;task({ group: 'chores' }) mowLawn = taskFn;
   *   &#64;task({ group: 'chores' }) doDishes = taskFn;
   *   &#64;task({ group: 'chores' }) changeDiapers = taskFn;
   * }
   * ```
   *
   * @returns {TaskGroup}
   */
  function taskGroup(possibleDecoratorOptions, key, descriptor) {
    if (isDecoratorOptions(possibleDecoratorOptions) || key && descriptor) {
      return (0, _taskDecorators.taskGroup)(...arguments);
    } else {
      let tp = (0, _taskProperties.taskComputed)(function (key) {
        tp[_taskProperties.taskFactorySymbol].setName(key);
        return tp[_taskProperties.taskFactorySymbol].createTaskGroup(this);
      });
      tp[_taskProperties.taskFactorySymbol] = new _taskFactory.TaskFactory();
      Object.setPrototypeOf(tp, _taskProperties.TaskGroupProperty.prototype);
      return tp;
    }
  }
  function isDecoratorOptions(possibleOptions) {
    if (!possibleOptions) {
      return false;
    }
    if (typeof possibleOptions === 'function') {
      return false;
    }
    if (typeof possibleOptions === 'object' && 'perform' in possibleOptions && typeof possibleOptions.perform === 'function') {
      return false;
    }
    return Object.getPrototypeOf(possibleOptions) === Object.prototype;
  }
});
;define("ember-concurrency/-private/task", ["exports", "@ember/application", "@ember/object", "@ember/destroyable", "ember-concurrency/-private/external/task/task", "ember-concurrency/-private/task-instance", "ember-concurrency/-private/external/task-instance/executor", "ember-concurrency/-private/taskable-mixin", "ember-concurrency/-private/tracked-state", "ember-concurrency/-private/external/task-instance/cancelation"], function (_exports, _application, _object, _destroyable, _task, _taskInstance, _executor, _taskableMixin, _trackedState, _cancelation) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Task = _exports.EncapsulatedTask = void 0;
  /**
    The `Task` object lives on a host Ember object (e.g.
    a Component, Route, or Controller). You call the
    {@linkcode Task#perform .perform()} method on this object
    to create run individual {@linkcode TaskInstance}s,
    and at any point, you can call the {@linkcode Task#cancelAll .cancelAll()}
    method on this object to cancel all running or enqueued
    {@linkcode TaskInstance}s.
  
    <style>
      .ignore-this--this-is-here-to-hide-constructor,
      #Task { display: none }
    </style>
  
    @class Task
  */
  class Task extends _task.Task {
    /**
     * `true` if any current task instances are running.
     *
     * @memberof Task
     * @member {boolean} isRunning
     * @instance
     * @readOnly
     */
    /**
     * `true` if any future task instances are queued.
     *
     * @memberof Task
     * @member {boolean} isQueued
     * @instance
     * @readOnly
     */
    /**
     * `true` if the task is not in the running or queued state.
     *
     * @memberof Task
     * @member {boolean} isIdle
     * @instance
     * @readOnly
     */
    /**
     * The current state of the task: `"running"`, `"queued"` or `"idle"`.
     *
     * @memberof Task
     * @member {string} state
     * @instance
     * @readOnly
     */
    /**
     * The most recently started task instance.
     *
     * @memberof Task
     * @member {TaskInstance} last
     * @instance
     * @readOnly
     */
    /**
     * The most recent task instance that is currently running.
     *
     * @memberof Task
     * @member {TaskInstance} lastRunning
     * @instance
     * @readOnly
     */
    /**
     * The most recently performed task instance.
     *
     * @memberof Task
     * @member {TaskInstance} lastPerformed
     * @instance
     * @readOnly
     */
    /**
     * The most recent task instance that succeeded.
     *
     * @memberof Task
     * @member {TaskInstance} lastSuccessful
     * @instance
     * @readOnly
     */
    /**
     * The most recently completed task instance.
     *
     * @memberof Task
     * @member {TaskInstance} lastComplete
     * @instance
     * @readOnly
     */
    /**
     * The most recent task instance that errored.
     *
     * @memberof Task
     * @member {TaskInstance} lastErrored
     * @instance
     * @readOnly
     */
    /**
     * The most recently canceled task instance.
     *
     * @memberof Task
     * @member {TaskInstance} lastCanceled
     * @instance
     * @readOnly
     */
    /**
     * The most recent task instance that is incomplete.
     *
     * @memberof Task
     * @member {TaskInstance} lastIncomplete
     * @instance
     * @readOnly
     */
    /**
     * The number of times this task has been performed.
     *
     * @memberof Task
     * @member {number} performCount
     * @instance
     * @readOnly
     */

    constructor(options) {
      super(options);
      if (!(0, _destroyable.isDestroying)(this.context)) {
        (0, _destroyable.registerDestructor)(this.context, () => {
          this.cancelAll({
            reason: 'the object it lives on was destroyed or unrendered',
            cancelRequestKind: _cancelation.CANCEL_KIND_LIFESPAN_END
          });
        });
      }
    }

    /**
     * Flags the task as linked to the parent task's lifetime. Must be called
     * within another task's perform function. The task will be cancelled if the
     * parent task is canceled as well.
     *
     * ember-concurrency will indicate when this may be needed.
     *
     * @method linked
     * @memberof Task
     * @instance
     *
     */

    /**
     * Flags the task as not linked to the parent task's lifetime. Must be called
     * within another task's perform function. The task will NOT be cancelled if the
     * parent task is canceled.
     *
     * This is useful for avoiding the so-called "self-cancel loop" for tasks.
     * ember-concurrency will indicate when this may be needed.
     *
     * @method unlinked
     * @memberof Task
     * @instance
     *
     */

    /**
     * Creates a new {@linkcode TaskInstance} and attempts to run it right away.
     * If running this task instance would increase the task's concurrency
     * to a number greater than the task's maxConcurrency, this task
     * instance might be immediately canceled (dropped), or enqueued
     * to run at later time, after the currently running task(s) have finished.
     *
     * @method perform
     * @memberof Task
     * @param {*} arg* - args to pass to the task function
     * @instance
     *
     * @fires TaskInstance#TASK_NAME:started
     * @fires TaskInstance#TASK_NAME:succeeded
     * @fires TaskInstance#TASK_NAME:errored
     * @fires TaskInstance#TASK_NAME:canceled
     *
     */

    /**
     * Cancels all running or queued `TaskInstance`s for this Task.
     * If you're trying to cancel a specific TaskInstance (rather
     * than all of the instances running under this task) call
     * `.cancel()` on the specific TaskInstance.
     *
     * @method cancelAll
     * @memberof Task
     * @param options.reason A descriptive reason the task was
     *   cancelled. Defaults to `".cancelAll() was explicitly called
     *   on the Task"`.
     * @param options.resetState If true, will clear the task state
     *   (`last*` and `performCount` properties will be set to initial
     *   values). Defaults to false.
     * @instance
     * @async
     *
     */

    get _isAlive() {
      return !(0, _destroyable.isDestroying)(this.context);
    }
    _taskInstanceFactory(args, performType, linkedObject) {
      let options = this._taskInstanceOptions(args, performType, linkedObject);
      let taskInstance = new _taskInstance.TaskInstance(options);
      return taskInstance;
    }
    _clone() {
      return new Task({
        context: this.context,
        debug: this.debug,
        env: this.env,
        generatorFactory: this.generatorFactory,
        group: this.group,
        hasEnabledEvents: this.hasEnabledEvents,
        name: this.name,
        onStateCallback: this.onStateCallback,
        scheduler: this.scheduler
      });
    }
  }
  _exports.Task = Task;
  if (_trackedState.TRACKED_INITIAL_TASK_STATE) {
    Object.defineProperties(Task.prototype, _trackedState.TRACKED_INITIAL_TASK_STATE);
  }
  Object.assign(Task.prototype, _taskableMixin.TASKABLE_MIXIN);
  const currentTaskInstanceSymbol = '__ec__encap_current_ti';
  class EncapsulatedTask extends Task {
    constructor(options) {
      super(options);
      this.taskObj = options.taskObj;
      this._encapsulatedTaskStates = new WeakMap();
      this._encapsulatedTaskInstanceProxies = new WeakMap();
    }
    _getEncapsulatedTaskClass() {
      let encapsulatedTaskImplClass = this._encapsulatedTaskImplClass;
      if (!encapsulatedTaskImplClass) {
        // eslint-disable-next-line ember/no-classic-classes
        encapsulatedTaskImplClass = _object.default.extend(this.taskObj, {
          unknownProperty(key) {
            let currentInstance = this[currentTaskInstanceSymbol];
            return currentInstance ? currentInstance[key] : undefined;
          }
        });
      }
      return encapsulatedTaskImplClass;
    }
    _taskInstanceFactory(args, performType) {
      let owner = (0, _application.getOwner)(this.context);
      let taskInstanceProxy;
      let encapsulatedTaskImpl = this._getEncapsulatedTaskClass().create({
        context: this.context
      });
      (0, _application.setOwner)(encapsulatedTaskImpl, owner);
      let generatorFactory = () => encapsulatedTaskImpl.perform.apply(taskInstanceProxy, args);
      let taskInstance = new _taskInstance.TaskInstance({
        task: this,
        args,
        executor: new _executor.TaskInstanceExecutor({
          generatorFactory,
          env: this.env,
          debug: this.debug
        }),
        performType,
        hasEnabledEvents: this.hasEnabledEvents
      });
      encapsulatedTaskImpl[currentTaskInstanceSymbol] = taskInstance;
      this._encapsulatedTaskStates.set(taskInstance, encapsulatedTaskImpl);
      taskInstanceProxy = this._wrappedEncapsulatedTaskInstance(taskInstance);
      return taskInstanceProxy;
    }
    _wrappedEncapsulatedTaskInstance(taskInstance) {
      if (!taskInstance) {
        return null;
      }
      let _encapsulatedTaskInstanceProxies = this._encapsulatedTaskInstanceProxies;
      let proxy = _encapsulatedTaskInstanceProxies.get(taskInstance);
      if (!proxy) {
        let encapsulatedTaskImpl = this._encapsulatedTaskStates.get(taskInstance);
        proxy = new Proxy(taskInstance, {
          get(obj, prop) {
            return prop in obj ? obj[prop] : (0, _object.get)(encapsulatedTaskImpl, prop.toString());
          },
          set(obj, prop, value) {
            if (prop in obj) {
              obj[prop] = value;
            } else {
              (0, _object.set)(encapsulatedTaskImpl, prop.toString(), value);
            }
            return true;
          },
          has(obj, prop) {
            return prop in obj || prop in encapsulatedTaskImpl;
          },
          ownKeys(obj) {
            return Reflect.ownKeys(obj).concat(Reflect.ownKeys(encapsulatedTaskImpl));
          },
          defineProperty(obj, prop, descriptor) {
            // Ember < 3.16 uses a WeakMap for value storage, keyed to the proxy.
            // We need to ensure that when we use setProperties to update it, and
            // it creates Meta, that it uses the proxy to key, otherwise we'll
            // have two different values stores in Meta, one which won't render.
            let proxy = _encapsulatedTaskInstanceProxies.get(taskInstance);
            if (proxy) {
              if (descriptor.get) {
                descriptor.get = descriptor.get.bind(proxy);
              } else if (proxy && descriptor.set) {
                descriptor.set = descriptor.set.bind(proxy);
              }
            }
            return Reflect.defineProperty(encapsulatedTaskImpl, prop, descriptor);
          },
          getOwnPropertyDescriptor(obj, prop) {
            return prop in obj ? Reflect.getOwnPropertyDescriptor(obj, prop) : Reflect.getOwnPropertyDescriptor(encapsulatedTaskImpl, prop);
          }
        });
        _encapsulatedTaskInstanceProxies.set(taskInstance, proxy);
      }
      return proxy;
    }
  }
  _exports.EncapsulatedTask = EncapsulatedTask;
});
;define("ember-concurrency/-private/taskable-mixin", ["exports", "ember-concurrency/-private/utils"], function (_exports, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.TASKABLE_MIXIN = void 0;
  const TASKABLE_MIXIN = _exports.TASKABLE_MIXIN = {
    _performCount: 0,
    setState(state) {
      this._performCount = this._performCount + (state.numPerformedInc || 0);
      let isRunning = state.numRunning > 0;
      let isQueued = state.numQueued > 0;
      let derivedState = Object.assign({}, state, {
        performCount: this._performCount,
        isRunning,
        isQueued,
        isIdle: !isRunning && !isQueued,
        state: isRunning ? 'running' : 'idle'
      });
      (0, _utils.assignProperties)(this, derivedState);
    },
    onState(state, task) {
      if (task.onStateCallback) {
        task.onStateCallback(state, task);
      }
    }
  };
});
;define("ember-concurrency/-private/tracked-state", ["exports", "@glimmer/tracking", "ember-concurrency/-private/external/task/default-state", "ember-concurrency/-private/external/task-instance/initial-state", "ember-concurrency/-private/utils"], function (_exports, _tracking, _defaultState, _initialState, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.TRACKED_INITIAL_TASK_STATE = _exports.TRACKED_INITIAL_INSTANCE_STATE = void 0;
  function trackMixin(proto, obj, key) {
    const propDesc = Object.getOwnPropertyDescriptor(proto, key);
    propDesc.initializer = propDesc.initializer || (() => proto[key]);
    delete propDesc.value;
    const desc = (0, _tracking.tracked)(obj, key, propDesc);
    obj[key] = desc;
    return obj;
  }
  function applyTracked(proto, initial) {
    return Object.keys(proto).reduce((acc, key) => {
      return trackMixin(proto, acc, key);
    }, initial);
  }
  let TRACKED_INITIAL_TASK_STATE = _exports.TRACKED_INITIAL_TASK_STATE = void 0;
  let TRACKED_INITIAL_INSTANCE_STATE = _exports.TRACKED_INITIAL_INSTANCE_STATE = void 0;
  if (_utils.USE_TRACKED) {
    _exports.TRACKED_INITIAL_TASK_STATE = TRACKED_INITIAL_TASK_STATE = applyTracked(_defaultState.DEFAULT_STATE, {});
    _exports.TRACKED_INITIAL_TASK_STATE = TRACKED_INITIAL_TASK_STATE = applyTracked({
      numRunning: 0,
      numQueued: 0,
      isRunning: false,
      isQueued: false,
      isIdle: true,
      state: 'idle'
    }, TRACKED_INITIAL_TASK_STATE);
    _exports.TRACKED_INITIAL_INSTANCE_STATE = TRACKED_INITIAL_INSTANCE_STATE = applyTracked(_initialState.INITIAL_STATE, {});
    _exports.TRACKED_INITIAL_INSTANCE_STATE = TRACKED_INITIAL_INSTANCE_STATE = applyTracked({
      state: 'waiting',
      isDropped: false,
      isRunning: false
    }, TRACKED_INITIAL_INSTANCE_STATE);
    Object.freeze(TRACKED_INITIAL_TASK_STATE);
    Object.freeze(TRACKED_INITIAL_INSTANCE_STATE);
  }
});
;define("ember-concurrency/-private/utils", ["exports", "@ember/object", "@ember/runloop", "ember-concurrency/-private/ember-environment", "ember-concurrency/-private/external/yieldables"], function (_exports, _object, _runloop, _emberEnvironment, _yieldables) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.assignProperties = _exports.USE_TRACKED = _exports.EmberYieldable = void 0;
  _exports.deprecatePrivateModule = deprecatePrivateModule;
  _exports.isEventedObject = isEventedObject;
  _exports.timeout = timeout;
  const USE_TRACKED = _exports.USE_TRACKED = true;
  const assignProperties = _exports.assignProperties = USE_TRACKED ? Object.assign : _object.setProperties;
  function isEventedObject(c) {
    return c && (typeof c.one === 'function' && typeof c.off === 'function' || typeof c.on === 'function' && typeof c.off === 'function' || typeof c.addEventListener === 'function' && typeof c.removeEventListener === 'function');
  }
  class EmberYieldable extends _yieldables.Yieldable {
    _deferable() {
      return _emberEnvironment.EMBER_ENVIRONMENT.defer();
    }
  }
  _exports.EmberYieldable = EmberYieldable;
  class TimeoutYieldable extends EmberYieldable {
    constructor(ms) {
      super();
      this.ms = ms;
    }
    onYield(state) {
      let timerId = (0, _runloop.later)(() => state.next(), this.ms);
      return () => (0, _runloop.cancel)(timerId);
    }
  }

  /**
   *
   * Yielding `timeout(ms)` will pause a task for the duration
   * of time passed in, in milliseconds.
   *
   * This timeout will be scheduled on the Ember runloop, which
   * means that test helpers will wait for it to complete before
   * continuing with the test. See `rawTimeout()` if you need
   * different behavior.
   *
   * The task below, when performed, will print a message to the
   * console every second.
   *
   * ```js
   * export default class MyComponent extends Component {
   *   &#64;task *myTask() {
   *     while (true) {
   *       console.log("Hello!");
   *       yield timeout(1000);
   *     }
   *   }
   * }
   * ```
   *
   * @param {number} ms - the amount of time to sleep before resuming
   *   the task, in milliseconds
   */
  function timeout(ms) {
    return new TimeoutYieldable(ms);
  }
  function deprecatePrivateModule(moduleName) {
    // eslint-disable-next-line no-console
    console.warn(`an Ember addon is importing a private ember-concurrency module '${moduleName}' that has moved`);
  }
});
;define("ember-concurrency/-private/wait-for", ["exports", "@ember/debug", "@ember/runloop", "@ember/object", "@ember/object/observers", "ember-concurrency/-private/utils"], function (_exports, _debug, _runloop, _object, _observers, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.waitForEvent = waitForEvent;
  _exports.waitForProperty = waitForProperty;
  _exports.waitForQueue = waitForQueue;
  class WaitForQueueYieldable extends _utils.EmberYieldable {
    constructor(queueName) {
      super();
      this.queueName = queueName;
    }
    onYield(state) {
      let timerId;
      try {
        timerId = (0, _runloop.schedule)(this.queueName, () => state.next());
      } catch (error) {
        state.throw(error);
      }
      return () => (0, _runloop.cancel)(timerId);
    }
  }
  class WaitForEventYieldable extends _utils.EmberYieldable {
    constructor(object, eventName) {
      super();
      this.object = object;
      this.eventName = eventName;
      this.usesDOMEvents = false;
    }
    on(callback) {
      if (typeof this.object.addEventListener === 'function') {
        // assume that we're dealing with a DOM `EventTarget`.
        this.usesDOMEvents = true;
        this.object.addEventListener(this.eventName, callback);
      } else {
        this.object.on(this.eventName, callback);
      }
    }
    off(callback) {
      if (this.usesDOMEvents) {
        this.object.removeEventListener(this.eventName, callback);
      } else {
        this.object.off(this.eventName, callback);
      }
    }
    onYield(state) {
      let fn = null;
      let disposer = () => {
        fn && this.off(fn);
        fn = null;
      };
      fn = event => {
        disposer();
        state.next(event);
      };
      this.on(fn);
      return disposer;
    }
  }
  class WaitForPropertyYieldable extends _utils.EmberYieldable {
    constructor(object, key, predicateCallback = Boolean) {
      super();
      this.object = object;
      this.key = key;
      if (typeof predicateCallback === 'function') {
        this.predicateCallback = predicateCallback;
      } else {
        this.predicateCallback = v => v === predicateCallback;
      }
    }
    onYield(state) {
      let observerBound = false;
      let observerFn = () => {
        let value = (0, _object.get)(this.object, this.key);
        let predicateValue = this.predicateCallback(value);
        if (predicateValue) {
          state.next(value);
          return true;
        }
      };
      if (!observerFn()) {
        // eslint-disable-next-line ember/no-observers
        (0, _observers.addObserver)(this.object, this.key, null, observerFn);
        observerBound = true;
      }
      return () => {
        if (observerBound && observerFn) {
          (0, _observers.removeObserver)(this.object, this.key, null, observerFn);
        }
      };
    }
  }

  /**
   * Use `waitForQueue` to pause the task until a certain run loop queue is reached.
   *
   * ```js
   * import { task, waitForQueue } from 'ember-concurrency';
   * export default class MyComponent extends Component {
   *   &#64;task *myTask() {
   *     yield waitForQueue('afterRender');
   *     console.log("now we're in the afterRender queue");
   *   }
   * }
   * ```
   *
   * @param {string} queueName the name of the Ember run loop queue
   */
  function waitForQueue(queueName) {
    return new WaitForQueueYieldable(queueName);
  }

  /**
   * Use `waitForEvent` to pause the task until an event is fired. The event
   * can either be a jQuery event or an Ember.Evented event (or any event system
   * where the object supports `.on()` `.one()` and `.off()`).
   *
   * ```js
   * import { task, waitForEvent } from 'ember-concurrency';
   * export default class MyComponent extends Component {
   *   &#64;task *myTask() {
   *     console.log("Please click anywhere..");
   *     let clickEvent = yield waitForEvent($('body'), 'click');
   *     console.log("Got event", clickEvent);
   *
   *     let emberEvent = yield waitForEvent(this, 'foo');
   *     console.log("Got foo event", emberEvent);
   *
   *     // somewhere else: component.trigger('foo', { value: 123 });
   *   }
   * }
   * ```
   *
   * @param {object} object the Ember Object, jQuery element, or other object with .on() and .off() APIs
   *                 that the event fires from
   * @param {function} eventName the name of the event to wait for
   */
  function waitForEvent(object, eventName) {
    (true && !((0, _utils.isEventedObject)(object)) && (0, _debug.assert)(`${object} must include Ember.Evented (or support \`.on()\` and \`.off()\`) or DOM EventTarget (or support \`addEventListener\` and  \`removeEventListener\`) to be able to use \`waitForEvent\``, (0, _utils.isEventedObject)(object)));
    return new WaitForEventYieldable(object, eventName);
  }

  /**
   * Use `waitForProperty` to pause the task until a property on an object
   * changes to some expected value. This can be used for a variety of use
   * cases, including synchronizing with another task by waiting for it
   * to become idle, or change state in some other way. If you omit the
   * callback, `waitForProperty` will resume execution when the observed
   * property becomes truthy. If you provide a callback, it'll be called
   * immediately with the observed property's current value, and multiple
   * times thereafter whenever the property changes, until you return
   * a truthy value from the callback, or the current task is canceled.
   * You can also pass in a non-Function value in place of the callback,
   * in which case the task will continue executing when the property's
   * value becomes the value that you passed in.
   *
   * ```js
   * import { task, waitForProperty } from 'ember-concurrency';
   * export default class MyComponent extends Component {
   *   &#64;tracked foo = 0;
   *
   *   &#64;task *myTask() {
   *     console.log("Waiting for `foo` to become 5");
   *
   *     yield waitForProperty(this, 'foo', v => v === 5);
   *     // alternatively: yield waitForProperty(this, 'foo', 5);
   *
   *     // somewhere else: this.foo = 5;
   *
   *     console.log("`foo` is 5!");
   *
   *     // wait for another task to be idle before running:
   *     yield waitForProperty(this, 'otherTask.isIdle');
   *     console.log("otherTask is idle!");
   *   }
   * }
   * ```
   *
   * @param {object} object an object (most likely an Ember Object)
   * @param {string} key the property name that is observed for changes
   * @param {function} callbackOrValue a Function that should return a truthy value
   *                                   when the task should continue executing, or
   *                                   a non-Function value that the watched property
   *                                   needs to equal before the task will continue running
   */
  function waitForProperty(object, key, predicateCallback) {
    return new WaitForPropertyYieldable(object, key, predicateCallback);
  }
});
;define("ember-concurrency/-task-instance", ["exports", "ember-concurrency/-private/task-instance", "ember-concurrency/-private/utils"], function (_exports, _taskInstance, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  (0, _utils.deprecatePrivateModule)('ember-concurrency/-task-instance');
  var _default = _exports.default = _taskInstance.TaskInstance;
});
;define("ember-concurrency/-task-property", ["exports", "ember-concurrency/-private/task", "ember-concurrency/-private/task-properties", "ember-concurrency/-private/utils"], function (_exports, _task, _taskProperties, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "Task", {
    enumerable: true,
    get: function () {
      return _task.Task;
    }
  });
  Object.defineProperty(_exports, "TaskProperty", {
    enumerable: true,
    get: function () {
      return _taskProperties.TaskProperty;
    }
  });
  (0, _utils.deprecatePrivateModule)('ember-concurrency/-task-property');
});
;define("ember-concurrency/helpers/cancel-all", ["exports", "@ember/component/helper", "@ember/debug", "ember-concurrency/-private/helpers"], function (_exports, _helper, _debug, _helpers) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.cancelHelper = cancelHelper;
  _exports.default = void 0;
  const CANCEL_REASON = "the 'cancel-all' template helper was invoked";
  function cancelHelper(args) {
    let cancelable = args[0];
    if (!cancelable || typeof cancelable.cancelAll !== 'function') {
      (true && !(false) && (0, _debug.assert)(`The first argument passed to the \`cancel-all\` helper should be a Task or TaskGroup (without quotes); you passed ${cancelable}`, false));
    }
    return (0, _helpers.taskHelperClosure)('cancel-all', 'cancelAll', [cancelable, {
      reason: CANCEL_REASON
    }]);
  }
  var _default = _exports.default = (0, _helper.helper)(cancelHelper);
});
;define("ember-concurrency/helpers/perform", ["exports", "@ember/component/helper", "@ember/debug", "ember-concurrency/-private/helpers"], function (_exports, _helper, _debug, _helpers) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.performHelper = performHelper;
  function maybeReportError(onError) {
    return function (e) {
      if (typeof onError === 'function') {
        onError(e);
      } else if (onError === null) {
        // Do nothing
      } else {
        (true && !(false) && (0, _debug.assert)(`The onError argument passed to the \`perform\` helper should be a function or null; you passed ${onError}`, false));
      }
    };
  }
  function performHelper(args, hash) {
    let perform = (0, _helpers.taskHelperClosure)('perform', 'perform', args, hash);
    if (hash && typeof hash.onError !== 'undefined') {
      return function (...innerArgs) {
        try {
          let taskInstance = perform(...innerArgs);
          return taskInstance.catch(maybeReportError(hash.onError));
          // eslint-disable-next-line no-empty
        } catch {
          maybeReportError(hash.onError);
        }
      };
    } else {
      return perform;
    }
  }
  var _default = _exports.default = (0, _helper.helper)(performHelper);
});
;define("ember-concurrency/helpers/task", ["exports", "@ember/component/helper"], function (_exports, _helper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  function taskHelper([task, ...args]) {
    return task._curry(...args);
  }
  var _default = _exports.default = (0, _helper.helper)(taskHelper);
});
;define("ember-concurrency/index", ["exports", "ember-concurrency/-private/utils", "ember-concurrency/-private/task-properties", "ember-concurrency/-private/task-public-api", "ember-concurrency/-private/task-instance", "ember-concurrency/-private/cancelable-promise-helpers", "ember-concurrency/-private/wait-for", "ember-concurrency/-private/external/task-instance/cancelation", "ember-concurrency/-private/external/yieldables", "ember-concurrency/-private/task", "ember-concurrency/-private/task-group", "ember-concurrency/-private/task-decorators", "ember-concurrency/-private/external/task-factory"], function (_exports, _utils, _taskProperties, _taskPublicApi, _taskInstance, _cancelablePromiseHelpers, _waitFor, _cancelation, _yieldables, _task, _taskGroup, _taskDecorators, _taskFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "Task", {
    enumerable: true,
    get: function () {
      return _task.Task;
    }
  });
  Object.defineProperty(_exports, "TaskGroup", {
    enumerable: true,
    get: function () {
      return _taskGroup.TaskGroup;
    }
  });
  Object.defineProperty(_exports, "TaskGroupProperty", {
    enumerable: true,
    get: function () {
      return _taskProperties.TaskGroupProperty;
    }
  });
  Object.defineProperty(_exports, "TaskInstance", {
    enumerable: true,
    get: function () {
      return _taskInstance.TaskInstance;
    }
  });
  Object.defineProperty(_exports, "TaskProperty", {
    enumerable: true,
    get: function () {
      return _taskProperties.TaskProperty;
    }
  });
  Object.defineProperty(_exports, "Yieldable", {
    enumerable: true,
    get: function () {
      return _utils.EmberYieldable;
    }
  });
  Object.defineProperty(_exports, "all", {
    enumerable: true,
    get: function () {
      return _cancelablePromiseHelpers.all;
    }
  });
  Object.defineProperty(_exports, "allSettled", {
    enumerable: true,
    get: function () {
      return _cancelablePromiseHelpers.allSettled;
    }
  });
  Object.defineProperty(_exports, "animationFrame", {
    enumerable: true,
    get: function () {
      return _yieldables.animationFrame;
    }
  });
  Object.defineProperty(_exports, "didCancel", {
    enumerable: true,
    get: function () {
      return _cancelation.didCancel;
    }
  });
  Object.defineProperty(_exports, "dropTask", {
    enumerable: true,
    get: function () {
      return _taskDecorators.dropTask;
    }
  });
  Object.defineProperty(_exports, "dropTaskGroup", {
    enumerable: true,
    get: function () {
      return _taskDecorators.dropTaskGroup;
    }
  });
  Object.defineProperty(_exports, "enqueueTask", {
    enumerable: true,
    get: function () {
      return _taskDecorators.enqueueTask;
    }
  });
  Object.defineProperty(_exports, "enqueueTaskGroup", {
    enumerable: true,
    get: function () {
      return _taskDecorators.enqueueTaskGroup;
    }
  });
  Object.defineProperty(_exports, "forever", {
    enumerable: true,
    get: function () {
      return _yieldables.forever;
    }
  });
  Object.defineProperty(_exports, "getModifier", {
    enumerable: true,
    get: function () {
      return _taskFactory.getModifier;
    }
  });
  Object.defineProperty(_exports, "hasModifier", {
    enumerable: true,
    get: function () {
      return _taskFactory.hasModifier;
    }
  });
  Object.defineProperty(_exports, "hash", {
    enumerable: true,
    get: function () {
      return _cancelablePromiseHelpers.hash;
    }
  });
  Object.defineProperty(_exports, "hashSettled", {
    enumerable: true,
    get: function () {
      return _cancelablePromiseHelpers.hashSettled;
    }
  });
  Object.defineProperty(_exports, "keepLatestTask", {
    enumerable: true,
    get: function () {
      return _taskDecorators.keepLatestTask;
    }
  });
  Object.defineProperty(_exports, "keepLatestTaskGroup", {
    enumerable: true,
    get: function () {
      return _taskDecorators.keepLatestTaskGroup;
    }
  });
  Object.defineProperty(_exports, "lastValue", {
    enumerable: true,
    get: function () {
      return _taskDecorators.lastValue;
    }
  });
  Object.defineProperty(_exports, "race", {
    enumerable: true,
    get: function () {
      return _cancelablePromiseHelpers.race;
    }
  });
  Object.defineProperty(_exports, "rawTimeout", {
    enumerable: true,
    get: function () {
      return _yieldables.rawTimeout;
    }
  });
  Object.defineProperty(_exports, "registerModifier", {
    enumerable: true,
    get: function () {
      return _taskFactory.registerModifier;
    }
  });
  Object.defineProperty(_exports, "restartableTask", {
    enumerable: true,
    get: function () {
      return _taskDecorators.restartableTask;
    }
  });
  Object.defineProperty(_exports, "restartableTaskGroup", {
    enumerable: true,
    get: function () {
      return _taskDecorators.restartableTaskGroup;
    }
  });
  Object.defineProperty(_exports, "task", {
    enumerable: true,
    get: function () {
      return _taskPublicApi.task;
    }
  });
  Object.defineProperty(_exports, "taskGroup", {
    enumerable: true,
    get: function () {
      return _taskPublicApi.taskGroup;
    }
  });
  Object.defineProperty(_exports, "timeout", {
    enumerable: true,
    get: function () {
      return _utils.timeout;
    }
  });
  Object.defineProperty(_exports, "waitForEvent", {
    enumerable: true,
    get: function () {
      return _waitFor.waitForEvent;
    }
  });
  Object.defineProperty(_exports, "waitForProperty", {
    enumerable: true,
    get: function () {
      return _waitFor.waitForProperty;
    }
  });
  Object.defineProperty(_exports, "waitForQueue", {
    enumerable: true,
    get: function () {
      return _waitFor.waitForQueue;
    }
  });
});
;define("ember-cookies/services/cookies", ["exports", "@ember/utils", "@ember/object", "@ember/debug", "@ember/application", "@ember/service", "@ember/polyfills", "ember-cookies/utils/serialize-cookie"], function (_exports, _utils, _object, _debug, _application, _service, _polyfills, _serializeCookie) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const {
    keys
  } = Object;
  const assign = Object.assign || _polyfills.assign || _polyfills.merge;
  const DEFAULTS = {
    raw: false
  };
  const MAX_COOKIE_BYTE_LENGTH = 4096;
  var _default = _exports.default = _service.default.extend({
    init() {
      this._super(...arguments);
      this._document = this._document || window.document;
      if (typeof this._fastBoot === 'undefined') {
        let owner = (0, _application.getOwner)(this);
        this._fastBoot = owner.lookup('service:fastboot');
      }
    },
    _getDocumentCookies() {
      let all = this._document.cookie.split(';');
      let filtered = this._filterDocumentCookies(all);
      return filtered.reduce((acc, cookie) => {
        if (!(0, _utils.isEmpty)(cookie)) {
          let [key, value] = cookie;
          acc[key.trim()] = (value || '').trim();
        }
        return acc;
      }, {});
    },
    _getFastBootCookies() {
      let fastBootCookies = (0, _object.get)(this._fastBoot, 'request.cookies');
      fastBootCookies = keys(fastBootCookies).reduce((acc, name) => {
        let value = fastBootCookies[name];
        acc[name] = {
          value
        };
        return acc;
      }, {});
      let fastBootCookiesCache = this._fastBootCookiesCache || {};
      fastBootCookies = assign({}, fastBootCookies, fastBootCookiesCache);
      this._fastBootCookiesCache = fastBootCookies;
      return this._filterCachedFastBootCookies(fastBootCookies);
    },
    read(name, options = {}) {
      options = assign({}, DEFAULTS, options || {});
      (true && !((0, _utils.isEmpty)(options.domain) && (0, _utils.isEmpty)(options.expires) && (0, _utils.isEmpty)(options.maxAge) && (0, _utils.isEmpty)(options.path)) && (0, _debug.assert)('Domain, Expires, Max-Age, and Path options cannot be set when reading cookies', (0, _utils.isEmpty)(options.domain) && (0, _utils.isEmpty)(options.expires) && (0, _utils.isEmpty)(options.maxAge) && (0, _utils.isEmpty)(options.path)));
      let all;
      if (this._isFastBoot()) {
        all = this._getFastBootCookies();
      } else {
        all = this._getDocumentCookies();
      }
      if (name) {
        return this._decodeValue(all[name], options.raw);
      } else {
        keys(all).forEach(name => all[name] = this._decodeValue(all[name], options.raw));
        return all;
      }
    },
    write(name, value, options = {}) {
      options = assign({}, DEFAULTS, options || {});
      (true && !(!options.signed) && (0, _debug.assert)("Cookies cannot be set as signed as signed cookies would not be modifyable in the browser as it has no knowledge of the express server's signing key!", !options.signed));
      (true && !((0, _utils.isEmpty)(options.expires) || (0, _utils.isEmpty)(options.maxAge)) && (0, _debug.assert)('Cookies cannot be set with both maxAge and an explicit expiration time!', (0, _utils.isEmpty)(options.expires) || (0, _utils.isEmpty)(options.maxAge)));
      value = this._encodeValue(value, options.raw);
      (true && !(this._isCookieSizeAcceptable(value)) && (0, _debug.assert)(`Cookies larger than ${MAX_COOKIE_BYTE_LENGTH} bytes are not supported by most browsers!`, this._isCookieSizeAcceptable(value)));
      if (this._isFastBoot()) {
        this._writeFastBootCookie(name, value, options);
      } else {
        (true && !(!options.httpOnly) && (0, _debug.assert)('Cookies cannot be set to be HTTP-only from a browser!', !options.httpOnly));
        options.path = options.path || this._normalizedDefaultPath();
        this._writeDocumentCookie(name, value, options);
      }
    },
    clear(name, options = {}) {
      options = assign({}, options || {});
      (true && !((0, _utils.isEmpty)(options.expires) && (0, _utils.isEmpty)(options.maxAge) && (0, _utils.isEmpty)(options.raw)) && (0, _debug.assert)('Expires, Max-Age, and raw options cannot be set when clearing cookies', (0, _utils.isEmpty)(options.expires) && (0, _utils.isEmpty)(options.maxAge) && (0, _utils.isEmpty)(options.raw)));
      options.expires = new Date('1970-01-01');
      options.path = options.path || this._normalizedDefaultPath();
      this.write(name, null, options);
    },
    exists(name) {
      let all;
      if (this._isFastBoot()) {
        all = this._getFastBootCookies();
      } else {
        all = this._getDocumentCookies();
      }
      return all.hasOwnProperty(name);
    },
    _writeDocumentCookie(name, value, options = {}) {
      let serializedCookie = this._serializeCookie(name, value, options);
      this._document.cookie = serializedCookie;
    },
    _writeFastBootCookie(name, value, options = {}) {
      let responseHeaders = (0, _object.get)(this._fastBoot, 'response.headers');
      let serializedCookie = this._serializeCookie(...arguments);
      if (!(0, _utils.isEmpty)(options.maxAge)) {
        options.maxAge *= 1000;
      }
      this._cacheFastBootCookie(...arguments);
      let replaced = false;
      let existing = responseHeaders.getAll('set-cookie');
      for (let i = 0; i < existing.length; i++) {
        if (existing[i].startsWith(`${name}=`)) {
          existing[i] = serializedCookie;
          replaced = true;
          break;
        }
      }
      if (!replaced) {
        responseHeaders.append('set-cookie', serializedCookie);
      }
    },
    _cacheFastBootCookie(name, value, options = {}) {
      let fastBootCache = this._fastBootCookiesCache || {};
      let cachedOptions = assign({}, options);
      if (cachedOptions.maxAge) {
        let expires = new Date();
        expires.setSeconds(expires.getSeconds() + options.maxAge);
        cachedOptions.expires = expires;
        delete cachedOptions.maxAge;
      }
      fastBootCache[name] = {
        value,
        options: cachedOptions
      };
      this._fastBootCookiesCache = fastBootCache;
    },
    _filterCachedFastBootCookies(fastBootCookies) {
      let {
        path: requestPath,
        protocol
      } = (0, _object.get)(this._fastBoot, 'request');

      // cannot use deconstruct here
      let host = (0, _object.get)(this._fastBoot, 'request.host');
      return keys(fastBootCookies).reduce((acc, name) => {
        let {
          value,
          options
        } = fastBootCookies[name];
        options = options || {};
        let {
          path: optionsPath,
          domain,
          expires,
          secure
        } = options;
        if (optionsPath && requestPath.indexOf(optionsPath) !== 0) {
          return acc;
        }
        if (domain && host.indexOf(domain) + domain.length !== host.length) {
          return acc;
        }
        if (expires && expires < new Date()) {
          return acc;
        }
        if (secure && !(protocol || '').match(/^https/)) {
          return acc;
        }
        acc[name] = value;
        return acc;
      }, {});
    },
    _encodeValue(value, raw) {
      if ((0, _utils.isNone)(value)) {
        return '';
      } else if (raw) {
        return value;
      } else {
        return encodeURIComponent(value);
      }
    },
    _decodeValue(value, raw) {
      if ((0, _utils.isNone)(value) || raw) {
        return value;
      } else {
        return decodeURIComponent(value);
      }
    },
    _filterDocumentCookies(unfilteredCookies) {
      return unfilteredCookies.map(c => {
        let separatorIndex = c.indexOf('=');
        return [c.substring(0, separatorIndex), c.substring(separatorIndex + 1)];
      }).filter(c => c.length === 2 && (0, _utils.isPresent)(c[0]));
    },
    _serializeCookie(name, value, options = {}) {
      return (0, _serializeCookie.serializeCookie)(name, value, options);
    },
    _isCookieSizeAcceptable(value) {
      // Counting bytes varies Pre-ES6 and in ES6
      // This snippet counts the bytes in the value
      // about to be stored as the cookie:
      // See https://stackoverflow.com/a/25994411/6657064
      let _byteCount = 0;
      let i = 0;
      let c;
      while (c = value.charCodeAt(i++)) {
        /* eslint-disable no-bitwise */
        _byteCount += c >> 11 ? 3 : c >> 7 ? 2 : 1;
        /* eslint-enable no-bitwise */
      }

      return _byteCount < MAX_COOKIE_BYTE_LENGTH;
    },
    _normalizedDefaultPath() {
      if (!this._isFastBoot()) {
        let pathname = window.location.pathname;
        return pathname.substring(0, pathname.lastIndexOf('/'));
      }
    },
    _isFastBoot() {
      return this._fastBoot && this._fastBoot.isFastBoot;
    }
  });
});
;define("ember-cookies/utils/serialize-cookie", ["exports", "@ember/utils"], function (_exports, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.serializeCookie = void 0;
  const serializeCookie = (name, value, options = {}) => {
    let cookie = `${name}=${value}`;
    if (!(0, _utils.isEmpty)(options.domain)) {
      cookie = `${cookie}; domain=${options.domain}`;
    }
    if ((0, _utils.typeOf)(options.expires) === 'date') {
      cookie = `${cookie}; expires=${options.expires.toUTCString()}`;
    }
    if (!(0, _utils.isEmpty)(options.maxAge)) {
      cookie = `${cookie}; max-age=${options.maxAge}`;
    }
    if (options.secure) {
      cookie = `${cookie}; secure`;
    }
    if (options.httpOnly) {
      cookie = `${cookie}; httpOnly`;
    }
    if (!(0, _utils.isEmpty)(options.path)) {
      cookie = `${cookie}; path=${options.path}`;
    }
    if (!(0, _utils.isEmpty)(options.sameSite)) {
      cookie = `${cookie}; SameSite=${options.sameSite}`;
    }
    return cookie;
  };
  _exports.serializeCookie = serializeCookie;
});
;define('ember-data/-private', ['exports', '@ember-data/store', '@ember/application/namespace', 'ember', 'ember-data/version', '@ember-data/model/-private', '@ember-data/store/-private', '@ember-data/record-data/-private'], (function (exports, store, Namespace, Ember, VERSION, Private, Private$1, Private$2) { 'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var store__default = /*#__PURE__*/_interopDefaultLegacy(store);
  var Namespace__default = /*#__PURE__*/_interopDefaultLegacy(Namespace);
  var Ember__default = /*#__PURE__*/_interopDefaultLegacy(Ember);
  var VERSION__default = /*#__PURE__*/_interopDefaultLegacy(VERSION);

  const DS = Namespace__default["default"].create({
    VERSION: VERSION__default["default"],
    name: 'DS'
  });
  if (Ember__default["default"].libraries) {
    Ember__default["default"].libraries.registerCoreLibrary('Ember Data', VERSION__default["default"]);
  }

  Object.defineProperty(exports, 'Store', {
    enumerable: true,
    get: function () { return store__default["default"]; }
  });
  Object.defineProperty(exports, 'Errors', {
    enumerable: true,
    get: function () { return Private.Errors; }
  });
  Object.defineProperty(exports, 'ManyArray', {
    enumerable: true,
    get: function () { return Private.ManyArray; }
  });
  Object.defineProperty(exports, 'PromiseManyArray', {
    enumerable: true,
    get: function () { return Private.PromiseManyArray; }
  });
  Object.defineProperty(exports, 'AdapterPopulatedRecordArray', {
    enumerable: true,
    get: function () { return Private$1.AdapterPopulatedRecordArray; }
  });
  Object.defineProperty(exports, 'InternalModel', {
    enumerable: true,
    get: function () { return Private$1.InternalModel; }
  });
  Object.defineProperty(exports, 'PromiseArray', {
    enumerable: true,
    get: function () { return Private$1.PromiseArray; }
  });
  Object.defineProperty(exports, 'PromiseObject', {
    enumerable: true,
    get: function () { return Private$1.PromiseObject; }
  });
  Object.defineProperty(exports, 'RecordArray', {
    enumerable: true,
    get: function () { return Private$1.RecordArray; }
  });
  Object.defineProperty(exports, 'RecordArrayManager', {
    enumerable: true,
    get: function () { return Private$1.RecordArrayManager; }
  });
  Object.defineProperty(exports, 'RootState', {
    enumerable: true,
    get: function () { return Private$1.RootState; }
  });
  Object.defineProperty(exports, 'Snapshot', {
    enumerable: true,
    get: function () { return Private$1.Snapshot; }
  });
  Object.defineProperty(exports, 'SnapshotRecordArray', {
    enumerable: true,
    get: function () { return Private$1.SnapshotRecordArray; }
  });
  Object.defineProperty(exports, 'coerceId', {
    enumerable: true,
    get: function () { return Private$1.coerceId; }
  });
  Object.defineProperty(exports, 'normalizeModelName', {
    enumerable: true,
    get: function () { return Private$1.normalizeModelName; }
  });
  Object.defineProperty(exports, 'RecordData', {
    enumerable: true,
    get: function () { return Private$2.RecordData; }
  });
  Object.defineProperty(exports, 'Relationship', {
    enumerable: true,
    get: function () { return Private$2.Relationship; }
  });
  exports.DS = DS;

  Object.defineProperty(exports, '__esModule', { value: true });

}));

;define("ember-data/adapter", ["exports", "@ember-data/adapter"], function (_exports, _adapter) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _adapter.default;
    }
  });
  0; //eaimeta@70e063a35619d71f0,"@ember-data/adapter"eaimeta@70e063a35619d71f
});
;define("ember-data/adapters/errors", ["exports", "@ember-data/adapter/error"], function (_exports, _error) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "AbortError", {
    enumerable: true,
    get: function () {
      return _error.AbortError;
    }
  });
  Object.defineProperty(_exports, "AdapterError", {
    enumerable: true,
    get: function () {
      return _error.default;
    }
  });
  Object.defineProperty(_exports, "ConflictError", {
    enumerable: true,
    get: function () {
      return _error.ConflictError;
    }
  });
  Object.defineProperty(_exports, "ForbiddenError", {
    enumerable: true,
    get: function () {
      return _error.ForbiddenError;
    }
  });
  Object.defineProperty(_exports, "InvalidError", {
    enumerable: true,
    get: function () {
      return _error.InvalidError;
    }
  });
  Object.defineProperty(_exports, "NotFoundError", {
    enumerable: true,
    get: function () {
      return _error.NotFoundError;
    }
  });
  Object.defineProperty(_exports, "ServerError", {
    enumerable: true,
    get: function () {
      return _error.ServerError;
    }
  });
  Object.defineProperty(_exports, "TimeoutError", {
    enumerable: true,
    get: function () {
      return _error.TimeoutError;
    }
  });
  Object.defineProperty(_exports, "UnauthorizedError", {
    enumerable: true,
    get: function () {
      return _error.UnauthorizedError;
    }
  });
  Object.defineProperty(_exports, "errorsArrayToHash", {
    enumerable: true,
    get: function () {
      return _error.errorsArrayToHash;
    }
  });
  Object.defineProperty(_exports, "errorsHashToArray", {
    enumerable: true,
    get: function () {
      return _error.errorsHashToArray;
    }
  });
  0; //eaimeta@70e063a35619d71f0,"@ember-data/adapter/error"eaimeta@70e063a35619d71f
});
;define("ember-data/adapters/json-api", ["exports", "@ember-data/adapter/json-api"], function (_exports, _jsonApi) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _jsonApi.default;
    }
  });
  0; //eaimeta@70e063a35619d71f0,"@ember-data/adapter/json-api"eaimeta@70e063a35619d71f
});
;define("ember-data/adapters/rest", ["exports", "@ember-data/adapter/rest"], function (_exports, _rest) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _rest.default;
    }
  });
  0; //eaimeta@70e063a35619d71f0,"@ember-data/adapter/rest"eaimeta@70e063a35619d71f
});
;define("ember-data/attr", ["exports", "@ember-data/model"], function (_exports, _model) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _model.attr;
    }
  });
  0; //eaimeta@70e063a35619d71f0,"@ember-data/model"eaimeta@70e063a35619d71f
});
;define("ember-data/index", ["exports", "ember-inflector", "@ember/error", "@ember/version", "require", "@ember-data/adapter", "@ember-data/adapter/error", "@ember-data/adapter/json-api", "@ember-data/adapter/rest", "@ember-data/model", "@ember-data/serializer", "@ember-data/serializer/-private", "@ember-data/serializer/json", "@ember-data/serializer/json-api", "@ember-data/serializer/rest", "@ember-data/serializer/transform", "@ember-data/store", "ember-data/-private", "ember-data/setup-container"], function (_exports, _emberInflector, _error, _version, _require, _adapter, _error2, _jsonApi, _rest, _model, _serializer, _private, _json, _jsonApi2, _rest2, _transform, _store, _private2, _setupContainer) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"ember-inflector",0,"@ember/error",0,"@ember/version",0,"require",0,"@ember-data/adapter",0,"@ember-data/adapter/error",0,"@ember-data/adapter/json-api",0,"@ember-data/adapter/rest",0,"@ember-data/model",0,"@ember-data/serializer",0,"@ember-data/serializer/-private",0,"@ember-data/serializer/json",0,"@ember-data/serializer/json-api",0,"@ember-data/serializer/rest",0,"@ember-data/serializer/transform",0,"@ember-data/store",0,"ember-data/-private",0,"ember-data/setup-container"eaimeta@70e063a35619d71f
  const HAS_DEBUG_PACKAGE = (0, _require.has)('@ember-data/debug') || false;
  if (_version.VERSION.match(/^1\.([0-9]|1[0-2])\./)) {
    throw new _error.default('Ember Data requires at least Ember 1.13.0, but you have ' + _version.VERSION + '. Please upgrade your version of Ember, then upgrade Ember Data.');
  }
  _private2.DS.Store = _store.default;
  _private2.DS.PromiseArray = _private2.PromiseArray;
  _private2.DS.PromiseObject = _private2.PromiseObject;
  _private2.DS.PromiseManyArray = _private2.PromiseManyArray;
  _private2.DS.Model = _model.default;
  _private2.DS.RootState = _private2.RootState;
  _private2.DS.attr = _model.attr;
  _private2.DS.Errors = _private2.Errors;
  _private2.DS.InternalModel = _private2.InternalModel;
  _private2.DS.Snapshot = _private2.Snapshot;
  _private2.DS.Adapter = _adapter.default;
  _private2.DS.AdapterError = _error2.default;
  _private2.DS.InvalidError = _error2.InvalidError;
  _private2.DS.TimeoutError = _error2.TimeoutError;
  _private2.DS.AbortError = _error2.AbortError;
  _private2.DS.UnauthorizedError = _error2.UnauthorizedError;
  _private2.DS.ForbiddenError = _error2.ForbiddenError;
  _private2.DS.NotFoundError = _error2.NotFoundError;
  _private2.DS.ConflictError = _error2.ConflictError;
  _private2.DS.ServerError = _error2.ServerError;
  _private2.DS.errorsHashToArray = _error2.errorsHashToArray;
  _private2.DS.errorsArrayToHash = _error2.errorsArrayToHash;
  _private2.DS.Serializer = _serializer.default;
  if (HAS_DEBUG_PACKAGE) {
    _private2.DS.DebugAdapter = (0, _require.default)("@ember-data/debug").default;
  }
  _private2.DS.RecordArray = _private2.RecordArray;
  _private2.DS.AdapterPopulatedRecordArray = _private2.AdapterPopulatedRecordArray;
  _private2.DS.ManyArray = _private2.ManyArray;
  _private2.DS.RecordArrayManager = _private2.RecordArrayManager;
  _private2.DS.RESTAdapter = _rest.default;
  _private2.DS.BuildURLMixin = _adapter.BuildURLMixin;
  _private2.DS.RESTSerializer = _rest2.default;
  _private2.DS.JSONSerializer = _json.default;
  _private2.DS.JSONAPIAdapter = _jsonApi.default;
  _private2.DS.JSONAPISerializer = _jsonApi2.default;
  _private2.DS.Transform = _transform.default;
  _private2.DS.DateTransform = _private.DateTransform;
  _private2.DS.StringTransform = _private.StringTransform;
  _private2.DS.NumberTransform = _private.NumberTransform;
  _private2.DS.BooleanTransform = _private.BooleanTransform;
  _private2.DS.EmbeddedRecordsMixin = _rest2.EmbeddedRecordsMixin;
  _private2.DS.belongsTo = _model.belongsTo;
  _private2.DS.hasMany = _model.hasMany;
  _private2.DS.Relationship = _private2.Relationship;
  _private2.DS._setupContainer = _setupContainer.default;
  Object.defineProperty(_private2.DS, 'normalizeModelName', {
    enumerable: true,
    writable: false,
    configurable: false,
    value: _store.normalizeModelName
  });
  var _default = _exports.default = _private2.DS;
});
;define("ember-data/model", ["exports", "@ember-data/model"], function (_exports, _model) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _model.default;
    }
  });
  0; //eaimeta@70e063a35619d71f0,"@ember-data/model"eaimeta@70e063a35619d71f
});
;define("ember-data/relationships", ["exports", "@ember-data/model"], function (_exports, _model) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "belongsTo", {
    enumerable: true,
    get: function () {
      return _model.belongsTo;
    }
  });
  Object.defineProperty(_exports, "hasMany", {
    enumerable: true,
    get: function () {
      return _model.hasMany;
    }
  });
  0; //eaimeta@70e063a35619d71f0,"@ember-data/model"eaimeta@70e063a35619d71f
});
;define("ember-data/serializer", ["exports", "@ember-data/serializer"], function (_exports, _serializer) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _serializer.default;
    }
  });
  0; //eaimeta@70e063a35619d71f0,"@ember-data/serializer"eaimeta@70e063a35619d71f
});
;define("ember-data/serializers/embedded-records-mixin", ["exports", "@ember-data/serializer/rest"], function (_exports, _rest) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _rest.EmbeddedRecordsMixin;
    }
  });
  0; //eaimeta@70e063a35619d71f0,"@ember-data/serializer/rest"eaimeta@70e063a35619d71f
});
;define("ember-data/serializers/json-api", ["exports", "@ember-data/serializer/json-api"], function (_exports, _jsonApi) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _jsonApi.default;
    }
  });
  0; //eaimeta@70e063a35619d71f0,"@ember-data/serializer/json-api"eaimeta@70e063a35619d71f
});
;define("ember-data/serializers/json", ["exports", "@ember-data/serializer/json"], function (_exports, _json) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _json.default;
    }
  });
  0; //eaimeta@70e063a35619d71f0,"@ember-data/serializer/json"eaimeta@70e063a35619d71f
});
;define("ember-data/serializers/rest", ["exports", "@ember-data/serializer/rest"], function (_exports, _rest) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _rest.default;
    }
  });
  0; //eaimeta@70e063a35619d71f0,"@ember-data/serializer/rest"eaimeta@70e063a35619d71f
});
;define("ember-data/setup-container", ["exports", "@ember-data/store"], function (_exports, _store) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = setupContainer;
  0; //eaimeta@70e063a35619d71f0,"@ember-data/store"eaimeta@70e063a35619d71f
  function initializeStore(application) {
    application.registerOptionsForType('serializer', {
      singleton: false
    });
    application.registerOptionsForType('adapter', {
      singleton: false
    });
    if (!application.hasRegistration('service:store')) {
      application.register('service:store', _store.default);
    }
  }
  function setupContainer(application) {
    initializeStore(application);
  }
});
;define("ember-data/store", ["exports", "@ember-data/store"], function (_exports, _store) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _store.default;
    }
  });
  0; //eaimeta@70e063a35619d71f0,"@ember-data/store"eaimeta@70e063a35619d71f
});
;define("ember-data/transform", ["exports", "@ember-data/serializer/transform"], function (_exports, _transform) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _transform.default;
    }
  });
  0; //eaimeta@70e063a35619d71f0,"@ember-data/serializer/transform"eaimeta@70e063a35619d71f
});
;define("ember-data/version", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71feaimeta@70e063a35619d71f
  var _default = _exports.default = "4.4.2";
});
;define("ember-element-helper/helpers/element", ["exports", "@ember/component/helper", "@ember/debug", "@ember/component", "@embroider/util"], function (_exports, _helper, _debug, _component, _util) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } // eslint-disable-next-line ember/no-classic-components
  function UNINITIALIZED() {}
  class ElementHelper extends _helper.default {
    constructor() {
      super(...arguments);
      this.tagName = UNINITIALIZED;
      this.componentClass = null;
    }
    compute(params, hash) {
      (true && !(params.length === 1) && (0, _debug.assert)('The `element` helper takes a single positional argument', params.length === 1));
      (true && !(Object.keys(hash).length === 0) && (0, _debug.assert)('The `element` helper does not take any named arguments', Object.keys(hash).length === 0));
      let tagName = params[0];
      if (tagName !== this.tagName) {
        this.tagName = tagName;
        if (typeof tagName === 'string') {
          this.componentClass = (0, _util.ensureSafeComponent)(class DynamicElement extends _component.default {
            constructor(...args) {
              super(...args);
              _defineProperty(this, "tagName", tagName);
            } // eslint-disable-line ember/require-tagless-components
          }, this);
        } else {
          this.componentClass = null;
          (0, _debug.runInDebug)(() => {
            let message = 'The argument passed to the `element` helper must be a string';
            try {
              message += ` (you passed \`${tagName}\`)`;
            } catch (e) {
              // ignore
            }
            (true && !(tagName === undefined || tagName === null) && (0, _debug.assert)(message, tagName === undefined || tagName === null));
          });
        }
      }
      return this.componentClass;
    }
  }
  _exports.default = ElementHelper;
});
;define("ember-fetch/errors", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.isAbortError = isAbortError;
  _exports.isBadRequestResponse = isBadRequestResponse;
  _exports.isConflictResponse = isConflictResponse;
  _exports.isForbiddenResponse = isForbiddenResponse;
  _exports.isGoneResponse = isGoneResponse;
  _exports.isInvalidResponse = isInvalidResponse;
  _exports.isNotFoundResponse = isNotFoundResponse;
  _exports.isServerErrorResponse = isServerErrorResponse;
  _exports.isUnauthorizedResponse = isUnauthorizedResponse;
  /**
   * Checks if the given response represents an unauthorized request error
   */
  function isUnauthorizedResponse(response) {
    return response.status === 401;
  }

  /**
   * Checks if the given response represents a forbidden request error
   */
  function isForbiddenResponse(response) {
    return response.status === 403;
  }

  /**
   * Checks if the given response represents an invalid request error
   */
  function isInvalidResponse(response) {
    return response.status === 422;
  }

  /**
   * Checks if the given response represents a bad request error
   */
  function isBadRequestResponse(response) {
    return response.status === 400;
  }

  /**
   * Checks if the given response represents a "not found" error
   */
  function isNotFoundResponse(response) {
    return response.status === 404;
  }

  /**
   * Checks if the given response represents a "gone" error
   */
  function isGoneResponse(response) {
    return response.status === 410;
  }

  /**
   * Checks if the given error is an "abort" error
   */
  function isAbortError(error) {
    return error.name == 'AbortError';
  }

  /**
   * Checks if the given response represents a conflict error
   */
  function isConflictResponse(response) {
    return response.status === 409;
  }

  /**
   * Checks if the given response represents a server error
   */
  function isServerErrorResponse(response) {
    return response.status >= 500 && response.status < 600;
  }
});
;define("ember-fetch/types", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.isPlainObject = isPlainObject;
  function isPlainObject(obj) {
    return Object.prototype.toString.call(obj) === '[object Object]';
  }
});
;define("ember-fetch/utils/determine-body-promise", ["exports", "@ember/debug"], function (_exports, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = determineBodyPromise;
  /**
   * Function that always attempts to parse the response as json, and if an error is thrown,
   * returns `undefined` if the response is successful and has a status code of 204 (No Content),
   * or 205 (Reset Content) or if the request method was 'HEAD', and the plain payload otherwise.
   */
  function determineBodyPromise(response, requestData) {
    return response.text().then(function (payload) {
      let ret = payload;
      try {
        ret = JSON.parse(payload);
      } catch (error) {
        if (!(error instanceof SyntaxError)) {
          throw error;
        }
        const status = response.status;
        if (response.ok && (status === 204 || status === 205 || requestData.method === 'HEAD')) {
          ret = undefined;
        } else {
          (0, _debug.debug)(`This response was unable to be parsed as json: ${payload}`);
        }
      }
      return ret;
    });
  }
});
;define("ember-fetch/utils/mung-options-for-fetch", ["exports", "@ember/polyfills", "ember-fetch/utils/serialize-query-params", "ember-fetch/types"], function (_exports, _polyfills, _serializeQueryParams, _types) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mungOptionsForFetch;
  /**
   * Helper function that translates the options passed to `jQuery.ajax` into a format that `fetch` expects.
   */
  function mungOptionsForFetch(options) {
    const hash = (0, _polyfills.assign)({
      credentials: 'same-origin'
    }, options);

    // Default to 'GET' in case `type` is not passed in (mimics jQuery.ajax).
    hash.method = (hash.method || hash.type || 'GET').toUpperCase();
    if (hash.data) {
      // GET and HEAD requests can't have a `body`
      if (hash.method === 'GET' || hash.method === 'HEAD') {
        // If no options are passed, Ember Data sets `data` to an empty object, which we test for.
        if (Object.keys(hash.data).length) {
          // Test if there are already query params in the url (mimics jQuey.ajax).
          const queryParamDelimiter = hash.url.indexOf('?') > -1 ? '&' : '?';
          hash.url += `${queryParamDelimiter}${(0, _serializeQueryParams.serializeQueryParams)(hash.data)}`;
        }
      } else {
        // NOTE: a request's body cannot be a POJO, so we stringify it if it is.
        // JSON.stringify removes keys with values of `undefined` (mimics jQuery.ajax).
        // If the data is not a POJO (it's a String, FormData, etc), we just set it.
        // If the data is a string, we assume it's a stringified object.
        if ((0, _types.isPlainObject)(hash.data)) {
          hash.body = JSON.stringify(hash.data);
        } else {
          hash.body = hash.data;
        }
      }
    }
    return hash;
  }
});
;define("ember-fetch/utils/serialize-query-params", ["exports", "ember-fetch/types"], function (_exports, _types) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.serializeQueryParams = serializeQueryParams;
  const RBRACKET = /\[\]$/;

  /**
   * Helper function that turns the data/body of a request into a query param string.
   * This is directly copied from jQuery.param.
   */
  function serializeQueryParams(queryParamsObject) {
    var s = [];
    function buildParams(prefix, obj) {
      var i, len, key;
      if (prefix) {
        if (Array.isArray(obj)) {
          for (i = 0, len = obj.length; i < len; i++) {
            if (RBRACKET.test(prefix)) {
              add(s, prefix, obj[i]);
            } else {
              buildParams(prefix + '[' + (typeof obj[i] === 'object' ? i : '') + ']', obj[i]);
            }
          }
        } else if ((0, _types.isPlainObject)(obj)) {
          for (key in obj) {
            buildParams(prefix + '[' + key + ']', obj[key]);
          }
        } else {
          add(s, prefix, obj);
        }
      } else if (Array.isArray(obj)) {
        for (i = 0, len = obj.length; i < len; i++) {
          add(s, obj[i].name, obj[i].value);
        }
      } else {
        for (key in obj) {
          buildParams(key, obj[key]);
        }
      }
      return s;
    }
    return buildParams('', queryParamsObject).join('&').replace(/%20/g, '+');
  }

  /**
   * Part of the `serializeQueryParams` helper function.
   */
  function add(s, k, v) {
    // Strip out keys with undefined value and replace null values with
    // empty strings (mimics jQuery.ajax)
    if (v === undefined) {
      return;
    } else if (v === null) {
      v = '';
    }
    v = typeof v === 'function' ? v() : v;
    s[s.length] = `${encodeURIComponent(k)}=${encodeURIComponent(v)}`;
  }
  var _default = _exports.default = serializeQueryParams;
});
;define("ember-inflector/index", ["exports", "ember-inflector/lib/system"], function (_exports, _system) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  Object.defineProperty(_exports, "pluralize", {
    enumerable: true,
    get: function () {
      return _system.pluralize;
    }
  });
  Object.defineProperty(_exports, "singularize", {
    enumerable: true,
    get: function () {
      return _system.singularize;
    }
  });
  var _default = _exports.default = _system.Inflector;
});
;define("ember-inflector/lib/helpers/pluralize", ["exports", "ember-inflector", "ember-inflector/lib/utils/make-helper"], function (_exports, _emberInflector, _makeHelper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
   *
   * If you have Ember Inflector (such as if Ember Data is present),
   * pluralize a word. For example, turn "ox" into "oxen".
   *
   * Example:
   *
   * {{pluralize count myProperty}}
   * {{pluralize 1 "oxen"}}
   * {{pluralize myProperty}}
   * {{pluralize "ox"}}
   *
   * @for Ember.HTMLBars.helpers
   * @method pluralize
   * @param {Number|Property} [count] count of objects
   * @param {String|Property} word word to pluralize
   */
  var _default = _exports.default = (0, _makeHelper.default)(function (params, hash) {
    let fullParams = new Array(...params);
    if (fullParams.length === 2) {
      fullParams.push({
        withoutCount: hash["without-count"]
      });
    }
    return (0, _emberInflector.pluralize)(...fullParams);
  });
});
;define("ember-inflector/lib/helpers/singularize", ["exports", "ember-inflector", "ember-inflector/lib/utils/make-helper"], function (_exports, _emberInflector, _makeHelper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
   *
   * If you have Ember Inflector (such as if Ember Data is present),
   * singularize a word. For example, turn "oxen" into "ox".
   *
   * Example:
   *
   * {{singularize myProperty}}
   * {{singularize "oxen"}}
   *
   * @for Ember.HTMLBars.helpers
   * @method singularize
   * @param {String|Property} word word to singularize
  */
  var _default = _exports.default = (0, _makeHelper.default)(function (params) {
    return (0, _emberInflector.singularize)(params[0]);
  });
});
;define("ember-inflector/lib/system", ["exports", "ember-inflector/lib/system/inflector", "ember-inflector/lib/system/string"], function (_exports, _inflector, _string) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "Inflector", {
    enumerable: true,
    get: function () {
      return _inflector.default;
    }
  });
  Object.defineProperty(_exports, "pluralize", {
    enumerable: true,
    get: function () {
      return _string.pluralize;
    }
  });
  Object.defineProperty(_exports, "singularize", {
    enumerable: true,
    get: function () {
      return _string.singularize;
    }
  });
});
;define("ember-inflector/lib/system/inflections", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = {
    plurals: [[/$/, 's'], [/s$/i, 's'], [/^(ax|test)is$/i, '$1es'], [/(octop|vir)us$/i, '$1i'], [/(octop|vir)i$/i, '$1i'], [/(alias|status|bonus)$/i, '$1es'], [/(bu)s$/i, '$1ses'], [/(buffal|tomat)o$/i, '$1oes'], [/([ti])um$/i, '$1a'], [/([ti])a$/i, '$1a'], [/sis$/i, 'ses'], [/(?:([^f])fe|([lr])f)$/i, '$1$2ves'], [/(hive)$/i, '$1s'], [/([^aeiouy]|qu)y$/i, '$1ies'], [/(x|ch|ss|sh)$/i, '$1es'], [/(matr|vert|ind)(?:ix|ex)$/i, '$1ices'], [/^(m|l)ouse$/i, '$1ice'], [/^(m|l)ice$/i, '$1ice'], [/^(ox)$/i, '$1en'], [/^(oxen)$/i, '$1'], [/(quiz)$/i, '$1zes']],
    singular: [[/s$/i, ''], [/(ss)$/i, '$1'], [/(n)ews$/i, '$1ews'], [/([ti])a$/i, '$1um'], [/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)(sis|ses)$/i, '$1sis'], [/(^analy)(sis|ses)$/i, '$1sis'], [/([^f])ves$/i, '$1fe'], [/(hive)s$/i, '$1'], [/(tive)s$/i, '$1'], [/([lr])ves$/i, '$1f'], [/([^aeiouy]|qu)ies$/i, '$1y'], [/(s)eries$/i, '$1eries'], [/(m)ovies$/i, '$1ovie'], [/(x|ch|ss|sh)es$/i, '$1'], [/^(m|l)ice$/i, '$1ouse'], [/(bus)(es)?$/i, '$1'], [/(o)es$/i, '$1'], [/(shoe)s$/i, '$1'], [/(cris|test)(is|es)$/i, '$1is'], [/^(a)x[ie]s$/i, '$1xis'], [/(octop|vir)(us|i)$/i, '$1us'], [/(alias|status|bonus)(es)?$/i, '$1'], [/^(ox)en/i, '$1'], [/(vert|ind)ices$/i, '$1ex'], [/(matr)ices$/i, '$1ix'], [/(quiz)zes$/i, '$1'], [/(database)s$/i, '$1']],
    irregularPairs: [['person', 'people'], ['man', 'men'], ['child', 'children'], ['sex', 'sexes'], ['move', 'moves'], ['cow', 'kine'], ['zombie', 'zombies']],
    uncountable: ['equipment', 'information', 'rice', 'money', 'species', 'series', 'fish', 'sheep', 'jeans', 'police']
  };
});
;define("ember-inflector/lib/system/inflector", ["exports", "@ember/string", "ember-inflector/lib/system/inflections"], function (_exports, _string, _inflections) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const BLANK_REGEX = /^\s*$/;
  const LAST_WORD_DASHED_REGEX = /([\w/-]+[_/\s-])([a-z\d]+$)/;
  const LAST_WORD_CAMELIZED_REGEX = /([\w/\s-]+)([A-Z][a-z\d]*$)/;
  const CAMELIZED_REGEX = /[A-Z][a-z\d]*$/;
  function loadUncountable(rules, uncountable) {
    for (let i = 0, length = uncountable.length; i < length; i++) {
      rules.uncountable[uncountable[i].toLowerCase()] = true;
    }
  }
  function loadIrregular(rules, irregularPairs) {
    let pair;
    for (let i = 0, length = irregularPairs.length; i < length; i++) {
      pair = irregularPairs[i];

      //pluralizing
      rules.irregular[pair[0].toLowerCase()] = pair[1];
      rules.irregular[pair[1].toLowerCase()] = pair[1];

      //singularizing
      rules.irregularInverse[pair[1].toLowerCase()] = pair[0];
      rules.irregularInverse[pair[0].toLowerCase()] = pair[0];
    }
  }

  /**
    Inflector.Ember provides a mechanism for supplying inflection rules for your
    application. Ember includes a default set of inflection rules, and provides an
    API for providing additional rules.
  
    Examples:
  
    Creating an inflector with no rules.
  
    ```js
    var inflector = new Ember.Inflector();
    ```
  
    Creating an inflector with the default ember ruleset.
  
    ```js
    var inflector = new Ember.Inflector(Ember.Inflector.defaultRules);
  
    inflector.pluralize('cow'); //=> 'kine'
    inflector.singularize('kine'); //=> 'cow'
    ```
  
    Creating an inflector and adding rules later.
  
    ```javascript
    var inflector = Ember.Inflector.inflector;
  
    inflector.pluralize('advice'); // => 'advices'
    inflector.uncountable('advice');
    inflector.pluralize('advice'); // => 'advice'
  
    inflector.pluralize('formula'); // => 'formulas'
    inflector.irregular('formula', 'formulae');
    inflector.pluralize('formula'); // => 'formulae'
  
    // you would not need to add these as they are the default rules
    inflector.plural(/$/, 's');
    inflector.singular(/s$/i, '');
    ```
  
    Creating an inflector with a nondefault ruleset.
  
    ```javascript
    var rules = {
      plurals:  [
        [ /$/, 's' ]
      ],
      singular: [
        [ /\s$/, '' ]
      ],
      irregularPairs: [
        [ 'cow', 'kine' ]
      ],
      uncountable: [ 'fish' ]
    };
  
    var inflector = new Ember.Inflector(rules);
    ```
  
    @class Inflector
    @namespace Ember
  */
  function Inflector(ruleSet) {
    ruleSet = ruleSet || {};
    ruleSet.uncountable = ruleSet.uncountable || makeDictionary();
    ruleSet.irregularPairs = ruleSet.irregularPairs || makeDictionary();
    const rules = this.rules = {
      plurals: ruleSet.plurals || [],
      singular: ruleSet.singular || [],
      irregular: makeDictionary(),
      irregularInverse: makeDictionary(),
      uncountable: makeDictionary()
    };
    loadUncountable(rules, ruleSet.uncountable);
    loadIrregular(rules, ruleSet.irregularPairs);
    this.enableCache();
  }
  if (!Object.create && !Object.create(null).hasOwnProperty) {
    throw new Error("This browser does not support Object.create(null), please polyfil with es5-sham: http://git.io/yBU2rg");
  }
  function makeDictionary() {
    var cache = Object.create(null);
    cache['_dict'] = null;
    delete cache['_dict'];
    return cache;
  }
  Inflector.prototype = {
    /**
      @public
       As inflections can be costly, and commonly the same subset of words are repeatedly
      inflected an optional cache is provided.
       @method enableCache
    */
    enableCache() {
      this.purgeCache();
      this.singularize = function (word) {
        this._cacheUsed = true;
        return this._sCache[word] || (this._sCache[word] = this._singularize(word));
      };
      this.pluralize = function (numberOrWord, word, options = {}) {
        this._cacheUsed = true;
        var cacheKey = [numberOrWord, word, options.withoutCount];
        return this._pCache[cacheKey] || (this._pCache[cacheKey] = this._pluralize(numberOrWord, word, options));
      };
    },
    /**
      @public
       @method purgeCache
    */
    purgeCache() {
      this._cacheUsed = false;
      this._sCache = makeDictionary();
      this._pCache = makeDictionary();
    },
    /**
      @public
      disable caching
       @method disableCache;
    */
    disableCache() {
      this._sCache = null;
      this._pCache = null;
      this.singularize = function (word) {
        return this._singularize(word);
      };
      this.pluralize = function () {
        return this._pluralize(...arguments);
      };
    },
    /**
      @method plural
      @param {RegExp} regex
      @param {String} string
    */
    plural(regex, string) {
      if (this._cacheUsed) {
        this.purgeCache();
      }
      this.rules.plurals.push([regex, string.toLowerCase()]);
    },
    /**
      @method singular
      @param {RegExp} regex
      @param {String} string
    */
    singular(regex, string) {
      if (this._cacheUsed) {
        this.purgeCache();
      }
      this.rules.singular.push([regex, string.toLowerCase()]);
    },
    /**
      @method uncountable
      @param {String} regex
    */
    uncountable(string) {
      if (this._cacheUsed) {
        this.purgeCache();
      }
      loadUncountable(this.rules, [string.toLowerCase()]);
    },
    /**
      @method irregular
      @param {String} singular
      @param {String} plural
    */
    irregular(singular, plural) {
      if (this._cacheUsed) {
        this.purgeCache();
      }
      loadIrregular(this.rules, [[singular, plural]]);
    },
    /**
      @method pluralize
      @param {String} word
    */
    pluralize() {
      return this._pluralize(...arguments);
    },
    _pluralize(wordOrCount, word, options = {}) {
      if (word === undefined) {
        return this.inflect(wordOrCount, this.rules.plurals, this.rules.irregular);
      }
      if (parseFloat(wordOrCount) !== 1) {
        word = this.inflect(word, this.rules.plurals, this.rules.irregular);
      }
      return options.withoutCount ? word : `${wordOrCount} ${word}`;
    },
    /**
      @method singularize
      @param {String} word
    */
    singularize(word) {
      return this._singularize(word);
    },
    _singularize(word) {
      return this.inflect(word, this.rules.singular, this.rules.irregularInverse);
    },
    /**
      @protected
       @method inflect
      @param {String} word
      @param {Object} typeRules
      @param {Object} irregular
    */
    inflect(word, typeRules, irregular) {
      let inflection, substitution, result, lowercase, wordSplit, lastWord, isBlank, isCamelized, rule, isUncountable;
      isBlank = !word || BLANK_REGEX.test(word);
      isCamelized = CAMELIZED_REGEX.test(word);
      if (isBlank) {
        return word;
      }
      lowercase = word.toLowerCase();
      wordSplit = LAST_WORD_DASHED_REGEX.exec(word) || LAST_WORD_CAMELIZED_REGEX.exec(word);
      if (wordSplit) {
        lastWord = wordSplit[2].toLowerCase();
      }
      isUncountable = this.rules.uncountable[lowercase] || this.rules.uncountable[lastWord];
      if (isUncountable) {
        return word;
      }
      for (rule in irregular) {
        if (lowercase.match(rule + "$")) {
          substitution = irregular[rule];
          if (isCamelized && irregular[lastWord]) {
            substitution = (0, _string.capitalize)(substitution);
            rule = (0, _string.capitalize)(rule);
          }
          return word.replace(new RegExp(rule, 'i'), substitution);
        }
      }
      for (var i = typeRules.length, min = 0; i > min; i--) {
        inflection = typeRules[i - 1];
        rule = inflection[0];
        if (rule.test(word)) {
          break;
        }
      }
      inflection = inflection || [];
      rule = inflection[0];
      substitution = inflection[1];
      result = word.replace(rule, substitution);
      return result;
    }
  };
  Inflector.defaultRules = _inflections.default;
  Inflector.inflector = new Inflector(_inflections.default);
  var _default = _exports.default = Inflector;
});
;define("ember-inflector/lib/system/string", ["exports", "ember-inflector/lib/system/inflector"], function (_exports, _inflector) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.pluralize = pluralize;
  _exports.singularize = singularize;
  function pluralize() {
    return _inflector.default.inflector.pluralize(...arguments);
  }
  function singularize(word) {
    return _inflector.default.inflector.singularize(word);
  }
});
;define("ember-inflector/lib/utils/make-helper", ["exports", "ember", "@ember/component/helper"], function (_exports, _ember, _helper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = makeHelper;
  function makeHelper(helperFunction) {
    if (_helper.default) {
      return _helper.default.helper(helperFunction);
    }
    if (_ember.default.HTMLBars) {
      return _ember.default.HTMLBars.makeBoundHelper(helperFunction);
    }
    return _ember.default.Handlebars.makeBoundHelper(helperFunction);
  }
});
;define("ember-load-initializers/index", ["exports", "require"], function (_exports, _require) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = loadInitializers;
  function resolveInitializer(moduleName) {
    var module = (0, _require.default)(moduleName, null, null, true);
    if (!module) {
      throw new Error(moduleName + ' must export an initializer.');
    }
    var initializer = module['default'];
    if (!initializer) {
      throw new Error(moduleName + ' must have a default export');
    }
    if (!initializer.name) {
      initializer.name = moduleName.slice(moduleName.lastIndexOf('/') + 1);
    }
    return initializer;
  }
  function registerInitializers(app, moduleNames) {
    for (var i = 0; i < moduleNames.length; i++) {
      app.initializer(resolveInitializer(moduleNames[i]));
    }
  }
  function registerInstanceInitializers(app, moduleNames) {
    for (var i = 0; i < moduleNames.length; i++) {
      app.instanceInitializer(resolveInitializer(moduleNames[i]));
    }
  }
  function _endsWith(str, suffix) {
    return str.indexOf(suffix, str.length - suffix.length) !== -1;
  }

  /**
   * Configure your application as it boots
   */
  function loadInitializers(app, prefix) {
    var initializerPrefix = prefix + '/initializers/';
    var instanceInitializerPrefix = prefix + '/instance-initializers/';
    var initializers = [];
    var instanceInitializers = [];
    // this is 2 pass because generally the first pass is the problem
    // and is reduced, and resolveInitializer has potential to deopt
    var moduleNames = Object.keys(requirejs._eak_seen);
    for (var i = 0; i < moduleNames.length; i++) {
      var moduleName = moduleNames[i];
      if (moduleName.lastIndexOf(initializerPrefix, 0) === 0) {
        if (!_endsWith(moduleName, '-test')) {
          initializers.push(moduleName);
        }
      } else if (moduleName.lastIndexOf(instanceInitializerPrefix, 0) === 0) {
        if (!_endsWith(moduleName, '-test')) {
          instanceInitializers.push(moduleName);
        }
      }
    }
    registerInitializers(app, initializers);
    registerInstanceInitializers(app, instanceInitializers);
  }
});
;define("ember-modifier/-private/class/modifier-manager", ["exports", "@ember/modifier", "@ember/destroyable", "ember-modifier/-private/class/modifier", "ember-modifier/-private/compat"], function (_exports, _modifier, _destroyable, _modifier2, _compat) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function destroyModifier(modifier) {
    modifier.willRemove();
    modifier.willDestroy();
  }

  /**
   * The state bucket used throughout the life-cycle of the modifier. Basically a
   * state *machine*, where the framework calls us with the version we hand back
   * to it at each phase. The two states are the two `extends` versions of this
   * below.
   *
   * @internal
   */

  /**
   * The `State` after calling `createModifier`, and therefore the state available
   * at the start of `InstallModifier`.
   * @internal
   */

  /**
   * The `State` after calling `installModifier`, and therefore the state
   * available in all `updateModifier` calls and in `destroyModifier`.
   * @internal
   */

  // Wraps the unsafe (b/c it mutates, rather than creating new state) code that
  // TS does not yet understand.
  function installElement(state, element) {
    // SAFETY: this cast represents how we are actually handling the state machine
    // transition: from this point forward in the lifecycle of the modifier, it
    // always behaves as `InstalledState<S>`. It is safe because, and *only*
    // because, we immediately initialize `element`. (We cannot create a new state
    // from the old one because the modifier manager API expects mutation of a
    // single state bucket rather than updating it at hook calls.)
    const installedState = state;
    installedState.element = element;
    return installedState;
  }
  function installElementOnInstance(instance, element) {
    // SAFETY: we use the internal API for all class-based modifiers to set this
    // in a way which lets us issue the deprecation warning for anyone accessing
    // `element` as a getter while allowing types to continue working for any
    // existing subclasses (see the discussion on the class definition).
    instance[_modifier2.Element] = element;
  }
  function updateArgsOnInstance(instance, args) {
    // SAFETY: we use the internal API for all class-based modifiers to set this
    // in a way which lets us issue the deprecation warning for anyone accessing
    // `args` as a getter while allowing types to continue working for any
    // existing subclasses (see the discussion on the class definition).
    instance[_modifier2.Args] = args;
  }
  class ClassBasedModifierManager {
    constructor(owner) {
      _defineProperty(this, "capabilities", (0, _modifier.capabilities)(true ? '3.22' : '3.13'));
      this.owner = owner;
    }
    createModifier(factoryOrClass, args) {
      const Modifier = (0, _compat.isFactory)(factoryOrClass) ? factoryOrClass.class : factoryOrClass;
      const modifier = new Modifier(this.owner, args);
      (0, _destroyable.registerDestructor)(modifier, destroyModifier);
      return {
        instance: modifier,
        implementsModify: (0, _modifier2._implementsModify)(modifier),
        element: null
      };
    }
    installModifier(createdState, element, args) {
      const state = installElement(createdState, element);

      // TODO: this can be deleted entirely at v4.
      const {
        instance
      } = state;
      installElementOnInstance(instance, element);
      if (state.implementsModify) {
        instance.modify(element, args.positional, args.named);
      } else {
        // The `consumeArgs()` call provides backwards compatibility on v3 for the
        // deprecated legacy lifecycle hooks (`didInstall`, `didReceiveArguments`,
        // and `didUpdateArguments`), which accidentally had eager consumption
        // semantics prior to Ember 3.22. The new, recommended `modify` hook has
        // the updated lazy semantics associated with normal auto-tracking.
        if (true) {
          (0, _compat.consumeArgs)(args);
        }
        instance.didReceiveArguments();
        instance.didInstall();
      }
    }
    updateModifier(state, args) {
      const {
        instance
      } = state;

      // TODO: remove at 4.0
      updateArgsOnInstance(state.instance, args);
      if (state.implementsModify) {
        instance.modify(state.element, args.positional, args.named);
      } else {
        // The `consumeArgs()` call provides backwards compatibility on v3 for the
        // deprecated legacy lifecycle hooks (`didInstall`, `didReceiveArguments`,
        // and `didUpdateArguments`), which accidentally had eager consumption
        // semantics prior to Ember 3.22. The new, recommended `modify` hook has
        // the updated lazy semantics associated with normal auto-tracking.
        if (true) {
          (0, _compat.consumeArgs)(args);
        }
        instance.didUpdateArguments();
        instance.didReceiveArguments();
      }
    }
    destroyModifier(state) {
      (0, _destroyable.destroy)(state.instance);
    }
  }
  _exports.default = ClassBasedModifierManager;
});
;define("ember-modifier/-private/class/modifier", ["exports", "@ember/application", "@ember/modifier", "ember-modifier/-private/class/modifier-manager", "@ember/destroyable", "@ember/debug"], function (_exports, _application, _modifier, _modifierManager, _destroyable, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports._implementsModify = _exports._implementsLegacyHooks = _exports.Element = _exports.Args = void 0;
  // SAFETY: these sets are dev-only code to avoid showing deprecations for the
  // same class more than once.
  let SEEN_CLASSES_FOR_LIFECYCLE;
  if (true /* DEBUG */) {
    SEEN_CLASSES_FOR_LIFECYCLE = new Set();
  }
  let SEEN_CLASSES_FOR_DESTROYABLES;
  if (true /* DEBUG */) {
    SEEN_CLASSES_FOR_DESTROYABLES = new Set();
  }
  let SEEN_CLASSES_FOR_ARGS;
  if (true /* DEBUG */) {
    SEEN_CLASSES_FOR_ARGS = new Set();
  }
  let SEEN_CLASSES_FOR_ELEMENTS;
  if (true /* DEBUG */) {
    SEEN_CLASSES_FOR_ELEMENTS = new Set();
  }

  /** @internal */
  const _implementsModify = instance => instance.modify !== ClassBasedModifier.prototype.modify;

  /** @internal */
  _exports._implementsModify = _implementsModify;
  const _implementsLegacyHooks = instance => instance.didInstall !== ClassBasedModifier.prototype.didInstall || instance.didUpdateArguments !== ClassBasedModifier.prototype.didUpdateArguments || instance.didReceiveArguments !== ClassBasedModifier.prototype.didReceiveArguments;

  /** @internal */
  _exports._implementsLegacyHooks = _implementsLegacyHooks;
  const Element = _exports.Element = Symbol('Element');

  /** @internal */
  const Args = _exports.Args = Symbol('Args');

  // Preserve the signature on a class-based modifier so it can be plucked off
  // later (by e.g. Glint), using interface merging with an opaque item to
  // preserve it in the type system. The fact that it's an empty interface is
  // actually the point: it *only* hooks the type parameter into the opaque
  // (nominal) type. Note that this is distinct from the function-based modifier
  // type intentionally, because it is actually the static class side of a
  // class-based modifier which corresponds to the result of calling `modifier()`
  // with a callback defining a function-based modifier.
  // eslint-disable-next-line @typescript-eslint/no-empty-interface

  /**
   * A base class for modifiers which need more capabilities than function-based
   * modifiers. Useful if, for example:
   *
   * 1. You need to inject services and access them
   * 2. You need fine-grained control of updates, either for performance or
   *    convenience reasons, and don't want to teardown the state of your modifier
   *    every time only to set it up again.
   * 3. You need to store some local state within your modifier.
   *
   * The lifecycle hooks of class modifiers are tracked. When they run, they any
   * values they access will be added to the modifier, and the modifier will
   * update if any of those values change.
   */
  class ClassBasedModifier {
    // Done this way with the weird combination of `declare` and `defineProperty`
    // so that subclasses which are overriding this by writing their own `args`
    // field type declarations continue to type check correctly. (If we introduced
    // a getter here, existing classes defining their args via a `declare args:`
    // would stop type checking, because TS -- correctly! -- differentiates
    // between class fields and getters).
    /**
     * The arguments passed to the modifier. `args.positional` is an array of
     * positional arguments, and `args.named` is an object containing the named
     * arguments.
     *
     * @deprecated Until 4.0. Access positional and named arguments directly in
     *   the `modify` hook instead.
     */

    // Done this way with the weird combination of `declare` and `defineProperty`
    // so that subclasses which are overriding this by writing their own `element`
    // field declarations continue to type check correctly.
    /**
     * The element the modifier is applied to.
     *
     * @warning `element` is ***not*** available during `constructor` or
     *   `willDestroy`.
     * @deprecated Until 4.0. Access the `element` as an argument in the `modify`
     *   hook instead.
     */
    constructor(owner, args) {
      (0, _application.setOwner)(this, owner);

      // SAFETY: the point here is (for the period where we are providing `args`
      // and `element`) to provide an internal-only way of setting and update the
      // `args` for the modifier instance; we use the `InternalClassBasedModifier`
      // interface to represent the internal-only API in a way that end users do
      // *not* have access to when subclassing `ClassBasedModifier`.
      this[Args] = args;
      (true && !(!(_implementsModify(this) && _implementsLegacyHooks(this))) && (0, _debug.assert)('ember-modifier: You cannot implement both `modify` and any of the deprecated legacy lifecycle hooks (`didInstall`, `didReceiveArguments`, and `didUpdateArguments`)', !(_implementsModify(this) && _implementsLegacyHooks(this))));
      (true && !(this.willDestroy === ClassBasedModifier.prototype.willDestroy || SEEN_CLASSES_FOR_DESTROYABLES.has(this.constructor)) && (0, _debug.deprecate)(`ember-modifier (in ${this.constructor.name} at ${new Error().stack}): \`willDestroy\`, \`isDestroyed\`, and \`isDestroyed\` are deprecated. Use the corresponding API from '@ember/destroyable' instead.`, this.willDestroy === ClassBasedModifier.prototype.willDestroy || SEEN_CLASSES_FOR_DESTROYABLES.has(this.constructor), {
        id: 'ember-modifier.use-destroyables',
        until: '4.0.0',
        for: 'ember-modifier',
        since: {
          available: '3.2.0',
          enabled: '3.2.0'
        }
      }));
      if (true /* DEBUG */ && !SEEN_CLASSES_FOR_DESTROYABLES.has(this.constructor)) {
        SEEN_CLASSES_FOR_DESTROYABLES.add(this.constructor);
      }
      (true && !(_implementsModify(this) || SEEN_CLASSES_FOR_LIFECYCLE.has(this.constructor)) && (0, _debug.deprecate)(`ember-modifier (in ${this.constructor.name} at ${new Error().stack}): The \`didInstall\`, \`didReceiveArguments\`, and \`didUpdateArguments\` hooks are deprecated. Use the new \`modify\` hook instead.`, _implementsModify(this) || SEEN_CLASSES_FOR_LIFECYCLE.has(this.constructor), {
        id: 'ember-modifier.use-modify',
        until: '4.0.0',
        for: 'ember-modifier',
        since: {
          available: '3.2.0',
          enabled: '3.2.0'
        }
      }));
      if (true /* DEBUG */ && !SEEN_CLASSES_FOR_LIFECYCLE.has(this.constructor)) {
        SEEN_CLASSES_FOR_LIFECYCLE.add(this.constructor);
      }
    }

    /**
     * Called when the modifier is installed and any time any tracked state used
     * in the modifier changes.
     *
     * If you need to do first-time-only setup, create a class field representing
     * the initialization state and check it when running the hook. That is also
     * where and when you should use `registerDestructor` for any teardown you
     * need to do. For example:
     *
     * ```js
     * function disconnect(instance) {
     *  instance.observer?.disconnect();
     * }
     *
     * class IntersectionObserver extends Modifier {
     *   observer;
     *
     *   constructor(owner, args) {
     *     super(owner, args);
     *     registerDestructor(this, disconnect);
     *   }
     *
     *   modify(element, callback, options) {
     *     disconnect(this);
     *
     *     this.observer = new IntersectionObserver(callback, options);
     *     this.observer.observe(element);
     *   }
     * }
     * ```
     *
     * @param element The element to which the modifier is applied.
     * @param positional The positional arguments to the modifier.
     * @param named The named arguments to the modifier.
     */
    modify( /* eslint-disable @typescript-eslint/no-unused-vars */
    element, positional, named) {
      /* no op, for subclassing */
    }

    /**
     * Called when the modifier is installed **and** anytime the arguments are
     * updated.
     *
     * @deprecated Until 4.0. Use `modify()`.
     */
    didReceiveArguments() {
      /* no op, for subclassing */
    }

    /**
     * Called anytime the arguments are updated but **not** on the initial
     * install. Called before `didReceiveArguments`.
     *
     * @deprecated Until 4.0. Use `modify()`.
     */
    didUpdateArguments() {
      /* no op, for subclassing */
    }

    /**
     * Called when the modifier is installed on the DOM element. Called after
     * `didReceiveArguments`.
     *
     * @deprecated Until 4.0. Use `modify()`.
     */
    didInstall() {
      /* no op, for subclassing */
    }

    /**
     * Called when the DOM element is about to be destroyed; use for removing
     * event listeners on the element and other similar clean-up tasks.
     *
     * @deprecated since 2.0.0: prefer to use `willDestroy`, since both it and
     *   `willRemove` can perform all the same operations, including on the
     *   `element`.
     */
    willRemove() {
      /* no op, for subclassing */
    }

    /**
     * Called when the modifier itself is about to be destroyed; use for teardown
     * code. Called after `willRemove`.
     *
     * @deprecated Until 4.0. Use `registerDestructor` from `@ember/destroyables`.
     */
    willDestroy() {
      /* no op, for subclassing */
    }

    /**
     * @deprecated Until 4.0. Use `isDestroying` from `@ember/destroyables`.
     */
    get isDestroying() {
      (true && !(SEEN_CLASSES_FOR_DESTROYABLES.has(this.constructor)) && (0, _debug.deprecate)('Modifier.isDestroying is deprecated', SEEN_CLASSES_FOR_DESTROYABLES.has(this.constructor), {
        id: 'ember-modifier.use-destroyables',
        until: '4.0.0',
        for: 'ember-modifier',
        since: {
          available: '3.2.0',
          enabled: '3.2.0'
        }
      }));
      if (true /* DEBUG */ && !SEEN_CLASSES_FOR_DESTROYABLES.has(this.constructor)) {
        SEEN_CLASSES_FOR_DESTROYABLES.add(this.constructor);
      }
      return (0, _destroyable.isDestroying)(this);
    }

    /**
     * @deprecated Until 4.0. Use `isDestroyed` from `@ember/destroyables`.
     */
    get isDestroyed() {
      (true && !(SEEN_CLASSES_FOR_DESTROYABLES.has(this.constructor)) && (0, _debug.deprecate)('Modifier.isDestroyed is deprecated', SEEN_CLASSES_FOR_DESTROYABLES.has(this.constructor), {
        id: 'ember-modifier.use-destroyables',
        until: '4.0.0',
        for: 'ember-modifier',
        since: {
          available: '3.2.0',
          enabled: '3.2.0'
        }
      }));
      if (true /* DEBUG */ && !SEEN_CLASSES_FOR_DESTROYABLES.has(this.constructor)) {
        SEEN_CLASSES_FOR_DESTROYABLES.add(this.constructor);
      }
      return (0, _destroyable.isDestroyed)(this);
    }
  }

  // We apply these here, against the prototype, so that there is only one of
  // these, rather than one per instance. We also only issue the deprecation once
  // per class for each of `args` and `element`.
  _exports.default = ClassBasedModifier;
  Object.defineProperty(ClassBasedModifier.prototype, 'args', {
    enumerable: true,
    get() {
      (true && !(SEEN_CLASSES_FOR_ARGS.has(this.constructor)) && (0, _debug.deprecate)(`ember-modifier (in ${this.constructor.name} at ${new Error().stack}): using \`this.args\` is deprecated. Access positional and named arguments directly in the \`modify\` hook instead.`, SEEN_CLASSES_FOR_ARGS.has(this.constructor), {
        id: 'ember-modifier.no-args-property',
        for: 'ember-modifier',
        since: {
          available: '3.2.0',
          enabled: '3.2.0'
        },
        until: '4.0.0'
      }));
      if (true /* DEBUG */ && !SEEN_CLASSES_FOR_ARGS.has(this.constructor)) {
        SEEN_CLASSES_FOR_ARGS.add(this.constructor);
      }
      return this[Args];
    }
  });
  Object.defineProperty(ClassBasedModifier.prototype, 'element', {
    enumerable: true,
    get() {
      (true && !(SEEN_CLASSES_FOR_ELEMENTS.has(this.constructor)) && (0, _debug.deprecate)(`ember-modifier (in ${this.constructor.name} at ${new Error().stack}): using \`this.element\` is deprecated. Access the \`element\` as an argument in the \`modify\` hook instead.`, SEEN_CLASSES_FOR_ELEMENTS.has(this.constructor), {
        id: 'ember-modifier.no-element-property',
        for: 'ember-modifier',
        since: {
          available: '3.2.0',
          enabled: '3.2.0'
        },
        until: '4.0.0'
      }));
      if (true /* DEBUG */ && !SEEN_CLASSES_FOR_ELEMENTS.has(this.constructor)) {
        SEEN_CLASSES_FOR_ELEMENTS.add(this.constructor);
      }
      return this[Element] ?? null;
    }
  });

  /**
   * @internal This provides an interface we can use to backwards-compatibly set
   *   up the element in a way that external callers will not have access to or
   *   even see.
   */

  (0, _modifier.setModifierManager)(owner => new _modifierManager.default(owner), ClassBasedModifier);
});
;define("ember-modifier/-private/compat", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.consumeArgs = void 0;
  _exports.isFactory = isFactory;
  function isFactory(
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  _factoryOrClass) {
    return !true;
  }

  // eslint-disable-next-line @typescript-eslint/no-empty-function
  const noop = () => {};

  /**
   * Consume each positional and named argument to entangle it in autotracking and
   * enable updates.
   *
   * This is a temporary workaround for a change in the autotracking semantics of
   * the args proxy introduced in `v3.22`. What changed is that arguments are no
   * longer eagerly consumed. Didn’t use an argument? Then updates won’t be run
   * when its value changes. This workaround reproduces the previous behaviour to
   * avoid introducing a breaking change until a suitable transition path is made
   * available.
   */
  let consumeArgs = _exports.consumeArgs = noop;
  if (true) {
    _exports.consumeArgs = consumeArgs = function ({
      positional,
      named
    }) {
      // SAFETY: TS before 4.6 does not correctly/fully resolve the type in a way
      // that allows the type checker to see that `positional` must *always* be
      // something which `extends unknown[]` here, because the underlying
      // machinery is fairly complicated and relies on a fair bit of type
      // recursion. It will stop mattering when we cut v4.0, because we won't be
      // doing this anyway.
      const pos = positional;
      for (let i = 0; i < pos.length; i++) {
        pos[i];
      }

      // SAFETY: TS 4.7 does not see that `named` will always be an object here.
      // However, it is guaranteed to be resolved as such by the types. This *may*
      // be a bug (https://github.com/microsoft/TypeScript/issues/48468), but it
      // *should* also stop being relevant once we ship 4.0.
      Object.values(named);
    };
  }
});
;define("ember-modifier/-private/function-based/modifier-manager", ["exports", "@ember/modifier", "ember-modifier/-private/compat"], function (_exports, _modifier, _compat) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  // Wraps the unsafe (b/c it mutates, rather than creating new state) code that
  // TS does not yet understand.
  function installElement(state, element) {
    // SAFETY: this cast represents how we are actually handling the state machine
    // transition: from this point forward in the lifecycle of the modifier, it
    // always behaves as `InstalledState<S>`. It is safe because, and *only*
    // because, we immediately initialize `element`. (We cannot create a new state
    // from the old one because the modifier manager API expects mutation of a
    // single state bucket rather than updating it at hook calls.)
    const installedState = state;
    installedState.element = element;
    return installedState;
  }
  class FunctionBasedModifierManager {
    constructor(options) {
      _defineProperty(this, "capabilities", (0, _modifier.capabilities)(true ? '3.22' : '3.13'));
      _defineProperty(this, "options", void 0);
      this.options = {
        eager: options?.eager ?? true
      };
    }
    createModifier(factoryOrClass) {
      const instance = (0, _compat.isFactory)(factoryOrClass) ? factoryOrClass.class : factoryOrClass;
      return {
        element: null,
        instance: instance
      };
    }
    installModifier(createdState, element, args) {
      const state = installElement(createdState, element);
      const {
        positional,
        named
      } = args;
      const teardown = createdState.instance(element, positional, named);
      if (typeof teardown === 'function') {
        state.teardown = teardown;
      }
      if (true && this.options.eager) {
        (0, _compat.consumeArgs)(args);
      }
    }
    updateModifier(state, args) {
      if (state.teardown) {
        state.teardown();
      }
      const teardown = state.instance(state.element, args.positional, args.named);
      if (typeof teardown === 'function') {
        state.teardown = teardown;
      }
      if (true && this.options.eager) {
        (0, _compat.consumeArgs)(args);
      }
    }
    destroyModifier(state) {
      if (typeof state.teardown === 'function') {
        state.teardown();
      }
    }
  }
  _exports.default = FunctionBasedModifierManager;
});
;define("ember-modifier/-private/function-based/modifier", ["exports", "@ember/debug", "@ember/modifier", "ember-modifier/-private/class/modifier", "ember-modifier/-private/function-based/modifier-manager"], function (_exports, _debug, _modifier, _modifier2, _modifierManager) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = modifier;
  // Provide a singleton manager for each of the options. (If we extend this to
  // many more options in the future, we can revisit, but for now this means we
  // only ever allocate two managers.)
  const EAGER_MANAGER = new _modifierManager.default({
    eager: true
  });
  const LAZY_MANAGER = new _modifierManager.default({
    eager: false
  });

  // This type exists to provide a non-user-constructible, non-subclassable
  // type representing the conceptual "instance type" of a function modifier.
  // The abstract field of type `never` prevents subclassing in userspace of
  // the value returned from `modifier()`. By extending `Modifier<S>`, any
  // augmentations of the `Modifier` type performed by tools like Glint will
  // also apply to function-based modifiers as well.
  // This provides a type whose only purpose here is to represent the runtime
  // type of a function-based modifier: a virtually opaque item. The fact that it's
  // a bare constructor type allows `modifier()` to preserve type parameters from
  // a generic function it's passed, and by making it abstract and impossible to
  // subclass (see above) we prevent users from attempting to instantiate the return
  // value from a `modifier()` call.
  /**
   * The (optional) return type for a modifier which needs to perform some kind of
   * cleanup or teardown -- for example, removing an event listener from an
   * element besides the one passed into the modifier.
   */
  /**
   * An API for writing simple modifiers.
   *
   * This function runs the first time when the element the modifier was applied
   * to is inserted into the DOM, and it *autotracks* while running. Any values
   * that it accesses will be tracked, and if any of them changes, the function
   * will run again.
   *
   * **Note:** this will rerun if any of its arguments change, *whether or not you
   * access them*. This is legacy behavior and you should switch to using the
   * `{ eager: false }` variant, which has normal auto-tracking semantics.
   *
   * The modifier can also optionally return a *destructor*. The destructor
   * function will be run just before the next update, and when the element is
   * being removed entirely. It should generally clean up the changes that the
   * modifier made in the first place.
   *
   * @deprecated Until 4.0. Calling `modifier()` without an options argument is
   *   deprecated. It is supported until 4.0 so that existing modifiers can be
   *   migrated individually. Please update your function-based modifiers to pass
   *   `{ eager: false }`.
   *
   * @param fn The function which defines the modifier.
   */
  // This overload allows users to write types directly on the callback passed to
  // the `modifier` function and infer the resulting type correctly.
  /**
   * An API for writing simple modifiers.
   *
   * This function runs the first time when the element the modifier was applied
   * to is inserted into the DOM, and it *autotracks* while running. Any values
   * that it accesses will be tracked, and if any of them changes, the function
   * will run again.
   *
   * **Note:** this will rerun if any of its arguments change, *whether or not you
   * access them*. This is legacy behavior and you should switch to using the
   * `{ eager: false }` variant, which has normal auto-tracking semantics.
   *
   * The modifier can also optionally return a *destructor*. The destructor
   * function will be run just before the next update, and when the element is
   * being removed entirely. It should generally clean up the changes that the
   * modifier made in the first place.
   *
   * @deprecated Until 4.0. Calling `modifier()` with `{ eager: true }` is
   *   deprecated. It is supported until 4.0 so that existing modifiers can be
   *   migrated individually. Please update your function-based modifiers to pass
   *   `{ eager: false }`.
   *
   * @param fn The function which defines the modifier.
   * @param options Configuration for the modifier.
   */
  // This overload allows users to write types directly on the callback passed to
  // the `modifier` function and infer the resulting type correctly.
  /**
   * An API for writing simple modifiers.
   *
   * This function runs the first time when the element the modifier was applied
   * to is inserted into the DOM, and it *autotracks* while running. Any values
   * that it accesses will be tracked, including any of its arguments that it
   * accesses, and if any of them changes, the function will run again.
   *
   * **Note:** this will *not* automatically rerun because an argument changes. It
   * will only rerun if it is *using* that argument (the same as with auto-tracked
   * state in general).
   *
   * The modifier can also optionally return a *destructor*. The destructor
   * function will be run just before the next update, and when the element is
   * being removed entirely. It should generally clean up the changes that the
   * modifier made in the first place.
   *
   * @param fn The function which defines the modifier.
   * @param options Configuration for the modifier.
   */
  // This overload allows users to write types directly on the callback passed to
  // the `modifier` function and infer the resulting type correctly.
  /**
   * An API for writing simple modifiers.
   *
   * This function runs the first time when the element the modifier was applied
   * to is inserted into the DOM, and it *autotracks* while running. Any values
   * that it accesses will be tracked, including any of its arguments that it
   * accesses, and if any of them changes, the function will run again.
   *
   * **Note:** this will *not* automatically rerun because an argument changes. It
   * will only rerun if it is *using* that argument (the same as with auto-tracked
   * state in general).
   *
   * The modifier can also optionally return a *destructor*. The destructor
   * function will be run just before the next update, and when the element is
   * being removed entirely. It should generally clean up the changes that the
   * modifier made in the first place.
   *
   * @param fn The function which defines the modifier.
   * @param options Configuration for the modifier.
   */
  // This overload allows users to provide a `Signature` type explicitly at the
  // modifier definition site, e.g. `modifier<Sig>((el, pos, named) => {...})`.
  // **Note:** this overload must appear second, since TS' inference engine will
  // not correctly infer the type of `S` here from the types on the supplied
  // callback.
  // This is the runtime signature; it performs no inference whatsover and just
  // uses the simplest version of the invocation possible since, for the case of
  // setting it on the modifier manager, we don't *need* any of that info, and
  // the two previous overloads capture all invocations from a type perspective.
  function modifier(fn, options = {
    eager: true
  }) {
    (true && !(options !== undefined) && (0, _debug.deprecate)(`ember-modifier (for ${fn.name ?? fn} at ${new Error().stack}): creating a function-based modifier without options is deprecated and will be removed at v4.0`, options !== undefined, {
      id: 'ember-modifier.function-based-options',
      for: 'ember-modifier',
      since: {
        available: '3.2.0',
        enabled: '3.2.0'
      },
      until: '4.0.0'
    }));
    (true && !(options?.eager === false) && (0, _debug.deprecate)(`ember-modifier (for ${fn.name ?? fn} at ${new Error().stack}): creating a function-based modifier with \`{ eager: true }\` is deprecated and will be removed at v4.0`, options?.eager === false, {
      id: 'ember-modifier.function-based-options',
      for: 'ember-modifier',
      since: {
        available: '3.2.0',
        enabled: '3.2.0'
      },
      until: '4.0.0'
    })); // SAFETY: the cast here is a *lie*, but it is a useful one. The actual return
    // type of `setModifierManager` today is `void`; we pretend it actually
    // returns an opaque `Modifier` type so that we can provide a result from this
    // type which is useful to TS-aware tooling (e.g. Glint).
    return (0, _modifier.setModifierManager)(() => options.eager ? EAGER_MANAGER : LAZY_MANAGER, fn);
  }

  /**
   * @internal
   */

  /**
   * @deprecated Instead of defining a function to match this type, simply define
   *   a function-based modifier either using a `Signature` or by defining the
   *   types on the callback passed to the `modifier`.
   */
});
;define("ember-modifier/-private/interfaces", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
});
;define("ember-modifier/-private/opaque", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
});
;define("ember-modifier/-private/signature", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
});
;define("ember-modifier/index", ["exports", "ember-modifier/-private/class/modifier", "ember-modifier/-private/function-based/modifier"], function (_exports, _modifier, _modifier2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _modifier.default;
    }
  });
  Object.defineProperty(_exports, "modifier", {
    enumerable: true,
    get: function () {
      return _modifier2.default;
    }
  });
});
;define("ember-on-helper/helpers/on-document", ["exports", "ember-on-helper/helpers/on"], function (_exports, _on) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = _on.default.extend({
    compute(positional, named) {
      return this._super([document, ...positional], named);
    }
  });
});
;define("ember-on-helper/helpers/on-window", ["exports", "ember-on-helper/helpers/on"], function (_exports, _on) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = _on.default.extend({
    compute(positional, named) {
      return this._super([window, ...positional], named);
    }
  });
});
;define("ember-on-helper/helpers/on", ["exports", "@ember/component/helper", "ember-on-helper/utils/event-listener", "@ember/debug"], function (_exports, _helper, _eventListener, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.__counts = __counts;
  _exports.default = void 0;
  /* eslint no-param-reassign: "off" */

  /**
   * These are private API and only used for testing instrumentation.
   */
  let adds = 0;
  let removes = 0;
  function __counts() {
    return {
      adds,
      removes
    };
  }
  const assertValidEventOptions = true /* DEBUG */ && (() => {
    const ALLOWED_EVENT_OPTIONS = ['capture', 'once', 'passive'];
    const joinOptions = options => options.map(o => `'${o}'`).join(', ');
    return function (eventOptions, eventName) {
      const invalidOptions = Object.keys(eventOptions).filter(o => !ALLOWED_EVENT_OPTIONS.includes(o));
      (true && !(invalidOptions.length === 0) && (0, _debug.assert)(`ember-on-helper: Provided invalid event options (${joinOptions(invalidOptions)}) to '${eventName}' event listener. Only these options are valid: ${joinOptions(ALLOWED_EVENT_OPTIONS)}`, invalidOptions.length === 0));
    };
  })();
  function setupListener(eventTarget, eventName, callback, eventOptions) {
    if (true /* DEBUG */) assertValidEventOptions(eventOptions, eventName);
    (true && !(eventTarget && typeof eventTarget.addEventListener === 'function' && typeof eventTarget.removeEventListener === 'function') && (0, _debug.assert)(`ember-on-helper: '${eventTarget}' is not a valid event target. It has to be an Element or an object that conforms to the EventTarget interface.`, eventTarget && typeof eventTarget.addEventListener === 'function' && typeof eventTarget.removeEventListener === 'function'));
    (true && !(typeof eventName === 'string' && eventName.length > 1) && (0, _debug.assert)(`ember-on-helper: '${eventName}' is not a valid event name. It has to be a string with a minimum length of 1 character.`, typeof eventName === 'string' && eventName.length > 1));
    (true && !(typeof callback === 'function') && (0, _debug.assert)(`ember-on-helper: '${callback}' is not a valid callback. Provide a function.`, typeof callback === 'function'));
    adds++;
    (0, _eventListener.addEventListener)(eventTarget, eventName, callback, eventOptions);
    return callback;
  }
  function destroyListener(eventTarget, eventName, callback, eventOptions) {
    if (eventTarget && eventName && callback) {
      removes++;
      (0, _eventListener.removeEventListener)(eventTarget, eventName, callback, eventOptions);
    }
  }
  var _default = _exports.default = _helper.default.extend({
    eventTarget: null,
    eventName: undefined,
    callback: undefined,
    eventOptions: undefined,
    compute([eventTarget, eventName, callback], eventOptions) {
      destroyListener(this.eventTarget, this.eventName, this.callback, this.eventOptions);
      this.eventTarget = eventTarget;
      this.callback = setupListener(this.eventTarget, eventName, callback, eventOptions);
      this.eventName = eventName;
      this.eventOptions = eventOptions;
    },
    willDestroy() {
      this._super();
      destroyListener(this.eventTarget, this.eventName, this.callback, this.eventOptions);
    }
  });
});
;define("ember-on-helper/utils/event-listener", ["exports", "@ember/debug"], function (_exports, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SUPPORTS_EVENT_OPTIONS = void 0;
  _exports.addEventListener = addEventListener;
  _exports.addEventListenerOnce = addEventListenerOnce;
  _exports.removeEventListener = removeEventListener;
  /* eslint no-param-reassign: "off" */

  /**
   * Internet Explorer 11 does not support `once` and also does not support
   * passing `eventOptions`. In some situations it then throws a weird script
   * error, like:
   *
   * ```
   * Could not complete the operation due to error 80020101
   * ```
   *
   * This flag determines, whether `{ once: true }` and thus also event options in
   * general are supported.
   */
  const SUPPORTS_EVENT_OPTIONS = _exports.SUPPORTS_EVENT_OPTIONS = (() => {
    try {
      const div = document.createElement('div');
      let counter = 0;
      div.addEventListener('click', () => counter++, {
        once: true
      });
      let event;
      if (typeof Event === 'function') {
        event = new Event('click');
      } else {
        event = document.createEvent('Event');
        event.initEvent('click', true, true);
      }
      div.dispatchEvent(event);
      div.dispatchEvent(event);
      return counter === 1;
    } catch (error) {
      return false;
    }
  })();

  /**
   * Registers an event for an `element` that is called exactly once and then
   * unregistered again. This is effectively a polyfill for `{ once: true }`.
   *
   * It also accepts a fourth optional argument `useCapture`, that will be passed
   * through to `addEventListener`.
   *
   * @param {Element} element
   * @param {string} eventName
   * @param {Function} callback
   * @param {boolean} [useCapture=false]
   */
  function addEventListenerOnce(element, eventName, callback, useCapture = false) {
    function listener() {
      element.removeEventListener(eventName, listener, useCapture);
      callback();
    }
    element.addEventListener(eventName, listener, useCapture);
  }

  /**
   * Safely invokes `addEventListener` for IE11 and also polyfills the
   * `{ once: true }` and `{ capture: true }` options.
   *
   * All other options are discarded for IE11. Currently this is only `passive`.
   *
   * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener
   *
   * @param {Element} element
   * @param {string} eventName
   * @param {Function} callback
   * @param {object} [eventOptions]
   */
  function addEventListener(element, eventName, callback, eventOptions) {
    const _callback = true /* DEBUG */ && eventOptions && eventOptions.passive ? function (event) {
      event.preventDefault = () => {
        (true && !(false) && (0, _debug.assert)(`ember-on-helper: You marked this listener as 'passive', meaning that you must not call 'event.preventDefault()'.`));
      };
      return callback.call(this, event);
    } : callback;
    if (SUPPORTS_EVENT_OPTIONS) {
      element.addEventListener(eventName, _callback, eventOptions);
    } else if (eventOptions && eventOptions.once) {
      addEventListenerOnce(element, eventName, _callback, Boolean(eventOptions.capture));
    } else {
      element.addEventListener(eventName, _callback, Boolean(eventOptions && eventOptions.capture));
    }
  }

  /**
   * Since the same `capture` event option that was used to add the event listener
   * needs to be used when removing the listener, it needs to be polyfilled as
   * `useCapture` for IE11.
   *
   * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener
   *
   * @param {Element} element
   * @param {string} eventName
   * @param {Function} callback
   * @param {object} [eventOptions]
   */
  function removeEventListener(element, eventName, callback, eventOptions) {
    if (SUPPORTS_EVENT_OPTIONS) {
      element.removeEventListener(eventName, callback, eventOptions);
    } else {
      element.removeEventListener(eventName, callback, Boolean(eventOptions && eventOptions.capture));
    }
  }
});
;define("ember-page-title/helpers/page-title", ["exports", "@ember/service", "@ember/component/helper", "@ember/object/internals"], function (_exports, _service, _helper, _internals) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _class, _descriptor;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  /**
    `{{page-title}}` helper used to set the title of the current route context.
  
    @public
    @method page-title
   */
  let PageTitle = _exports.default = (_dec = (0, _service.inject)('page-title-list'), (_class = class PageTitle extends _helper.default {
    get tokenId() {
      return (0, _internals.guidFor)(this);
    }
    constructor() {
      super(...arguments);
      _initializerDefineProperty(this, "tokens", _descriptor, this);
      this.tokens.push({
        id: this.tokenId
      });
    }
    compute(params, _hash) {
      let hash = {
        ..._hash,
        id: this.tokenId,
        title: params.join('')
      };
      this.tokens.push(hash);
      this.tokens.scheduleTitleUpdate();
      return '';
    }
    willDestroy() {
      super.willDestroy();
      this.tokens.remove(this.tokenId);
      this.tokens.scheduleTitleUpdate();
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "tokens", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
});
;define("ember-page-title/services/page-title-list", ["exports", "@ember/application", "@ember/runloop", "@ember/service", "@ember/utils", "@ember/debug"], function (_exports, _application, _runloop, _service, _utils, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _dec2, _dec3, _class, _descriptor, _descriptor2, _descriptor3;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let isFastBoot = typeof FastBoot !== 'undefined';
  const RouterEvent = {
    ROUTE_DID_CHANGE: 'routeDidChange'
  };

  /**
    @class page-title-list
    @extends Ember.Service
   */
  let PageTitleListService = _exports.default = (_dec = (0, _service.inject)('page-title'), _dec2 = (0, _service.inject)('router'), _dec3 = (0, _service.inject)('-document'), (_class = class PageTitleListService extends _service.default {
    constructor() {
      super(...arguments);
      _initializerDefineProperty(this, "pageTitle", _descriptor, this);
      _initializerDefineProperty(this, "router", _descriptor2, this);
      // in fastboot context "document" is instance of
      // ember-fastboot/simple-dom document
      _initializerDefineProperty(this, "document", _descriptor3, this);
      _defineProperty(this, "tokens", []);
      _defineProperty(this, "_defaultConfig", {
        // The default separator to use between tokens.
        separator: ' | ',
        // The default prepend value to use.
        prepend: true,
        // The default replace value to use.
        replace: null
      });
      _defineProperty(this, "scheduleTitleUpdate", () => {
        (0, _runloop.scheduleOnce)('afterRender', this, this._updateTitle);
      });
      this._validateExistingTitleElement();
      let config = (0, _application.getOwner)(this).resolveRegistration('config:environment');
      if (config.pageTitle) {
        ['separator', 'prepend', 'replace'].forEach(key => {
          if (!(0, _utils.isEmpty)(config.pageTitle[key])) {
            this._defaultConfig[key] = config.pageTitle[key];
          }
        });
      }
      this.router.on(RouterEvent.ROUTE_DID_CHANGE, this.scheduleTitleUpdate);
    }
    applyTokenDefaults(token) {
      let defaultSeparator = this._defaultConfig.separator;
      let defaultPrepend = this._defaultConfig.prepend;
      let defaultReplace = this._defaultConfig.replace;
      if (token.separator == null) {
        token.separator = defaultSeparator;
      }
      if (token.prepend == null && defaultPrepend != null) {
        token.prepend = defaultPrepend;
      }
      if (token.replace == null && defaultReplace != null) {
        token.replace = defaultReplace;
      }
    }
    inheritFromPrevious(token) {
      let previous = token.previous;
      if (previous) {
        if (token.separator == null) {
          token.separator = previous.separator;
        }
        if (token.prepend == null) {
          token.prepend = previous.prepend;
        }
      }
    }
    push(token) {
      let tokenForId = this._findTokenById(token.id);
      if (tokenForId) {
        let index = this.tokens.indexOf(tokenForId);
        let tokens = [...this.tokens];
        let previous = tokenForId.previous;
        token.previous = previous;
        token.next = tokenForId.next;
        this.inheritFromPrevious(token);
        this.applyTokenDefaults(token);
        tokens.splice(index, 1, token);
        this.tokens = tokens;
        return;
      }
      let previous = this.tokens.slice(-1)[0];
      if (previous) {
        token.previous = previous;
        previous.next = token;
        this.inheritFromPrevious(token);
      }
      this.applyTokenDefaults(token);
      this.tokens = [...this.tokens, token];
    }
    remove(id) {
      let token = this._findTokenById(id);
      let {
        next,
        previous
      } = token;
      if (next) {
        next.previous = previous;
      }
      if (previous) {
        previous.next = next;
      }
      token.previous = token.next = null;
      let tokens = [...this.tokens];
      tokens.splice(tokens.indexOf(token), 1);
      this.tokens = tokens;
    }
    get visibleTokens() {
      let tokens = this.tokens;
      let i = tokens ? tokens.length : 0;
      let visible = [];
      while (i--) {
        let token = tokens[i];
        if (token.replace) {
          visible.unshift(token);
          break;
        } else {
          visible.unshift(token);
        }
      }
      return visible;
    }
    get sortedTokens() {
      let visible = this.visibleTokens;
      let appending = true;
      let group = [];
      let groups = [group];
      let frontGroups = [];
      visible.forEach(token => {
        if (token.front) {
          frontGroups.unshift(token);
        } else if (token.prepend) {
          if (appending) {
            appending = false;
            group = [];
            groups.push(group);
          }
          let lastToken = group[0];
          if (lastToken) {
            token = {
              ...token
            };
            token.separator = lastToken.separator;
          }
          group.unshift(token);
        } else {
          if (!appending) {
            appending = true;
            group = [];
            groups.push(group);
          }
          group.push(token);
        }
      });
      return frontGroups.concat(groups.reduce((E, group) => E.concat(group), []));
    }
    toString() {
      let tokens = this.sortedTokens;
      let title = [];
      for (let i = 0, len = tokens.length; i < len; i++) {
        let token = tokens[i];
        if (token.title) {
          title.push(token.title);
          if (i + 1 < len) {
            title.push(token.separator);
          }
        }
      }
      return title.join('');
    }
    willDestroy() {
      super.willDestroy();
      this.router.off(RouterEvent.ROUTE_DID_CHANGE, this.scheduleTitleUpdate);
    }
    _updateTitle() {
      const toBeTitle = this.toString();
      if (isFastBoot) {
        this.updateFastbootTitle(toBeTitle);
      } else {
        /**
         * When rendering app with "?fastboot=false" (http://ember-fastboot.com/docs/user-guide#disabling-fastboot)
         * We will not have <title> element present in DOM.
         *
         * But this is fine as by HTML spec,
         * one is created upon assigning "document.title" value;
         *
         * https://html.spec.whatwg.org/multipage/dom.html#dom-tree-accessors
         */
        this.document.title = toBeTitle;
      }
      this.pageTitle.titleDidUpdate(toBeTitle);
    }

    /**
     * Validate if there's more than one title element present.
     *
     * Example: ember-cli-head can cause conflicting updates.
     * @private
     */
    _validateExistingTitleElement() {
      if (isFastBoot) {
        return;
      }
      (true && !(document.head.querySelectorAll('title').length <= 1) && (0, _debug.assert)('[ember-page-title]: Multiple title elements found. Check for other addons like ember-cli-head updating <title> as well.', document.head.querySelectorAll('title').length <= 1));
    }

    /**
     * Find token by id
     *
     * IE11 compatible approach due to lack of Array.find support
     *
     * @param {String} id
     * @private
     */
    _findTokenById(id) {
      return this.tokens.filter(token => {
        return token.id === id;
      })[0];
    }
    updateFastbootTitle(toBeTitle) {
      if (!isFastBoot) {
        return;
      }
      const headElement = this.document.head;
      const headChildNodes = headElement.childNodes;

      // Remove existing title elements from previous render cycle
      for (let i = 0; i < headChildNodes.length; i++) {
        let node = headChildNodes[i];
        if (node.nodeName.toLowerCase() === 'title') {
          headElement.removeChild(node);
        }
      }

      // Add title element with latest value
      let titleEl = this.document.createElement('title');
      let titleContents = this.document.createTextNode(toBeTitle);
      titleEl.appendChild(titleContents);
      headElement.appendChild(titleEl);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "pageTitle", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "router", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "document", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
});
;define("ember-page-title/services/page-title", ["exports", "@ember/service"], function (_exports, _service) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  class PageTitleService extends _service.default {
    titleDidUpdate( /* title */) {}
  }
  _exports.default = PageTitleService;
});
;define("ember-popper-modifier/-base-popper-modifier", ["exports", "ember-modifier", "@ember/array", "@ember/utils", "@ember/debug", "@popperjs/core", "ember-popper-modifier/index", "ember-popper-modifier/in-runloop-modifier"], function (_exports, _emberModifier, _array, _utils, _debug, _core, _index, _inRunloopModifier) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"ember-modifier",0,"@ember/array",0,"@ember/utils",0,"@ember/debug",0,"@popperjs/core",0,"ember-popper-modifier/index",0,"ember-popper-modifier/in-runloop-modifier"eaimeta@70e063a35619d71f
  class PopperModifier extends _emberModifier.default {
    /** @type {HTMLElement} */
    // eslint-disable-next-line getter-return
    get tooltipElement() {
      (true && !(false) && (0, _debug.assert)("Must implement `tooltipElement` property", false));
    }

    /** @type {HTMLElement} */
    // eslint-disable-next-line getter-return
    get referenceElement() {
      (true && !(false) && (0, _debug.assert)("Must implement `referenceElement` property", false));
    }
    get popperOptions() {
      // Get an array of just positional "options"; first item is an element reference
      const positionalArguments = this.args.positional.slice(1).filter(arg => Boolean(arg));

      // Positional args that are not modifiers should be treated as full "options" objects
      const allPositionalOptions = positionalArguments.filter(arg => !(0, _index.isModifier)(arg));

      // Positional args that are modifiers will extend the rest of the configuration
      const allPositionalModifiers = positionalArguments.filter(arg => (0, _index.isModifier)(arg));
      const {
        ...namedOptions
      } = this.args.named;
      const options = {
        ...allPositionalOptions.reduce((acc, curr) => {
          return {
            ...acc,
            ...curr
          };
        }, {}),
        ...namedOptions
      };

      // Ensure that the `modifiers` is always an array
      const modifiers = (0, _utils.isEmpty)(options.modifiers) ? [] : (0, _array.isArray)(options.modifiers) ? options.modifiers : [options.modifiers];

      // Add runloop integration and positional modifiers to the array of modifiers
      options.modifiers = [...modifiers, ...allPositionalModifiers, _inRunloopModifier.beginRunLoopModifier, _inRunloopModifier.endRunLoopModifier];
      return options;
    }
    didReceiveArguments() {
      // Create the popper once all required arguments are present
      if (!this.popper && this.referenceElement && this.tooltipElement) {
        this.popper = (0, _core.createPopper)(this.referenceElement, this.tooltipElement, this.popperOptions);
        (0, _index.setPopperForElement)(this.element, this.popper);
      }
    }
    didUpdateArguments() {
      this.popper?.setOptions(this.popperOptions);
    }
    willRemove() {
      this.popper?.destroy();
    }
  }
  _exports.default = PopperModifier;
});
;define("ember-popper-modifier/helpers/popper-modifier", ["exports", "@ember/component/helper", "ember-popper-modifier/index"], function (_exports, _helper, _index) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.buildPopperModifier = buildPopperModifier;
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"@ember/component/helper",0,"ember-popper-modifier/index"eaimeta@70e063a35619d71f
  function buildPopperModifier([name, positionalOptions], optionsHash) {
    const options = {
      ...positionalOptions,
      ...optionsHash
    };
    return (0, _index.createModifier)({
      name,
      options
    });
  }
  var _default = _exports.default = (0, _helper.helper)(buildPopperModifier);
});
;define("ember-popper-modifier/in-runloop-modifier", ["exports", "@ember/runloop"], function (_exports, _runloop) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.endRunLoopModifier = _exports.beginRunLoopModifier = void 0;
  0; //eaimeta@70e063a35619d71f0,"@ember/runloop"eaimeta@70e063a35619d71f
  // This set keeps track of whether a particular Popper instance is currently in an update
  // loop that is tracked by the Ember Run Loop
  //
  // This is necessary in order to ensure that Popper changes are known to the Ember run loop,
  // and helps make sure that, for example, Ember's test helpers wait for any re-positioning to
  // take place before advancing
  //
  // We need to keep track of whether a run loop has already been started for an update cycle
  // because the number of "starts" and "ends" of the Popper update look do not always match;
  // if we "start" again before we have "ended", then we can open an Ember run loop that is never
  // closed, which will cause our application to hang.
  const POPPER_IN_RUN_LOOP = new WeakSet();
  const FIRST_PHASE = "beforeRead";
  const LAST_PHASE = "afterWrite";
  const beginRunLoopModifier = _exports.beginRunLoopModifier = {
    name: "ember-runloop-begin",
    phase: FIRST_PHASE,
    enabled: true,
    fn({
      instance
    }) {
      if (!POPPER_IN_RUN_LOOP.has(instance)) {
        POPPER_IN_RUN_LOOP.add(instance);
        (0, _runloop.begin)();
      }
    }
  };
  const endRunLoopModifier = _exports.endRunLoopModifier = {
    name: "ember-runloop-end",
    phase: LAST_PHASE,
    enabled: true,
    fn({
      instance
    }) {
      if (POPPER_IN_RUN_LOOP.has(instance)) {
        POPPER_IN_RUN_LOOP.delete(instance);
        (0, _runloop.end)();
      }
    }
  };
});
;define("ember-popper-modifier/index", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.createModifier = createModifier;
  _exports.getPopperForElement = getPopperForElement;
  _exports.isModifier = isModifier;
  _exports.setPopperForElement = setPopperForElement;
  0; //eaimeta@70e063a35619d71feaimeta@70e063a35619d71f
  const ELEMENT_TO_POPPER = new WeakMap();
  const IS_POPPER_MODIFIER = Symbol("is-popper-modifier");
  function getPopperForElement(element) {
    return ELEMENT_TO_POPPER.get(element);
  }
  function setPopperForElement(element, popperInstance) {
    ELEMENT_TO_POPPER.set(element, popperInstance);
  }

  /**
   * Mark an object as a Popper modifier
   *
   * @param {object} configuration
   * @return {object}
   */
  function createModifier(configuration) {
    return {
      [IS_POPPER_MODIFIER]: true,
      ...configuration
    };
  }

  /**
   * Check whether an object is a Popper modifier
   *
   * @param {object} configuration
   * @return {boolean}
   */
  function isModifier(configuration) {
    return configuration[IS_POPPER_MODIFIER] === true;
  }
});
;define("ember-popper-modifier/modifiers/popper-tooltip", ["exports", "ember-popper-modifier/-base-popper-modifier"], function (_exports, _basePopperModifier) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"ember-popper-modifier/-base-popper-modifier"eaimeta@70e063a35619d71f
  class PopperModifier extends _basePopperModifier.default {
    get tooltipElement() {
      return this.element;
    }
    get referenceElement() {
      return this.args.positional[0];
    }
  }
  _exports.default = PopperModifier;
});
;define("ember-popper-modifier/modifiers/popper", ["exports", "ember-popper-modifier/-base-popper-modifier"], function (_exports, _basePopperModifier) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"ember-popper-modifier/-base-popper-modifier"eaimeta@70e063a35619d71f
  class PopperModifier extends _basePopperModifier.default {
    get tooltipElement() {
      return this.args.positional[0];
    }
    get referenceElement() {
      return this.element;
    }
  }
  _exports.default = PopperModifier;
});
;define("ember-ref-bucket/helpers/ref-to", ["exports", "@ember/component/helper", "ember-ref-bucket/utils/ref", "@ember/destroyable", "@ember/application"], function (_exports, _helper, _ref, _destroyable, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  class RefToHelper extends _helper.default {
    constructor(...args) {
      super(...args);
      _defineProperty(this, "_watcher", null);
    }
    compute([name], {
      bucket,
      tracked
    }) {
      const bucketRef = bucket || (0, _application.getOwner)(this);
      if (this._name !== name) {
        if (this._watcher) {
          (0, _destroyable.unregisterDestructor)(this, this._watcher);
        }
        this._watcher = (0, _ref.watchFor)(name, bucketRef, () => {
          this.recompute();
        });
        (0, _destroyable.registerDestructor)(this, this._watcher);
        this._name = name;
      }
      if (tracked) {
        return (0, _ref.bucketFor)(bucketRef).getTracked(name);
      } else {
        return (0, _ref.bucketFor)(bucketRef).get(name);
      }
    }
  }
  _exports.default = RefToHelper;
});
;define("ember-ref-bucket/index", ["exports", "ember-ref-bucket/utils/ref", "@ember/application", "ember-ref-bucket/utils/prototype-reference"], function (_exports, _ref, _application, _prototypeReference) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.globalRef = globalRef;
  _exports.nodeFor = nodeFor;
  _exports.ref = ref;
  Object.defineProperty(_exports, "registerNodeDestructor", {
    enumerable: true,
    get: function () {
      return _ref.registerNodeDestructor;
    }
  });
  _exports.trackedGlobalRef = trackedGlobalRef;
  _exports.trackedRef = trackedRef;
  Object.defineProperty(_exports, "unregisterNodeDestructor", {
    enumerable: true,
    get: function () {
      return _ref.unregisterNodeDestructor;
    }
  });
  function nodeFor(context, name) {
    return (0, _ref.bucketFor)(context).get(name);
  }
  function maybeReturnCreated(value, createdValues, fn, ctx) {
    if (value === null || value === undefined) {
      return null;
    }
    if (typeof fn === 'function') {
      if (!createdValues.has(value)) {
        createdValues.set(value, fn.call(ctx, value));
      }
      return createdValues.get(value);
    } else {
      return value;
    }
  }
  function ref(name, fn) {
    return function (klass, objectKey) {
      const createdValues = new WeakMap();
      if (typeof fn === 'function') {
        (0, _prototypeReference.addPrototypeReference)(klass, objectKey, name);
      }
      return {
        get() {
          const value = (0, _ref.bucketFor)(this).get(name);
          return maybeReturnCreated(value, createdValues, fn, this);
        }
      };
    };
  }
  function globalRef(name, fn) {
    return function (klass, objectKey) {
      const createdValues = new WeakMap();
      if (typeof fn === 'function') {
        (0, _prototypeReference.addPrototypeReference)(klass, objectKey, name);
      }
      return {
        get() {
          const value = (0, _ref.bucketFor)((0, _application.getOwner)(this) || (0, _ref.resolveGlobalRef)()).get(name);
          return maybeReturnCreated(value, createdValues, fn, this);
        }
      };
    };
  }
  function trackedRef(name, fn) {
    return function (klass, objectKey) {
      const createdValues = new WeakMap();
      if (typeof fn === 'function') {
        (0, _prototypeReference.addPrototypeReference)(klass, objectKey, name);
      }
      return {
        get() {
          const value = (0, _ref.bucketFor)(this).getTracked(name);
          return maybeReturnCreated(value, createdValues, fn, this);
        }
      };
    };
  }
  function trackedGlobalRef(name, fn) {
    return function (klass, objectKey) {
      const createdValues = new WeakMap();
      if (typeof fn === 'function') {
        (0, _prototypeReference.addPrototypeReference)(klass, objectKey, name);
      }
      return {
        get() {
          const value = (0, _ref.bucketFor)((0, _application.getOwner)(this) || (0, _ref.resolveGlobalRef)()).getTracked(name);
          return maybeReturnCreated(value, createdValues, fn, this);
        }
      };
    };
  }
});
;define("ember-ref-bucket/modifiers/create-ref", ["exports", "ember-modifier", "@ember/application", "@ember/object", "@ember/debug", "ember-ref-bucket/utils/ref", "ember-ref-bucket/utils/prototype-reference", "@ember/destroyable"], function (_exports, _emberModifier, _application, _object, _debug, _ref, _prototypeReference, _destroyable) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  let RefModifier = _exports.default = (_class = class RefModifier extends _emberModifier.default {
    constructor() {
      super(...arguments);
      _defineProperty(this, "_key", void 0);
      _defineProperty(this, "_ctx", void 0);
      _defineProperty(this, "_element", void 0);
      // to minimise overhead, user should be specific about
      // what they want to observe
      _defineProperty(this, "defaultMutationObserverOptions", {
        attributes: false,
        characterData: false,
        childList: false,
        subtree: false
      });
      (0, _ref.setGlobalRef)((0, _application.getOwner)(this));
      (0, _destroyable.registerDestructor)(this, () => {
        this.cleanMutationObservers();
        this.cleanResizeObservers();
        (0, _ref.getNodeDestructors)(this._element).forEach(cb => cb());
      });
    }
    markDirty() {
      (0, _ref.bucketFor)(this._ctx).dirtyTrackedCell(this._key);
    }
    cleanMutationObservers() {
      if (this._mutationsObserver) {
        this._mutationsObserver.disconnect();
      }
    }
    cleanResizeObservers() {
      if (this._resizeObserver) {
        this._resizeObserver.unobserve(this.element);
      }
    }
    installMutationObservers(named = {}) {
      this._mutationsObserver = new MutationObserver(this.markDirty);
      const opts = this.getObserverOptions(named);
      delete opts.resize;
      if (opts.attributes || opts.characterdata || opts.childlist) {
        // mutations observer throws if observe is attempted
        // with all these options disabled
        this._mutationsObserver.observe(this.element, opts);
      }
    }
    validateTrackedOptions(named = {}) {
      const args = ['subtree', 'attributes', 'children', 'resize', 'character'];
      if (args.some(name => name in named)) {
        (true && !(this.isTracked(named)) && (0, _debug.assert)(`"ember-ref-modifier", looks like you trying to use {{${named.debugName}}} without tracked flag or alias, but, with properties, related to tracked modifier (${args.join(', ')})`, this.isTracked(named)));
      }
    }
    getObserverOptions(named = {}) {
      // to minimise overhead user
      // should be specific about
      // what they want to observe
      let resize = false;
      let subtree = this.defaultMutationObserverOptions.subtree;
      let attributes = this.defaultMutationObserverOptions.attributes;
      let character = this.defaultMutationObserverOptions.characterData;
      let children = this.defaultMutationObserverOptions.childList;
      if ('subtree' in named) {
        subtree = named.subtree;
      }
      if ('attributes' in named) {
        attributes = named.attributes;
      }
      if ('children' in named) {
        children = named.children;
      }
      if ('resize' in named) {
        resize = named.resize;
      }
      if ('character' in named) {
        character = named.character;
      }
      return {
        subtree,
        attributes,
        childList: children,
        resize,
        characterData: character
      };
    }
    installResizeObservers(element) {
      this._resizeObserver = new ResizeObserver(this.markDirty);
      this._resizeObserver.observe(element);
    }
    modify(element, positional, named) {
      const name = this.name(positional);
      const ctx = this.ctx(named, positional);
      this._key = name;
      this._ctx = ctx;
      this._element = element;
      (true && !(typeof name === 'string' && name.length > 0) && (0, _debug.assert)(`You must provide string as first positional argument for {{${named.debugName}}}`, typeof name === 'string' && name.length > 0));
      this.validateTrackedOptions(named);
      this.cleanMutationObservers();
      this.cleanResizeObservers();
      if (name !== this._key || this._ctx !== ctx) {
        (0, _ref.bucketFor)(this._ctx).add(this._key, null);
      }
      (0, _ref.watchFor)(name, ctx, () => {
        const keys = (0, _prototypeReference.getReferencedKeys)(ctx, name);
        keys.forEach(keyName => {
          // consume keys with callbacks
          ctx[keyName];
        });
      });
      (0, _ref.bucketFor)(ctx).add(name, element);
      if (this.isTracked(named)) {
        this.installMutationObservers(named);
        if (this.getObserverOptions(named).resize) {
          this.installResizeObservers(element);
        }
      }
    }
    ctx(named = {}, positional = [undefined]) {
      (true && !(named.bucket !== null) && (0, _debug.assert)(`ember-ref-bucket: You trying to use {{${named.debugName}}} as local reference for template-only component. Replace it to {{global-ref "${positional[0]}"}}`, named.bucket !== null));
      return named.bucket || (0, _application.getOwner)(this);
    }
    isTracked(named = {}) {
      return named.tracked || false;
    }
    name(positional) {
      return positional[0];
    }
  }, (_applyDecoratedDescriptor(_class.prototype, "markDirty", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "markDirty"), _class.prototype)), _class);
});
;define("ember-ref-bucket/utils/prototype-reference", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.addPrototypeReference = addPrototypeReference;
  _exports.getReferencedKeys = getReferencedKeys;
  const PrototypeReferences = new WeakMap();
  function addPrototypeReference(klass, objectKey, referenceName) {
    if (!PrototypeReferences.has(klass)) {
      PrototypeReferences.set(klass, {});
    }
    let obj = PrototypeReferences.get(klass);
    if (!(referenceName in obj)) {
      obj[referenceName] = new Set();
    }
    obj[referenceName].add(objectKey);
  }
  function getReferencedKeys(klassInstance, referenceName) {
    let proto = klassInstance;
    while (proto.__proto__) {
      proto = proto.__proto__;
      if (PrototypeReferences.has(proto)) {
        let maybeData = PrototypeReferences.get(proto);
        if (referenceName in maybeData) {
          return Array.from(maybeData[referenceName]);
        }
      }
    }
    return [];
  }
});
;define("ember-ref-bucket/utils/ref", ["exports", "@ember/destroyable", "@glimmer/tracking"], function (_exports, _destroyable, _tracking) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.bucketFor = bucketFor;
  _exports.getNodeDestructors = getNodeDestructors;
  _exports.registerNodeDestructor = registerNodeDestructor;
  _exports.resolveGlobalRef = resolveGlobalRef;
  _exports.setGlobalRef = setGlobalRef;
  _exports.unregisterNodeDestructor = unregisterNodeDestructor;
  _exports.watchFor = watchFor;
  var _class, _descriptor;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let lastGlobalRef = null;
  const buckets = new WeakMap();
  const nodeDestructors = new WeakMap();
  let FieldCell = (_class = class FieldCell {
    constructor() {
      _initializerDefineProperty(this, "value", _descriptor, this);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "value", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  })), _class);
  function setGlobalRef(value) {
    lastGlobalRef = value;
  }
  function resolveGlobalRef() {
    return lastGlobalRef;
  }
  function createBucket() {
    return {
      bucket: {},
      keys: {},
      createTrackedCell(key) {
        if (!(key in this.keys)) {
          this.keys[key] = new FieldCell();
        }
      },
      get(name) {
        this.createTrackedCell(name);
        return this.bucket[name] || null;
      },
      dirtyTrackedCell(name) {
        this.createTrackedCell(name);
        const val = this.keys[name].value;
        this.keys[name].value = val;
      },
      getTracked(name) {
        this.createTrackedCell(name);
        return this.keys[name].value;
      },
      add(name, value) {
        this.createTrackedCell(name);
        this.keys[name].value = value;
        this.bucket[name] = value;
        if (!(name in this.notificationsFor)) {
          this.notificationsFor[name] = [];
        }
        this.notificationsFor[name].forEach(fn => fn());
      },
      addNotificationFor(name, fn) {
        if (!(name in this.notificationsFor)) {
          this.notificationsFor[name] = [];
        }
        this.notificationsFor[name].push(fn);
        return () => {
          this.notificationsFor[name] = this.notificationsFor[name].filter(cb => cb !== cb);
        };
      },
      notificationsFor: {}
    };
  }
  function getNodeDestructors(node) {
    return nodeDestructors.get(node) || [];
  }
  function registerNodeDestructor(node, cb) {
    if (!nodeDestructors.has(node)) {
      nodeDestructors.set(node, []);
    }
    nodeDestructors.get(node).push(cb);
  }
  function unregisterNodeDestructor(node, cb) {
    const destructors = nodeDestructors.get(node) || [];
    nodeDestructors.set(node, destructors.filter(el => el !== cb));
  }
  function bucketFor(rawCtx) {
    const ctx = rawCtx;
    if (!buckets.has(ctx)) {
      buckets.set(ctx, createBucket());
      if ((0, _destroyable.isDestroyed)(ctx) || (0, _destroyable.isDestroying)(ctx)) {
        try {
          return buckets.get(ctx);
        } finally {
          buckets.delete(ctx);
        }
      }
      (0, _destroyable.registerDestructor)(ctx, () => {
        buckets.delete(ctx);
      });
    }
    return buckets.get(ctx);
  }
  function watchFor(name, bucketRef, cb) {
    const bucket = bucketFor(bucketRef);
    return bucket.addNotificationFor(name, cb);
  }
});
;define("ember-render-helpers/helpers/did-insert", ["exports", "@ember/component/helper", "@ember/debug"], function (_exports, _helper, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  /**
   * This helper is activated only when it is rendered for the first time
   * (inserted in the DOM). It does not run during or after it is un-rendered
   * (removed from the DOM), or when its arguments are updated.
   */
  class DidInsertHelper extends _helper.default {
    constructor(...args) {
      super(...args);
      _defineProperty(this, "didRun", false);
    }
    compute(positional, named) {
      const fn = positional[0];
      (true && !(typeof fn === 'function') && (0, _debug.assert)(`\`{{did-insert fn}}\` expects a function as the first parameter. You provided: ${fn}`, typeof fn === 'function'));
      if (this.didRun) return;
      this.didRun = true;
      fn(positional.slice(1), named);
    }
  }
  _exports.default = DidInsertHelper;
});
;define("ember-render-helpers/helpers/did-update", ["exports", "@ember/component/helper", "@ember/debug"], function (_exports, _helper, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  /**
   * This helper is activated only on _updates_ to it's arguments (both positional
   * and named). It does not run during or after initial render, or before it is
   * un-rendered (removed from the DOM).
   */
  class DidUpdateHelper extends _helper.default {
    constructor(...args) {
      super(...args);
      _defineProperty(this, "didRun", false);
    }
    compute(positional, named) {
      const fn = positional[0];
      (true && !(typeof fn === 'function') && (0, _debug.assert)(`\`{{did-update fn}}\` expects a function as the first parameter. You provided: ${fn}`, typeof fn === 'function'));
      if (!this.didRun) {
        this.didRun = true;

        // Consume individual properties to entangle tracking.
        // https://github.com/emberjs/ember.js/issues/19277
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        positional.forEach(() => {});
        Object.values(named);
        return;
      }
      fn(positional.slice(1), named);
    }
  }
  _exports.default = DidUpdateHelper;
});
;define("ember-render-helpers/helpers/will-destroy", ["exports", "@ember/component/helper", "@ember/debug"], function (_exports, _helper, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  /**
   * This helper is activated immediately before the helper is un-rendered
   * (removed from the DOM). It does not run during or after initial render, or
   * when its arguments are updated.
   */
  class WillDestroyHelper extends _helper.default {
    constructor(...args) {
      super(...args);
      _defineProperty(this, "fn", void 0);
      _defineProperty(this, "positional", void 0);
      _defineProperty(this, "named", void 0);
    }
    compute(positional, named) {
      const fn = positional[0];
      (true && !(typeof fn === 'function') && (0, _debug.assert)(`\`{{did-insert fn}}\` expects a function as the first parameter. You provided: ${fn}`, typeof fn === 'function'));
      this.fn = fn;
      this.positional = positional.slice(1);
      this.named = named;
    }
    willDestroy() {
      if (this.fn && this.positional && this.named) {
        const {
          fn
        } = this;
        fn(this.positional, this.named);
      }
      super.willDestroy();
    }
  }
  _exports.default = WillDestroyHelper;
});
;define("ember-render-helpers/types", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
});
;/*
 * This is a stub file, it must be on disk b/c babel-plugin-debug-macros
 * does not strip the module require when the transpiled variable usage is
 * stripped.
 */
define("ember-resolver/features", [], function () {
  "use strict";
});
;define("ember-resolver/index", ["exports", "ember-resolver/resolvers/classic"], function (_exports, _classic) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _classic.default;
    }
  });
});
;define("ember-resolver/resolver", ["exports", "ember-resolver/resolvers/classic"], function (_exports, _classic) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _classic.default;
    }
  });
});
;define("ember-resolver/resolvers/classic/container-debug-adapter", ["exports", "@ember/array", "@ember/debug/container-debug-adapter", "ember-resolver/resolvers/classic/index", "@ember/application"], function (_exports, _array, _containerDebugAdapter, _index, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  function getPod(type, key, prefix) {
    let match = key.match(new RegExp('^/?' + prefix + '/(.+)/' + type + '$'));
    if (match !== null) {
      return match[1];
    }
  }

  /*
   * This module defines a subclass of Ember.ContainerDebugAdapter that adds
   * support for resolving from modules.
   *
   */
  var _default = _exports.default = _containerDebugAdapter.default.extend({
    _moduleRegistry: null,
    init() {
      this._super(...arguments);
      this.namespace = (0, _application.getOwner)(this).lookup('application:main');
      if (!this._moduleRegistry) {
        this._moduleRegistry = new _index.ModuleRegistry();
      }
    },
    /**
        The container of the application being debugged.
        This property will be injected
        on creation.
         @property container
        @default null
        */

    /**
        The resolver instance of the application
        being debugged. This property will be injected
        on creation.
         @property resolver
        @default null
        */

    /**
        Returns true if it is possible to catalog a list of available
        classes in the resolver for a given type.
         @method canCatalogEntriesByType
        @param {string} type The type. e.g. "model", "controller", "route"
        @return {boolean} whether a list is available for this type.
        */
    canCatalogEntriesByType(type) {
      if (type === 'model') {
        return true;
      }
      return this._super(...arguments);
    },
    /**
        Returns the available classes a given type.
         @method catalogEntriesByType
        @param {string} type The type. e.g. "model", "controller", "route"
        @return {Array} An array of classes.
        */
    catalogEntriesByType(type) {
      let moduleNames = this._moduleRegistry.moduleNames();
      let types = (0, _array.A)();
      let prefix = this.namespace.modulePrefix;
      for (let i = 0, l = moduleNames.length; i < l; i++) {
        let key = moduleNames[i];
        if (key.indexOf(type) !== -1) {
          // Check if it's a pod module
          let name = getPod(type, key, this.namespace.podModulePrefix || prefix);
          if (!name) {
            // Not pod
            name = key.split(type + 's/').pop();

            // Support for different prefix (such as ember-cli addons).
            // Uncomment the code below when
            // https://github.com/ember-cli/ember-resolver/pull/80 is merged.

            //let match = key.match('^/?(.+)/' + type);
            //if (match && match[1] !== prefix) {
            // Different prefix such as an addon
            //name = match[1] + '@' + name;
            //}
          }

          types.addObject(name);
        }
      }
      return types;
    }
  });
});
;define("ember-resolver/resolvers/classic/index", ["exports", "ember", "@ember/debug", "@ember/object", "@ember/string", "ember-resolver/utils/class-factory"], function (_exports, _ember, _debug, _object, _string, _classFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports.ModuleRegistry = void 0;
  /* globals requirejs, require */

  if (typeof requirejs.entries === 'undefined') {
    requirejs.entries = requirejs._eak_seen;
  }
  class ModuleRegistry {
    constructor(entries) {
      this._entries = entries || requirejs.entries;
    }
    moduleNames() {
      return Object.keys(this._entries);
    }
    has(moduleName) {
      return moduleName in this._entries;
    }
    get(...args) {
      return require(...args);
    }
  }

  /**
   * This module defines a subclass of Ember.DefaultResolver that adds two
   * important features:
   *
   *  1) The resolver makes the container aware of es6 modules via the AMD
   *     output. The loader's _moduleEntries is consulted so that classes can be
   *     resolved directly via the module loader, without needing a manual
   *     `import`.
   *  2) is able to provide injections to classes that implement `extend`
   *     (as is typical with Ember).
   */
  _exports.ModuleRegistry = ModuleRegistry;
  function parseName(fullName) {
    if (fullName.parsedName === true) {
      return fullName;
    }
    let prefix, type, name;
    let fullNameParts = fullName.split('@');
    if (fullNameParts.length === 3) {
      if (fullNameParts[0].length === 0) {
        // leading scoped namespace: `@scope/pkg@type:name`
        prefix = `@${fullNameParts[1]}`;
        let prefixParts = fullNameParts[2].split(':');
        type = prefixParts[0];
        name = prefixParts[1];
      } else {
        // interweaved scoped namespace: `type:@scope/pkg@name`
        prefix = `@${fullNameParts[1]}`;
        type = fullNameParts[0].slice(0, -1);
        name = fullNameParts[2];
      }
      if (type === 'template:components') {
        name = `components/${name}`;
        type = 'template';
      }
    } else if (fullNameParts.length === 2) {
      let prefixParts = fullNameParts[0].split(':');
      if (prefixParts.length === 2) {
        if (prefixParts[1].length === 0) {
          type = prefixParts[0];
          name = `@${fullNameParts[1]}`;
        } else {
          prefix = prefixParts[1];
          type = prefixParts[0];
          name = fullNameParts[1];
        }
      } else {
        let nameParts = fullNameParts[1].split(':');
        prefix = fullNameParts[0];
        type = nameParts[0];
        name = nameParts[1];
      }
      if (type === 'template' && prefix.lastIndexOf('components/', 0) === 0) {
        name = `components/${name}`;
        prefix = prefix.slice(11);
      }
    } else {
      fullNameParts = fullName.split(':');
      type = fullNameParts[0];
      name = fullNameParts[1];
    }
    let fullNameWithoutType = name;
    let namespace = (0, _object.get)(this, 'namespace');
    let root = namespace;
    return {
      parsedName: true,
      fullName: fullName,
      prefix: prefix || this.prefix({
        type: type
      }),
      type: type,
      fullNameWithoutType: fullNameWithoutType,
      name: name,
      root: root,
      resolveMethodName: "resolve" + (0, _string.classify)(type)
    };
  }
  function resolveOther(parsedName) {
    (true && !(this.namespace.modulePrefix) && (0, _debug.assert)('`modulePrefix` must be defined', this.namespace.modulePrefix));
    let normalizedModuleName = this.findModuleName(parsedName);
    if (normalizedModuleName) {
      let defaultExport = this._extractDefaultExport(normalizedModuleName, parsedName);
      if (defaultExport === undefined) {
        throw new Error(` Expected to find: '${parsedName.fullName}' within '${normalizedModuleName}' but got 'undefined'. Did you forget to 'export default' within '${normalizedModuleName}'?`);
      }
      if (this.shouldWrapInClassFactory(defaultExport, parsedName)) {
        defaultExport = (0, _classFactory.default)(defaultExport);
      }
      return defaultExport;
    }
  }
  const Resolver = _object.default.extend({
    resolveOther,
    parseName,
    pluralizedTypes: null,
    moduleRegistry: null,
    makeToString(factory, fullName) {
      return '' + this.namespace.modulePrefix + '@' + fullName + ':';
    },
    shouldWrapInClassFactory( /* module, parsedName */
    ) {
      return false;
    },
    init() {
      this._super();
      this.moduleBasedResolver = true;
      if (!this._moduleRegistry) {
        this._moduleRegistry = new ModuleRegistry();
      }
      this._normalizeCache = Object.create(null);
      this.pluralizedTypes = this.pluralizedTypes || Object.create(null);
      if (!this.pluralizedTypes.config) {
        this.pluralizedTypes.config = 'config';
      }
      this._deprecatedPodModulePrefix = false;
    },
    normalize(fullName) {
      return this._normalizeCache[fullName] || (this._normalizeCache[fullName] = this._normalize(fullName));
    },
    resolve(fullName) {
      let parsedName = this.parseName(fullName);
      let resolveMethodName = parsedName.resolveMethodName;
      let resolved;
      if (typeof this[resolveMethodName] === 'function') {
        resolved = this[resolveMethodName](parsedName);
      }
      if (resolved == null) {
        resolved = this.resolveOther(parsedName);
      }
      return resolved;
    },
    _normalize(fullName) {
      // A) Convert underscores to dashes
      // B) Convert camelCase to dash-case, except for components (their
      //    templates) and helpers where we want to avoid shadowing camelCase
      //    expressions
      // C) replace `.` with `/` in order to make nested controllers work in the following cases
      //      1. `needs: ['posts/post']`
      //      2. `{{render "posts/post"}}`
      //      3. `this.render('posts/post')` from Route

      let split = fullName.split(':');
      if (split.length > 1) {
        let type = split[0];
        if (type === 'component' || type === 'helper' || type === 'modifier' || type === 'template' && split[1].indexOf('components/') === 0) {
          return type + ':' + split[1].replace(/_/g, '-');
        } else {
          return type + ':' + (0, _string.dasherize)(split[1].replace(/\./g, '/'));
        }
      } else {
        return fullName;
      }
    },
    pluralize(type) {
      return this.pluralizedTypes[type] || (this.pluralizedTypes[type] = type + 's');
    },
    podBasedLookupWithPrefix(podPrefix, parsedName) {
      let fullNameWithoutType = parsedName.fullNameWithoutType;
      if (parsedName.type === 'template') {
        fullNameWithoutType = fullNameWithoutType.replace(/^components\//, '');
      }
      return podPrefix + '/' + fullNameWithoutType + '/' + parsedName.type;
    },
    podBasedModuleName(parsedName) {
      let podPrefix = this.namespace.podModulePrefix || this.namespace.modulePrefix;
      return this.podBasedLookupWithPrefix(podPrefix, parsedName);
    },
    podBasedComponentsInSubdir(parsedName) {
      let podPrefix = this.namespace.podModulePrefix || this.namespace.modulePrefix;
      podPrefix = podPrefix + '/components';
      if (parsedName.type === 'component' || /^components/.test(parsedName.fullNameWithoutType)) {
        return this.podBasedLookupWithPrefix(podPrefix, parsedName);
      }
    },
    resolveEngine(parsedName) {
      let engineName = parsedName.fullNameWithoutType;
      let engineModule = engineName + '/engine';
      if (this._moduleRegistry.has(engineModule)) {
        return this._extractDefaultExport(engineModule);
      }
    },
    resolveRouteMap(parsedName) {
      let engineName = parsedName.fullNameWithoutType;
      let engineRoutesModule = engineName + '/routes';
      if (this._moduleRegistry.has(engineRoutesModule)) {
        let routeMap = this._extractDefaultExport(engineRoutesModule);
        (true && !(routeMap.isRouteMap) && (0, _debug.assert)(`The route map for ${engineName} should be wrapped by 'buildRoutes' before exporting.`, routeMap.isRouteMap));
        return routeMap;
      }
    },
    resolveTemplate(parsedName) {
      let resolved = this.resolveOther(parsedName);
      if (resolved == null) {
        resolved = _ember.default.TEMPLATES[parsedName.fullNameWithoutType];
      }
      return resolved;
    },
    mainModuleName(parsedName) {
      if (parsedName.fullNameWithoutType === 'main') {
        // if router:main or adapter:main look for a module with just the type first
        return parsedName.prefix + '/' + parsedName.type;
      }
    },
    defaultModuleName(parsedName) {
      return parsedName.prefix + '/' + this.pluralize(parsedName.type) + '/' + parsedName.fullNameWithoutType;
    },
    nestedColocationComponentModuleName(parsedName) {
      if (parsedName.type === 'component') {
        return parsedName.prefix + '/' + this.pluralize(parsedName.type) + '/' + parsedName.fullNameWithoutType + '/index';
      }
    },
    prefix(parsedName) {
      let tmpPrefix = this.namespace.modulePrefix;
      if (this.namespace[parsedName.type + 'Prefix']) {
        tmpPrefix = this.namespace[parsedName.type + 'Prefix'];
      }
      return tmpPrefix;
    },
    /**
      A listing of functions to test for moduleName's based on the provided
     `parsedName`. This allows easy customization of additional module based
     lookup patterns.
      @property moduleNameLookupPatterns
     @returns {Ember.Array}
     */
    moduleNameLookupPatterns: (0, _object.computed)(function () {
      return [this.podBasedModuleName, this.podBasedComponentsInSubdir, this.mainModuleName, this.defaultModuleName, this.nestedColocationComponentModuleName];
    }).readOnly(),
    findModuleName(parsedName, loggingDisabled) {
      let moduleNameLookupPatterns = this.get('moduleNameLookupPatterns');
      let moduleName;
      for (let index = 0, length = moduleNameLookupPatterns.length; index < length; index++) {
        let item = moduleNameLookupPatterns[index];
        let tmpModuleName = item.call(this, parsedName);

        // allow treat all dashed and all underscored as the same thing
        // supports components with dashes and other stuff with underscores.
        if (tmpModuleName) {
          tmpModuleName = this.chooseModuleName(tmpModuleName, parsedName);
        }
        if (tmpModuleName && this._moduleRegistry.has(tmpModuleName)) {
          moduleName = tmpModuleName;
        }
        if (!loggingDisabled) {
          this._logLookup(moduleName, parsedName, tmpModuleName);
        }
        if (moduleName) {
          return moduleName;
        }
      }
    },
    chooseModuleName(moduleName, parsedName) {
      let underscoredModuleName = (0, _string.underscore)(moduleName);
      if (moduleName !== underscoredModuleName && this._moduleRegistry.has(moduleName) && this._moduleRegistry.has(underscoredModuleName)) {
        throw new TypeError(`Ambiguous module names: '${moduleName}' and '${underscoredModuleName}'`);
      }
      if (this._moduleRegistry.has(moduleName)) {
        return moduleName;
      } else if (this._moduleRegistry.has(underscoredModuleName)) {
        return underscoredModuleName;
      }
      // workaround for dasherized partials:
      // something/something/-something => something/something/_something
      let partializedModuleName = moduleName.replace(/\/-([^/]*)$/, '/_$1');
      if (this._moduleRegistry.has(partializedModuleName)) {
        (true && !(false) && (0, _debug.deprecate)('Modules should not contain underscores. ' + 'Attempted to lookup "' + moduleName + '" which ' + 'was not found. Please rename "' + partializedModuleName + '" ' + 'to "' + moduleName + '" instead.', false, {
          id: 'ember-resolver.underscored-modules',
          until: '3.0.0',
          for: 'ember-resolver',
          since: '0.1.0'
        }));
        return partializedModuleName;
      }
      if (true /* DEBUG */) {
        let isCamelCaseHelper = parsedName.type === 'helper' && /[a-z]+[A-Z]+/.test(moduleName);
        if (isCamelCaseHelper) {
          this._camelCaseHelperWarnedNames = this._camelCaseHelperWarnedNames || [];
          let alreadyWarned = this._camelCaseHelperWarnedNames.indexOf(parsedName.fullName) > -1;
          if (!alreadyWarned && this._moduleRegistry.has((0, _string.dasherize)(moduleName))) {
            this._camelCaseHelperWarnedNames.push(parsedName.fullName);
            (true && (0, _debug.warn)('Attempted to lookup "' + parsedName.fullName + '" which ' + 'was not found. In previous versions of ember-resolver, a bug would have ' + 'caused the module at "' + (0, _string.dasherize)(moduleName) + '" to be ' + 'returned for this camel case helper name. This has been fixed. ' + 'Use the dasherized name to resolve the module that would have been ' + 'returned in previous versions.', false, {
              id: 'ember-resolver.camelcase-helper-names',
              until: '3.0.0'
            }));
          }
        }
      }
    },
    // used by Ember.DefaultResolver.prototype._logLookup
    lookupDescription(fullName) {
      let parsedName = this.parseName(fullName);
      let moduleName = this.findModuleName(parsedName, true);
      return moduleName;
    },
    // only needed until 1.6.0-beta.2 can be required
    _logLookup(found, parsedName, description) {
      if (!_ember.default.ENV.LOG_MODULE_RESOLVER && !parsedName.root.LOG_RESOLVER) {
        return;
      }
      let padding;
      let symbol = found ? '[✓]' : '[ ]';
      if (parsedName.fullName.length > 60) {
        padding = '.';
      } else {
        padding = new Array(60 - parsedName.fullName.length).join('.');
      }
      if (!description) {
        description = this.lookupDescription(parsedName);
      }

      /* eslint-disable no-console */
      if (console && console.info) {
        console.info(symbol, parsedName.fullName, padding, description);
      }
    },
    knownForType(type) {
      let moduleKeys = this._moduleRegistry.moduleNames();
      let items = Object.create(null);
      for (let index = 0, length = moduleKeys.length; index < length; index++) {
        let moduleName = moduleKeys[index];
        let fullname = this.translateToContainerFullname(type, moduleName);
        if (fullname) {
          items[fullname] = true;
        }
      }
      return items;
    },
    translateToContainerFullname(type, moduleName) {
      let prefix = this.prefix({
        type
      });

      // Note: using string manipulation here rather than regexes for better performance.
      // pod modules
      // '^' + prefix + '/(.+)/' + type + '$'
      let podPrefix = prefix + '/';
      let podSuffix = '/' + type;
      let start = moduleName.indexOf(podPrefix);
      let end = moduleName.indexOf(podSuffix);
      if (start === 0 && end === moduleName.length - podSuffix.length && moduleName.length > podPrefix.length + podSuffix.length) {
        return type + ':' + moduleName.slice(start + podPrefix.length, end);
      }

      // non-pod modules
      // '^' + prefix + '/' + pluralizedType + '/(.+)$'
      let pluralizedType = this.pluralize(type);
      let nonPodPrefix = prefix + '/' + pluralizedType + '/';
      if (moduleName.indexOf(nonPodPrefix) === 0 && moduleName.length > nonPodPrefix.length) {
        return type + ':' + moduleName.slice(nonPodPrefix.length);
      }
    },
    _extractDefaultExport(normalizedModuleName) {
      let module = this._moduleRegistry.get(normalizedModuleName, null, null, true /* force sync */);

      if (module && module['default']) {
        module = module['default'];
      }
      return module;
    }
  });
  Resolver.reopenClass({
    moduleBasedResolver: true
  });
  var _default = _exports.default = Resolver;
});
;define("ember-resolver/utils/class-factory", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = classFactory;
  function classFactory(klass) {
    return {
      create(injections) {
        if (typeof klass.extend === 'function') {
          return klass.extend(injections);
        } else {
          return klass;
        }
      }
    };
  }
});
;define("ember-simple-auth-token/authenticators/jwt", ["exports", "@ember/object", "@ember/application", "rsvp", "@ember/utils", "@ember/runloop", "ember-simple-auth-token/authenticators/token"], function (_exports, _object, _application, _rsvp, _utils, _runloop, _token) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /* global FastBoot */

  const decode = str => {
    if (typeof atob === 'function') {
      return atob(str);
    } else if (typeof FastBoot === 'object') {
      try {
        const buffer = FastBoot.require('buffer');
        return buffer.Buffer.from(str, 'base64').toString('utf-8');
      } catch (err) {
        throw new Error('buffer must be available for decoding base64 strings in FastBoot. Make sure to add buffer to your fastbootDependencies.');
      }
    } else {
      throw new Error('Neither atob nor the FastBoot global are avaialble. Unable to decode base64 strings.');
    }
  };

  /**
    JWT (JSON Web Token) Authenticator that supports automatic token refresh.
  
    Inspired by [ember-simple-auth-oauth2](https://github.com/simplabs/ember-simple-auth/tree/master/packages/ember-simple-auth-oauth2)
  
    The factory for this authenticator is registered as 'authenticator:jwt` in Ember's container.
  
    @class JWT
    @namespace SimpleAuth.Authenticators
    @module ember-simple-auth-token/authenticators/jwt
    @extends TokenAuthenticator
  */
  var _default = _exports.default = _token.default.extend({
    /**
      @method init
    */
    init() {
      this._super(...arguments);
      const owner = (0, _application.getOwner)(this);
      const environment = owner ? owner.resolveRegistration('config:environment') || {} : {};
      const config = environment['ember-simple-auth-token'] || {};
      this.tokenDataPropertyName = config.tokenDataPropertyName || 'tokenData';
      this.refreshAccessTokens = config.refreshAccessTokens === false ? false : true;
      this.tokenExpirationInvalidateSession = config.tokenExpirationInvalidateSession === false ? false : true;
      this.serverTokenRefreshEndpoint = config.serverTokenRefreshEndpoint || '/api/token-refresh/';
      this.refreshTokenPropertyName = config.refreshTokenPropertyName || 'refresh_token';
      this.tokenExpireName = config.tokenExpireName || 'exp';
      this.refreshLeeway = config.refreshLeeway || 0;
      this.tokenRefreshInvalidateSessionResponseCodes = config.tokenRefreshInvalidateSessionResponseCodes || [401, 403];
      this.refreshAccessTokenRetryAttempts = config.refreshAccessTokenRetryAttempts || 0;
      this.refreshAccessTokenRetryTimeout = config.refreshAccessTokenRetryTimeout || 1000;
      this.tokenRefreshFailInvalidateSession = config.tokenRefreshFailInvalidateSession === true ? true : false;
    },
    /**
      Restores the session from a set of session properties.
       It will return a resolving promise if one of two conditions is met:
       1) Both `data.token` and `data.expiresAt` are non-empty and `expiresAt` is greater than the calculated `now`.
      2) If `data.token` is non-empty and the decoded token has a key for `tokenExpireName`.
       If `refreshAccessTokens` is true, `scheduleAccessTokenRefresh` will be called and an automatic token refresh will be initiated.
       @method restore
      @param {Object} data Data to restore the session from
      @return {Promise} Promise that when it resolves results in the session being authenticated
    */
    restore(data) {
      const dataObject = _object.default.create(data);
      return new _rsvp.Promise((resolve, reject) => {
        const now = this.getCurrentTime();
        const token = dataObject.get(this.tokenPropertyName);
        const refreshToken = dataObject.get(this.refreshTokenPropertyName);
        let expiresAt = dataObject.get(this.tokenExpireName);
        if ((0, _utils.isEmpty)(token)) {
          return reject(new Error('empty token'));
        }
        if ((0, _utils.isEmpty)(expiresAt)) {
          // Fetch the expire time from the token data since `expiresAt` wasn't included in the data object that was passed in.
          const tokenData = this.getTokenData(token);
          expiresAt = tokenData[this.tokenExpireName];
          if ((0, _utils.isEmpty)(expiresAt)) {
            return resolve(data);
          }
        }
        if (expiresAt > now) {
          const wait = (expiresAt - now - this.refreshLeeway) * 1000;
          if (this.tokenExpirationInvalidateSession) {
            this.scheduleAccessTokenExpiration(expiresAt);
          }
          if (wait > 0) {
            if (this.refreshAccessTokens) {
              this.scheduleAccessTokenRefresh(expiresAt, refreshToken);
            }
            return resolve(data);
          } else if (this.refreshAccessTokens) {
            return resolve(this.refreshAccessToken(refreshToken, 0));
          } else {
            return reject(new Error('unable to refresh token'));
          }
        } else {
          // The refresh token might not be expired, we can't test this on the client so attempt to refresh the token. If the server rejects the token the user session will be invalidated
          if (this.refreshAccessTokens) {
            return resolve(this.refreshAccessToken(refreshToken, 0));
          } else {
            return reject(new Error('token is expired'));
          }
        }
      });
    },
    /**
      Authenticates the session with the specified `credentials`.
       It will return a resolving promise if it successfully posts a request to the `JWT.serverTokenEndpoint` with the valid credentials.
       An automatic token refresh will be scheduled with the new expiration date from the returned refresh token. That expiration will be merged with the response and the promise resolved.
       @method authenticate
      @param {Object} credentials Credentials to authenticate the session with
      @param {Object} headers Headers to send with the authentication request
      @return {Promise} Promise that resolves when an auth token is successfully acquired from the server and rejects otherwise
    */
    authenticate(credentials, headers) {
      return this.makeRequest(this.serverTokenEndpoint, credentials, {
        ...this.headers,
        ...headers
      }).then(response => {
        return this.handleAuthResponse(response.json);
      });
    },
    /**
      Schedules a token refresh request to be sent to the backend after a calculated `wait` time has passed.
       If both `token` and `expiresAt` are non-empty, and `expiresAt` minus the optional refres leeway is greater than the calculated `now`, the token refresh will be scheduled through later.
       @method scheduleAccessTokenRefresh
      @param {Integer} expiresAt Timestamp when the token expires
      @param {String} refreshToken Refresh token
    */
    scheduleAccessTokenRefresh(expiresAt, refreshToken) {
      if (this.refreshAccessTokens) {
        const now = this.getCurrentTime();
        const wait = (expiresAt - now - this.refreshLeeway) * 1000;
        if (!(0, _utils.isEmpty)(refreshToken) && !(0, _utils.isEmpty)(expiresAt)) {
          if (wait > 0) {
            (0, _runloop.cancel)(this._refreshTokenTimeout);
            delete this._refreshTokenTimeout;
            this._refreshTokenTimeout = (0, _runloop.later)(this, this.refreshAccessToken, refreshToken, 0, wait);
          } else if (expiresAt > now) {
            throw new Error('refreshLeeway is too large which is preventing token refresh.');
          }
        }
      }
    },
    /**
      Makes a refresh token request to grab a new authenticated JWT token from the server.
       It will return a resolving promise if a successful POST is made to the `JWT.serverTokenRefreshEndpoint`.
       After the new token is obtained it will schedule the next automatic token refresh based on the new `expiresAt` time.
       The session will be updated via the trigger `sessionDataUpdated`.
       @method refreshAccessToken
      @param {String} refreshToken Refresh token
      @param {Integer} attempts Number of attempts that have been made so far
      @return {Promise} Promise that resolves when an auth token is successfully acquired from the server and rejects otherwise
    */
    refreshAccessToken(refreshToken, attempts) {
      const data = this.makeRefreshData(refreshToken);
      return this.makeRequest(this.serverTokenRefreshEndpoint, data, this.headers).then(response => {
        const sessionData = this.handleAuthResponse(response.json);
        this.trigger('sessionDataUpdated', sessionData);
        return sessionData;
      }).catch(error => {
        this.handleTokenRefreshFail(error.status, refreshToken, attempts);
        return _rsvp.Promise.reject(error);
      });
    },
    /**
      Returns a nested object with the token property name.
      Example:  If `refreshTokenPropertyName` is "data.user.refreshToken", `makeRefreshData` will return {data: {user: {refreshToken: "token goes here"}}}
       @method makeRefreshData
      @param {String} refreshToken Refresh token
      @return {object} Object with the nested property name.
    */
    makeRefreshData(refreshToken) {
      const data = {};
      const nestings = this.refreshTokenPropertyName.split('.');
      const refreshTokenPropertyName = nestings.pop();
      let lastObject = data;
      nestings.forEach(nesting => {
        lastObject[nesting] = {};
        lastObject = lastObject[nesting];
      });
      lastObject[refreshTokenPropertyName] = refreshToken;
      return data;
    },
    /**
      Returns the decoded token with accessible returned values.
       @method getTokenData
      @param {String} token Token
      @return {object} Object with properties for the session.
    */
    getTokenData(token) {
      const payload = token.split('.')[1];
      const decodedPayload = decode(payload.replace(/-/g, '+').replace(/_/g, '/'));
      const tokenData = decodeURIComponent(window.escape(decodedPayload));
      try {
        return JSON.parse(tokenData);
      } catch (error) {
        return tokenData;
      }
    },
    /**
      Cancels any outstanding automatic token refreshes and returns a resolving promise.
       @method invalidate
      @return {Promise} Resolving promise
    */
    invalidate() {
      (0, _runloop.cancel)(this._refreshTokenTimeout);
      delete this._refreshTokenTimeout;
      (0, _runloop.cancel)(this._tokenExpirationTimeout);
      delete this._tokenExpirationTimeout;
      return (0, _rsvp.resolve)();
    },
    /**
      Returns the current time as a timestamp in seconds
       @method getCurrentTime
      @return {Integer} timestamp
    */
    getCurrentTime() {
      return Math.floor(new Date().getTime() / 1000);
    },
    /**
      Handles authentication response from server, and returns session data
       @method handleAuthResponse
      @param {Object} response Response body
    */
    handleAuthResponse(response) {
      const token = (0, _object.get)(response, this.tokenPropertyName);
      if ((0, _utils.isEmpty)(token)) {
        throw new Error('Token is empty. Please check your backend response.');
      }
      const tokenData = this.getTokenData(token);
      const expiresAt = (0, _object.get)(tokenData, this.tokenExpireName);
      const tokenExpireData = {};
      tokenExpireData[this.tokenExpireName] = expiresAt;
      if (this.tokenExpirationInvalidateSession) {
        this.scheduleAccessTokenExpiration(expiresAt);
      }
      if (this.refreshAccessTokens) {
        const refreshToken = (0, _object.get)(response, this.refreshTokenPropertyName);
        if ((0, _utils.isEmpty)(refreshToken)) {
          throw new Error('Refresh token is empty. Please check your backend response.');
        }
        this.scheduleAccessTokenRefresh(expiresAt, refreshToken);
      }
      return {
        ...response,
        ...tokenExpireData,
        tokenData: tokenData
      };
    },
    /**
      Handles token refresh fail status. If the server response to a token refresh has a status of 401 or 403 then the token in the session will be invalidated and the sessionInvalidated provided by ember-simple-auth will be triggered.
       @method handleTokenRefreshFail
      @param {Integer} refreshStatusCode Status code received when attempting to refresh token
      @param {String} refreshToken Refresh token
      @param {Integer} attempts Number of attempts that have been made so far
    */
    handleTokenRefreshFail(refreshStatusCode, refreshToken, attempts) {
      if (this.tokenRefreshInvalidateSessionResponseCodes.includes(refreshStatusCode)) {
        return this.invalidate().then(() => {
          this.trigger('sessionDataInvalidated');
        });
      } else if (attempts++ < this.refreshAccessTokenRetryAttempts) {
        (0, _runloop.cancel)(this._refreshTokenTimeout);
        delete this._refreshTokenTimeout;
        this._refreshTokenTimeout = (0, _runloop.later)(this, this.refreshAccessToken, refreshToken, attempts, this.refreshAccessTokenRetryTimeout);
      } else if (this.tokenRefreshFailInvalidateSession) {
        return this.invalidate().then(() => {
          this.trigger('sessionDataInvalidated');
        });
      }
    },
    /**
      Schedules session invalidation at the time token expires.
       @method scheduleAccessTokenExpiration
      @param {Integer} expiresAt Timestamp when the token expires
    */
    scheduleAccessTokenExpiration(expiresAt) {
      const now = this.getCurrentTime();
      const wait = Math.max((expiresAt - now) * 1000, 0);
      if (!(0, _utils.isEmpty)(expiresAt)) {
        (0, _runloop.cancel)(this._tokenExpirationTimeout);
        delete this._tokenExpirationTimeout;
        this._tokenExpirationTimeout = (0, _runloop.later)(this, this.handleAccessTokenExpiration, wait);
      }
    },
    /**
      Handles access token expiration
       @method handleAccessTokenExpiration
    */
    handleAccessTokenExpiration() {
      return this.invalidate().then(() => {
        this.trigger('sessionDataInvalidated');
      });
    }
  });
});
;define("ember-simple-auth-token/authenticators/token", ["exports", "@ember/object", "@ember/application", "fetch", "rsvp", "@ember/utils", "ember-simple-auth/authenticators/base"], function (_exports, _object, _application, _fetch, _rsvp, _utils, _base) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
    Authenticator that works with token-based authentication like JWT.
  
    _The factory for this authenticator is registered as `'authenticator:token'` in Ember's container._
  
    @class Token
    @namespace SimpleAuth.Authenticators
    @module ember-simple-auth-token/authenticators/token
    @extends Base
  */
  var _default = _exports.default = _base.default.extend({
    /**
      @method init
    */
    init() {
      this._super(...arguments);
      const owner = (0, _application.getOwner)(this);
      const environment = owner ? owner.resolveRegistration('config:environment') || {} : {};
      const config = environment['ember-simple-auth-token'] || {};
      this.serverTokenEndpoint = config.serverTokenEndpoint || '/api/token-auth/';
      this.tokenPropertyName = config.tokenPropertyName || 'token';
      this.headers = config.headers || {};
    },
    /**
      Restores the session from a set of session properties; __will return a resolving promise when there's a non-empty `token` in the `properties`__ and a rejecting promise otherwise.
       @method restore
      @param {Object} properties Properties to restore the session from
      @return {Promise} Promise that when it resolves results in the session being authenticated
    */
    restore(properties) {
      const propertiesObject = _object.default.create(properties);
      return new _rsvp.Promise((resolve, reject) => {
        if (!(0, _utils.isEmpty)(propertiesObject.get(this.tokenPropertyName))) {
          return resolve(properties);
        } else {
          return reject();
        }
      });
    },
    /**
      Authenticates the session with the specified `credentials`; the credentials are `POST`ed to the [`Authenticators.Token#serverTokenEndpoint`](#SimpleAuth-Authenticators-Token-serverTokenEndpoint) and if they are valid the server returns an auth token in response. __If the credentials are valid and authentication succeeds, a promise that resolves with the server's response is returned__, otherwise a promise that rejects with the server error is returned.
       @method authenticate
      @param {Object} credentials Credentials to authenticate the session with
      @param {Object} headers Headers to send with the authentication request
      @return {Promise} Promise that resolves when an auth token is successfully acquired from the server and rejects otherwise
    */
    authenticate(credentials, headers) {
      return this.makeRequest(this.serverTokenEndpoint, credentials, {
        ...this.headers,
        ...headers
      }).then(response => {
        return response.json;
      });
    },
    /**
      Does nothing
       @method invalidate
      @return {Promise} Resolving promise
    */
    invalidate() {
      return (0, _rsvp.resolve)();
    },
    /**
      @method makeRequest
      @param {String} url Server endpoint
      @param {Object} data Object that will be sent to server
      @param {Object} headers Additional headers that will be sent to server
      @return {Promise} Promise that resolves when the request is successfully and rejects otherwise
    */
    makeRequest(url, data, headers) {
      return (0, _fetch.default)(url, {
        method: 'POST',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json',
          ...headers
        },
        body: JSON.stringify(data)
      }).then(response => {
        const res = {
          statusText: response.statusText,
          status: response.status,
          headers: response.headers
        };
        return response.text().then(text => {
          res.text = text;
          try {
            res.json = JSON.parse(text);
          } catch (e) {
            return (0, _rsvp.reject)(res);
          }
          if (response.ok) {
            return res;
          } else {
            return (0, _rsvp.reject)(res);
          }
        }).catch(() => {
          return (0, _rsvp.reject)(res);
        });
      });
    }
  });
});
;define("ember-simple-auth-token/mixins/token-adapter", ["exports", "@ember/object/mixin", "@ember/application", "@ember/service", "@ember/object", "@ember/utils"], function (_exports, _mixin, _application, _service, _object, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
    Adapter Mixin that works with token-based authentication like JWT.
  
    @class TokenAdapter
    @module ember-simple-auth-token/mixins/token-adapter
    @extends Ember.Mixin
  */
  var _default = _exports.default = _mixin.default.create({
    session: (0, _service.inject)('session'),
    /**
      @method init
    */
    init() {
      this._super(...arguments);
      const owner = (0, _application.getOwner)(this);
      const environment = owner ? owner.resolveRegistration('config:environment') || {} : {};
      const config = environment['ember-simple-auth-token'] || {};
      this.tokenPropertyName = config.tokenPropertyName || 'token';
      this.authorizationHeaderName = config.authorizationHeaderName || 'Authorization';
      this.authorizationPrefix = config.authorizationPrefix === '' ? '' : config.authorizationPrefix || 'Bearer ';
    },
    /*
      Adds the `token` property from the session to the `authorizationHeaderName`.
    */
    headers: (0, _object.computed)('session.data.authenticated', function () {
      const data = this.get('session.data.authenticated');
      const token = (0, _object.get)(data, this.get('tokenPropertyName'));
      const prefix = this.get('authorizationPrefix');
      const header = this.get('authorizationHeaderName');
      if (this.get('session.isAuthenticated') && !(0, _utils.isEmpty)(token)) {
        return {
          [header]: `${prefix}${token}`
        };
      } else {
        return {};
      }
    }),
    /**
      Handles response from server.
       @method authorize
      @param {Number} status
    */
    handleResponse(status) {
      if (status === 401 && this.get('session.isAuthenticated')) {
        this.get('session').invalidate();
      }
      return this._super(...arguments);
    }
  });
});
;define("ember-simple-auth-token/mixins/token-authorizer", ["exports", "@ember/object/mixin", "@ember/application", "@ember/service", "@ember/object", "@ember/utils"], function (_exports, _mixin, _application, _service, _object, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
    Authorizer Mixin that works with token-based authentication like JWT by sending the `token` properties from the session in the `Authorization` header.
  
    @class TokenAuthorizer
    @module ember-simple-auth-token/mixins/token-authorizer
    @extends Ember.Mixin
  */
  var _default = _exports.default = _mixin.default.create({
    session: (0, _service.inject)('session'),
    /**
      @method init
    */
    init() {
      this._super(...arguments);
      const owner = (0, _application.getOwner)(this);
      const environment = owner ? owner.resolveRegistration('config:environment') || {} : {};
      const config = environment['ember-simple-auth-token'] || {};
      this.tokenPropertyName = config.tokenPropertyName || 'token';
      this.authorizationHeaderName = config.authorizationHeaderName || 'Authorization';
      this.authorizationPrefix = config.authorizationPrefix === '' ? '' : config.authorizationPrefix || 'Bearer ';
    },
    /**
      Authorizes an XHR request by sending the `token` properties from the session in the `Authorization` header:
       ```
      Authorization: Bearer <token>
      ```
       @method authorize
      @param {XMLHttpRequest} xhr
    */
    authorize(xhr) {
      const data = (0, _object.get)(this, 'session.data.authenticated');
      const token = (0, _object.get)(data, this.get('tokenPropertyName'));
      const prefix = this.get('authorizationPrefix');
      const header = this.get('authorizationHeaderName');
      if (this.get('session.isAuthenticated') && !(0, _utils.isEmpty)(token)) {
        xhr.setRequestHeader(header, prefix + token);
      }
    },
    /**
      Handles response from server.
       @method authorize
      @param {Number} status
    */
    handleResponse(status) {
      if (status === 401 && this.get('session.isAuthenticated')) {
        this.get('session').invalidate();
      }
      return this._super(...arguments);
    }
  });
});
;define("ember-simple-auth/-internals/routing", ["exports", "ember", "ember-simple-auth/utils/is-fastboot", "ember-simple-auth/utils/location"], function (_exports, _ember, _isFastboot, _location) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.handleSessionAuthenticated = handleSessionAuthenticated;
  _exports.handleSessionInvalidated = handleSessionInvalidated;
  _exports.prohibitAuthentication = prohibitAuthentication;
  _exports.requireAuthentication = requireAuthentication;
  _exports.triggerAuthentication = triggerAuthentication;
  function requireAuthentication(owner, transition) {
    let sessionService = owner.lookup('service:session');
    let isAuthenticated = sessionService.get('isAuthenticated');
    if (!isAuthenticated) {
      if (transition && (0, _isFastboot.default)(owner)) {
        const fastbootService = owner.lookup('service:fastboot');
        const cookiesService = owner.lookup('service:cookies');
        cookiesService.write('ember_simple_auth-redirectTarget', transition.intent.url, {
          path: '/',
          secure: fastbootService.get('request.protocol') === 'https'
        });
      } else if (transition) {
        sessionService.set('attemptedTransition', transition);
      }
    }
    return isAuthenticated;
  }
  function triggerAuthentication(owner, authenticationRoute) {
    let authRouter = owner.lookup('service:router') || owner.lookup('router:main');
    authRouter.transitionTo(authenticationRoute);
  }
  function prohibitAuthentication(owner, routeIfAlreadyAuthenticated) {
    let authRouter = owner.lookup('service:router') || owner.lookup('router:main');
    authRouter.transitionTo(routeIfAlreadyAuthenticated);
  }
  function handleSessionAuthenticated(owner, routeAfterAuthentication) {
    let sessionService = owner.lookup('service:session');
    let attemptedTransition = sessionService.get('attemptedTransition');
    let cookiesService = owner.lookup('service:cookies');
    const redirectTarget = cookiesService.read('ember_simple_auth-redirectTarget');
    let routerService = owner.lookup('service:router');
    if (attemptedTransition) {
      attemptedTransition.retry();
      sessionService.set('attemptedTransition', null);
    } else if (redirectTarget) {
      routerService.transitionTo(redirectTarget);
      cookiesService.clear('ember_simple_auth-redirectTarget');
    } else {
      routerService.transitionTo(routeAfterAuthentication);
    }
  }
  function handleSessionInvalidated(owner, routeAfterInvalidation) {
    if ((0, _isFastboot.default)(owner)) {
      let routerService = owner.lookup('service:router');
      routerService.transitionTo(routeAfterInvalidation);
    } else {
      if (!_ember.default.testing) {
        _location.default.replace(routeAfterInvalidation);
      }
    }
  }
});
;define("ember-simple-auth/authenticators/base", ["exports", "rsvp", "@ember/object/evented", "@ember/object"], function (_exports, _rsvp, _evented, _object) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
    The base class for all authenticators. __This serves as a starting point for
    implementing custom authenticators and must not be used directly.__
  
    The authenticator authenticates the session. The actual mechanism used to do
    this might, e.g., post a set of credentials to a server and in exchange
    retrieve an access token, initiating authentication against an external
    provider like Facebook, etc. The details depend on the specific authenticator.
    Upon successful authentication, any data that the authenticator receives and
    resolves via the promise returned from the
    {{#crossLink "BaseAuthenticator/authenticate:method"}}{{/crossLink}}
    method is stored in the session and can be accessed via the session service
    to be used by the authorizer (see
    {{#crossLink "BaseAuthorizer/authorize:method"}}{{/crossLink}}) to e.g.,
    authorize outgoing requests.
  
    The authenticator also decides whether a set of data that was restored from
    the session store (see
    {{#crossLink "BaseStore/restore:method"}}{{/crossLink}}) makes up an
    authenticated session or not.
  
    __Authenticators for an application are defined in the `app/authenticators`
    directory__, e.g.:
  
    ```js
    // app/authenticators/oauth2.js
    import OAuth2PasswordGrantAuthenticator from 'ember-simple-auth/authenticators/oauth2-password-grant';
  
    export default class OAuth2Authenticator extends OAuth2PasswordGrantAuthenticator {
      ...
    }
    ```
  
    and can then be used via the name Ember CLI automatically registers for them
    within the Ember container.
  
    ```js
    // app/components/login-form.js
    import Component from '@ember/component';
    import { inject as service } from '@ember/service';
    import { action } from '@ember/object';
  
    export default class LoginFormComponent extends Component {
      @service session;
  
      @action
      authenticate() {
        this.session.authenticate('authenticator:oauth2');
      }
    }
    ```
  
    @class BaseAuthenticator
    @module ember-simple-auth/authenticators/base
    @extends Ember.Object
    @uses Ember.Evented
    @public
  */
  var _default = _exports.default = _object.default.extend(_evented.default, {
    /**
      __Triggered when the authentication data is updated by the authenticator
      due to an external or scheduled event__. This might happen, e.g., if the
      authenticator refreshes an expired token or an event is triggered from an
      external authentication provider that the authenticator uses. The session
      handles that event, passes the updated data back to the authenticator's
      {{#crossLink "BaseAuthenticator/restore:method"}}{{/crossLink}}
      method and handles the result of that invocation accordingly.
       @event sessionDataUpdated
      @param {Object} data The updated session data
      @public
    */

    /**
      __Triggered when the authentication data is invalidated by the authenticator
      due to an external or scheduled event__. This might happen, e.g., if a token
      expires or an event is triggered from an external authentication provider
      that the authenticator uses. The session handles the event and will
      invalidate itself when it is triggered.
       @event sessionDataInvalidated
      @public
    */

    /**
      Restores the session from a session data object. __This method is invoked
      by the session either on application startup if session data is restored
      from the session store__ or when properties in the store change due to
      external events (e.g. in another tab) and the new session data needs to be
      validated for whether it constitutes an authenticated session.
       __This method returns a promise. A resolving promise results in the session
      becoming or remaining authenticated.__ Any data the promise resolves with
      will be saved in and accessible via the session service's
      `data.authenticated` property (see
      {{#crossLink "SessionService/data:property"}}{{/crossLink}}). A rejecting
      promise indicates that `data` does not constitute a valid session and will
      result in the session being invalidated or remaining unauthenticated.
       The `BaseAuthenticator`'s implementation always returns a rejecting
      promise. __This method must be overridden in subclasses.__
       @method restore
      @param {Object} data The data to restore the session from
      @return {Ember.RSVP.Promise} A promise that when it resolves results in the session becoming or remaining authenticated
      @public
    */
    restore() {
      return _rsvp.default.reject();
    },
    /**
      Authenticates the session with the specified `args`. These options vary
      depending on the actual authentication mechanism the authenticator
      implements (e.g. a set of credentials or a Facebook account id etc.). __The
      session will invoke this method in order to authenticate itself__ (see
      {{#crossLink "SessionService/authenticate:method"}}{{/crossLink}}).
       __This method returns a promise. A resolving promise will result in the
      session becoming authenticated.__ Any data the promise resolves with will
      be saved in and accessible via the session service's `data.authenticated`
      property (see {{#crossLink "SessionService/data:property"}}{{/crossLink}}).
      A rejecting promise indicates that authentication failed and will result in
      the session remaining unauthenticated.
       The `BaseAuthenticator`'s implementation always returns a rejecting promise
      and thus never authenticates the session. __This method must be overridden
      in subclasses__.
       @method authenticate
      @param {Any} [...args] The arguments that the authenticator requires to authenticate the session
      @return {Ember.RSVP.Promise} A promise that when it resolves results in the session becoming authenticated
      @public
    */
    authenticate() {
      return _rsvp.default.reject();
    },
    /**
      This method is invoked as a callback when the session is invalidated. While
      the session will invalidate itself and clear all authenticated session data,
      it might be necessary for some authenticators to perform additional tasks
      (e.g. invalidating an access token on the server side).
       __This method returns a promise. A resolving promise will result in the
      session becoming unauthenticated.__ A rejecting promise will result in
      invalidation being intercepted and the session remaining authenticated.
       The `BaseAuthenticator`'s implementation always returns a resolving promise
      and thus never intercepts session invalidation. __This method doesn't have
      to be overridden in custom authenticators__ if no actions need to be
      performed on session invalidation.
       @method invalidate
      @param {Object} data The current authenticated session data
      @param {Array} ...args additional arguments as required by the authenticator
      @return {Ember.RSVP.Promise} A promise that when it resolves results in the session being invalidated
      @public
    */
    invalidate() {
      return _rsvp.default.resolve();
    }
  });
});
;define("ember-simple-auth/authenticators/devise", ["exports", "rsvp", "@ember/utils", "@ember/runloop", "ember-simple-auth/utils/assign", "ember-simple-auth/authenticators/base", "fetch"], function (_exports, _rsvp, _utils, _runloop, _assign, _base, _fetch) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const JSON_CONTENT_TYPE = 'application/json';

  /**
    Authenticator that works with the Ruby gem
    [devise](https://github.com/plataformatec/devise).
  
    __As token authentication is not actually part of devise anymore, the server
    needs to implement some customizations__ to work with this authenticator -
    see [this gist](https://gist.github.com/josevalim/fb706b1e933ef01e4fb6).
  
    @class DeviseAuthenticator
    @module ember-simple-auth/authenticators/devise
    @extends BaseAuthenticator
    @public
  */
  var _default = _exports.default = _base.default.extend({
    /**
      The endpoint on the server that the authentication request is sent to.
       @property serverTokenEndpoint
      @type String
      @default '/users/sign_in'
      @public
    */
    serverTokenEndpoint: '/users/sign_in',
    /**
      The devise resource name. __This will be used in the request and also be
      expected in the server's response.__
       @property resourceName
      @type String
      @default 'user'
      @public
    */
    resourceName: 'user',
    /**
      The token attribute name. __This will be used in the request and also be
      expected in the server's response.__
       @property tokenAttributeName
      @type String
      @default 'token'
      @public
    */
    tokenAttributeName: 'token',
    /**
      The identification attribute name. __This will be used in the request and
      also be expected in the server's response.__
       @property identificationAttributeName
      @type String
      @default 'email'
      @public
    */
    identificationAttributeName: 'email',
    /**
      Restores the session from a session data object; __returns a resolving
      promise when there are non-empty
      {{#crossLink "DeviseAuthenticator/tokenAttributeName:property"}}token{{/crossLink}}
      and
      {{#crossLink "DeviseAuthenticator/identificationAttributeName:property"}}identification{{/crossLink}}
      values in `data`__ and a rejecting promise otherwise.
       @method restore
      @param {Object} data The data to restore the session from
      @return {Ember.RSVP.Promise} A promise that when it resolves results in the session becoming or remaining authenticated
      @public
    */
    restore(data) {
      // eslint-disable-next-line prefer-promise-reject-errors
      return this._validate(data) ? _rsvp.Promise.resolve(data) : _rsvp.Promise.reject();
    },
    /**
      Authenticates the session with the specified `identification` and
      `password`; the credentials are `POST`ed to the
      {{#crossLink "DeviseAuthenticator/serverTokenEndpoint:property"}}server{{/crossLink}}.
      If the credentials are valid the server will responds with a
      {{#crossLink "DeviseAuthenticator/tokenAttributeName:property"}}token{{/crossLink}}
      and
      {{#crossLink "DeviseAuthenticator/identificationAttributeName:property"}}identification{{/crossLink}}.
      __If the credentials are valid and authentication succeeds, a promise that
      resolves with the server's response is returned__, otherwise a promise that
      rejects with the server error is returned.
       @method authenticate
      @param {String} identification The user's identification
      @param {String} password The user's password
      @return {Ember.RSVP.Promise} A promise that when it resolves results in the session becoming authenticated. If authentication fails, the promise will reject with the server response; however, the authenticator reads that response already so if you need to read it again you need to clone the response object first
      @public
    */
    authenticate(identification, password) {
      return new _rsvp.Promise((resolve, reject) => {
        const {
          resourceName,
          identificationAttributeName,
          tokenAttributeName
        } = this.getProperties('resourceName', 'identificationAttributeName', 'tokenAttributeName');
        const data = {};
        data[resourceName] = {
          password
        };
        data[resourceName][identificationAttributeName] = identification;
        this.makeRequest(data).then(response => {
          if (response.ok) {
            response.json().then(json => {
              if (this._validate(json)) {
                const resourceName = this.get('resourceName');
                const _json = json[resourceName] ? json[resourceName] : json;
                (0, _runloop.run)(null, resolve, _json);
              } else {
                (0, _runloop.run)(null, reject, `Check that server response includes ${tokenAttributeName} and ${identificationAttributeName}`);
              }
            });
          } else {
            (0, _runloop.run)(null, reject, response);
          }
        }).catch(error => (0, _runloop.run)(null, reject, error));
      });
    },
    /**
      Does nothing
       @method invalidate
      @return {Ember.RSVP.Promise} A resolving promise
      @public
    */
    invalidate() {
      return _rsvp.Promise.resolve();
    },
    /**
      Makes a request to the Devise server using
      [ember-fetch](https://github.com/stefanpenner/ember-fetch).
       @method makeRequest
      @param {Object} data The request data
      @param {Object} options request options that are passed to `fetch`
      @return {Promise} The promise returned by `fetch`
      @protected
    */
    makeRequest(data, options = {}) {
      let url = options.url || this.get('serverTokenEndpoint');
      let requestOptions = {};
      let body = JSON.stringify(data);
      (0, _assign.default)(requestOptions, {
        body,
        method: 'POST',
        headers: {
          'accept': JSON_CONTENT_TYPE,
          'content-type': JSON_CONTENT_TYPE
        }
      });
      (0, _assign.default)(requestOptions, options || {});
      return (0, _fetch.default)(url, requestOptions);
    },
    _validate(data) {
      const tokenAttributeName = this.get('tokenAttributeName');
      const identificationAttributeName = this.get('identificationAttributeName');
      const resourceName = this.get('resourceName');
      const _data = data[resourceName] ? data[resourceName] : data;
      return !(0, _utils.isEmpty)(_data[tokenAttributeName]) && !(0, _utils.isEmpty)(_data[identificationAttributeName]);
    }
  });
});
;define("ember-simple-auth/authenticators/oauth2-implicit-grant", ["exports", "rsvp", "@ember/utils", "ember-simple-auth/authenticators/base"], function (_exports, _rsvp, _utils, _base) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.parseResponse = parseResponse;
  /**
    Parses the location hash (as received from `window.location.hash`) into an
    object, e.g.:
  
    ```js
    parseResponse('/routepath#access_token=secret-token&scope=something'); // => { access_token: 'secret-token', scope: 'something' }
    ```
  
    @function parseResponse
    @param {String} locationHash The location hash (as received from `window.location.hash`)
    @return {Object} An obect with individual properties and values for the data parsed from the location hash
  */
  function parseResponse(locationHash) {
    let params = {};
    const query = locationHash.substring(locationHash.indexOf('?'));
    const regex = /([^#?&=]+)=([^&]*)/g;
    let match;

    // decode all parameter pairs
    while ((match = regex.exec(query)) !== null) {
      params[decodeURIComponent(match[1])] = decodeURIComponent(match[2]);
    }
    return params;
  }

  /**
   Authenticator that conforms to OAuth 2
   ([RFC 6749](http://tools.ietf.org/html/rfc6749)), specifically the _"Implicit
   Grant Type"_.
  
   Use {{#crossLink "SessionService/authenticate:method"}}{{/crossLink}} in your
   OAuth 2.0 redirect route to parse authentication parameters from location
   hash string into an object.
  
   @class OAuth2ImplicitGrantAuthenticator
   @module ember-simple-auth/authenticators/oauth2-implicit-grant
   @extends BaseAuthenticator
   @public
   */
  var _default = _exports.default = _base.default.extend({
    /**
     Restores the session from a session data object; __will return a resolving
     promise when there is a non-empty `access_token` in the session data__ and
     a rejecting promise otherwise.
      @method restore
     @param {Object} data The data to restore the session from
     @return {Ember.RSVP.Promise} A promise that when it resolves results in the session becoming or remaining authenticated
     @public
     */
    restore(data) {
      return new _rsvp.default.Promise((resolve, reject) => {
        if (!this._validateData(data)) {
          return reject('Could not restore session - "access_token" missing.');
        }
        return resolve(data);
      });
    },
    /**
     Authenticates the session using the specified location `hash`
     (see https://tools.ietf.org/html/rfc6749#section-4.2.2).
      __If the access token is valid and thus authentication succeeds, a promise that
     resolves with the access token is returned__, otherwise a promise that rejects
     with the error code as returned by the server is returned
     (see https://tools.ietf.org/html/rfc6749#section-4.2.2.1).
      @method authenticate
     @param {Object} hash The location hash
     @return {Ember.RSVP.Promise} A promise that when it resolves results in the session becoming authenticated
     @public
     */
    authenticate(hash) {
      return new _rsvp.default.Promise((resolve, reject) => {
        if (hash.error) {
          reject(hash.error);
        } else if (!this._validateData(hash)) {
          reject('Invalid auth params - "access_token" missing.');
        } else {
          resolve(hash);
        }
      });
    },
    /**
     This method simply returns a resolving promise.
      @method invalidate
     @return {Ember.RSVP.Promise} A promise that when it resolves results in the session being invalidated
     @public
     */
    invalidate() {
      return _rsvp.default.Promise.resolve();
    },
    _validateData(data) {
      // see https://tools.ietf.org/html/rfc6749#section-4.2.2

      return !(0, _utils.isEmpty)(data) && !(0, _utils.isEmpty)(data.access_token);
    }
  });
});
;define("ember-simple-auth/authenticators/oauth2-password-grant", ["exports", "rsvp", "@ember/utils", "@ember/runloop", "@ember/array", "@ember/debug", "@ember/application", "ember-simple-auth/utils/assign", "ember", "ember-simple-auth/authenticators/base", "fetch", "ember-simple-auth/utils/is-fastboot"], function (_exports, _rsvp, _utils, _runloop, _array, _debug, _application, _assign, _ember, _base, _fetch, _isFastboot) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
    Authenticator that conforms to OAuth 2
    ([RFC 6749](http://tools.ietf.org/html/rfc6749)), specifically the _"Resource
    Owner Password Credentials Grant Type"_.
  
    This authenticator also automatically refreshes access tokens (see
    [RFC 6749, section 6](http://tools.ietf.org/html/rfc6749#section-6)) if the
    server supports it.
  
    @class OAuth2PasswordGrantAuthenticator
    @module ember-simple-auth/authenticators/oauth2-password-grant
    @extends BaseAuthenticator
    @public
  */
  var _default = _exports.default = _base.default.extend({
    /**
      Triggered when the authenticator refreshed the access token (see
      [RFC 6749, section 6](http://tools.ietf.org/html/rfc6749#section-6)).
       @event sessionDataUpdated
      @param {Object} data The updated session data
      @public
    */

    /**
      The client_id to be sent to the authentication server (see
      https://tools.ietf.org/html/rfc6749#appendix-A.1). __This should only be
      used for statistics or logging etc. as it cannot actually be trusted since
      it could have been manipulated on the client!__
       @property clientId
      @type String
      @default null
      @public
    */
    clientId: null,
    /**
      The endpoint on the server that authentication and token refresh requests
      are sent to.
       @property serverTokenEndpoint
      @type String
      @default '/token'
      @public
    */
    serverTokenEndpoint: '/token',
    /**
      The endpoint on the server that token revocation requests are sent to. Only
      set this if the server actually supports token revocation. If this is
      `null`, the authenticator will not revoke tokens on session invalidation.
       __If token revocation is enabled but fails, session invalidation will be
      intercepted and the session will remain authenticated (see
      {{#crossLink "OAuth2PasswordGrantAuthenticator/invalidate:method"}}{{/crossLink}}).__
       @property serverTokenRevocationEndpoint
      @type String
      @default null
      @public
    */
    serverTokenRevocationEndpoint: null,
    /**
      Sets whether the authenticator automatically refreshes access tokens if the
      server supports it.
       @property refreshAccessTokens
      @type Boolean
      @default true
      @public
    */
    refreshAccessTokens: true,
    /**
      The offset time in milliseconds to refresh the access token. This must
      return a random number. This randomization is needed because in case of
      multiple tabs, we need to prevent the tabs from sending refresh token
      request at the same exact moment.
       __When overriding this property, make sure to mark the overridden property
      as volatile so it will actually have a different value each time it is
      accessed.__
       @property tokenRefreshOffset
      @type Integer
      @default a random number between 5 and 10
      @public
    */
    get tokenRefreshOffset() {
      const min = 5;
      const max = 10;
      return (Math.floor(Math.random() * (max - min)) + min) * 1000;
    },
    _refreshTokenTimeout: null,
    /**
      Restores the session from a session data object; __will return a resolving
      promise when there is a non-empty `access_token` in the session data__ and
      a rejecting promise otherwise.
       If the server issues
      [expiring access tokens](https://tools.ietf.org/html/rfc6749#section-5.1)
      and there is an expired access token in the session data along with a
      refresh token, the authenticator will try to refresh the access token and
      return a promise that resolves with the new access token if the refresh was
      successful. If there is no refresh token or the token refresh is not
      successful, a rejecting promise will be returned.
       @method restore
      @param {Object} data The data to restore the session from
      @return {Ember.RSVP.Promise} A promise that when it resolves results in the session becoming or remaining authenticated. If restoration fails, the promise will reject with the server response (in case the access token had expired and was refreshed using a refresh token); however, the authenticator reads that response already so if you need to read it again you need to clone the response object first
      @public
    */
    restore(data) {
      return new _rsvp.default.Promise((resolve, reject) => {
        const now = new Date().getTime();
        const refreshAccessTokens = this.get('refreshAccessTokens');
        if (!(0, _utils.isEmpty)(data['expires_at']) && data['expires_at'] < now) {
          if (refreshAccessTokens) {
            this._refreshAccessToken(data['expires_in'], data['refresh_token']).then(resolve, reject);
          } else {
            reject();
          }
        } else {
          if (!this._validate(data)) {
            reject();
          } else {
            this._scheduleAccessTokenRefresh(data['expires_in'], data['expires_at'], data['refresh_token']);
            resolve(data);
          }
        }
      });
    },
    /**
      Authenticates the session with the specified `identification`, `password`
      and optional `scope`; issues a `POST` request to the
      {{#crossLink "OAuth2PasswordGrantAuthenticator/serverTokenEndpoint:property"}}{{/crossLink}}
      and receives the access token in response (see
      http://tools.ietf.org/html/rfc6749#section-4.3).
       __If the credentials are valid (and the optionally requested scope is
      granted) and thus authentication succeeds, a promise that resolves with the
      server's response is returned__, otherwise a promise that rejects with the
      error as returned by the server is returned.
       __If the
      [server supports it](https://tools.ietf.org/html/rfc6749#section-5.1), this
      method also schedules refresh requests for the access token before it
      expires.__
       The server responses are expected to look as defined in the spec (see
      http://tools.ietf.org/html/rfc6749#section-5). The response to a successful
      authentication request should be:
       ```json
      HTTP/1.1 200 OK
      Content-Type: application/json;charset=UTF-8
       {
        "access_token":"2YotnFZFEjr1zCsicMWpAA",
        "token_type":"bearer",
        "expires_in":3600, // optional
        "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA" // optional
      }
      ```
       The response for a failing authentication request should be:
       ```json
      HTTP/1.1 400 Bad Request
      Content-Type: application/json;charset=UTF-8
       {
        "error":"invalid_grant"
      }
      ```
       A full list of error codes can be found
      [here](https://tools.ietf.org/html/rfc6749#section-5.2).
       @method authenticate
      @param {String} identification The resource owner username
      @param {String} password The resource owner password
      @param {String|Array} scope The scope of the access request (see [RFC 6749, section 3.3](http://tools.ietf.org/html/rfc6749#section-3.3))
      @param {Object} headers Optional headers that particular backends may require (for example sending 2FA challenge responses)
      @return {Ember.RSVP.Promise} A promise that when it resolves results in the session becoming authenticated. If authentication fails, the promise will reject with the server response; however, the authenticator reads that response already so if you need to read it again you need to clone the response object first
      @public
    */
    authenticate(identification, password, scope = [], headers = {}) {
      return new _rsvp.default.Promise((resolve, reject) => {
        const data = {
          'grant_type': 'password',
          username: identification,
          password
        };
        const serverTokenEndpoint = this.get('serverTokenEndpoint');
        const scopesString = (0, _array.makeArray)(scope).join(' ');
        if (!(0, _utils.isEmpty)(scopesString)) {
          data.scope = scopesString;
        }
        this.makeRequest(serverTokenEndpoint, data, headers).then(response => {
          (0, _runloop.run)(() => {
            if (!this._validate(response)) {
              reject('access_token is missing in server response');
            }
            const expiresAt = this._absolutizeExpirationTime(response['expires_in']);
            this._scheduleAccessTokenRefresh(response['expires_in'], expiresAt, response['refresh_token']);
            if (!(0, _utils.isEmpty)(expiresAt)) {
              response = (0, _assign.default)(response, {
                'expires_at': expiresAt
              });
            }
            resolve(response);
          });
        }, response => {
          (0, _runloop.run)(null, reject, response);
        });
      });
    },
    /**
      If token revocation is enabled, this will revoke the access token (and the
      refresh token if present). If token revocation succeeds, this method
      returns a resolving promise, otherwise it will return a rejecting promise,
      thus intercepting session invalidation.
       If token revocation is not enabled this method simply returns a resolving
      promise.
       @method invalidate
      @param {Object} data The current authenticated session data
      @return {Ember.RSVP.Promise} A promise that when it resolves results in the session being invalidated. If invalidation fails, the promise will reject with the server response (in case token revocation is used); however, the authenticator reads that response already so if you need to read it again you need to clone the response object first
      @public
    */
    invalidate(data) {
      const serverTokenRevocationEndpoint = this.get('serverTokenRevocationEndpoint');
      function success(resolve) {
        (0, _runloop.cancel)(this._refreshTokenTimeout);
        delete this._refreshTokenTimeout;
        resolve();
      }
      return new _rsvp.default.Promise(resolve => {
        if ((0, _utils.isEmpty)(serverTokenRevocationEndpoint)) {
          success.apply(this, [resolve]);
        } else {
          const requests = [];
          (0, _array.A)(['access_token', 'refresh_token']).forEach(tokenType => {
            const token = data[tokenType];
            if (!(0, _utils.isEmpty)(token)) {
              requests.push(this.makeRequest(serverTokenRevocationEndpoint, {
                'token_type_hint': tokenType,
                token
              }));
            }
          });
          const succeed = () => {
            success.apply(this, [resolve]);
          };
          _rsvp.default.all(requests).then(succeed, succeed);
        }
      });
    },
    /**
      Makes a request to the OAuth 2.0 server.
       @method makeRequest
      @param {String} url The request URL
      @param {Object} data The request data
      @param {Object} headers Additional headers to send in request
      @return {Promise} A promise that resolves with the response object
      @protected
    */
    makeRequest(url, data, headers = {}) {
      headers['Content-Type'] = 'application/x-www-form-urlencoded';
      const clientId = this.get('clientId');
      if (!(0, _utils.isEmpty)(clientId)) {
        data['client_id'] = this.get('clientId');
      }
      const body = Object.keys(data).map(key => {
        return `${encodeURIComponent(key)}=${encodeURIComponent(data[key])}`;
      }).join('&');
      const options = {
        body,
        headers,
        method: 'POST'
      };
      return new _rsvp.default.Promise((resolve, reject) => {
        (0, _fetch.default)(url, options).then(response => {
          response.text().then(text => {
            try {
              let json = JSON.parse(text);
              if (!response.ok) {
                response.responseJSON = json;
                reject(response);
              } else {
                resolve(json);
              }
            } catch (SyntaxError) {
              response.responseText = text;
              reject(response);
            }
          });
        }).catch(reject);
      });
    },
    _scheduleAccessTokenRefresh(expiresIn, expiresAt, refreshToken) {
      const refreshAccessTokens = this.get('refreshAccessTokens') && !(0, _isFastboot.default)((0, _application.getOwner)(this));
      if (refreshAccessTokens) {
        const now = new Date().getTime();
        if ((0, _utils.isEmpty)(expiresAt) && !(0, _utils.isEmpty)(expiresIn)) {
          expiresAt = new Date(now + expiresIn * 1000).getTime();
        }
        const offset = this.get('tokenRefreshOffset');
        if (!(0, _utils.isEmpty)(refreshToken) && !(0, _utils.isEmpty)(expiresAt) && expiresAt > now - offset) {
          (0, _runloop.cancel)(this._refreshTokenTimeout);
          delete this._refreshTokenTimeout;
          if (!_ember.default.testing) {
            this._refreshTokenTimeout = (0, _runloop.later)(this, this._refreshAccessToken, expiresIn, refreshToken, expiresAt - now - offset);
          }
        }
      }
    },
    _refreshAccessToken(expiresIn, refreshToken) {
      const data = {
        'grant_type': 'refresh_token',
        'refresh_token': refreshToken
      };
      const serverTokenEndpoint = this.get('serverTokenEndpoint');
      return new _rsvp.default.Promise((resolve, reject) => {
        this.makeRequest(serverTokenEndpoint, data).then(response => {
          (0, _runloop.run)(() => {
            expiresIn = response['expires_in'] || expiresIn;
            refreshToken = response['refresh_token'] || refreshToken;
            const expiresAt = this._absolutizeExpirationTime(expiresIn);
            const data = (0, _assign.default)(response, {
              'expires_in': expiresIn,
              'expires_at': expiresAt,
              'refresh_token': refreshToken
            });
            this._scheduleAccessTokenRefresh(expiresIn, null, refreshToken);
            this.trigger('sessionDataUpdated', data);
            resolve(data);
          });
        }, response => {
          (true && (0, _debug.warn)(`Access token could not be refreshed - server responded with ${response.responseJSON}.`, false, {
            id: 'ember-simple-auth.failedOAuth2TokenRefresh'
          }));
          reject();
        });
      });
    },
    _absolutizeExpirationTime(expiresIn) {
      if (!(0, _utils.isEmpty)(expiresIn)) {
        return new Date(new Date().getTime() + expiresIn * 1000).getTime();
      }
    },
    _validate(data) {
      return !(0, _utils.isEmpty)(data['access_token']);
    }
  });
});
;define("ember-simple-auth/authenticators/test", ["exports", "rsvp", "ember-simple-auth/authenticators/base"], function (_exports, _rsvp, _base) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = _base.default.extend({
    restore(data) {
      return _rsvp.default.resolve(data);
    },
    authenticate(data) {
      return _rsvp.default.resolve(data);
    },
    invalidate() {
      return _rsvp.default.resolve();
    }
  });
});
;define("ember-simple-auth/authenticators/torii", ["exports", "rsvp", "@ember/debug", "@ember/utils", "ember-simple-auth/utils/assign", "ember-simple-auth/authenticators/base"], function (_exports, _rsvp, _debug, _utils, _assign, _base) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  (true && !(false) && (0, _debug.deprecate)('Ember Simple Auth: The Torii authenticator is deprecated.', false, {
    id: 'ember-simple-auth.authenticators.torii',
    until: '6.0.0',
    for: 'ember-simple-auth',
    since: {
      enabled: '4.2.0'
    }
  }));
  /**
    Authenticator that wraps the
    [Torii library](https://github.com/Vestorly/torii) and thus allows to connect
    any external authentication provider that torii defines a provider for.
  
    In order to use this authenticator, __the application needs to have the
    [torii addon](https://github.com/Vestorly/torii) installed and must inject
    the torii service into the authenticator__:
  
    ```js
    // app/authenticators/torii.js
    import Torii from 'ember-simple-auth/authenticators/torii';
    import { inject as service } from '@ember/service';
  
    export default class ToriiAuthenticator extends Torii {
      @service torii;
    }
    ```
  
    @class ToriiAuthenticator
    @deprecated Implement an authenticator that wraps Torii in application code instead
    @module ember-simple-auth/authenticators/torii
    @extends BaseAuthenticator
    @public
  */
  var _default = _exports.default = _base.default.extend({
    _provider: null,
    /**
      Restores the session by calling the torii provider's `fetch` method.
       __Many torii providers do not implement the `fetch` method__. If the
      provider in use does not implement the method simply add it as follows:
       ```js
      // app/torii-providers/facebook.js
      import FacebookOauth2Provider from 'torii/providers/facebook-oauth2';
       export default class FacebookToriiProvider extends FacebookOauth2Provider {
        fetch(data) {
          return data;
        }
      }
      ```
       @method restore
      @param {Object} data The data to restore the session from
      @return {Ember.RSVP.Promise} A promise that when it resolves results in the session becoming or remaining authenticated
      @public
    */
    restore(data) {
      this._assertToriiIsPresent();
      data = data || {};
      if (!(0, _utils.isEmpty)(data.provider)) {
        const {
          provider
        } = data;
        return this.get('torii').fetch(data.provider, data).then(fetchedData => {
          this._authenticateWithProvider(provider, fetchedData);
          return (0, _assign.default)(data, fetchedData);
        }, err => {
          delete this._provider;
          throw err;
        });
      } else {
        delete this._provider;
        return _rsvp.default.reject();
      }
    },
    /**
      Authenticates the session by opening the specified torii provider. For more
      documentation on torii and its providers abstraction, see the
      [project's README](https://github.com/Vestorly/torii#readme), specifically
      the
      [section on providers](https://github.com/Vestorly/torii#configuring-a-torii-provider).
       @method authenticate
      @param {String} provider The torii provider to authenticate the session with
      @param {Object} options The options to pass to the torii provider
      @return {Ember.RSVP.Promise} A promise that when it resolves results in the session becoming authenticated
      @public
    */
    authenticate(provider, options) {
      this._assertToriiIsPresent();
      return this.get('torii').open(provider, options || {}).then(data => {
        this._authenticateWithProvider(provider, data);
        return data;
      });
    },
    /**
      Closes the torii provider. If the provider is successfully closed, this
      method returns a resolving promise, otherwise it will return a rejecting
      promise, thus intercepting session invalidation.
       @method invalidate
      @return {Ember.RSVP.Promise} A promise that when it resolves results in the session being invalidated
      @public
    */
    invalidate(data) {
      return this.get('torii').close(this._provider, data).then(() => {
        delete this._provider;
      });
    },
    _authenticateWithProvider(provider, data) {
      data.provider = provider;
      this._provider = data.provider;
    },
    _assertToriiIsPresent() {
      const torii = this.get('torii');
      (true && !((0, _utils.isPresent)(torii)) && (0, _debug.assert)('You are trying to use the torii authenticator but torii is not available. Inject torii into the authenticator with "torii: Ember.inject.service()".', (0, _utils.isPresent)(torii)));
    }
  });
});
;define("ember-simple-auth/configuration", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const DEFAULTS = {
    rootURL: '',
    routeAfterAuthentication: 'index'
  };

  /**
    Ember Simple Auth's configuration object.
  
    @class Configuration
    @extends Object
    @module ember-simple-auth/configuration
    @public
  */
  var _default = _exports.default = {
    /**
      The root URL of the application as configured in `config/environment.js`.
       @property rootURL
      @readOnly
      @static
      @type String
      @default ''
      @public
    */
    rootURL: DEFAULTS.rootURL,
    /**
      The route to transition to after successful authentication.
       @property routeAfterAuthentication
      @readOnly
      @static
      @type String
      @default 'index'
      @public
    */
    routeAfterAuthentication: DEFAULTS.routeAfterAuthentication,
    load(config) {
      this.rootURL = config.rootURL !== undefined ? config.rootURL : DEFAULTS.rootURL;
      this.routeAfterAuthentication = config.routeAfterAuthentication !== undefined ? config.routeAfterAuthentication : DEFAULTS.routeAfterAuthentication;
    }
  };
});
;define("ember-simple-auth/initializers/setup-session", ["exports", "ember", "ember-simple-auth/internal-session", "ember-simple-auth/session-stores/ephemeral"], function (_exports, _ember, _internalSession, _ephemeral) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = setupSession;
  function setupSession(registry) {
    registry.register('session:main', _internalSession.default);
    if (_ember.default.testing) {
      registry.register('session-store:test', _ephemeral.default);
    }
  }
});
;define("ember-simple-auth/internal-session", ["exports", "ember", "rsvp", "@ember/utils", "@ember/object/proxy", "@ember/object/evented", "ember-simple-auth/utils/assign", "@ember/object", "@ember/debug", "@ember/application"], function (_exports, _ember, _rsvp, _utils, _proxy, _evented, _assign, _object, _debug, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = _proxy.default.extend(_evented.default, {
    authenticator: null,
    store: null,
    isAuthenticated: false,
    attemptedTransition: null,
    init() {
      this._super(...arguments);
      this.set('content', {
        authenticated: {}
      });
      let storeFactory = 'session-store:application';
      if (_ember.default.testing) {
        storeFactory = 'session-store:test';
      }
      this.set('store', (0, _application.getOwner)(this).lookup(storeFactory));
      this._busy = false;
      this._bindToStoreEvents();
    },
    authenticate(authenticatorFactory, ...args) {
      this._busy = true;
      (true && !(!(0, _utils.isEmpty)(authenticatorFactory)) && (0, _debug.assert)(`Session#authenticate requires the authenticator to be specified, was "${authenticatorFactory}"!`, !(0, _utils.isEmpty)(authenticatorFactory)));
      const authenticator = this._lookupAuthenticator(authenticatorFactory);
      return authenticator.authenticate(...args).then(content => {
        this._busy = false;
        return this._setup(authenticatorFactory, content, true);
      }, error => {
        const rejectWithError = () => _rsvp.default.Promise.reject(error);
        this._busy = false;
        return this._clear().then(rejectWithError, rejectWithError);
      });
    },
    invalidate() {
      this._busy = true;
      this.set('attemptedTransition', null);
      if (!this.get('isAuthenticated')) {
        this._busy = false;
        return _rsvp.default.Promise.resolve();
      }
      let authenticator = this._lookupAuthenticator(this.authenticator);
      return authenticator.invalidate(this.content.authenticated, ...arguments).then(() => {
        authenticator.off('sessionDataUpdated', this, this._onSessionDataUpdated);
        this._busy = false;
        return this._clear(true);
      }, error => {
        this.trigger('sessionInvalidationFailed', error);
        this._busy = false;
        return _rsvp.default.Promise.reject(error);
      });
    },
    restore() {
      this._busy = true;
      const reject = () => _rsvp.default.Promise.reject();
      return this.store.restore().then(restoredContent => {
        let {
          authenticator: authenticatorFactory
        } = restoredContent.authenticated || {};
        if (authenticatorFactory) {
          delete restoredContent.authenticated.authenticator;
          const authenticator = this._lookupAuthenticator(authenticatorFactory);
          return authenticator.restore(restoredContent.authenticated).then(content => {
            this.set('content', restoredContent);
            this._busy = false;
            return this._setup(authenticatorFactory, content);
          }, err => {
            (0, _debug.debug)(`The authenticator "${authenticatorFactory}" rejected to restore the session - invalidating…`);
            if (err) {
              (0, _debug.debug)(err);
            }
            this._busy = false;
            return this._clearWithContent(restoredContent).then(reject, reject);
          });
        } else {
          delete (restoredContent || {}).authenticated;
          this._busy = false;
          return this._clearWithContent(restoredContent).then(reject, reject);
        }
      }, () => {
        this._busy = false;
        return this._clear().then(reject, reject);
      });
    },
    _setup(authenticator, authenticatedContent, trigger) {
      trigger = Boolean(trigger) && !this.get('isAuthenticated');
      this.setProperties({
        isAuthenticated: true,
        authenticator,
        'content.authenticated': authenticatedContent
      });
      this._bindToAuthenticatorEvents();
      return this._updateStore().then(() => {
        if (trigger) {
          this.trigger('authenticationSucceeded');
        }
      }, () => {
        this.setProperties({
          isAuthenticated: false,
          authenticator: null,
          'content.authenticated': {}
        });
      });
    },
    _clear(trigger) {
      trigger = Boolean(trigger) && this.get('isAuthenticated');
      this.setProperties({
        isAuthenticated: false,
        authenticator: null,
        'content.authenticated': {}
      });
      return this._updateStore().then(() => {
        if (trigger) {
          this.trigger('invalidationSucceeded');
        }
      });
    },
    _clearWithContent(content, trigger) {
      this.set('content', content);
      return this._clear(trigger);
    },
    setUnknownProperty(key, value) {
      (true && !(key !== 'authenticated') && (0, _debug.assert)('"authenticated" is a reserved key used by Ember Simple Auth!', key !== 'authenticated'));
      let result = this._super(key, value);
      if (!/^_/.test(key)) {
        this._updateStore();
      }
      return result;
    },
    _updateStore() {
      let data = this.content;
      if (!(0, _utils.isEmpty)(this.authenticator)) {
        (0, _object.set)(data, 'authenticated', (0, _assign.default)({
          authenticator: this.authenticator
        }, data.authenticated || {}));
      }
      return this.store.persist(data);
    },
    _bindToAuthenticatorEvents() {
      const authenticator = this._lookupAuthenticator(this.authenticator);
      authenticator.on('sessionDataUpdated', this, this._onSessionDataUpdated);
      authenticator.on('sessionDataInvalidated', this, this._onSessionDataInvalidated);
    },
    _onSessionDataUpdated(content) {
      this._setup(this.authenticator, content);
    },
    _onSessionDataInvalidated() {
      this._clear(true);
    },
    _bindToStoreEvents() {
      this.store.on('sessionDataUpdated', content => {
        if (!this._busy) {
          this._busy = true;
          let {
            authenticator: authenticatorFactory
          } = content.authenticated || {};
          if (authenticatorFactory) {
            delete content.authenticated.authenticator;
            const authenticator = this._lookupAuthenticator(authenticatorFactory);
            authenticator.restore(content.authenticated).then(authenticatedContent => {
              this.set('content', content);
              this._busy = false;
              this._setup(authenticatorFactory, authenticatedContent, true);
            }, err => {
              (0, _debug.debug)(`The authenticator "${authenticatorFactory}" rejected to restore the session - invalidating…`);
              if (err) {
                (0, _debug.debug)(err);
              }
              this._busy = false;
              this._clearWithContent(content, true);
            });
          } else {
            this._busy = false;
            this._clearWithContent(content, true);
          }
        }
      });
    },
    _lookupAuthenticator(authenticatorName) {
      let owner = (0, _application.getOwner)(this);
      let authenticator = owner.lookup(authenticatorName);
      (true && !(!(0, _utils.isNone)(authenticator)) && (0, _debug.assert)(`No authenticator for factory "${authenticatorName}" could be found!`, !(0, _utils.isNone)(authenticator)));
      (0, _application.setOwner)(authenticator, owner);
      return authenticator;
    }
  });
});
;define("ember-simple-auth/services/session", ["exports", "@ember/object/computed", "@ember/service", "@ember/application", "@ember/debug", "ember-simple-auth/configuration", "ember-simple-auth/-internals/routing"], function (_exports, _computed, _service, _application, _debug, _configuration, _routing) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const SESSION_DATA_KEY_PREFIX = /^data\./;
  function assertSetupHasBeenCalled(isSetupCalled) {
    if (!isSetupCalled) {
      (true && !(false) && (0, _debug.assert)("Ember Simple Auth: session#setup wasn't called. Make sure to call session#setup in your application route's beforeModel hook.", false));
    }
  }

  /**
    __The session service provides access to the current session as well as
    methods to authenticate it, invalidate it, etc.__ It is the main interface for
    the application to Ember Simple Auth's functionality. It can be injected via
  
    ```js
    // app/components/login-form.js
    import Component from '@ember/component';
    import { inject as service } from '@ember/service';
  
    export default class LoginFormComponent extends Component {
      @service session;
    }
    ```
  
    @class SessionService
    @module ember-simple-auth/services/session
    @extends Ember.Service
    @public
  */
  var _default = _exports.default = _service.default.extend({
    /**
      Triggered whenever the session is successfully authenticated. This happens
      when the session gets authenticated via
      {{#crossLink "SessionService/authenticate:method"}}{{/crossLink}} but also
      when the session is authenticated in another tab or window of the same
      application and the session state gets synchronized across tabs or windows
      via the store (see
      {{#crossLink "BaseStore/sessionDataUpdated:event"}}{{/crossLink}}).
       @event authenticationSucceeded
      @public
    */

    /**
      Triggered whenever the session is successfully invalidated. This happens
      when the session gets invalidated via
      {{#crossLink "SessionService/invalidate:method"}}{{/crossLink}} but also
      when the session is invalidated in another tab or window of the same
      application and the session state gets synchronized across tabs or windows
      via the store (see
      {{#crossLink "BaseStore/sessionDataUpdated:event"}}{{/crossLink}}).
       @event invalidationSucceeded
      @public
    */

    /**
      Returns whether the session is currently authenticated.
       @property isAuthenticated
      @type Boolean
      @readOnly
      @default false
      @public
    */
    isAuthenticated: (0, _computed.readOnly)('session.isAuthenticated'),
    /**
      The current session data as a plain object. The
      `authenticated` key holds the session data that the authenticator resolved
      with when the session was authenticated (see
      {{#crossLink "BaseAuthenticator/authenticate:method"}}{{/crossLink}}) and
      that will be cleared when the session is invalidated. This data cannot be
      written. All other session data is writable and will not be cleared when
      the session is invalidated.
       @property data
      @type Object
      @readOnly
      @default { authenticated: {} }
      @public
    */
    data: (0, _computed.readOnly)('session.content'),
    /**
      The session store.
       @property store
      @type BaseStore
      @readOnly
      @default null
      @public
    */
    store: (0, _computed.readOnly)('session.store'),
    /**
      A previously attempted but intercepted transition (e.g. by the
      {{#crossLink "SessionService/requireAuthentication:method"}}{{/crossLink}}
      If an attempted transition is present it will be retried.
       @property attemptedTransition
      @type Transition
      @default null
      @public
    */
    attemptedTransition: (0, _computed.alias)('session.attemptedTransition'),
    session: null,
    init() {
      this._super(...arguments);
      this.set('session', (0, _application.getOwner)(this).lookup('session:main'));
    },
    set(key, value) {
      const setsSessionData = SESSION_DATA_KEY_PREFIX.test(key);
      if (setsSessionData) {
        const sessionDataKey = `session.${key.replace(SESSION_DATA_KEY_PREFIX, '')}`;
        return this._super(sessionDataKey, value);
      } else {
        return this._super(...arguments);
      }
    },
    _setupHandlers() {
      this.get('session').on('authenticationSucceeded', () => this.handleAuthentication(_configuration.default.routeAfterAuthentication));
      this.get('session').on('invalidationSucceeded', () => this.handleInvalidation(_configuration.default.rootURL));
    },
    /**
      __Authenticates the session with an `authenticator`__ and appropriate
      arguments. The authenticator implements the actual steps necessary to
      authenticate the session (see
      {{#crossLink "BaseAuthenticator/authenticate:method"}}{{/crossLink}}) and
      returns a promise after doing so. The session handles the returned promise
      and when it resolves becomes authenticated, otherwise remains
      unauthenticated. All data the authenticator resolves with will be
      accessible via the
      {{#crossLink "SessionService/data:property"}}session data's{{/crossLink}}
      `authenticated` property.
       __This method returns a promise. A resolving promise indicates that the
      session was successfully authenticated__ while a rejecting promise
      indicates that authentication failed and the session remains
      unauthenticated. The promise does not resolve with a value; instead, the
      data returned from the authenticator is available via the
      {{#crossLink "SessionService/data:property"}}{{/crossLink}} property.
       When authentication succeeds this will trigger the
      {{#crossLink "SessionService/authenticationSucceeded:event"}}{{/crossLink}}
      event.
       @method authenticate
      @param {String} authenticator The authenticator to use to authenticate the session
      @param {Any} [...args] The arguments to pass to the authenticator; depending on the type of authenticator these might be a set of credentials, a Facebook OAuth Token, etc.
      @return {Ember.RSVP.Promise} A promise that resolves when the session was authenticated successfully and rejects otherwise
      @public
    */
    authenticate() {
      const session = this.get('session');
      return session.authenticate(...arguments);
    },
    /**
      __Invalidates the session with the authenticator it is currently
      authenticated with__ (see
      {{#crossLink "SessionService/authenticate:method"}}{{/crossLink}}). This
      invokes the authenticator's
      {{#crossLink "BaseAuthenticator/invalidate:method"}}{{/crossLink}} method
      and handles the returned promise accordingly.
       This method returns a promise. A resolving promise indicates that the
      session was successfully invalidated while a rejecting promise indicates
      that invalidation failed and the session remains authenticated. Once the
      session is successfully invalidated it clears all of its authenticated data
      (see {{#crossLink "SessionService/data:property"}}{{/crossLink}}).
       When invalidation succeeds this will trigger the
      {{#crossLink "SessionService/invalidationSucceeded:event"}}{{/crossLink}}
      event.
       When calling the {{#crossLink "BaseAuthenticator/invalidate:method"}}{{/crossLink}}
      on an already unauthenticated session, the method will return a resolved Promise
      immediately.
       @method invalidate
      @param {Array} ...args arguments that will be passed to the authenticator
      @return {Ember.RSVP.Promise} A promise that resolves when the session was invalidated successfully and rejects otherwise
      @public
    */
    invalidate() {
      const session = this.get('session');
      return session.invalidate(...arguments);
    },
    /**
      Checks whether the session is authenticated and if it is not, transitions
      to the specified route or invokes the specified callback.
       If a transition is in progress and is aborted, this method will save it in the
      session service's
      {{#crossLink "SessionService/attemptedTransition:property"}}{{/crossLink}}
      property so that  it can be retried after the session is authenticated. If
      the transition is aborted in Fastboot mode, the transition's target URL
      will be saved in a `ember_simple_auth-redirectTarget` cookie for use by the
      browser after authentication is complete.
       @method requireAuthentication
      @param {Transition} transition A transition that triggered the authentication requirement or null if the requirement originated independently of a transition
      @param {String|Function} routeOrCallback The route to transition to in case that the session is not authenticated or a callback function to invoke in that case
      @return {Boolean} true when the session is authenticated, false otherwise
      @public
    */
    requireAuthentication(transition, routeOrCallback) {
      assertSetupHasBeenCalled(this._setupIsCalled);
      let isAuthenticated = (0, _routing.requireAuthentication)((0, _application.getOwner)(this), transition);
      if (!isAuthenticated) {
        let argType = typeof routeOrCallback;
        if (argType === 'string') {
          (0, _routing.triggerAuthentication)((0, _application.getOwner)(this), routeOrCallback);
        } else if (argType === 'function') {
          routeOrCallback();
        } else {
          (true && !(false) && (0, _debug.assert)(`The second argument to requireAuthentication must be a String or Function, got "${argType}"!`, false));
        }
      }
      return isAuthenticated;
    },
    /**
      Checks whether the session is authenticated and if it is, transitions
      to the specified route or invokes the specified callback.
       @method prohibitAuthentication
      @param {String|Function} routeOrCallback The route to transition to in case that the session is authenticated or a callback function to invoke in that case
      @return {Boolean} true when the session is not authenticated, false otherwise
      @public
    */
    prohibitAuthentication(routeOrCallback) {
      assertSetupHasBeenCalled(this._setupIsCalled);
      let isAuthenticated = this.get('isAuthenticated');
      if (isAuthenticated) {
        let argType = typeof routeOrCallback;
        if (argType === 'string') {
          (0, _routing.prohibitAuthentication)((0, _application.getOwner)(this), routeOrCallback);
        } else if (argType === 'function') {
          routeOrCallback();
        } else {
          (true && !(false) && (0, _debug.assert)(`The first argument to prohibitAuthentication must be a String or Function, got "${argType}"!`, false));
        }
      }
      return !isAuthenticated;
    },
    /**
      This method is called whenever the session goes from being unauthenticated
      to being authenticated. If there is a transition that was previously
      intercepted by the
      {{#crossLink "SessionService/requireAuthentication:method"}}{{/crossLink}},
      it will retry it. If there is no such transition, the
      `ember_simple_auth-redirectTarget` cookie will be checked for a url that
      represents an attemptedTransition that was aborted in Fastboot mode,
      otherwise this action transitions to the specified
      routeAfterAuthentication.
       @method handleAuthentication
      @param {String} routeAfterAuthentication The route to transition to
      @public
    */
    handleAuthentication(routeAfterAuthentication) {
      (0, _routing.handleSessionAuthenticated)((0, _application.getOwner)(this), routeAfterAuthentication);
    },
    /**
      This method is called whenever the session goes from being authenticated to
      not being authenticated. __It reloads the Ember.js application__ by
      redirecting the browser to the specified route so that all in-memory data
      (such as Ember Data stores etc.) gets cleared.
       If the Ember.js application will be used in an environment where the users
      don't have direct access to any data stored on the client (e.g.
      [cordova](http://cordova.apache.org)) this action can be overridden to e.g.
      simply transition to the index route.
       @method handleInvalidation
      @param {String} routeAfterInvalidation The route to transition to
      @public
    */
    handleInvalidation(routeAfterInvalidation) {
      (0, _routing.handleSessionInvalidated)((0, _application.getOwner)(this), routeAfterInvalidation);
    },
    /**
      Sets up the session service.
       This method must be called when the application starts up,
      usually as the first thing in the `application` route's `beforeModel`
      method.
       @method setup
      @public
    */
    setup() {
      this._setupIsCalled = true;
      this._setupHandlers();
      return this.session.restore().catch(() => {
        // If it raises an error then it means that restore didn't find any restorable state.
      });
    }
  });
});
;define("ember-simple-auth/session-stores/adaptive", ["exports", "@ember/object", "@ember/service", "@ember/application", "ember-simple-auth/session-stores/base"], function (_exports, _object, _service, _application, _base) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const LOCAL_STORAGE_TEST_KEY = '_ember_simple_auth_test_key';
  const proxyToInternalStore = function () {
    return (0, _object.computed)({
      get(key) {
        return this.get(`_${key}`);
      },
      set(key, value) {
        this.set(`_${key}`, value);
        let _store = this.get('_store');
        if (_store) {
          _store.set(key, value);
        }
        return value;
      }
    });
  };

  /**
    Session store that persists data in the browser's `localStorage` (see
    {{#crossLink "LocalStorageStore"}}{{/crossLink}}) if that is available or in
    a cookie (see {{#crossLink "CookieStore"}}{{/crossLink}}) if it is not.
  
    __This is the default store that Ember Simple Auth will use when the
    application doesn't define a custom store.__
  
    __This session store does not work with FastBoot. In order to use Ember
    Simple Auth with FastBoot, configure the
    {{#crossLink "CookieStore"}}{{/crossLink}} as the application's session
    store.__
  
    @class AdaptiveStore
    @module ember-simple-auth/session-stores/adaptive
    @extends BaseStore
    @public
  */
  var _default = _exports.default = _base.default.extend({
    /**
      The `localStorage` key the store persists data in if `localStorage` is
      available.
       @property localStorageKey
      @type String
      @default 'ember_simple_auth-session'
      @public
    */
    localStorageKey: 'ember_simple_auth-session',
    /**
      The domain to use for the cookie if `localStorage` is not available, e.g.,
      "example.com", ".example.com" (which includes all subdomains) or
      "subdomain.example.com". If not explicitly set, the cookie domain defaults
      to the domain the session was authenticated on.
       @property cookieDomain
      @type String
      @default null
      @public
    */
    _cookieDomain: null,
    cookieDomain: proxyToInternalStore(),
    /**
      Allows servers to assert that a cookie ought not to be sent along with
      cross-site requests, which provides some protection against cross-site
      request forgery attacks (CSRF).
       Available options:
      - "Strict"
      - "Lax"
       @property sameSite
      @type String
      @default null
      @public
    */
    _sameSite: null,
    sameSite: proxyToInternalStore(),
    /**
      The name of the cookie to use if `localStorage` is not available.
       @property cookieName
      @type String
      @default ember_simple_auth-session
      @public
    */
    _cookieName: 'ember_simple_auth-session',
    cookieName: proxyToInternalStore(),
    /**
      The path to use for the cookie, e.g., "/", "/something".
       @property cookiePath
      @type String
      @default '/'
      @public
    */
    _cookiePath: '/',
    cookiePath: proxyToInternalStore(),
    /**
      The expiration time for the cookie in seconds if `localStorage` is not
      available. A value of `null` will make the cookie a session cookie that
      expires and gets deleted when the browser is closed.
       @property cookieExpirationTime
      @default null
      @type Integer
      @public
    */
    _cookieExpirationTime: null,
    cookieExpirationTime: proxyToInternalStore(),
    _cookies: (0, _service.inject)('cookies'),
    _isLocalStorageAvailable: (0, _object.computed)({
      get() {
        return testLocalStorageAvailable();
      },
      set(key, value) {
        return value;
      }
    }),
    init() {
      this._super(...arguments);
      let owner = (0, _application.getOwner)(this);
      if (owner && !this.hasOwnProperty('_fastboot')) {
        this._fastboot = owner.lookup('service:fastboot');
      }
      let store;
      if (this.get('_isLocalStorageAvailable')) {
        const localStorage = owner.lookup('session-store:local-storage');
        const options = {
          key: this.get('localStorageKey')
        };
        options._isFastBoot = false;
        localStorage.setProperties(options);
        store = localStorage;
      } else {
        const cookieStorage = owner.lookup('session-store:cookie');
        const options = this.getProperties('cookieDomain', 'cookieName', 'cookieExpirationTime', 'cookiePath', 'sameSite');
        cookieStorage.setProperties(options);
        this.set('cookieExpirationTime', cookieStorage.get('cookieExpirationTime'));
        store = cookieStorage;
      }
      this.set('_store', store);
      this._setupStoreEvents(store);
    },
    _setupStoreEvents(store) {
      store.on('sessionDataUpdated', data => {
        this.trigger('sessionDataUpdated', data);
      });
      return store;
    },
    /**
      Persists the `data` in the `localStorage` if it is available or in a cookie
      if it is not.
       @method persist
      @param {Object} data The data to persist
      @return {Ember.RSVP.Promise} A promise that resolves when the data has successfully been persisted and rejects otherwise.
      @public
    */
    persist() {
      return this.get('_store').persist(...arguments);
    },
    /**
      Returns all data currently stored in the `localStorage` if that is
      available - or if it is not, in the cookie - as a plain object.
       @method restore
      @return {Ember.RSVP.Promise} A promise that resolves with the data currently persisted in the store when the data has been restored successfully and rejects otherwise.
      @public
    */
    restore() {
      return this.get('_store').restore();
    },
    /**
      Clears the store by deleting the
      {{#crossLink "LocalStorageStore/key:property"}}{{/crossLink}} from
      `localStorage` if that is available or by deleting the cookie if it is not.
       @method clear
      @return {Ember.RSVP.Promise} A promise that resolves when the store has been cleared successfully and rejects otherwise.
      @public
    */
    clear() {
      return this.get('_store').clear();
    }
  });
  function testLocalStorageAvailable() {
    try {
      localStorage.setItem(LOCAL_STORAGE_TEST_KEY, true);
      localStorage.removeItem(LOCAL_STORAGE_TEST_KEY);
      return true;
    } catch (e) {
      return false;
    }
  }
});
;define("ember-simple-auth/session-stores/base", ["exports", "rsvp", "@ember/object", "@ember/object/evented"], function (_exports, _rsvp, _object, _evented) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
    The base class for all session stores. __This serves as a starting point for
    implementing custom session stores and must not be used directly.__
  
    Session Stores persist the session's state so that it survives a page reload
    and is synchronized across multiple tabs or windows of the same application.
  
    @class BaseStore
    @module ember-simple-auth/session-stores/base
    @extends Ember.Object
    @uses Ember.Evented
    @public
  */
  var _default = _exports.default = _object.default.extend(_evented.default, {
    /**
      Triggered when the session store's data changes due to an external event,
      e.g., from another tab or window of the same application. The session
      handles that event, passes the updated data to its authenticator's
      {{#crossLink "BaseAuthenticator/restore:method"}}{{/crossLink}} method and
      handles the result of that invocation accordingly.
       @event sessionDataUpdated
      @param {Object} data The updated session data
      @public
    */

    /**
      Persists the `data`. This replaces all currently stored data.
       `BaseStores`'s implementation always returns a rejecting promise. __This
      method must be overridden in subclasses__.
       @method persist
      @param {Object} data The data to persist
      @return {Ember.RSVP.Promise} A promise that resolves when the data has successfully been persisted and rejects otherwise.
      @public
    */
    persist() {
      return _rsvp.default.reject();
    },
    /**
      Returns all data currently stored as a plain object.
       `BaseStores`'s implementation always returns a rejecting promise. __This
      method must be overridden in subclasses__.
       @method restore
      @return {Ember.RSVP.Promise} A promise that resolves with the data currently persisted in the store when the data has been restored successfully and rejects otherwise.
      @public
    */
    restore() {
      return _rsvp.default.reject();
    },
    /**
      Clears the store.
       `BaseStores`'s implementation always returns a rejecting promise. __This
      method must be overridden in subclasses__.
       @method clear
      @return {Ember.RSVP.Promise} A promise that resolves when the store has been cleared successfully and rejects otherwise.
      @public
    */
    clear() {
      return _rsvp.default.reject();
    }
  });
});
;define("ember-simple-auth/session-stores/cookie", ["exports", "rsvp", "@ember/object", "@ember/service", "@ember/runloop", "@ember/utils", "@ember/array", "@ember/application", "@ember/debug", "ember", "ember-simple-auth/session-stores/base", "ember-simple-auth/utils/objects-are-equal"], function (_exports, _rsvp, _object, _service, _runloop, _utils, _array, _application, _debug, _ember, _base, _objectsAreEqual) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const persistingProperty = function (beforeSet = function () {}) {
    return (0, _object.computed)({
      get(key) {
        return this.get(`_${key}`);
      },
      set(key, value) {
        beforeSet.apply(this, [key, value]);
        this.set(`_${key}`, value);
        (0, _runloop.scheduleOnce)('actions', this, this.rewriteCookie);
        return value;
      }
    });
  };

  /**
    Session store that persists data in a cookie.
  
    By default the cookie session store uses a session cookie that expires and is
    deleted when the browser is closed. The cookie expiration period can be
    configured by setting the
    {{#crossLink "CookieStore/cookieExpirationTime:property"}}{{/crossLink}}
    property. This can be used to implement "remember me" functionality that will
    either store the session persistently or in a session cookie depending on
    whether the user opted in or not:
  
    ```js
    // app/controllers/login.js
    import Controller from '@ember/controller';
    import { inject as service } from '@ember/service';
  
    export default class LoginController extends Controller {
      @service session;
      _rememberMe = false;
  
      get rememberMe() {
        return this._rememberMe;
      }
  
      set rememberMe(value) {
        let expirationTime = value ? (14 * 24 * 60 * 60) : null;
        this.set('session.store.cookieExpirationTime', expirationTime);
        this._rememberMe = value;
      }
    }
    ```
  
    __Applications that use FastBoot must use this session store by defining the
    application session store like this:__
  
    ```js
    // app/session-stores/application.js
    import CookieStore from 'ember-simple-auth/session-stores/cookie';
  
    export default class ApplicationSessionStore extends CookieStore {}
    ```
  
    @class CookieStore
    @module ember-simple-auth/session-stores/cookie
    @extends BaseStore
    @public
  */
  var _default = _exports.default = _base.default.extend({
    _syncDataTimeout: null,
    _renewExpirationTimeout: null,
    /**
      The domain to use for the cookie, e.g., "example.com", ".example.com"
      (which includes all subdomains) or "subdomain.example.com". If not
      explicitly set, the cookie domain defaults to the domain the session was
      authenticated on.
       @property cookieDomain
      @type String
      @default null
      @public
    */
    _cookieDomain: null,
    cookieDomain: persistingProperty(),
    /**
      Allows servers to assert that a cookie ought not to be sent along with cross-site requests,
      which provides some protection against cross-site request forgery attacks (CSRF).
      Available options:
      - "Strict"
      - "Lax"
      @property sameSite
      @type String
      @default null
      @public
    */
    _sameSite: null,
    sameSite: persistingProperty(),
    /**
      The name of the cookie.
       @property cookieName
      @type String
      @default ember_simple_auth-session
      @public
    */
    _cookieName: 'ember_simple_auth-session',
    cookieName: persistingProperty(function () {
      this._oldCookieName = this._cookieName;
    }),
    /**
      The path to use for the cookie, e.g., "/", "/something".
       @property cookiePath
      @type String
      @default '/'
      @public
    */
    _cookiePath: '/',
    cookiePath: persistingProperty(),
    /**
      The expiration time for the cookie in seconds. A value of `null` will make
      the cookie a session cookie that expires and gets deleted when the browser
      is closed.
       The recommended minimum value is 90 seconds. If your value is less than
      that, the cookie may expire before its expiration time is extended
      (expiration time is extended every 60 seconds).
       @property cookieExpirationTime
      @default null
      @type Integer
      @public
    */
    _cookieExpirationTime: null,
    cookieExpirationTime: persistingProperty(function (key, value) {
      // When nulling expiry time on purpose, we need to clear the cached value.
      // Otherwise, `_calculateExpirationTime` will reuse it.
      if ((0, _utils.isNone)(value)) {
        this.get('_cookies').clear(`${this.get('cookieName')}-expiration_time`);
      } else if (value < 90) {
        (true && (0, _debug.warn)('The recommended minimum value for `cookieExpirationTime` is 90 seconds. If your value is less than that, the cookie may expire before its expiration time is extended (expiration time is extended every 60 seconds).', false, {
          id: 'ember-simple-auth.cookieExpirationTime'
        }));
      }
    }),
    _cookies: (0, _service.inject)('cookies'),
    _secureCookies() {
      if (this.get('_fastboot.isFastBoot')) {
        return this.get('_fastboot.request.protocol') === 'https:';
      }
      return window.location.protocol === 'https:';
    },
    _isPageVisible() {
      if (this.get('_fastboot.isFastBoot')) {
        return false;
      } else {
        const visibilityState = typeof document !== 'undefined' ? document.visibilityState || 'visible' : false;
        return visibilityState === 'visible';
      }
    },
    init() {
      this._super(...arguments);
      let owner = (0, _application.getOwner)(this);
      if (owner && !this.hasOwnProperty('_fastboot')) {
        this._fastboot = owner.lookup('service:fastboot');
      }
      let cachedExpirationTime = this._read(`${this.get('cookieName')}-expiration_time`);
      if (cachedExpirationTime) {
        this.set('cookieExpirationTime', parseInt(cachedExpirationTime, 10));
      }
      if (!this.get('_fastboot.isFastBoot')) {
        (0, _runloop.next)(() => {
          this._syncData().then(() => {
            this._renewExpiration();
          });
        });
      } else {
        this._renew();
      }
    },
    /**
      Persists the `data` in the cookie.
       @method persist
      @param {Object} data The data to persist
      @return {Ember.RSVP.Promise} A promise that resolves when the data has successfully been persisted and rejects otherwise.
      @public
    */
    persist(data) {
      this._lastData = data;
      data = JSON.stringify(data || {});
      let expiration = this._calculateExpirationTime();
      this._write(data, expiration);
      return _rsvp.default.resolve();
    },
    /**
      Returns all data currently stored in the cookie as a plain object.
       @method restore
      @return {Ember.RSVP.Promise} A promise that resolves with the data currently persisted in the store when the data has been restored successfully and rejects otherwise.
      @public
    */
    restore() {
      let data = this._read(this.get('cookieName'));
      if ((0, _utils.isEmpty)(data)) {
        return _rsvp.default.resolve({});
      } else {
        return _rsvp.default.resolve(JSON.parse(data));
      }
    },
    /**
      Clears the store by deleting the cookie.
       @method clear
      @return {Ember.RSVP.Promise} A promise that resolves when the store has been cleared successfully and rejects otherwise.
      @public
    */
    clear() {
      this._write('', 0);
      this._lastData = {};
      return _rsvp.default.resolve();
    },
    _read(name) {
      return this.get('_cookies').read(name) || '';
    },
    _calculateExpirationTime() {
      let cachedExpirationTime = this._read(`${this.get('cookieName')}-expiration_time`);
      cachedExpirationTime = cachedExpirationTime ? new Date().getTime() + cachedExpirationTime * 1000 : null;
      return this.get('cookieExpirationTime') ? new Date().getTime() + this.get('cookieExpirationTime') * 1000 : cachedExpirationTime;
    },
    _write(value, expiration) {
      let cookieOptions = {
        domain: this.get('cookieDomain'),
        expires: (0, _utils.isEmpty)(expiration) ? null : new Date(expiration),
        path: this.get('cookiePath'),
        secure: this._secureCookies(),
        sameSite: this.get('sameSite')
      };
      if (this._oldCookieName) {
        (0, _array.A)([this._oldCookieName, `${this._oldCookieName}-expiration_time`]).forEach(oldCookie => {
          this.get('_cookies').clear(oldCookie);
        });
        delete this._oldCookieName;
      }
      this.get('_cookies').write(this.get('cookieName'), value, cookieOptions);
      if (!(0, _utils.isEmpty)(expiration)) {
        let expirationCookieName = `${this.get('cookieName')}-expiration_time`;
        let cachedExpirationTime = this.get('_cookies').read(expirationCookieName);
        this.get('_cookies').write(expirationCookieName, this.get('cookieExpirationTime') || cachedExpirationTime, cookieOptions);
      }
    },
    _syncData() {
      return this.restore().then(data => {
        if (!(0, _objectsAreEqual.default)(data, this._lastData)) {
          this._lastData = data;
          this.trigger('sessionDataUpdated', data);
        }
        if (!_ember.default.testing) {
          (0, _runloop.cancel)(this._syncDataTimeout);
          this._syncDataTimeout = (0, _runloop.later)(this, this._syncData, 500);
        }
      });
    },
    _renew() {
      return this.restore().then(data => {
        if (!(0, _utils.isEmpty)(data) && !(data.constructor === Object && Object.keys(data).length === 0)) {
          data = (0, _utils.typeOf)(data) === 'string' ? data : JSON.stringify(data || {});
          let expiration = this._calculateExpirationTime();
          this._write(data, expiration);
        }
      });
    },
    _renewExpiration() {
      if (!_ember.default.testing) {
        (0, _runloop.cancel)(this._renewExpirationTimeout);
        this._renewExpirationTimeout = (0, _runloop.later)(this, this._renewExpiration, 60000);
      }
      if (this._isPageVisible()) {
        return this._renew();
      } else {
        return _rsvp.default.resolve();
      }
    },
    rewriteCookie() {
      // if `cookieName` has not been renamed, `oldCookieName` will be nil
      const cookieName = this._oldCookieName || this._cookieName;
      const data = this._read(cookieName);
      if ((0, _utils.isPresent)(data)) {
        const expiration = this._calculateExpirationTime();
        this._write(data, expiration);
      }
    }
  });
});
;define("ember-simple-auth/session-stores/ephemeral", ["exports", "rsvp", "ember-simple-auth/session-stores/base"], function (_exports, _rsvp, _base) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
    Session store that __persists data in memory and thus is not actually
    persistent__. It does also not synchronize the session's state across
    multiple tabs or windows as those cannot share memory. __This store is mainly
    useful for testing and will automatically be used when running tests.__
  
    @class EphemeralStore
    @module ember-simple-auth/session-stores/ephemeral
    @extends BaseStore
    @public
  */
  var _default = _exports.default = _base.default.extend({
    init() {
      this._super(...arguments);
      this.clear();
    },
    /**
      Persists `data`. This replaces all currently stored data.
       @method persist
      @param {Object} data The data to persist
      @return {Ember.RSVP.Promise} A promise that resolves when the data has successfully been persisted and rejects otherwise.
      @public
    */
    persist(data) {
      this._data = JSON.stringify(data || {});
      return _rsvp.default.resolve();
    },
    /**
      Returns all data currently stored as a plain object.
       @method restore
      @return {Ember.RSVP.Promise} A promise that resolves with the data currently persisted in the store when the data has been restored successfully and rejects otherwise.
      @public
    */
    restore() {
      const data = JSON.parse(this._data) || {};
      return _rsvp.default.resolve(data);
    },
    /**
      Clears the store.
       @method clear
      @return {Ember.RSVP.Promise} A promise that resolves when the store has been cleared successfully and rejects otherwise.
      @public
    */
    clear() {
      delete this._data;
      this._data = '{}';
      return _rsvp.default.resolve();
    }
  });
});
;define("ember-simple-auth/session-stores/local-storage", ["exports", "rsvp", "@ember/runloop", "@ember/application", "ember-simple-auth/session-stores/base", "ember-simple-auth/utils/objects-are-equal", "ember-simple-auth/utils/is-fastboot"], function (_exports, _rsvp, _runloop, _application, _base, _objectsAreEqual, _isFastboot) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
    Session store that persists data in the browser's `localStorage`.
  
    __`localStorage` is not available in Safari when running in private mode. In
    general it is better to use the
    {{#crossLink "AdaptiveStore"}}{{/crossLink}} that automatically falls back to
    the {{#crossLink "CookieStore"}}{{/crossLink}} when `localStorage` is not
    available.__
  
    __This session store does not work with FastBoot. In order to use Ember
    Simple Auth with FastBoot, configure the
    {{#crossLink "CookieStore"}}{{/crossLink}} as the application's session
    store.__
  
    @class LocalStorageStore
    @module ember-simple-auth/session-stores/local-storage
    @extends BaseStore
    @public
  */
  var _default = _exports.default = _base.default.extend({
    /**
      The `localStorage` key the store persists data in.
       @property key
      @type String
      @default 'ember_simple_auth-session'
      @public
    */
    key: 'ember_simple_auth-session',
    init() {
      this._super(...arguments);
      this._isFastBoot = this.hasOwnProperty('_isFastBoot') ? this._isFastBoot : (0, _isFastboot.default)((0, _application.getOwner)(this));
      this._boundHandler = (0, _runloop.bind)(this, this._handleStorageEvent);
      if (!this.get('_isFastBoot')) {
        window.addEventListener('storage', this._boundHandler);
      }
    },
    willDestroy() {
      if (!this.get('_isFastBoot')) {
        window.removeEventListener('storage', this._boundHandler);
      }
    },
    /**
      Persists the `data` in the `localStorage`.
       @method persist
      @param {Object} data The data to persist
      @return {Ember.RSVP.Promise} A promise that resolves when the data has successfully been persisted and rejects otherwise.
      @public
    */
    persist(data) {
      this._lastData = data;
      data = JSON.stringify(data || {});
      localStorage.setItem(this.key, data);
      return _rsvp.default.resolve();
    },
    /**
      Returns all data currently stored in the `localStorage` as a plain object.
       @method restore
      @return {Ember.RSVP.Promise} A promise that resolves with the data currently persisted in the store when the data has been restored successfully and rejects otherwise.
      @public
    */
    restore() {
      let data = localStorage.getItem(this.key);
      return _rsvp.default.resolve(JSON.parse(data) || {});
    },
    /**
      Clears the store by deleting the
      {{#crossLink "LocalStorageStore/key:property"}}{{/crossLink}} from
      `localStorage`.
       @method clear
      @return {Ember.RSVP.Promise} A promise that resolves when the store has been cleared successfully and rejects otherwise.
      @public
    */
    clear() {
      localStorage.removeItem(this.key);
      this._lastData = {};
      return _rsvp.default.resolve();
    },
    _handleStorageEvent(e) {
      if (e.key === this.get('key')) {
        this.restore().then(data => {
          if (!(0, _objectsAreEqual.default)(data, this._lastData)) {
            this._lastData = data;
            this.trigger('sessionDataUpdated', data);
          }
        });
      }
    }
  });
});
;define("ember-simple-auth/session-stores/session-storage", ["exports", "rsvp", "@ember/runloop", "@ember/application", "ember-simple-auth/session-stores/base", "ember-simple-auth/utils/objects-are-equal", "ember-simple-auth/utils/is-fastboot"], function (_exports, _rsvp, _runloop, _application, _base, _objectsAreEqual, _isFastboot) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
    Session store that persists data in the browser's `sessionStorage`.
  
    __`sessionStorage` is not available in Safari when running in private mode.__
  
    __This session store does not work with FastBoot. In order to use Ember
    Simple Auth with FastBoot, configure the
    {{#crossLink "CookieStore"}}{{/crossLink}} as the application's session
    store.__
  
    @class SessionStorageStore
    @module ember-simple-auth/session-stores/session-storage
    @extends BaseStore
    @public
  */
  var _default = _exports.default = _base.default.extend({
    /**
      The `sessionStorage` key the store persists data in.
       @property key
      @type String
      @default 'ember_simple_auth-session'
      @public
    */
    key: 'ember_simple_auth-session',
    init() {
      this._super(...arguments);
      this._isFastBoot = this.hasOwnProperty('_isFastBoot') ? this._isFastBoot : (0, _isFastboot.default)((0, _application.getOwner)(this));
      if (!this.get('_isFastBoot')) {
        window.addEventListener('storage', (0, _runloop.bind)(this, this._handleStorageEvent));
      }
    },
    willDestroy() {
      if (!this.get('_isFastBoot')) {
        window.removeEventListener('storage', (0, _runloop.bind)(this, this._handleStorageEvent));
      }
    },
    /**
      Persists the `data` in the `sessionStorage`.
       @method persist
      @param {Object} data The data to persist
      @return {Ember.RSVP.Promise} A promise that resolves when the data has successfully been persisted and rejects otherwise.
      @public
    */
    persist(data) {
      this._lastData = data;
      data = JSON.stringify(data || {});
      sessionStorage.setItem(this.key, data);
      return _rsvp.default.resolve();
    },
    /**
      Returns all data currently stored in the `sessionStorage` as a plain object.
       @method restore
      @return {Ember.RSVP.Promise} A promise that resolves with the data currently persisted in the store when the data has been restored successfully and rejects otherwise.
      @public
    */
    restore() {
      let data = sessionStorage.getItem(this.key);
      return _rsvp.default.resolve(JSON.parse(data) || {});
    },
    /**
      Clears the store by deleting the
      {{#crossLink "sessionStorageStore/key:property"}}{{/crossLink}} from
      `sessionStorage`.
       @method clear
      @return {Ember.RSVP.Promise} A promise that resolves when the store has been cleared successfully and rejects otherwise.
      @public
    */
    clear() {
      sessionStorage.removeItem(this.key);
      this._lastData = {};
      return _rsvp.default.resolve();
    },
    _handleStorageEvent(e) {
      if (e.key === this.get('key')) {
        this.restore().then(data => {
          if (!(0, _objectsAreEqual.default)(data, this._lastData)) {
            this._lastData = data;
            this.trigger('sessionDataUpdated', data);
          }
        });
      }
    }
  });
});
;define("ember-simple-auth/utils/assign", ["exports", "@ember/polyfills"], function (_exports, _polyfills) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = Object.assign || _polyfills.assign;
});
;define("ember-simple-auth/utils/inject", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _default;
  function _default(registry, factoryNameOrType, property, injectionName) {
    const inject = registry.inject || registry.injection;
    inject.call(registry, factoryNameOrType, property, injectionName);
  }
});
;define("ember-simple-auth/utils/is-fastboot", ["exports", "@ember/debug", "@ember/application/instance"], function (_exports, _debug, _instance) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = isFastBoot;
  /* eslint-disable no-unused-vars */
  // @ts-check

  function isFastBoot(owner) {
    (true && !(owner && typeof owner.lookup === 'function') && (0, _debug.assert)('You must pass in an owner to isFastBoot!', owner && typeof owner.lookup === 'function'));
    const fastboot = owner.lookup('service:fastboot');
    return fastboot ? fastboot.get('isFastBoot') : false;
  }
});
;define("ember-simple-auth/utils/location", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  class LocationUtil {
    constructor() {
      _defineProperty(this, "location", window.location);
    }
    replace(...args) {
      this.location.replace(...args);
    }
  }
  const location = new LocationUtil();
  var _default = _exports.default = location;
});
;define("ember-simple-auth/utils/objects-are-equal", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = objectsAreEqual;
  function objectsAreEqual(a, b) {
    function compare(x, y) {
      let property;
      if (isNaN(x) && isNaN(y) && typeof x === 'number' && typeof y === 'number') {
        return true;
      }
      if (x === y) {
        return true;
      }
      if (!(x instanceof Object && y instanceof Object)) {
        return false;
      }
      for (property in y) {
        if (y.hasOwnProperty(property) !== x.hasOwnProperty(property)) {
          return false;
        } else if (typeof y[property] !== typeof x[property]) {
          return false;
        }
      }
      for (property in x) {
        if (y.hasOwnProperty(property) !== x.hasOwnProperty(property)) {
          return false;
        } else if (typeof y[property] !== typeof x[property]) {
          return false;
        }
        switch (typeof x[property]) {
          case 'object':
            if (!compare(x[property], y[property])) {
              return false;
            }
            break;
          default:
            if (x[property] !== y[property]) {
              return false;
            }
            break;
        }
      }
      return true;
    }
    return compare(a, b);
  }
});
;define("ember-style-modifier/modifiers/style", ["exports", "ember-modifier", "@ember/string", "@ember/debug", "@ember/utils"], function (_exports, _emberModifier, _string, _debug, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  function isObject(o) {
    return typeof o === 'object' && Boolean(o);
  }
  class StyleModifier extends _emberModifier.default {
    /**
     * Returns a two-dimensional array, like:
     *
     * ```js
     * [
     *   ['font-size', '16px'],
     *   ['text-align', 'center'],
     *   ['color', 'red']
     * ]
     * ```
     *
     * This data structure is slightly faster to process than an object / dictionary.
     */
    getStyles(positional, named) {
      // This is a workaround for the missing `Array#flat` in IE11.
      return [].concat(...[...positional.filter(isObject), named].map(obj => Object.entries(obj).map(([k, v]) => [(0, _string.dasherize)(k), v])));
    }
    setStyles(element, newStyles) {
      const rulesToRemove = this._oldStyles || new Set();
      newStyles.forEach(([property, value]) => {
        (true && !(typeof value === 'undefined' || (0, _utils.typeOf)(value) === 'string') && (0, _debug.assert)(`Your given value for property '${property}' is ${value} (${(0, _utils.typeOf)(value)}). ` + 'Accepted types are string and undefined. Please change accordingly.', typeof value === 'undefined' || (0, _utils.typeOf)(value) === 'string')); // priority must be specified as separate argument
        // value must not contain "!important"
        let priority = '';
        if (value && value.includes('!important')) {
          priority = 'important';
          value = value.replace('!important', '');
        }

        // support camelCase property name
        property = (0, _string.dasherize)(property);

        // update CSSOM
        element.style.setProperty(property, value, priority);

        // should not remove rules that have been updated in this cycle
        rulesToRemove.delete(property);
      });

      // remove rules that were present in last cycle but aren't present in this one
      rulesToRemove.forEach(rule => element.style.removeProperty(rule));

      // cache styles that in this rendering cycle for the next one
      this._oldStyles = new Set(newStyles.map(e => e[0]));
    }
    modify(element, positional, named) {
      this.setStyles(element, this.getStyles(positional, named));
    }
  }
  _exports.default = StyleModifier;
});
;define("ember-test-waiters/index", ["exports", "@ember/debug", "@ember/test-waiters"], function (_exports, _debug, _testWaiters) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.keys(_testWaiters).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (key in _exports && _exports[key] === _testWaiters[key]) return;
    Object.defineProperty(_exports, key, {
      enumerable: true,
      get: function () {
        return _testWaiters[key];
      }
    });
  });
  (true && !(false) && (0, _debug.deprecate)('Importing from ember-test-waiters is deprecated. Please import from @ember/test-waiters', false, {
    id: 'ember-test-waiters-legacy-module-name',
    until: '3.0.0',
    for: 'ember-test-waiters',
    since: {
      enabled: '2.2.0'
    }
  }));
});
;define("ember-websockets/helpers", ["exports", "urijs"], function (_exports, _urijs) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.cleanURL = cleanURL;
  _exports.normalizeURL = normalizeURL;
  0; //eaimeta@70e063a35619d71f0,"urijs"eaimeta@70e063a35619d71f
  /*
   * The native websocket object will transform urls without a pathname to have just a /.
   * As an example: ws://localhost:8080 would actually be ws://localhost:8080/ but ws://example.com/foo would not
   * change. This function does this transformation to stay inline with the native websocket implementation.
   */
  function normalizeURL(url) {
    const parsedUrl = new _urijs.default(url);
    const path = parsedUrl.path();
    const query = parsedUrl.query();
    if (path === '/') {
      if (query === '' && url.slice(-1) !== '/') {
        return url + '/';
      }
      if (query !== '' && url.indexOf('/?') === -1) {
        return url.replace('?', '/?');
      }
    }
    return url;
  }

  /*
   * Since the url will be used as a key will need to make sure that it does not
   * contain '.' as it will throw ember off
   */
  function cleanURL(url) {
    return url.replace(/\./g, '');
  }
});
;define("ember-websockets/helpers/socketio-proxy", ["exports", "@ember/debug", "@ember/object/proxy", "@ember/runloop"], function (_exports, _debug, _proxy, _runloop) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"@ember/debug",0,"@ember/object/proxy",0,"@ember/runloop"eaimeta@70e063a35619d71f
  var _default = _exports.default = _proxy.default.extend({
    /*
     * {
     *    url: 'String'
     *    type: 'String'
     *    callback: The function to envoke
     *    context: The context of the function
     *    ref: The actual callback function with is given to socketio
     * }
     */
    listeners: null,
    init() {
      this._super(...arguments);
      this.listeners = [];
    },
    /*
     * This method simply passes the arguments to the socketio on method except it binds the callback function to
     * the run loop.
     */
    on(type, callback, context) {
      (true && !(typeof callback === 'function') && (0, _debug.assert)('The second argument must be a function.', typeof callback === 'function'));
      const boundCallback = (0, _runloop.bind)(context, callback);
      this.listeners.push({
        url: this.socket.io.uri,
        type,
        callback,
        context,
        ref: boundCallback
      });
      this.socket.on(type, boundCallback);
    },
    off(type, callback) {
      (true && !(typeof callback === 'function') && (0, _debug.assert)('The second argument must be a function.', typeof callback === 'function'));
      const listeners = this.listeners.filter(listener => listener.callback === callback && listener.url === this.socket.io.uri && listener.type === type);
      if (listeners) {
        listeners.forEach(item => this.socket.off(type, item.ref));
      }
      this.listeners = this.listeners.filter(l => listeners.indexOf(l) === -1);
    },
    /*
     * This method passes the argument to the socketio emit method.
     */
    emit() {
      this.socket.emit.apply(this.socket, arguments);
    },
    close() {
      this.listeners = this.listeners.filter(listener => listener.url === this.socket.io.uri);
      this.socket.close.apply(this.socket, arguments);
    },
    send() {
      this.socket.send.apply(this.socket, arguments);
    },
    connect() {
      this.socket.connect.apply(this.socket, arguments);
    }
  });
});
;define("ember-websockets/helpers/websocket-proxy", ["exports", "@ember/runloop", "@ember/debug", "@ember/object/proxy"], function (_exports, _runloop, _debug, _proxy) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"@ember/runloop",0,"@ember/debug",0,"@ember/object/proxy"eaimeta@70e063a35619d71f
  const events = ['close', 'error', 'message', 'open'];
  const {
    filter,
    indexOf,
    forEach
  } = Array.prototype;
  var _default = _exports.default = _proxy.default.extend({
    /*
     * {
     *    url: 'String'
     *    type: 'String' (such as 'open', 'message', 'close', and 'error')
     *    callback: The function to envoke
     *    context: The context of the function
     * }
     */
    listeners: null,
    init() {
      this._super(...arguments);
      this.listeners = [];
      this.setupInternalListeners();
    },
    /*
     * Adds a callback function into the listeners array which will
     * be invoked later whenever a given `type` event happens.
     *
     * type: must be either 'open', 'message', 'close', 'error'
     */
    on(type, callback, context) {
      (true && !(indexOf.call(events, type) !== -1) && (0, _debug.assert)(`${type} is not a recognized event name. Please use on of the following: ${events.join(', ')}`, indexOf.call(events, type) !== -1));
      (true && !(typeof callback === 'function') && (0, _debug.assert)('The second argument must be a function.', typeof callback === 'function'));
      this.listeners.push({
        url: this.socket.url,
        type,
        callback,
        context
      });
    },
    /*
     * Removes a callback function from the listeners array. This callback
     * will not longer be invoked when the given `type` event happens.
     */
    off(type, callback) {
      this.listeners = filter.call(this.listeners, listeners => !(listeners.callback === callback && listeners.type === type));
    },
    /*
     * Message is the message which will be passed into the native websockets send method
     * and shouldStringify is a boolean which determines if we should call JSON.stringify on
     * the message.
     */
    send(message, shouldStringify = false) {
      if (shouldStringify && JSON && JSON.stringify) {
        message = JSON.stringify(message);
      }
      (true && !(this.readyState() === WebSocket.OPEN) && (0, _debug.assert)('Cannot send message to the websocket while it is not open.', this.readyState() === WebSocket.OPEN));
      this.socket.send(message);
    },
    close() {
      this.socket.close();
    },
    reconnect() {
      this.set('socket', new WebSocket(this.socket.url, this.protocols));
      this.setupInternalListeners();
    },
    setupInternalListeners() {
      forEach.call(events, eventName => {
        this.socket[`on${eventName}`] = event => {
          (0, _runloop.run)(() => {
            var activeListeners = filter.call(this.listeners, listener => {
              return listener.url === event.currentTarget.url && listener.type === eventName;
            });

            // TODO: filter active listeners for contexts that are not destroyed
            forEach.call(activeListeners, item => {
              if (item.context) {
                item.callback.call(item.context, event);
              } else {
                item.callback(event);
              }
            });
          });
        };
      });
    },
    /*
     * A helper method to get access to the readyState of the websocket.
     */
    readyState() {
      return this.socket.readyState;
    }
  });
});
;define("ember-websockets/services/socket-io", ["exports", "ember-websockets/services/websockets", "ember-websockets/helpers/socketio-proxy"], function (_exports, _websockets, _socketioProxy) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"ember-websockets/services/websockets",0,"ember-websockets/helpers/socketio-proxy"eaimeta@70e063a35619d71f
  class SocketIOService extends _websockets.default {
    isWebSocketOpen(socket) {
      return socket.io.readyState !== 'closed';
    }
    createSocket(url, options = {}) {
      const newSocketIO = io(url, options);
      newSocketIO.connect();
      return newSocketIO;
    }
    createProxy(socket) {
      return _socketioProxy.default.create({
        content: this,
        socket
      });
    }
  }
  _exports.default = SocketIOService;
});
;define("ember-websockets/services/websockets", ["exports", "@ember/service", "@ember/object", "ember-websockets/helpers/websocket-proxy", "ember-websockets/helpers"], function (_exports, _service, _object, _websocketProxy, _helpers) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _class;
  0; //eaimeta@70e063a35619d71f0,"@ember/service",0,"@ember/object",0,"ember-websockets/helpers/websocket-proxy",0,"ember-websockets/helpers"eaimeta@70e063a35619d71f
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  let WebSocketService = _exports.default = (_dec = (0, _object.computed)(), (_class = class WebSocketService extends _service.default {
    /*
      A hash of open websocket connections. This
      allows multiple components to share the same connection.
       {
        'websocket-url': WebSocket Proxy object
      }
    */
    get sockets() {
      return {};
    }

    /*
      socketFor returns a websocket proxy object. On this object there is a property `socket`
      which contains the actual websocket object. This websocket object is cached based off of the url meaning
      multiple requests for the same socket will return the same object.
    */
    socketFor(url, protocols = []) {
      /*
        Websockets allows either a string or array of strings to be passed as the second argument.
        Normalize both cases into an array of strings so we can just deal with arrays.
      */
      if (typeof protocols === 'string') {
        protocols = [protocols];
      }

      /*
        Normalize the url as native websockets add a / to the end of the url:
        http://example.com:8000 becomes: http://example.com:8000/
         Since the url will be used as a key will need to make sure that it does not
        contain '.' as it will throw ember off
      */
      const normalizedUrl = (0, _helpers.normalizeURL)(url);
      const cleanedUrl = (0, _helpers.cleanURL)(normalizedUrl);

      /*
       */
      const existingProxy = (0, _object.get)(this, `sockets.${cleanedUrl}`);
      if (existingProxy && this.isWebSocketOpen(existingProxy.socket)) {
        return existingProxy;
      }

      /*
        we can get to this place if the websocket has been closed and we are trying to reopen
        or we are creating a proxy for the first time
      */
      const newWebSocket = this.createSocket(normalizedUrl, protocols);
      if (existingProxy) {
        /*
          If there is an existing socket in place we simply update the websocket object and not
          the whole proxy as we dont want to destroy the previous listeners.
        */
        (0, _object.set)(existingProxy, 'socket', newWebSocket);
        return existingProxy;
      }
      const newProxy = this.createProxy(newWebSocket, protocols);
      (0, _object.set)(this, `sockets.${cleanedUrl}`, newProxy);
      return newProxy;
    }
    closeSocketFor(url) {
      const cleanedUrl = (0, _helpers.cleanURL)((0, _helpers.normalizeURL)(url));
      const existingSocket = (0, _object.get)(this, `sockets.${cleanedUrl}`);
      if (existingSocket) {
        existingSocket.socket.close();
      }
      delete this.sockets[cleanedUrl];
    }
    isWebSocketOpen(websocket) {
      return websocket.readyState !== WebSocket.CLOSED;
    }
    createSocket(url, options) {
      return new WebSocket(url, options);
    }
    createProxy(socket, protocols) {
      return _websocketProxy.default.create({
        content: this,
        protocols,
        socket
      });
    }
  }, (_applyDecoratedDescriptor(_class.prototype, "sockets", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "sockets"), _class.prototype)), _class));
});
;define("tracked-toolbox/index", ["exports", "@ember/debug", "@ember/object", "@glimmer/tracking", "@glimmer/tracking/primitives/cache"], function (_exports, _debug, _object, _tracking, _cache) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.cached = cached;
  _exports.dedupeTracked = dedupeTracked;
  _exports.localCopy = localCopy;
  _exports.trackedReset = trackedReset;
  var _class, _descriptor;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let Meta = (_class = class Meta {
    constructor() {
      _defineProperty(this, "prevRemote", void 0);
      _defineProperty(this, "peek", void 0);
      _initializerDefineProperty(this, "value", _descriptor, this);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "value", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
  function getOrCreateMeta(instance, metas, initializer) {
    let meta = metas.get(instance);
    if (meta === undefined) {
      meta = new Meta();
      metas.set(instance, meta);
      meta.value = meta.peek = typeof initializer === 'function' ? initializer.call(instance) : initializer;
    }
    return meta;
  }
  function localCopy(memo, initializer) {
    (true && !(typeof memo === 'string' || typeof memo === 'function') && (0, _debug.assert)(`@localCopy() must be given a memo path or memo function as its first argument, received \`${String(memo)}\``, typeof memo === 'string' || typeof memo === 'function'));
    (true && !(typeof memo !== 'function') && (0, _debug.deprecate)('Using a memoization function with @localCopy has been deprecated. Consider using @trackedReset instead.', typeof memo !== 'function', {
      id: 'local-copy-memo-fn',
      for: 'tracked-toolbox',
      since: '1.2.3',
      until: '2.0.0'
    }));
    let metas = new WeakMap();
    return (_prototype, key) => {
      let memoFn = typeof memo === 'function' ? (obj, last) => memo.call(obj, obj, key, last) : obj => (0, _object.get)(obj, memo);
      return {
        get() {
          let meta = getOrCreateMeta(this, metas, initializer);
          let {
            prevRemote
          } = meta;
          let incomingValue = memoFn(this, prevRemote);
          if (prevRemote !== incomingValue) {
            // If the incoming value is not the same as the previous incoming value,
            // update the local value to match the new incoming value, and update
            // the previous incoming value.
            meta.value = meta.prevRemote = incomingValue;
          }
          return meta.value;
        },
        set(value) {
          if (!metas.has(this)) {
            let meta = getOrCreateMeta(this, metas, initializer);
            meta.prevRemote = memoFn(this);
            meta.value = value;
            return;
          }
          getOrCreateMeta(this, metas, initializer).value = value;
        }
      };
    };
  }
  function trackedReset(memoOrConfig) {
    (true && !(typeof memoOrConfig === 'string' || typeof memoOrConfig === 'function' || typeof memoOrConfig === 'object' && memoOrConfig !== null && memoOrConfig.memo !== undefined) && (0, _debug.assert)(`@trackedReset() must be given a memo path, a memo function, or config object with a memo path or function as its first argument, received \`${String(memoOrConfig)}\``, typeof memoOrConfig === 'string' || typeof memoOrConfig === 'function' || typeof memoOrConfig === 'object' && memoOrConfig !== null && memoOrConfig.memo !== undefined));
    let metas = new WeakMap();
    return (_prototype, key, desc) => {
      let memo, update;
      let initializer = desc.initializer ?? (() => undefined);
      if (typeof memoOrConfig === 'object') {
        memo = memoOrConfig.memo;
        update = memoOrConfig.update ?? initializer;
      } else {
        memo = memoOrConfig;
        update = initializer;
      }
      let memoFn = typeof memo === 'function' ? (obj, last) => memo.call(obj, obj, key, last) : obj => (0, _object.get)(obj, memo);
      return {
        get() {
          let meta = getOrCreateMeta(this, metas, initializer);
          let {
            prevRemote
          } = meta;
          let incomingValue = memoFn(this, prevRemote);
          if (incomingValue !== prevRemote) {
            meta.prevRemote = incomingValue;
            meta.value = meta.peek = update.call(this, this, key, meta.peek);
          }
          return meta.value;
        },
        set(value) {
          getOrCreateMeta(this, metas, initializer).value = value;
        }
      };
    };
  }
  function cached(target, key, value) {
    (true && !(value && value.get) && (0, _debug.assert)('@cached can only be used on getters', value && value.get));
    let {
      get,
      set
    } = value;
    let caches = new WeakMap();
    return {
      get() {
        let cache = caches.get(this);
        if (cache === undefined) {
          cache = (0, _cache.createCache)(get.bind(this));
          caches.set(this, cache);
        }
        return (0, _cache.getValue)(cache);
      },
      set
    };
  }
  function dedupeTracked() {
    let comparator;
    const descriptor = function (target, key, desc) {
      let {
        initializer
      } = desc;
      let {
        get,
        set
      } = (0, _tracking.tracked)(target, key, desc);
      let values = new WeakMap();
      return {
        get() {
          if (!values.has(this)) {
            let value = initializer?.call(this);
            values.set(this, value);
            set.call(this, value);
          }
          return get.call(this);
        },
        set(value) {
          if (!values.has(this) || !comparator(value, values.get(this))) {
            values.set(this, value);
            set.call(this, value);
          }
        }
      };
    };
    if (arguments.length === 3) {
      comparator = (a, b) => a === b;
      return descriptor(...arguments);
    }
    if (arguments.length === 1 && typeof arguments[0] === 'function') {
      comparator = arguments[0];
      return descriptor;
    }
    (true && !(false) && (0, _debug.assert)(`@dedupeTracked() can either be invoked without arguments or with one comparator function, received \`${String(arguments)}\``, false));
  }
});
;
//# sourceMappingURL=vendor.map
